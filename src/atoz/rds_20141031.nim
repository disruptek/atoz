
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Relational Database Service
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Relational Database Service</fullname> <p> </p> <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the cloud. It provides cost-efficient, resizable capacity for an industry-standard relational database and manages common database administration tasks, freeing up developers to focus on what makes their applications and businesses unique.</p> <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS is flexible: you can scale your DB instance's compute resources and storage capacity to meet your application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for the resources you use.</p> <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface you can use to manage Amazon RDS. Note that Amazon RDS is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p> <p> <b>Amazon RDS API Reference</b> </p> <ul> <li> <p>For the alphabetical list of API actions, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p> </li> <li> <p>For the alphabetical list of data types, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p> </li> <li> <p>For a list of common query parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p> </li> <li> <p>For descriptions of the error codes, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p> </li> </ul> <p> <b>Amazon RDS User Guide</b> </p> <ul> <li> <p>For a summary of the Amazon RDS interfaces, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p> </li> <li> <p>For more information about how to use the Query API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593421 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593421](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593421): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "rds"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_594031 = ref object of OpenApiRestCall_593421
proc url_PostAddRoleToDBCluster_594033(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddRoleToDBCluster_594032(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594034 = query.getOrDefault("Action")
  valid_594034 = validateParameter(valid_594034, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_594034 != nil:
    section.add "Action", valid_594034
  var valid_594035 = query.getOrDefault("Version")
  valid_594035 = validateParameter(valid_594035, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594035 != nil:
    section.add "Version", valid_594035
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594036 = header.getOrDefault("X-Amz-Date")
  valid_594036 = validateParameter(valid_594036, JString, required = false,
                                 default = nil)
  if valid_594036 != nil:
    section.add "X-Amz-Date", valid_594036
  var valid_594037 = header.getOrDefault("X-Amz-Security-Token")
  valid_594037 = validateParameter(valid_594037, JString, required = false,
                                 default = nil)
  if valid_594037 != nil:
    section.add "X-Amz-Security-Token", valid_594037
  var valid_594038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594038 = validateParameter(valid_594038, JString, required = false,
                                 default = nil)
  if valid_594038 != nil:
    section.add "X-Amz-Content-Sha256", valid_594038
  var valid_594039 = header.getOrDefault("X-Amz-Algorithm")
  valid_594039 = validateParameter(valid_594039, JString, required = false,
                                 default = nil)
  if valid_594039 != nil:
    section.add "X-Amz-Algorithm", valid_594039
  var valid_594040 = header.getOrDefault("X-Amz-Signature")
  valid_594040 = validateParameter(valid_594040, JString, required = false,
                                 default = nil)
  if valid_594040 != nil:
    section.add "X-Amz-Signature", valid_594040
  var valid_594041 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594041 = validateParameter(valid_594041, JString, required = false,
                                 default = nil)
  if valid_594041 != nil:
    section.add "X-Amz-SignedHeaders", valid_594041
  var valid_594042 = header.getOrDefault("X-Amz-Credential")
  valid_594042 = validateParameter(valid_594042, JString, required = false,
                                 default = nil)
  if valid_594042 != nil:
    section.add "X-Amz-Credential", valid_594042
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_594043 = formData.getOrDefault("RoleArn")
  valid_594043 = validateParameter(valid_594043, JString, required = true,
                                 default = nil)
  if valid_594043 != nil:
    section.add "RoleArn", valid_594043
  var valid_594044 = formData.getOrDefault("DBClusterIdentifier")
  valid_594044 = validateParameter(valid_594044, JString, required = true,
                                 default = nil)
  if valid_594044 != nil:
    section.add "DBClusterIdentifier", valid_594044
  var valid_594045 = formData.getOrDefault("FeatureName")
  valid_594045 = validateParameter(valid_594045, JString, required = false,
                                 default = nil)
  if valid_594045 != nil:
    section.add "FeatureName", valid_594045
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594046: Call_PostAddRoleToDBCluster_594031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594046.validator(path, query, header, formData, body)
  let scheme = call_594046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594046.url(scheme.get, call_594046.host, call_594046.base,
                         call_594046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594046, url, valid)

proc call*(call_594047: Call_PostAddRoleToDBCluster_594031; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"; FeatureName: string = ""): Recallable =
  ## postAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Version: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  var query_594048 = newJObject()
  var formData_594049 = newJObject()
  add(formData_594049, "RoleArn", newJString(RoleArn))
  add(query_594048, "Action", newJString(Action))
  add(formData_594049, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594048, "Version", newJString(Version))
  add(formData_594049, "FeatureName", newJString(FeatureName))
  result = call_594047.call(nil, query_594048, nil, formData_594049, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_594031(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_594032, base: "/",
    url: url_PostAddRoleToDBCluster_594033, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_593758 = ref object of OpenApiRestCall_593421
proc url_GetAddRoleToDBCluster_593760(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddRoleToDBCluster_593759(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: JString (required)
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_593872 = query.getOrDefault("DBClusterIdentifier")
  valid_593872 = validateParameter(valid_593872, JString, required = true,
                                 default = nil)
  if valid_593872 != nil:
    section.add "DBClusterIdentifier", valid_593872
  var valid_593873 = query.getOrDefault("RoleArn")
  valid_593873 = validateParameter(valid_593873, JString, required = true,
                                 default = nil)
  if valid_593873 != nil:
    section.add "RoleArn", valid_593873
  var valid_593887 = query.getOrDefault("Action")
  valid_593887 = validateParameter(valid_593887, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_593887 != nil:
    section.add "Action", valid_593887
  var valid_593888 = query.getOrDefault("FeatureName")
  valid_593888 = validateParameter(valid_593888, JString, required = false,
                                 default = nil)
  if valid_593888 != nil:
    section.add "FeatureName", valid_593888
  var valid_593889 = query.getOrDefault("Version")
  valid_593889 = validateParameter(valid_593889, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593889 != nil:
    section.add "Version", valid_593889
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_593890 = header.getOrDefault("X-Amz-Date")
  valid_593890 = validateParameter(valid_593890, JString, required = false,
                                 default = nil)
  if valid_593890 != nil:
    section.add "X-Amz-Date", valid_593890
  var valid_593891 = header.getOrDefault("X-Amz-Security-Token")
  valid_593891 = validateParameter(valid_593891, JString, required = false,
                                 default = nil)
  if valid_593891 != nil:
    section.add "X-Amz-Security-Token", valid_593891
  var valid_593892 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593892 = validateParameter(valid_593892, JString, required = false,
                                 default = nil)
  if valid_593892 != nil:
    section.add "X-Amz-Content-Sha256", valid_593892
  var valid_593893 = header.getOrDefault("X-Amz-Algorithm")
  valid_593893 = validateParameter(valid_593893, JString, required = false,
                                 default = nil)
  if valid_593893 != nil:
    section.add "X-Amz-Algorithm", valid_593893
  var valid_593894 = header.getOrDefault("X-Amz-Signature")
  valid_593894 = validateParameter(valid_593894, JString, required = false,
                                 default = nil)
  if valid_593894 != nil:
    section.add "X-Amz-Signature", valid_593894
  var valid_593895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593895 = validateParameter(valid_593895, JString, required = false,
                                 default = nil)
  if valid_593895 != nil:
    section.add "X-Amz-SignedHeaders", valid_593895
  var valid_593896 = header.getOrDefault("X-Amz-Credential")
  valid_593896 = validateParameter(valid_593896, JString, required = false,
                                 default = nil)
  if valid_593896 != nil:
    section.add "X-Amz-Credential", valid_593896
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593919: Call_GetAddRoleToDBCluster_593758; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593919.validator(path, query, header, formData, body)
  let scheme = call_593919.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593919.url(scheme.get, call_593919.host, call_593919.base,
                         call_593919.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593919, url, valid)

proc call*(call_593990: Call_GetAddRoleToDBCluster_593758;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "AddRoleToDBCluster"; FeatureName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: string (required)
  var query_593991 = newJObject()
  add(query_593991, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_593991, "RoleArn", newJString(RoleArn))
  add(query_593991, "Action", newJString(Action))
  add(query_593991, "FeatureName", newJString(FeatureName))
  add(query_593991, "Version", newJString(Version))
  result = call_593990.call(nil, query_593991, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_593758(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_593759, base: "/",
    url: url_GetAddRoleToDBCluster_593760, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToDBInstance_594068 = ref object of OpenApiRestCall_593421
proc url_PostAddRoleToDBInstance_594070(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddRoleToDBInstance_594069(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594071 = query.getOrDefault("Action")
  valid_594071 = validateParameter(valid_594071, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_594071 != nil:
    section.add "Action", valid_594071
  var valid_594072 = query.getOrDefault("Version")
  valid_594072 = validateParameter(valid_594072, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594072 != nil:
    section.add "Version", valid_594072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594073 = header.getOrDefault("X-Amz-Date")
  valid_594073 = validateParameter(valid_594073, JString, required = false,
                                 default = nil)
  if valid_594073 != nil:
    section.add "X-Amz-Date", valid_594073
  var valid_594074 = header.getOrDefault("X-Amz-Security-Token")
  valid_594074 = validateParameter(valid_594074, JString, required = false,
                                 default = nil)
  if valid_594074 != nil:
    section.add "X-Amz-Security-Token", valid_594074
  var valid_594075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594075 = validateParameter(valid_594075, JString, required = false,
                                 default = nil)
  if valid_594075 != nil:
    section.add "X-Amz-Content-Sha256", valid_594075
  var valid_594076 = header.getOrDefault("X-Amz-Algorithm")
  valid_594076 = validateParameter(valid_594076, JString, required = false,
                                 default = nil)
  if valid_594076 != nil:
    section.add "X-Amz-Algorithm", valid_594076
  var valid_594077 = header.getOrDefault("X-Amz-Signature")
  valid_594077 = validateParameter(valid_594077, JString, required = false,
                                 default = nil)
  if valid_594077 != nil:
    section.add "X-Amz-Signature", valid_594077
  var valid_594078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594078 = validateParameter(valid_594078, JString, required = false,
                                 default = nil)
  if valid_594078 != nil:
    section.add "X-Amz-SignedHeaders", valid_594078
  var valid_594079 = header.getOrDefault("X-Amz-Credential")
  valid_594079 = validateParameter(valid_594079, JString, required = false,
                                 default = nil)
  if valid_594079 != nil:
    section.add "X-Amz-Credential", valid_594079
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594080 = formData.getOrDefault("DBInstanceIdentifier")
  valid_594080 = validateParameter(valid_594080, JString, required = true,
                                 default = nil)
  if valid_594080 != nil:
    section.add "DBInstanceIdentifier", valid_594080
  var valid_594081 = formData.getOrDefault("RoleArn")
  valid_594081 = validateParameter(valid_594081, JString, required = true,
                                 default = nil)
  if valid_594081 != nil:
    section.add "RoleArn", valid_594081
  var valid_594082 = formData.getOrDefault("FeatureName")
  valid_594082 = validateParameter(valid_594082, JString, required = true,
                                 default = nil)
  if valid_594082 != nil:
    section.add "FeatureName", valid_594082
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594083: Call_PostAddRoleToDBInstance_594068; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_594083.validator(path, query, header, formData, body)
  let scheme = call_594083.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594083.url(scheme.get, call_594083.host, call_594083.base,
                         call_594083.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594083, url, valid)

proc call*(call_594084: Call_PostAddRoleToDBInstance_594068;
          DBInstanceIdentifier: string; RoleArn: string; FeatureName: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  var query_594085 = newJObject()
  var formData_594086 = newJObject()
  add(formData_594086, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_594086, "RoleArn", newJString(RoleArn))
  add(query_594085, "Action", newJString(Action))
  add(query_594085, "Version", newJString(Version))
  add(formData_594086, "FeatureName", newJString(FeatureName))
  result = call_594084.call(nil, query_594085, nil, formData_594086, nil)

var postAddRoleToDBInstance* = Call_PostAddRoleToDBInstance_594068(
    name: "postAddRoleToDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_PostAddRoleToDBInstance_594069, base: "/",
    url: url_PostAddRoleToDBInstance_594070, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBInstance_594050 = ref object of OpenApiRestCall_593421
proc url_GetAddRoleToDBInstance_594052(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddRoleToDBInstance_594051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   Action: JString (required)
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_594053 = query.getOrDefault("RoleArn")
  valid_594053 = validateParameter(valid_594053, JString, required = true,
                                 default = nil)
  if valid_594053 != nil:
    section.add "RoleArn", valid_594053
  var valid_594054 = query.getOrDefault("Action")
  valid_594054 = validateParameter(valid_594054, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_594054 != nil:
    section.add "Action", valid_594054
  var valid_594055 = query.getOrDefault("FeatureName")
  valid_594055 = validateParameter(valid_594055, JString, required = true,
                                 default = nil)
  if valid_594055 != nil:
    section.add "FeatureName", valid_594055
  var valid_594056 = query.getOrDefault("Version")
  valid_594056 = validateParameter(valid_594056, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594056 != nil:
    section.add "Version", valid_594056
  var valid_594057 = query.getOrDefault("DBInstanceIdentifier")
  valid_594057 = validateParameter(valid_594057, JString, required = true,
                                 default = nil)
  if valid_594057 != nil:
    section.add "DBInstanceIdentifier", valid_594057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594058 = header.getOrDefault("X-Amz-Date")
  valid_594058 = validateParameter(valid_594058, JString, required = false,
                                 default = nil)
  if valid_594058 != nil:
    section.add "X-Amz-Date", valid_594058
  var valid_594059 = header.getOrDefault("X-Amz-Security-Token")
  valid_594059 = validateParameter(valid_594059, JString, required = false,
                                 default = nil)
  if valid_594059 != nil:
    section.add "X-Amz-Security-Token", valid_594059
  var valid_594060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594060 = validateParameter(valid_594060, JString, required = false,
                                 default = nil)
  if valid_594060 != nil:
    section.add "X-Amz-Content-Sha256", valid_594060
  var valid_594061 = header.getOrDefault("X-Amz-Algorithm")
  valid_594061 = validateParameter(valid_594061, JString, required = false,
                                 default = nil)
  if valid_594061 != nil:
    section.add "X-Amz-Algorithm", valid_594061
  var valid_594062 = header.getOrDefault("X-Amz-Signature")
  valid_594062 = validateParameter(valid_594062, JString, required = false,
                                 default = nil)
  if valid_594062 != nil:
    section.add "X-Amz-Signature", valid_594062
  var valid_594063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594063 = validateParameter(valid_594063, JString, required = false,
                                 default = nil)
  if valid_594063 != nil:
    section.add "X-Amz-SignedHeaders", valid_594063
  var valid_594064 = header.getOrDefault("X-Amz-Credential")
  valid_594064 = validateParameter(valid_594064, JString, required = false,
                                 default = nil)
  if valid_594064 != nil:
    section.add "X-Amz-Credential", valid_594064
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594065: Call_GetAddRoleToDBInstance_594050; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_594065.validator(path, query, header, formData, body)
  let scheme = call_594065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594065.url(scheme.get, call_594065.host, call_594065.base,
                         call_594065.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594065, url, valid)

proc call*(call_594066: Call_GetAddRoleToDBInstance_594050; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   Action: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  var query_594067 = newJObject()
  add(query_594067, "RoleArn", newJString(RoleArn))
  add(query_594067, "Action", newJString(Action))
  add(query_594067, "FeatureName", newJString(FeatureName))
  add(query_594067, "Version", newJString(Version))
  add(query_594067, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_594066.call(nil, query_594067, nil, nil, nil)

var getAddRoleToDBInstance* = Call_GetAddRoleToDBInstance_594050(
    name: "getAddRoleToDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_GetAddRoleToDBInstance_594051, base: "/",
    url: url_GetAddRoleToDBInstance_594052, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_594104 = ref object of OpenApiRestCall_593421
proc url_PostAddSourceIdentifierToSubscription_594106(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_594105(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594107 = query.getOrDefault("Action")
  valid_594107 = validateParameter(valid_594107, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_594107 != nil:
    section.add "Action", valid_594107
  var valid_594108 = query.getOrDefault("Version")
  valid_594108 = validateParameter(valid_594108, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594108 != nil:
    section.add "Version", valid_594108
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594109 = header.getOrDefault("X-Amz-Date")
  valid_594109 = validateParameter(valid_594109, JString, required = false,
                                 default = nil)
  if valid_594109 != nil:
    section.add "X-Amz-Date", valid_594109
  var valid_594110 = header.getOrDefault("X-Amz-Security-Token")
  valid_594110 = validateParameter(valid_594110, JString, required = false,
                                 default = nil)
  if valid_594110 != nil:
    section.add "X-Amz-Security-Token", valid_594110
  var valid_594111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594111 = validateParameter(valid_594111, JString, required = false,
                                 default = nil)
  if valid_594111 != nil:
    section.add "X-Amz-Content-Sha256", valid_594111
  var valid_594112 = header.getOrDefault("X-Amz-Algorithm")
  valid_594112 = validateParameter(valid_594112, JString, required = false,
                                 default = nil)
  if valid_594112 != nil:
    section.add "X-Amz-Algorithm", valid_594112
  var valid_594113 = header.getOrDefault("X-Amz-Signature")
  valid_594113 = validateParameter(valid_594113, JString, required = false,
                                 default = nil)
  if valid_594113 != nil:
    section.add "X-Amz-Signature", valid_594113
  var valid_594114 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594114 = validateParameter(valid_594114, JString, required = false,
                                 default = nil)
  if valid_594114 != nil:
    section.add "X-Amz-SignedHeaders", valid_594114
  var valid_594115 = header.getOrDefault("X-Amz-Credential")
  valid_594115 = validateParameter(valid_594115, JString, required = false,
                                 default = nil)
  if valid_594115 != nil:
    section.add "X-Amz-Credential", valid_594115
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_594116 = formData.getOrDefault("SourceIdentifier")
  valid_594116 = validateParameter(valid_594116, JString, required = true,
                                 default = nil)
  if valid_594116 != nil:
    section.add "SourceIdentifier", valid_594116
  var valid_594117 = formData.getOrDefault("SubscriptionName")
  valid_594117 = validateParameter(valid_594117, JString, required = true,
                                 default = nil)
  if valid_594117 != nil:
    section.add "SubscriptionName", valid_594117
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594118: Call_PostAddSourceIdentifierToSubscription_594104;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_594118.validator(path, query, header, formData, body)
  let scheme = call_594118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594118.url(scheme.get, call_594118.host, call_594118.base,
                         call_594118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594118, url, valid)

proc call*(call_594119: Call_PostAddSourceIdentifierToSubscription_594104;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594120 = newJObject()
  var formData_594121 = newJObject()
  add(formData_594121, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_594121, "SubscriptionName", newJString(SubscriptionName))
  add(query_594120, "Action", newJString(Action))
  add(query_594120, "Version", newJString(Version))
  result = call_594119.call(nil, query_594120, nil, formData_594121, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_594104(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_594105, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_594106,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_594087 = ref object of OpenApiRestCall_593421
proc url_GetAddSourceIdentifierToSubscription_594089(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_594088(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594090 = query.getOrDefault("Action")
  valid_594090 = validateParameter(valid_594090, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_594090 != nil:
    section.add "Action", valid_594090
  var valid_594091 = query.getOrDefault("SourceIdentifier")
  valid_594091 = validateParameter(valid_594091, JString, required = true,
                                 default = nil)
  if valid_594091 != nil:
    section.add "SourceIdentifier", valid_594091
  var valid_594092 = query.getOrDefault("SubscriptionName")
  valid_594092 = validateParameter(valid_594092, JString, required = true,
                                 default = nil)
  if valid_594092 != nil:
    section.add "SubscriptionName", valid_594092
  var valid_594093 = query.getOrDefault("Version")
  valid_594093 = validateParameter(valid_594093, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594093 != nil:
    section.add "Version", valid_594093
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594094 = header.getOrDefault("X-Amz-Date")
  valid_594094 = validateParameter(valid_594094, JString, required = false,
                                 default = nil)
  if valid_594094 != nil:
    section.add "X-Amz-Date", valid_594094
  var valid_594095 = header.getOrDefault("X-Amz-Security-Token")
  valid_594095 = validateParameter(valid_594095, JString, required = false,
                                 default = nil)
  if valid_594095 != nil:
    section.add "X-Amz-Security-Token", valid_594095
  var valid_594096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594096 = validateParameter(valid_594096, JString, required = false,
                                 default = nil)
  if valid_594096 != nil:
    section.add "X-Amz-Content-Sha256", valid_594096
  var valid_594097 = header.getOrDefault("X-Amz-Algorithm")
  valid_594097 = validateParameter(valid_594097, JString, required = false,
                                 default = nil)
  if valid_594097 != nil:
    section.add "X-Amz-Algorithm", valid_594097
  var valid_594098 = header.getOrDefault("X-Amz-Signature")
  valid_594098 = validateParameter(valid_594098, JString, required = false,
                                 default = nil)
  if valid_594098 != nil:
    section.add "X-Amz-Signature", valid_594098
  var valid_594099 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594099 = validateParameter(valid_594099, JString, required = false,
                                 default = nil)
  if valid_594099 != nil:
    section.add "X-Amz-SignedHeaders", valid_594099
  var valid_594100 = header.getOrDefault("X-Amz-Credential")
  valid_594100 = validateParameter(valid_594100, JString, required = false,
                                 default = nil)
  if valid_594100 != nil:
    section.add "X-Amz-Credential", valid_594100
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594101: Call_GetAddSourceIdentifierToSubscription_594087;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_594101.validator(path, query, header, formData, body)
  let scheme = call_594101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594101.url(scheme.get, call_594101.host, call_594101.base,
                         call_594101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594101, url, valid)

proc call*(call_594102: Call_GetAddSourceIdentifierToSubscription_594087;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Version: string (required)
  var query_594103 = newJObject()
  add(query_594103, "Action", newJString(Action))
  add(query_594103, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_594103, "SubscriptionName", newJString(SubscriptionName))
  add(query_594103, "Version", newJString(Version))
  result = call_594102.call(nil, query_594103, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_594087(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_594088, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_594089,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_594139 = ref object of OpenApiRestCall_593421
proc url_PostAddTagsToResource_594141(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddTagsToResource_594140(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594142 = query.getOrDefault("Action")
  valid_594142 = validateParameter(valid_594142, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_594142 != nil:
    section.add "Action", valid_594142
  var valid_594143 = query.getOrDefault("Version")
  valid_594143 = validateParameter(valid_594143, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594143 != nil:
    section.add "Version", valid_594143
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594144 = header.getOrDefault("X-Amz-Date")
  valid_594144 = validateParameter(valid_594144, JString, required = false,
                                 default = nil)
  if valid_594144 != nil:
    section.add "X-Amz-Date", valid_594144
  var valid_594145 = header.getOrDefault("X-Amz-Security-Token")
  valid_594145 = validateParameter(valid_594145, JString, required = false,
                                 default = nil)
  if valid_594145 != nil:
    section.add "X-Amz-Security-Token", valid_594145
  var valid_594146 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594146 = validateParameter(valid_594146, JString, required = false,
                                 default = nil)
  if valid_594146 != nil:
    section.add "X-Amz-Content-Sha256", valid_594146
  var valid_594147 = header.getOrDefault("X-Amz-Algorithm")
  valid_594147 = validateParameter(valid_594147, JString, required = false,
                                 default = nil)
  if valid_594147 != nil:
    section.add "X-Amz-Algorithm", valid_594147
  var valid_594148 = header.getOrDefault("X-Amz-Signature")
  valid_594148 = validateParameter(valid_594148, JString, required = false,
                                 default = nil)
  if valid_594148 != nil:
    section.add "X-Amz-Signature", valid_594148
  var valid_594149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594149 = validateParameter(valid_594149, JString, required = false,
                                 default = nil)
  if valid_594149 != nil:
    section.add "X-Amz-SignedHeaders", valid_594149
  var valid_594150 = header.getOrDefault("X-Amz-Credential")
  valid_594150 = validateParameter(valid_594150, JString, required = false,
                                 default = nil)
  if valid_594150 != nil:
    section.add "X-Amz-Credential", valid_594150
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_594151 = formData.getOrDefault("Tags")
  valid_594151 = validateParameter(valid_594151, JArray, required = true, default = nil)
  if valid_594151 != nil:
    section.add "Tags", valid_594151
  var valid_594152 = formData.getOrDefault("ResourceName")
  valid_594152 = validateParameter(valid_594152, JString, required = true,
                                 default = nil)
  if valid_594152 != nil:
    section.add "ResourceName", valid_594152
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594153: Call_PostAddTagsToResource_594139; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_594153.validator(path, query, header, formData, body)
  let scheme = call_594153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594153.url(scheme.get, call_594153.host, call_594153.base,
                         call_594153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594153, url, valid)

proc call*(call_594154: Call_PostAddTagsToResource_594139; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_594155 = newJObject()
  var formData_594156 = newJObject()
  if Tags != nil:
    formData_594156.add "Tags", Tags
  add(query_594155, "Action", newJString(Action))
  add(formData_594156, "ResourceName", newJString(ResourceName))
  add(query_594155, "Version", newJString(Version))
  result = call_594154.call(nil, query_594155, nil, formData_594156, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_594139(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_594140, base: "/",
    url: url_PostAddTagsToResource_594141, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_594122 = ref object of OpenApiRestCall_593421
proc url_GetAddTagsToResource_594124(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddTagsToResource_594123(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_594125 = query.getOrDefault("Tags")
  valid_594125 = validateParameter(valid_594125, JArray, required = true, default = nil)
  if valid_594125 != nil:
    section.add "Tags", valid_594125
  var valid_594126 = query.getOrDefault("ResourceName")
  valid_594126 = validateParameter(valid_594126, JString, required = true,
                                 default = nil)
  if valid_594126 != nil:
    section.add "ResourceName", valid_594126
  var valid_594127 = query.getOrDefault("Action")
  valid_594127 = validateParameter(valid_594127, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_594127 != nil:
    section.add "Action", valid_594127
  var valid_594128 = query.getOrDefault("Version")
  valid_594128 = validateParameter(valid_594128, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594128 != nil:
    section.add "Version", valid_594128
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594129 = header.getOrDefault("X-Amz-Date")
  valid_594129 = validateParameter(valid_594129, JString, required = false,
                                 default = nil)
  if valid_594129 != nil:
    section.add "X-Amz-Date", valid_594129
  var valid_594130 = header.getOrDefault("X-Amz-Security-Token")
  valid_594130 = validateParameter(valid_594130, JString, required = false,
                                 default = nil)
  if valid_594130 != nil:
    section.add "X-Amz-Security-Token", valid_594130
  var valid_594131 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594131 = validateParameter(valid_594131, JString, required = false,
                                 default = nil)
  if valid_594131 != nil:
    section.add "X-Amz-Content-Sha256", valid_594131
  var valid_594132 = header.getOrDefault("X-Amz-Algorithm")
  valid_594132 = validateParameter(valid_594132, JString, required = false,
                                 default = nil)
  if valid_594132 != nil:
    section.add "X-Amz-Algorithm", valid_594132
  var valid_594133 = header.getOrDefault("X-Amz-Signature")
  valid_594133 = validateParameter(valid_594133, JString, required = false,
                                 default = nil)
  if valid_594133 != nil:
    section.add "X-Amz-Signature", valid_594133
  var valid_594134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594134 = validateParameter(valid_594134, JString, required = false,
                                 default = nil)
  if valid_594134 != nil:
    section.add "X-Amz-SignedHeaders", valid_594134
  var valid_594135 = header.getOrDefault("X-Amz-Credential")
  valid_594135 = validateParameter(valid_594135, JString, required = false,
                                 default = nil)
  if valid_594135 != nil:
    section.add "X-Amz-Credential", valid_594135
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594136: Call_GetAddTagsToResource_594122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_594136.validator(path, query, header, formData, body)
  let scheme = call_594136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594136.url(scheme.get, call_594136.host, call_594136.base,
                         call_594136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594136, url, valid)

proc call*(call_594137: Call_GetAddTagsToResource_594122; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594138 = newJObject()
  if Tags != nil:
    query_594138.add "Tags", Tags
  add(query_594138, "ResourceName", newJString(ResourceName))
  add(query_594138, "Action", newJString(Action))
  add(query_594138, "Version", newJString(Version))
  result = call_594137.call(nil, query_594138, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_594122(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_594123, base: "/",
    url: url_GetAddTagsToResource_594124, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_594175 = ref object of OpenApiRestCall_593421
proc url_PostApplyPendingMaintenanceAction_594177(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_594176(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594178 = query.getOrDefault("Action")
  valid_594178 = validateParameter(valid_594178, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_594178 != nil:
    section.add "Action", valid_594178
  var valid_594179 = query.getOrDefault("Version")
  valid_594179 = validateParameter(valid_594179, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594179 != nil:
    section.add "Version", valid_594179
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594180 = header.getOrDefault("X-Amz-Date")
  valid_594180 = validateParameter(valid_594180, JString, required = false,
                                 default = nil)
  if valid_594180 != nil:
    section.add "X-Amz-Date", valid_594180
  var valid_594181 = header.getOrDefault("X-Amz-Security-Token")
  valid_594181 = validateParameter(valid_594181, JString, required = false,
                                 default = nil)
  if valid_594181 != nil:
    section.add "X-Amz-Security-Token", valid_594181
  var valid_594182 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594182 = validateParameter(valid_594182, JString, required = false,
                                 default = nil)
  if valid_594182 != nil:
    section.add "X-Amz-Content-Sha256", valid_594182
  var valid_594183 = header.getOrDefault("X-Amz-Algorithm")
  valid_594183 = validateParameter(valid_594183, JString, required = false,
                                 default = nil)
  if valid_594183 != nil:
    section.add "X-Amz-Algorithm", valid_594183
  var valid_594184 = header.getOrDefault("X-Amz-Signature")
  valid_594184 = validateParameter(valid_594184, JString, required = false,
                                 default = nil)
  if valid_594184 != nil:
    section.add "X-Amz-Signature", valid_594184
  var valid_594185 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594185 = validateParameter(valid_594185, JString, required = false,
                                 default = nil)
  if valid_594185 != nil:
    section.add "X-Amz-SignedHeaders", valid_594185
  var valid_594186 = header.getOrDefault("X-Amz-Credential")
  valid_594186 = validateParameter(valid_594186, JString, required = false,
                                 default = nil)
  if valid_594186 != nil:
    section.add "X-Amz-Credential", valid_594186
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ApplyAction` field"
  var valid_594187 = formData.getOrDefault("ApplyAction")
  valid_594187 = validateParameter(valid_594187, JString, required = true,
                                 default = nil)
  if valid_594187 != nil:
    section.add "ApplyAction", valid_594187
  var valid_594188 = formData.getOrDefault("ResourceIdentifier")
  valid_594188 = validateParameter(valid_594188, JString, required = true,
                                 default = nil)
  if valid_594188 != nil:
    section.add "ResourceIdentifier", valid_594188
  var valid_594189 = formData.getOrDefault("OptInType")
  valid_594189 = validateParameter(valid_594189, JString, required = true,
                                 default = nil)
  if valid_594189 != nil:
    section.add "OptInType", valid_594189
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594190: Call_PostApplyPendingMaintenanceAction_594175;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_594190.validator(path, query, header, formData, body)
  let scheme = call_594190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594190.url(scheme.get, call_594190.host, call_594190.base,
                         call_594190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594190, url, valid)

proc call*(call_594191: Call_PostApplyPendingMaintenanceAction_594175;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   Action: string (required)
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_594192 = newJObject()
  var formData_594193 = newJObject()
  add(query_594192, "Action", newJString(Action))
  add(formData_594193, "ApplyAction", newJString(ApplyAction))
  add(formData_594193, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_594193, "OptInType", newJString(OptInType))
  add(query_594192, "Version", newJString(Version))
  result = call_594191.call(nil, query_594192, nil, formData_594193, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_594175(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_594176, base: "/",
    url: url_PostApplyPendingMaintenanceAction_594177,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_594157 = ref object of OpenApiRestCall_593421
proc url_GetApplyPendingMaintenanceAction_594159(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_594158(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ApplyAction` field"
  var valid_594160 = query.getOrDefault("ApplyAction")
  valid_594160 = validateParameter(valid_594160, JString, required = true,
                                 default = nil)
  if valid_594160 != nil:
    section.add "ApplyAction", valid_594160
  var valid_594161 = query.getOrDefault("ResourceIdentifier")
  valid_594161 = validateParameter(valid_594161, JString, required = true,
                                 default = nil)
  if valid_594161 != nil:
    section.add "ResourceIdentifier", valid_594161
  var valid_594162 = query.getOrDefault("Action")
  valid_594162 = validateParameter(valid_594162, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_594162 != nil:
    section.add "Action", valid_594162
  var valid_594163 = query.getOrDefault("OptInType")
  valid_594163 = validateParameter(valid_594163, JString, required = true,
                                 default = nil)
  if valid_594163 != nil:
    section.add "OptInType", valid_594163
  var valid_594164 = query.getOrDefault("Version")
  valid_594164 = validateParameter(valid_594164, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594164 != nil:
    section.add "Version", valid_594164
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594165 = header.getOrDefault("X-Amz-Date")
  valid_594165 = validateParameter(valid_594165, JString, required = false,
                                 default = nil)
  if valid_594165 != nil:
    section.add "X-Amz-Date", valid_594165
  var valid_594166 = header.getOrDefault("X-Amz-Security-Token")
  valid_594166 = validateParameter(valid_594166, JString, required = false,
                                 default = nil)
  if valid_594166 != nil:
    section.add "X-Amz-Security-Token", valid_594166
  var valid_594167 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594167 = validateParameter(valid_594167, JString, required = false,
                                 default = nil)
  if valid_594167 != nil:
    section.add "X-Amz-Content-Sha256", valid_594167
  var valid_594168 = header.getOrDefault("X-Amz-Algorithm")
  valid_594168 = validateParameter(valid_594168, JString, required = false,
                                 default = nil)
  if valid_594168 != nil:
    section.add "X-Amz-Algorithm", valid_594168
  var valid_594169 = header.getOrDefault("X-Amz-Signature")
  valid_594169 = validateParameter(valid_594169, JString, required = false,
                                 default = nil)
  if valid_594169 != nil:
    section.add "X-Amz-Signature", valid_594169
  var valid_594170 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594170 = validateParameter(valid_594170, JString, required = false,
                                 default = nil)
  if valid_594170 != nil:
    section.add "X-Amz-SignedHeaders", valid_594170
  var valid_594171 = header.getOrDefault("X-Amz-Credential")
  valid_594171 = validateParameter(valid_594171, JString, required = false,
                                 default = nil)
  if valid_594171 != nil:
    section.add "X-Amz-Credential", valid_594171
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594172: Call_GetApplyPendingMaintenanceAction_594157;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_594172.validator(path, query, header, formData, body)
  let scheme = call_594172.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594172.url(scheme.get, call_594172.host, call_594172.base,
                         call_594172.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594172, url, valid)

proc call*(call_594173: Call_GetApplyPendingMaintenanceAction_594157;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_594174 = newJObject()
  add(query_594174, "ApplyAction", newJString(ApplyAction))
  add(query_594174, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_594174, "Action", newJString(Action))
  add(query_594174, "OptInType", newJString(OptInType))
  add(query_594174, "Version", newJString(Version))
  result = call_594173.call(nil, query_594174, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_594157(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_594158, base: "/",
    url: url_GetApplyPendingMaintenanceAction_594159,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeDBSecurityGroupIngress_594214 = ref object of OpenApiRestCall_593421
proc url_PostAuthorizeDBSecurityGroupIngress_594216(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAuthorizeDBSecurityGroupIngress_594215(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594217 = query.getOrDefault("Action")
  valid_594217 = validateParameter(valid_594217, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_594217 != nil:
    section.add "Action", valid_594217
  var valid_594218 = query.getOrDefault("Version")
  valid_594218 = validateParameter(valid_594218, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594218 != nil:
    section.add "Version", valid_594218
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594219 = header.getOrDefault("X-Amz-Date")
  valid_594219 = validateParameter(valid_594219, JString, required = false,
                                 default = nil)
  if valid_594219 != nil:
    section.add "X-Amz-Date", valid_594219
  var valid_594220 = header.getOrDefault("X-Amz-Security-Token")
  valid_594220 = validateParameter(valid_594220, JString, required = false,
                                 default = nil)
  if valid_594220 != nil:
    section.add "X-Amz-Security-Token", valid_594220
  var valid_594221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594221 = validateParameter(valid_594221, JString, required = false,
                                 default = nil)
  if valid_594221 != nil:
    section.add "X-Amz-Content-Sha256", valid_594221
  var valid_594222 = header.getOrDefault("X-Amz-Algorithm")
  valid_594222 = validateParameter(valid_594222, JString, required = false,
                                 default = nil)
  if valid_594222 != nil:
    section.add "X-Amz-Algorithm", valid_594222
  var valid_594223 = header.getOrDefault("X-Amz-Signature")
  valid_594223 = validateParameter(valid_594223, JString, required = false,
                                 default = nil)
  if valid_594223 != nil:
    section.add "X-Amz-Signature", valid_594223
  var valid_594224 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594224 = validateParameter(valid_594224, JString, required = false,
                                 default = nil)
  if valid_594224 != nil:
    section.add "X-Amz-SignedHeaders", valid_594224
  var valid_594225 = header.getOrDefault("X-Amz-Credential")
  valid_594225 = validateParameter(valid_594225, JString, required = false,
                                 default = nil)
  if valid_594225 != nil:
    section.add "X-Amz-Credential", valid_594225
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_594226 = formData.getOrDefault("DBSecurityGroupName")
  valid_594226 = validateParameter(valid_594226, JString, required = true,
                                 default = nil)
  if valid_594226 != nil:
    section.add "DBSecurityGroupName", valid_594226
  var valid_594227 = formData.getOrDefault("EC2SecurityGroupName")
  valid_594227 = validateParameter(valid_594227, JString, required = false,
                                 default = nil)
  if valid_594227 != nil:
    section.add "EC2SecurityGroupName", valid_594227
  var valid_594228 = formData.getOrDefault("EC2SecurityGroupId")
  valid_594228 = validateParameter(valid_594228, JString, required = false,
                                 default = nil)
  if valid_594228 != nil:
    section.add "EC2SecurityGroupId", valid_594228
  var valid_594229 = formData.getOrDefault("CIDRIP")
  valid_594229 = validateParameter(valid_594229, JString, required = false,
                                 default = nil)
  if valid_594229 != nil:
    section.add "CIDRIP", valid_594229
  var valid_594230 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_594230 = validateParameter(valid_594230, JString, required = false,
                                 default = nil)
  if valid_594230 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_594230
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594231: Call_PostAuthorizeDBSecurityGroupIngress_594214;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_594231.validator(path, query, header, formData, body)
  let scheme = call_594231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594231.url(scheme.get, call_594231.host, call_594231.base,
                         call_594231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594231, url, valid)

proc call*(call_594232: Call_PostAuthorizeDBSecurityGroupIngress_594214;
          DBSecurityGroupName: string;
          Action: string = "AuthorizeDBSecurityGroupIngress";
          EC2SecurityGroupName: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Version: string = "2014-10-31";
          EC2SecurityGroupOwnerId: string = ""): Recallable =
  ## postAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  var query_594233 = newJObject()
  var formData_594234 = newJObject()
  add(formData_594234, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_594233, "Action", newJString(Action))
  add(formData_594234, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_594234, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_594234, "CIDRIP", newJString(CIDRIP))
  add(query_594233, "Version", newJString(Version))
  add(formData_594234, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  result = call_594232.call(nil, query_594233, nil, formData_594234, nil)

var postAuthorizeDBSecurityGroupIngress* = Call_PostAuthorizeDBSecurityGroupIngress_594214(
    name: "postAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_PostAuthorizeDBSecurityGroupIngress_594215, base: "/",
    url: url_PostAuthorizeDBSecurityGroupIngress_594216,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeDBSecurityGroupIngress_594194 = ref object of OpenApiRestCall_593421
proc url_GetAuthorizeDBSecurityGroupIngress_594196(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAuthorizeDBSecurityGroupIngress_594195(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   Action: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_594197 = query.getOrDefault("EC2SecurityGroupId")
  valid_594197 = validateParameter(valid_594197, JString, required = false,
                                 default = nil)
  if valid_594197 != nil:
    section.add "EC2SecurityGroupId", valid_594197
  var valid_594198 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_594198 = validateParameter(valid_594198, JString, required = false,
                                 default = nil)
  if valid_594198 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_594198
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_594199 = query.getOrDefault("DBSecurityGroupName")
  valid_594199 = validateParameter(valid_594199, JString, required = true,
                                 default = nil)
  if valid_594199 != nil:
    section.add "DBSecurityGroupName", valid_594199
  var valid_594200 = query.getOrDefault("Action")
  valid_594200 = validateParameter(valid_594200, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_594200 != nil:
    section.add "Action", valid_594200
  var valid_594201 = query.getOrDefault("CIDRIP")
  valid_594201 = validateParameter(valid_594201, JString, required = false,
                                 default = nil)
  if valid_594201 != nil:
    section.add "CIDRIP", valid_594201
  var valid_594202 = query.getOrDefault("EC2SecurityGroupName")
  valid_594202 = validateParameter(valid_594202, JString, required = false,
                                 default = nil)
  if valid_594202 != nil:
    section.add "EC2SecurityGroupName", valid_594202
  var valid_594203 = query.getOrDefault("Version")
  valid_594203 = validateParameter(valid_594203, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594203 != nil:
    section.add "Version", valid_594203
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594204 = header.getOrDefault("X-Amz-Date")
  valid_594204 = validateParameter(valid_594204, JString, required = false,
                                 default = nil)
  if valid_594204 != nil:
    section.add "X-Amz-Date", valid_594204
  var valid_594205 = header.getOrDefault("X-Amz-Security-Token")
  valid_594205 = validateParameter(valid_594205, JString, required = false,
                                 default = nil)
  if valid_594205 != nil:
    section.add "X-Amz-Security-Token", valid_594205
  var valid_594206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594206 = validateParameter(valid_594206, JString, required = false,
                                 default = nil)
  if valid_594206 != nil:
    section.add "X-Amz-Content-Sha256", valid_594206
  var valid_594207 = header.getOrDefault("X-Amz-Algorithm")
  valid_594207 = validateParameter(valid_594207, JString, required = false,
                                 default = nil)
  if valid_594207 != nil:
    section.add "X-Amz-Algorithm", valid_594207
  var valid_594208 = header.getOrDefault("X-Amz-Signature")
  valid_594208 = validateParameter(valid_594208, JString, required = false,
                                 default = nil)
  if valid_594208 != nil:
    section.add "X-Amz-Signature", valid_594208
  var valid_594209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594209 = validateParameter(valid_594209, JString, required = false,
                                 default = nil)
  if valid_594209 != nil:
    section.add "X-Amz-SignedHeaders", valid_594209
  var valid_594210 = header.getOrDefault("X-Amz-Credential")
  valid_594210 = validateParameter(valid_594210, JString, required = false,
                                 default = nil)
  if valid_594210 != nil:
    section.add "X-Amz-Credential", valid_594210
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594211: Call_GetAuthorizeDBSecurityGroupIngress_594194;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_594211.validator(path, query, header, formData, body)
  let scheme = call_594211.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594211.url(scheme.get, call_594211.host, call_594211.base,
                         call_594211.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594211, url, valid)

proc call*(call_594212: Call_GetAuthorizeDBSecurityGroupIngress_594194;
          DBSecurityGroupName: string; EC2SecurityGroupId: string = "";
          EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeDBSecurityGroupIngress"; CIDRIP: string = "";
          EC2SecurityGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   Action: string (required)
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: string (required)
  var query_594213 = newJObject()
  add(query_594213, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_594213, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_594213, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_594213, "Action", newJString(Action))
  add(query_594213, "CIDRIP", newJString(CIDRIP))
  add(query_594213, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_594213, "Version", newJString(Version))
  result = call_594212.call(nil, query_594213, nil, nil, nil)

var getAuthorizeDBSecurityGroupIngress* = Call_GetAuthorizeDBSecurityGroupIngress_594194(
    name: "getAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_GetAuthorizeDBSecurityGroupIngress_594195, base: "/",
    url: url_GetAuthorizeDBSecurityGroupIngress_594196,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBacktrackDBCluster_594254 = ref object of OpenApiRestCall_593421
proc url_PostBacktrackDBCluster_594256(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBacktrackDBCluster_594255(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594257 = query.getOrDefault("Action")
  valid_594257 = validateParameter(valid_594257, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_594257 != nil:
    section.add "Action", valid_594257
  var valid_594258 = query.getOrDefault("Version")
  valid_594258 = validateParameter(valid_594258, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594258 != nil:
    section.add "Version", valid_594258
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594259 = header.getOrDefault("X-Amz-Date")
  valid_594259 = validateParameter(valid_594259, JString, required = false,
                                 default = nil)
  if valid_594259 != nil:
    section.add "X-Amz-Date", valid_594259
  var valid_594260 = header.getOrDefault("X-Amz-Security-Token")
  valid_594260 = validateParameter(valid_594260, JString, required = false,
                                 default = nil)
  if valid_594260 != nil:
    section.add "X-Amz-Security-Token", valid_594260
  var valid_594261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594261 = validateParameter(valid_594261, JString, required = false,
                                 default = nil)
  if valid_594261 != nil:
    section.add "X-Amz-Content-Sha256", valid_594261
  var valid_594262 = header.getOrDefault("X-Amz-Algorithm")
  valid_594262 = validateParameter(valid_594262, JString, required = false,
                                 default = nil)
  if valid_594262 != nil:
    section.add "X-Amz-Algorithm", valid_594262
  var valid_594263 = header.getOrDefault("X-Amz-Signature")
  valid_594263 = validateParameter(valid_594263, JString, required = false,
                                 default = nil)
  if valid_594263 != nil:
    section.add "X-Amz-Signature", valid_594263
  var valid_594264 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594264 = validateParameter(valid_594264, JString, required = false,
                                 default = nil)
  if valid_594264 != nil:
    section.add "X-Amz-SignedHeaders", valid_594264
  var valid_594265 = header.getOrDefault("X-Amz-Credential")
  valid_594265 = validateParameter(valid_594265, JString, required = false,
                                 default = nil)
  if valid_594265 != nil:
    section.add "X-Amz-Credential", valid_594265
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_594266 = formData.getOrDefault("Force")
  valid_594266 = validateParameter(valid_594266, JBool, required = false, default = nil)
  if valid_594266 != nil:
    section.add "Force", valid_594266
  var valid_594267 = formData.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_594267 = validateParameter(valid_594267, JBool, required = false, default = nil)
  if valid_594267 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_594267
  assert formData != nil,
        "formData argument is necessary due to required `BacktrackTo` field"
  var valid_594268 = formData.getOrDefault("BacktrackTo")
  valid_594268 = validateParameter(valid_594268, JString, required = true,
                                 default = nil)
  if valid_594268 != nil:
    section.add "BacktrackTo", valid_594268
  var valid_594269 = formData.getOrDefault("DBClusterIdentifier")
  valid_594269 = validateParameter(valid_594269, JString, required = true,
                                 default = nil)
  if valid_594269 != nil:
    section.add "DBClusterIdentifier", valid_594269
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594270: Call_PostBacktrackDBCluster_594254; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594270.validator(path, query, header, formData, body)
  let scheme = call_594270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594270.url(scheme.get, call_594270.host, call_594270.base,
                         call_594270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594270, url, valid)

proc call*(call_594271: Call_PostBacktrackDBCluster_594254; BacktrackTo: string;
          DBClusterIdentifier: string; Force: bool = false;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_594272 = newJObject()
  var formData_594273 = newJObject()
  add(formData_594273, "Force", newJBool(Force))
  add(formData_594273, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(formData_594273, "BacktrackTo", newJString(BacktrackTo))
  add(query_594272, "Action", newJString(Action))
  add(formData_594273, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594272, "Version", newJString(Version))
  result = call_594271.call(nil, query_594272, nil, formData_594273, nil)

var postBacktrackDBCluster* = Call_PostBacktrackDBCluster_594254(
    name: "postBacktrackDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_PostBacktrackDBCluster_594255, base: "/",
    url: url_PostBacktrackDBCluster_594256, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBacktrackDBCluster_594235 = ref object of OpenApiRestCall_593421
proc url_GetBacktrackDBCluster_594237(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBacktrackDBCluster_594236(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `BacktrackTo` field"
  var valid_594238 = query.getOrDefault("BacktrackTo")
  valid_594238 = validateParameter(valid_594238, JString, required = true,
                                 default = nil)
  if valid_594238 != nil:
    section.add "BacktrackTo", valid_594238
  var valid_594239 = query.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_594239 = validateParameter(valid_594239, JBool, required = false, default = nil)
  if valid_594239 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_594239
  var valid_594240 = query.getOrDefault("DBClusterIdentifier")
  valid_594240 = validateParameter(valid_594240, JString, required = true,
                                 default = nil)
  if valid_594240 != nil:
    section.add "DBClusterIdentifier", valid_594240
  var valid_594241 = query.getOrDefault("Action")
  valid_594241 = validateParameter(valid_594241, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_594241 != nil:
    section.add "Action", valid_594241
  var valid_594242 = query.getOrDefault("Version")
  valid_594242 = validateParameter(valid_594242, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594242 != nil:
    section.add "Version", valid_594242
  var valid_594243 = query.getOrDefault("Force")
  valid_594243 = validateParameter(valid_594243, JBool, required = false, default = nil)
  if valid_594243 != nil:
    section.add "Force", valid_594243
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594244 = header.getOrDefault("X-Amz-Date")
  valid_594244 = validateParameter(valid_594244, JString, required = false,
                                 default = nil)
  if valid_594244 != nil:
    section.add "X-Amz-Date", valid_594244
  var valid_594245 = header.getOrDefault("X-Amz-Security-Token")
  valid_594245 = validateParameter(valid_594245, JString, required = false,
                                 default = nil)
  if valid_594245 != nil:
    section.add "X-Amz-Security-Token", valid_594245
  var valid_594246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594246 = validateParameter(valid_594246, JString, required = false,
                                 default = nil)
  if valid_594246 != nil:
    section.add "X-Amz-Content-Sha256", valid_594246
  var valid_594247 = header.getOrDefault("X-Amz-Algorithm")
  valid_594247 = validateParameter(valid_594247, JString, required = false,
                                 default = nil)
  if valid_594247 != nil:
    section.add "X-Amz-Algorithm", valid_594247
  var valid_594248 = header.getOrDefault("X-Amz-Signature")
  valid_594248 = validateParameter(valid_594248, JString, required = false,
                                 default = nil)
  if valid_594248 != nil:
    section.add "X-Amz-Signature", valid_594248
  var valid_594249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594249 = validateParameter(valid_594249, JString, required = false,
                                 default = nil)
  if valid_594249 != nil:
    section.add "X-Amz-SignedHeaders", valid_594249
  var valid_594250 = header.getOrDefault("X-Amz-Credential")
  valid_594250 = validateParameter(valid_594250, JString, required = false,
                                 default = nil)
  if valid_594250 != nil:
    section.add "X-Amz-Credential", valid_594250
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594251: Call_GetBacktrackDBCluster_594235; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594251.validator(path, query, header, formData, body)
  let scheme = call_594251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594251.url(scheme.get, call_594251.host, call_594251.base,
                         call_594251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594251, url, valid)

proc call*(call_594252: Call_GetBacktrackDBCluster_594235; BacktrackTo: string;
          DBClusterIdentifier: string;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31";
          Force: bool = false): Recallable =
  ## getBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  var query_594253 = newJObject()
  add(query_594253, "BacktrackTo", newJString(BacktrackTo))
  add(query_594253, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_594253, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594253, "Action", newJString(Action))
  add(query_594253, "Version", newJString(Version))
  add(query_594253, "Force", newJBool(Force))
  result = call_594252.call(nil, query_594253, nil, nil, nil)

var getBacktrackDBCluster* = Call_GetBacktrackDBCluster_594235(
    name: "getBacktrackDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_GetBacktrackDBCluster_594236, base: "/",
    url: url_GetBacktrackDBCluster_594237, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_594293 = ref object of OpenApiRestCall_593421
proc url_PostCopyDBClusterParameterGroup_594295(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_594294(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594296 = query.getOrDefault("Action")
  valid_594296 = validateParameter(valid_594296, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_594296 != nil:
    section.add "Action", valid_594296
  var valid_594297 = query.getOrDefault("Version")
  valid_594297 = validateParameter(valid_594297, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594297 != nil:
    section.add "Version", valid_594297
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594298 = header.getOrDefault("X-Amz-Date")
  valid_594298 = validateParameter(valid_594298, JString, required = false,
                                 default = nil)
  if valid_594298 != nil:
    section.add "X-Amz-Date", valid_594298
  var valid_594299 = header.getOrDefault("X-Amz-Security-Token")
  valid_594299 = validateParameter(valid_594299, JString, required = false,
                                 default = nil)
  if valid_594299 != nil:
    section.add "X-Amz-Security-Token", valid_594299
  var valid_594300 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594300 = validateParameter(valid_594300, JString, required = false,
                                 default = nil)
  if valid_594300 != nil:
    section.add "X-Amz-Content-Sha256", valid_594300
  var valid_594301 = header.getOrDefault("X-Amz-Algorithm")
  valid_594301 = validateParameter(valid_594301, JString, required = false,
                                 default = nil)
  if valid_594301 != nil:
    section.add "X-Amz-Algorithm", valid_594301
  var valid_594302 = header.getOrDefault("X-Amz-Signature")
  valid_594302 = validateParameter(valid_594302, JString, required = false,
                                 default = nil)
  if valid_594302 != nil:
    section.add "X-Amz-Signature", valid_594302
  var valid_594303 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594303 = validateParameter(valid_594303, JString, required = false,
                                 default = nil)
  if valid_594303 != nil:
    section.add "X-Amz-SignedHeaders", valid_594303
  var valid_594304 = header.getOrDefault("X-Amz-Credential")
  valid_594304 = validateParameter(valid_594304, JString, required = false,
                                 default = nil)
  if valid_594304 != nil:
    section.add "X-Amz-Credential", valid_594304
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_594305 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_594305 = validateParameter(valid_594305, JString, required = true,
                                 default = nil)
  if valid_594305 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_594305
  var valid_594306 = formData.getOrDefault("Tags")
  valid_594306 = validateParameter(valid_594306, JArray, required = false,
                                 default = nil)
  if valid_594306 != nil:
    section.add "Tags", valid_594306
  var valid_594307 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_594307 = validateParameter(valid_594307, JString, required = true,
                                 default = nil)
  if valid_594307 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_594307
  var valid_594308 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_594308 = validateParameter(valid_594308, JString, required = true,
                                 default = nil)
  if valid_594308 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_594308
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594309: Call_PostCopyDBClusterParameterGroup_594293;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594309.validator(path, query, header, formData, body)
  let scheme = call_594309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594309.url(scheme.get, call_594309.host, call_594309.base,
                         call_594309.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594309, url, valid)

proc call*(call_594310: Call_PostCopyDBClusterParameterGroup_594293;
          TargetDBClusterParameterGroupDescription: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_594311 = newJObject()
  var formData_594312 = newJObject()
  add(formData_594312, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    formData_594312.add "Tags", Tags
  add(query_594311, "Action", newJString(Action))
  add(formData_594312, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(formData_594312, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_594311, "Version", newJString(Version))
  result = call_594310.call(nil, query_594311, nil, formData_594312, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_594293(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_594294, base: "/",
    url: url_PostCopyDBClusterParameterGroup_594295,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_594274 = ref object of OpenApiRestCall_593421
proc url_GetCopyDBClusterParameterGroup_594276(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_594275(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: JString (required)
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBClusterParameterGroupIdentifier` field"
  var valid_594277 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_594277 = validateParameter(valid_594277, JString, required = true,
                                 default = nil)
  if valid_594277 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_594277
  var valid_594278 = query.getOrDefault("Tags")
  valid_594278 = validateParameter(valid_594278, JArray, required = false,
                                 default = nil)
  if valid_594278 != nil:
    section.add "Tags", valid_594278
  var valid_594279 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_594279 = validateParameter(valid_594279, JString, required = true,
                                 default = nil)
  if valid_594279 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_594279
  var valid_594280 = query.getOrDefault("Action")
  valid_594280 = validateParameter(valid_594280, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_594280 != nil:
    section.add "Action", valid_594280
  var valid_594281 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_594281 = validateParameter(valid_594281, JString, required = true,
                                 default = nil)
  if valid_594281 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_594281
  var valid_594282 = query.getOrDefault("Version")
  valid_594282 = validateParameter(valid_594282, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594282 != nil:
    section.add "Version", valid_594282
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594283 = header.getOrDefault("X-Amz-Date")
  valid_594283 = validateParameter(valid_594283, JString, required = false,
                                 default = nil)
  if valid_594283 != nil:
    section.add "X-Amz-Date", valid_594283
  var valid_594284 = header.getOrDefault("X-Amz-Security-Token")
  valid_594284 = validateParameter(valid_594284, JString, required = false,
                                 default = nil)
  if valid_594284 != nil:
    section.add "X-Amz-Security-Token", valid_594284
  var valid_594285 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594285 = validateParameter(valid_594285, JString, required = false,
                                 default = nil)
  if valid_594285 != nil:
    section.add "X-Amz-Content-Sha256", valid_594285
  var valid_594286 = header.getOrDefault("X-Amz-Algorithm")
  valid_594286 = validateParameter(valid_594286, JString, required = false,
                                 default = nil)
  if valid_594286 != nil:
    section.add "X-Amz-Algorithm", valid_594286
  var valid_594287 = header.getOrDefault("X-Amz-Signature")
  valid_594287 = validateParameter(valid_594287, JString, required = false,
                                 default = nil)
  if valid_594287 != nil:
    section.add "X-Amz-Signature", valid_594287
  var valid_594288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594288 = validateParameter(valid_594288, JString, required = false,
                                 default = nil)
  if valid_594288 != nil:
    section.add "X-Amz-SignedHeaders", valid_594288
  var valid_594289 = header.getOrDefault("X-Amz-Credential")
  valid_594289 = validateParameter(valid_594289, JString, required = false,
                                 default = nil)
  if valid_594289 != nil:
    section.add "X-Amz-Credential", valid_594289
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594290: Call_GetCopyDBClusterParameterGroup_594274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594290.validator(path, query, header, formData, body)
  let scheme = call_594290.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594290.url(scheme.get, call_594290.host, call_594290.base,
                         call_594290.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594290, url, valid)

proc call*(call_594291: Call_GetCopyDBClusterParameterGroup_594274;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: string (required)
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_594292 = newJObject()
  add(query_594292, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  if Tags != nil:
    query_594292.add "Tags", Tags
  add(query_594292, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  add(query_594292, "Action", newJString(Action))
  add(query_594292, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_594292, "Version", newJString(Version))
  result = call_594291.call(nil, query_594292, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_594274(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_594275, base: "/",
    url: url_GetCopyDBClusterParameterGroup_594276,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_594335 = ref object of OpenApiRestCall_593421
proc url_PostCopyDBClusterSnapshot_594337(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBClusterSnapshot_594336(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594338 = query.getOrDefault("Action")
  valid_594338 = validateParameter(valid_594338, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_594338 != nil:
    section.add "Action", valid_594338
  var valid_594339 = query.getOrDefault("Version")
  valid_594339 = validateParameter(valid_594339, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594339 != nil:
    section.add "Version", valid_594339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594340 = header.getOrDefault("X-Amz-Date")
  valid_594340 = validateParameter(valid_594340, JString, required = false,
                                 default = nil)
  if valid_594340 != nil:
    section.add "X-Amz-Date", valid_594340
  var valid_594341 = header.getOrDefault("X-Amz-Security-Token")
  valid_594341 = validateParameter(valid_594341, JString, required = false,
                                 default = nil)
  if valid_594341 != nil:
    section.add "X-Amz-Security-Token", valid_594341
  var valid_594342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594342 = validateParameter(valid_594342, JString, required = false,
                                 default = nil)
  if valid_594342 != nil:
    section.add "X-Amz-Content-Sha256", valid_594342
  var valid_594343 = header.getOrDefault("X-Amz-Algorithm")
  valid_594343 = validateParameter(valid_594343, JString, required = false,
                                 default = nil)
  if valid_594343 != nil:
    section.add "X-Amz-Algorithm", valid_594343
  var valid_594344 = header.getOrDefault("X-Amz-Signature")
  valid_594344 = validateParameter(valid_594344, JString, required = false,
                                 default = nil)
  if valid_594344 != nil:
    section.add "X-Amz-Signature", valid_594344
  var valid_594345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594345 = validateParameter(valid_594345, JString, required = false,
                                 default = nil)
  if valid_594345 != nil:
    section.add "X-Amz-SignedHeaders", valid_594345
  var valid_594346 = header.getOrDefault("X-Amz-Credential")
  valid_594346 = validateParameter(valid_594346, JString, required = false,
                                 default = nil)
  if valid_594346 != nil:
    section.add "X-Amz-Credential", valid_594346
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  section = newJObject()
  var valid_594347 = formData.getOrDefault("PreSignedUrl")
  valid_594347 = validateParameter(valid_594347, JString, required = false,
                                 default = nil)
  if valid_594347 != nil:
    section.add "PreSignedUrl", valid_594347
  var valid_594348 = formData.getOrDefault("Tags")
  valid_594348 = validateParameter(valid_594348, JArray, required = false,
                                 default = nil)
  if valid_594348 != nil:
    section.add "Tags", valid_594348
  var valid_594349 = formData.getOrDefault("SourceRegion")
  valid_594349 = validateParameter(valid_594349, JString, required = false,
                                 default = nil)
  if valid_594349 != nil:
    section.add "SourceRegion", valid_594349
  var valid_594350 = formData.getOrDefault("CopyTags")
  valid_594350 = validateParameter(valid_594350, JBool, required = false, default = nil)
  if valid_594350 != nil:
    section.add "CopyTags", valid_594350
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_594351 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_594351 = validateParameter(valid_594351, JString, required = true,
                                 default = nil)
  if valid_594351 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_594351
  var valid_594352 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_594352 = validateParameter(valid_594352, JString, required = true,
                                 default = nil)
  if valid_594352 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_594352
  var valid_594353 = formData.getOrDefault("KmsKeyId")
  valid_594353 = validateParameter(valid_594353, JString, required = false,
                                 default = nil)
  if valid_594353 != nil:
    section.add "KmsKeyId", valid_594353
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594354: Call_PostCopyDBClusterSnapshot_594335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594354.validator(path, query, header, formData, body)
  let scheme = call_594354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594354.url(scheme.get, call_594354.host, call_594354.base,
                         call_594354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594354, url, valid)

proc call*(call_594355: Call_PostCopyDBClusterSnapshot_594335;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; PreSignedUrl: string = "";
          Tags: JsonNode = nil; SourceRegion: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   Version: string (required)
  var query_594356 = newJObject()
  var formData_594357 = newJObject()
  add(formData_594357, "PreSignedUrl", newJString(PreSignedUrl))
  if Tags != nil:
    formData_594357.add "Tags", Tags
  add(formData_594357, "SourceRegion", newJString(SourceRegion))
  add(formData_594357, "CopyTags", newJBool(CopyTags))
  add(formData_594357, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_594357, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_594356, "Action", newJString(Action))
  add(formData_594357, "KmsKeyId", newJString(KmsKeyId))
  add(query_594356, "Version", newJString(Version))
  result = call_594355.call(nil, query_594356, nil, formData_594357, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_594335(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_594336, base: "/",
    url: url_PostCopyDBClusterSnapshot_594337,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_594313 = ref object of OpenApiRestCall_593421
proc url_GetCopyDBClusterSnapshot_594315(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBClusterSnapshot_594314(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  section = newJObject()
  var valid_594316 = query.getOrDefault("SourceRegion")
  valid_594316 = validateParameter(valid_594316, JString, required = false,
                                 default = nil)
  if valid_594316 != nil:
    section.add "SourceRegion", valid_594316
  var valid_594317 = query.getOrDefault("PreSignedUrl")
  valid_594317 = validateParameter(valid_594317, JString, required = false,
                                 default = nil)
  if valid_594317 != nil:
    section.add "PreSignedUrl", valid_594317
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_594318 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_594318 = validateParameter(valid_594318, JString, required = true,
                                 default = nil)
  if valid_594318 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_594318
  var valid_594319 = query.getOrDefault("Tags")
  valid_594319 = validateParameter(valid_594319, JArray, required = false,
                                 default = nil)
  if valid_594319 != nil:
    section.add "Tags", valid_594319
  var valid_594320 = query.getOrDefault("Action")
  valid_594320 = validateParameter(valid_594320, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_594320 != nil:
    section.add "Action", valid_594320
  var valid_594321 = query.getOrDefault("KmsKeyId")
  valid_594321 = validateParameter(valid_594321, JString, required = false,
                                 default = nil)
  if valid_594321 != nil:
    section.add "KmsKeyId", valid_594321
  var valid_594322 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_594322 = validateParameter(valid_594322, JString, required = true,
                                 default = nil)
  if valid_594322 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_594322
  var valid_594323 = query.getOrDefault("Version")
  valid_594323 = validateParameter(valid_594323, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594323 != nil:
    section.add "Version", valid_594323
  var valid_594324 = query.getOrDefault("CopyTags")
  valid_594324 = validateParameter(valid_594324, JBool, required = false, default = nil)
  if valid_594324 != nil:
    section.add "CopyTags", valid_594324
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594325 = header.getOrDefault("X-Amz-Date")
  valid_594325 = validateParameter(valid_594325, JString, required = false,
                                 default = nil)
  if valid_594325 != nil:
    section.add "X-Amz-Date", valid_594325
  var valid_594326 = header.getOrDefault("X-Amz-Security-Token")
  valid_594326 = validateParameter(valid_594326, JString, required = false,
                                 default = nil)
  if valid_594326 != nil:
    section.add "X-Amz-Security-Token", valid_594326
  var valid_594327 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594327 = validateParameter(valid_594327, JString, required = false,
                                 default = nil)
  if valid_594327 != nil:
    section.add "X-Amz-Content-Sha256", valid_594327
  var valid_594328 = header.getOrDefault("X-Amz-Algorithm")
  valid_594328 = validateParameter(valid_594328, JString, required = false,
                                 default = nil)
  if valid_594328 != nil:
    section.add "X-Amz-Algorithm", valid_594328
  var valid_594329 = header.getOrDefault("X-Amz-Signature")
  valid_594329 = validateParameter(valid_594329, JString, required = false,
                                 default = nil)
  if valid_594329 != nil:
    section.add "X-Amz-Signature", valid_594329
  var valid_594330 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594330 = validateParameter(valid_594330, JString, required = false,
                                 default = nil)
  if valid_594330 != nil:
    section.add "X-Amz-SignedHeaders", valid_594330
  var valid_594331 = header.getOrDefault("X-Amz-Credential")
  valid_594331 = validateParameter(valid_594331, JString, required = false,
                                 default = nil)
  if valid_594331 != nil:
    section.add "X-Amz-Credential", valid_594331
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594332: Call_GetCopyDBClusterSnapshot_594313; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594332.validator(path, query, header, formData, body)
  let scheme = call_594332.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594332.url(scheme.get, call_594332.host, call_594332.base,
                         call_594332.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594332, url, valid)

proc call*(call_594333: Call_GetCopyDBClusterSnapshot_594313;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; SourceRegion: string = "";
          PreSignedUrl: string = ""; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"; CopyTags: bool = false): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  var query_594334 = newJObject()
  add(query_594334, "SourceRegion", newJString(SourceRegion))
  add(query_594334, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_594334, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  if Tags != nil:
    query_594334.add "Tags", Tags
  add(query_594334, "Action", newJString(Action))
  add(query_594334, "KmsKeyId", newJString(KmsKeyId))
  add(query_594334, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_594334, "Version", newJString(Version))
  add(query_594334, "CopyTags", newJBool(CopyTags))
  result = call_594333.call(nil, query_594334, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_594313(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_594314, base: "/",
    url: url_GetCopyDBClusterSnapshot_594315, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_594377 = ref object of OpenApiRestCall_593421
proc url_PostCopyDBParameterGroup_594379(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBParameterGroup_594378(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594380 = query.getOrDefault("Action")
  valid_594380 = validateParameter(valid_594380, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_594380 != nil:
    section.add "Action", valid_594380
  var valid_594381 = query.getOrDefault("Version")
  valid_594381 = validateParameter(valid_594381, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594381 != nil:
    section.add "Version", valid_594381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594382 = header.getOrDefault("X-Amz-Date")
  valid_594382 = validateParameter(valid_594382, JString, required = false,
                                 default = nil)
  if valid_594382 != nil:
    section.add "X-Amz-Date", valid_594382
  var valid_594383 = header.getOrDefault("X-Amz-Security-Token")
  valid_594383 = validateParameter(valid_594383, JString, required = false,
                                 default = nil)
  if valid_594383 != nil:
    section.add "X-Amz-Security-Token", valid_594383
  var valid_594384 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594384 = validateParameter(valid_594384, JString, required = false,
                                 default = nil)
  if valid_594384 != nil:
    section.add "X-Amz-Content-Sha256", valid_594384
  var valid_594385 = header.getOrDefault("X-Amz-Algorithm")
  valid_594385 = validateParameter(valid_594385, JString, required = false,
                                 default = nil)
  if valid_594385 != nil:
    section.add "X-Amz-Algorithm", valid_594385
  var valid_594386 = header.getOrDefault("X-Amz-Signature")
  valid_594386 = validateParameter(valid_594386, JString, required = false,
                                 default = nil)
  if valid_594386 != nil:
    section.add "X-Amz-Signature", valid_594386
  var valid_594387 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594387 = validateParameter(valid_594387, JString, required = false,
                                 default = nil)
  if valid_594387 != nil:
    section.add "X-Amz-SignedHeaders", valid_594387
  var valid_594388 = header.getOrDefault("X-Amz-Credential")
  valid_594388 = validateParameter(valid_594388, JString, required = false,
                                 default = nil)
  if valid_594388 != nil:
    section.add "X-Amz-Credential", valid_594388
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBParameterGroupIdentifier` field"
  var valid_594389 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_594389 = validateParameter(valid_594389, JString, required = true,
                                 default = nil)
  if valid_594389 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_594389
  var valid_594390 = formData.getOrDefault("Tags")
  valid_594390 = validateParameter(valid_594390, JArray, required = false,
                                 default = nil)
  if valid_594390 != nil:
    section.add "Tags", valid_594390
  var valid_594391 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_594391 = validateParameter(valid_594391, JString, required = true,
                                 default = nil)
  if valid_594391 != nil:
    section.add "TargetDBParameterGroupDescription", valid_594391
  var valid_594392 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_594392 = validateParameter(valid_594392, JString, required = true,
                                 default = nil)
  if valid_594392 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_594392
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594393: Call_PostCopyDBParameterGroup_594377; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_594393.validator(path, query, header, formData, body)
  let scheme = call_594393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594393.url(scheme.get, call_594393.host, call_594393.base,
                         call_594393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594393, url, valid)

proc call*(call_594394: Call_PostCopyDBParameterGroup_594377;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          SourceDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  var query_594395 = newJObject()
  var formData_594396 = newJObject()
  add(formData_594396, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  if Tags != nil:
    formData_594396.add "Tags", Tags
  add(query_594395, "Action", newJString(Action))
  add(formData_594396, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(formData_594396, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_594395, "Version", newJString(Version))
  result = call_594394.call(nil, query_594395, nil, formData_594396, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_594377(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_594378, base: "/",
    url: url_PostCopyDBParameterGroup_594379, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_594358 = ref object of OpenApiRestCall_593421
proc url_GetCopyDBParameterGroup_594360(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBParameterGroup_594359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: JString (required)
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  section = newJObject()
  var valid_594361 = query.getOrDefault("Tags")
  valid_594361 = validateParameter(valid_594361, JArray, required = false,
                                 default = nil)
  if valid_594361 != nil:
    section.add "Tags", valid_594361
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594362 = query.getOrDefault("Action")
  valid_594362 = validateParameter(valid_594362, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_594362 != nil:
    section.add "Action", valid_594362
  var valid_594363 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_594363 = validateParameter(valid_594363, JString, required = true,
                                 default = nil)
  if valid_594363 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_594363
  var valid_594364 = query.getOrDefault("Version")
  valid_594364 = validateParameter(valid_594364, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594364 != nil:
    section.add "Version", valid_594364
  var valid_594365 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_594365 = validateParameter(valid_594365, JString, required = true,
                                 default = nil)
  if valid_594365 != nil:
    section.add "TargetDBParameterGroupDescription", valid_594365
  var valid_594366 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_594366 = validateParameter(valid_594366, JString, required = true,
                                 default = nil)
  if valid_594366 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_594366
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594367 = header.getOrDefault("X-Amz-Date")
  valid_594367 = validateParameter(valid_594367, JString, required = false,
                                 default = nil)
  if valid_594367 != nil:
    section.add "X-Amz-Date", valid_594367
  var valid_594368 = header.getOrDefault("X-Amz-Security-Token")
  valid_594368 = validateParameter(valid_594368, JString, required = false,
                                 default = nil)
  if valid_594368 != nil:
    section.add "X-Amz-Security-Token", valid_594368
  var valid_594369 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594369 = validateParameter(valid_594369, JString, required = false,
                                 default = nil)
  if valid_594369 != nil:
    section.add "X-Amz-Content-Sha256", valid_594369
  var valid_594370 = header.getOrDefault("X-Amz-Algorithm")
  valid_594370 = validateParameter(valid_594370, JString, required = false,
                                 default = nil)
  if valid_594370 != nil:
    section.add "X-Amz-Algorithm", valid_594370
  var valid_594371 = header.getOrDefault("X-Amz-Signature")
  valid_594371 = validateParameter(valid_594371, JString, required = false,
                                 default = nil)
  if valid_594371 != nil:
    section.add "X-Amz-Signature", valid_594371
  var valid_594372 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594372 = validateParameter(valid_594372, JString, required = false,
                                 default = nil)
  if valid_594372 != nil:
    section.add "X-Amz-SignedHeaders", valid_594372
  var valid_594373 = header.getOrDefault("X-Amz-Credential")
  valid_594373 = validateParameter(valid_594373, JString, required = false,
                                 default = nil)
  if valid_594373 != nil:
    section.add "X-Amz-Credential", valid_594373
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594374: Call_GetCopyDBParameterGroup_594358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_594374.validator(path, query, header, formData, body)
  let scheme = call_594374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594374.url(scheme.get, call_594374.host, call_594374.base,
                         call_594374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594374, url, valid)

proc call*(call_594375: Call_GetCopyDBParameterGroup_594358;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  var query_594376 = newJObject()
  if Tags != nil:
    query_594376.add "Tags", Tags
  add(query_594376, "Action", newJString(Action))
  add(query_594376, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_594376, "Version", newJString(Version))
  add(query_594376, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_594376, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  result = call_594375.call(nil, query_594376, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_594358(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_594359, base: "/",
    url: url_GetCopyDBParameterGroup_594360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBSnapshot_594420 = ref object of OpenApiRestCall_593421
proc url_PostCopyDBSnapshot_594422(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBSnapshot_594421(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594423 = query.getOrDefault("Action")
  valid_594423 = validateParameter(valid_594423, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_594423 != nil:
    section.add "Action", valid_594423
  var valid_594424 = query.getOrDefault("Version")
  valid_594424 = validateParameter(valid_594424, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594424 != nil:
    section.add "Version", valid_594424
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594425 = header.getOrDefault("X-Amz-Date")
  valid_594425 = validateParameter(valid_594425, JString, required = false,
                                 default = nil)
  if valid_594425 != nil:
    section.add "X-Amz-Date", valid_594425
  var valid_594426 = header.getOrDefault("X-Amz-Security-Token")
  valid_594426 = validateParameter(valid_594426, JString, required = false,
                                 default = nil)
  if valid_594426 != nil:
    section.add "X-Amz-Security-Token", valid_594426
  var valid_594427 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594427 = validateParameter(valid_594427, JString, required = false,
                                 default = nil)
  if valid_594427 != nil:
    section.add "X-Amz-Content-Sha256", valid_594427
  var valid_594428 = header.getOrDefault("X-Amz-Algorithm")
  valid_594428 = validateParameter(valid_594428, JString, required = false,
                                 default = nil)
  if valid_594428 != nil:
    section.add "X-Amz-Algorithm", valid_594428
  var valid_594429 = header.getOrDefault("X-Amz-Signature")
  valid_594429 = validateParameter(valid_594429, JString, required = false,
                                 default = nil)
  if valid_594429 != nil:
    section.add "X-Amz-Signature", valid_594429
  var valid_594430 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594430 = validateParameter(valid_594430, JString, required = false,
                                 default = nil)
  if valid_594430 != nil:
    section.add "X-Amz-SignedHeaders", valid_594430
  var valid_594431 = header.getOrDefault("X-Amz-Credential")
  valid_594431 = validateParameter(valid_594431, JString, required = false,
                                 default = nil)
  if valid_594431 != nil:
    section.add "X-Amz-Credential", valid_594431
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBSnapshotIdentifier` field"
  var valid_594432 = formData.getOrDefault("TargetDBSnapshotIdentifier")
  valid_594432 = validateParameter(valid_594432, JString, required = true,
                                 default = nil)
  if valid_594432 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_594432
  var valid_594433 = formData.getOrDefault("PreSignedUrl")
  valid_594433 = validateParameter(valid_594433, JString, required = false,
                                 default = nil)
  if valid_594433 != nil:
    section.add "PreSignedUrl", valid_594433
  var valid_594434 = formData.getOrDefault("OptionGroupName")
  valid_594434 = validateParameter(valid_594434, JString, required = false,
                                 default = nil)
  if valid_594434 != nil:
    section.add "OptionGroupName", valid_594434
  var valid_594435 = formData.getOrDefault("Tags")
  valid_594435 = validateParameter(valid_594435, JArray, required = false,
                                 default = nil)
  if valid_594435 != nil:
    section.add "Tags", valid_594435
  var valid_594436 = formData.getOrDefault("SourceRegion")
  valid_594436 = validateParameter(valid_594436, JString, required = false,
                                 default = nil)
  if valid_594436 != nil:
    section.add "SourceRegion", valid_594436
  var valid_594437 = formData.getOrDefault("CopyTags")
  valid_594437 = validateParameter(valid_594437, JBool, required = false, default = nil)
  if valid_594437 != nil:
    section.add "CopyTags", valid_594437
  var valid_594438 = formData.getOrDefault("KmsKeyId")
  valid_594438 = validateParameter(valid_594438, JString, required = false,
                                 default = nil)
  if valid_594438 != nil:
    section.add "KmsKeyId", valid_594438
  var valid_594439 = formData.getOrDefault("SourceDBSnapshotIdentifier")
  valid_594439 = validateParameter(valid_594439, JString, required = true,
                                 default = nil)
  if valid_594439 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_594439
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594440: Call_PostCopyDBSnapshot_594420; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_594440.validator(path, query, header, formData, body)
  let scheme = call_594440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594440.url(scheme.get, call_594440.host, call_594440.base,
                         call_594440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594440, url, valid)

proc call*(call_594441: Call_PostCopyDBSnapshot_594420;
          TargetDBSnapshotIdentifier: string; SourceDBSnapshotIdentifier: string;
          PreSignedUrl: string = ""; OptionGroupName: string = ""; Tags: JsonNode = nil;
          SourceRegion: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Version: string (required)
  var query_594442 = newJObject()
  var formData_594443 = newJObject()
  add(formData_594443, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(formData_594443, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_594443, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_594443.add "Tags", Tags
  add(formData_594443, "SourceRegion", newJString(SourceRegion))
  add(formData_594443, "CopyTags", newJBool(CopyTags))
  add(query_594442, "Action", newJString(Action))
  add(formData_594443, "KmsKeyId", newJString(KmsKeyId))
  add(formData_594443, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(query_594442, "Version", newJString(Version))
  result = call_594441.call(nil, query_594442, nil, formData_594443, nil)

var postCopyDBSnapshot* = Call_PostCopyDBSnapshot_594420(
    name: "postCopyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBSnapshot",
    validator: validate_PostCopyDBSnapshot_594421, base: "/",
    url: url_PostCopyDBSnapshot_594422, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBSnapshot_594397 = ref object of OpenApiRestCall_593421
proc url_GetCopyDBSnapshot_594399(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBSnapshot_594398(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Action: JString (required)
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   Version: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  section = newJObject()
  var valid_594400 = query.getOrDefault("SourceRegion")
  valid_594400 = validateParameter(valid_594400, JString, required = false,
                                 default = nil)
  if valid_594400 != nil:
    section.add "SourceRegion", valid_594400
  var valid_594401 = query.getOrDefault("OptionGroupName")
  valid_594401 = validateParameter(valid_594401, JString, required = false,
                                 default = nil)
  if valid_594401 != nil:
    section.add "OptionGroupName", valid_594401
  var valid_594402 = query.getOrDefault("PreSignedUrl")
  valid_594402 = validateParameter(valid_594402, JString, required = false,
                                 default = nil)
  if valid_594402 != nil:
    section.add "PreSignedUrl", valid_594402
  var valid_594403 = query.getOrDefault("Tags")
  valid_594403 = validateParameter(valid_594403, JArray, required = false,
                                 default = nil)
  if valid_594403 != nil:
    section.add "Tags", valid_594403
  assert query != nil, "query argument is necessary due to required `TargetDBSnapshotIdentifier` field"
  var valid_594404 = query.getOrDefault("TargetDBSnapshotIdentifier")
  valid_594404 = validateParameter(valid_594404, JString, required = true,
                                 default = nil)
  if valid_594404 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_594404
  var valid_594405 = query.getOrDefault("Action")
  valid_594405 = validateParameter(valid_594405, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_594405 != nil:
    section.add "Action", valid_594405
  var valid_594406 = query.getOrDefault("SourceDBSnapshotIdentifier")
  valid_594406 = validateParameter(valid_594406, JString, required = true,
                                 default = nil)
  if valid_594406 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_594406
  var valid_594407 = query.getOrDefault("KmsKeyId")
  valid_594407 = validateParameter(valid_594407, JString, required = false,
                                 default = nil)
  if valid_594407 != nil:
    section.add "KmsKeyId", valid_594407
  var valid_594408 = query.getOrDefault("Version")
  valid_594408 = validateParameter(valid_594408, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594408 != nil:
    section.add "Version", valid_594408
  var valid_594409 = query.getOrDefault("CopyTags")
  valid_594409 = validateParameter(valid_594409, JBool, required = false, default = nil)
  if valid_594409 != nil:
    section.add "CopyTags", valid_594409
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594410 = header.getOrDefault("X-Amz-Date")
  valid_594410 = validateParameter(valid_594410, JString, required = false,
                                 default = nil)
  if valid_594410 != nil:
    section.add "X-Amz-Date", valid_594410
  var valid_594411 = header.getOrDefault("X-Amz-Security-Token")
  valid_594411 = validateParameter(valid_594411, JString, required = false,
                                 default = nil)
  if valid_594411 != nil:
    section.add "X-Amz-Security-Token", valid_594411
  var valid_594412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594412 = validateParameter(valid_594412, JString, required = false,
                                 default = nil)
  if valid_594412 != nil:
    section.add "X-Amz-Content-Sha256", valid_594412
  var valid_594413 = header.getOrDefault("X-Amz-Algorithm")
  valid_594413 = validateParameter(valid_594413, JString, required = false,
                                 default = nil)
  if valid_594413 != nil:
    section.add "X-Amz-Algorithm", valid_594413
  var valid_594414 = header.getOrDefault("X-Amz-Signature")
  valid_594414 = validateParameter(valid_594414, JString, required = false,
                                 default = nil)
  if valid_594414 != nil:
    section.add "X-Amz-Signature", valid_594414
  var valid_594415 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594415 = validateParameter(valid_594415, JString, required = false,
                                 default = nil)
  if valid_594415 != nil:
    section.add "X-Amz-SignedHeaders", valid_594415
  var valid_594416 = header.getOrDefault("X-Amz-Credential")
  valid_594416 = validateParameter(valid_594416, JString, required = false,
                                 default = nil)
  if valid_594416 != nil:
    section.add "X-Amz-Credential", valid_594416
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594417: Call_GetCopyDBSnapshot_594397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_594417.validator(path, query, header, formData, body)
  let scheme = call_594417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594417.url(scheme.get, call_594417.host, call_594417.base,
                         call_594417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594417, url, valid)

proc call*(call_594418: Call_GetCopyDBSnapshot_594397;
          TargetDBSnapshotIdentifier: string; SourceDBSnapshotIdentifier: string;
          SourceRegion: string = ""; OptionGroupName: string = "";
          PreSignedUrl: string = ""; Tags: JsonNode = nil;
          Action: string = "CopyDBSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"; CopyTags: bool = false): Recallable =
  ## getCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Action: string (required)
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   Version: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  var query_594419 = newJObject()
  add(query_594419, "SourceRegion", newJString(SourceRegion))
  add(query_594419, "OptionGroupName", newJString(OptionGroupName))
  add(query_594419, "PreSignedUrl", newJString(PreSignedUrl))
  if Tags != nil:
    query_594419.add "Tags", Tags
  add(query_594419, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(query_594419, "Action", newJString(Action))
  add(query_594419, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(query_594419, "KmsKeyId", newJString(KmsKeyId))
  add(query_594419, "Version", newJString(Version))
  add(query_594419, "CopyTags", newJBool(CopyTags))
  result = call_594418.call(nil, query_594419, nil, nil, nil)

var getCopyDBSnapshot* = Call_GetCopyDBSnapshot_594397(name: "getCopyDBSnapshot",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyDBSnapshot", validator: validate_GetCopyDBSnapshot_594398,
    base: "/", url: url_GetCopyDBSnapshot_594399,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyOptionGroup_594463 = ref object of OpenApiRestCall_593421
proc url_PostCopyOptionGroup_594465(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyOptionGroup_594464(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594466 = query.getOrDefault("Action")
  valid_594466 = validateParameter(valid_594466, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_594466 != nil:
    section.add "Action", valid_594466
  var valid_594467 = query.getOrDefault("Version")
  valid_594467 = validateParameter(valid_594467, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594467 != nil:
    section.add "Version", valid_594467
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594468 = header.getOrDefault("X-Amz-Date")
  valid_594468 = validateParameter(valid_594468, JString, required = false,
                                 default = nil)
  if valid_594468 != nil:
    section.add "X-Amz-Date", valid_594468
  var valid_594469 = header.getOrDefault("X-Amz-Security-Token")
  valid_594469 = validateParameter(valid_594469, JString, required = false,
                                 default = nil)
  if valid_594469 != nil:
    section.add "X-Amz-Security-Token", valid_594469
  var valid_594470 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594470 = validateParameter(valid_594470, JString, required = false,
                                 default = nil)
  if valid_594470 != nil:
    section.add "X-Amz-Content-Sha256", valid_594470
  var valid_594471 = header.getOrDefault("X-Amz-Algorithm")
  valid_594471 = validateParameter(valid_594471, JString, required = false,
                                 default = nil)
  if valid_594471 != nil:
    section.add "X-Amz-Algorithm", valid_594471
  var valid_594472 = header.getOrDefault("X-Amz-Signature")
  valid_594472 = validateParameter(valid_594472, JString, required = false,
                                 default = nil)
  if valid_594472 != nil:
    section.add "X-Amz-Signature", valid_594472
  var valid_594473 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594473 = validateParameter(valid_594473, JString, required = false,
                                 default = nil)
  if valid_594473 != nil:
    section.add "X-Amz-SignedHeaders", valid_594473
  var valid_594474 = header.getOrDefault("X-Amz-Credential")
  valid_594474 = validateParameter(valid_594474, JString, required = false,
                                 default = nil)
  if valid_594474 != nil:
    section.add "X-Amz-Credential", valid_594474
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetOptionGroupDescription` field"
  var valid_594475 = formData.getOrDefault("TargetOptionGroupDescription")
  valid_594475 = validateParameter(valid_594475, JString, required = true,
                                 default = nil)
  if valid_594475 != nil:
    section.add "TargetOptionGroupDescription", valid_594475
  var valid_594476 = formData.getOrDefault("Tags")
  valid_594476 = validateParameter(valid_594476, JArray, required = false,
                                 default = nil)
  if valid_594476 != nil:
    section.add "Tags", valid_594476
  var valid_594477 = formData.getOrDefault("SourceOptionGroupIdentifier")
  valid_594477 = validateParameter(valid_594477, JString, required = true,
                                 default = nil)
  if valid_594477 != nil:
    section.add "SourceOptionGroupIdentifier", valid_594477
  var valid_594478 = formData.getOrDefault("TargetOptionGroupIdentifier")
  valid_594478 = validateParameter(valid_594478, JString, required = true,
                                 default = nil)
  if valid_594478 != nil:
    section.add "TargetOptionGroupIdentifier", valid_594478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594479: Call_PostCopyOptionGroup_594463; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_594479.validator(path, query, header, formData, body)
  let scheme = call_594479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594479.url(scheme.get, call_594479.host, call_594479.base,
                         call_594479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594479, url, valid)

proc call*(call_594480: Call_PostCopyOptionGroup_594463;
          TargetOptionGroupDescription: string;
          SourceOptionGroupIdentifier: string;
          TargetOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCopyOptionGroup
  ## Copies the specified option group.
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: string (required)
  var query_594481 = newJObject()
  var formData_594482 = newJObject()
  add(formData_594482, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  if Tags != nil:
    formData_594482.add "Tags", Tags
  add(formData_594482, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  add(query_594481, "Action", newJString(Action))
  add(formData_594482, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(query_594481, "Version", newJString(Version))
  result = call_594480.call(nil, query_594481, nil, formData_594482, nil)

var postCopyOptionGroup* = Call_PostCopyOptionGroup_594463(
    name: "postCopyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyOptionGroup",
    validator: validate_PostCopyOptionGroup_594464, base: "/",
    url: url_PostCopyOptionGroup_594465, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyOptionGroup_594444 = ref object of OpenApiRestCall_593421
proc url_GetCopyOptionGroup_594446(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyOptionGroup_594445(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Version: JString (required)
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceOptionGroupIdentifier` field"
  var valid_594447 = query.getOrDefault("SourceOptionGroupIdentifier")
  valid_594447 = validateParameter(valid_594447, JString, required = true,
                                 default = nil)
  if valid_594447 != nil:
    section.add "SourceOptionGroupIdentifier", valid_594447
  var valid_594448 = query.getOrDefault("Tags")
  valid_594448 = validateParameter(valid_594448, JArray, required = false,
                                 default = nil)
  if valid_594448 != nil:
    section.add "Tags", valid_594448
  var valid_594449 = query.getOrDefault("Action")
  valid_594449 = validateParameter(valid_594449, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_594449 != nil:
    section.add "Action", valid_594449
  var valid_594450 = query.getOrDefault("TargetOptionGroupDescription")
  valid_594450 = validateParameter(valid_594450, JString, required = true,
                                 default = nil)
  if valid_594450 != nil:
    section.add "TargetOptionGroupDescription", valid_594450
  var valid_594451 = query.getOrDefault("Version")
  valid_594451 = validateParameter(valid_594451, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594451 != nil:
    section.add "Version", valid_594451
  var valid_594452 = query.getOrDefault("TargetOptionGroupIdentifier")
  valid_594452 = validateParameter(valid_594452, JString, required = true,
                                 default = nil)
  if valid_594452 != nil:
    section.add "TargetOptionGroupIdentifier", valid_594452
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594453 = header.getOrDefault("X-Amz-Date")
  valid_594453 = validateParameter(valid_594453, JString, required = false,
                                 default = nil)
  if valid_594453 != nil:
    section.add "X-Amz-Date", valid_594453
  var valid_594454 = header.getOrDefault("X-Amz-Security-Token")
  valid_594454 = validateParameter(valid_594454, JString, required = false,
                                 default = nil)
  if valid_594454 != nil:
    section.add "X-Amz-Security-Token", valid_594454
  var valid_594455 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594455 = validateParameter(valid_594455, JString, required = false,
                                 default = nil)
  if valid_594455 != nil:
    section.add "X-Amz-Content-Sha256", valid_594455
  var valid_594456 = header.getOrDefault("X-Amz-Algorithm")
  valid_594456 = validateParameter(valid_594456, JString, required = false,
                                 default = nil)
  if valid_594456 != nil:
    section.add "X-Amz-Algorithm", valid_594456
  var valid_594457 = header.getOrDefault("X-Amz-Signature")
  valid_594457 = validateParameter(valid_594457, JString, required = false,
                                 default = nil)
  if valid_594457 != nil:
    section.add "X-Amz-Signature", valid_594457
  var valid_594458 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594458 = validateParameter(valid_594458, JString, required = false,
                                 default = nil)
  if valid_594458 != nil:
    section.add "X-Amz-SignedHeaders", valid_594458
  var valid_594459 = header.getOrDefault("X-Amz-Credential")
  valid_594459 = validateParameter(valid_594459, JString, required = false,
                                 default = nil)
  if valid_594459 != nil:
    section.add "X-Amz-Credential", valid_594459
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594460: Call_GetCopyOptionGroup_594444; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_594460.validator(path, query, header, formData, body)
  let scheme = call_594460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594460.url(scheme.get, call_594460.host, call_594460.base,
                         call_594460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594460, url, valid)

proc call*(call_594461: Call_GetCopyOptionGroup_594444;
          SourceOptionGroupIdentifier: string;
          TargetOptionGroupDescription: string;
          TargetOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyOptionGroup
  ## Copies the specified option group.
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Version: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  var query_594462 = newJObject()
  add(query_594462, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  if Tags != nil:
    query_594462.add "Tags", Tags
  add(query_594462, "Action", newJString(Action))
  add(query_594462, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(query_594462, "Version", newJString(Version))
  add(query_594462, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  result = call_594461.call(nil, query_594462, nil, nil, nil)

var getCopyOptionGroup* = Call_GetCopyOptionGroup_594444(
    name: "getCopyOptionGroup", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyOptionGroup", validator: validate_GetCopyOptionGroup_594445,
    base: "/", url: url_GetCopyOptionGroup_594446,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_594551 = ref object of OpenApiRestCall_593421
proc url_PostCreateDBCluster_594553(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBCluster_594552(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594554 = query.getOrDefault("Action")
  valid_594554 = validateParameter(valid_594554, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_594554 != nil:
    section.add "Action", valid_594554
  var valid_594555 = query.getOrDefault("Version")
  valid_594555 = validateParameter(valid_594555, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594555 != nil:
    section.add "Version", valid_594555
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594556 = header.getOrDefault("X-Amz-Date")
  valid_594556 = validateParameter(valid_594556, JString, required = false,
                                 default = nil)
  if valid_594556 != nil:
    section.add "X-Amz-Date", valid_594556
  var valid_594557 = header.getOrDefault("X-Amz-Security-Token")
  valid_594557 = validateParameter(valid_594557, JString, required = false,
                                 default = nil)
  if valid_594557 != nil:
    section.add "X-Amz-Security-Token", valid_594557
  var valid_594558 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594558 = validateParameter(valid_594558, JString, required = false,
                                 default = nil)
  if valid_594558 != nil:
    section.add "X-Amz-Content-Sha256", valid_594558
  var valid_594559 = header.getOrDefault("X-Amz-Algorithm")
  valid_594559 = validateParameter(valid_594559, JString, required = false,
                                 default = nil)
  if valid_594559 != nil:
    section.add "X-Amz-Algorithm", valid_594559
  var valid_594560 = header.getOrDefault("X-Amz-Signature")
  valid_594560 = validateParameter(valid_594560, JString, required = false,
                                 default = nil)
  if valid_594560 != nil:
    section.add "X-Amz-Signature", valid_594560
  var valid_594561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594561 = validateParameter(valid_594561, JString, required = false,
                                 default = nil)
  if valid_594561 != nil:
    section.add "X-Amz-SignedHeaders", valid_594561
  var valid_594562 = header.getOrDefault("X-Amz-Credential")
  valid_594562 = validateParameter(valid_594562, JString, required = false,
                                 default = nil)
  if valid_594562 != nil:
    section.add "X-Amz-Credential", valid_594562
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_594563 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_594563 = validateParameter(valid_594563, JString, required = false,
                                 default = nil)
  if valid_594563 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_594563
  var valid_594564 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_594564 = validateParameter(valid_594564, JString, required = false,
                                 default = nil)
  if valid_594564 != nil:
    section.add "GlobalClusterIdentifier", valid_594564
  var valid_594565 = formData.getOrDefault("EnableHttpEndpoint")
  valid_594565 = validateParameter(valid_594565, JBool, required = false, default = nil)
  if valid_594565 != nil:
    section.add "EnableHttpEndpoint", valid_594565
  var valid_594566 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_594566 = validateParameter(valid_594566, JArray, required = false,
                                 default = nil)
  if valid_594566 != nil:
    section.add "VpcSecurityGroupIds", valid_594566
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_594567 = formData.getOrDefault("Engine")
  valid_594567 = validateParameter(valid_594567, JString, required = true,
                                 default = nil)
  if valid_594567 != nil:
    section.add "Engine", valid_594567
  var valid_594568 = formData.getOrDefault("PreSignedUrl")
  valid_594568 = validateParameter(valid_594568, JString, required = false,
                                 default = nil)
  if valid_594568 != nil:
    section.add "PreSignedUrl", valid_594568
  var valid_594569 = formData.getOrDefault("BackupRetentionPeriod")
  valid_594569 = validateParameter(valid_594569, JInt, required = false, default = nil)
  if valid_594569 != nil:
    section.add "BackupRetentionPeriod", valid_594569
  var valid_594570 = formData.getOrDefault("BacktrackWindow")
  valid_594570 = validateParameter(valid_594570, JInt, required = false, default = nil)
  if valid_594570 != nil:
    section.add "BacktrackWindow", valid_594570
  var valid_594571 = formData.getOrDefault("Tags")
  valid_594571 = validateParameter(valid_594571, JArray, required = false,
                                 default = nil)
  if valid_594571 != nil:
    section.add "Tags", valid_594571
  var valid_594572 = formData.getOrDefault("SourceRegion")
  valid_594572 = validateParameter(valid_594572, JString, required = false,
                                 default = nil)
  if valid_594572 != nil:
    section.add "SourceRegion", valid_594572
  var valid_594573 = formData.getOrDefault("DeletionProtection")
  valid_594573 = validateParameter(valid_594573, JBool, required = false, default = nil)
  if valid_594573 != nil:
    section.add "DeletionProtection", valid_594573
  var valid_594574 = formData.getOrDefault("DBSubnetGroupName")
  valid_594574 = validateParameter(valid_594574, JString, required = false,
                                 default = nil)
  if valid_594574 != nil:
    section.add "DBSubnetGroupName", valid_594574
  var valid_594575 = formData.getOrDefault("AvailabilityZones")
  valid_594575 = validateParameter(valid_594575, JArray, required = false,
                                 default = nil)
  if valid_594575 != nil:
    section.add "AvailabilityZones", valid_594575
  var valid_594576 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_594576 = validateParameter(valid_594576, JString, required = false,
                                 default = nil)
  if valid_594576 != nil:
    section.add "DBClusterParameterGroupName", valid_594576
  var valid_594577 = formData.getOrDefault("DatabaseName")
  valid_594577 = validateParameter(valid_594577, JString, required = false,
                                 default = nil)
  if valid_594577 != nil:
    section.add "DatabaseName", valid_594577
  var valid_594578 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_594578 = validateParameter(valid_594578, JArray, required = false,
                                 default = nil)
  if valid_594578 != nil:
    section.add "EnableCloudwatchLogsExports", valid_594578
  var valid_594579 = formData.getOrDefault("CharacterSetName")
  valid_594579 = validateParameter(valid_594579, JString, required = false,
                                 default = nil)
  if valid_594579 != nil:
    section.add "CharacterSetName", valid_594579
  var valid_594580 = formData.getOrDefault("KmsKeyId")
  valid_594580 = validateParameter(valid_594580, JString, required = false,
                                 default = nil)
  if valid_594580 != nil:
    section.add "KmsKeyId", valid_594580
  var valid_594581 = formData.getOrDefault("StorageEncrypted")
  valid_594581 = validateParameter(valid_594581, JBool, required = false, default = nil)
  if valid_594581 != nil:
    section.add "StorageEncrypted", valid_594581
  var valid_594582 = formData.getOrDefault("DBClusterIdentifier")
  valid_594582 = validateParameter(valid_594582, JString, required = true,
                                 default = nil)
  if valid_594582 != nil:
    section.add "DBClusterIdentifier", valid_594582
  var valid_594583 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_594583 = validateParameter(valid_594583, JString, required = false,
                                 default = nil)
  if valid_594583 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_594583
  var valid_594584 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_594584 = validateParameter(valid_594584, JString, required = false,
                                 default = nil)
  if valid_594584 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_594584
  var valid_594585 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_594585 = validateParameter(valid_594585, JBool, required = false, default = nil)
  if valid_594585 != nil:
    section.add "CopyTagsToSnapshot", valid_594585
  var valid_594586 = formData.getOrDefault("Port")
  valid_594586 = validateParameter(valid_594586, JInt, required = false, default = nil)
  if valid_594586 != nil:
    section.add "Port", valid_594586
  var valid_594587 = formData.getOrDefault("EngineMode")
  valid_594587 = validateParameter(valid_594587, JString, required = false,
                                 default = nil)
  if valid_594587 != nil:
    section.add "EngineMode", valid_594587
  var valid_594588 = formData.getOrDefault("OptionGroupName")
  valid_594588 = validateParameter(valid_594588, JString, required = false,
                                 default = nil)
  if valid_594588 != nil:
    section.add "OptionGroupName", valid_594588
  var valid_594589 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_594589 = validateParameter(valid_594589, JString, required = false,
                                 default = nil)
  if valid_594589 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_594589
  var valid_594590 = formData.getOrDefault("MasterUserPassword")
  valid_594590 = validateParameter(valid_594590, JString, required = false,
                                 default = nil)
  if valid_594590 != nil:
    section.add "MasterUserPassword", valid_594590
  var valid_594591 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_594591 = validateParameter(valid_594591, JString, required = false,
                                 default = nil)
  if valid_594591 != nil:
    section.add "ReplicationSourceIdentifier", valid_594591
  var valid_594592 = formData.getOrDefault("MasterUsername")
  valid_594592 = validateParameter(valid_594592, JString, required = false,
                                 default = nil)
  if valid_594592 != nil:
    section.add "MasterUsername", valid_594592
  var valid_594593 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_594593 = validateParameter(valid_594593, JString, required = false,
                                 default = nil)
  if valid_594593 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_594593
  var valid_594594 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_594594 = validateParameter(valid_594594, JBool, required = false, default = nil)
  if valid_594594 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_594594
  var valid_594595 = formData.getOrDefault("PreferredBackupWindow")
  valid_594595 = validateParameter(valid_594595, JString, required = false,
                                 default = nil)
  if valid_594595 != nil:
    section.add "PreferredBackupWindow", valid_594595
  var valid_594596 = formData.getOrDefault("EngineVersion")
  valid_594596 = validateParameter(valid_594596, JString, required = false,
                                 default = nil)
  if valid_594596 != nil:
    section.add "EngineVersion", valid_594596
  var valid_594597 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_594597 = validateParameter(valid_594597, JString, required = false,
                                 default = nil)
  if valid_594597 != nil:
    section.add "PreferredMaintenanceWindow", valid_594597
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594598: Call_PostCreateDBCluster_594551; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594598.validator(path, query, header, formData, body)
  let scheme = call_594598.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594598.url(scheme.get, call_594598.host, call_594598.base,
                         call_594598.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594598, url, valid)

proc call*(call_594599: Call_PostCreateDBCluster_594551; Engine: string;
          DBClusterIdentifier: string;
          ScalingConfigurationMaxCapacity: string = "";
          GlobalClusterIdentifier: string = ""; EnableHttpEndpoint: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; PreSignedUrl: string = "";
          BackupRetentionPeriod: int = 0; BacktrackWindow: int = 0;
          Tags: JsonNode = nil; SourceRegion: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; DatabaseName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          CopyTagsToSnapshot: bool = false; Port: int = 0; EngineMode: string = "";
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          MasterUserPassword: string = ""; ReplicationSourceIdentifier: string = "";
          Action: string = "CreateDBCluster"; MasterUsername: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Action: string (required)
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_594600 = newJObject()
  var formData_594601 = newJObject()
  add(formData_594601, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(formData_594601, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_594601, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  if VpcSecurityGroupIds != nil:
    formData_594601.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_594601, "Engine", newJString(Engine))
  add(formData_594601, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_594601, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_594601, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_594601.add "Tags", Tags
  add(formData_594601, "SourceRegion", newJString(SourceRegion))
  add(formData_594601, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_594601, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if AvailabilityZones != nil:
    formData_594601.add "AvailabilityZones", AvailabilityZones
  add(formData_594601, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_594601, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_594601.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_594601, "CharacterSetName", newJString(CharacterSetName))
  add(formData_594601, "KmsKeyId", newJString(KmsKeyId))
  add(formData_594601, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_594601, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_594601, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_594601, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_594601, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_594601, "Port", newJInt(Port))
  add(formData_594601, "EngineMode", newJString(EngineMode))
  add(formData_594601, "OptionGroupName", newJString(OptionGroupName))
  add(formData_594601, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_594601, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_594601, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_594600, "Action", newJString(Action))
  add(formData_594601, "MasterUsername", newJString(MasterUsername))
  add(formData_594601, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_594601, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_594601, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_594601, "EngineVersion", newJString(EngineVersion))
  add(query_594600, "Version", newJString(Version))
  add(formData_594601, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_594599.call(nil, query_594600, nil, formData_594601, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_594551(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_594552, base: "/",
    url: url_PostCreateDBCluster_594553, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_594483 = ref object of OpenApiRestCall_593421
proc url_GetCreateDBCluster_594485(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBCluster_594484(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_594504 = query.getOrDefault("Engine")
  valid_594504 = validateParameter(valid_594504, JString, required = true,
                                 default = nil)
  if valid_594504 != nil:
    section.add "Engine", valid_594504
  var valid_594505 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_594505 = validateParameter(valid_594505, JString, required = false,
                                 default = nil)
  if valid_594505 != nil:
    section.add "ReplicationSourceIdentifier", valid_594505
  var valid_594506 = query.getOrDefault("DBClusterParameterGroupName")
  valid_594506 = validateParameter(valid_594506, JString, required = false,
                                 default = nil)
  if valid_594506 != nil:
    section.add "DBClusterParameterGroupName", valid_594506
  var valid_594507 = query.getOrDefault("StorageEncrypted")
  valid_594507 = validateParameter(valid_594507, JBool, required = false, default = nil)
  if valid_594507 != nil:
    section.add "StorageEncrypted", valid_594507
  var valid_594508 = query.getOrDefault("AvailabilityZones")
  valid_594508 = validateParameter(valid_594508, JArray, required = false,
                                 default = nil)
  if valid_594508 != nil:
    section.add "AvailabilityZones", valid_594508
  var valid_594509 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_594509 = validateParameter(valid_594509, JBool, required = false, default = nil)
  if valid_594509 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_594509
  var valid_594510 = query.getOrDefault("DBClusterIdentifier")
  valid_594510 = validateParameter(valid_594510, JString, required = true,
                                 default = nil)
  if valid_594510 != nil:
    section.add "DBClusterIdentifier", valid_594510
  var valid_594511 = query.getOrDefault("MasterUserPassword")
  valid_594511 = validateParameter(valid_594511, JString, required = false,
                                 default = nil)
  if valid_594511 != nil:
    section.add "MasterUserPassword", valid_594511
  var valid_594512 = query.getOrDefault("BackupRetentionPeriod")
  valid_594512 = validateParameter(valid_594512, JInt, required = false, default = nil)
  if valid_594512 != nil:
    section.add "BackupRetentionPeriod", valid_594512
  var valid_594513 = query.getOrDefault("CopyTagsToSnapshot")
  valid_594513 = validateParameter(valid_594513, JBool, required = false, default = nil)
  if valid_594513 != nil:
    section.add "CopyTagsToSnapshot", valid_594513
  var valid_594514 = query.getOrDefault("DeletionProtection")
  valid_594514 = validateParameter(valid_594514, JBool, required = false, default = nil)
  if valid_594514 != nil:
    section.add "DeletionProtection", valid_594514
  var valid_594515 = query.getOrDefault("EnableHttpEndpoint")
  valid_594515 = validateParameter(valid_594515, JBool, required = false, default = nil)
  if valid_594515 != nil:
    section.add "EnableHttpEndpoint", valid_594515
  var valid_594516 = query.getOrDefault("DBSubnetGroupName")
  valid_594516 = validateParameter(valid_594516, JString, required = false,
                                 default = nil)
  if valid_594516 != nil:
    section.add "DBSubnetGroupName", valid_594516
  var valid_594517 = query.getOrDefault("KmsKeyId")
  valid_594517 = validateParameter(valid_594517, JString, required = false,
                                 default = nil)
  if valid_594517 != nil:
    section.add "KmsKeyId", valid_594517
  var valid_594518 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_594518 = validateParameter(valid_594518, JString, required = false,
                                 default = nil)
  if valid_594518 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_594518
  var valid_594519 = query.getOrDefault("EngineVersion")
  valid_594519 = validateParameter(valid_594519, JString, required = false,
                                 default = nil)
  if valid_594519 != nil:
    section.add "EngineVersion", valid_594519
  var valid_594520 = query.getOrDefault("PreferredBackupWindow")
  valid_594520 = validateParameter(valid_594520, JString, required = false,
                                 default = nil)
  if valid_594520 != nil:
    section.add "PreferredBackupWindow", valid_594520
  var valid_594521 = query.getOrDefault("MasterUsername")
  valid_594521 = validateParameter(valid_594521, JString, required = false,
                                 default = nil)
  if valid_594521 != nil:
    section.add "MasterUsername", valid_594521
  var valid_594522 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_594522 = validateParameter(valid_594522, JString, required = false,
                                 default = nil)
  if valid_594522 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_594522
  var valid_594523 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_594523 = validateParameter(valid_594523, JString, required = false,
                                 default = nil)
  if valid_594523 != nil:
    section.add "PreferredMaintenanceWindow", valid_594523
  var valid_594524 = query.getOrDefault("SourceRegion")
  valid_594524 = validateParameter(valid_594524, JString, required = false,
                                 default = nil)
  if valid_594524 != nil:
    section.add "SourceRegion", valid_594524
  var valid_594525 = query.getOrDefault("DatabaseName")
  valid_594525 = validateParameter(valid_594525, JString, required = false,
                                 default = nil)
  if valid_594525 != nil:
    section.add "DatabaseName", valid_594525
  var valid_594526 = query.getOrDefault("OptionGroupName")
  valid_594526 = validateParameter(valid_594526, JString, required = false,
                                 default = nil)
  if valid_594526 != nil:
    section.add "OptionGroupName", valid_594526
  var valid_594527 = query.getOrDefault("EngineMode")
  valid_594527 = validateParameter(valid_594527, JString, required = false,
                                 default = nil)
  if valid_594527 != nil:
    section.add "EngineMode", valid_594527
  var valid_594528 = query.getOrDefault("PreSignedUrl")
  valid_594528 = validateParameter(valid_594528, JString, required = false,
                                 default = nil)
  if valid_594528 != nil:
    section.add "PreSignedUrl", valid_594528
  var valid_594529 = query.getOrDefault("VpcSecurityGroupIds")
  valid_594529 = validateParameter(valid_594529, JArray, required = false,
                                 default = nil)
  if valid_594529 != nil:
    section.add "VpcSecurityGroupIds", valid_594529
  var valid_594530 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_594530 = validateParameter(valid_594530, JArray, required = false,
                                 default = nil)
  if valid_594530 != nil:
    section.add "EnableCloudwatchLogsExports", valid_594530
  var valid_594531 = query.getOrDefault("Tags")
  valid_594531 = validateParameter(valid_594531, JArray, required = false,
                                 default = nil)
  if valid_594531 != nil:
    section.add "Tags", valid_594531
  var valid_594532 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_594532 = validateParameter(valid_594532, JString, required = false,
                                 default = nil)
  if valid_594532 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_594532
  var valid_594533 = query.getOrDefault("Action")
  valid_594533 = validateParameter(valid_594533, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_594533 != nil:
    section.add "Action", valid_594533
  var valid_594534 = query.getOrDefault("CharacterSetName")
  valid_594534 = validateParameter(valid_594534, JString, required = false,
                                 default = nil)
  if valid_594534 != nil:
    section.add "CharacterSetName", valid_594534
  var valid_594535 = query.getOrDefault("BacktrackWindow")
  valid_594535 = validateParameter(valid_594535, JInt, required = false, default = nil)
  if valid_594535 != nil:
    section.add "BacktrackWindow", valid_594535
  var valid_594536 = query.getOrDefault("GlobalClusterIdentifier")
  valid_594536 = validateParameter(valid_594536, JString, required = false,
                                 default = nil)
  if valid_594536 != nil:
    section.add "GlobalClusterIdentifier", valid_594536
  var valid_594537 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_594537 = validateParameter(valid_594537, JString, required = false,
                                 default = nil)
  if valid_594537 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_594537
  var valid_594538 = query.getOrDefault("Port")
  valid_594538 = validateParameter(valid_594538, JInt, required = false, default = nil)
  if valid_594538 != nil:
    section.add "Port", valid_594538
  var valid_594539 = query.getOrDefault("Version")
  valid_594539 = validateParameter(valid_594539, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594539 != nil:
    section.add "Version", valid_594539
  var valid_594540 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_594540 = validateParameter(valid_594540, JString, required = false,
                                 default = nil)
  if valid_594540 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_594540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594541 = header.getOrDefault("X-Amz-Date")
  valid_594541 = validateParameter(valid_594541, JString, required = false,
                                 default = nil)
  if valid_594541 != nil:
    section.add "X-Amz-Date", valid_594541
  var valid_594542 = header.getOrDefault("X-Amz-Security-Token")
  valid_594542 = validateParameter(valid_594542, JString, required = false,
                                 default = nil)
  if valid_594542 != nil:
    section.add "X-Amz-Security-Token", valid_594542
  var valid_594543 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594543 = validateParameter(valid_594543, JString, required = false,
                                 default = nil)
  if valid_594543 != nil:
    section.add "X-Amz-Content-Sha256", valid_594543
  var valid_594544 = header.getOrDefault("X-Amz-Algorithm")
  valid_594544 = validateParameter(valid_594544, JString, required = false,
                                 default = nil)
  if valid_594544 != nil:
    section.add "X-Amz-Algorithm", valid_594544
  var valid_594545 = header.getOrDefault("X-Amz-Signature")
  valid_594545 = validateParameter(valid_594545, JString, required = false,
                                 default = nil)
  if valid_594545 != nil:
    section.add "X-Amz-Signature", valid_594545
  var valid_594546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594546 = validateParameter(valid_594546, JString, required = false,
                                 default = nil)
  if valid_594546 != nil:
    section.add "X-Amz-SignedHeaders", valid_594546
  var valid_594547 = header.getOrDefault("X-Amz-Credential")
  valid_594547 = validateParameter(valid_594547, JString, required = false,
                                 default = nil)
  if valid_594547 != nil:
    section.add "X-Amz-Credential", valid_594547
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594548: Call_GetCreateDBCluster_594483; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594548.validator(path, query, header, formData, body)
  let scheme = call_594548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594548.url(scheme.get, call_594548.host, call_594548.base,
                         call_594548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594548, url, valid)

proc call*(call_594549: Call_GetCreateDBCluster_594483; Engine: string;
          DBClusterIdentifier: string; ReplicationSourceIdentifier: string = "";
          DBClusterParameterGroupName: string = ""; StorageEncrypted: bool = false;
          AvailabilityZones: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          MasterUserPassword: string = ""; BackupRetentionPeriod: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          EnableHttpEndpoint: bool = false; DBSubnetGroupName: string = "";
          KmsKeyId: string = ""; ScalingConfigurationMaxCapacity: string = "";
          EngineVersion: string = ""; PreferredBackupWindow: string = "";
          MasterUsername: string = ""; ScalingConfigurationMinCapacity: string = "";
          PreferredMaintenanceWindow: string = ""; SourceRegion: string = "";
          DatabaseName: string = ""; OptionGroupName: string = "";
          EngineMode: string = ""; PreSignedUrl: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          ScalingConfigurationAutoPause: string = "";
          Action: string = "CreateDBCluster"; CharacterSetName: string = "";
          BacktrackWindow: int = 0; GlobalClusterIdentifier: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = ""; Port: int = 0;
          Version: string = "2014-10-31";
          ScalingConfigurationTimeoutAction: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   Version: string (required)
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  var query_594550 = newJObject()
  add(query_594550, "Engine", newJString(Engine))
  add(query_594550, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_594550, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_594550, "StorageEncrypted", newJBool(StorageEncrypted))
  if AvailabilityZones != nil:
    query_594550.add "AvailabilityZones", AvailabilityZones
  add(query_594550, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_594550, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594550, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_594550, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_594550, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_594550, "DeletionProtection", newJBool(DeletionProtection))
  add(query_594550, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_594550, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_594550, "KmsKeyId", newJString(KmsKeyId))
  add(query_594550, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_594550, "EngineVersion", newJString(EngineVersion))
  add(query_594550, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_594550, "MasterUsername", newJString(MasterUsername))
  add(query_594550, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_594550, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_594550, "SourceRegion", newJString(SourceRegion))
  add(query_594550, "DatabaseName", newJString(DatabaseName))
  add(query_594550, "OptionGroupName", newJString(OptionGroupName))
  add(query_594550, "EngineMode", newJString(EngineMode))
  add(query_594550, "PreSignedUrl", newJString(PreSignedUrl))
  if VpcSecurityGroupIds != nil:
    query_594550.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_594550.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_594550.add "Tags", Tags
  add(query_594550, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_594550, "Action", newJString(Action))
  add(query_594550, "CharacterSetName", newJString(CharacterSetName))
  add(query_594550, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_594550, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_594550, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_594550, "Port", newJInt(Port))
  add(query_594550, "Version", newJString(Version))
  add(query_594550, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  result = call_594549.call(nil, query_594550, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_594483(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_594484,
    base: "/", url: url_GetCreateDBCluster_594485,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterEndpoint_594622 = ref object of OpenApiRestCall_593421
proc url_PostCreateDBClusterEndpoint_594624(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterEndpoint_594623(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594625 = query.getOrDefault("Action")
  valid_594625 = validateParameter(valid_594625, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_594625 != nil:
    section.add "Action", valid_594625
  var valid_594626 = query.getOrDefault("Version")
  valid_594626 = validateParameter(valid_594626, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594626 != nil:
    section.add "Version", valid_594626
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594627 = header.getOrDefault("X-Amz-Date")
  valid_594627 = validateParameter(valid_594627, JString, required = false,
                                 default = nil)
  if valid_594627 != nil:
    section.add "X-Amz-Date", valid_594627
  var valid_594628 = header.getOrDefault("X-Amz-Security-Token")
  valid_594628 = validateParameter(valid_594628, JString, required = false,
                                 default = nil)
  if valid_594628 != nil:
    section.add "X-Amz-Security-Token", valid_594628
  var valid_594629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594629 = validateParameter(valid_594629, JString, required = false,
                                 default = nil)
  if valid_594629 != nil:
    section.add "X-Amz-Content-Sha256", valid_594629
  var valid_594630 = header.getOrDefault("X-Amz-Algorithm")
  valid_594630 = validateParameter(valid_594630, JString, required = false,
                                 default = nil)
  if valid_594630 != nil:
    section.add "X-Amz-Algorithm", valid_594630
  var valid_594631 = header.getOrDefault("X-Amz-Signature")
  valid_594631 = validateParameter(valid_594631, JString, required = false,
                                 default = nil)
  if valid_594631 != nil:
    section.add "X-Amz-Signature", valid_594631
  var valid_594632 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594632 = validateParameter(valid_594632, JString, required = false,
                                 default = nil)
  if valid_594632 != nil:
    section.add "X-Amz-SignedHeaders", valid_594632
  var valid_594633 = header.getOrDefault("X-Amz-Credential")
  valid_594633 = validateParameter(valid_594633, JString, required = false,
                                 default = nil)
  if valid_594633 != nil:
    section.add "X-Amz-Credential", valid_594633
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  section = newJObject()
  var valid_594634 = formData.getOrDefault("ExcludedMembers")
  valid_594634 = validateParameter(valid_594634, JArray, required = false,
                                 default = nil)
  if valid_594634 != nil:
    section.add "ExcludedMembers", valid_594634
  assert formData != nil,
        "formData argument is necessary due to required `EndpointType` field"
  var valid_594635 = formData.getOrDefault("EndpointType")
  valid_594635 = validateParameter(valid_594635, JString, required = true,
                                 default = nil)
  if valid_594635 != nil:
    section.add "EndpointType", valid_594635
  var valid_594636 = formData.getOrDefault("DBClusterIdentifier")
  valid_594636 = validateParameter(valid_594636, JString, required = true,
                                 default = nil)
  if valid_594636 != nil:
    section.add "DBClusterIdentifier", valid_594636
  var valid_594637 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_594637 = validateParameter(valid_594637, JString, required = true,
                                 default = nil)
  if valid_594637 != nil:
    section.add "DBClusterEndpointIdentifier", valid_594637
  var valid_594638 = formData.getOrDefault("StaticMembers")
  valid_594638 = validateParameter(valid_594638, JArray, required = false,
                                 default = nil)
  if valid_594638 != nil:
    section.add "StaticMembers", valid_594638
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594639: Call_PostCreateDBClusterEndpoint_594622; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594639.validator(path, query, header, formData, body)
  let scheme = call_594639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594639.url(scheme.get, call_594639.host, call_594639.base,
                         call_594639.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594639, url, valid)

proc call*(call_594640: Call_PostCreateDBClusterEndpoint_594622;
          EndpointType: string; DBClusterIdentifier: string;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint"; StaticMembers: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Version: string (required)
  var query_594641 = newJObject()
  var formData_594642 = newJObject()
  if ExcludedMembers != nil:
    formData_594642.add "ExcludedMembers", ExcludedMembers
  add(formData_594642, "EndpointType", newJString(EndpointType))
  add(query_594641, "Action", newJString(Action))
  add(formData_594642, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_594642, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_594642.add "StaticMembers", StaticMembers
  add(query_594641, "Version", newJString(Version))
  result = call_594640.call(nil, query_594641, nil, formData_594642, nil)

var postCreateDBClusterEndpoint* = Call_PostCreateDBClusterEndpoint_594622(
    name: "postCreateDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_PostCreateDBClusterEndpoint_594623, base: "/",
    url: url_PostCreateDBClusterEndpoint_594624,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterEndpoint_594602 = ref object of OpenApiRestCall_593421
proc url_GetCreateDBClusterEndpoint_594604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterEndpoint_594603(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: JString (required)
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EndpointType` field"
  var valid_594605 = query.getOrDefault("EndpointType")
  valid_594605 = validateParameter(valid_594605, JString, required = true,
                                 default = nil)
  if valid_594605 != nil:
    section.add "EndpointType", valid_594605
  var valid_594606 = query.getOrDefault("DBClusterIdentifier")
  valid_594606 = validateParameter(valid_594606, JString, required = true,
                                 default = nil)
  if valid_594606 != nil:
    section.add "DBClusterIdentifier", valid_594606
  var valid_594607 = query.getOrDefault("StaticMembers")
  valid_594607 = validateParameter(valid_594607, JArray, required = false,
                                 default = nil)
  if valid_594607 != nil:
    section.add "StaticMembers", valid_594607
  var valid_594608 = query.getOrDefault("Action")
  valid_594608 = validateParameter(valid_594608, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_594608 != nil:
    section.add "Action", valid_594608
  var valid_594609 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_594609 = validateParameter(valid_594609, JString, required = true,
                                 default = nil)
  if valid_594609 != nil:
    section.add "DBClusterEndpointIdentifier", valid_594609
  var valid_594610 = query.getOrDefault("ExcludedMembers")
  valid_594610 = validateParameter(valid_594610, JArray, required = false,
                                 default = nil)
  if valid_594610 != nil:
    section.add "ExcludedMembers", valid_594610
  var valid_594611 = query.getOrDefault("Version")
  valid_594611 = validateParameter(valid_594611, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594611 != nil:
    section.add "Version", valid_594611
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594612 = header.getOrDefault("X-Amz-Date")
  valid_594612 = validateParameter(valid_594612, JString, required = false,
                                 default = nil)
  if valid_594612 != nil:
    section.add "X-Amz-Date", valid_594612
  var valid_594613 = header.getOrDefault("X-Amz-Security-Token")
  valid_594613 = validateParameter(valid_594613, JString, required = false,
                                 default = nil)
  if valid_594613 != nil:
    section.add "X-Amz-Security-Token", valid_594613
  var valid_594614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594614 = validateParameter(valid_594614, JString, required = false,
                                 default = nil)
  if valid_594614 != nil:
    section.add "X-Amz-Content-Sha256", valid_594614
  var valid_594615 = header.getOrDefault("X-Amz-Algorithm")
  valid_594615 = validateParameter(valid_594615, JString, required = false,
                                 default = nil)
  if valid_594615 != nil:
    section.add "X-Amz-Algorithm", valid_594615
  var valid_594616 = header.getOrDefault("X-Amz-Signature")
  valid_594616 = validateParameter(valid_594616, JString, required = false,
                                 default = nil)
  if valid_594616 != nil:
    section.add "X-Amz-Signature", valid_594616
  var valid_594617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594617 = validateParameter(valid_594617, JString, required = false,
                                 default = nil)
  if valid_594617 != nil:
    section.add "X-Amz-SignedHeaders", valid_594617
  var valid_594618 = header.getOrDefault("X-Amz-Credential")
  valid_594618 = validateParameter(valid_594618, JString, required = false,
                                 default = nil)
  if valid_594618 != nil:
    section.add "X-Amz-Credential", valid_594618
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594619: Call_GetCreateDBClusterEndpoint_594602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594619.validator(path, query, header, formData, body)
  let scheme = call_594619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594619.url(scheme.get, call_594619.host, call_594619.base,
                         call_594619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594619, url, valid)

proc call*(call_594620: Call_GetCreateDBClusterEndpoint_594602;
          EndpointType: string; DBClusterIdentifier: string;
          DBClusterEndpointIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_594621 = newJObject()
  add(query_594621, "EndpointType", newJString(EndpointType))
  add(query_594621, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if StaticMembers != nil:
    query_594621.add "StaticMembers", StaticMembers
  add(query_594621, "Action", newJString(Action))
  add(query_594621, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if ExcludedMembers != nil:
    query_594621.add "ExcludedMembers", ExcludedMembers
  add(query_594621, "Version", newJString(Version))
  result = call_594620.call(nil, query_594621, nil, nil, nil)

var getCreateDBClusterEndpoint* = Call_GetCreateDBClusterEndpoint_594602(
    name: "getCreateDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_GetCreateDBClusterEndpoint_594603, base: "/",
    url: url_GetCreateDBClusterEndpoint_594604,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_594662 = ref object of OpenApiRestCall_593421
proc url_PostCreateDBClusterParameterGroup_594664(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_594663(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594665 = query.getOrDefault("Action")
  valid_594665 = validateParameter(valid_594665, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_594665 != nil:
    section.add "Action", valid_594665
  var valid_594666 = query.getOrDefault("Version")
  valid_594666 = validateParameter(valid_594666, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594666 != nil:
    section.add "Version", valid_594666
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594667 = header.getOrDefault("X-Amz-Date")
  valid_594667 = validateParameter(valid_594667, JString, required = false,
                                 default = nil)
  if valid_594667 != nil:
    section.add "X-Amz-Date", valid_594667
  var valid_594668 = header.getOrDefault("X-Amz-Security-Token")
  valid_594668 = validateParameter(valid_594668, JString, required = false,
                                 default = nil)
  if valid_594668 != nil:
    section.add "X-Amz-Security-Token", valid_594668
  var valid_594669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594669 = validateParameter(valid_594669, JString, required = false,
                                 default = nil)
  if valid_594669 != nil:
    section.add "X-Amz-Content-Sha256", valid_594669
  var valid_594670 = header.getOrDefault("X-Amz-Algorithm")
  valid_594670 = validateParameter(valid_594670, JString, required = false,
                                 default = nil)
  if valid_594670 != nil:
    section.add "X-Amz-Algorithm", valid_594670
  var valid_594671 = header.getOrDefault("X-Amz-Signature")
  valid_594671 = validateParameter(valid_594671, JString, required = false,
                                 default = nil)
  if valid_594671 != nil:
    section.add "X-Amz-Signature", valid_594671
  var valid_594672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594672 = validateParameter(valid_594672, JString, required = false,
                                 default = nil)
  if valid_594672 != nil:
    section.add "X-Amz-SignedHeaders", valid_594672
  var valid_594673 = header.getOrDefault("X-Amz-Credential")
  valid_594673 = validateParameter(valid_594673, JString, required = false,
                                 default = nil)
  if valid_594673 != nil:
    section.add "X-Amz-Credential", valid_594673
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  section = newJObject()
  var valid_594674 = formData.getOrDefault("Tags")
  valid_594674 = validateParameter(valid_594674, JArray, required = false,
                                 default = nil)
  if valid_594674 != nil:
    section.add "Tags", valid_594674
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_594675 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_594675 = validateParameter(valid_594675, JString, required = true,
                                 default = nil)
  if valid_594675 != nil:
    section.add "DBClusterParameterGroupName", valid_594675
  var valid_594676 = formData.getOrDefault("DBParameterGroupFamily")
  valid_594676 = validateParameter(valid_594676, JString, required = true,
                                 default = nil)
  if valid_594676 != nil:
    section.add "DBParameterGroupFamily", valid_594676
  var valid_594677 = formData.getOrDefault("Description")
  valid_594677 = validateParameter(valid_594677, JString, required = true,
                                 default = nil)
  if valid_594677 != nil:
    section.add "Description", valid_594677
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594678: Call_PostCreateDBClusterParameterGroup_594662;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594678.validator(path, query, header, formData, body)
  let scheme = call_594678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594678.url(scheme.get, call_594678.host, call_594678.base,
                         call_594678.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594678, url, valid)

proc call*(call_594679: Call_PostCreateDBClusterParameterGroup_594662;
          DBClusterParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  var query_594680 = newJObject()
  var formData_594681 = newJObject()
  if Tags != nil:
    formData_594681.add "Tags", Tags
  add(query_594680, "Action", newJString(Action))
  add(formData_594681, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_594681, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_594680, "Version", newJString(Version))
  add(formData_594681, "Description", newJString(Description))
  result = call_594679.call(nil, query_594680, nil, formData_594681, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_594662(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_594663, base: "/",
    url: url_PostCreateDBClusterParameterGroup_594664,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_594643 = ref object of OpenApiRestCall_593421
proc url_GetCreateDBClusterParameterGroup_594645(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_594644(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_594646 = query.getOrDefault("DBClusterParameterGroupName")
  valid_594646 = validateParameter(valid_594646, JString, required = true,
                                 default = nil)
  if valid_594646 != nil:
    section.add "DBClusterParameterGroupName", valid_594646
  var valid_594647 = query.getOrDefault("Description")
  valid_594647 = validateParameter(valid_594647, JString, required = true,
                                 default = nil)
  if valid_594647 != nil:
    section.add "Description", valid_594647
  var valid_594648 = query.getOrDefault("DBParameterGroupFamily")
  valid_594648 = validateParameter(valid_594648, JString, required = true,
                                 default = nil)
  if valid_594648 != nil:
    section.add "DBParameterGroupFamily", valid_594648
  var valid_594649 = query.getOrDefault("Tags")
  valid_594649 = validateParameter(valid_594649, JArray, required = false,
                                 default = nil)
  if valid_594649 != nil:
    section.add "Tags", valid_594649
  var valid_594650 = query.getOrDefault("Action")
  valid_594650 = validateParameter(valid_594650, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_594650 != nil:
    section.add "Action", valid_594650
  var valid_594651 = query.getOrDefault("Version")
  valid_594651 = validateParameter(valid_594651, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594651 != nil:
    section.add "Version", valid_594651
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594652 = header.getOrDefault("X-Amz-Date")
  valid_594652 = validateParameter(valid_594652, JString, required = false,
                                 default = nil)
  if valid_594652 != nil:
    section.add "X-Amz-Date", valid_594652
  var valid_594653 = header.getOrDefault("X-Amz-Security-Token")
  valid_594653 = validateParameter(valid_594653, JString, required = false,
                                 default = nil)
  if valid_594653 != nil:
    section.add "X-Amz-Security-Token", valid_594653
  var valid_594654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594654 = validateParameter(valid_594654, JString, required = false,
                                 default = nil)
  if valid_594654 != nil:
    section.add "X-Amz-Content-Sha256", valid_594654
  var valid_594655 = header.getOrDefault("X-Amz-Algorithm")
  valid_594655 = validateParameter(valid_594655, JString, required = false,
                                 default = nil)
  if valid_594655 != nil:
    section.add "X-Amz-Algorithm", valid_594655
  var valid_594656 = header.getOrDefault("X-Amz-Signature")
  valid_594656 = validateParameter(valid_594656, JString, required = false,
                                 default = nil)
  if valid_594656 != nil:
    section.add "X-Amz-Signature", valid_594656
  var valid_594657 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594657 = validateParameter(valid_594657, JString, required = false,
                                 default = nil)
  if valid_594657 != nil:
    section.add "X-Amz-SignedHeaders", valid_594657
  var valid_594658 = header.getOrDefault("X-Amz-Credential")
  valid_594658 = validateParameter(valid_594658, JString, required = false,
                                 default = nil)
  if valid_594658 != nil:
    section.add "X-Amz-Credential", valid_594658
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594659: Call_GetCreateDBClusterParameterGroup_594643;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594659.validator(path, query, header, formData, body)
  let scheme = call_594659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594659.url(scheme.get, call_594659.host, call_594659.base,
                         call_594659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594659, url, valid)

proc call*(call_594660: Call_GetCreateDBClusterParameterGroup_594643;
          DBClusterParameterGroupName: string; Description: string;
          DBParameterGroupFamily: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594661 = newJObject()
  add(query_594661, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_594661, "Description", newJString(Description))
  add(query_594661, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_594661.add "Tags", Tags
  add(query_594661, "Action", newJString(Action))
  add(query_594661, "Version", newJString(Version))
  result = call_594660.call(nil, query_594661, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_594643(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_594644, base: "/",
    url: url_GetCreateDBClusterParameterGroup_594645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_594700 = ref object of OpenApiRestCall_593421
proc url_PostCreateDBClusterSnapshot_594702(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterSnapshot_594701(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594703 = query.getOrDefault("Action")
  valid_594703 = validateParameter(valid_594703, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_594703 != nil:
    section.add "Action", valid_594703
  var valid_594704 = query.getOrDefault("Version")
  valid_594704 = validateParameter(valid_594704, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594704 != nil:
    section.add "Version", valid_594704
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594705 = header.getOrDefault("X-Amz-Date")
  valid_594705 = validateParameter(valid_594705, JString, required = false,
                                 default = nil)
  if valid_594705 != nil:
    section.add "X-Amz-Date", valid_594705
  var valid_594706 = header.getOrDefault("X-Amz-Security-Token")
  valid_594706 = validateParameter(valid_594706, JString, required = false,
                                 default = nil)
  if valid_594706 != nil:
    section.add "X-Amz-Security-Token", valid_594706
  var valid_594707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594707 = validateParameter(valid_594707, JString, required = false,
                                 default = nil)
  if valid_594707 != nil:
    section.add "X-Amz-Content-Sha256", valid_594707
  var valid_594708 = header.getOrDefault("X-Amz-Algorithm")
  valid_594708 = validateParameter(valid_594708, JString, required = false,
                                 default = nil)
  if valid_594708 != nil:
    section.add "X-Amz-Algorithm", valid_594708
  var valid_594709 = header.getOrDefault("X-Amz-Signature")
  valid_594709 = validateParameter(valid_594709, JString, required = false,
                                 default = nil)
  if valid_594709 != nil:
    section.add "X-Amz-Signature", valid_594709
  var valid_594710 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594710 = validateParameter(valid_594710, JString, required = false,
                                 default = nil)
  if valid_594710 != nil:
    section.add "X-Amz-SignedHeaders", valid_594710
  var valid_594711 = header.getOrDefault("X-Amz-Credential")
  valid_594711 = validateParameter(valid_594711, JString, required = false,
                                 default = nil)
  if valid_594711 != nil:
    section.add "X-Amz-Credential", valid_594711
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_594712 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_594712 = validateParameter(valid_594712, JString, required = true,
                                 default = nil)
  if valid_594712 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_594712
  var valid_594713 = formData.getOrDefault("Tags")
  valid_594713 = validateParameter(valid_594713, JArray, required = false,
                                 default = nil)
  if valid_594713 != nil:
    section.add "Tags", valid_594713
  var valid_594714 = formData.getOrDefault("DBClusterIdentifier")
  valid_594714 = validateParameter(valid_594714, JString, required = true,
                                 default = nil)
  if valid_594714 != nil:
    section.add "DBClusterIdentifier", valid_594714
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594715: Call_PostCreateDBClusterSnapshot_594700; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594715.validator(path, query, header, formData, body)
  let scheme = call_594715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594715.url(scheme.get, call_594715.host, call_594715.base,
                         call_594715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594715, url, valid)

proc call*(call_594716: Call_PostCreateDBClusterSnapshot_594700;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_594717 = newJObject()
  var formData_594718 = newJObject()
  add(formData_594718, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    formData_594718.add "Tags", Tags
  add(query_594717, "Action", newJString(Action))
  add(formData_594718, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594717, "Version", newJString(Version))
  result = call_594716.call(nil, query_594717, nil, formData_594718, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_594700(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_594701, base: "/",
    url: url_PostCreateDBClusterSnapshot_594702,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_594682 = ref object of OpenApiRestCall_593421
proc url_GetCreateDBClusterSnapshot_594684(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterSnapshot_594683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594685 = query.getOrDefault("DBClusterIdentifier")
  valid_594685 = validateParameter(valid_594685, JString, required = true,
                                 default = nil)
  if valid_594685 != nil:
    section.add "DBClusterIdentifier", valid_594685
  var valid_594686 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_594686 = validateParameter(valid_594686, JString, required = true,
                                 default = nil)
  if valid_594686 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_594686
  var valid_594687 = query.getOrDefault("Tags")
  valid_594687 = validateParameter(valid_594687, JArray, required = false,
                                 default = nil)
  if valid_594687 != nil:
    section.add "Tags", valid_594687
  var valid_594688 = query.getOrDefault("Action")
  valid_594688 = validateParameter(valid_594688, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_594688 != nil:
    section.add "Action", valid_594688
  var valid_594689 = query.getOrDefault("Version")
  valid_594689 = validateParameter(valid_594689, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594689 != nil:
    section.add "Version", valid_594689
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594690 = header.getOrDefault("X-Amz-Date")
  valid_594690 = validateParameter(valid_594690, JString, required = false,
                                 default = nil)
  if valid_594690 != nil:
    section.add "X-Amz-Date", valid_594690
  var valid_594691 = header.getOrDefault("X-Amz-Security-Token")
  valid_594691 = validateParameter(valid_594691, JString, required = false,
                                 default = nil)
  if valid_594691 != nil:
    section.add "X-Amz-Security-Token", valid_594691
  var valid_594692 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594692 = validateParameter(valid_594692, JString, required = false,
                                 default = nil)
  if valid_594692 != nil:
    section.add "X-Amz-Content-Sha256", valid_594692
  var valid_594693 = header.getOrDefault("X-Amz-Algorithm")
  valid_594693 = validateParameter(valid_594693, JString, required = false,
                                 default = nil)
  if valid_594693 != nil:
    section.add "X-Amz-Algorithm", valid_594693
  var valid_594694 = header.getOrDefault("X-Amz-Signature")
  valid_594694 = validateParameter(valid_594694, JString, required = false,
                                 default = nil)
  if valid_594694 != nil:
    section.add "X-Amz-Signature", valid_594694
  var valid_594695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594695 = validateParameter(valid_594695, JString, required = false,
                                 default = nil)
  if valid_594695 != nil:
    section.add "X-Amz-SignedHeaders", valid_594695
  var valid_594696 = header.getOrDefault("X-Amz-Credential")
  valid_594696 = validateParameter(valid_594696, JString, required = false,
                                 default = nil)
  if valid_594696 != nil:
    section.add "X-Amz-Credential", valid_594696
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594697: Call_GetCreateDBClusterSnapshot_594682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594697.validator(path, query, header, formData, body)
  let scheme = call_594697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594697.url(scheme.get, call_594697.host, call_594697.base,
                         call_594697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594697, url, valid)

proc call*(call_594698: Call_GetCreateDBClusterSnapshot_594682;
          DBClusterIdentifier: string; DBClusterSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594699 = newJObject()
  add(query_594699, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594699, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_594699.add "Tags", Tags
  add(query_594699, "Action", newJString(Action))
  add(query_594699, "Version", newJString(Version))
  result = call_594698.call(nil, query_594699, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_594682(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_594683, base: "/",
    url: url_GetCreateDBClusterSnapshot_594684,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_594780 = ref object of OpenApiRestCall_593421
proc url_PostCreateDBInstance_594782(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBInstance_594781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594783 = query.getOrDefault("Action")
  valid_594783 = validateParameter(valid_594783, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_594783 != nil:
    section.add "Action", valid_594783
  var valid_594784 = query.getOrDefault("Version")
  valid_594784 = validateParameter(valid_594784, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594784 != nil:
    section.add "Version", valid_594784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594785 = header.getOrDefault("X-Amz-Date")
  valid_594785 = validateParameter(valid_594785, JString, required = false,
                                 default = nil)
  if valid_594785 != nil:
    section.add "X-Amz-Date", valid_594785
  var valid_594786 = header.getOrDefault("X-Amz-Security-Token")
  valid_594786 = validateParameter(valid_594786, JString, required = false,
                                 default = nil)
  if valid_594786 != nil:
    section.add "X-Amz-Security-Token", valid_594786
  var valid_594787 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594787 = validateParameter(valid_594787, JString, required = false,
                                 default = nil)
  if valid_594787 != nil:
    section.add "X-Amz-Content-Sha256", valid_594787
  var valid_594788 = header.getOrDefault("X-Amz-Algorithm")
  valid_594788 = validateParameter(valid_594788, JString, required = false,
                                 default = nil)
  if valid_594788 != nil:
    section.add "X-Amz-Algorithm", valid_594788
  var valid_594789 = header.getOrDefault("X-Amz-Signature")
  valid_594789 = validateParameter(valid_594789, JString, required = false,
                                 default = nil)
  if valid_594789 != nil:
    section.add "X-Amz-Signature", valid_594789
  var valid_594790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594790 = validateParameter(valid_594790, JString, required = false,
                                 default = nil)
  if valid_594790 != nil:
    section.add "X-Amz-SignedHeaders", valid_594790
  var valid_594791 = header.getOrDefault("X-Amz-Credential")
  valid_594791 = validateParameter(valid_594791, JString, required = false,
                                 default = nil)
  if valid_594791 != nil:
    section.add "X-Amz-Credential", valid_594791
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Domain: JString
  ##         : For an Amazon RDS DB instance that's running Microsoft SQL Server, this parameter specifies the Active Directory directory ID to create the instance in. Amazon RDS uses Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/USER_SQLServerWinAuth.html">Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>. 
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_594792 = formData.getOrDefault("ProcessorFeatures")
  valid_594792 = validateParameter(valid_594792, JArray, required = false,
                                 default = nil)
  if valid_594792 != nil:
    section.add "ProcessorFeatures", valid_594792
  var valid_594793 = formData.getOrDefault("EnablePerformanceInsights")
  valid_594793 = validateParameter(valid_594793, JBool, required = false, default = nil)
  if valid_594793 != nil:
    section.add "EnablePerformanceInsights", valid_594793
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_594794 = formData.getOrDefault("Engine")
  valid_594794 = validateParameter(valid_594794, JString, required = true,
                                 default = nil)
  if valid_594794 != nil:
    section.add "Engine", valid_594794
  var valid_594795 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_594795 = validateParameter(valid_594795, JArray, required = false,
                                 default = nil)
  if valid_594795 != nil:
    section.add "VpcSecurityGroupIds", valid_594795
  var valid_594796 = formData.getOrDefault("Iops")
  valid_594796 = validateParameter(valid_594796, JInt, required = false, default = nil)
  if valid_594796 != nil:
    section.add "Iops", valid_594796
  var valid_594797 = formData.getOrDefault("BackupRetentionPeriod")
  valid_594797 = validateParameter(valid_594797, JInt, required = false, default = nil)
  if valid_594797 != nil:
    section.add "BackupRetentionPeriod", valid_594797
  var valid_594798 = formData.getOrDefault("MaxAllocatedStorage")
  valid_594798 = validateParameter(valid_594798, JInt, required = false, default = nil)
  if valid_594798 != nil:
    section.add "MaxAllocatedStorage", valid_594798
  var valid_594799 = formData.getOrDefault("Tags")
  valid_594799 = validateParameter(valid_594799, JArray, required = false,
                                 default = nil)
  if valid_594799 != nil:
    section.add "Tags", valid_594799
  var valid_594800 = formData.getOrDefault("TdeCredentialArn")
  valid_594800 = validateParameter(valid_594800, JString, required = false,
                                 default = nil)
  if valid_594800 != nil:
    section.add "TdeCredentialArn", valid_594800
  var valid_594801 = formData.getOrDefault("DeletionProtection")
  valid_594801 = validateParameter(valid_594801, JBool, required = false, default = nil)
  if valid_594801 != nil:
    section.add "DeletionProtection", valid_594801
  var valid_594802 = formData.getOrDefault("DBSubnetGroupName")
  valid_594802 = validateParameter(valid_594802, JString, required = false,
                                 default = nil)
  if valid_594802 != nil:
    section.add "DBSubnetGroupName", valid_594802
  var valid_594803 = formData.getOrDefault("MultiAZ")
  valid_594803 = validateParameter(valid_594803, JBool, required = false, default = nil)
  if valid_594803 != nil:
    section.add "MultiAZ", valid_594803
  var valid_594804 = formData.getOrDefault("PubliclyAccessible")
  valid_594804 = validateParameter(valid_594804, JBool, required = false, default = nil)
  if valid_594804 != nil:
    section.add "PubliclyAccessible", valid_594804
  var valid_594805 = formData.getOrDefault("StorageType")
  valid_594805 = validateParameter(valid_594805, JString, required = false,
                                 default = nil)
  if valid_594805 != nil:
    section.add "StorageType", valid_594805
  var valid_594806 = formData.getOrDefault("Timezone")
  valid_594806 = validateParameter(valid_594806, JString, required = false,
                                 default = nil)
  if valid_594806 != nil:
    section.add "Timezone", valid_594806
  var valid_594807 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_594807 = validateParameter(valid_594807, JArray, required = false,
                                 default = nil)
  if valid_594807 != nil:
    section.add "EnableCloudwatchLogsExports", valid_594807
  var valid_594808 = formData.getOrDefault("CharacterSetName")
  valid_594808 = validateParameter(valid_594808, JString, required = false,
                                 default = nil)
  if valid_594808 != nil:
    section.add "CharacterSetName", valid_594808
  var valid_594809 = formData.getOrDefault("Domain")
  valid_594809 = validateParameter(valid_594809, JString, required = false,
                                 default = nil)
  if valid_594809 != nil:
    section.add "Domain", valid_594809
  var valid_594810 = formData.getOrDefault("LicenseModel")
  valid_594810 = validateParameter(valid_594810, JString, required = false,
                                 default = nil)
  if valid_594810 != nil:
    section.add "LicenseModel", valid_594810
  var valid_594811 = formData.getOrDefault("KmsKeyId")
  valid_594811 = validateParameter(valid_594811, JString, required = false,
                                 default = nil)
  if valid_594811 != nil:
    section.add "KmsKeyId", valid_594811
  var valid_594812 = formData.getOrDefault("StorageEncrypted")
  valid_594812 = validateParameter(valid_594812, JBool, required = false, default = nil)
  if valid_594812 != nil:
    section.add "StorageEncrypted", valid_594812
  var valid_594813 = formData.getOrDefault("DBClusterIdentifier")
  valid_594813 = validateParameter(valid_594813, JString, required = false,
                                 default = nil)
  if valid_594813 != nil:
    section.add "DBClusterIdentifier", valid_594813
  var valid_594814 = formData.getOrDefault("MonitoringRoleArn")
  valid_594814 = validateParameter(valid_594814, JString, required = false,
                                 default = nil)
  if valid_594814 != nil:
    section.add "MonitoringRoleArn", valid_594814
  var valid_594815 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_594815 = validateParameter(valid_594815, JInt, required = false, default = nil)
  if valid_594815 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_594815
  var valid_594816 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_594816 = validateParameter(valid_594816, JString, required = false,
                                 default = nil)
  if valid_594816 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_594816
  var valid_594817 = formData.getOrDefault("DBSecurityGroups")
  valid_594817 = validateParameter(valid_594817, JArray, required = false,
                                 default = nil)
  if valid_594817 != nil:
    section.add "DBSecurityGroups", valid_594817
  var valid_594818 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_594818 = validateParameter(valid_594818, JBool, required = false, default = nil)
  if valid_594818 != nil:
    section.add "CopyTagsToSnapshot", valid_594818
  var valid_594819 = formData.getOrDefault("Port")
  valid_594819 = validateParameter(valid_594819, JInt, required = false, default = nil)
  if valid_594819 != nil:
    section.add "Port", valid_594819
  var valid_594820 = formData.getOrDefault("DBName")
  valid_594820 = validateParameter(valid_594820, JString, required = false,
                                 default = nil)
  if valid_594820 != nil:
    section.add "DBName", valid_594820
  var valid_594821 = formData.getOrDefault("DBInstanceIdentifier")
  valid_594821 = validateParameter(valid_594821, JString, required = true,
                                 default = nil)
  if valid_594821 != nil:
    section.add "DBInstanceIdentifier", valid_594821
  var valid_594822 = formData.getOrDefault("OptionGroupName")
  valid_594822 = validateParameter(valid_594822, JString, required = false,
                                 default = nil)
  if valid_594822 != nil:
    section.add "OptionGroupName", valid_594822
  var valid_594823 = formData.getOrDefault("DBParameterGroupName")
  valid_594823 = validateParameter(valid_594823, JString, required = false,
                                 default = nil)
  if valid_594823 != nil:
    section.add "DBParameterGroupName", valid_594823
  var valid_594824 = formData.getOrDefault("MasterUserPassword")
  valid_594824 = validateParameter(valid_594824, JString, required = false,
                                 default = nil)
  if valid_594824 != nil:
    section.add "MasterUserPassword", valid_594824
  var valid_594825 = formData.getOrDefault("TdeCredentialPassword")
  valid_594825 = validateParameter(valid_594825, JString, required = false,
                                 default = nil)
  if valid_594825 != nil:
    section.add "TdeCredentialPassword", valid_594825
  var valid_594826 = formData.getOrDefault("AvailabilityZone")
  valid_594826 = validateParameter(valid_594826, JString, required = false,
                                 default = nil)
  if valid_594826 != nil:
    section.add "AvailabilityZone", valid_594826
  var valid_594827 = formData.getOrDefault("MonitoringInterval")
  valid_594827 = validateParameter(valid_594827, JInt, required = false, default = nil)
  if valid_594827 != nil:
    section.add "MonitoringInterval", valid_594827
  var valid_594828 = formData.getOrDefault("DomainIAMRoleName")
  valid_594828 = validateParameter(valid_594828, JString, required = false,
                                 default = nil)
  if valid_594828 != nil:
    section.add "DomainIAMRoleName", valid_594828
  var valid_594829 = formData.getOrDefault("AllocatedStorage")
  valid_594829 = validateParameter(valid_594829, JInt, required = false, default = nil)
  if valid_594829 != nil:
    section.add "AllocatedStorage", valid_594829
  var valid_594830 = formData.getOrDefault("MasterUsername")
  valid_594830 = validateParameter(valid_594830, JString, required = false,
                                 default = nil)
  if valid_594830 != nil:
    section.add "MasterUsername", valid_594830
  var valid_594831 = formData.getOrDefault("PromotionTier")
  valid_594831 = validateParameter(valid_594831, JInt, required = false, default = nil)
  if valid_594831 != nil:
    section.add "PromotionTier", valid_594831
  var valid_594832 = formData.getOrDefault("DBInstanceClass")
  valid_594832 = validateParameter(valid_594832, JString, required = true,
                                 default = nil)
  if valid_594832 != nil:
    section.add "DBInstanceClass", valid_594832
  var valid_594833 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_594833 = validateParameter(valid_594833, JBool, required = false, default = nil)
  if valid_594833 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_594833
  var valid_594834 = formData.getOrDefault("PreferredBackupWindow")
  valid_594834 = validateParameter(valid_594834, JString, required = false,
                                 default = nil)
  if valid_594834 != nil:
    section.add "PreferredBackupWindow", valid_594834
  var valid_594835 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_594835 = validateParameter(valid_594835, JBool, required = false, default = nil)
  if valid_594835 != nil:
    section.add "AutoMinorVersionUpgrade", valid_594835
  var valid_594836 = formData.getOrDefault("EngineVersion")
  valid_594836 = validateParameter(valid_594836, JString, required = false,
                                 default = nil)
  if valid_594836 != nil:
    section.add "EngineVersion", valid_594836
  var valid_594837 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_594837 = validateParameter(valid_594837, JString, required = false,
                                 default = nil)
  if valid_594837 != nil:
    section.add "PreferredMaintenanceWindow", valid_594837
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594838: Call_PostCreateDBInstance_594780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_594838.validator(path, query, header, formData, body)
  let scheme = call_594838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594838.url(scheme.get, call_594838.host, call_594838.base,
                         call_594838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594838, url, valid)

proc call*(call_594839: Call_PostCreateDBInstance_594780; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          ProcessorFeatures: JsonNode = nil;
          EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; MaxAllocatedStorage: int = 0;
          Tags: JsonNode = nil; TdeCredentialArn: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          MultiAZ: bool = false; PubliclyAccessible: bool = false;
          StorageType: string = ""; Timezone: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = ""; Domain: string = ""; LicenseModel: string = "";
          KmsKeyId: string = ""; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""; MonitoringRoleArn: string = "";
          PerformanceInsightsRetentionPeriod: int = 0;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; DBName: string = ""; OptionGroupName: string = "";
          DBParameterGroupName: string = ""; MasterUserPassword: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MonitoringInterval: int = 0; DomainIAMRoleName: string = "";
          Action: string = "CreateDBInstance"; AllocatedStorage: int = 0;
          MasterUsername: string = ""; PromotionTier: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Domain: string
  ##         : For an Amazon RDS DB instance that's running Microsoft SQL Server, this parameter specifies the Active Directory directory ID to create the instance in. Amazon RDS uses Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/USER_SQLServerWinAuth.html">Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>. 
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_594840 = newJObject()
  var formData_594841 = newJObject()
  if ProcessorFeatures != nil:
    formData_594841.add "ProcessorFeatures", ProcessorFeatures
  add(formData_594841, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_594841, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_594841.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_594841, "Iops", newJInt(Iops))
  add(formData_594841, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_594841, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  if Tags != nil:
    formData_594841.add "Tags", Tags
  add(formData_594841, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_594841, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_594841, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_594841, "MultiAZ", newJBool(MultiAZ))
  add(formData_594841, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_594841, "StorageType", newJString(StorageType))
  add(formData_594841, "Timezone", newJString(Timezone))
  if EnableCloudwatchLogsExports != nil:
    formData_594841.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_594841, "CharacterSetName", newJString(CharacterSetName))
  add(formData_594841, "Domain", newJString(Domain))
  add(formData_594841, "LicenseModel", newJString(LicenseModel))
  add(formData_594841, "KmsKeyId", newJString(KmsKeyId))
  add(formData_594841, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_594841, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_594841, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_594841, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_594841, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_594841.add "DBSecurityGroups", DBSecurityGroups
  add(formData_594841, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_594841, "Port", newJInt(Port))
  add(formData_594841, "DBName", newJString(DBName))
  add(formData_594841, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_594841, "OptionGroupName", newJString(OptionGroupName))
  add(formData_594841, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_594841, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_594841, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_594841, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_594841, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_594841, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_594840, "Action", newJString(Action))
  add(formData_594841, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_594841, "MasterUsername", newJString(MasterUsername))
  add(formData_594841, "PromotionTier", newJInt(PromotionTier))
  add(formData_594841, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_594841, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_594841, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_594841, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_594841, "EngineVersion", newJString(EngineVersion))
  add(query_594840, "Version", newJString(Version))
  add(formData_594841, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_594839.call(nil, query_594840, nil, formData_594841, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_594780(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_594781, base: "/",
    url: url_PostCreateDBInstance_594782, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_594719 = ref object of OpenApiRestCall_593421
proc url_GetCreateDBInstance_594721(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBInstance_594720(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: JString
  ##         : For an Amazon RDS DB instance that's running Microsoft SQL Server, this parameter specifies the Active Directory directory ID to create the instance in. Amazon RDS uses Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/USER_SQLServerWinAuth.html">Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>. 
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_594722 = query.getOrDefault("MonitoringInterval")
  valid_594722 = validateParameter(valid_594722, JInt, required = false, default = nil)
  if valid_594722 != nil:
    section.add "MonitoringInterval", valid_594722
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_594723 = query.getOrDefault("Engine")
  valid_594723 = validateParameter(valid_594723, JString, required = true,
                                 default = nil)
  if valid_594723 != nil:
    section.add "Engine", valid_594723
  var valid_594724 = query.getOrDefault("PromotionTier")
  valid_594724 = validateParameter(valid_594724, JInt, required = false, default = nil)
  if valid_594724 != nil:
    section.add "PromotionTier", valid_594724
  var valid_594725 = query.getOrDefault("MaxAllocatedStorage")
  valid_594725 = validateParameter(valid_594725, JInt, required = false, default = nil)
  if valid_594725 != nil:
    section.add "MaxAllocatedStorage", valid_594725
  var valid_594726 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_594726 = validateParameter(valid_594726, JInt, required = false, default = nil)
  if valid_594726 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_594726
  var valid_594727 = query.getOrDefault("StorageEncrypted")
  valid_594727 = validateParameter(valid_594727, JBool, required = false, default = nil)
  if valid_594727 != nil:
    section.add "StorageEncrypted", valid_594727
  var valid_594728 = query.getOrDefault("AllocatedStorage")
  valid_594728 = validateParameter(valid_594728, JInt, required = false, default = nil)
  if valid_594728 != nil:
    section.add "AllocatedStorage", valid_594728
  var valid_594729 = query.getOrDefault("StorageType")
  valid_594729 = validateParameter(valid_594729, JString, required = false,
                                 default = nil)
  if valid_594729 != nil:
    section.add "StorageType", valid_594729
  var valid_594730 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_594730 = validateParameter(valid_594730, JBool, required = false, default = nil)
  if valid_594730 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_594730
  var valid_594731 = query.getOrDefault("DBClusterIdentifier")
  valid_594731 = validateParameter(valid_594731, JString, required = false,
                                 default = nil)
  if valid_594731 != nil:
    section.add "DBClusterIdentifier", valid_594731
  var valid_594732 = query.getOrDefault("DBSecurityGroups")
  valid_594732 = validateParameter(valid_594732, JArray, required = false,
                                 default = nil)
  if valid_594732 != nil:
    section.add "DBSecurityGroups", valid_594732
  var valid_594733 = query.getOrDefault("MasterUserPassword")
  valid_594733 = validateParameter(valid_594733, JString, required = false,
                                 default = nil)
  if valid_594733 != nil:
    section.add "MasterUserPassword", valid_594733
  var valid_594734 = query.getOrDefault("MonitoringRoleArn")
  valid_594734 = validateParameter(valid_594734, JString, required = false,
                                 default = nil)
  if valid_594734 != nil:
    section.add "MonitoringRoleArn", valid_594734
  var valid_594735 = query.getOrDefault("MultiAZ")
  valid_594735 = validateParameter(valid_594735, JBool, required = false, default = nil)
  if valid_594735 != nil:
    section.add "MultiAZ", valid_594735
  var valid_594736 = query.getOrDefault("TdeCredentialPassword")
  valid_594736 = validateParameter(valid_594736, JString, required = false,
                                 default = nil)
  if valid_594736 != nil:
    section.add "TdeCredentialPassword", valid_594736
  var valid_594737 = query.getOrDefault("DomainIAMRoleName")
  valid_594737 = validateParameter(valid_594737, JString, required = false,
                                 default = nil)
  if valid_594737 != nil:
    section.add "DomainIAMRoleName", valid_594737
  var valid_594738 = query.getOrDefault("BackupRetentionPeriod")
  valid_594738 = validateParameter(valid_594738, JInt, required = false, default = nil)
  if valid_594738 != nil:
    section.add "BackupRetentionPeriod", valid_594738
  var valid_594739 = query.getOrDefault("DBName")
  valid_594739 = validateParameter(valid_594739, JString, required = false,
                                 default = nil)
  if valid_594739 != nil:
    section.add "DBName", valid_594739
  var valid_594740 = query.getOrDefault("CopyTagsToSnapshot")
  valid_594740 = validateParameter(valid_594740, JBool, required = false, default = nil)
  if valid_594740 != nil:
    section.add "CopyTagsToSnapshot", valid_594740
  var valid_594741 = query.getOrDefault("DeletionProtection")
  valid_594741 = validateParameter(valid_594741, JBool, required = false, default = nil)
  if valid_594741 != nil:
    section.add "DeletionProtection", valid_594741
  var valid_594742 = query.getOrDefault("DBSubnetGroupName")
  valid_594742 = validateParameter(valid_594742, JString, required = false,
                                 default = nil)
  if valid_594742 != nil:
    section.add "DBSubnetGroupName", valid_594742
  var valid_594743 = query.getOrDefault("KmsKeyId")
  valid_594743 = validateParameter(valid_594743, JString, required = false,
                                 default = nil)
  if valid_594743 != nil:
    section.add "KmsKeyId", valid_594743
  var valid_594744 = query.getOrDefault("Domain")
  valid_594744 = validateParameter(valid_594744, JString, required = false,
                                 default = nil)
  if valid_594744 != nil:
    section.add "Domain", valid_594744
  var valid_594745 = query.getOrDefault("EngineVersion")
  valid_594745 = validateParameter(valid_594745, JString, required = false,
                                 default = nil)
  if valid_594745 != nil:
    section.add "EngineVersion", valid_594745
  var valid_594746 = query.getOrDefault("PreferredBackupWindow")
  valid_594746 = validateParameter(valid_594746, JString, required = false,
                                 default = nil)
  if valid_594746 != nil:
    section.add "PreferredBackupWindow", valid_594746
  var valid_594747 = query.getOrDefault("DBInstanceIdentifier")
  valid_594747 = validateParameter(valid_594747, JString, required = true,
                                 default = nil)
  if valid_594747 != nil:
    section.add "DBInstanceIdentifier", valid_594747
  var valid_594748 = query.getOrDefault("MasterUsername")
  valid_594748 = validateParameter(valid_594748, JString, required = false,
                                 default = nil)
  if valid_594748 != nil:
    section.add "MasterUsername", valid_594748
  var valid_594749 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_594749 = validateParameter(valid_594749, JString, required = false,
                                 default = nil)
  if valid_594749 != nil:
    section.add "PreferredMaintenanceWindow", valid_594749
  var valid_594750 = query.getOrDefault("ProcessorFeatures")
  valid_594750 = validateParameter(valid_594750, JArray, required = false,
                                 default = nil)
  if valid_594750 != nil:
    section.add "ProcessorFeatures", valid_594750
  var valid_594751 = query.getOrDefault("OptionGroupName")
  valid_594751 = validateParameter(valid_594751, JString, required = false,
                                 default = nil)
  if valid_594751 != nil:
    section.add "OptionGroupName", valid_594751
  var valid_594752 = query.getOrDefault("AvailabilityZone")
  valid_594752 = validateParameter(valid_594752, JString, required = false,
                                 default = nil)
  if valid_594752 != nil:
    section.add "AvailabilityZone", valid_594752
  var valid_594753 = query.getOrDefault("Iops")
  valid_594753 = validateParameter(valid_594753, JInt, required = false, default = nil)
  if valid_594753 != nil:
    section.add "Iops", valid_594753
  var valid_594754 = query.getOrDefault("VpcSecurityGroupIds")
  valid_594754 = validateParameter(valid_594754, JArray, required = false,
                                 default = nil)
  if valid_594754 != nil:
    section.add "VpcSecurityGroupIds", valid_594754
  var valid_594755 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_594755 = validateParameter(valid_594755, JArray, required = false,
                                 default = nil)
  if valid_594755 != nil:
    section.add "EnableCloudwatchLogsExports", valid_594755
  var valid_594756 = query.getOrDefault("LicenseModel")
  valid_594756 = validateParameter(valid_594756, JString, required = false,
                                 default = nil)
  if valid_594756 != nil:
    section.add "LicenseModel", valid_594756
  var valid_594757 = query.getOrDefault("Tags")
  valid_594757 = validateParameter(valid_594757, JArray, required = false,
                                 default = nil)
  if valid_594757 != nil:
    section.add "Tags", valid_594757
  var valid_594758 = query.getOrDefault("DBParameterGroupName")
  valid_594758 = validateParameter(valid_594758, JString, required = false,
                                 default = nil)
  if valid_594758 != nil:
    section.add "DBParameterGroupName", valid_594758
  var valid_594759 = query.getOrDefault("DBInstanceClass")
  valid_594759 = validateParameter(valid_594759, JString, required = true,
                                 default = nil)
  if valid_594759 != nil:
    section.add "DBInstanceClass", valid_594759
  var valid_594760 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_594760 = validateParameter(valid_594760, JString, required = false,
                                 default = nil)
  if valid_594760 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_594760
  var valid_594761 = query.getOrDefault("Action")
  valid_594761 = validateParameter(valid_594761, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_594761 != nil:
    section.add "Action", valid_594761
  var valid_594762 = query.getOrDefault("CharacterSetName")
  valid_594762 = validateParameter(valid_594762, JString, required = false,
                                 default = nil)
  if valid_594762 != nil:
    section.add "CharacterSetName", valid_594762
  var valid_594763 = query.getOrDefault("TdeCredentialArn")
  valid_594763 = validateParameter(valid_594763, JString, required = false,
                                 default = nil)
  if valid_594763 != nil:
    section.add "TdeCredentialArn", valid_594763
  var valid_594764 = query.getOrDefault("PubliclyAccessible")
  valid_594764 = validateParameter(valid_594764, JBool, required = false, default = nil)
  if valid_594764 != nil:
    section.add "PubliclyAccessible", valid_594764
  var valid_594765 = query.getOrDefault("Timezone")
  valid_594765 = validateParameter(valid_594765, JString, required = false,
                                 default = nil)
  if valid_594765 != nil:
    section.add "Timezone", valid_594765
  var valid_594766 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_594766 = validateParameter(valid_594766, JBool, required = false, default = nil)
  if valid_594766 != nil:
    section.add "AutoMinorVersionUpgrade", valid_594766
  var valid_594767 = query.getOrDefault("Port")
  valid_594767 = validateParameter(valid_594767, JInt, required = false, default = nil)
  if valid_594767 != nil:
    section.add "Port", valid_594767
  var valid_594768 = query.getOrDefault("EnablePerformanceInsights")
  valid_594768 = validateParameter(valid_594768, JBool, required = false, default = nil)
  if valid_594768 != nil:
    section.add "EnablePerformanceInsights", valid_594768
  var valid_594769 = query.getOrDefault("Version")
  valid_594769 = validateParameter(valid_594769, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594769 != nil:
    section.add "Version", valid_594769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594770 = header.getOrDefault("X-Amz-Date")
  valid_594770 = validateParameter(valid_594770, JString, required = false,
                                 default = nil)
  if valid_594770 != nil:
    section.add "X-Amz-Date", valid_594770
  var valid_594771 = header.getOrDefault("X-Amz-Security-Token")
  valid_594771 = validateParameter(valid_594771, JString, required = false,
                                 default = nil)
  if valid_594771 != nil:
    section.add "X-Amz-Security-Token", valid_594771
  var valid_594772 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594772 = validateParameter(valid_594772, JString, required = false,
                                 default = nil)
  if valid_594772 != nil:
    section.add "X-Amz-Content-Sha256", valid_594772
  var valid_594773 = header.getOrDefault("X-Amz-Algorithm")
  valid_594773 = validateParameter(valid_594773, JString, required = false,
                                 default = nil)
  if valid_594773 != nil:
    section.add "X-Amz-Algorithm", valid_594773
  var valid_594774 = header.getOrDefault("X-Amz-Signature")
  valid_594774 = validateParameter(valid_594774, JString, required = false,
                                 default = nil)
  if valid_594774 != nil:
    section.add "X-Amz-Signature", valid_594774
  var valid_594775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594775 = validateParameter(valid_594775, JString, required = false,
                                 default = nil)
  if valid_594775 != nil:
    section.add "X-Amz-SignedHeaders", valid_594775
  var valid_594776 = header.getOrDefault("X-Amz-Credential")
  valid_594776 = validateParameter(valid_594776, JString, required = false,
                                 default = nil)
  if valid_594776 != nil:
    section.add "X-Amz-Credential", valid_594776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594777: Call_GetCreateDBInstance_594719; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_594777.validator(path, query, header, formData, body)
  let scheme = call_594777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594777.url(scheme.get, call_594777.host, call_594777.base,
                         call_594777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594777, url, valid)

proc call*(call_594778: Call_GetCreateDBInstance_594719; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          MonitoringInterval: int = 0; PromotionTier: int = 0;
          MaxAllocatedStorage: int = 0; PerformanceInsightsRetentionPeriod: int = 0;
          StorageEncrypted: bool = false; AllocatedStorage: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          DBClusterIdentifier: string = ""; DBSecurityGroups: JsonNode = nil;
          MasterUserPassword: string = ""; MonitoringRoleArn: string = "";
          MultiAZ: bool = false; TdeCredentialPassword: string = "";
          DomainIAMRoleName: string = ""; BackupRetentionPeriod: int = 0;
          DBName: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          KmsKeyId: string = ""; Domain: string = ""; EngineVersion: string = "";
          PreferredBackupWindow: string = ""; MasterUsername: string = "";
          PreferredMaintenanceWindow: string = "";
          ProcessorFeatures: JsonNode = nil; OptionGroupName: string = "";
          AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; LicenseModel: string = "";
          Tags: JsonNode = nil; DBParameterGroupName: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          Action: string = "CreateDBInstance"; CharacterSetName: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          Timezone: string = ""; AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: string
  ##         : For an Amazon RDS DB instance that's running Microsoft SQL Server, this parameter specifies the Active Directory directory ID to create the instance in. Amazon RDS uses Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/USER_SQLServerWinAuth.html">Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>. 
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: string (required)
  var query_594779 = newJObject()
  add(query_594779, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_594779, "Engine", newJString(Engine))
  add(query_594779, "PromotionTier", newJInt(PromotionTier))
  add(query_594779, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_594779, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_594779, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_594779, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_594779, "StorageType", newJString(StorageType))
  add(query_594779, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_594779, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if DBSecurityGroups != nil:
    query_594779.add "DBSecurityGroups", DBSecurityGroups
  add(query_594779, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_594779, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_594779, "MultiAZ", newJBool(MultiAZ))
  add(query_594779, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_594779, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_594779, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_594779, "DBName", newJString(DBName))
  add(query_594779, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_594779, "DeletionProtection", newJBool(DeletionProtection))
  add(query_594779, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_594779, "KmsKeyId", newJString(KmsKeyId))
  add(query_594779, "Domain", newJString(Domain))
  add(query_594779, "EngineVersion", newJString(EngineVersion))
  add(query_594779, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_594779, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_594779, "MasterUsername", newJString(MasterUsername))
  add(query_594779, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  if ProcessorFeatures != nil:
    query_594779.add "ProcessorFeatures", ProcessorFeatures
  add(query_594779, "OptionGroupName", newJString(OptionGroupName))
  add(query_594779, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_594779, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_594779.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_594779.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_594779, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_594779.add "Tags", Tags
  add(query_594779, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_594779, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_594779, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_594779, "Action", newJString(Action))
  add(query_594779, "CharacterSetName", newJString(CharacterSetName))
  add(query_594779, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_594779, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_594779, "Timezone", newJString(Timezone))
  add(query_594779, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_594779, "Port", newJInt(Port))
  add(query_594779, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_594779, "Version", newJString(Version))
  result = call_594778.call(nil, query_594779, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_594719(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_594720, base: "/",
    url: url_GetCreateDBInstance_594721, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstanceReadReplica_594886 = ref object of OpenApiRestCall_593421
proc url_PostCreateDBInstanceReadReplica_594888(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBInstanceReadReplica_594887(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594889 = query.getOrDefault("Action")
  valid_594889 = validateParameter(valid_594889, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_594889 != nil:
    section.add "Action", valid_594889
  var valid_594890 = query.getOrDefault("Version")
  valid_594890 = validateParameter(valid_594890, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594890 != nil:
    section.add "Version", valid_594890
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594891 = header.getOrDefault("X-Amz-Date")
  valid_594891 = validateParameter(valid_594891, JString, required = false,
                                 default = nil)
  if valid_594891 != nil:
    section.add "X-Amz-Date", valid_594891
  var valid_594892 = header.getOrDefault("X-Amz-Security-Token")
  valid_594892 = validateParameter(valid_594892, JString, required = false,
                                 default = nil)
  if valid_594892 != nil:
    section.add "X-Amz-Security-Token", valid_594892
  var valid_594893 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594893 = validateParameter(valid_594893, JString, required = false,
                                 default = nil)
  if valid_594893 != nil:
    section.add "X-Amz-Content-Sha256", valid_594893
  var valid_594894 = header.getOrDefault("X-Amz-Algorithm")
  valid_594894 = validateParameter(valid_594894, JString, required = false,
                                 default = nil)
  if valid_594894 != nil:
    section.add "X-Amz-Algorithm", valid_594894
  var valid_594895 = header.getOrDefault("X-Amz-Signature")
  valid_594895 = validateParameter(valid_594895, JString, required = false,
                                 default = nil)
  if valid_594895 != nil:
    section.add "X-Amz-Signature", valid_594895
  var valid_594896 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594896 = validateParameter(valid_594896, JString, required = false,
                                 default = nil)
  if valid_594896 != nil:
    section.add "X-Amz-SignedHeaders", valid_594896
  var valid_594897 = header.getOrDefault("X-Amz-Credential")
  valid_594897 = validateParameter(valid_594897, JString, required = false,
                                 default = nil)
  if valid_594897 != nil:
    section.add "X-Amz-Credential", valid_594897
  result.add "header", section
  ## parameters in `formData` object:
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  section = newJObject()
  var valid_594898 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_594898 = validateParameter(valid_594898, JString, required = false,
                                 default = nil)
  if valid_594898 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_594898
  var valid_594899 = formData.getOrDefault("ProcessorFeatures")
  valid_594899 = validateParameter(valid_594899, JArray, required = false,
                                 default = nil)
  if valid_594899 != nil:
    section.add "ProcessorFeatures", valid_594899
  var valid_594900 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_594900 = validateParameter(valid_594900, JBool, required = false, default = nil)
  if valid_594900 != nil:
    section.add "CopyTagsToSnapshot", valid_594900
  var valid_594901 = formData.getOrDefault("Port")
  valid_594901 = validateParameter(valid_594901, JInt, required = false, default = nil)
  if valid_594901 != nil:
    section.add "Port", valid_594901
  var valid_594902 = formData.getOrDefault("EnablePerformanceInsights")
  valid_594902 = validateParameter(valid_594902, JBool, required = false, default = nil)
  if valid_594902 != nil:
    section.add "EnablePerformanceInsights", valid_594902
  var valid_594903 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_594903 = validateParameter(valid_594903, JArray, required = false,
                                 default = nil)
  if valid_594903 != nil:
    section.add "VpcSecurityGroupIds", valid_594903
  var valid_594904 = formData.getOrDefault("Iops")
  valid_594904 = validateParameter(valid_594904, JInt, required = false, default = nil)
  if valid_594904 != nil:
    section.add "Iops", valid_594904
  var valid_594905 = formData.getOrDefault("PreSignedUrl")
  valid_594905 = validateParameter(valid_594905, JString, required = false,
                                 default = nil)
  if valid_594905 != nil:
    section.add "PreSignedUrl", valid_594905
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594906 = formData.getOrDefault("DBInstanceIdentifier")
  valid_594906 = validateParameter(valid_594906, JString, required = true,
                                 default = nil)
  if valid_594906 != nil:
    section.add "DBInstanceIdentifier", valid_594906
  var valid_594907 = formData.getOrDefault("OptionGroupName")
  valid_594907 = validateParameter(valid_594907, JString, required = false,
                                 default = nil)
  if valid_594907 != nil:
    section.add "OptionGroupName", valid_594907
  var valid_594908 = formData.getOrDefault("DBParameterGroupName")
  valid_594908 = validateParameter(valid_594908, JString, required = false,
                                 default = nil)
  if valid_594908 != nil:
    section.add "DBParameterGroupName", valid_594908
  var valid_594909 = formData.getOrDefault("Tags")
  valid_594909 = validateParameter(valid_594909, JArray, required = false,
                                 default = nil)
  if valid_594909 != nil:
    section.add "Tags", valid_594909
  var valid_594910 = formData.getOrDefault("SourceRegion")
  valid_594910 = validateParameter(valid_594910, JString, required = false,
                                 default = nil)
  if valid_594910 != nil:
    section.add "SourceRegion", valid_594910
  var valid_594911 = formData.getOrDefault("DeletionProtection")
  valid_594911 = validateParameter(valid_594911, JBool, required = false, default = nil)
  if valid_594911 != nil:
    section.add "DeletionProtection", valid_594911
  var valid_594912 = formData.getOrDefault("DBSubnetGroupName")
  valid_594912 = validateParameter(valid_594912, JString, required = false,
                                 default = nil)
  if valid_594912 != nil:
    section.add "DBSubnetGroupName", valid_594912
  var valid_594913 = formData.getOrDefault("AvailabilityZone")
  valid_594913 = validateParameter(valid_594913, JString, required = false,
                                 default = nil)
  if valid_594913 != nil:
    section.add "AvailabilityZone", valid_594913
  var valid_594914 = formData.getOrDefault("MonitoringInterval")
  valid_594914 = validateParameter(valid_594914, JInt, required = false, default = nil)
  if valid_594914 != nil:
    section.add "MonitoringInterval", valid_594914
  var valid_594915 = formData.getOrDefault("MultiAZ")
  valid_594915 = validateParameter(valid_594915, JBool, required = false, default = nil)
  if valid_594915 != nil:
    section.add "MultiAZ", valid_594915
  var valid_594916 = formData.getOrDefault("PubliclyAccessible")
  valid_594916 = validateParameter(valid_594916, JBool, required = false, default = nil)
  if valid_594916 != nil:
    section.add "PubliclyAccessible", valid_594916
  var valid_594917 = formData.getOrDefault("StorageType")
  valid_594917 = validateParameter(valid_594917, JString, required = false,
                                 default = nil)
  if valid_594917 != nil:
    section.add "StorageType", valid_594917
  var valid_594918 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_594918 = validateParameter(valid_594918, JArray, required = false,
                                 default = nil)
  if valid_594918 != nil:
    section.add "EnableCloudwatchLogsExports", valid_594918
  var valid_594919 = formData.getOrDefault("DBInstanceClass")
  valid_594919 = validateParameter(valid_594919, JString, required = false,
                                 default = nil)
  if valid_594919 != nil:
    section.add "DBInstanceClass", valid_594919
  var valid_594920 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_594920 = validateParameter(valid_594920, JString, required = true,
                                 default = nil)
  if valid_594920 != nil:
    section.add "SourceDBInstanceIdentifier", valid_594920
  var valid_594921 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_594921 = validateParameter(valid_594921, JBool, required = false, default = nil)
  if valid_594921 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_594921
  var valid_594922 = formData.getOrDefault("KmsKeyId")
  valid_594922 = validateParameter(valid_594922, JString, required = false,
                                 default = nil)
  if valid_594922 != nil:
    section.add "KmsKeyId", valid_594922
  var valid_594923 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_594923 = validateParameter(valid_594923, JBool, required = false, default = nil)
  if valid_594923 != nil:
    section.add "AutoMinorVersionUpgrade", valid_594923
  var valid_594924 = formData.getOrDefault("MonitoringRoleArn")
  valid_594924 = validateParameter(valid_594924, JString, required = false,
                                 default = nil)
  if valid_594924 != nil:
    section.add "MonitoringRoleArn", valid_594924
  var valid_594925 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_594925 = validateParameter(valid_594925, JInt, required = false, default = nil)
  if valid_594925 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_594925
  var valid_594926 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_594926 = validateParameter(valid_594926, JBool, required = false, default = nil)
  if valid_594926 != nil:
    section.add "UseDefaultProcessorFeatures", valid_594926
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594927: Call_PostCreateDBInstanceReadReplica_594886;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_594927.validator(path, query, header, formData, body)
  let scheme = call_594927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594927.url(scheme.get, call_594927.host, call_594927.base,
                         call_594927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594927, url, valid)

proc call*(call_594928: Call_PostCreateDBInstanceReadReplica_594886;
          DBInstanceIdentifier: string; SourceDBInstanceIdentifier: string;
          PerformanceInsightsKMSKeyId: string = "";
          ProcessorFeatures: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0; PreSignedUrl: string = "";
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; SourceRegion: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          AvailabilityZone: string = ""; MonitoringInterval: int = 0;
          MultiAZ: bool = false; Action: string = "CreateDBInstanceReadReplica";
          PubliclyAccessible: bool = false; StorageType: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; DBInstanceClass: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; MonitoringRoleArn: string = "";
          Version: string = "2014-10-31";
          PerformanceInsightsRetentionPeriod: int = 0;
          UseDefaultProcessorFeatures: bool = false): Recallable =
  ## postCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Action: string (required)
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   Version: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  var query_594929 = newJObject()
  var formData_594930 = newJObject()
  add(formData_594930, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if ProcessorFeatures != nil:
    formData_594930.add "ProcessorFeatures", ProcessorFeatures
  add(formData_594930, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_594930, "Port", newJInt(Port))
  add(formData_594930, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  if VpcSecurityGroupIds != nil:
    formData_594930.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_594930, "Iops", newJInt(Iops))
  add(formData_594930, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_594930, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_594930, "OptionGroupName", newJString(OptionGroupName))
  add(formData_594930, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_594930.add "Tags", Tags
  add(formData_594930, "SourceRegion", newJString(SourceRegion))
  add(formData_594930, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_594930, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_594930, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_594930, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_594930, "MultiAZ", newJBool(MultiAZ))
  add(query_594929, "Action", newJString(Action))
  add(formData_594930, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_594930, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_594930.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_594930, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_594930, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_594930, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_594930, "KmsKeyId", newJString(KmsKeyId))
  add(formData_594930, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_594930, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_594929, "Version", newJString(Version))
  add(formData_594930, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_594930, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  result = call_594928.call(nil, query_594929, nil, formData_594930, nil)

var postCreateDBInstanceReadReplica* = Call_PostCreateDBInstanceReadReplica_594886(
    name: "postCreateDBInstanceReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_PostCreateDBInstanceReadReplica_594887, base: "/",
    url: url_PostCreateDBInstanceReadReplica_594888,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstanceReadReplica_594842 = ref object of OpenApiRestCall_593421
proc url_GetCreateDBInstanceReadReplica_594844(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBInstanceReadReplica_594843(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_594845 = query.getOrDefault("MonitoringInterval")
  valid_594845 = validateParameter(valid_594845, JInt, required = false, default = nil)
  if valid_594845 != nil:
    section.add "MonitoringInterval", valid_594845
  var valid_594846 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_594846 = validateParameter(valid_594846, JBool, required = false, default = nil)
  if valid_594846 != nil:
    section.add "UseDefaultProcessorFeatures", valid_594846
  var valid_594847 = query.getOrDefault("ProcessorFeatures")
  valid_594847 = validateParameter(valid_594847, JArray, required = false,
                                 default = nil)
  if valid_594847 != nil:
    section.add "ProcessorFeatures", valid_594847
  assert query != nil, "query argument is necessary due to required `SourceDBInstanceIdentifier` field"
  var valid_594848 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_594848 = validateParameter(valid_594848, JString, required = true,
                                 default = nil)
  if valid_594848 != nil:
    section.add "SourceDBInstanceIdentifier", valid_594848
  var valid_594849 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_594849 = validateParameter(valid_594849, JInt, required = false, default = nil)
  if valid_594849 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_594849
  var valid_594850 = query.getOrDefault("SourceRegion")
  valid_594850 = validateParameter(valid_594850, JString, required = false,
                                 default = nil)
  if valid_594850 != nil:
    section.add "SourceRegion", valid_594850
  var valid_594851 = query.getOrDefault("StorageType")
  valid_594851 = validateParameter(valid_594851, JString, required = false,
                                 default = nil)
  if valid_594851 != nil:
    section.add "StorageType", valid_594851
  var valid_594852 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_594852 = validateParameter(valid_594852, JBool, required = false, default = nil)
  if valid_594852 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_594852
  var valid_594853 = query.getOrDefault("OptionGroupName")
  valid_594853 = validateParameter(valid_594853, JString, required = false,
                                 default = nil)
  if valid_594853 != nil:
    section.add "OptionGroupName", valid_594853
  var valid_594854 = query.getOrDefault("AvailabilityZone")
  valid_594854 = validateParameter(valid_594854, JString, required = false,
                                 default = nil)
  if valid_594854 != nil:
    section.add "AvailabilityZone", valid_594854
  var valid_594855 = query.getOrDefault("Iops")
  valid_594855 = validateParameter(valid_594855, JInt, required = false, default = nil)
  if valid_594855 != nil:
    section.add "Iops", valid_594855
  var valid_594856 = query.getOrDefault("MonitoringRoleArn")
  valid_594856 = validateParameter(valid_594856, JString, required = false,
                                 default = nil)
  if valid_594856 != nil:
    section.add "MonitoringRoleArn", valid_594856
  var valid_594857 = query.getOrDefault("PreSignedUrl")
  valid_594857 = validateParameter(valid_594857, JString, required = false,
                                 default = nil)
  if valid_594857 != nil:
    section.add "PreSignedUrl", valid_594857
  var valid_594858 = query.getOrDefault("VpcSecurityGroupIds")
  valid_594858 = validateParameter(valid_594858, JArray, required = false,
                                 default = nil)
  if valid_594858 != nil:
    section.add "VpcSecurityGroupIds", valid_594858
  var valid_594859 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_594859 = validateParameter(valid_594859, JArray, required = false,
                                 default = nil)
  if valid_594859 != nil:
    section.add "EnableCloudwatchLogsExports", valid_594859
  var valid_594860 = query.getOrDefault("MultiAZ")
  valid_594860 = validateParameter(valid_594860, JBool, required = false, default = nil)
  if valid_594860 != nil:
    section.add "MultiAZ", valid_594860
  var valid_594861 = query.getOrDefault("Tags")
  valid_594861 = validateParameter(valid_594861, JArray, required = false,
                                 default = nil)
  if valid_594861 != nil:
    section.add "Tags", valid_594861
  var valid_594862 = query.getOrDefault("CopyTagsToSnapshot")
  valid_594862 = validateParameter(valid_594862, JBool, required = false, default = nil)
  if valid_594862 != nil:
    section.add "CopyTagsToSnapshot", valid_594862
  var valid_594863 = query.getOrDefault("DBParameterGroupName")
  valid_594863 = validateParameter(valid_594863, JString, required = false,
                                 default = nil)
  if valid_594863 != nil:
    section.add "DBParameterGroupName", valid_594863
  var valid_594864 = query.getOrDefault("DBInstanceClass")
  valid_594864 = validateParameter(valid_594864, JString, required = false,
                                 default = nil)
  if valid_594864 != nil:
    section.add "DBInstanceClass", valid_594864
  var valid_594865 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_594865 = validateParameter(valid_594865, JString, required = false,
                                 default = nil)
  if valid_594865 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_594865
  var valid_594866 = query.getOrDefault("DeletionProtection")
  valid_594866 = validateParameter(valid_594866, JBool, required = false, default = nil)
  if valid_594866 != nil:
    section.add "DeletionProtection", valid_594866
  var valid_594867 = query.getOrDefault("Action")
  valid_594867 = validateParameter(valid_594867, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_594867 != nil:
    section.add "Action", valid_594867
  var valid_594868 = query.getOrDefault("DBSubnetGroupName")
  valid_594868 = validateParameter(valid_594868, JString, required = false,
                                 default = nil)
  if valid_594868 != nil:
    section.add "DBSubnetGroupName", valid_594868
  var valid_594869 = query.getOrDefault("KmsKeyId")
  valid_594869 = validateParameter(valid_594869, JString, required = false,
                                 default = nil)
  if valid_594869 != nil:
    section.add "KmsKeyId", valid_594869
  var valid_594870 = query.getOrDefault("PubliclyAccessible")
  valid_594870 = validateParameter(valid_594870, JBool, required = false, default = nil)
  if valid_594870 != nil:
    section.add "PubliclyAccessible", valid_594870
  var valid_594871 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_594871 = validateParameter(valid_594871, JBool, required = false, default = nil)
  if valid_594871 != nil:
    section.add "AutoMinorVersionUpgrade", valid_594871
  var valid_594872 = query.getOrDefault("Port")
  valid_594872 = validateParameter(valid_594872, JInt, required = false, default = nil)
  if valid_594872 != nil:
    section.add "Port", valid_594872
  var valid_594873 = query.getOrDefault("EnablePerformanceInsights")
  valid_594873 = validateParameter(valid_594873, JBool, required = false, default = nil)
  if valid_594873 != nil:
    section.add "EnablePerformanceInsights", valid_594873
  var valid_594874 = query.getOrDefault("Version")
  valid_594874 = validateParameter(valid_594874, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594874 != nil:
    section.add "Version", valid_594874
  var valid_594875 = query.getOrDefault("DBInstanceIdentifier")
  valid_594875 = validateParameter(valid_594875, JString, required = true,
                                 default = nil)
  if valid_594875 != nil:
    section.add "DBInstanceIdentifier", valid_594875
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594876 = header.getOrDefault("X-Amz-Date")
  valid_594876 = validateParameter(valid_594876, JString, required = false,
                                 default = nil)
  if valid_594876 != nil:
    section.add "X-Amz-Date", valid_594876
  var valid_594877 = header.getOrDefault("X-Amz-Security-Token")
  valid_594877 = validateParameter(valid_594877, JString, required = false,
                                 default = nil)
  if valid_594877 != nil:
    section.add "X-Amz-Security-Token", valid_594877
  var valid_594878 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594878 = validateParameter(valid_594878, JString, required = false,
                                 default = nil)
  if valid_594878 != nil:
    section.add "X-Amz-Content-Sha256", valid_594878
  var valid_594879 = header.getOrDefault("X-Amz-Algorithm")
  valid_594879 = validateParameter(valid_594879, JString, required = false,
                                 default = nil)
  if valid_594879 != nil:
    section.add "X-Amz-Algorithm", valid_594879
  var valid_594880 = header.getOrDefault("X-Amz-Signature")
  valid_594880 = validateParameter(valid_594880, JString, required = false,
                                 default = nil)
  if valid_594880 != nil:
    section.add "X-Amz-Signature", valid_594880
  var valid_594881 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594881 = validateParameter(valid_594881, JString, required = false,
                                 default = nil)
  if valid_594881 != nil:
    section.add "X-Amz-SignedHeaders", valid_594881
  var valid_594882 = header.getOrDefault("X-Amz-Credential")
  valid_594882 = validateParameter(valid_594882, JString, required = false,
                                 default = nil)
  if valid_594882 != nil:
    section.add "X-Amz-Credential", valid_594882
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594883: Call_GetCreateDBInstanceReadReplica_594842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_594883.validator(path, query, header, formData, body)
  let scheme = call_594883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594883.url(scheme.get, call_594883.host, call_594883.base,
                         call_594883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594883, url, valid)

proc call*(call_594884: Call_GetCreateDBInstanceReadReplica_594842;
          SourceDBInstanceIdentifier: string; DBInstanceIdentifier: string;
          MonitoringInterval: int = 0; UseDefaultProcessorFeatures: bool = false;
          ProcessorFeatures: JsonNode = nil;
          PerformanceInsightsRetentionPeriod: int = 0; SourceRegion: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; AvailabilityZone: string = ""; Iops: int = 0;
          MonitoringRoleArn: string = ""; PreSignedUrl: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; MultiAZ: bool = false;
          Tags: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          DBParameterGroupName: string = ""; DBInstanceClass: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          DeletionProtection: bool = false;
          Action: string = "CreateDBInstanceReadReplica";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          Port: int = 0; EnablePerformanceInsights: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  var query_594885 = newJObject()
  add(query_594885, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_594885, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  if ProcessorFeatures != nil:
    query_594885.add "ProcessorFeatures", ProcessorFeatures
  add(query_594885, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_594885, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_594885, "SourceRegion", newJString(SourceRegion))
  add(query_594885, "StorageType", newJString(StorageType))
  add(query_594885, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_594885, "OptionGroupName", newJString(OptionGroupName))
  add(query_594885, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_594885, "Iops", newJInt(Iops))
  add(query_594885, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_594885, "PreSignedUrl", newJString(PreSignedUrl))
  if VpcSecurityGroupIds != nil:
    query_594885.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_594885.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_594885, "MultiAZ", newJBool(MultiAZ))
  if Tags != nil:
    query_594885.add "Tags", Tags
  add(query_594885, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_594885, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_594885, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_594885, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_594885, "DeletionProtection", newJBool(DeletionProtection))
  add(query_594885, "Action", newJString(Action))
  add(query_594885, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_594885, "KmsKeyId", newJString(KmsKeyId))
  add(query_594885, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_594885, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_594885, "Port", newJInt(Port))
  add(query_594885, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_594885, "Version", newJString(Version))
  add(query_594885, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_594884.call(nil, query_594885, nil, nil, nil)

var getCreateDBInstanceReadReplica* = Call_GetCreateDBInstanceReadReplica_594842(
    name: "getCreateDBInstanceReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_GetCreateDBInstanceReadReplica_594843, base: "/",
    url: url_GetCreateDBInstanceReadReplica_594844,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_594950 = ref object of OpenApiRestCall_593421
proc url_PostCreateDBParameterGroup_594952(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBParameterGroup_594951(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594953 = query.getOrDefault("Action")
  valid_594953 = validateParameter(valid_594953, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_594953 != nil:
    section.add "Action", valid_594953
  var valid_594954 = query.getOrDefault("Version")
  valid_594954 = validateParameter(valid_594954, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594954 != nil:
    section.add "Version", valid_594954
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594955 = header.getOrDefault("X-Amz-Date")
  valid_594955 = validateParameter(valid_594955, JString, required = false,
                                 default = nil)
  if valid_594955 != nil:
    section.add "X-Amz-Date", valid_594955
  var valid_594956 = header.getOrDefault("X-Amz-Security-Token")
  valid_594956 = validateParameter(valid_594956, JString, required = false,
                                 default = nil)
  if valid_594956 != nil:
    section.add "X-Amz-Security-Token", valid_594956
  var valid_594957 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594957 = validateParameter(valid_594957, JString, required = false,
                                 default = nil)
  if valid_594957 != nil:
    section.add "X-Amz-Content-Sha256", valid_594957
  var valid_594958 = header.getOrDefault("X-Amz-Algorithm")
  valid_594958 = validateParameter(valid_594958, JString, required = false,
                                 default = nil)
  if valid_594958 != nil:
    section.add "X-Amz-Algorithm", valid_594958
  var valid_594959 = header.getOrDefault("X-Amz-Signature")
  valid_594959 = validateParameter(valid_594959, JString, required = false,
                                 default = nil)
  if valid_594959 != nil:
    section.add "X-Amz-Signature", valid_594959
  var valid_594960 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594960 = validateParameter(valid_594960, JString, required = false,
                                 default = nil)
  if valid_594960 != nil:
    section.add "X-Amz-SignedHeaders", valid_594960
  var valid_594961 = header.getOrDefault("X-Amz-Credential")
  valid_594961 = validateParameter(valid_594961, JString, required = false,
                                 default = nil)
  if valid_594961 != nil:
    section.add "X-Amz-Credential", valid_594961
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_594962 = formData.getOrDefault("DBParameterGroupName")
  valid_594962 = validateParameter(valid_594962, JString, required = true,
                                 default = nil)
  if valid_594962 != nil:
    section.add "DBParameterGroupName", valid_594962
  var valid_594963 = formData.getOrDefault("Tags")
  valid_594963 = validateParameter(valid_594963, JArray, required = false,
                                 default = nil)
  if valid_594963 != nil:
    section.add "Tags", valid_594963
  var valid_594964 = formData.getOrDefault("DBParameterGroupFamily")
  valid_594964 = validateParameter(valid_594964, JString, required = true,
                                 default = nil)
  if valid_594964 != nil:
    section.add "DBParameterGroupFamily", valid_594964
  var valid_594965 = formData.getOrDefault("Description")
  valid_594965 = validateParameter(valid_594965, JString, required = true,
                                 default = nil)
  if valid_594965 != nil:
    section.add "Description", valid_594965
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594966: Call_PostCreateDBParameterGroup_594950; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_594966.validator(path, query, header, formData, body)
  let scheme = call_594966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594966.url(scheme.get, call_594966.host, call_594966.base,
                         call_594966.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594966, url, valid)

proc call*(call_594967: Call_PostCreateDBParameterGroup_594950;
          DBParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  var query_594968 = newJObject()
  var formData_594969 = newJObject()
  add(formData_594969, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_594969.add "Tags", Tags
  add(query_594968, "Action", newJString(Action))
  add(formData_594969, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_594968, "Version", newJString(Version))
  add(formData_594969, "Description", newJString(Description))
  result = call_594967.call(nil, query_594968, nil, formData_594969, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_594950(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_594951, base: "/",
    url: url_PostCreateDBParameterGroup_594952,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_594931 = ref object of OpenApiRestCall_593421
proc url_GetCreateDBParameterGroup_594933(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBParameterGroup_594932(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_594934 = query.getOrDefault("Description")
  valid_594934 = validateParameter(valid_594934, JString, required = true,
                                 default = nil)
  if valid_594934 != nil:
    section.add "Description", valid_594934
  var valid_594935 = query.getOrDefault("DBParameterGroupFamily")
  valid_594935 = validateParameter(valid_594935, JString, required = true,
                                 default = nil)
  if valid_594935 != nil:
    section.add "DBParameterGroupFamily", valid_594935
  var valid_594936 = query.getOrDefault("Tags")
  valid_594936 = validateParameter(valid_594936, JArray, required = false,
                                 default = nil)
  if valid_594936 != nil:
    section.add "Tags", valid_594936
  var valid_594937 = query.getOrDefault("DBParameterGroupName")
  valid_594937 = validateParameter(valid_594937, JString, required = true,
                                 default = nil)
  if valid_594937 != nil:
    section.add "DBParameterGroupName", valid_594937
  var valid_594938 = query.getOrDefault("Action")
  valid_594938 = validateParameter(valid_594938, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_594938 != nil:
    section.add "Action", valid_594938
  var valid_594939 = query.getOrDefault("Version")
  valid_594939 = validateParameter(valid_594939, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594939 != nil:
    section.add "Version", valid_594939
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594940 = header.getOrDefault("X-Amz-Date")
  valid_594940 = validateParameter(valid_594940, JString, required = false,
                                 default = nil)
  if valid_594940 != nil:
    section.add "X-Amz-Date", valid_594940
  var valid_594941 = header.getOrDefault("X-Amz-Security-Token")
  valid_594941 = validateParameter(valid_594941, JString, required = false,
                                 default = nil)
  if valid_594941 != nil:
    section.add "X-Amz-Security-Token", valid_594941
  var valid_594942 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594942 = validateParameter(valid_594942, JString, required = false,
                                 default = nil)
  if valid_594942 != nil:
    section.add "X-Amz-Content-Sha256", valid_594942
  var valid_594943 = header.getOrDefault("X-Amz-Algorithm")
  valid_594943 = validateParameter(valid_594943, JString, required = false,
                                 default = nil)
  if valid_594943 != nil:
    section.add "X-Amz-Algorithm", valid_594943
  var valid_594944 = header.getOrDefault("X-Amz-Signature")
  valid_594944 = validateParameter(valid_594944, JString, required = false,
                                 default = nil)
  if valid_594944 != nil:
    section.add "X-Amz-Signature", valid_594944
  var valid_594945 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594945 = validateParameter(valid_594945, JString, required = false,
                                 default = nil)
  if valid_594945 != nil:
    section.add "X-Amz-SignedHeaders", valid_594945
  var valid_594946 = header.getOrDefault("X-Amz-Credential")
  valid_594946 = validateParameter(valid_594946, JString, required = false,
                                 default = nil)
  if valid_594946 != nil:
    section.add "X-Amz-Credential", valid_594946
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594947: Call_GetCreateDBParameterGroup_594931; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_594947.validator(path, query, header, formData, body)
  let scheme = call_594947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594947.url(scheme.get, call_594947.host, call_594947.base,
                         call_594947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594947, url, valid)

proc call*(call_594948: Call_GetCreateDBParameterGroup_594931; Description: string;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594949 = newJObject()
  add(query_594949, "Description", newJString(Description))
  add(query_594949, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_594949.add "Tags", Tags
  add(query_594949, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_594949, "Action", newJString(Action))
  add(query_594949, "Version", newJString(Version))
  result = call_594948.call(nil, query_594949, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_594931(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_594932, base: "/",
    url: url_GetCreateDBParameterGroup_594933,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSecurityGroup_594988 = ref object of OpenApiRestCall_593421
proc url_PostCreateDBSecurityGroup_594990(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBSecurityGroup_594989(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594991 = query.getOrDefault("Action")
  valid_594991 = validateParameter(valid_594991, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_594991 != nil:
    section.add "Action", valid_594991
  var valid_594992 = query.getOrDefault("Version")
  valid_594992 = validateParameter(valid_594992, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594992 != nil:
    section.add "Version", valid_594992
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594993 = header.getOrDefault("X-Amz-Date")
  valid_594993 = validateParameter(valid_594993, JString, required = false,
                                 default = nil)
  if valid_594993 != nil:
    section.add "X-Amz-Date", valid_594993
  var valid_594994 = header.getOrDefault("X-Amz-Security-Token")
  valid_594994 = validateParameter(valid_594994, JString, required = false,
                                 default = nil)
  if valid_594994 != nil:
    section.add "X-Amz-Security-Token", valid_594994
  var valid_594995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594995 = validateParameter(valid_594995, JString, required = false,
                                 default = nil)
  if valid_594995 != nil:
    section.add "X-Amz-Content-Sha256", valid_594995
  var valid_594996 = header.getOrDefault("X-Amz-Algorithm")
  valid_594996 = validateParameter(valid_594996, JString, required = false,
                                 default = nil)
  if valid_594996 != nil:
    section.add "X-Amz-Algorithm", valid_594996
  var valid_594997 = header.getOrDefault("X-Amz-Signature")
  valid_594997 = validateParameter(valid_594997, JString, required = false,
                                 default = nil)
  if valid_594997 != nil:
    section.add "X-Amz-Signature", valid_594997
  var valid_594998 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594998 = validateParameter(valid_594998, JString, required = false,
                                 default = nil)
  if valid_594998 != nil:
    section.add "X-Amz-SignedHeaders", valid_594998
  var valid_594999 = header.getOrDefault("X-Amz-Credential")
  valid_594999 = validateParameter(valid_594999, JString, required = false,
                                 default = nil)
  if valid_594999 != nil:
    section.add "X-Amz-Credential", valid_594999
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_595000 = formData.getOrDefault("DBSecurityGroupName")
  valid_595000 = validateParameter(valid_595000, JString, required = true,
                                 default = nil)
  if valid_595000 != nil:
    section.add "DBSecurityGroupName", valid_595000
  var valid_595001 = formData.getOrDefault("Tags")
  valid_595001 = validateParameter(valid_595001, JArray, required = false,
                                 default = nil)
  if valid_595001 != nil:
    section.add "Tags", valid_595001
  var valid_595002 = formData.getOrDefault("DBSecurityGroupDescription")
  valid_595002 = validateParameter(valid_595002, JString, required = true,
                                 default = nil)
  if valid_595002 != nil:
    section.add "DBSecurityGroupDescription", valid_595002
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595003: Call_PostCreateDBSecurityGroup_594988; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_595003.validator(path, query, header, formData, body)
  let scheme = call_595003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595003.url(scheme.get, call_595003.host, call_595003.base,
                         call_595003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595003, url, valid)

proc call*(call_595004: Call_PostCreateDBSecurityGroup_594988;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Version: string (required)
  var query_595005 = newJObject()
  var formData_595006 = newJObject()
  add(formData_595006, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Tags != nil:
    formData_595006.add "Tags", Tags
  add(query_595005, "Action", newJString(Action))
  add(formData_595006, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(query_595005, "Version", newJString(Version))
  result = call_595004.call(nil, query_595005, nil, formData_595006, nil)

var postCreateDBSecurityGroup* = Call_PostCreateDBSecurityGroup_594988(
    name: "postCreateDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_PostCreateDBSecurityGroup_594989, base: "/",
    url: url_PostCreateDBSecurityGroup_594990,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSecurityGroup_594970 = ref object of OpenApiRestCall_593421
proc url_GetCreateDBSecurityGroup_594972(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBSecurityGroup_594971(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_594973 = query.getOrDefault("DBSecurityGroupName")
  valid_594973 = validateParameter(valid_594973, JString, required = true,
                                 default = nil)
  if valid_594973 != nil:
    section.add "DBSecurityGroupName", valid_594973
  var valid_594974 = query.getOrDefault("DBSecurityGroupDescription")
  valid_594974 = validateParameter(valid_594974, JString, required = true,
                                 default = nil)
  if valid_594974 != nil:
    section.add "DBSecurityGroupDescription", valid_594974
  var valid_594975 = query.getOrDefault("Tags")
  valid_594975 = validateParameter(valid_594975, JArray, required = false,
                                 default = nil)
  if valid_594975 != nil:
    section.add "Tags", valid_594975
  var valid_594976 = query.getOrDefault("Action")
  valid_594976 = validateParameter(valid_594976, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_594976 != nil:
    section.add "Action", valid_594976
  var valid_594977 = query.getOrDefault("Version")
  valid_594977 = validateParameter(valid_594977, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594977 != nil:
    section.add "Version", valid_594977
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594978 = header.getOrDefault("X-Amz-Date")
  valid_594978 = validateParameter(valid_594978, JString, required = false,
                                 default = nil)
  if valid_594978 != nil:
    section.add "X-Amz-Date", valid_594978
  var valid_594979 = header.getOrDefault("X-Amz-Security-Token")
  valid_594979 = validateParameter(valid_594979, JString, required = false,
                                 default = nil)
  if valid_594979 != nil:
    section.add "X-Amz-Security-Token", valid_594979
  var valid_594980 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594980 = validateParameter(valid_594980, JString, required = false,
                                 default = nil)
  if valid_594980 != nil:
    section.add "X-Amz-Content-Sha256", valid_594980
  var valid_594981 = header.getOrDefault("X-Amz-Algorithm")
  valid_594981 = validateParameter(valid_594981, JString, required = false,
                                 default = nil)
  if valid_594981 != nil:
    section.add "X-Amz-Algorithm", valid_594981
  var valid_594982 = header.getOrDefault("X-Amz-Signature")
  valid_594982 = validateParameter(valid_594982, JString, required = false,
                                 default = nil)
  if valid_594982 != nil:
    section.add "X-Amz-Signature", valid_594982
  var valid_594983 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594983 = validateParameter(valid_594983, JString, required = false,
                                 default = nil)
  if valid_594983 != nil:
    section.add "X-Amz-SignedHeaders", valid_594983
  var valid_594984 = header.getOrDefault("X-Amz-Credential")
  valid_594984 = validateParameter(valid_594984, JString, required = false,
                                 default = nil)
  if valid_594984 != nil:
    section.add "X-Amz-Credential", valid_594984
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594985: Call_GetCreateDBSecurityGroup_594970; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_594985.validator(path, query, header, formData, body)
  let scheme = call_594985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594985.url(scheme.get, call_594985.host, call_594985.base,
                         call_594985.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594985, url, valid)

proc call*(call_594986: Call_GetCreateDBSecurityGroup_594970;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594987 = newJObject()
  add(query_594987, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_594987, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  if Tags != nil:
    query_594987.add "Tags", Tags
  add(query_594987, "Action", newJString(Action))
  add(query_594987, "Version", newJString(Version))
  result = call_594986.call(nil, query_594987, nil, nil, nil)

var getCreateDBSecurityGroup* = Call_GetCreateDBSecurityGroup_594970(
    name: "getCreateDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_GetCreateDBSecurityGroup_594971, base: "/",
    url: url_GetCreateDBSecurityGroup_594972, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSnapshot_595025 = ref object of OpenApiRestCall_593421
proc url_PostCreateDBSnapshot_595027(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBSnapshot_595026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595028 = query.getOrDefault("Action")
  valid_595028 = validateParameter(valid_595028, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_595028 != nil:
    section.add "Action", valid_595028
  var valid_595029 = query.getOrDefault("Version")
  valid_595029 = validateParameter(valid_595029, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595029 != nil:
    section.add "Version", valid_595029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595030 = header.getOrDefault("X-Amz-Date")
  valid_595030 = validateParameter(valid_595030, JString, required = false,
                                 default = nil)
  if valid_595030 != nil:
    section.add "X-Amz-Date", valid_595030
  var valid_595031 = header.getOrDefault("X-Amz-Security-Token")
  valid_595031 = validateParameter(valid_595031, JString, required = false,
                                 default = nil)
  if valid_595031 != nil:
    section.add "X-Amz-Security-Token", valid_595031
  var valid_595032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595032 = validateParameter(valid_595032, JString, required = false,
                                 default = nil)
  if valid_595032 != nil:
    section.add "X-Amz-Content-Sha256", valid_595032
  var valid_595033 = header.getOrDefault("X-Amz-Algorithm")
  valid_595033 = validateParameter(valid_595033, JString, required = false,
                                 default = nil)
  if valid_595033 != nil:
    section.add "X-Amz-Algorithm", valid_595033
  var valid_595034 = header.getOrDefault("X-Amz-Signature")
  valid_595034 = validateParameter(valid_595034, JString, required = false,
                                 default = nil)
  if valid_595034 != nil:
    section.add "X-Amz-Signature", valid_595034
  var valid_595035 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595035 = validateParameter(valid_595035, JString, required = false,
                                 default = nil)
  if valid_595035 != nil:
    section.add "X-Amz-SignedHeaders", valid_595035
  var valid_595036 = header.getOrDefault("X-Amz-Credential")
  valid_595036 = validateParameter(valid_595036, JString, required = false,
                                 default = nil)
  if valid_595036 != nil:
    section.add "X-Amz-Credential", valid_595036
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595037 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595037 = validateParameter(valid_595037, JString, required = true,
                                 default = nil)
  if valid_595037 != nil:
    section.add "DBInstanceIdentifier", valid_595037
  var valid_595038 = formData.getOrDefault("Tags")
  valid_595038 = validateParameter(valid_595038, JArray, required = false,
                                 default = nil)
  if valid_595038 != nil:
    section.add "Tags", valid_595038
  var valid_595039 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_595039 = validateParameter(valid_595039, JString, required = true,
                                 default = nil)
  if valid_595039 != nil:
    section.add "DBSnapshotIdentifier", valid_595039
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595040: Call_PostCreateDBSnapshot_595025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_595040.validator(path, query, header, formData, body)
  let scheme = call_595040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595040.url(scheme.get, call_595040.host, call_595040.base,
                         call_595040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595040, url, valid)

proc call*(call_595041: Call_PostCreateDBSnapshot_595025;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595042 = newJObject()
  var formData_595043 = newJObject()
  add(formData_595043, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if Tags != nil:
    formData_595043.add "Tags", Tags
  add(formData_595043, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_595042, "Action", newJString(Action))
  add(query_595042, "Version", newJString(Version))
  result = call_595041.call(nil, query_595042, nil, formData_595043, nil)

var postCreateDBSnapshot* = Call_PostCreateDBSnapshot_595025(
    name: "postCreateDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_PostCreateDBSnapshot_595026, base: "/",
    url: url_PostCreateDBSnapshot_595027, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSnapshot_595007 = ref object of OpenApiRestCall_593421
proc url_GetCreateDBSnapshot_595009(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBSnapshot_595008(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  section = newJObject()
  var valid_595010 = query.getOrDefault("Tags")
  valid_595010 = validateParameter(valid_595010, JArray, required = false,
                                 default = nil)
  if valid_595010 != nil:
    section.add "Tags", valid_595010
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595011 = query.getOrDefault("Action")
  valid_595011 = validateParameter(valid_595011, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_595011 != nil:
    section.add "Action", valid_595011
  var valid_595012 = query.getOrDefault("Version")
  valid_595012 = validateParameter(valid_595012, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595012 != nil:
    section.add "Version", valid_595012
  var valid_595013 = query.getOrDefault("DBInstanceIdentifier")
  valid_595013 = validateParameter(valid_595013, JString, required = true,
                                 default = nil)
  if valid_595013 != nil:
    section.add "DBInstanceIdentifier", valid_595013
  var valid_595014 = query.getOrDefault("DBSnapshotIdentifier")
  valid_595014 = validateParameter(valid_595014, JString, required = true,
                                 default = nil)
  if valid_595014 != nil:
    section.add "DBSnapshotIdentifier", valid_595014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595015 = header.getOrDefault("X-Amz-Date")
  valid_595015 = validateParameter(valid_595015, JString, required = false,
                                 default = nil)
  if valid_595015 != nil:
    section.add "X-Amz-Date", valid_595015
  var valid_595016 = header.getOrDefault("X-Amz-Security-Token")
  valid_595016 = validateParameter(valid_595016, JString, required = false,
                                 default = nil)
  if valid_595016 != nil:
    section.add "X-Amz-Security-Token", valid_595016
  var valid_595017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595017 = validateParameter(valid_595017, JString, required = false,
                                 default = nil)
  if valid_595017 != nil:
    section.add "X-Amz-Content-Sha256", valid_595017
  var valid_595018 = header.getOrDefault("X-Amz-Algorithm")
  valid_595018 = validateParameter(valid_595018, JString, required = false,
                                 default = nil)
  if valid_595018 != nil:
    section.add "X-Amz-Algorithm", valid_595018
  var valid_595019 = header.getOrDefault("X-Amz-Signature")
  valid_595019 = validateParameter(valid_595019, JString, required = false,
                                 default = nil)
  if valid_595019 != nil:
    section.add "X-Amz-Signature", valid_595019
  var valid_595020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595020 = validateParameter(valid_595020, JString, required = false,
                                 default = nil)
  if valid_595020 != nil:
    section.add "X-Amz-SignedHeaders", valid_595020
  var valid_595021 = header.getOrDefault("X-Amz-Credential")
  valid_595021 = validateParameter(valid_595021, JString, required = false,
                                 default = nil)
  if valid_595021 != nil:
    section.add "X-Amz-Credential", valid_595021
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595022: Call_GetCreateDBSnapshot_595007; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_595022.validator(path, query, header, formData, body)
  let scheme = call_595022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595022.url(scheme.get, call_595022.host, call_595022.base,
                         call_595022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595022, url, valid)

proc call*(call_595023: Call_GetCreateDBSnapshot_595007;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  var query_595024 = newJObject()
  if Tags != nil:
    query_595024.add "Tags", Tags
  add(query_595024, "Action", newJString(Action))
  add(query_595024, "Version", newJString(Version))
  add(query_595024, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595024, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_595023.call(nil, query_595024, nil, nil, nil)

var getCreateDBSnapshot* = Call_GetCreateDBSnapshot_595007(
    name: "getCreateDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_GetCreateDBSnapshot_595008, base: "/",
    url: url_GetCreateDBSnapshot_595009, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_595063 = ref object of OpenApiRestCall_593421
proc url_PostCreateDBSubnetGroup_595065(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBSubnetGroup_595064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595066 = query.getOrDefault("Action")
  valid_595066 = validateParameter(valid_595066, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_595066 != nil:
    section.add "Action", valid_595066
  var valid_595067 = query.getOrDefault("Version")
  valid_595067 = validateParameter(valid_595067, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595067 != nil:
    section.add "Version", valid_595067
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595068 = header.getOrDefault("X-Amz-Date")
  valid_595068 = validateParameter(valid_595068, JString, required = false,
                                 default = nil)
  if valid_595068 != nil:
    section.add "X-Amz-Date", valid_595068
  var valid_595069 = header.getOrDefault("X-Amz-Security-Token")
  valid_595069 = validateParameter(valid_595069, JString, required = false,
                                 default = nil)
  if valid_595069 != nil:
    section.add "X-Amz-Security-Token", valid_595069
  var valid_595070 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595070 = validateParameter(valid_595070, JString, required = false,
                                 default = nil)
  if valid_595070 != nil:
    section.add "X-Amz-Content-Sha256", valid_595070
  var valid_595071 = header.getOrDefault("X-Amz-Algorithm")
  valid_595071 = validateParameter(valid_595071, JString, required = false,
                                 default = nil)
  if valid_595071 != nil:
    section.add "X-Amz-Algorithm", valid_595071
  var valid_595072 = header.getOrDefault("X-Amz-Signature")
  valid_595072 = validateParameter(valid_595072, JString, required = false,
                                 default = nil)
  if valid_595072 != nil:
    section.add "X-Amz-Signature", valid_595072
  var valid_595073 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595073 = validateParameter(valid_595073, JString, required = false,
                                 default = nil)
  if valid_595073 != nil:
    section.add "X-Amz-SignedHeaders", valid_595073
  var valid_595074 = header.getOrDefault("X-Amz-Credential")
  valid_595074 = validateParameter(valid_595074, JString, required = false,
                                 default = nil)
  if valid_595074 != nil:
    section.add "X-Amz-Credential", valid_595074
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  section = newJObject()
  var valid_595075 = formData.getOrDefault("Tags")
  valid_595075 = validateParameter(valid_595075, JArray, required = false,
                                 default = nil)
  if valid_595075 != nil:
    section.add "Tags", valid_595075
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_595076 = formData.getOrDefault("DBSubnetGroupName")
  valid_595076 = validateParameter(valid_595076, JString, required = true,
                                 default = nil)
  if valid_595076 != nil:
    section.add "DBSubnetGroupName", valid_595076
  var valid_595077 = formData.getOrDefault("SubnetIds")
  valid_595077 = validateParameter(valid_595077, JArray, required = true, default = nil)
  if valid_595077 != nil:
    section.add "SubnetIds", valid_595077
  var valid_595078 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_595078 = validateParameter(valid_595078, JString, required = true,
                                 default = nil)
  if valid_595078 != nil:
    section.add "DBSubnetGroupDescription", valid_595078
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595079: Call_PostCreateDBSubnetGroup_595063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_595079.validator(path, query, header, formData, body)
  let scheme = call_595079.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595079.url(scheme.get, call_595079.host, call_595079.base,
                         call_595079.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595079, url, valid)

proc call*(call_595080: Call_PostCreateDBSubnetGroup_595063;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_595081 = newJObject()
  var formData_595082 = newJObject()
  if Tags != nil:
    formData_595082.add "Tags", Tags
  add(formData_595082, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_595082.add "SubnetIds", SubnetIds
  add(query_595081, "Action", newJString(Action))
  add(formData_595082, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_595081, "Version", newJString(Version))
  result = call_595080.call(nil, query_595081, nil, formData_595082, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_595063(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_595064, base: "/",
    url: url_PostCreateDBSubnetGroup_595065, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_595044 = ref object of OpenApiRestCall_593421
proc url_GetCreateDBSubnetGroup_595046(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBSubnetGroup_595045(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_595047 = query.getOrDefault("Tags")
  valid_595047 = validateParameter(valid_595047, JArray, required = false,
                                 default = nil)
  if valid_595047 != nil:
    section.add "Tags", valid_595047
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595048 = query.getOrDefault("Action")
  valid_595048 = validateParameter(valid_595048, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_595048 != nil:
    section.add "Action", valid_595048
  var valid_595049 = query.getOrDefault("DBSubnetGroupName")
  valid_595049 = validateParameter(valid_595049, JString, required = true,
                                 default = nil)
  if valid_595049 != nil:
    section.add "DBSubnetGroupName", valid_595049
  var valid_595050 = query.getOrDefault("SubnetIds")
  valid_595050 = validateParameter(valid_595050, JArray, required = true, default = nil)
  if valid_595050 != nil:
    section.add "SubnetIds", valid_595050
  var valid_595051 = query.getOrDefault("DBSubnetGroupDescription")
  valid_595051 = validateParameter(valid_595051, JString, required = true,
                                 default = nil)
  if valid_595051 != nil:
    section.add "DBSubnetGroupDescription", valid_595051
  var valid_595052 = query.getOrDefault("Version")
  valid_595052 = validateParameter(valid_595052, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595052 != nil:
    section.add "Version", valid_595052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595053 = header.getOrDefault("X-Amz-Date")
  valid_595053 = validateParameter(valid_595053, JString, required = false,
                                 default = nil)
  if valid_595053 != nil:
    section.add "X-Amz-Date", valid_595053
  var valid_595054 = header.getOrDefault("X-Amz-Security-Token")
  valid_595054 = validateParameter(valid_595054, JString, required = false,
                                 default = nil)
  if valid_595054 != nil:
    section.add "X-Amz-Security-Token", valid_595054
  var valid_595055 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595055 = validateParameter(valid_595055, JString, required = false,
                                 default = nil)
  if valid_595055 != nil:
    section.add "X-Amz-Content-Sha256", valid_595055
  var valid_595056 = header.getOrDefault("X-Amz-Algorithm")
  valid_595056 = validateParameter(valid_595056, JString, required = false,
                                 default = nil)
  if valid_595056 != nil:
    section.add "X-Amz-Algorithm", valid_595056
  var valid_595057 = header.getOrDefault("X-Amz-Signature")
  valid_595057 = validateParameter(valid_595057, JString, required = false,
                                 default = nil)
  if valid_595057 != nil:
    section.add "X-Amz-Signature", valid_595057
  var valid_595058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595058 = validateParameter(valid_595058, JString, required = false,
                                 default = nil)
  if valid_595058 != nil:
    section.add "X-Amz-SignedHeaders", valid_595058
  var valid_595059 = header.getOrDefault("X-Amz-Credential")
  valid_595059 = validateParameter(valid_595059, JString, required = false,
                                 default = nil)
  if valid_595059 != nil:
    section.add "X-Amz-Credential", valid_595059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595060: Call_GetCreateDBSubnetGroup_595044; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_595060.validator(path, query, header, formData, body)
  let scheme = call_595060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595060.url(scheme.get, call_595060.host, call_595060.base,
                         call_595060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595060, url, valid)

proc call*(call_595061: Call_GetCreateDBSubnetGroup_595044;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_595062 = newJObject()
  if Tags != nil:
    query_595062.add "Tags", Tags
  add(query_595062, "Action", newJString(Action))
  add(query_595062, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_595062.add "SubnetIds", SubnetIds
  add(query_595062, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_595062, "Version", newJString(Version))
  result = call_595061.call(nil, query_595062, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_595044(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_595045, base: "/",
    url: url_GetCreateDBSubnetGroup_595046, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_595105 = ref object of OpenApiRestCall_593421
proc url_PostCreateEventSubscription_595107(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateEventSubscription_595106(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595108 = query.getOrDefault("Action")
  valid_595108 = validateParameter(valid_595108, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_595108 != nil:
    section.add "Action", valid_595108
  var valid_595109 = query.getOrDefault("Version")
  valid_595109 = validateParameter(valid_595109, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595109 != nil:
    section.add "Version", valid_595109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595110 = header.getOrDefault("X-Amz-Date")
  valid_595110 = validateParameter(valid_595110, JString, required = false,
                                 default = nil)
  if valid_595110 != nil:
    section.add "X-Amz-Date", valid_595110
  var valid_595111 = header.getOrDefault("X-Amz-Security-Token")
  valid_595111 = validateParameter(valid_595111, JString, required = false,
                                 default = nil)
  if valid_595111 != nil:
    section.add "X-Amz-Security-Token", valid_595111
  var valid_595112 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595112 = validateParameter(valid_595112, JString, required = false,
                                 default = nil)
  if valid_595112 != nil:
    section.add "X-Amz-Content-Sha256", valid_595112
  var valid_595113 = header.getOrDefault("X-Amz-Algorithm")
  valid_595113 = validateParameter(valid_595113, JString, required = false,
                                 default = nil)
  if valid_595113 != nil:
    section.add "X-Amz-Algorithm", valid_595113
  var valid_595114 = header.getOrDefault("X-Amz-Signature")
  valid_595114 = validateParameter(valid_595114, JString, required = false,
                                 default = nil)
  if valid_595114 != nil:
    section.add "X-Amz-Signature", valid_595114
  var valid_595115 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595115 = validateParameter(valid_595115, JString, required = false,
                                 default = nil)
  if valid_595115 != nil:
    section.add "X-Amz-SignedHeaders", valid_595115
  var valid_595116 = header.getOrDefault("X-Amz-Credential")
  valid_595116 = validateParameter(valid_595116, JString, required = false,
                                 default = nil)
  if valid_595116 != nil:
    section.add "X-Amz-Credential", valid_595116
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  section = newJObject()
  var valid_595117 = formData.getOrDefault("Enabled")
  valid_595117 = validateParameter(valid_595117, JBool, required = false, default = nil)
  if valid_595117 != nil:
    section.add "Enabled", valid_595117
  var valid_595118 = formData.getOrDefault("EventCategories")
  valid_595118 = validateParameter(valid_595118, JArray, required = false,
                                 default = nil)
  if valid_595118 != nil:
    section.add "EventCategories", valid_595118
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_595119 = formData.getOrDefault("SnsTopicArn")
  valid_595119 = validateParameter(valid_595119, JString, required = true,
                                 default = nil)
  if valid_595119 != nil:
    section.add "SnsTopicArn", valid_595119
  var valid_595120 = formData.getOrDefault("SourceIds")
  valid_595120 = validateParameter(valid_595120, JArray, required = false,
                                 default = nil)
  if valid_595120 != nil:
    section.add "SourceIds", valid_595120
  var valid_595121 = formData.getOrDefault("Tags")
  valid_595121 = validateParameter(valid_595121, JArray, required = false,
                                 default = nil)
  if valid_595121 != nil:
    section.add "Tags", valid_595121
  var valid_595122 = formData.getOrDefault("SubscriptionName")
  valid_595122 = validateParameter(valid_595122, JString, required = true,
                                 default = nil)
  if valid_595122 != nil:
    section.add "SubscriptionName", valid_595122
  var valid_595123 = formData.getOrDefault("SourceType")
  valid_595123 = validateParameter(valid_595123, JString, required = false,
                                 default = nil)
  if valid_595123 != nil:
    section.add "SourceType", valid_595123
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595124: Call_PostCreateEventSubscription_595105; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  let valid = call_595124.validator(path, query, header, formData, body)
  let scheme = call_595124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595124.url(scheme.get, call_595124.host, call_595124.base,
                         call_595124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595124, url, valid)

proc call*(call_595125: Call_PostCreateEventSubscription_595105;
          SnsTopicArn: string; SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Tags: JsonNode = nil; Action: string = "CreateEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  var query_595126 = newJObject()
  var formData_595127 = newJObject()
  add(formData_595127, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_595127.add "EventCategories", EventCategories
  add(formData_595127, "SnsTopicArn", newJString(SnsTopicArn))
  if SourceIds != nil:
    formData_595127.add "SourceIds", SourceIds
  if Tags != nil:
    formData_595127.add "Tags", Tags
  add(formData_595127, "SubscriptionName", newJString(SubscriptionName))
  add(query_595126, "Action", newJString(Action))
  add(query_595126, "Version", newJString(Version))
  add(formData_595127, "SourceType", newJString(SourceType))
  result = call_595125.call(nil, query_595126, nil, formData_595127, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_595105(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_595106, base: "/",
    url: url_PostCreateEventSubscription_595107,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_595083 = ref object of OpenApiRestCall_593421
proc url_GetCreateEventSubscription_595085(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateEventSubscription_595084(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_595086 = query.getOrDefault("SourceType")
  valid_595086 = validateParameter(valid_595086, JString, required = false,
                                 default = nil)
  if valid_595086 != nil:
    section.add "SourceType", valid_595086
  var valid_595087 = query.getOrDefault("SourceIds")
  valid_595087 = validateParameter(valid_595087, JArray, required = false,
                                 default = nil)
  if valid_595087 != nil:
    section.add "SourceIds", valid_595087
  var valid_595088 = query.getOrDefault("Enabled")
  valid_595088 = validateParameter(valid_595088, JBool, required = false, default = nil)
  if valid_595088 != nil:
    section.add "Enabled", valid_595088
  var valid_595089 = query.getOrDefault("Tags")
  valid_595089 = validateParameter(valid_595089, JArray, required = false,
                                 default = nil)
  if valid_595089 != nil:
    section.add "Tags", valid_595089
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595090 = query.getOrDefault("Action")
  valid_595090 = validateParameter(valid_595090, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_595090 != nil:
    section.add "Action", valid_595090
  var valid_595091 = query.getOrDefault("SnsTopicArn")
  valid_595091 = validateParameter(valid_595091, JString, required = true,
                                 default = nil)
  if valid_595091 != nil:
    section.add "SnsTopicArn", valid_595091
  var valid_595092 = query.getOrDefault("EventCategories")
  valid_595092 = validateParameter(valid_595092, JArray, required = false,
                                 default = nil)
  if valid_595092 != nil:
    section.add "EventCategories", valid_595092
  var valid_595093 = query.getOrDefault("SubscriptionName")
  valid_595093 = validateParameter(valid_595093, JString, required = true,
                                 default = nil)
  if valid_595093 != nil:
    section.add "SubscriptionName", valid_595093
  var valid_595094 = query.getOrDefault("Version")
  valid_595094 = validateParameter(valid_595094, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595094 != nil:
    section.add "Version", valid_595094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595095 = header.getOrDefault("X-Amz-Date")
  valid_595095 = validateParameter(valid_595095, JString, required = false,
                                 default = nil)
  if valid_595095 != nil:
    section.add "X-Amz-Date", valid_595095
  var valid_595096 = header.getOrDefault("X-Amz-Security-Token")
  valid_595096 = validateParameter(valid_595096, JString, required = false,
                                 default = nil)
  if valid_595096 != nil:
    section.add "X-Amz-Security-Token", valid_595096
  var valid_595097 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595097 = validateParameter(valid_595097, JString, required = false,
                                 default = nil)
  if valid_595097 != nil:
    section.add "X-Amz-Content-Sha256", valid_595097
  var valid_595098 = header.getOrDefault("X-Amz-Algorithm")
  valid_595098 = validateParameter(valid_595098, JString, required = false,
                                 default = nil)
  if valid_595098 != nil:
    section.add "X-Amz-Algorithm", valid_595098
  var valid_595099 = header.getOrDefault("X-Amz-Signature")
  valid_595099 = validateParameter(valid_595099, JString, required = false,
                                 default = nil)
  if valid_595099 != nil:
    section.add "X-Amz-Signature", valid_595099
  var valid_595100 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595100 = validateParameter(valid_595100, JString, required = false,
                                 default = nil)
  if valid_595100 != nil:
    section.add "X-Amz-SignedHeaders", valid_595100
  var valid_595101 = header.getOrDefault("X-Amz-Credential")
  valid_595101 = validateParameter(valid_595101, JString, required = false,
                                 default = nil)
  if valid_595101 != nil:
    section.add "X-Amz-Credential", valid_595101
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595102: Call_GetCreateEventSubscription_595083; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  let valid = call_595102.validator(path, query, header, formData, body)
  let scheme = call_595102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595102.url(scheme.get, call_595102.host, call_595102.base,
                         call_595102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595102, url, valid)

proc call*(call_595103: Call_GetCreateEventSubscription_595083;
          SnsTopicArn: string; SubscriptionName: string; SourceType: string = "";
          SourceIds: JsonNode = nil; Enabled: bool = false; Tags: JsonNode = nil;
          Action: string = "CreateEventSubscription";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: string (required)
  var query_595104 = newJObject()
  add(query_595104, "SourceType", newJString(SourceType))
  if SourceIds != nil:
    query_595104.add "SourceIds", SourceIds
  add(query_595104, "Enabled", newJBool(Enabled))
  if Tags != nil:
    query_595104.add "Tags", Tags
  add(query_595104, "Action", newJString(Action))
  add(query_595104, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_595104.add "EventCategories", EventCategories
  add(query_595104, "SubscriptionName", newJString(SubscriptionName))
  add(query_595104, "Version", newJString(Version))
  result = call_595103.call(nil, query_595104, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_595083(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_595084, base: "/",
    url: url_GetCreateEventSubscription_595085,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGlobalCluster_595150 = ref object of OpenApiRestCall_593421
proc url_PostCreateGlobalCluster_595152(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateGlobalCluster_595151(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595153 = query.getOrDefault("Action")
  valid_595153 = validateParameter(valid_595153, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_595153 != nil:
    section.add "Action", valid_595153
  var valid_595154 = query.getOrDefault("Version")
  valid_595154 = validateParameter(valid_595154, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595154 != nil:
    section.add "Version", valid_595154
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595155 = header.getOrDefault("X-Amz-Date")
  valid_595155 = validateParameter(valid_595155, JString, required = false,
                                 default = nil)
  if valid_595155 != nil:
    section.add "X-Amz-Date", valid_595155
  var valid_595156 = header.getOrDefault("X-Amz-Security-Token")
  valid_595156 = validateParameter(valid_595156, JString, required = false,
                                 default = nil)
  if valid_595156 != nil:
    section.add "X-Amz-Security-Token", valid_595156
  var valid_595157 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595157 = validateParameter(valid_595157, JString, required = false,
                                 default = nil)
  if valid_595157 != nil:
    section.add "X-Amz-Content-Sha256", valid_595157
  var valid_595158 = header.getOrDefault("X-Amz-Algorithm")
  valid_595158 = validateParameter(valid_595158, JString, required = false,
                                 default = nil)
  if valid_595158 != nil:
    section.add "X-Amz-Algorithm", valid_595158
  var valid_595159 = header.getOrDefault("X-Amz-Signature")
  valid_595159 = validateParameter(valid_595159, JString, required = false,
                                 default = nil)
  if valid_595159 != nil:
    section.add "X-Amz-Signature", valid_595159
  var valid_595160 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595160 = validateParameter(valid_595160, JString, required = false,
                                 default = nil)
  if valid_595160 != nil:
    section.add "X-Amz-SignedHeaders", valid_595160
  var valid_595161 = header.getOrDefault("X-Amz-Credential")
  valid_595161 = validateParameter(valid_595161, JString, required = false,
                                 default = nil)
  if valid_595161 != nil:
    section.add "X-Amz-Credential", valid_595161
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  section = newJObject()
  var valid_595162 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_595162 = validateParameter(valid_595162, JString, required = false,
                                 default = nil)
  if valid_595162 != nil:
    section.add "SourceDBClusterIdentifier", valid_595162
  var valid_595163 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_595163 = validateParameter(valid_595163, JString, required = false,
                                 default = nil)
  if valid_595163 != nil:
    section.add "GlobalClusterIdentifier", valid_595163
  var valid_595164 = formData.getOrDefault("Engine")
  valid_595164 = validateParameter(valid_595164, JString, required = false,
                                 default = nil)
  if valid_595164 != nil:
    section.add "Engine", valid_595164
  var valid_595165 = formData.getOrDefault("DeletionProtection")
  valid_595165 = validateParameter(valid_595165, JBool, required = false, default = nil)
  if valid_595165 != nil:
    section.add "DeletionProtection", valid_595165
  var valid_595166 = formData.getOrDefault("DatabaseName")
  valid_595166 = validateParameter(valid_595166, JString, required = false,
                                 default = nil)
  if valid_595166 != nil:
    section.add "DatabaseName", valid_595166
  var valid_595167 = formData.getOrDefault("StorageEncrypted")
  valid_595167 = validateParameter(valid_595167, JBool, required = false, default = nil)
  if valid_595167 != nil:
    section.add "StorageEncrypted", valid_595167
  var valid_595168 = formData.getOrDefault("EngineVersion")
  valid_595168 = validateParameter(valid_595168, JString, required = false,
                                 default = nil)
  if valid_595168 != nil:
    section.add "EngineVersion", valid_595168
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595169: Call_PostCreateGlobalCluster_595150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595169.validator(path, query, header, formData, body)
  let scheme = call_595169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595169.url(scheme.get, call_595169.host, call_595169.base,
                         call_595169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595169, url, valid)

proc call*(call_595170: Call_PostCreateGlobalCluster_595150;
          SourceDBClusterIdentifier: string = "";
          GlobalClusterIdentifier: string = ""; Engine: string = "";
          DeletionProtection: bool = false; Action: string = "CreateGlobalCluster";
          DatabaseName: string = ""; StorageEncrypted: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   Version: string (required)
  var query_595171 = newJObject()
  var formData_595172 = newJObject()
  add(formData_595172, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_595172, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_595172, "Engine", newJString(Engine))
  add(formData_595172, "DeletionProtection", newJBool(DeletionProtection))
  add(query_595171, "Action", newJString(Action))
  add(formData_595172, "DatabaseName", newJString(DatabaseName))
  add(formData_595172, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_595172, "EngineVersion", newJString(EngineVersion))
  add(query_595171, "Version", newJString(Version))
  result = call_595170.call(nil, query_595171, nil, formData_595172, nil)

var postCreateGlobalCluster* = Call_PostCreateGlobalCluster_595150(
    name: "postCreateGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_PostCreateGlobalCluster_595151, base: "/",
    url: url_PostCreateGlobalCluster_595152, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGlobalCluster_595128 = ref object of OpenApiRestCall_593421
proc url_GetCreateGlobalCluster_595130(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateGlobalCluster_595129(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_595131 = query.getOrDefault("Engine")
  valid_595131 = validateParameter(valid_595131, JString, required = false,
                                 default = nil)
  if valid_595131 != nil:
    section.add "Engine", valid_595131
  var valid_595132 = query.getOrDefault("StorageEncrypted")
  valid_595132 = validateParameter(valid_595132, JBool, required = false, default = nil)
  if valid_595132 != nil:
    section.add "StorageEncrypted", valid_595132
  var valid_595133 = query.getOrDefault("DatabaseName")
  valid_595133 = validateParameter(valid_595133, JString, required = false,
                                 default = nil)
  if valid_595133 != nil:
    section.add "DatabaseName", valid_595133
  var valid_595134 = query.getOrDefault("DeletionProtection")
  valid_595134 = validateParameter(valid_595134, JBool, required = false, default = nil)
  if valid_595134 != nil:
    section.add "DeletionProtection", valid_595134
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595135 = query.getOrDefault("Action")
  valid_595135 = validateParameter(valid_595135, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_595135 != nil:
    section.add "Action", valid_595135
  var valid_595136 = query.getOrDefault("GlobalClusterIdentifier")
  valid_595136 = validateParameter(valid_595136, JString, required = false,
                                 default = nil)
  if valid_595136 != nil:
    section.add "GlobalClusterIdentifier", valid_595136
  var valid_595137 = query.getOrDefault("EngineVersion")
  valid_595137 = validateParameter(valid_595137, JString, required = false,
                                 default = nil)
  if valid_595137 != nil:
    section.add "EngineVersion", valid_595137
  var valid_595138 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_595138 = validateParameter(valid_595138, JString, required = false,
                                 default = nil)
  if valid_595138 != nil:
    section.add "SourceDBClusterIdentifier", valid_595138
  var valid_595139 = query.getOrDefault("Version")
  valid_595139 = validateParameter(valid_595139, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595139 != nil:
    section.add "Version", valid_595139
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595140 = header.getOrDefault("X-Amz-Date")
  valid_595140 = validateParameter(valid_595140, JString, required = false,
                                 default = nil)
  if valid_595140 != nil:
    section.add "X-Amz-Date", valid_595140
  var valid_595141 = header.getOrDefault("X-Amz-Security-Token")
  valid_595141 = validateParameter(valid_595141, JString, required = false,
                                 default = nil)
  if valid_595141 != nil:
    section.add "X-Amz-Security-Token", valid_595141
  var valid_595142 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595142 = validateParameter(valid_595142, JString, required = false,
                                 default = nil)
  if valid_595142 != nil:
    section.add "X-Amz-Content-Sha256", valid_595142
  var valid_595143 = header.getOrDefault("X-Amz-Algorithm")
  valid_595143 = validateParameter(valid_595143, JString, required = false,
                                 default = nil)
  if valid_595143 != nil:
    section.add "X-Amz-Algorithm", valid_595143
  var valid_595144 = header.getOrDefault("X-Amz-Signature")
  valid_595144 = validateParameter(valid_595144, JString, required = false,
                                 default = nil)
  if valid_595144 != nil:
    section.add "X-Amz-Signature", valid_595144
  var valid_595145 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595145 = validateParameter(valid_595145, JString, required = false,
                                 default = nil)
  if valid_595145 != nil:
    section.add "X-Amz-SignedHeaders", valid_595145
  var valid_595146 = header.getOrDefault("X-Amz-Credential")
  valid_595146 = validateParameter(valid_595146, JString, required = false,
                                 default = nil)
  if valid_595146 != nil:
    section.add "X-Amz-Credential", valid_595146
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595147: Call_GetCreateGlobalCluster_595128; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595147.validator(path, query, header, formData, body)
  let scheme = call_595147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595147.url(scheme.get, call_595147.host, call_595147.base,
                         call_595147.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595147, url, valid)

proc call*(call_595148: Call_GetCreateGlobalCluster_595128; Engine: string = "";
          StorageEncrypted: bool = false; DatabaseName: string = "";
          DeletionProtection: bool = false; Action: string = "CreateGlobalCluster";
          GlobalClusterIdentifier: string = ""; EngineVersion: string = "";
          SourceDBClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Version: string (required)
  var query_595149 = newJObject()
  add(query_595149, "Engine", newJString(Engine))
  add(query_595149, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_595149, "DatabaseName", newJString(DatabaseName))
  add(query_595149, "DeletionProtection", newJBool(DeletionProtection))
  add(query_595149, "Action", newJString(Action))
  add(query_595149, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_595149, "EngineVersion", newJString(EngineVersion))
  add(query_595149, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_595149, "Version", newJString(Version))
  result = call_595148.call(nil, query_595149, nil, nil, nil)

var getCreateGlobalCluster* = Call_GetCreateGlobalCluster_595128(
    name: "getCreateGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_GetCreateGlobalCluster_595129, base: "/",
    url: url_GetCreateGlobalCluster_595130, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOptionGroup_595193 = ref object of OpenApiRestCall_593421
proc url_PostCreateOptionGroup_595195(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateOptionGroup_595194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595196 = query.getOrDefault("Action")
  valid_595196 = validateParameter(valid_595196, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_595196 != nil:
    section.add "Action", valid_595196
  var valid_595197 = query.getOrDefault("Version")
  valid_595197 = validateParameter(valid_595197, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595197 != nil:
    section.add "Version", valid_595197
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595198 = header.getOrDefault("X-Amz-Date")
  valid_595198 = validateParameter(valid_595198, JString, required = false,
                                 default = nil)
  if valid_595198 != nil:
    section.add "X-Amz-Date", valid_595198
  var valid_595199 = header.getOrDefault("X-Amz-Security-Token")
  valid_595199 = validateParameter(valid_595199, JString, required = false,
                                 default = nil)
  if valid_595199 != nil:
    section.add "X-Amz-Security-Token", valid_595199
  var valid_595200 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595200 = validateParameter(valid_595200, JString, required = false,
                                 default = nil)
  if valid_595200 != nil:
    section.add "X-Amz-Content-Sha256", valid_595200
  var valid_595201 = header.getOrDefault("X-Amz-Algorithm")
  valid_595201 = validateParameter(valid_595201, JString, required = false,
                                 default = nil)
  if valid_595201 != nil:
    section.add "X-Amz-Algorithm", valid_595201
  var valid_595202 = header.getOrDefault("X-Amz-Signature")
  valid_595202 = validateParameter(valid_595202, JString, required = false,
                                 default = nil)
  if valid_595202 != nil:
    section.add "X-Amz-Signature", valid_595202
  var valid_595203 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595203 = validateParameter(valid_595203, JString, required = false,
                                 default = nil)
  if valid_595203 != nil:
    section.add "X-Amz-SignedHeaders", valid_595203
  var valid_595204 = header.getOrDefault("X-Amz-Credential")
  valid_595204 = validateParameter(valid_595204, JString, required = false,
                                 default = nil)
  if valid_595204 != nil:
    section.add "X-Amz-Credential", valid_595204
  result.add "header", section
  ## parameters in `formData` object:
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `MajorEngineVersion` field"
  var valid_595205 = formData.getOrDefault("MajorEngineVersion")
  valid_595205 = validateParameter(valid_595205, JString, required = true,
                                 default = nil)
  if valid_595205 != nil:
    section.add "MajorEngineVersion", valid_595205
  var valid_595206 = formData.getOrDefault("OptionGroupName")
  valid_595206 = validateParameter(valid_595206, JString, required = true,
                                 default = nil)
  if valid_595206 != nil:
    section.add "OptionGroupName", valid_595206
  var valid_595207 = formData.getOrDefault("Tags")
  valid_595207 = validateParameter(valid_595207, JArray, required = false,
                                 default = nil)
  if valid_595207 != nil:
    section.add "Tags", valid_595207
  var valid_595208 = formData.getOrDefault("EngineName")
  valid_595208 = validateParameter(valid_595208, JString, required = true,
                                 default = nil)
  if valid_595208 != nil:
    section.add "EngineName", valid_595208
  var valid_595209 = formData.getOrDefault("OptionGroupDescription")
  valid_595209 = validateParameter(valid_595209, JString, required = true,
                                 default = nil)
  if valid_595209 != nil:
    section.add "OptionGroupDescription", valid_595209
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595210: Call_PostCreateOptionGroup_595193; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_595210.validator(path, query, header, formData, body)
  let scheme = call_595210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595210.url(scheme.get, call_595210.host, call_595210.base,
                         call_595210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595210, url, valid)

proc call*(call_595211: Call_PostCreateOptionGroup_595193;
          MajorEngineVersion: string; OptionGroupName: string; EngineName: string;
          OptionGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Version: string (required)
  var query_595212 = newJObject()
  var formData_595213 = newJObject()
  add(formData_595213, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(formData_595213, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_595213.add "Tags", Tags
  add(query_595212, "Action", newJString(Action))
  add(formData_595213, "EngineName", newJString(EngineName))
  add(formData_595213, "OptionGroupDescription",
      newJString(OptionGroupDescription))
  add(query_595212, "Version", newJString(Version))
  result = call_595211.call(nil, query_595212, nil, formData_595213, nil)

var postCreateOptionGroup* = Call_PostCreateOptionGroup_595193(
    name: "postCreateOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_PostCreateOptionGroup_595194, base: "/",
    url: url_PostCreateOptionGroup_595195, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOptionGroup_595173 = ref object of OpenApiRestCall_593421
proc url_GetCreateOptionGroup_595175(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateOptionGroup_595174(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OptionGroupName` field"
  var valid_595176 = query.getOrDefault("OptionGroupName")
  valid_595176 = validateParameter(valid_595176, JString, required = true,
                                 default = nil)
  if valid_595176 != nil:
    section.add "OptionGroupName", valid_595176
  var valid_595177 = query.getOrDefault("Tags")
  valid_595177 = validateParameter(valid_595177, JArray, required = false,
                                 default = nil)
  if valid_595177 != nil:
    section.add "Tags", valid_595177
  var valid_595178 = query.getOrDefault("OptionGroupDescription")
  valid_595178 = validateParameter(valid_595178, JString, required = true,
                                 default = nil)
  if valid_595178 != nil:
    section.add "OptionGroupDescription", valid_595178
  var valid_595179 = query.getOrDefault("Action")
  valid_595179 = validateParameter(valid_595179, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_595179 != nil:
    section.add "Action", valid_595179
  var valid_595180 = query.getOrDefault("Version")
  valid_595180 = validateParameter(valid_595180, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595180 != nil:
    section.add "Version", valid_595180
  var valid_595181 = query.getOrDefault("EngineName")
  valid_595181 = validateParameter(valid_595181, JString, required = true,
                                 default = nil)
  if valid_595181 != nil:
    section.add "EngineName", valid_595181
  var valid_595182 = query.getOrDefault("MajorEngineVersion")
  valid_595182 = validateParameter(valid_595182, JString, required = true,
                                 default = nil)
  if valid_595182 != nil:
    section.add "MajorEngineVersion", valid_595182
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595183 = header.getOrDefault("X-Amz-Date")
  valid_595183 = validateParameter(valid_595183, JString, required = false,
                                 default = nil)
  if valid_595183 != nil:
    section.add "X-Amz-Date", valid_595183
  var valid_595184 = header.getOrDefault("X-Amz-Security-Token")
  valid_595184 = validateParameter(valid_595184, JString, required = false,
                                 default = nil)
  if valid_595184 != nil:
    section.add "X-Amz-Security-Token", valid_595184
  var valid_595185 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595185 = validateParameter(valid_595185, JString, required = false,
                                 default = nil)
  if valid_595185 != nil:
    section.add "X-Amz-Content-Sha256", valid_595185
  var valid_595186 = header.getOrDefault("X-Amz-Algorithm")
  valid_595186 = validateParameter(valid_595186, JString, required = false,
                                 default = nil)
  if valid_595186 != nil:
    section.add "X-Amz-Algorithm", valid_595186
  var valid_595187 = header.getOrDefault("X-Amz-Signature")
  valid_595187 = validateParameter(valid_595187, JString, required = false,
                                 default = nil)
  if valid_595187 != nil:
    section.add "X-Amz-Signature", valid_595187
  var valid_595188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595188 = validateParameter(valid_595188, JString, required = false,
                                 default = nil)
  if valid_595188 != nil:
    section.add "X-Amz-SignedHeaders", valid_595188
  var valid_595189 = header.getOrDefault("X-Amz-Credential")
  valid_595189 = validateParameter(valid_595189, JString, required = false,
                                 default = nil)
  if valid_595189 != nil:
    section.add "X-Amz-Credential", valid_595189
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595190: Call_GetCreateOptionGroup_595173; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_595190.validator(path, query, header, formData, body)
  let scheme = call_595190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595190.url(scheme.get, call_595190.host, call_595190.base,
                         call_595190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595190, url, valid)

proc call*(call_595191: Call_GetCreateOptionGroup_595173; OptionGroupName: string;
          OptionGroupDescription: string; EngineName: string;
          MajorEngineVersion: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  var query_595192 = newJObject()
  add(query_595192, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    query_595192.add "Tags", Tags
  add(query_595192, "OptionGroupDescription", newJString(OptionGroupDescription))
  add(query_595192, "Action", newJString(Action))
  add(query_595192, "Version", newJString(Version))
  add(query_595192, "EngineName", newJString(EngineName))
  add(query_595192, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_595191.call(nil, query_595192, nil, nil, nil)

var getCreateOptionGroup* = Call_GetCreateOptionGroup_595173(
    name: "getCreateOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_GetCreateOptionGroup_595174, base: "/",
    url: url_GetCreateOptionGroup_595175, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_595232 = ref object of OpenApiRestCall_593421
proc url_PostDeleteDBCluster_595234(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBCluster_595233(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595235 = query.getOrDefault("Action")
  valid_595235 = validateParameter(valid_595235, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_595235 != nil:
    section.add "Action", valid_595235
  var valid_595236 = query.getOrDefault("Version")
  valid_595236 = validateParameter(valid_595236, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595236 != nil:
    section.add "Version", valid_595236
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595237 = header.getOrDefault("X-Amz-Date")
  valid_595237 = validateParameter(valid_595237, JString, required = false,
                                 default = nil)
  if valid_595237 != nil:
    section.add "X-Amz-Date", valid_595237
  var valid_595238 = header.getOrDefault("X-Amz-Security-Token")
  valid_595238 = validateParameter(valid_595238, JString, required = false,
                                 default = nil)
  if valid_595238 != nil:
    section.add "X-Amz-Security-Token", valid_595238
  var valid_595239 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595239 = validateParameter(valid_595239, JString, required = false,
                                 default = nil)
  if valid_595239 != nil:
    section.add "X-Amz-Content-Sha256", valid_595239
  var valid_595240 = header.getOrDefault("X-Amz-Algorithm")
  valid_595240 = validateParameter(valid_595240, JString, required = false,
                                 default = nil)
  if valid_595240 != nil:
    section.add "X-Amz-Algorithm", valid_595240
  var valid_595241 = header.getOrDefault("X-Amz-Signature")
  valid_595241 = validateParameter(valid_595241, JString, required = false,
                                 default = nil)
  if valid_595241 != nil:
    section.add "X-Amz-Signature", valid_595241
  var valid_595242 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595242 = validateParameter(valid_595242, JString, required = false,
                                 default = nil)
  if valid_595242 != nil:
    section.add "X-Amz-SignedHeaders", valid_595242
  var valid_595243 = header.getOrDefault("X-Amz-Credential")
  valid_595243 = validateParameter(valid_595243, JString, required = false,
                                 default = nil)
  if valid_595243 != nil:
    section.add "X-Amz-Credential", valid_595243
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  section = newJObject()
  var valid_595244 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_595244 = validateParameter(valid_595244, JString, required = false,
                                 default = nil)
  if valid_595244 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_595244
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_595245 = formData.getOrDefault("DBClusterIdentifier")
  valid_595245 = validateParameter(valid_595245, JString, required = true,
                                 default = nil)
  if valid_595245 != nil:
    section.add "DBClusterIdentifier", valid_595245
  var valid_595246 = formData.getOrDefault("SkipFinalSnapshot")
  valid_595246 = validateParameter(valid_595246, JBool, required = false, default = nil)
  if valid_595246 != nil:
    section.add "SkipFinalSnapshot", valid_595246
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595247: Call_PostDeleteDBCluster_595232; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595247.validator(path, query, header, formData, body)
  let scheme = call_595247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595247.url(scheme.get, call_595247.host, call_595247.base,
                         call_595247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595247, url, valid)

proc call*(call_595248: Call_PostDeleteDBCluster_595232;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  var query_595249 = newJObject()
  var formData_595250 = newJObject()
  add(formData_595250, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_595249, "Action", newJString(Action))
  add(formData_595250, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595249, "Version", newJString(Version))
  add(formData_595250, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_595248.call(nil, query_595249, nil, formData_595250, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_595232(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_595233, base: "/",
    url: url_PostDeleteDBCluster_595234, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_595214 = ref object of OpenApiRestCall_593421
proc url_GetDeleteDBCluster_595216(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBCluster_595215(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: JString (required)
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_595217 = query.getOrDefault("DBClusterIdentifier")
  valid_595217 = validateParameter(valid_595217, JString, required = true,
                                 default = nil)
  if valid_595217 != nil:
    section.add "DBClusterIdentifier", valid_595217
  var valid_595218 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_595218 = validateParameter(valid_595218, JString, required = false,
                                 default = nil)
  if valid_595218 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_595218
  var valid_595219 = query.getOrDefault("Action")
  valid_595219 = validateParameter(valid_595219, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_595219 != nil:
    section.add "Action", valid_595219
  var valid_595220 = query.getOrDefault("SkipFinalSnapshot")
  valid_595220 = validateParameter(valid_595220, JBool, required = false, default = nil)
  if valid_595220 != nil:
    section.add "SkipFinalSnapshot", valid_595220
  var valid_595221 = query.getOrDefault("Version")
  valid_595221 = validateParameter(valid_595221, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595221 != nil:
    section.add "Version", valid_595221
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595222 = header.getOrDefault("X-Amz-Date")
  valid_595222 = validateParameter(valid_595222, JString, required = false,
                                 default = nil)
  if valid_595222 != nil:
    section.add "X-Amz-Date", valid_595222
  var valid_595223 = header.getOrDefault("X-Amz-Security-Token")
  valid_595223 = validateParameter(valid_595223, JString, required = false,
                                 default = nil)
  if valid_595223 != nil:
    section.add "X-Amz-Security-Token", valid_595223
  var valid_595224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595224 = validateParameter(valid_595224, JString, required = false,
                                 default = nil)
  if valid_595224 != nil:
    section.add "X-Amz-Content-Sha256", valid_595224
  var valid_595225 = header.getOrDefault("X-Amz-Algorithm")
  valid_595225 = validateParameter(valid_595225, JString, required = false,
                                 default = nil)
  if valid_595225 != nil:
    section.add "X-Amz-Algorithm", valid_595225
  var valid_595226 = header.getOrDefault("X-Amz-Signature")
  valid_595226 = validateParameter(valid_595226, JString, required = false,
                                 default = nil)
  if valid_595226 != nil:
    section.add "X-Amz-Signature", valid_595226
  var valid_595227 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595227 = validateParameter(valid_595227, JString, required = false,
                                 default = nil)
  if valid_595227 != nil:
    section.add "X-Amz-SignedHeaders", valid_595227
  var valid_595228 = header.getOrDefault("X-Amz-Credential")
  valid_595228 = validateParameter(valid_595228, JString, required = false,
                                 default = nil)
  if valid_595228 != nil:
    section.add "X-Amz-Credential", valid_595228
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595229: Call_GetDeleteDBCluster_595214; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595229.validator(path, query, header, formData, body)
  let scheme = call_595229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595229.url(scheme.get, call_595229.host, call_595229.base,
                         call_595229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595229, url, valid)

proc call*(call_595230: Call_GetDeleteDBCluster_595214;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; SkipFinalSnapshot: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Version: string (required)
  var query_595231 = newJObject()
  add(query_595231, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595231, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_595231, "Action", newJString(Action))
  add(query_595231, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_595231, "Version", newJString(Version))
  result = call_595230.call(nil, query_595231, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_595214(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_595215,
    base: "/", url: url_GetDeleteDBCluster_595216,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterEndpoint_595267 = ref object of OpenApiRestCall_593421
proc url_PostDeleteDBClusterEndpoint_595269(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterEndpoint_595268(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595270 = query.getOrDefault("Action")
  valid_595270 = validateParameter(valid_595270, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_595270 != nil:
    section.add "Action", valid_595270
  var valid_595271 = query.getOrDefault("Version")
  valid_595271 = validateParameter(valid_595271, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595271 != nil:
    section.add "Version", valid_595271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595272 = header.getOrDefault("X-Amz-Date")
  valid_595272 = validateParameter(valid_595272, JString, required = false,
                                 default = nil)
  if valid_595272 != nil:
    section.add "X-Amz-Date", valid_595272
  var valid_595273 = header.getOrDefault("X-Amz-Security-Token")
  valid_595273 = validateParameter(valid_595273, JString, required = false,
                                 default = nil)
  if valid_595273 != nil:
    section.add "X-Amz-Security-Token", valid_595273
  var valid_595274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595274 = validateParameter(valid_595274, JString, required = false,
                                 default = nil)
  if valid_595274 != nil:
    section.add "X-Amz-Content-Sha256", valid_595274
  var valid_595275 = header.getOrDefault("X-Amz-Algorithm")
  valid_595275 = validateParameter(valid_595275, JString, required = false,
                                 default = nil)
  if valid_595275 != nil:
    section.add "X-Amz-Algorithm", valid_595275
  var valid_595276 = header.getOrDefault("X-Amz-Signature")
  valid_595276 = validateParameter(valid_595276, JString, required = false,
                                 default = nil)
  if valid_595276 != nil:
    section.add "X-Amz-Signature", valid_595276
  var valid_595277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595277 = validateParameter(valid_595277, JString, required = false,
                                 default = nil)
  if valid_595277 != nil:
    section.add "X-Amz-SignedHeaders", valid_595277
  var valid_595278 = header.getOrDefault("X-Amz-Credential")
  valid_595278 = validateParameter(valid_595278, JString, required = false,
                                 default = nil)
  if valid_595278 != nil:
    section.add "X-Amz-Credential", valid_595278
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_595279 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_595279 = validateParameter(valid_595279, JString, required = true,
                                 default = nil)
  if valid_595279 != nil:
    section.add "DBClusterEndpointIdentifier", valid_595279
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595280: Call_PostDeleteDBClusterEndpoint_595267; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595280.validator(path, query, header, formData, body)
  let scheme = call_595280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595280.url(scheme.get, call_595280.host, call_595280.base,
                         call_595280.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595280, url, valid)

proc call*(call_595281: Call_PostDeleteDBClusterEndpoint_595267;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_595282 = newJObject()
  var formData_595283 = newJObject()
  add(query_595282, "Action", newJString(Action))
  add(formData_595283, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_595282, "Version", newJString(Version))
  result = call_595281.call(nil, query_595282, nil, formData_595283, nil)

var postDeleteDBClusterEndpoint* = Call_PostDeleteDBClusterEndpoint_595267(
    name: "postDeleteDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_PostDeleteDBClusterEndpoint_595268, base: "/",
    url: url_PostDeleteDBClusterEndpoint_595269,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterEndpoint_595251 = ref object of OpenApiRestCall_593421
proc url_GetDeleteDBClusterEndpoint_595253(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterEndpoint_595252(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595254 = query.getOrDefault("Action")
  valid_595254 = validateParameter(valid_595254, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_595254 != nil:
    section.add "Action", valid_595254
  var valid_595255 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_595255 = validateParameter(valid_595255, JString, required = true,
                                 default = nil)
  if valid_595255 != nil:
    section.add "DBClusterEndpointIdentifier", valid_595255
  var valid_595256 = query.getOrDefault("Version")
  valid_595256 = validateParameter(valid_595256, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595256 != nil:
    section.add "Version", valid_595256
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595257 = header.getOrDefault("X-Amz-Date")
  valid_595257 = validateParameter(valid_595257, JString, required = false,
                                 default = nil)
  if valid_595257 != nil:
    section.add "X-Amz-Date", valid_595257
  var valid_595258 = header.getOrDefault("X-Amz-Security-Token")
  valid_595258 = validateParameter(valid_595258, JString, required = false,
                                 default = nil)
  if valid_595258 != nil:
    section.add "X-Amz-Security-Token", valid_595258
  var valid_595259 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595259 = validateParameter(valid_595259, JString, required = false,
                                 default = nil)
  if valid_595259 != nil:
    section.add "X-Amz-Content-Sha256", valid_595259
  var valid_595260 = header.getOrDefault("X-Amz-Algorithm")
  valid_595260 = validateParameter(valid_595260, JString, required = false,
                                 default = nil)
  if valid_595260 != nil:
    section.add "X-Amz-Algorithm", valid_595260
  var valid_595261 = header.getOrDefault("X-Amz-Signature")
  valid_595261 = validateParameter(valid_595261, JString, required = false,
                                 default = nil)
  if valid_595261 != nil:
    section.add "X-Amz-Signature", valid_595261
  var valid_595262 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595262 = validateParameter(valid_595262, JString, required = false,
                                 default = nil)
  if valid_595262 != nil:
    section.add "X-Amz-SignedHeaders", valid_595262
  var valid_595263 = header.getOrDefault("X-Amz-Credential")
  valid_595263 = validateParameter(valid_595263, JString, required = false,
                                 default = nil)
  if valid_595263 != nil:
    section.add "X-Amz-Credential", valid_595263
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595264: Call_GetDeleteDBClusterEndpoint_595251; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595264.validator(path, query, header, formData, body)
  let scheme = call_595264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595264.url(scheme.get, call_595264.host, call_595264.base,
                         call_595264.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595264, url, valid)

proc call*(call_595265: Call_GetDeleteDBClusterEndpoint_595251;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_595266 = newJObject()
  add(query_595266, "Action", newJString(Action))
  add(query_595266, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_595266, "Version", newJString(Version))
  result = call_595265.call(nil, query_595266, nil, nil, nil)

var getDeleteDBClusterEndpoint* = Call_GetDeleteDBClusterEndpoint_595251(
    name: "getDeleteDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_GetDeleteDBClusterEndpoint_595252, base: "/",
    url: url_GetDeleteDBClusterEndpoint_595253,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_595300 = ref object of OpenApiRestCall_593421
proc url_PostDeleteDBClusterParameterGroup_595302(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_595301(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595303 = query.getOrDefault("Action")
  valid_595303 = validateParameter(valid_595303, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_595303 != nil:
    section.add "Action", valid_595303
  var valid_595304 = query.getOrDefault("Version")
  valid_595304 = validateParameter(valid_595304, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595304 != nil:
    section.add "Version", valid_595304
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595305 = header.getOrDefault("X-Amz-Date")
  valid_595305 = validateParameter(valid_595305, JString, required = false,
                                 default = nil)
  if valid_595305 != nil:
    section.add "X-Amz-Date", valid_595305
  var valid_595306 = header.getOrDefault("X-Amz-Security-Token")
  valid_595306 = validateParameter(valid_595306, JString, required = false,
                                 default = nil)
  if valid_595306 != nil:
    section.add "X-Amz-Security-Token", valid_595306
  var valid_595307 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595307 = validateParameter(valid_595307, JString, required = false,
                                 default = nil)
  if valid_595307 != nil:
    section.add "X-Amz-Content-Sha256", valid_595307
  var valid_595308 = header.getOrDefault("X-Amz-Algorithm")
  valid_595308 = validateParameter(valid_595308, JString, required = false,
                                 default = nil)
  if valid_595308 != nil:
    section.add "X-Amz-Algorithm", valid_595308
  var valid_595309 = header.getOrDefault("X-Amz-Signature")
  valid_595309 = validateParameter(valid_595309, JString, required = false,
                                 default = nil)
  if valid_595309 != nil:
    section.add "X-Amz-Signature", valid_595309
  var valid_595310 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595310 = validateParameter(valid_595310, JString, required = false,
                                 default = nil)
  if valid_595310 != nil:
    section.add "X-Amz-SignedHeaders", valid_595310
  var valid_595311 = header.getOrDefault("X-Amz-Credential")
  valid_595311 = validateParameter(valid_595311, JString, required = false,
                                 default = nil)
  if valid_595311 != nil:
    section.add "X-Amz-Credential", valid_595311
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_595312 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_595312 = validateParameter(valid_595312, JString, required = true,
                                 default = nil)
  if valid_595312 != nil:
    section.add "DBClusterParameterGroupName", valid_595312
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595313: Call_PostDeleteDBClusterParameterGroup_595300;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595313.validator(path, query, header, formData, body)
  let scheme = call_595313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595313.url(scheme.get, call_595313.host, call_595313.base,
                         call_595313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595313, url, valid)

proc call*(call_595314: Call_PostDeleteDBClusterParameterGroup_595300;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_595315 = newJObject()
  var formData_595316 = newJObject()
  add(query_595315, "Action", newJString(Action))
  add(formData_595316, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_595315, "Version", newJString(Version))
  result = call_595314.call(nil, query_595315, nil, formData_595316, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_595300(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_595301, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_595302,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_595284 = ref object of OpenApiRestCall_593421
proc url_GetDeleteDBClusterParameterGroup_595286(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_595285(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_595287 = query.getOrDefault("DBClusterParameterGroupName")
  valid_595287 = validateParameter(valid_595287, JString, required = true,
                                 default = nil)
  if valid_595287 != nil:
    section.add "DBClusterParameterGroupName", valid_595287
  var valid_595288 = query.getOrDefault("Action")
  valid_595288 = validateParameter(valid_595288, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_595288 != nil:
    section.add "Action", valid_595288
  var valid_595289 = query.getOrDefault("Version")
  valid_595289 = validateParameter(valid_595289, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595289 != nil:
    section.add "Version", valid_595289
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595290 = header.getOrDefault("X-Amz-Date")
  valid_595290 = validateParameter(valid_595290, JString, required = false,
                                 default = nil)
  if valid_595290 != nil:
    section.add "X-Amz-Date", valid_595290
  var valid_595291 = header.getOrDefault("X-Amz-Security-Token")
  valid_595291 = validateParameter(valid_595291, JString, required = false,
                                 default = nil)
  if valid_595291 != nil:
    section.add "X-Amz-Security-Token", valid_595291
  var valid_595292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595292 = validateParameter(valid_595292, JString, required = false,
                                 default = nil)
  if valid_595292 != nil:
    section.add "X-Amz-Content-Sha256", valid_595292
  var valid_595293 = header.getOrDefault("X-Amz-Algorithm")
  valid_595293 = validateParameter(valid_595293, JString, required = false,
                                 default = nil)
  if valid_595293 != nil:
    section.add "X-Amz-Algorithm", valid_595293
  var valid_595294 = header.getOrDefault("X-Amz-Signature")
  valid_595294 = validateParameter(valid_595294, JString, required = false,
                                 default = nil)
  if valid_595294 != nil:
    section.add "X-Amz-Signature", valid_595294
  var valid_595295 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595295 = validateParameter(valid_595295, JString, required = false,
                                 default = nil)
  if valid_595295 != nil:
    section.add "X-Amz-SignedHeaders", valid_595295
  var valid_595296 = header.getOrDefault("X-Amz-Credential")
  valid_595296 = validateParameter(valid_595296, JString, required = false,
                                 default = nil)
  if valid_595296 != nil:
    section.add "X-Amz-Credential", valid_595296
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595297: Call_GetDeleteDBClusterParameterGroup_595284;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595297.validator(path, query, header, formData, body)
  let scheme = call_595297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595297.url(scheme.get, call_595297.host, call_595297.base,
                         call_595297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595297, url, valid)

proc call*(call_595298: Call_GetDeleteDBClusterParameterGroup_595284;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595299 = newJObject()
  add(query_595299, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_595299, "Action", newJString(Action))
  add(query_595299, "Version", newJString(Version))
  result = call_595298.call(nil, query_595299, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_595284(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_595285, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_595286,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_595333 = ref object of OpenApiRestCall_593421
proc url_PostDeleteDBClusterSnapshot_595335(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_595334(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595336 = query.getOrDefault("Action")
  valid_595336 = validateParameter(valid_595336, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_595336 != nil:
    section.add "Action", valid_595336
  var valid_595337 = query.getOrDefault("Version")
  valid_595337 = validateParameter(valid_595337, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595337 != nil:
    section.add "Version", valid_595337
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595338 = header.getOrDefault("X-Amz-Date")
  valid_595338 = validateParameter(valid_595338, JString, required = false,
                                 default = nil)
  if valid_595338 != nil:
    section.add "X-Amz-Date", valid_595338
  var valid_595339 = header.getOrDefault("X-Amz-Security-Token")
  valid_595339 = validateParameter(valid_595339, JString, required = false,
                                 default = nil)
  if valid_595339 != nil:
    section.add "X-Amz-Security-Token", valid_595339
  var valid_595340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595340 = validateParameter(valid_595340, JString, required = false,
                                 default = nil)
  if valid_595340 != nil:
    section.add "X-Amz-Content-Sha256", valid_595340
  var valid_595341 = header.getOrDefault("X-Amz-Algorithm")
  valid_595341 = validateParameter(valid_595341, JString, required = false,
                                 default = nil)
  if valid_595341 != nil:
    section.add "X-Amz-Algorithm", valid_595341
  var valid_595342 = header.getOrDefault("X-Amz-Signature")
  valid_595342 = validateParameter(valid_595342, JString, required = false,
                                 default = nil)
  if valid_595342 != nil:
    section.add "X-Amz-Signature", valid_595342
  var valid_595343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595343 = validateParameter(valid_595343, JString, required = false,
                                 default = nil)
  if valid_595343 != nil:
    section.add "X-Amz-SignedHeaders", valid_595343
  var valid_595344 = header.getOrDefault("X-Amz-Credential")
  valid_595344 = validateParameter(valid_595344, JString, required = false,
                                 default = nil)
  if valid_595344 != nil:
    section.add "X-Amz-Credential", valid_595344
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_595345 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_595345 = validateParameter(valid_595345, JString, required = true,
                                 default = nil)
  if valid_595345 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_595345
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595346: Call_PostDeleteDBClusterSnapshot_595333; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595346.validator(path, query, header, formData, body)
  let scheme = call_595346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595346.url(scheme.get, call_595346.host, call_595346.base,
                         call_595346.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595346, url, valid)

proc call*(call_595347: Call_PostDeleteDBClusterSnapshot_595333;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595348 = newJObject()
  var formData_595349 = newJObject()
  add(formData_595349, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_595348, "Action", newJString(Action))
  add(query_595348, "Version", newJString(Version))
  result = call_595347.call(nil, query_595348, nil, formData_595349, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_595333(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_595334, base: "/",
    url: url_PostDeleteDBClusterSnapshot_595335,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_595317 = ref object of OpenApiRestCall_593421
proc url_GetDeleteDBClusterSnapshot_595319(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_595318(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_595320 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_595320 = validateParameter(valid_595320, JString, required = true,
                                 default = nil)
  if valid_595320 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_595320
  var valid_595321 = query.getOrDefault("Action")
  valid_595321 = validateParameter(valid_595321, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_595321 != nil:
    section.add "Action", valid_595321
  var valid_595322 = query.getOrDefault("Version")
  valid_595322 = validateParameter(valid_595322, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595322 != nil:
    section.add "Version", valid_595322
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595323 = header.getOrDefault("X-Amz-Date")
  valid_595323 = validateParameter(valid_595323, JString, required = false,
                                 default = nil)
  if valid_595323 != nil:
    section.add "X-Amz-Date", valid_595323
  var valid_595324 = header.getOrDefault("X-Amz-Security-Token")
  valid_595324 = validateParameter(valid_595324, JString, required = false,
                                 default = nil)
  if valid_595324 != nil:
    section.add "X-Amz-Security-Token", valid_595324
  var valid_595325 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595325 = validateParameter(valid_595325, JString, required = false,
                                 default = nil)
  if valid_595325 != nil:
    section.add "X-Amz-Content-Sha256", valid_595325
  var valid_595326 = header.getOrDefault("X-Amz-Algorithm")
  valid_595326 = validateParameter(valid_595326, JString, required = false,
                                 default = nil)
  if valid_595326 != nil:
    section.add "X-Amz-Algorithm", valid_595326
  var valid_595327 = header.getOrDefault("X-Amz-Signature")
  valid_595327 = validateParameter(valid_595327, JString, required = false,
                                 default = nil)
  if valid_595327 != nil:
    section.add "X-Amz-Signature", valid_595327
  var valid_595328 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595328 = validateParameter(valid_595328, JString, required = false,
                                 default = nil)
  if valid_595328 != nil:
    section.add "X-Amz-SignedHeaders", valid_595328
  var valid_595329 = header.getOrDefault("X-Amz-Credential")
  valid_595329 = validateParameter(valid_595329, JString, required = false,
                                 default = nil)
  if valid_595329 != nil:
    section.add "X-Amz-Credential", valid_595329
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595330: Call_GetDeleteDBClusterSnapshot_595317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595330.validator(path, query, header, formData, body)
  let scheme = call_595330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595330.url(scheme.get, call_595330.host, call_595330.base,
                         call_595330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595330, url, valid)

proc call*(call_595331: Call_GetDeleteDBClusterSnapshot_595317;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595332 = newJObject()
  add(query_595332, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_595332, "Action", newJString(Action))
  add(query_595332, "Version", newJString(Version))
  result = call_595331.call(nil, query_595332, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_595317(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_595318, base: "/",
    url: url_GetDeleteDBClusterSnapshot_595319,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_595369 = ref object of OpenApiRestCall_593421
proc url_PostDeleteDBInstance_595371(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBInstance_595370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595372 = query.getOrDefault("Action")
  valid_595372 = validateParameter(valid_595372, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_595372 != nil:
    section.add "Action", valid_595372
  var valid_595373 = query.getOrDefault("Version")
  valid_595373 = validateParameter(valid_595373, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595373 != nil:
    section.add "Version", valid_595373
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595374 = header.getOrDefault("X-Amz-Date")
  valid_595374 = validateParameter(valid_595374, JString, required = false,
                                 default = nil)
  if valid_595374 != nil:
    section.add "X-Amz-Date", valid_595374
  var valid_595375 = header.getOrDefault("X-Amz-Security-Token")
  valid_595375 = validateParameter(valid_595375, JString, required = false,
                                 default = nil)
  if valid_595375 != nil:
    section.add "X-Amz-Security-Token", valid_595375
  var valid_595376 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595376 = validateParameter(valid_595376, JString, required = false,
                                 default = nil)
  if valid_595376 != nil:
    section.add "X-Amz-Content-Sha256", valid_595376
  var valid_595377 = header.getOrDefault("X-Amz-Algorithm")
  valid_595377 = validateParameter(valid_595377, JString, required = false,
                                 default = nil)
  if valid_595377 != nil:
    section.add "X-Amz-Algorithm", valid_595377
  var valid_595378 = header.getOrDefault("X-Amz-Signature")
  valid_595378 = validateParameter(valid_595378, JString, required = false,
                                 default = nil)
  if valid_595378 != nil:
    section.add "X-Amz-Signature", valid_595378
  var valid_595379 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595379 = validateParameter(valid_595379, JString, required = false,
                                 default = nil)
  if valid_595379 != nil:
    section.add "X-Amz-SignedHeaders", valid_595379
  var valid_595380 = header.getOrDefault("X-Amz-Credential")
  valid_595380 = validateParameter(valid_595380, JString, required = false,
                                 default = nil)
  if valid_595380 != nil:
    section.add "X-Amz-Credential", valid_595380
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595381 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595381 = validateParameter(valid_595381, JString, required = true,
                                 default = nil)
  if valid_595381 != nil:
    section.add "DBInstanceIdentifier", valid_595381
  var valid_595382 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_595382 = validateParameter(valid_595382, JString, required = false,
                                 default = nil)
  if valid_595382 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_595382
  var valid_595383 = formData.getOrDefault("DeleteAutomatedBackups")
  valid_595383 = validateParameter(valid_595383, JBool, required = false, default = nil)
  if valid_595383 != nil:
    section.add "DeleteAutomatedBackups", valid_595383
  var valid_595384 = formData.getOrDefault("SkipFinalSnapshot")
  valid_595384 = validateParameter(valid_595384, JBool, required = false, default = nil)
  if valid_595384 != nil:
    section.add "SkipFinalSnapshot", valid_595384
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595385: Call_PostDeleteDBInstance_595369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_595385.validator(path, query, header, formData, body)
  let scheme = call_595385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595385.url(scheme.get, call_595385.host, call_595385.base,
                         call_595385.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595385, url, valid)

proc call*(call_595386: Call_PostDeleteDBInstance_595369;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; DeleteAutomatedBackups: bool = false;
          Version: string = "2014-10-31"; SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  var query_595387 = newJObject()
  var formData_595388 = newJObject()
  add(formData_595388, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_595388, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_595387, "Action", newJString(Action))
  add(formData_595388, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_595387, "Version", newJString(Version))
  add(formData_595388, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_595386.call(nil, query_595387, nil, formData_595388, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_595369(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_595370, base: "/",
    url: url_PostDeleteDBInstance_595371, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_595350 = ref object of OpenApiRestCall_593421
proc url_GetDeleteDBInstance_595352(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBInstance_595351(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: JString (required)
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  section = newJObject()
  var valid_595353 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_595353 = validateParameter(valid_595353, JString, required = false,
                                 default = nil)
  if valid_595353 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_595353
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595354 = query.getOrDefault("Action")
  valid_595354 = validateParameter(valid_595354, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_595354 != nil:
    section.add "Action", valid_595354
  var valid_595355 = query.getOrDefault("DeleteAutomatedBackups")
  valid_595355 = validateParameter(valid_595355, JBool, required = false, default = nil)
  if valid_595355 != nil:
    section.add "DeleteAutomatedBackups", valid_595355
  var valid_595356 = query.getOrDefault("SkipFinalSnapshot")
  valid_595356 = validateParameter(valid_595356, JBool, required = false, default = nil)
  if valid_595356 != nil:
    section.add "SkipFinalSnapshot", valid_595356
  var valid_595357 = query.getOrDefault("Version")
  valid_595357 = validateParameter(valid_595357, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595357 != nil:
    section.add "Version", valid_595357
  var valid_595358 = query.getOrDefault("DBInstanceIdentifier")
  valid_595358 = validateParameter(valid_595358, JString, required = true,
                                 default = nil)
  if valid_595358 != nil:
    section.add "DBInstanceIdentifier", valid_595358
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595359 = header.getOrDefault("X-Amz-Date")
  valid_595359 = validateParameter(valid_595359, JString, required = false,
                                 default = nil)
  if valid_595359 != nil:
    section.add "X-Amz-Date", valid_595359
  var valid_595360 = header.getOrDefault("X-Amz-Security-Token")
  valid_595360 = validateParameter(valid_595360, JString, required = false,
                                 default = nil)
  if valid_595360 != nil:
    section.add "X-Amz-Security-Token", valid_595360
  var valid_595361 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595361 = validateParameter(valid_595361, JString, required = false,
                                 default = nil)
  if valid_595361 != nil:
    section.add "X-Amz-Content-Sha256", valid_595361
  var valid_595362 = header.getOrDefault("X-Amz-Algorithm")
  valid_595362 = validateParameter(valid_595362, JString, required = false,
                                 default = nil)
  if valid_595362 != nil:
    section.add "X-Amz-Algorithm", valid_595362
  var valid_595363 = header.getOrDefault("X-Amz-Signature")
  valid_595363 = validateParameter(valid_595363, JString, required = false,
                                 default = nil)
  if valid_595363 != nil:
    section.add "X-Amz-Signature", valid_595363
  var valid_595364 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595364 = validateParameter(valid_595364, JString, required = false,
                                 default = nil)
  if valid_595364 != nil:
    section.add "X-Amz-SignedHeaders", valid_595364
  var valid_595365 = header.getOrDefault("X-Amz-Credential")
  valid_595365 = validateParameter(valid_595365, JString, required = false,
                                 default = nil)
  if valid_595365 != nil:
    section.add "X-Amz-Credential", valid_595365
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595366: Call_GetDeleteDBInstance_595350; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_595366.validator(path, query, header, formData, body)
  let scheme = call_595366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595366.url(scheme.get, call_595366.host, call_595366.base,
                         call_595366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595366, url, valid)

proc call*(call_595367: Call_GetDeleteDBInstance_595350;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; DeleteAutomatedBackups: bool = false;
          SkipFinalSnapshot: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  var query_595368 = newJObject()
  add(query_595368, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_595368, "Action", newJString(Action))
  add(query_595368, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_595368, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_595368, "Version", newJString(Version))
  add(query_595368, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_595367.call(nil, query_595368, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_595350(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_595351, base: "/",
    url: url_GetDeleteDBInstance_595352, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstanceAutomatedBackup_595405 = ref object of OpenApiRestCall_593421
proc url_PostDeleteDBInstanceAutomatedBackup_595407(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBInstanceAutomatedBackup_595406(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595408 = query.getOrDefault("Action")
  valid_595408 = validateParameter(valid_595408, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_595408 != nil:
    section.add "Action", valid_595408
  var valid_595409 = query.getOrDefault("Version")
  valid_595409 = validateParameter(valid_595409, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595409 != nil:
    section.add "Version", valid_595409
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595410 = header.getOrDefault("X-Amz-Date")
  valid_595410 = validateParameter(valid_595410, JString, required = false,
                                 default = nil)
  if valid_595410 != nil:
    section.add "X-Amz-Date", valid_595410
  var valid_595411 = header.getOrDefault("X-Amz-Security-Token")
  valid_595411 = validateParameter(valid_595411, JString, required = false,
                                 default = nil)
  if valid_595411 != nil:
    section.add "X-Amz-Security-Token", valid_595411
  var valid_595412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595412 = validateParameter(valid_595412, JString, required = false,
                                 default = nil)
  if valid_595412 != nil:
    section.add "X-Amz-Content-Sha256", valid_595412
  var valid_595413 = header.getOrDefault("X-Amz-Algorithm")
  valid_595413 = validateParameter(valid_595413, JString, required = false,
                                 default = nil)
  if valid_595413 != nil:
    section.add "X-Amz-Algorithm", valid_595413
  var valid_595414 = header.getOrDefault("X-Amz-Signature")
  valid_595414 = validateParameter(valid_595414, JString, required = false,
                                 default = nil)
  if valid_595414 != nil:
    section.add "X-Amz-Signature", valid_595414
  var valid_595415 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595415 = validateParameter(valid_595415, JString, required = false,
                                 default = nil)
  if valid_595415 != nil:
    section.add "X-Amz-SignedHeaders", valid_595415
  var valid_595416 = header.getOrDefault("X-Amz-Credential")
  valid_595416 = validateParameter(valid_595416, JString, required = false,
                                 default = nil)
  if valid_595416 != nil:
    section.add "X-Amz-Credential", valid_595416
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbiResourceId` field"
  var valid_595417 = formData.getOrDefault("DbiResourceId")
  valid_595417 = validateParameter(valid_595417, JString, required = true,
                                 default = nil)
  if valid_595417 != nil:
    section.add "DbiResourceId", valid_595417
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595418: Call_PostDeleteDBInstanceAutomatedBackup_595405;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_595418.validator(path, query, header, formData, body)
  let scheme = call_595418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595418.url(scheme.get, call_595418.host, call_595418.base,
                         call_595418.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595418, url, valid)

proc call*(call_595419: Call_PostDeleteDBInstanceAutomatedBackup_595405;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595420 = newJObject()
  var formData_595421 = newJObject()
  add(formData_595421, "DbiResourceId", newJString(DbiResourceId))
  add(query_595420, "Action", newJString(Action))
  add(query_595420, "Version", newJString(Version))
  result = call_595419.call(nil, query_595420, nil, formData_595421, nil)

var postDeleteDBInstanceAutomatedBackup* = Call_PostDeleteDBInstanceAutomatedBackup_595405(
    name: "postDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_PostDeleteDBInstanceAutomatedBackup_595406, base: "/",
    url: url_PostDeleteDBInstanceAutomatedBackup_595407,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstanceAutomatedBackup_595389 = ref object of OpenApiRestCall_593421
proc url_GetDeleteDBInstanceAutomatedBackup_595391(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBInstanceAutomatedBackup_595390(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DbiResourceId` field"
  var valid_595392 = query.getOrDefault("DbiResourceId")
  valid_595392 = validateParameter(valid_595392, JString, required = true,
                                 default = nil)
  if valid_595392 != nil:
    section.add "DbiResourceId", valid_595392
  var valid_595393 = query.getOrDefault("Action")
  valid_595393 = validateParameter(valid_595393, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_595393 != nil:
    section.add "Action", valid_595393
  var valid_595394 = query.getOrDefault("Version")
  valid_595394 = validateParameter(valid_595394, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595394 != nil:
    section.add "Version", valid_595394
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595395 = header.getOrDefault("X-Amz-Date")
  valid_595395 = validateParameter(valid_595395, JString, required = false,
                                 default = nil)
  if valid_595395 != nil:
    section.add "X-Amz-Date", valid_595395
  var valid_595396 = header.getOrDefault("X-Amz-Security-Token")
  valid_595396 = validateParameter(valid_595396, JString, required = false,
                                 default = nil)
  if valid_595396 != nil:
    section.add "X-Amz-Security-Token", valid_595396
  var valid_595397 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595397 = validateParameter(valid_595397, JString, required = false,
                                 default = nil)
  if valid_595397 != nil:
    section.add "X-Amz-Content-Sha256", valid_595397
  var valid_595398 = header.getOrDefault("X-Amz-Algorithm")
  valid_595398 = validateParameter(valid_595398, JString, required = false,
                                 default = nil)
  if valid_595398 != nil:
    section.add "X-Amz-Algorithm", valid_595398
  var valid_595399 = header.getOrDefault("X-Amz-Signature")
  valid_595399 = validateParameter(valid_595399, JString, required = false,
                                 default = nil)
  if valid_595399 != nil:
    section.add "X-Amz-Signature", valid_595399
  var valid_595400 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595400 = validateParameter(valid_595400, JString, required = false,
                                 default = nil)
  if valid_595400 != nil:
    section.add "X-Amz-SignedHeaders", valid_595400
  var valid_595401 = header.getOrDefault("X-Amz-Credential")
  valid_595401 = validateParameter(valid_595401, JString, required = false,
                                 default = nil)
  if valid_595401 != nil:
    section.add "X-Amz-Credential", valid_595401
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595402: Call_GetDeleteDBInstanceAutomatedBackup_595389;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_595402.validator(path, query, header, formData, body)
  let scheme = call_595402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595402.url(scheme.get, call_595402.host, call_595402.base,
                         call_595402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595402, url, valid)

proc call*(call_595403: Call_GetDeleteDBInstanceAutomatedBackup_595389;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595404 = newJObject()
  add(query_595404, "DbiResourceId", newJString(DbiResourceId))
  add(query_595404, "Action", newJString(Action))
  add(query_595404, "Version", newJString(Version))
  result = call_595403.call(nil, query_595404, nil, nil, nil)

var getDeleteDBInstanceAutomatedBackup* = Call_GetDeleteDBInstanceAutomatedBackup_595389(
    name: "getDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_GetDeleteDBInstanceAutomatedBackup_595390, base: "/",
    url: url_GetDeleteDBInstanceAutomatedBackup_595391,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_595438 = ref object of OpenApiRestCall_593421
proc url_PostDeleteDBParameterGroup_595440(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBParameterGroup_595439(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595441 = query.getOrDefault("Action")
  valid_595441 = validateParameter(valid_595441, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_595441 != nil:
    section.add "Action", valid_595441
  var valid_595442 = query.getOrDefault("Version")
  valid_595442 = validateParameter(valid_595442, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595442 != nil:
    section.add "Version", valid_595442
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595443 = header.getOrDefault("X-Amz-Date")
  valid_595443 = validateParameter(valid_595443, JString, required = false,
                                 default = nil)
  if valid_595443 != nil:
    section.add "X-Amz-Date", valid_595443
  var valid_595444 = header.getOrDefault("X-Amz-Security-Token")
  valid_595444 = validateParameter(valid_595444, JString, required = false,
                                 default = nil)
  if valid_595444 != nil:
    section.add "X-Amz-Security-Token", valid_595444
  var valid_595445 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595445 = validateParameter(valid_595445, JString, required = false,
                                 default = nil)
  if valid_595445 != nil:
    section.add "X-Amz-Content-Sha256", valid_595445
  var valid_595446 = header.getOrDefault("X-Amz-Algorithm")
  valid_595446 = validateParameter(valid_595446, JString, required = false,
                                 default = nil)
  if valid_595446 != nil:
    section.add "X-Amz-Algorithm", valid_595446
  var valid_595447 = header.getOrDefault("X-Amz-Signature")
  valid_595447 = validateParameter(valid_595447, JString, required = false,
                                 default = nil)
  if valid_595447 != nil:
    section.add "X-Amz-Signature", valid_595447
  var valid_595448 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595448 = validateParameter(valid_595448, JString, required = false,
                                 default = nil)
  if valid_595448 != nil:
    section.add "X-Amz-SignedHeaders", valid_595448
  var valid_595449 = header.getOrDefault("X-Amz-Credential")
  valid_595449 = validateParameter(valid_595449, JString, required = false,
                                 default = nil)
  if valid_595449 != nil:
    section.add "X-Amz-Credential", valid_595449
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_595450 = formData.getOrDefault("DBParameterGroupName")
  valid_595450 = validateParameter(valid_595450, JString, required = true,
                                 default = nil)
  if valid_595450 != nil:
    section.add "DBParameterGroupName", valid_595450
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595451: Call_PostDeleteDBParameterGroup_595438; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_595451.validator(path, query, header, formData, body)
  let scheme = call_595451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595451.url(scheme.get, call_595451.host, call_595451.base,
                         call_595451.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595451, url, valid)

proc call*(call_595452: Call_PostDeleteDBParameterGroup_595438;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595453 = newJObject()
  var formData_595454 = newJObject()
  add(formData_595454, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_595453, "Action", newJString(Action))
  add(query_595453, "Version", newJString(Version))
  result = call_595452.call(nil, query_595453, nil, formData_595454, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_595438(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_595439, base: "/",
    url: url_PostDeleteDBParameterGroup_595440,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_595422 = ref object of OpenApiRestCall_593421
proc url_GetDeleteDBParameterGroup_595424(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBParameterGroup_595423(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_595425 = query.getOrDefault("DBParameterGroupName")
  valid_595425 = validateParameter(valid_595425, JString, required = true,
                                 default = nil)
  if valid_595425 != nil:
    section.add "DBParameterGroupName", valid_595425
  var valid_595426 = query.getOrDefault("Action")
  valid_595426 = validateParameter(valid_595426, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_595426 != nil:
    section.add "Action", valid_595426
  var valid_595427 = query.getOrDefault("Version")
  valid_595427 = validateParameter(valid_595427, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595427 != nil:
    section.add "Version", valid_595427
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595428 = header.getOrDefault("X-Amz-Date")
  valid_595428 = validateParameter(valid_595428, JString, required = false,
                                 default = nil)
  if valid_595428 != nil:
    section.add "X-Amz-Date", valid_595428
  var valid_595429 = header.getOrDefault("X-Amz-Security-Token")
  valid_595429 = validateParameter(valid_595429, JString, required = false,
                                 default = nil)
  if valid_595429 != nil:
    section.add "X-Amz-Security-Token", valid_595429
  var valid_595430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595430 = validateParameter(valid_595430, JString, required = false,
                                 default = nil)
  if valid_595430 != nil:
    section.add "X-Amz-Content-Sha256", valid_595430
  var valid_595431 = header.getOrDefault("X-Amz-Algorithm")
  valid_595431 = validateParameter(valid_595431, JString, required = false,
                                 default = nil)
  if valid_595431 != nil:
    section.add "X-Amz-Algorithm", valid_595431
  var valid_595432 = header.getOrDefault("X-Amz-Signature")
  valid_595432 = validateParameter(valid_595432, JString, required = false,
                                 default = nil)
  if valid_595432 != nil:
    section.add "X-Amz-Signature", valid_595432
  var valid_595433 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595433 = validateParameter(valid_595433, JString, required = false,
                                 default = nil)
  if valid_595433 != nil:
    section.add "X-Amz-SignedHeaders", valid_595433
  var valid_595434 = header.getOrDefault("X-Amz-Credential")
  valid_595434 = validateParameter(valid_595434, JString, required = false,
                                 default = nil)
  if valid_595434 != nil:
    section.add "X-Amz-Credential", valid_595434
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595435: Call_GetDeleteDBParameterGroup_595422; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_595435.validator(path, query, header, formData, body)
  let scheme = call_595435.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595435.url(scheme.get, call_595435.host, call_595435.base,
                         call_595435.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595435, url, valid)

proc call*(call_595436: Call_GetDeleteDBParameterGroup_595422;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595437 = newJObject()
  add(query_595437, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_595437, "Action", newJString(Action))
  add(query_595437, "Version", newJString(Version))
  result = call_595436.call(nil, query_595437, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_595422(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_595423, base: "/",
    url: url_GetDeleteDBParameterGroup_595424,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSecurityGroup_595471 = ref object of OpenApiRestCall_593421
proc url_PostDeleteDBSecurityGroup_595473(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBSecurityGroup_595472(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595474 = query.getOrDefault("Action")
  valid_595474 = validateParameter(valid_595474, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_595474 != nil:
    section.add "Action", valid_595474
  var valid_595475 = query.getOrDefault("Version")
  valid_595475 = validateParameter(valid_595475, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595475 != nil:
    section.add "Version", valid_595475
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595476 = header.getOrDefault("X-Amz-Date")
  valid_595476 = validateParameter(valid_595476, JString, required = false,
                                 default = nil)
  if valid_595476 != nil:
    section.add "X-Amz-Date", valid_595476
  var valid_595477 = header.getOrDefault("X-Amz-Security-Token")
  valid_595477 = validateParameter(valid_595477, JString, required = false,
                                 default = nil)
  if valid_595477 != nil:
    section.add "X-Amz-Security-Token", valid_595477
  var valid_595478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595478 = validateParameter(valid_595478, JString, required = false,
                                 default = nil)
  if valid_595478 != nil:
    section.add "X-Amz-Content-Sha256", valid_595478
  var valid_595479 = header.getOrDefault("X-Amz-Algorithm")
  valid_595479 = validateParameter(valid_595479, JString, required = false,
                                 default = nil)
  if valid_595479 != nil:
    section.add "X-Amz-Algorithm", valid_595479
  var valid_595480 = header.getOrDefault("X-Amz-Signature")
  valid_595480 = validateParameter(valid_595480, JString, required = false,
                                 default = nil)
  if valid_595480 != nil:
    section.add "X-Amz-Signature", valid_595480
  var valid_595481 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595481 = validateParameter(valid_595481, JString, required = false,
                                 default = nil)
  if valid_595481 != nil:
    section.add "X-Amz-SignedHeaders", valid_595481
  var valid_595482 = header.getOrDefault("X-Amz-Credential")
  valid_595482 = validateParameter(valid_595482, JString, required = false,
                                 default = nil)
  if valid_595482 != nil:
    section.add "X-Amz-Credential", valid_595482
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_595483 = formData.getOrDefault("DBSecurityGroupName")
  valid_595483 = validateParameter(valid_595483, JString, required = true,
                                 default = nil)
  if valid_595483 != nil:
    section.add "DBSecurityGroupName", valid_595483
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595484: Call_PostDeleteDBSecurityGroup_595471; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_595484.validator(path, query, header, formData, body)
  let scheme = call_595484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595484.url(scheme.get, call_595484.host, call_595484.base,
                         call_595484.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595484, url, valid)

proc call*(call_595485: Call_PostDeleteDBSecurityGroup_595471;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595486 = newJObject()
  var formData_595487 = newJObject()
  add(formData_595487, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_595486, "Action", newJString(Action))
  add(query_595486, "Version", newJString(Version))
  result = call_595485.call(nil, query_595486, nil, formData_595487, nil)

var postDeleteDBSecurityGroup* = Call_PostDeleteDBSecurityGroup_595471(
    name: "postDeleteDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_PostDeleteDBSecurityGroup_595472, base: "/",
    url: url_PostDeleteDBSecurityGroup_595473,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSecurityGroup_595455 = ref object of OpenApiRestCall_593421
proc url_GetDeleteDBSecurityGroup_595457(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBSecurityGroup_595456(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_595458 = query.getOrDefault("DBSecurityGroupName")
  valid_595458 = validateParameter(valid_595458, JString, required = true,
                                 default = nil)
  if valid_595458 != nil:
    section.add "DBSecurityGroupName", valid_595458
  var valid_595459 = query.getOrDefault("Action")
  valid_595459 = validateParameter(valid_595459, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_595459 != nil:
    section.add "Action", valid_595459
  var valid_595460 = query.getOrDefault("Version")
  valid_595460 = validateParameter(valid_595460, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595460 != nil:
    section.add "Version", valid_595460
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595461 = header.getOrDefault("X-Amz-Date")
  valid_595461 = validateParameter(valid_595461, JString, required = false,
                                 default = nil)
  if valid_595461 != nil:
    section.add "X-Amz-Date", valid_595461
  var valid_595462 = header.getOrDefault("X-Amz-Security-Token")
  valid_595462 = validateParameter(valid_595462, JString, required = false,
                                 default = nil)
  if valid_595462 != nil:
    section.add "X-Amz-Security-Token", valid_595462
  var valid_595463 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595463 = validateParameter(valid_595463, JString, required = false,
                                 default = nil)
  if valid_595463 != nil:
    section.add "X-Amz-Content-Sha256", valid_595463
  var valid_595464 = header.getOrDefault("X-Amz-Algorithm")
  valid_595464 = validateParameter(valid_595464, JString, required = false,
                                 default = nil)
  if valid_595464 != nil:
    section.add "X-Amz-Algorithm", valid_595464
  var valid_595465 = header.getOrDefault("X-Amz-Signature")
  valid_595465 = validateParameter(valid_595465, JString, required = false,
                                 default = nil)
  if valid_595465 != nil:
    section.add "X-Amz-Signature", valid_595465
  var valid_595466 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595466 = validateParameter(valid_595466, JString, required = false,
                                 default = nil)
  if valid_595466 != nil:
    section.add "X-Amz-SignedHeaders", valid_595466
  var valid_595467 = header.getOrDefault("X-Amz-Credential")
  valid_595467 = validateParameter(valid_595467, JString, required = false,
                                 default = nil)
  if valid_595467 != nil:
    section.add "X-Amz-Credential", valid_595467
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595468: Call_GetDeleteDBSecurityGroup_595455; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_595468.validator(path, query, header, formData, body)
  let scheme = call_595468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595468.url(scheme.get, call_595468.host, call_595468.base,
                         call_595468.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595468, url, valid)

proc call*(call_595469: Call_GetDeleteDBSecurityGroup_595455;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595470 = newJObject()
  add(query_595470, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_595470, "Action", newJString(Action))
  add(query_595470, "Version", newJString(Version))
  result = call_595469.call(nil, query_595470, nil, nil, nil)

var getDeleteDBSecurityGroup* = Call_GetDeleteDBSecurityGroup_595455(
    name: "getDeleteDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_GetDeleteDBSecurityGroup_595456, base: "/",
    url: url_GetDeleteDBSecurityGroup_595457, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSnapshot_595504 = ref object of OpenApiRestCall_593421
proc url_PostDeleteDBSnapshot_595506(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBSnapshot_595505(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595507 = query.getOrDefault("Action")
  valid_595507 = validateParameter(valid_595507, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_595507 != nil:
    section.add "Action", valid_595507
  var valid_595508 = query.getOrDefault("Version")
  valid_595508 = validateParameter(valid_595508, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595508 != nil:
    section.add "Version", valid_595508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595509 = header.getOrDefault("X-Amz-Date")
  valid_595509 = validateParameter(valid_595509, JString, required = false,
                                 default = nil)
  if valid_595509 != nil:
    section.add "X-Amz-Date", valid_595509
  var valid_595510 = header.getOrDefault("X-Amz-Security-Token")
  valid_595510 = validateParameter(valid_595510, JString, required = false,
                                 default = nil)
  if valid_595510 != nil:
    section.add "X-Amz-Security-Token", valid_595510
  var valid_595511 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595511 = validateParameter(valid_595511, JString, required = false,
                                 default = nil)
  if valid_595511 != nil:
    section.add "X-Amz-Content-Sha256", valid_595511
  var valid_595512 = header.getOrDefault("X-Amz-Algorithm")
  valid_595512 = validateParameter(valid_595512, JString, required = false,
                                 default = nil)
  if valid_595512 != nil:
    section.add "X-Amz-Algorithm", valid_595512
  var valid_595513 = header.getOrDefault("X-Amz-Signature")
  valid_595513 = validateParameter(valid_595513, JString, required = false,
                                 default = nil)
  if valid_595513 != nil:
    section.add "X-Amz-Signature", valid_595513
  var valid_595514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595514 = validateParameter(valid_595514, JString, required = false,
                                 default = nil)
  if valid_595514 != nil:
    section.add "X-Amz-SignedHeaders", valid_595514
  var valid_595515 = header.getOrDefault("X-Amz-Credential")
  valid_595515 = validateParameter(valid_595515, JString, required = false,
                                 default = nil)
  if valid_595515 != nil:
    section.add "X-Amz-Credential", valid_595515
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_595516 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_595516 = validateParameter(valid_595516, JString, required = true,
                                 default = nil)
  if valid_595516 != nil:
    section.add "DBSnapshotIdentifier", valid_595516
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595517: Call_PostDeleteDBSnapshot_595504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_595517.validator(path, query, header, formData, body)
  let scheme = call_595517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595517.url(scheme.get, call_595517.host, call_595517.base,
                         call_595517.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595517, url, valid)

proc call*(call_595518: Call_PostDeleteDBSnapshot_595504;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595519 = newJObject()
  var formData_595520 = newJObject()
  add(formData_595520, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_595519, "Action", newJString(Action))
  add(query_595519, "Version", newJString(Version))
  result = call_595518.call(nil, query_595519, nil, formData_595520, nil)

var postDeleteDBSnapshot* = Call_PostDeleteDBSnapshot_595504(
    name: "postDeleteDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_PostDeleteDBSnapshot_595505, base: "/",
    url: url_PostDeleteDBSnapshot_595506, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSnapshot_595488 = ref object of OpenApiRestCall_593421
proc url_GetDeleteDBSnapshot_595490(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBSnapshot_595489(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595491 = query.getOrDefault("Action")
  valid_595491 = validateParameter(valid_595491, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_595491 != nil:
    section.add "Action", valid_595491
  var valid_595492 = query.getOrDefault("Version")
  valid_595492 = validateParameter(valid_595492, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595492 != nil:
    section.add "Version", valid_595492
  var valid_595493 = query.getOrDefault("DBSnapshotIdentifier")
  valid_595493 = validateParameter(valid_595493, JString, required = true,
                                 default = nil)
  if valid_595493 != nil:
    section.add "DBSnapshotIdentifier", valid_595493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595494 = header.getOrDefault("X-Amz-Date")
  valid_595494 = validateParameter(valid_595494, JString, required = false,
                                 default = nil)
  if valid_595494 != nil:
    section.add "X-Amz-Date", valid_595494
  var valid_595495 = header.getOrDefault("X-Amz-Security-Token")
  valid_595495 = validateParameter(valid_595495, JString, required = false,
                                 default = nil)
  if valid_595495 != nil:
    section.add "X-Amz-Security-Token", valid_595495
  var valid_595496 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595496 = validateParameter(valid_595496, JString, required = false,
                                 default = nil)
  if valid_595496 != nil:
    section.add "X-Amz-Content-Sha256", valid_595496
  var valid_595497 = header.getOrDefault("X-Amz-Algorithm")
  valid_595497 = validateParameter(valid_595497, JString, required = false,
                                 default = nil)
  if valid_595497 != nil:
    section.add "X-Amz-Algorithm", valid_595497
  var valid_595498 = header.getOrDefault("X-Amz-Signature")
  valid_595498 = validateParameter(valid_595498, JString, required = false,
                                 default = nil)
  if valid_595498 != nil:
    section.add "X-Amz-Signature", valid_595498
  var valid_595499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595499 = validateParameter(valid_595499, JString, required = false,
                                 default = nil)
  if valid_595499 != nil:
    section.add "X-Amz-SignedHeaders", valid_595499
  var valid_595500 = header.getOrDefault("X-Amz-Credential")
  valid_595500 = validateParameter(valid_595500, JString, required = false,
                                 default = nil)
  if valid_595500 != nil:
    section.add "X-Amz-Credential", valid_595500
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595501: Call_GetDeleteDBSnapshot_595488; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_595501.validator(path, query, header, formData, body)
  let scheme = call_595501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595501.url(scheme.get, call_595501.host, call_595501.base,
                         call_595501.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595501, url, valid)

proc call*(call_595502: Call_GetDeleteDBSnapshot_595488;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  var query_595503 = newJObject()
  add(query_595503, "Action", newJString(Action))
  add(query_595503, "Version", newJString(Version))
  add(query_595503, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_595502.call(nil, query_595503, nil, nil, nil)

var getDeleteDBSnapshot* = Call_GetDeleteDBSnapshot_595488(
    name: "getDeleteDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_GetDeleteDBSnapshot_595489, base: "/",
    url: url_GetDeleteDBSnapshot_595490, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_595537 = ref object of OpenApiRestCall_593421
proc url_PostDeleteDBSubnetGroup_595539(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBSubnetGroup_595538(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595540 = query.getOrDefault("Action")
  valid_595540 = validateParameter(valid_595540, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_595540 != nil:
    section.add "Action", valid_595540
  var valid_595541 = query.getOrDefault("Version")
  valid_595541 = validateParameter(valid_595541, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595541 != nil:
    section.add "Version", valid_595541
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595542 = header.getOrDefault("X-Amz-Date")
  valid_595542 = validateParameter(valid_595542, JString, required = false,
                                 default = nil)
  if valid_595542 != nil:
    section.add "X-Amz-Date", valid_595542
  var valid_595543 = header.getOrDefault("X-Amz-Security-Token")
  valid_595543 = validateParameter(valid_595543, JString, required = false,
                                 default = nil)
  if valid_595543 != nil:
    section.add "X-Amz-Security-Token", valid_595543
  var valid_595544 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595544 = validateParameter(valid_595544, JString, required = false,
                                 default = nil)
  if valid_595544 != nil:
    section.add "X-Amz-Content-Sha256", valid_595544
  var valid_595545 = header.getOrDefault("X-Amz-Algorithm")
  valid_595545 = validateParameter(valid_595545, JString, required = false,
                                 default = nil)
  if valid_595545 != nil:
    section.add "X-Amz-Algorithm", valid_595545
  var valid_595546 = header.getOrDefault("X-Amz-Signature")
  valid_595546 = validateParameter(valid_595546, JString, required = false,
                                 default = nil)
  if valid_595546 != nil:
    section.add "X-Amz-Signature", valid_595546
  var valid_595547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595547 = validateParameter(valid_595547, JString, required = false,
                                 default = nil)
  if valid_595547 != nil:
    section.add "X-Amz-SignedHeaders", valid_595547
  var valid_595548 = header.getOrDefault("X-Amz-Credential")
  valid_595548 = validateParameter(valid_595548, JString, required = false,
                                 default = nil)
  if valid_595548 != nil:
    section.add "X-Amz-Credential", valid_595548
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_595549 = formData.getOrDefault("DBSubnetGroupName")
  valid_595549 = validateParameter(valid_595549, JString, required = true,
                                 default = nil)
  if valid_595549 != nil:
    section.add "DBSubnetGroupName", valid_595549
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595550: Call_PostDeleteDBSubnetGroup_595537; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_595550.validator(path, query, header, formData, body)
  let scheme = call_595550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595550.url(scheme.get, call_595550.host, call_595550.base,
                         call_595550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595550, url, valid)

proc call*(call_595551: Call_PostDeleteDBSubnetGroup_595537;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595552 = newJObject()
  var formData_595553 = newJObject()
  add(formData_595553, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_595552, "Action", newJString(Action))
  add(query_595552, "Version", newJString(Version))
  result = call_595551.call(nil, query_595552, nil, formData_595553, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_595537(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_595538, base: "/",
    url: url_PostDeleteDBSubnetGroup_595539, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_595521 = ref object of OpenApiRestCall_593421
proc url_GetDeleteDBSubnetGroup_595523(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBSubnetGroup_595522(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595524 = query.getOrDefault("Action")
  valid_595524 = validateParameter(valid_595524, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_595524 != nil:
    section.add "Action", valid_595524
  var valid_595525 = query.getOrDefault("DBSubnetGroupName")
  valid_595525 = validateParameter(valid_595525, JString, required = true,
                                 default = nil)
  if valid_595525 != nil:
    section.add "DBSubnetGroupName", valid_595525
  var valid_595526 = query.getOrDefault("Version")
  valid_595526 = validateParameter(valid_595526, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595526 != nil:
    section.add "Version", valid_595526
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595527 = header.getOrDefault("X-Amz-Date")
  valid_595527 = validateParameter(valid_595527, JString, required = false,
                                 default = nil)
  if valid_595527 != nil:
    section.add "X-Amz-Date", valid_595527
  var valid_595528 = header.getOrDefault("X-Amz-Security-Token")
  valid_595528 = validateParameter(valid_595528, JString, required = false,
                                 default = nil)
  if valid_595528 != nil:
    section.add "X-Amz-Security-Token", valid_595528
  var valid_595529 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595529 = validateParameter(valid_595529, JString, required = false,
                                 default = nil)
  if valid_595529 != nil:
    section.add "X-Amz-Content-Sha256", valid_595529
  var valid_595530 = header.getOrDefault("X-Amz-Algorithm")
  valid_595530 = validateParameter(valid_595530, JString, required = false,
                                 default = nil)
  if valid_595530 != nil:
    section.add "X-Amz-Algorithm", valid_595530
  var valid_595531 = header.getOrDefault("X-Amz-Signature")
  valid_595531 = validateParameter(valid_595531, JString, required = false,
                                 default = nil)
  if valid_595531 != nil:
    section.add "X-Amz-Signature", valid_595531
  var valid_595532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595532 = validateParameter(valid_595532, JString, required = false,
                                 default = nil)
  if valid_595532 != nil:
    section.add "X-Amz-SignedHeaders", valid_595532
  var valid_595533 = header.getOrDefault("X-Amz-Credential")
  valid_595533 = validateParameter(valid_595533, JString, required = false,
                                 default = nil)
  if valid_595533 != nil:
    section.add "X-Amz-Credential", valid_595533
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595534: Call_GetDeleteDBSubnetGroup_595521; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_595534.validator(path, query, header, formData, body)
  let scheme = call_595534.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595534.url(scheme.get, call_595534.host, call_595534.base,
                         call_595534.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595534, url, valid)

proc call*(call_595535: Call_GetDeleteDBSubnetGroup_595521;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_595536 = newJObject()
  add(query_595536, "Action", newJString(Action))
  add(query_595536, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_595536, "Version", newJString(Version))
  result = call_595535.call(nil, query_595536, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_595521(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_595522, base: "/",
    url: url_GetDeleteDBSubnetGroup_595523, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_595570 = ref object of OpenApiRestCall_593421
proc url_PostDeleteEventSubscription_595572(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteEventSubscription_595571(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595573 = query.getOrDefault("Action")
  valid_595573 = validateParameter(valid_595573, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_595573 != nil:
    section.add "Action", valid_595573
  var valid_595574 = query.getOrDefault("Version")
  valid_595574 = validateParameter(valid_595574, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595574 != nil:
    section.add "Version", valid_595574
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595575 = header.getOrDefault("X-Amz-Date")
  valid_595575 = validateParameter(valid_595575, JString, required = false,
                                 default = nil)
  if valid_595575 != nil:
    section.add "X-Amz-Date", valid_595575
  var valid_595576 = header.getOrDefault("X-Amz-Security-Token")
  valid_595576 = validateParameter(valid_595576, JString, required = false,
                                 default = nil)
  if valid_595576 != nil:
    section.add "X-Amz-Security-Token", valid_595576
  var valid_595577 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595577 = validateParameter(valid_595577, JString, required = false,
                                 default = nil)
  if valid_595577 != nil:
    section.add "X-Amz-Content-Sha256", valid_595577
  var valid_595578 = header.getOrDefault("X-Amz-Algorithm")
  valid_595578 = validateParameter(valid_595578, JString, required = false,
                                 default = nil)
  if valid_595578 != nil:
    section.add "X-Amz-Algorithm", valid_595578
  var valid_595579 = header.getOrDefault("X-Amz-Signature")
  valid_595579 = validateParameter(valid_595579, JString, required = false,
                                 default = nil)
  if valid_595579 != nil:
    section.add "X-Amz-Signature", valid_595579
  var valid_595580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595580 = validateParameter(valid_595580, JString, required = false,
                                 default = nil)
  if valid_595580 != nil:
    section.add "X-Amz-SignedHeaders", valid_595580
  var valid_595581 = header.getOrDefault("X-Amz-Credential")
  valid_595581 = validateParameter(valid_595581, JString, required = false,
                                 default = nil)
  if valid_595581 != nil:
    section.add "X-Amz-Credential", valid_595581
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_595582 = formData.getOrDefault("SubscriptionName")
  valid_595582 = validateParameter(valid_595582, JString, required = true,
                                 default = nil)
  if valid_595582 != nil:
    section.add "SubscriptionName", valid_595582
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595583: Call_PostDeleteEventSubscription_595570; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_595583.validator(path, query, header, formData, body)
  let scheme = call_595583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595583.url(scheme.get, call_595583.host, call_595583.base,
                         call_595583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595583, url, valid)

proc call*(call_595584: Call_PostDeleteEventSubscription_595570;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595585 = newJObject()
  var formData_595586 = newJObject()
  add(formData_595586, "SubscriptionName", newJString(SubscriptionName))
  add(query_595585, "Action", newJString(Action))
  add(query_595585, "Version", newJString(Version))
  result = call_595584.call(nil, query_595585, nil, formData_595586, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_595570(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_595571, base: "/",
    url: url_PostDeleteEventSubscription_595572,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_595554 = ref object of OpenApiRestCall_593421
proc url_GetDeleteEventSubscription_595556(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteEventSubscription_595555(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595557 = query.getOrDefault("Action")
  valid_595557 = validateParameter(valid_595557, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_595557 != nil:
    section.add "Action", valid_595557
  var valid_595558 = query.getOrDefault("SubscriptionName")
  valid_595558 = validateParameter(valid_595558, JString, required = true,
                                 default = nil)
  if valid_595558 != nil:
    section.add "SubscriptionName", valid_595558
  var valid_595559 = query.getOrDefault("Version")
  valid_595559 = validateParameter(valid_595559, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595559 != nil:
    section.add "Version", valid_595559
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595560 = header.getOrDefault("X-Amz-Date")
  valid_595560 = validateParameter(valid_595560, JString, required = false,
                                 default = nil)
  if valid_595560 != nil:
    section.add "X-Amz-Date", valid_595560
  var valid_595561 = header.getOrDefault("X-Amz-Security-Token")
  valid_595561 = validateParameter(valid_595561, JString, required = false,
                                 default = nil)
  if valid_595561 != nil:
    section.add "X-Amz-Security-Token", valid_595561
  var valid_595562 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595562 = validateParameter(valid_595562, JString, required = false,
                                 default = nil)
  if valid_595562 != nil:
    section.add "X-Amz-Content-Sha256", valid_595562
  var valid_595563 = header.getOrDefault("X-Amz-Algorithm")
  valid_595563 = validateParameter(valid_595563, JString, required = false,
                                 default = nil)
  if valid_595563 != nil:
    section.add "X-Amz-Algorithm", valid_595563
  var valid_595564 = header.getOrDefault("X-Amz-Signature")
  valid_595564 = validateParameter(valid_595564, JString, required = false,
                                 default = nil)
  if valid_595564 != nil:
    section.add "X-Amz-Signature", valid_595564
  var valid_595565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595565 = validateParameter(valid_595565, JString, required = false,
                                 default = nil)
  if valid_595565 != nil:
    section.add "X-Amz-SignedHeaders", valid_595565
  var valid_595566 = header.getOrDefault("X-Amz-Credential")
  valid_595566 = validateParameter(valid_595566, JString, required = false,
                                 default = nil)
  if valid_595566 != nil:
    section.add "X-Amz-Credential", valid_595566
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595567: Call_GetDeleteEventSubscription_595554; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_595567.validator(path, query, header, formData, body)
  let scheme = call_595567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595567.url(scheme.get, call_595567.host, call_595567.base,
                         call_595567.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595567, url, valid)

proc call*(call_595568: Call_GetDeleteEventSubscription_595554;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   Action: string (required)
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Version: string (required)
  var query_595569 = newJObject()
  add(query_595569, "Action", newJString(Action))
  add(query_595569, "SubscriptionName", newJString(SubscriptionName))
  add(query_595569, "Version", newJString(Version))
  result = call_595568.call(nil, query_595569, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_595554(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_595555, base: "/",
    url: url_GetDeleteEventSubscription_595556,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGlobalCluster_595603 = ref object of OpenApiRestCall_593421
proc url_PostDeleteGlobalCluster_595605(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteGlobalCluster_595604(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595606 = query.getOrDefault("Action")
  valid_595606 = validateParameter(valid_595606, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_595606 != nil:
    section.add "Action", valid_595606
  var valid_595607 = query.getOrDefault("Version")
  valid_595607 = validateParameter(valid_595607, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595607 != nil:
    section.add "Version", valid_595607
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595608 = header.getOrDefault("X-Amz-Date")
  valid_595608 = validateParameter(valid_595608, JString, required = false,
                                 default = nil)
  if valid_595608 != nil:
    section.add "X-Amz-Date", valid_595608
  var valid_595609 = header.getOrDefault("X-Amz-Security-Token")
  valid_595609 = validateParameter(valid_595609, JString, required = false,
                                 default = nil)
  if valid_595609 != nil:
    section.add "X-Amz-Security-Token", valid_595609
  var valid_595610 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595610 = validateParameter(valid_595610, JString, required = false,
                                 default = nil)
  if valid_595610 != nil:
    section.add "X-Amz-Content-Sha256", valid_595610
  var valid_595611 = header.getOrDefault("X-Amz-Algorithm")
  valid_595611 = validateParameter(valid_595611, JString, required = false,
                                 default = nil)
  if valid_595611 != nil:
    section.add "X-Amz-Algorithm", valid_595611
  var valid_595612 = header.getOrDefault("X-Amz-Signature")
  valid_595612 = validateParameter(valid_595612, JString, required = false,
                                 default = nil)
  if valid_595612 != nil:
    section.add "X-Amz-Signature", valid_595612
  var valid_595613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595613 = validateParameter(valid_595613, JString, required = false,
                                 default = nil)
  if valid_595613 != nil:
    section.add "X-Amz-SignedHeaders", valid_595613
  var valid_595614 = header.getOrDefault("X-Amz-Credential")
  valid_595614 = validateParameter(valid_595614, JString, required = false,
                                 default = nil)
  if valid_595614 != nil:
    section.add "X-Amz-Credential", valid_595614
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_595615 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_595615 = validateParameter(valid_595615, JString, required = true,
                                 default = nil)
  if valid_595615 != nil:
    section.add "GlobalClusterIdentifier", valid_595615
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595616: Call_PostDeleteGlobalCluster_595603; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595616.validator(path, query, header, formData, body)
  let scheme = call_595616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595616.url(scheme.get, call_595616.host, call_595616.base,
                         call_595616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595616, url, valid)

proc call*(call_595617: Call_PostDeleteGlobalCluster_595603;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595618 = newJObject()
  var formData_595619 = newJObject()
  add(formData_595619, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_595618, "Action", newJString(Action))
  add(query_595618, "Version", newJString(Version))
  result = call_595617.call(nil, query_595618, nil, formData_595619, nil)

var postDeleteGlobalCluster* = Call_PostDeleteGlobalCluster_595603(
    name: "postDeleteGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_PostDeleteGlobalCluster_595604, base: "/",
    url: url_PostDeleteGlobalCluster_595605, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGlobalCluster_595587 = ref object of OpenApiRestCall_593421
proc url_GetDeleteGlobalCluster_595589(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteGlobalCluster_595588(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595590 = query.getOrDefault("Action")
  valid_595590 = validateParameter(valid_595590, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_595590 != nil:
    section.add "Action", valid_595590
  var valid_595591 = query.getOrDefault("GlobalClusterIdentifier")
  valid_595591 = validateParameter(valid_595591, JString, required = true,
                                 default = nil)
  if valid_595591 != nil:
    section.add "GlobalClusterIdentifier", valid_595591
  var valid_595592 = query.getOrDefault("Version")
  valid_595592 = validateParameter(valid_595592, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595592 != nil:
    section.add "Version", valid_595592
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595593 = header.getOrDefault("X-Amz-Date")
  valid_595593 = validateParameter(valid_595593, JString, required = false,
                                 default = nil)
  if valid_595593 != nil:
    section.add "X-Amz-Date", valid_595593
  var valid_595594 = header.getOrDefault("X-Amz-Security-Token")
  valid_595594 = validateParameter(valid_595594, JString, required = false,
                                 default = nil)
  if valid_595594 != nil:
    section.add "X-Amz-Security-Token", valid_595594
  var valid_595595 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595595 = validateParameter(valid_595595, JString, required = false,
                                 default = nil)
  if valid_595595 != nil:
    section.add "X-Amz-Content-Sha256", valid_595595
  var valid_595596 = header.getOrDefault("X-Amz-Algorithm")
  valid_595596 = validateParameter(valid_595596, JString, required = false,
                                 default = nil)
  if valid_595596 != nil:
    section.add "X-Amz-Algorithm", valid_595596
  var valid_595597 = header.getOrDefault("X-Amz-Signature")
  valid_595597 = validateParameter(valid_595597, JString, required = false,
                                 default = nil)
  if valid_595597 != nil:
    section.add "X-Amz-Signature", valid_595597
  var valid_595598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595598 = validateParameter(valid_595598, JString, required = false,
                                 default = nil)
  if valid_595598 != nil:
    section.add "X-Amz-SignedHeaders", valid_595598
  var valid_595599 = header.getOrDefault("X-Amz-Credential")
  valid_595599 = validateParameter(valid_595599, JString, required = false,
                                 default = nil)
  if valid_595599 != nil:
    section.add "X-Amz-Credential", valid_595599
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595600: Call_GetDeleteGlobalCluster_595587; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595600.validator(path, query, header, formData, body)
  let scheme = call_595600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595600.url(scheme.get, call_595600.host, call_595600.base,
                         call_595600.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595600, url, valid)

proc call*(call_595601: Call_GetDeleteGlobalCluster_595587;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Version: string (required)
  var query_595602 = newJObject()
  add(query_595602, "Action", newJString(Action))
  add(query_595602, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_595602, "Version", newJString(Version))
  result = call_595601.call(nil, query_595602, nil, nil, nil)

var getDeleteGlobalCluster* = Call_GetDeleteGlobalCluster_595587(
    name: "getDeleteGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_GetDeleteGlobalCluster_595588, base: "/",
    url: url_GetDeleteGlobalCluster_595589, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOptionGroup_595636 = ref object of OpenApiRestCall_593421
proc url_PostDeleteOptionGroup_595638(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteOptionGroup_595637(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595639 = query.getOrDefault("Action")
  valid_595639 = validateParameter(valid_595639, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_595639 != nil:
    section.add "Action", valid_595639
  var valid_595640 = query.getOrDefault("Version")
  valid_595640 = validateParameter(valid_595640, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595640 != nil:
    section.add "Version", valid_595640
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595641 = header.getOrDefault("X-Amz-Date")
  valid_595641 = validateParameter(valid_595641, JString, required = false,
                                 default = nil)
  if valid_595641 != nil:
    section.add "X-Amz-Date", valid_595641
  var valid_595642 = header.getOrDefault("X-Amz-Security-Token")
  valid_595642 = validateParameter(valid_595642, JString, required = false,
                                 default = nil)
  if valid_595642 != nil:
    section.add "X-Amz-Security-Token", valid_595642
  var valid_595643 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595643 = validateParameter(valid_595643, JString, required = false,
                                 default = nil)
  if valid_595643 != nil:
    section.add "X-Amz-Content-Sha256", valid_595643
  var valid_595644 = header.getOrDefault("X-Amz-Algorithm")
  valid_595644 = validateParameter(valid_595644, JString, required = false,
                                 default = nil)
  if valid_595644 != nil:
    section.add "X-Amz-Algorithm", valid_595644
  var valid_595645 = header.getOrDefault("X-Amz-Signature")
  valid_595645 = validateParameter(valid_595645, JString, required = false,
                                 default = nil)
  if valid_595645 != nil:
    section.add "X-Amz-Signature", valid_595645
  var valid_595646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595646 = validateParameter(valid_595646, JString, required = false,
                                 default = nil)
  if valid_595646 != nil:
    section.add "X-Amz-SignedHeaders", valid_595646
  var valid_595647 = header.getOrDefault("X-Amz-Credential")
  valid_595647 = validateParameter(valid_595647, JString, required = false,
                                 default = nil)
  if valid_595647 != nil:
    section.add "X-Amz-Credential", valid_595647
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_595648 = formData.getOrDefault("OptionGroupName")
  valid_595648 = validateParameter(valid_595648, JString, required = true,
                                 default = nil)
  if valid_595648 != nil:
    section.add "OptionGroupName", valid_595648
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595649: Call_PostDeleteOptionGroup_595636; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_595649.validator(path, query, header, formData, body)
  let scheme = call_595649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595649.url(scheme.get, call_595649.host, call_595649.base,
                         call_595649.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595649, url, valid)

proc call*(call_595650: Call_PostDeleteOptionGroup_595636; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteOptionGroup
  ## Deletes an existing option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595651 = newJObject()
  var formData_595652 = newJObject()
  add(formData_595652, "OptionGroupName", newJString(OptionGroupName))
  add(query_595651, "Action", newJString(Action))
  add(query_595651, "Version", newJString(Version))
  result = call_595650.call(nil, query_595651, nil, formData_595652, nil)

var postDeleteOptionGroup* = Call_PostDeleteOptionGroup_595636(
    name: "postDeleteOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_PostDeleteOptionGroup_595637, base: "/",
    url: url_PostDeleteOptionGroup_595638, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOptionGroup_595620 = ref object of OpenApiRestCall_593421
proc url_GetDeleteOptionGroup_595622(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteOptionGroup_595621(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OptionGroupName` field"
  var valid_595623 = query.getOrDefault("OptionGroupName")
  valid_595623 = validateParameter(valid_595623, JString, required = true,
                                 default = nil)
  if valid_595623 != nil:
    section.add "OptionGroupName", valid_595623
  var valid_595624 = query.getOrDefault("Action")
  valid_595624 = validateParameter(valid_595624, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_595624 != nil:
    section.add "Action", valid_595624
  var valid_595625 = query.getOrDefault("Version")
  valid_595625 = validateParameter(valid_595625, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595625 != nil:
    section.add "Version", valid_595625
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595626 = header.getOrDefault("X-Amz-Date")
  valid_595626 = validateParameter(valid_595626, JString, required = false,
                                 default = nil)
  if valid_595626 != nil:
    section.add "X-Amz-Date", valid_595626
  var valid_595627 = header.getOrDefault("X-Amz-Security-Token")
  valid_595627 = validateParameter(valid_595627, JString, required = false,
                                 default = nil)
  if valid_595627 != nil:
    section.add "X-Amz-Security-Token", valid_595627
  var valid_595628 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595628 = validateParameter(valid_595628, JString, required = false,
                                 default = nil)
  if valid_595628 != nil:
    section.add "X-Amz-Content-Sha256", valid_595628
  var valid_595629 = header.getOrDefault("X-Amz-Algorithm")
  valid_595629 = validateParameter(valid_595629, JString, required = false,
                                 default = nil)
  if valid_595629 != nil:
    section.add "X-Amz-Algorithm", valid_595629
  var valid_595630 = header.getOrDefault("X-Amz-Signature")
  valid_595630 = validateParameter(valid_595630, JString, required = false,
                                 default = nil)
  if valid_595630 != nil:
    section.add "X-Amz-Signature", valid_595630
  var valid_595631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595631 = validateParameter(valid_595631, JString, required = false,
                                 default = nil)
  if valid_595631 != nil:
    section.add "X-Amz-SignedHeaders", valid_595631
  var valid_595632 = header.getOrDefault("X-Amz-Credential")
  valid_595632 = validateParameter(valid_595632, JString, required = false,
                                 default = nil)
  if valid_595632 != nil:
    section.add "X-Amz-Credential", valid_595632
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595633: Call_GetDeleteOptionGroup_595620; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_595633.validator(path, query, header, formData, body)
  let scheme = call_595633.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595633.url(scheme.get, call_595633.host, call_595633.base,
                         call_595633.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595633, url, valid)

proc call*(call_595634: Call_GetDeleteOptionGroup_595620; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteOptionGroup
  ## Deletes an existing option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595635 = newJObject()
  add(query_595635, "OptionGroupName", newJString(OptionGroupName))
  add(query_595635, "Action", newJString(Action))
  add(query_595635, "Version", newJString(Version))
  result = call_595634.call(nil, query_595635, nil, nil, nil)

var getDeleteOptionGroup* = Call_GetDeleteOptionGroup_595620(
    name: "getDeleteOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_GetDeleteOptionGroup_595621, base: "/",
    url: url_GetDeleteOptionGroup_595622, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_595668 = ref object of OpenApiRestCall_593421
proc url_PostDescribeAccountAttributes_595670(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAccountAttributes_595669(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595671 = query.getOrDefault("Action")
  valid_595671 = validateParameter(valid_595671, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_595671 != nil:
    section.add "Action", valid_595671
  var valid_595672 = query.getOrDefault("Version")
  valid_595672 = validateParameter(valid_595672, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595672 != nil:
    section.add "Version", valid_595672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595673 = header.getOrDefault("X-Amz-Date")
  valid_595673 = validateParameter(valid_595673, JString, required = false,
                                 default = nil)
  if valid_595673 != nil:
    section.add "X-Amz-Date", valid_595673
  var valid_595674 = header.getOrDefault("X-Amz-Security-Token")
  valid_595674 = validateParameter(valid_595674, JString, required = false,
                                 default = nil)
  if valid_595674 != nil:
    section.add "X-Amz-Security-Token", valid_595674
  var valid_595675 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595675 = validateParameter(valid_595675, JString, required = false,
                                 default = nil)
  if valid_595675 != nil:
    section.add "X-Amz-Content-Sha256", valid_595675
  var valid_595676 = header.getOrDefault("X-Amz-Algorithm")
  valid_595676 = validateParameter(valid_595676, JString, required = false,
                                 default = nil)
  if valid_595676 != nil:
    section.add "X-Amz-Algorithm", valid_595676
  var valid_595677 = header.getOrDefault("X-Amz-Signature")
  valid_595677 = validateParameter(valid_595677, JString, required = false,
                                 default = nil)
  if valid_595677 != nil:
    section.add "X-Amz-Signature", valid_595677
  var valid_595678 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595678 = validateParameter(valid_595678, JString, required = false,
                                 default = nil)
  if valid_595678 != nil:
    section.add "X-Amz-SignedHeaders", valid_595678
  var valid_595679 = header.getOrDefault("X-Amz-Credential")
  valid_595679 = validateParameter(valid_595679, JString, required = false,
                                 default = nil)
  if valid_595679 != nil:
    section.add "X-Amz-Credential", valid_595679
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595680: Call_PostDescribeAccountAttributes_595668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_595680.validator(path, query, header, formData, body)
  let scheme = call_595680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595680.url(scheme.get, call_595680.host, call_595680.base,
                         call_595680.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595680, url, valid)

proc call*(call_595681: Call_PostDescribeAccountAttributes_595668;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595682 = newJObject()
  add(query_595682, "Action", newJString(Action))
  add(query_595682, "Version", newJString(Version))
  result = call_595681.call(nil, query_595682, nil, nil, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_595668(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_595669, base: "/",
    url: url_PostDescribeAccountAttributes_595670,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_595653 = ref object of OpenApiRestCall_593421
proc url_GetDescribeAccountAttributes_595655(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAccountAttributes_595654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595656 = query.getOrDefault("Action")
  valid_595656 = validateParameter(valid_595656, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_595656 != nil:
    section.add "Action", valid_595656
  var valid_595657 = query.getOrDefault("Version")
  valid_595657 = validateParameter(valid_595657, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595657 != nil:
    section.add "Version", valid_595657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595658 = header.getOrDefault("X-Amz-Date")
  valid_595658 = validateParameter(valid_595658, JString, required = false,
                                 default = nil)
  if valid_595658 != nil:
    section.add "X-Amz-Date", valid_595658
  var valid_595659 = header.getOrDefault("X-Amz-Security-Token")
  valid_595659 = validateParameter(valid_595659, JString, required = false,
                                 default = nil)
  if valid_595659 != nil:
    section.add "X-Amz-Security-Token", valid_595659
  var valid_595660 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595660 = validateParameter(valid_595660, JString, required = false,
                                 default = nil)
  if valid_595660 != nil:
    section.add "X-Amz-Content-Sha256", valid_595660
  var valid_595661 = header.getOrDefault("X-Amz-Algorithm")
  valid_595661 = validateParameter(valid_595661, JString, required = false,
                                 default = nil)
  if valid_595661 != nil:
    section.add "X-Amz-Algorithm", valid_595661
  var valid_595662 = header.getOrDefault("X-Amz-Signature")
  valid_595662 = validateParameter(valid_595662, JString, required = false,
                                 default = nil)
  if valid_595662 != nil:
    section.add "X-Amz-Signature", valid_595662
  var valid_595663 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595663 = validateParameter(valid_595663, JString, required = false,
                                 default = nil)
  if valid_595663 != nil:
    section.add "X-Amz-SignedHeaders", valid_595663
  var valid_595664 = header.getOrDefault("X-Amz-Credential")
  valid_595664 = validateParameter(valid_595664, JString, required = false,
                                 default = nil)
  if valid_595664 != nil:
    section.add "X-Amz-Credential", valid_595664
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595665: Call_GetDescribeAccountAttributes_595653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_595665.validator(path, query, header, formData, body)
  let scheme = call_595665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595665.url(scheme.get, call_595665.host, call_595665.base,
                         call_595665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595665, url, valid)

proc call*(call_595666: Call_GetDescribeAccountAttributes_595653;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595667 = newJObject()
  add(query_595667, "Action", newJString(Action))
  add(query_595667, "Version", newJString(Version))
  result = call_595666.call(nil, query_595667, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_595653(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_595654, base: "/",
    url: url_GetDescribeAccountAttributes_595655,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCertificates_595702 = ref object of OpenApiRestCall_593421
proc url_PostDescribeCertificates_595704(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCertificates_595703(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595705 = query.getOrDefault("Action")
  valid_595705 = validateParameter(valid_595705, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_595705 != nil:
    section.add "Action", valid_595705
  var valid_595706 = query.getOrDefault("Version")
  valid_595706 = validateParameter(valid_595706, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595706 != nil:
    section.add "Version", valid_595706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595707 = header.getOrDefault("X-Amz-Date")
  valid_595707 = validateParameter(valid_595707, JString, required = false,
                                 default = nil)
  if valid_595707 != nil:
    section.add "X-Amz-Date", valid_595707
  var valid_595708 = header.getOrDefault("X-Amz-Security-Token")
  valid_595708 = validateParameter(valid_595708, JString, required = false,
                                 default = nil)
  if valid_595708 != nil:
    section.add "X-Amz-Security-Token", valid_595708
  var valid_595709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595709 = validateParameter(valid_595709, JString, required = false,
                                 default = nil)
  if valid_595709 != nil:
    section.add "X-Amz-Content-Sha256", valid_595709
  var valid_595710 = header.getOrDefault("X-Amz-Algorithm")
  valid_595710 = validateParameter(valid_595710, JString, required = false,
                                 default = nil)
  if valid_595710 != nil:
    section.add "X-Amz-Algorithm", valid_595710
  var valid_595711 = header.getOrDefault("X-Amz-Signature")
  valid_595711 = validateParameter(valid_595711, JString, required = false,
                                 default = nil)
  if valid_595711 != nil:
    section.add "X-Amz-Signature", valid_595711
  var valid_595712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595712 = validateParameter(valid_595712, JString, required = false,
                                 default = nil)
  if valid_595712 != nil:
    section.add "X-Amz-SignedHeaders", valid_595712
  var valid_595713 = header.getOrDefault("X-Amz-Credential")
  valid_595713 = validateParameter(valid_595713, JString, required = false,
                                 default = nil)
  if valid_595713 != nil:
    section.add "X-Amz-Credential", valid_595713
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595714 = formData.getOrDefault("CertificateIdentifier")
  valid_595714 = validateParameter(valid_595714, JString, required = false,
                                 default = nil)
  if valid_595714 != nil:
    section.add "CertificateIdentifier", valid_595714
  var valid_595715 = formData.getOrDefault("Marker")
  valid_595715 = validateParameter(valid_595715, JString, required = false,
                                 default = nil)
  if valid_595715 != nil:
    section.add "Marker", valid_595715
  var valid_595716 = formData.getOrDefault("Filters")
  valid_595716 = validateParameter(valid_595716, JArray, required = false,
                                 default = nil)
  if valid_595716 != nil:
    section.add "Filters", valid_595716
  var valid_595717 = formData.getOrDefault("MaxRecords")
  valid_595717 = validateParameter(valid_595717, JInt, required = false, default = nil)
  if valid_595717 != nil:
    section.add "MaxRecords", valid_595717
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595718: Call_PostDescribeCertificates_595702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_595718.validator(path, query, header, formData, body)
  let scheme = call_595718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595718.url(scheme.get, call_595718.host, call_595718.base,
                         call_595718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595718, url, valid)

proc call*(call_595719: Call_PostDescribeCertificates_595702;
          CertificateIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeCertificates"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_595720 = newJObject()
  var formData_595721 = newJObject()
  add(formData_595721, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(formData_595721, "Marker", newJString(Marker))
  add(query_595720, "Action", newJString(Action))
  if Filters != nil:
    formData_595721.add "Filters", Filters
  add(formData_595721, "MaxRecords", newJInt(MaxRecords))
  add(query_595720, "Version", newJString(Version))
  result = call_595719.call(nil, query_595720, nil, formData_595721, nil)

var postDescribeCertificates* = Call_PostDescribeCertificates_595702(
    name: "postDescribeCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_PostDescribeCertificates_595703, base: "/",
    url: url_PostDescribeCertificates_595704, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCertificates_595683 = ref object of OpenApiRestCall_593421
proc url_GetDescribeCertificates_595685(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCertificates_595684(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_595686 = query.getOrDefault("MaxRecords")
  valid_595686 = validateParameter(valid_595686, JInt, required = false, default = nil)
  if valid_595686 != nil:
    section.add "MaxRecords", valid_595686
  var valid_595687 = query.getOrDefault("CertificateIdentifier")
  valid_595687 = validateParameter(valid_595687, JString, required = false,
                                 default = nil)
  if valid_595687 != nil:
    section.add "CertificateIdentifier", valid_595687
  var valid_595688 = query.getOrDefault("Filters")
  valid_595688 = validateParameter(valid_595688, JArray, required = false,
                                 default = nil)
  if valid_595688 != nil:
    section.add "Filters", valid_595688
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595689 = query.getOrDefault("Action")
  valid_595689 = validateParameter(valid_595689, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_595689 != nil:
    section.add "Action", valid_595689
  var valid_595690 = query.getOrDefault("Marker")
  valid_595690 = validateParameter(valid_595690, JString, required = false,
                                 default = nil)
  if valid_595690 != nil:
    section.add "Marker", valid_595690
  var valid_595691 = query.getOrDefault("Version")
  valid_595691 = validateParameter(valid_595691, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595691 != nil:
    section.add "Version", valid_595691
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595692 = header.getOrDefault("X-Amz-Date")
  valid_595692 = validateParameter(valid_595692, JString, required = false,
                                 default = nil)
  if valid_595692 != nil:
    section.add "X-Amz-Date", valid_595692
  var valid_595693 = header.getOrDefault("X-Amz-Security-Token")
  valid_595693 = validateParameter(valid_595693, JString, required = false,
                                 default = nil)
  if valid_595693 != nil:
    section.add "X-Amz-Security-Token", valid_595693
  var valid_595694 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595694 = validateParameter(valid_595694, JString, required = false,
                                 default = nil)
  if valid_595694 != nil:
    section.add "X-Amz-Content-Sha256", valid_595694
  var valid_595695 = header.getOrDefault("X-Amz-Algorithm")
  valid_595695 = validateParameter(valid_595695, JString, required = false,
                                 default = nil)
  if valid_595695 != nil:
    section.add "X-Amz-Algorithm", valid_595695
  var valid_595696 = header.getOrDefault("X-Amz-Signature")
  valid_595696 = validateParameter(valid_595696, JString, required = false,
                                 default = nil)
  if valid_595696 != nil:
    section.add "X-Amz-Signature", valid_595696
  var valid_595697 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595697 = validateParameter(valid_595697, JString, required = false,
                                 default = nil)
  if valid_595697 != nil:
    section.add "X-Amz-SignedHeaders", valid_595697
  var valid_595698 = header.getOrDefault("X-Amz-Credential")
  valid_595698 = validateParameter(valid_595698, JString, required = false,
                                 default = nil)
  if valid_595698 != nil:
    section.add "X-Amz-Credential", valid_595698
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595699: Call_GetDescribeCertificates_595683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_595699.validator(path, query, header, formData, body)
  let scheme = call_595699.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595699.url(scheme.get, call_595699.host, call_595699.base,
                         call_595699.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595699, url, valid)

proc call*(call_595700: Call_GetDescribeCertificates_595683; MaxRecords: int = 0;
          CertificateIdentifier: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeCertificates"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_595701 = newJObject()
  add(query_595701, "MaxRecords", newJInt(MaxRecords))
  add(query_595701, "CertificateIdentifier", newJString(CertificateIdentifier))
  if Filters != nil:
    query_595701.add "Filters", Filters
  add(query_595701, "Action", newJString(Action))
  add(query_595701, "Marker", newJString(Marker))
  add(query_595701, "Version", newJString(Version))
  result = call_595700.call(nil, query_595701, nil, nil, nil)

var getDescribeCertificates* = Call_GetDescribeCertificates_595683(
    name: "getDescribeCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_GetDescribeCertificates_595684, base: "/",
    url: url_GetDescribeCertificates_595685, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterBacktracks_595742 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBClusterBacktracks_595744(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterBacktracks_595743(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595745 = query.getOrDefault("Action")
  valid_595745 = validateParameter(valid_595745, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_595745 != nil:
    section.add "Action", valid_595745
  var valid_595746 = query.getOrDefault("Version")
  valid_595746 = validateParameter(valid_595746, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595746 != nil:
    section.add "Version", valid_595746
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595747 = header.getOrDefault("X-Amz-Date")
  valid_595747 = validateParameter(valid_595747, JString, required = false,
                                 default = nil)
  if valid_595747 != nil:
    section.add "X-Amz-Date", valid_595747
  var valid_595748 = header.getOrDefault("X-Amz-Security-Token")
  valid_595748 = validateParameter(valid_595748, JString, required = false,
                                 default = nil)
  if valid_595748 != nil:
    section.add "X-Amz-Security-Token", valid_595748
  var valid_595749 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595749 = validateParameter(valid_595749, JString, required = false,
                                 default = nil)
  if valid_595749 != nil:
    section.add "X-Amz-Content-Sha256", valid_595749
  var valid_595750 = header.getOrDefault("X-Amz-Algorithm")
  valid_595750 = validateParameter(valid_595750, JString, required = false,
                                 default = nil)
  if valid_595750 != nil:
    section.add "X-Amz-Algorithm", valid_595750
  var valid_595751 = header.getOrDefault("X-Amz-Signature")
  valid_595751 = validateParameter(valid_595751, JString, required = false,
                                 default = nil)
  if valid_595751 != nil:
    section.add "X-Amz-Signature", valid_595751
  var valid_595752 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595752 = validateParameter(valid_595752, JString, required = false,
                                 default = nil)
  if valid_595752 != nil:
    section.add "X-Amz-SignedHeaders", valid_595752
  var valid_595753 = header.getOrDefault("X-Amz-Credential")
  valid_595753 = validateParameter(valid_595753, JString, required = false,
                                 default = nil)
  if valid_595753 != nil:
    section.add "X-Amz-Credential", valid_595753
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_595754 = formData.getOrDefault("Marker")
  valid_595754 = validateParameter(valid_595754, JString, required = false,
                                 default = nil)
  if valid_595754 != nil:
    section.add "Marker", valid_595754
  var valid_595755 = formData.getOrDefault("BacktrackIdentifier")
  valid_595755 = validateParameter(valid_595755, JString, required = false,
                                 default = nil)
  if valid_595755 != nil:
    section.add "BacktrackIdentifier", valid_595755
  var valid_595756 = formData.getOrDefault("Filters")
  valid_595756 = validateParameter(valid_595756, JArray, required = false,
                                 default = nil)
  if valid_595756 != nil:
    section.add "Filters", valid_595756
  var valid_595757 = formData.getOrDefault("MaxRecords")
  valid_595757 = validateParameter(valid_595757, JInt, required = false, default = nil)
  if valid_595757 != nil:
    section.add "MaxRecords", valid_595757
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_595758 = formData.getOrDefault("DBClusterIdentifier")
  valid_595758 = validateParameter(valid_595758, JString, required = true,
                                 default = nil)
  if valid_595758 != nil:
    section.add "DBClusterIdentifier", valid_595758
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595759: Call_PostDescribeDBClusterBacktracks_595742;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595759.validator(path, query, header, formData, body)
  let scheme = call_595759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595759.url(scheme.get, call_595759.host, call_595759.base,
                         call_595759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595759, url, valid)

proc call*(call_595760: Call_PostDescribeDBClusterBacktracks_595742;
          DBClusterIdentifier: string; Marker: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_595761 = newJObject()
  var formData_595762 = newJObject()
  add(formData_595762, "Marker", newJString(Marker))
  add(query_595761, "Action", newJString(Action))
  add(formData_595762, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  if Filters != nil:
    formData_595762.add "Filters", Filters
  add(formData_595762, "MaxRecords", newJInt(MaxRecords))
  add(formData_595762, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595761, "Version", newJString(Version))
  result = call_595760.call(nil, query_595761, nil, formData_595762, nil)

var postDescribeDBClusterBacktracks* = Call_PostDescribeDBClusterBacktracks_595742(
    name: "postDescribeDBClusterBacktracks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_PostDescribeDBClusterBacktracks_595743, base: "/",
    url: url_PostDescribeDBClusterBacktracks_595744,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterBacktracks_595722 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBClusterBacktracks_595724(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterBacktracks_595723(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_595725 = query.getOrDefault("MaxRecords")
  valid_595725 = validateParameter(valid_595725, JInt, required = false, default = nil)
  if valid_595725 != nil:
    section.add "MaxRecords", valid_595725
  var valid_595726 = query.getOrDefault("BacktrackIdentifier")
  valid_595726 = validateParameter(valid_595726, JString, required = false,
                                 default = nil)
  if valid_595726 != nil:
    section.add "BacktrackIdentifier", valid_595726
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_595727 = query.getOrDefault("DBClusterIdentifier")
  valid_595727 = validateParameter(valid_595727, JString, required = true,
                                 default = nil)
  if valid_595727 != nil:
    section.add "DBClusterIdentifier", valid_595727
  var valid_595728 = query.getOrDefault("Filters")
  valid_595728 = validateParameter(valid_595728, JArray, required = false,
                                 default = nil)
  if valid_595728 != nil:
    section.add "Filters", valid_595728
  var valid_595729 = query.getOrDefault("Action")
  valid_595729 = validateParameter(valid_595729, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_595729 != nil:
    section.add "Action", valid_595729
  var valid_595730 = query.getOrDefault("Marker")
  valid_595730 = validateParameter(valid_595730, JString, required = false,
                                 default = nil)
  if valid_595730 != nil:
    section.add "Marker", valid_595730
  var valid_595731 = query.getOrDefault("Version")
  valid_595731 = validateParameter(valid_595731, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595731 != nil:
    section.add "Version", valid_595731
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595732 = header.getOrDefault("X-Amz-Date")
  valid_595732 = validateParameter(valid_595732, JString, required = false,
                                 default = nil)
  if valid_595732 != nil:
    section.add "X-Amz-Date", valid_595732
  var valid_595733 = header.getOrDefault("X-Amz-Security-Token")
  valid_595733 = validateParameter(valid_595733, JString, required = false,
                                 default = nil)
  if valid_595733 != nil:
    section.add "X-Amz-Security-Token", valid_595733
  var valid_595734 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595734 = validateParameter(valid_595734, JString, required = false,
                                 default = nil)
  if valid_595734 != nil:
    section.add "X-Amz-Content-Sha256", valid_595734
  var valid_595735 = header.getOrDefault("X-Amz-Algorithm")
  valid_595735 = validateParameter(valid_595735, JString, required = false,
                                 default = nil)
  if valid_595735 != nil:
    section.add "X-Amz-Algorithm", valid_595735
  var valid_595736 = header.getOrDefault("X-Amz-Signature")
  valid_595736 = validateParameter(valid_595736, JString, required = false,
                                 default = nil)
  if valid_595736 != nil:
    section.add "X-Amz-Signature", valid_595736
  var valid_595737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595737 = validateParameter(valid_595737, JString, required = false,
                                 default = nil)
  if valid_595737 != nil:
    section.add "X-Amz-SignedHeaders", valid_595737
  var valid_595738 = header.getOrDefault("X-Amz-Credential")
  valid_595738 = validateParameter(valid_595738, JString, required = false,
                                 default = nil)
  if valid_595738 != nil:
    section.add "X-Amz-Credential", valid_595738
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595739: Call_GetDescribeDBClusterBacktracks_595722; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595739.validator(path, query, header, formData, body)
  let scheme = call_595739.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595739.url(scheme.get, call_595739.host, call_595739.base,
                         call_595739.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595739, url, valid)

proc call*(call_595740: Call_GetDescribeDBClusterBacktracks_595722;
          DBClusterIdentifier: string; MaxRecords: int = 0;
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeDBClusterBacktracks"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_595741 = newJObject()
  add(query_595741, "MaxRecords", newJInt(MaxRecords))
  add(query_595741, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  add(query_595741, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_595741.add "Filters", Filters
  add(query_595741, "Action", newJString(Action))
  add(query_595741, "Marker", newJString(Marker))
  add(query_595741, "Version", newJString(Version))
  result = call_595740.call(nil, query_595741, nil, nil, nil)

var getDescribeDBClusterBacktracks* = Call_GetDescribeDBClusterBacktracks_595722(
    name: "getDescribeDBClusterBacktracks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_GetDescribeDBClusterBacktracks_595723, base: "/",
    url: url_GetDescribeDBClusterBacktracks_595724,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterEndpoints_595783 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBClusterEndpoints_595785(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterEndpoints_595784(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595786 = query.getOrDefault("Action")
  valid_595786 = validateParameter(valid_595786, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_595786 != nil:
    section.add "Action", valid_595786
  var valid_595787 = query.getOrDefault("Version")
  valid_595787 = validateParameter(valid_595787, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595787 != nil:
    section.add "Version", valid_595787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595788 = header.getOrDefault("X-Amz-Date")
  valid_595788 = validateParameter(valid_595788, JString, required = false,
                                 default = nil)
  if valid_595788 != nil:
    section.add "X-Amz-Date", valid_595788
  var valid_595789 = header.getOrDefault("X-Amz-Security-Token")
  valid_595789 = validateParameter(valid_595789, JString, required = false,
                                 default = nil)
  if valid_595789 != nil:
    section.add "X-Amz-Security-Token", valid_595789
  var valid_595790 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595790 = validateParameter(valid_595790, JString, required = false,
                                 default = nil)
  if valid_595790 != nil:
    section.add "X-Amz-Content-Sha256", valid_595790
  var valid_595791 = header.getOrDefault("X-Amz-Algorithm")
  valid_595791 = validateParameter(valid_595791, JString, required = false,
                                 default = nil)
  if valid_595791 != nil:
    section.add "X-Amz-Algorithm", valid_595791
  var valid_595792 = header.getOrDefault("X-Amz-Signature")
  valid_595792 = validateParameter(valid_595792, JString, required = false,
                                 default = nil)
  if valid_595792 != nil:
    section.add "X-Amz-Signature", valid_595792
  var valid_595793 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595793 = validateParameter(valid_595793, JString, required = false,
                                 default = nil)
  if valid_595793 != nil:
    section.add "X-Amz-SignedHeaders", valid_595793
  var valid_595794 = header.getOrDefault("X-Amz-Credential")
  valid_595794 = validateParameter(valid_595794, JString, required = false,
                                 default = nil)
  if valid_595794 != nil:
    section.add "X-Amz-Credential", valid_595794
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_595795 = formData.getOrDefault("Marker")
  valid_595795 = validateParameter(valid_595795, JString, required = false,
                                 default = nil)
  if valid_595795 != nil:
    section.add "Marker", valid_595795
  var valid_595796 = formData.getOrDefault("Filters")
  valid_595796 = validateParameter(valid_595796, JArray, required = false,
                                 default = nil)
  if valid_595796 != nil:
    section.add "Filters", valid_595796
  var valid_595797 = formData.getOrDefault("MaxRecords")
  valid_595797 = validateParameter(valid_595797, JInt, required = false, default = nil)
  if valid_595797 != nil:
    section.add "MaxRecords", valid_595797
  var valid_595798 = formData.getOrDefault("DBClusterIdentifier")
  valid_595798 = validateParameter(valid_595798, JString, required = false,
                                 default = nil)
  if valid_595798 != nil:
    section.add "DBClusterIdentifier", valid_595798
  var valid_595799 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_595799 = validateParameter(valid_595799, JString, required = false,
                                 default = nil)
  if valid_595799 != nil:
    section.add "DBClusterEndpointIdentifier", valid_595799
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595800: Call_PostDescribeDBClusterEndpoints_595783; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595800.validator(path, query, header, formData, body)
  let scheme = call_595800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595800.url(scheme.get, call_595800.host, call_595800.base,
                         call_595800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595800, url, valid)

proc call*(call_595801: Call_PostDescribeDBClusterEndpoints_595783;
          Marker: string = ""; Action: string = "DescribeDBClusterEndpoints";
          Filters: JsonNode = nil; MaxRecords: int = 0;
          DBClusterIdentifier: string = "";
          DBClusterEndpointIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_595802 = newJObject()
  var formData_595803 = newJObject()
  add(formData_595803, "Marker", newJString(Marker))
  add(query_595802, "Action", newJString(Action))
  if Filters != nil:
    formData_595803.add "Filters", Filters
  add(formData_595803, "MaxRecords", newJInt(MaxRecords))
  add(formData_595803, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_595803, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_595802, "Version", newJString(Version))
  result = call_595801.call(nil, query_595802, nil, formData_595803, nil)

var postDescribeDBClusterEndpoints* = Call_PostDescribeDBClusterEndpoints_595783(
    name: "postDescribeDBClusterEndpoints", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_PostDescribeDBClusterEndpoints_595784, base: "/",
    url: url_PostDescribeDBClusterEndpoints_595785,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterEndpoints_595763 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBClusterEndpoints_595765(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterEndpoints_595764(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Version: JString (required)
  section = newJObject()
  var valid_595766 = query.getOrDefault("MaxRecords")
  valid_595766 = validateParameter(valid_595766, JInt, required = false, default = nil)
  if valid_595766 != nil:
    section.add "MaxRecords", valid_595766
  var valid_595767 = query.getOrDefault("DBClusterIdentifier")
  valid_595767 = validateParameter(valid_595767, JString, required = false,
                                 default = nil)
  if valid_595767 != nil:
    section.add "DBClusterIdentifier", valid_595767
  var valid_595768 = query.getOrDefault("Filters")
  valid_595768 = validateParameter(valid_595768, JArray, required = false,
                                 default = nil)
  if valid_595768 != nil:
    section.add "Filters", valid_595768
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595769 = query.getOrDefault("Action")
  valid_595769 = validateParameter(valid_595769, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_595769 != nil:
    section.add "Action", valid_595769
  var valid_595770 = query.getOrDefault("Marker")
  valid_595770 = validateParameter(valid_595770, JString, required = false,
                                 default = nil)
  if valid_595770 != nil:
    section.add "Marker", valid_595770
  var valid_595771 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_595771 = validateParameter(valid_595771, JString, required = false,
                                 default = nil)
  if valid_595771 != nil:
    section.add "DBClusterEndpointIdentifier", valid_595771
  var valid_595772 = query.getOrDefault("Version")
  valid_595772 = validateParameter(valid_595772, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595772 != nil:
    section.add "Version", valid_595772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595773 = header.getOrDefault("X-Amz-Date")
  valid_595773 = validateParameter(valid_595773, JString, required = false,
                                 default = nil)
  if valid_595773 != nil:
    section.add "X-Amz-Date", valid_595773
  var valid_595774 = header.getOrDefault("X-Amz-Security-Token")
  valid_595774 = validateParameter(valid_595774, JString, required = false,
                                 default = nil)
  if valid_595774 != nil:
    section.add "X-Amz-Security-Token", valid_595774
  var valid_595775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595775 = validateParameter(valid_595775, JString, required = false,
                                 default = nil)
  if valid_595775 != nil:
    section.add "X-Amz-Content-Sha256", valid_595775
  var valid_595776 = header.getOrDefault("X-Amz-Algorithm")
  valid_595776 = validateParameter(valid_595776, JString, required = false,
                                 default = nil)
  if valid_595776 != nil:
    section.add "X-Amz-Algorithm", valid_595776
  var valid_595777 = header.getOrDefault("X-Amz-Signature")
  valid_595777 = validateParameter(valid_595777, JString, required = false,
                                 default = nil)
  if valid_595777 != nil:
    section.add "X-Amz-Signature", valid_595777
  var valid_595778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595778 = validateParameter(valid_595778, JString, required = false,
                                 default = nil)
  if valid_595778 != nil:
    section.add "X-Amz-SignedHeaders", valid_595778
  var valid_595779 = header.getOrDefault("X-Amz-Credential")
  valid_595779 = validateParameter(valid_595779, JString, required = false,
                                 default = nil)
  if valid_595779 != nil:
    section.add "X-Amz-Credential", valid_595779
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595780: Call_GetDescribeDBClusterEndpoints_595763; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595780.validator(path, query, header, formData, body)
  let scheme = call_595780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595780.url(scheme.get, call_595780.host, call_595780.base,
                         call_595780.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595780, url, valid)

proc call*(call_595781: Call_GetDescribeDBClusterEndpoints_595763;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Filters: JsonNode = nil; Action: string = "DescribeDBClusterEndpoints";
          Marker: string = ""; DBClusterEndpointIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_595782 = newJObject()
  add(query_595782, "MaxRecords", newJInt(MaxRecords))
  add(query_595782, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_595782.add "Filters", Filters
  add(query_595782, "Action", newJString(Action))
  add(query_595782, "Marker", newJString(Marker))
  add(query_595782, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_595782, "Version", newJString(Version))
  result = call_595781.call(nil, query_595782, nil, nil, nil)

var getDescribeDBClusterEndpoints* = Call_GetDescribeDBClusterEndpoints_595763(
    name: "getDescribeDBClusterEndpoints", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_GetDescribeDBClusterEndpoints_595764, base: "/",
    url: url_GetDescribeDBClusterEndpoints_595765,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_595823 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBClusterParameterGroups_595825(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_595824(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595826 = query.getOrDefault("Action")
  valid_595826 = validateParameter(valid_595826, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_595826 != nil:
    section.add "Action", valid_595826
  var valid_595827 = query.getOrDefault("Version")
  valid_595827 = validateParameter(valid_595827, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595827 != nil:
    section.add "Version", valid_595827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595828 = header.getOrDefault("X-Amz-Date")
  valid_595828 = validateParameter(valid_595828, JString, required = false,
                                 default = nil)
  if valid_595828 != nil:
    section.add "X-Amz-Date", valid_595828
  var valid_595829 = header.getOrDefault("X-Amz-Security-Token")
  valid_595829 = validateParameter(valid_595829, JString, required = false,
                                 default = nil)
  if valid_595829 != nil:
    section.add "X-Amz-Security-Token", valid_595829
  var valid_595830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595830 = validateParameter(valid_595830, JString, required = false,
                                 default = nil)
  if valid_595830 != nil:
    section.add "X-Amz-Content-Sha256", valid_595830
  var valid_595831 = header.getOrDefault("X-Amz-Algorithm")
  valid_595831 = validateParameter(valid_595831, JString, required = false,
                                 default = nil)
  if valid_595831 != nil:
    section.add "X-Amz-Algorithm", valid_595831
  var valid_595832 = header.getOrDefault("X-Amz-Signature")
  valid_595832 = validateParameter(valid_595832, JString, required = false,
                                 default = nil)
  if valid_595832 != nil:
    section.add "X-Amz-Signature", valid_595832
  var valid_595833 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595833 = validateParameter(valid_595833, JString, required = false,
                                 default = nil)
  if valid_595833 != nil:
    section.add "X-Amz-SignedHeaders", valid_595833
  var valid_595834 = header.getOrDefault("X-Amz-Credential")
  valid_595834 = validateParameter(valid_595834, JString, required = false,
                                 default = nil)
  if valid_595834 != nil:
    section.add "X-Amz-Credential", valid_595834
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595835 = formData.getOrDefault("Marker")
  valid_595835 = validateParameter(valid_595835, JString, required = false,
                                 default = nil)
  if valid_595835 != nil:
    section.add "Marker", valid_595835
  var valid_595836 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_595836 = validateParameter(valid_595836, JString, required = false,
                                 default = nil)
  if valid_595836 != nil:
    section.add "DBClusterParameterGroupName", valid_595836
  var valid_595837 = formData.getOrDefault("Filters")
  valid_595837 = validateParameter(valid_595837, JArray, required = false,
                                 default = nil)
  if valid_595837 != nil:
    section.add "Filters", valid_595837
  var valid_595838 = formData.getOrDefault("MaxRecords")
  valid_595838 = validateParameter(valid_595838, JInt, required = false, default = nil)
  if valid_595838 != nil:
    section.add "MaxRecords", valid_595838
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595839: Call_PostDescribeDBClusterParameterGroups_595823;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595839.validator(path, query, header, formData, body)
  let scheme = call_595839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595839.url(scheme.get, call_595839.host, call_595839.base,
                         call_595839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595839, url, valid)

proc call*(call_595840: Call_PostDescribeDBClusterParameterGroups_595823;
          Marker: string = ""; Action: string = "DescribeDBClusterParameterGroups";
          DBClusterParameterGroupName: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_595841 = newJObject()
  var formData_595842 = newJObject()
  add(formData_595842, "Marker", newJString(Marker))
  add(query_595841, "Action", newJString(Action))
  add(formData_595842, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_595842.add "Filters", Filters
  add(formData_595842, "MaxRecords", newJInt(MaxRecords))
  add(query_595841, "Version", newJString(Version))
  result = call_595840.call(nil, query_595841, nil, formData_595842, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_595823(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_595824, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_595825,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_595804 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBClusterParameterGroups_595806(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_595805(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_595807 = query.getOrDefault("MaxRecords")
  valid_595807 = validateParameter(valid_595807, JInt, required = false, default = nil)
  if valid_595807 != nil:
    section.add "MaxRecords", valid_595807
  var valid_595808 = query.getOrDefault("DBClusterParameterGroupName")
  valid_595808 = validateParameter(valid_595808, JString, required = false,
                                 default = nil)
  if valid_595808 != nil:
    section.add "DBClusterParameterGroupName", valid_595808
  var valid_595809 = query.getOrDefault("Filters")
  valid_595809 = validateParameter(valid_595809, JArray, required = false,
                                 default = nil)
  if valid_595809 != nil:
    section.add "Filters", valid_595809
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595810 = query.getOrDefault("Action")
  valid_595810 = validateParameter(valid_595810, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_595810 != nil:
    section.add "Action", valid_595810
  var valid_595811 = query.getOrDefault("Marker")
  valid_595811 = validateParameter(valid_595811, JString, required = false,
                                 default = nil)
  if valid_595811 != nil:
    section.add "Marker", valid_595811
  var valid_595812 = query.getOrDefault("Version")
  valid_595812 = validateParameter(valid_595812, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595812 != nil:
    section.add "Version", valid_595812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595813 = header.getOrDefault("X-Amz-Date")
  valid_595813 = validateParameter(valid_595813, JString, required = false,
                                 default = nil)
  if valid_595813 != nil:
    section.add "X-Amz-Date", valid_595813
  var valid_595814 = header.getOrDefault("X-Amz-Security-Token")
  valid_595814 = validateParameter(valid_595814, JString, required = false,
                                 default = nil)
  if valid_595814 != nil:
    section.add "X-Amz-Security-Token", valid_595814
  var valid_595815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595815 = validateParameter(valid_595815, JString, required = false,
                                 default = nil)
  if valid_595815 != nil:
    section.add "X-Amz-Content-Sha256", valid_595815
  var valid_595816 = header.getOrDefault("X-Amz-Algorithm")
  valid_595816 = validateParameter(valid_595816, JString, required = false,
                                 default = nil)
  if valid_595816 != nil:
    section.add "X-Amz-Algorithm", valid_595816
  var valid_595817 = header.getOrDefault("X-Amz-Signature")
  valid_595817 = validateParameter(valid_595817, JString, required = false,
                                 default = nil)
  if valid_595817 != nil:
    section.add "X-Amz-Signature", valid_595817
  var valid_595818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595818 = validateParameter(valid_595818, JString, required = false,
                                 default = nil)
  if valid_595818 != nil:
    section.add "X-Amz-SignedHeaders", valid_595818
  var valid_595819 = header.getOrDefault("X-Amz-Credential")
  valid_595819 = validateParameter(valid_595819, JString, required = false,
                                 default = nil)
  if valid_595819 != nil:
    section.add "X-Amz-Credential", valid_595819
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595820: Call_GetDescribeDBClusterParameterGroups_595804;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595820.validator(path, query, header, formData, body)
  let scheme = call_595820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595820.url(scheme.get, call_595820.host, call_595820.base,
                         call_595820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595820, url, valid)

proc call*(call_595821: Call_GetDescribeDBClusterParameterGroups_595804;
          MaxRecords: int = 0; DBClusterParameterGroupName: string = "";
          Filters: JsonNode = nil;
          Action: string = "DescribeDBClusterParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_595822 = newJObject()
  add(query_595822, "MaxRecords", newJInt(MaxRecords))
  add(query_595822, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_595822.add "Filters", Filters
  add(query_595822, "Action", newJString(Action))
  add(query_595822, "Marker", newJString(Marker))
  add(query_595822, "Version", newJString(Version))
  result = call_595821.call(nil, query_595822, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_595804(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_595805, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_595806,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_595863 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBClusterParameters_595865(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterParameters_595864(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595866 = query.getOrDefault("Action")
  valid_595866 = validateParameter(valid_595866, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_595866 != nil:
    section.add "Action", valid_595866
  var valid_595867 = query.getOrDefault("Version")
  valid_595867 = validateParameter(valid_595867, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595867 != nil:
    section.add "Version", valid_595867
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595868 = header.getOrDefault("X-Amz-Date")
  valid_595868 = validateParameter(valid_595868, JString, required = false,
                                 default = nil)
  if valid_595868 != nil:
    section.add "X-Amz-Date", valid_595868
  var valid_595869 = header.getOrDefault("X-Amz-Security-Token")
  valid_595869 = validateParameter(valid_595869, JString, required = false,
                                 default = nil)
  if valid_595869 != nil:
    section.add "X-Amz-Security-Token", valid_595869
  var valid_595870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595870 = validateParameter(valid_595870, JString, required = false,
                                 default = nil)
  if valid_595870 != nil:
    section.add "X-Amz-Content-Sha256", valid_595870
  var valid_595871 = header.getOrDefault("X-Amz-Algorithm")
  valid_595871 = validateParameter(valid_595871, JString, required = false,
                                 default = nil)
  if valid_595871 != nil:
    section.add "X-Amz-Algorithm", valid_595871
  var valid_595872 = header.getOrDefault("X-Amz-Signature")
  valid_595872 = validateParameter(valid_595872, JString, required = false,
                                 default = nil)
  if valid_595872 != nil:
    section.add "X-Amz-Signature", valid_595872
  var valid_595873 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595873 = validateParameter(valid_595873, JString, required = false,
                                 default = nil)
  if valid_595873 != nil:
    section.add "X-Amz-SignedHeaders", valid_595873
  var valid_595874 = header.getOrDefault("X-Amz-Credential")
  valid_595874 = validateParameter(valid_595874, JString, required = false,
                                 default = nil)
  if valid_595874 != nil:
    section.add "X-Amz-Credential", valid_595874
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  section = newJObject()
  var valid_595875 = formData.getOrDefault("Marker")
  valid_595875 = validateParameter(valid_595875, JString, required = false,
                                 default = nil)
  if valid_595875 != nil:
    section.add "Marker", valid_595875
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_595876 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_595876 = validateParameter(valid_595876, JString, required = true,
                                 default = nil)
  if valid_595876 != nil:
    section.add "DBClusterParameterGroupName", valid_595876
  var valid_595877 = formData.getOrDefault("Filters")
  valid_595877 = validateParameter(valid_595877, JArray, required = false,
                                 default = nil)
  if valid_595877 != nil:
    section.add "Filters", valid_595877
  var valid_595878 = formData.getOrDefault("MaxRecords")
  valid_595878 = validateParameter(valid_595878, JInt, required = false, default = nil)
  if valid_595878 != nil:
    section.add "MaxRecords", valid_595878
  var valid_595879 = formData.getOrDefault("Source")
  valid_595879 = validateParameter(valid_595879, JString, required = false,
                                 default = nil)
  if valid_595879 != nil:
    section.add "Source", valid_595879
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595880: Call_PostDescribeDBClusterParameters_595863;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595880.validator(path, query, header, formData, body)
  let scheme = call_595880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595880.url(scheme.get, call_595880.host, call_595880.base,
                         call_595880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595880, url, valid)

proc call*(call_595881: Call_PostDescribeDBClusterParameters_595863;
          DBClusterParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  var query_595882 = newJObject()
  var formData_595883 = newJObject()
  add(formData_595883, "Marker", newJString(Marker))
  add(query_595882, "Action", newJString(Action))
  add(formData_595883, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_595883.add "Filters", Filters
  add(formData_595883, "MaxRecords", newJInt(MaxRecords))
  add(query_595882, "Version", newJString(Version))
  add(formData_595883, "Source", newJString(Source))
  result = call_595881.call(nil, query_595882, nil, formData_595883, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_595863(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_595864, base: "/",
    url: url_PostDescribeDBClusterParameters_595865,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_595843 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBClusterParameters_595845(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterParameters_595844(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_595846 = query.getOrDefault("MaxRecords")
  valid_595846 = validateParameter(valid_595846, JInt, required = false, default = nil)
  if valid_595846 != nil:
    section.add "MaxRecords", valid_595846
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_595847 = query.getOrDefault("DBClusterParameterGroupName")
  valid_595847 = validateParameter(valid_595847, JString, required = true,
                                 default = nil)
  if valid_595847 != nil:
    section.add "DBClusterParameterGroupName", valid_595847
  var valid_595848 = query.getOrDefault("Filters")
  valid_595848 = validateParameter(valid_595848, JArray, required = false,
                                 default = nil)
  if valid_595848 != nil:
    section.add "Filters", valid_595848
  var valid_595849 = query.getOrDefault("Action")
  valid_595849 = validateParameter(valid_595849, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_595849 != nil:
    section.add "Action", valid_595849
  var valid_595850 = query.getOrDefault("Marker")
  valid_595850 = validateParameter(valid_595850, JString, required = false,
                                 default = nil)
  if valid_595850 != nil:
    section.add "Marker", valid_595850
  var valid_595851 = query.getOrDefault("Source")
  valid_595851 = validateParameter(valid_595851, JString, required = false,
                                 default = nil)
  if valid_595851 != nil:
    section.add "Source", valid_595851
  var valid_595852 = query.getOrDefault("Version")
  valid_595852 = validateParameter(valid_595852, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595852 != nil:
    section.add "Version", valid_595852
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595853 = header.getOrDefault("X-Amz-Date")
  valid_595853 = validateParameter(valid_595853, JString, required = false,
                                 default = nil)
  if valid_595853 != nil:
    section.add "X-Amz-Date", valid_595853
  var valid_595854 = header.getOrDefault("X-Amz-Security-Token")
  valid_595854 = validateParameter(valid_595854, JString, required = false,
                                 default = nil)
  if valid_595854 != nil:
    section.add "X-Amz-Security-Token", valid_595854
  var valid_595855 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595855 = validateParameter(valid_595855, JString, required = false,
                                 default = nil)
  if valid_595855 != nil:
    section.add "X-Amz-Content-Sha256", valid_595855
  var valid_595856 = header.getOrDefault("X-Amz-Algorithm")
  valid_595856 = validateParameter(valid_595856, JString, required = false,
                                 default = nil)
  if valid_595856 != nil:
    section.add "X-Amz-Algorithm", valid_595856
  var valid_595857 = header.getOrDefault("X-Amz-Signature")
  valid_595857 = validateParameter(valid_595857, JString, required = false,
                                 default = nil)
  if valid_595857 != nil:
    section.add "X-Amz-Signature", valid_595857
  var valid_595858 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595858 = validateParameter(valid_595858, JString, required = false,
                                 default = nil)
  if valid_595858 != nil:
    section.add "X-Amz-SignedHeaders", valid_595858
  var valid_595859 = header.getOrDefault("X-Amz-Credential")
  valid_595859 = validateParameter(valid_595859, JString, required = false,
                                 default = nil)
  if valid_595859 != nil:
    section.add "X-Amz-Credential", valid_595859
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595860: Call_GetDescribeDBClusterParameters_595843; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595860.validator(path, query, header, formData, body)
  let scheme = call_595860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595860.url(scheme.get, call_595860.host, call_595860.base,
                         call_595860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595860, url, valid)

proc call*(call_595861: Call_GetDescribeDBClusterParameters_595843;
          DBClusterParameterGroupName: string; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBClusterParameters";
          Marker: string = ""; Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   Version: string (required)
  var query_595862 = newJObject()
  add(query_595862, "MaxRecords", newJInt(MaxRecords))
  add(query_595862, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_595862.add "Filters", Filters
  add(query_595862, "Action", newJString(Action))
  add(query_595862, "Marker", newJString(Marker))
  add(query_595862, "Source", newJString(Source))
  add(query_595862, "Version", newJString(Version))
  result = call_595861.call(nil, query_595862, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_595843(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_595844, base: "/",
    url: url_GetDescribeDBClusterParameters_595845,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_595900 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBClusterSnapshotAttributes_595902(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_595901(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595903 = query.getOrDefault("Action")
  valid_595903 = validateParameter(valid_595903, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_595903 != nil:
    section.add "Action", valid_595903
  var valid_595904 = query.getOrDefault("Version")
  valid_595904 = validateParameter(valid_595904, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595904 != nil:
    section.add "Version", valid_595904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595905 = header.getOrDefault("X-Amz-Date")
  valid_595905 = validateParameter(valid_595905, JString, required = false,
                                 default = nil)
  if valid_595905 != nil:
    section.add "X-Amz-Date", valid_595905
  var valid_595906 = header.getOrDefault("X-Amz-Security-Token")
  valid_595906 = validateParameter(valid_595906, JString, required = false,
                                 default = nil)
  if valid_595906 != nil:
    section.add "X-Amz-Security-Token", valid_595906
  var valid_595907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595907 = validateParameter(valid_595907, JString, required = false,
                                 default = nil)
  if valid_595907 != nil:
    section.add "X-Amz-Content-Sha256", valid_595907
  var valid_595908 = header.getOrDefault("X-Amz-Algorithm")
  valid_595908 = validateParameter(valid_595908, JString, required = false,
                                 default = nil)
  if valid_595908 != nil:
    section.add "X-Amz-Algorithm", valid_595908
  var valid_595909 = header.getOrDefault("X-Amz-Signature")
  valid_595909 = validateParameter(valid_595909, JString, required = false,
                                 default = nil)
  if valid_595909 != nil:
    section.add "X-Amz-Signature", valid_595909
  var valid_595910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595910 = validateParameter(valid_595910, JString, required = false,
                                 default = nil)
  if valid_595910 != nil:
    section.add "X-Amz-SignedHeaders", valid_595910
  var valid_595911 = header.getOrDefault("X-Amz-Credential")
  valid_595911 = validateParameter(valid_595911, JString, required = false,
                                 default = nil)
  if valid_595911 != nil:
    section.add "X-Amz-Credential", valid_595911
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_595912 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_595912 = validateParameter(valid_595912, JString, required = true,
                                 default = nil)
  if valid_595912 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_595912
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595913: Call_PostDescribeDBClusterSnapshotAttributes_595900;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595913.validator(path, query, header, formData, body)
  let scheme = call_595913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595913.url(scheme.get, call_595913.host, call_595913.base,
                         call_595913.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595913, url, valid)

proc call*(call_595914: Call_PostDescribeDBClusterSnapshotAttributes_595900;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595915 = newJObject()
  var formData_595916 = newJObject()
  add(formData_595916, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_595915, "Action", newJString(Action))
  add(query_595915, "Version", newJString(Version))
  result = call_595914.call(nil, query_595915, nil, formData_595916, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_595900(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_595901, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_595902,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_595884 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBClusterSnapshotAttributes_595886(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_595885(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_595887 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_595887 = validateParameter(valid_595887, JString, required = true,
                                 default = nil)
  if valid_595887 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_595887
  var valid_595888 = query.getOrDefault("Action")
  valid_595888 = validateParameter(valid_595888, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_595888 != nil:
    section.add "Action", valid_595888
  var valid_595889 = query.getOrDefault("Version")
  valid_595889 = validateParameter(valid_595889, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595889 != nil:
    section.add "Version", valid_595889
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595890 = header.getOrDefault("X-Amz-Date")
  valid_595890 = validateParameter(valid_595890, JString, required = false,
                                 default = nil)
  if valid_595890 != nil:
    section.add "X-Amz-Date", valid_595890
  var valid_595891 = header.getOrDefault("X-Amz-Security-Token")
  valid_595891 = validateParameter(valid_595891, JString, required = false,
                                 default = nil)
  if valid_595891 != nil:
    section.add "X-Amz-Security-Token", valid_595891
  var valid_595892 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595892 = validateParameter(valid_595892, JString, required = false,
                                 default = nil)
  if valid_595892 != nil:
    section.add "X-Amz-Content-Sha256", valid_595892
  var valid_595893 = header.getOrDefault("X-Amz-Algorithm")
  valid_595893 = validateParameter(valid_595893, JString, required = false,
                                 default = nil)
  if valid_595893 != nil:
    section.add "X-Amz-Algorithm", valid_595893
  var valid_595894 = header.getOrDefault("X-Amz-Signature")
  valid_595894 = validateParameter(valid_595894, JString, required = false,
                                 default = nil)
  if valid_595894 != nil:
    section.add "X-Amz-Signature", valid_595894
  var valid_595895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595895 = validateParameter(valid_595895, JString, required = false,
                                 default = nil)
  if valid_595895 != nil:
    section.add "X-Amz-SignedHeaders", valid_595895
  var valid_595896 = header.getOrDefault("X-Amz-Credential")
  valid_595896 = validateParameter(valid_595896, JString, required = false,
                                 default = nil)
  if valid_595896 != nil:
    section.add "X-Amz-Credential", valid_595896
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595897: Call_GetDescribeDBClusterSnapshotAttributes_595884;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595897.validator(path, query, header, formData, body)
  let scheme = call_595897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595897.url(scheme.get, call_595897.host, call_595897.base,
                         call_595897.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595897, url, valid)

proc call*(call_595898: Call_GetDescribeDBClusterSnapshotAttributes_595884;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595899 = newJObject()
  add(query_595899, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_595899, "Action", newJString(Action))
  add(query_595899, "Version", newJString(Version))
  result = call_595898.call(nil, query_595899, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_595884(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_595885, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_595886,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_595940 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBClusterSnapshots_595942(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_595941(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595943 = query.getOrDefault("Action")
  valid_595943 = validateParameter(valid_595943, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_595943 != nil:
    section.add "Action", valid_595943
  var valid_595944 = query.getOrDefault("Version")
  valid_595944 = validateParameter(valid_595944, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595944 != nil:
    section.add "Version", valid_595944
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595945 = header.getOrDefault("X-Amz-Date")
  valid_595945 = validateParameter(valid_595945, JString, required = false,
                                 default = nil)
  if valid_595945 != nil:
    section.add "X-Amz-Date", valid_595945
  var valid_595946 = header.getOrDefault("X-Amz-Security-Token")
  valid_595946 = validateParameter(valid_595946, JString, required = false,
                                 default = nil)
  if valid_595946 != nil:
    section.add "X-Amz-Security-Token", valid_595946
  var valid_595947 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595947 = validateParameter(valid_595947, JString, required = false,
                                 default = nil)
  if valid_595947 != nil:
    section.add "X-Amz-Content-Sha256", valid_595947
  var valid_595948 = header.getOrDefault("X-Amz-Algorithm")
  valid_595948 = validateParameter(valid_595948, JString, required = false,
                                 default = nil)
  if valid_595948 != nil:
    section.add "X-Amz-Algorithm", valid_595948
  var valid_595949 = header.getOrDefault("X-Amz-Signature")
  valid_595949 = validateParameter(valid_595949, JString, required = false,
                                 default = nil)
  if valid_595949 != nil:
    section.add "X-Amz-Signature", valid_595949
  var valid_595950 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595950 = validateParameter(valid_595950, JString, required = false,
                                 default = nil)
  if valid_595950 != nil:
    section.add "X-Amz-SignedHeaders", valid_595950
  var valid_595951 = header.getOrDefault("X-Amz-Credential")
  valid_595951 = validateParameter(valid_595951, JString, required = false,
                                 default = nil)
  if valid_595951 != nil:
    section.add "X-Amz-Credential", valid_595951
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_595952 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_595952 = validateParameter(valid_595952, JString, required = false,
                                 default = nil)
  if valid_595952 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_595952
  var valid_595953 = formData.getOrDefault("IncludeShared")
  valid_595953 = validateParameter(valid_595953, JBool, required = false, default = nil)
  if valid_595953 != nil:
    section.add "IncludeShared", valid_595953
  var valid_595954 = formData.getOrDefault("IncludePublic")
  valid_595954 = validateParameter(valid_595954, JBool, required = false, default = nil)
  if valid_595954 != nil:
    section.add "IncludePublic", valid_595954
  var valid_595955 = formData.getOrDefault("SnapshotType")
  valid_595955 = validateParameter(valid_595955, JString, required = false,
                                 default = nil)
  if valid_595955 != nil:
    section.add "SnapshotType", valid_595955
  var valid_595956 = formData.getOrDefault("Marker")
  valid_595956 = validateParameter(valid_595956, JString, required = false,
                                 default = nil)
  if valid_595956 != nil:
    section.add "Marker", valid_595956
  var valid_595957 = formData.getOrDefault("Filters")
  valid_595957 = validateParameter(valid_595957, JArray, required = false,
                                 default = nil)
  if valid_595957 != nil:
    section.add "Filters", valid_595957
  var valid_595958 = formData.getOrDefault("MaxRecords")
  valid_595958 = validateParameter(valid_595958, JInt, required = false, default = nil)
  if valid_595958 != nil:
    section.add "MaxRecords", valid_595958
  var valid_595959 = formData.getOrDefault("DBClusterIdentifier")
  valid_595959 = validateParameter(valid_595959, JString, required = false,
                                 default = nil)
  if valid_595959 != nil:
    section.add "DBClusterIdentifier", valid_595959
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595960: Call_PostDescribeDBClusterSnapshots_595940; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595960.validator(path, query, header, formData, body)
  let scheme = call_595960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595960.url(scheme.get, call_595960.host, call_595960.base,
                         call_595960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595960, url, valid)

proc call*(call_595961: Call_PostDescribeDBClusterSnapshots_595940;
          DBClusterSnapshotIdentifier: string = ""; IncludeShared: bool = false;
          IncludePublic: bool = false; SnapshotType: string = ""; Marker: string = "";
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_595962 = newJObject()
  var formData_595963 = newJObject()
  add(formData_595963, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_595963, "IncludeShared", newJBool(IncludeShared))
  add(formData_595963, "IncludePublic", newJBool(IncludePublic))
  add(formData_595963, "SnapshotType", newJString(SnapshotType))
  add(formData_595963, "Marker", newJString(Marker))
  add(query_595962, "Action", newJString(Action))
  if Filters != nil:
    formData_595963.add "Filters", Filters
  add(formData_595963, "MaxRecords", newJInt(MaxRecords))
  add(formData_595963, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595962, "Version", newJString(Version))
  result = call_595961.call(nil, query_595962, nil, formData_595963, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_595940(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_595941, base: "/",
    url: url_PostDescribeDBClusterSnapshots_595942,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_595917 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBClusterSnapshots_595919(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_595918(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_595920 = query.getOrDefault("IncludePublic")
  valid_595920 = validateParameter(valid_595920, JBool, required = false, default = nil)
  if valid_595920 != nil:
    section.add "IncludePublic", valid_595920
  var valid_595921 = query.getOrDefault("MaxRecords")
  valid_595921 = validateParameter(valid_595921, JInt, required = false, default = nil)
  if valid_595921 != nil:
    section.add "MaxRecords", valid_595921
  var valid_595922 = query.getOrDefault("DBClusterIdentifier")
  valid_595922 = validateParameter(valid_595922, JString, required = false,
                                 default = nil)
  if valid_595922 != nil:
    section.add "DBClusterIdentifier", valid_595922
  var valid_595923 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_595923 = validateParameter(valid_595923, JString, required = false,
                                 default = nil)
  if valid_595923 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_595923
  var valid_595924 = query.getOrDefault("Filters")
  valid_595924 = validateParameter(valid_595924, JArray, required = false,
                                 default = nil)
  if valid_595924 != nil:
    section.add "Filters", valid_595924
  var valid_595925 = query.getOrDefault("IncludeShared")
  valid_595925 = validateParameter(valid_595925, JBool, required = false, default = nil)
  if valid_595925 != nil:
    section.add "IncludeShared", valid_595925
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595926 = query.getOrDefault("Action")
  valid_595926 = validateParameter(valid_595926, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_595926 != nil:
    section.add "Action", valid_595926
  var valid_595927 = query.getOrDefault("Marker")
  valid_595927 = validateParameter(valid_595927, JString, required = false,
                                 default = nil)
  if valid_595927 != nil:
    section.add "Marker", valid_595927
  var valid_595928 = query.getOrDefault("SnapshotType")
  valid_595928 = validateParameter(valid_595928, JString, required = false,
                                 default = nil)
  if valid_595928 != nil:
    section.add "SnapshotType", valid_595928
  var valid_595929 = query.getOrDefault("Version")
  valid_595929 = validateParameter(valid_595929, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595929 != nil:
    section.add "Version", valid_595929
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595930 = header.getOrDefault("X-Amz-Date")
  valid_595930 = validateParameter(valid_595930, JString, required = false,
                                 default = nil)
  if valid_595930 != nil:
    section.add "X-Amz-Date", valid_595930
  var valid_595931 = header.getOrDefault("X-Amz-Security-Token")
  valid_595931 = validateParameter(valid_595931, JString, required = false,
                                 default = nil)
  if valid_595931 != nil:
    section.add "X-Amz-Security-Token", valid_595931
  var valid_595932 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595932 = validateParameter(valid_595932, JString, required = false,
                                 default = nil)
  if valid_595932 != nil:
    section.add "X-Amz-Content-Sha256", valid_595932
  var valid_595933 = header.getOrDefault("X-Amz-Algorithm")
  valid_595933 = validateParameter(valid_595933, JString, required = false,
                                 default = nil)
  if valid_595933 != nil:
    section.add "X-Amz-Algorithm", valid_595933
  var valid_595934 = header.getOrDefault("X-Amz-Signature")
  valid_595934 = validateParameter(valid_595934, JString, required = false,
                                 default = nil)
  if valid_595934 != nil:
    section.add "X-Amz-Signature", valid_595934
  var valid_595935 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595935 = validateParameter(valid_595935, JString, required = false,
                                 default = nil)
  if valid_595935 != nil:
    section.add "X-Amz-SignedHeaders", valid_595935
  var valid_595936 = header.getOrDefault("X-Amz-Credential")
  valid_595936 = validateParameter(valid_595936, JString, required = false,
                                 default = nil)
  if valid_595936 != nil:
    section.add "X-Amz-Credential", valid_595936
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595937: Call_GetDescribeDBClusterSnapshots_595917; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595937.validator(path, query, header, formData, body)
  let scheme = call_595937.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595937.url(scheme.get, call_595937.host, call_595937.base,
                         call_595937.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595937, url, valid)

proc call*(call_595938: Call_GetDescribeDBClusterSnapshots_595917;
          IncludePublic: bool = false; MaxRecords: int = 0;
          DBClusterIdentifier: string = "";
          DBClusterSnapshotIdentifier: string = ""; Filters: JsonNode = nil;
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Marker: string = "";
          SnapshotType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: string (required)
  var query_595939 = newJObject()
  add(query_595939, "IncludePublic", newJBool(IncludePublic))
  add(query_595939, "MaxRecords", newJInt(MaxRecords))
  add(query_595939, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595939, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Filters != nil:
    query_595939.add "Filters", Filters
  add(query_595939, "IncludeShared", newJBool(IncludeShared))
  add(query_595939, "Action", newJString(Action))
  add(query_595939, "Marker", newJString(Marker))
  add(query_595939, "SnapshotType", newJString(SnapshotType))
  add(query_595939, "Version", newJString(Version))
  result = call_595938.call(nil, query_595939, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_595917(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_595918, base: "/",
    url: url_GetDescribeDBClusterSnapshots_595919,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_595984 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBClusters_595986(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusters_595985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595987 = query.getOrDefault("Action")
  valid_595987 = validateParameter(valid_595987, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_595987 != nil:
    section.add "Action", valid_595987
  var valid_595988 = query.getOrDefault("Version")
  valid_595988 = validateParameter(valid_595988, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595988 != nil:
    section.add "Version", valid_595988
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595989 = header.getOrDefault("X-Amz-Date")
  valid_595989 = validateParameter(valid_595989, JString, required = false,
                                 default = nil)
  if valid_595989 != nil:
    section.add "X-Amz-Date", valid_595989
  var valid_595990 = header.getOrDefault("X-Amz-Security-Token")
  valid_595990 = validateParameter(valid_595990, JString, required = false,
                                 default = nil)
  if valid_595990 != nil:
    section.add "X-Amz-Security-Token", valid_595990
  var valid_595991 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595991 = validateParameter(valid_595991, JString, required = false,
                                 default = nil)
  if valid_595991 != nil:
    section.add "X-Amz-Content-Sha256", valid_595991
  var valid_595992 = header.getOrDefault("X-Amz-Algorithm")
  valid_595992 = validateParameter(valid_595992, JString, required = false,
                                 default = nil)
  if valid_595992 != nil:
    section.add "X-Amz-Algorithm", valid_595992
  var valid_595993 = header.getOrDefault("X-Amz-Signature")
  valid_595993 = validateParameter(valid_595993, JString, required = false,
                                 default = nil)
  if valid_595993 != nil:
    section.add "X-Amz-Signature", valid_595993
  var valid_595994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595994 = validateParameter(valid_595994, JString, required = false,
                                 default = nil)
  if valid_595994 != nil:
    section.add "X-Amz-SignedHeaders", valid_595994
  var valid_595995 = header.getOrDefault("X-Amz-Credential")
  valid_595995 = validateParameter(valid_595995, JString, required = false,
                                 default = nil)
  if valid_595995 != nil:
    section.add "X-Amz-Credential", valid_595995
  result.add "header", section
  ## parameters in `formData` object:
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_595996 = formData.getOrDefault("IncludeShared")
  valid_595996 = validateParameter(valid_595996, JBool, required = false, default = nil)
  if valid_595996 != nil:
    section.add "IncludeShared", valid_595996
  var valid_595997 = formData.getOrDefault("Marker")
  valid_595997 = validateParameter(valid_595997, JString, required = false,
                                 default = nil)
  if valid_595997 != nil:
    section.add "Marker", valid_595997
  var valid_595998 = formData.getOrDefault("Filters")
  valid_595998 = validateParameter(valid_595998, JArray, required = false,
                                 default = nil)
  if valid_595998 != nil:
    section.add "Filters", valid_595998
  var valid_595999 = formData.getOrDefault("MaxRecords")
  valid_595999 = validateParameter(valid_595999, JInt, required = false, default = nil)
  if valid_595999 != nil:
    section.add "MaxRecords", valid_595999
  var valid_596000 = formData.getOrDefault("DBClusterIdentifier")
  valid_596000 = validateParameter(valid_596000, JString, required = false,
                                 default = nil)
  if valid_596000 != nil:
    section.add "DBClusterIdentifier", valid_596000
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596001: Call_PostDescribeDBClusters_595984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596001.validator(path, query, header, formData, body)
  let scheme = call_596001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596001.url(scheme.get, call_596001.host, call_596001.base,
                         call_596001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596001, url, valid)

proc call*(call_596002: Call_PostDescribeDBClusters_595984;
          IncludeShared: bool = false; Marker: string = "";
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  var query_596003 = newJObject()
  var formData_596004 = newJObject()
  add(formData_596004, "IncludeShared", newJBool(IncludeShared))
  add(formData_596004, "Marker", newJString(Marker))
  add(query_596003, "Action", newJString(Action))
  if Filters != nil:
    formData_596004.add "Filters", Filters
  add(formData_596004, "MaxRecords", newJInt(MaxRecords))
  add(formData_596004, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_596003, "Version", newJString(Version))
  result = call_596002.call(nil, query_596003, nil, formData_596004, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_595984(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_595985, base: "/",
    url: url_PostDescribeDBClusters_595986, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_595964 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBClusters_595966(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusters_595965(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_595967 = query.getOrDefault("MaxRecords")
  valid_595967 = validateParameter(valid_595967, JInt, required = false, default = nil)
  if valid_595967 != nil:
    section.add "MaxRecords", valid_595967
  var valid_595968 = query.getOrDefault("DBClusterIdentifier")
  valid_595968 = validateParameter(valid_595968, JString, required = false,
                                 default = nil)
  if valid_595968 != nil:
    section.add "DBClusterIdentifier", valid_595968
  var valid_595969 = query.getOrDefault("Filters")
  valid_595969 = validateParameter(valid_595969, JArray, required = false,
                                 default = nil)
  if valid_595969 != nil:
    section.add "Filters", valid_595969
  var valid_595970 = query.getOrDefault("IncludeShared")
  valid_595970 = validateParameter(valid_595970, JBool, required = false, default = nil)
  if valid_595970 != nil:
    section.add "IncludeShared", valid_595970
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595971 = query.getOrDefault("Action")
  valid_595971 = validateParameter(valid_595971, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_595971 != nil:
    section.add "Action", valid_595971
  var valid_595972 = query.getOrDefault("Marker")
  valid_595972 = validateParameter(valid_595972, JString, required = false,
                                 default = nil)
  if valid_595972 != nil:
    section.add "Marker", valid_595972
  var valid_595973 = query.getOrDefault("Version")
  valid_595973 = validateParameter(valid_595973, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595973 != nil:
    section.add "Version", valid_595973
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595974 = header.getOrDefault("X-Amz-Date")
  valid_595974 = validateParameter(valid_595974, JString, required = false,
                                 default = nil)
  if valid_595974 != nil:
    section.add "X-Amz-Date", valid_595974
  var valid_595975 = header.getOrDefault("X-Amz-Security-Token")
  valid_595975 = validateParameter(valid_595975, JString, required = false,
                                 default = nil)
  if valid_595975 != nil:
    section.add "X-Amz-Security-Token", valid_595975
  var valid_595976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595976 = validateParameter(valid_595976, JString, required = false,
                                 default = nil)
  if valid_595976 != nil:
    section.add "X-Amz-Content-Sha256", valid_595976
  var valid_595977 = header.getOrDefault("X-Amz-Algorithm")
  valid_595977 = validateParameter(valid_595977, JString, required = false,
                                 default = nil)
  if valid_595977 != nil:
    section.add "X-Amz-Algorithm", valid_595977
  var valid_595978 = header.getOrDefault("X-Amz-Signature")
  valid_595978 = validateParameter(valid_595978, JString, required = false,
                                 default = nil)
  if valid_595978 != nil:
    section.add "X-Amz-Signature", valid_595978
  var valid_595979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595979 = validateParameter(valid_595979, JString, required = false,
                                 default = nil)
  if valid_595979 != nil:
    section.add "X-Amz-SignedHeaders", valid_595979
  var valid_595980 = header.getOrDefault("X-Amz-Credential")
  valid_595980 = validateParameter(valid_595980, JString, required = false,
                                 default = nil)
  if valid_595980 != nil:
    section.add "X-Amz-Credential", valid_595980
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595981: Call_GetDescribeDBClusters_595964; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595981.validator(path, query, header, formData, body)
  let scheme = call_595981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595981.url(scheme.get, call_595981.host, call_595981.base,
                         call_595981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595981, url, valid)

proc call*(call_595982: Call_GetDescribeDBClusters_595964; MaxRecords: int = 0;
          DBClusterIdentifier: string = ""; Filters: JsonNode = nil;
          IncludeShared: bool = false; Action: string = "DescribeDBClusters";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_595983 = newJObject()
  add(query_595983, "MaxRecords", newJInt(MaxRecords))
  add(query_595983, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_595983.add "Filters", Filters
  add(query_595983, "IncludeShared", newJBool(IncludeShared))
  add(query_595983, "Action", newJString(Action))
  add(query_595983, "Marker", newJString(Marker))
  add(query_595983, "Version", newJString(Version))
  result = call_595982.call(nil, query_595983, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_595964(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_595965, base: "/",
    url: url_GetDescribeDBClusters_595966, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_596030 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBEngineVersions_596032(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBEngineVersions_596031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596033 = query.getOrDefault("Action")
  valid_596033 = validateParameter(valid_596033, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_596033 != nil:
    section.add "Action", valid_596033
  var valid_596034 = query.getOrDefault("Version")
  valid_596034 = validateParameter(valid_596034, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596034 != nil:
    section.add "Version", valid_596034
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596035 = header.getOrDefault("X-Amz-Date")
  valid_596035 = validateParameter(valid_596035, JString, required = false,
                                 default = nil)
  if valid_596035 != nil:
    section.add "X-Amz-Date", valid_596035
  var valid_596036 = header.getOrDefault("X-Amz-Security-Token")
  valid_596036 = validateParameter(valid_596036, JString, required = false,
                                 default = nil)
  if valid_596036 != nil:
    section.add "X-Amz-Security-Token", valid_596036
  var valid_596037 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596037 = validateParameter(valid_596037, JString, required = false,
                                 default = nil)
  if valid_596037 != nil:
    section.add "X-Amz-Content-Sha256", valid_596037
  var valid_596038 = header.getOrDefault("X-Amz-Algorithm")
  valid_596038 = validateParameter(valid_596038, JString, required = false,
                                 default = nil)
  if valid_596038 != nil:
    section.add "X-Amz-Algorithm", valid_596038
  var valid_596039 = header.getOrDefault("X-Amz-Signature")
  valid_596039 = validateParameter(valid_596039, JString, required = false,
                                 default = nil)
  if valid_596039 != nil:
    section.add "X-Amz-Signature", valid_596039
  var valid_596040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596040 = validateParameter(valid_596040, JString, required = false,
                                 default = nil)
  if valid_596040 != nil:
    section.add "X-Amz-SignedHeaders", valid_596040
  var valid_596041 = header.getOrDefault("X-Amz-Credential")
  valid_596041 = validateParameter(valid_596041, JString, required = false,
                                 default = nil)
  if valid_596041 != nil:
    section.add "X-Amz-Credential", valid_596041
  result.add "header", section
  ## parameters in `formData` object:
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_596042 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_596042 = validateParameter(valid_596042, JBool, required = false, default = nil)
  if valid_596042 != nil:
    section.add "ListSupportedCharacterSets", valid_596042
  var valid_596043 = formData.getOrDefault("Engine")
  valid_596043 = validateParameter(valid_596043, JString, required = false,
                                 default = nil)
  if valid_596043 != nil:
    section.add "Engine", valid_596043
  var valid_596044 = formData.getOrDefault("Marker")
  valid_596044 = validateParameter(valid_596044, JString, required = false,
                                 default = nil)
  if valid_596044 != nil:
    section.add "Marker", valid_596044
  var valid_596045 = formData.getOrDefault("DBParameterGroupFamily")
  valid_596045 = validateParameter(valid_596045, JString, required = false,
                                 default = nil)
  if valid_596045 != nil:
    section.add "DBParameterGroupFamily", valid_596045
  var valid_596046 = formData.getOrDefault("IncludeAll")
  valid_596046 = validateParameter(valid_596046, JBool, required = false, default = nil)
  if valid_596046 != nil:
    section.add "IncludeAll", valid_596046
  var valid_596047 = formData.getOrDefault("Filters")
  valid_596047 = validateParameter(valid_596047, JArray, required = false,
                                 default = nil)
  if valid_596047 != nil:
    section.add "Filters", valid_596047
  var valid_596048 = formData.getOrDefault("MaxRecords")
  valid_596048 = validateParameter(valid_596048, JInt, required = false, default = nil)
  if valid_596048 != nil:
    section.add "MaxRecords", valid_596048
  var valid_596049 = formData.getOrDefault("EngineVersion")
  valid_596049 = validateParameter(valid_596049, JString, required = false,
                                 default = nil)
  if valid_596049 != nil:
    section.add "EngineVersion", valid_596049
  var valid_596050 = formData.getOrDefault("ListSupportedTimezones")
  valid_596050 = validateParameter(valid_596050, JBool, required = false, default = nil)
  if valid_596050 != nil:
    section.add "ListSupportedTimezones", valid_596050
  var valid_596051 = formData.getOrDefault("DefaultOnly")
  valid_596051 = validateParameter(valid_596051, JBool, required = false, default = nil)
  if valid_596051 != nil:
    section.add "DefaultOnly", valid_596051
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596052: Call_PostDescribeDBEngineVersions_596030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_596052.validator(path, query, header, formData, body)
  let scheme = call_596052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596052.url(scheme.get, call_596052.host, call_596052.base,
                         call_596052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596052, url, valid)

proc call*(call_596053: Call_PostDescribeDBEngineVersions_596030;
          ListSupportedCharacterSets: bool = false; Engine: string = "";
          Marker: string = ""; Action: string = "DescribeDBEngineVersions";
          DBParameterGroupFamily: string = ""; IncludeAll: bool = false;
          Filters: JsonNode = nil; MaxRecords: int = 0; EngineVersion: string = "";
          ListSupportedTimezones: bool = false; Version: string = "2014-10-31";
          DefaultOnly: bool = false): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Engine: string
  ##         : The database engine to return.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Version: string (required)
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  var query_596054 = newJObject()
  var formData_596055 = newJObject()
  add(formData_596055, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(formData_596055, "Engine", newJString(Engine))
  add(formData_596055, "Marker", newJString(Marker))
  add(query_596054, "Action", newJString(Action))
  add(formData_596055, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(formData_596055, "IncludeAll", newJBool(IncludeAll))
  if Filters != nil:
    formData_596055.add "Filters", Filters
  add(formData_596055, "MaxRecords", newJInt(MaxRecords))
  add(formData_596055, "EngineVersion", newJString(EngineVersion))
  add(formData_596055, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_596054, "Version", newJString(Version))
  add(formData_596055, "DefaultOnly", newJBool(DefaultOnly))
  result = call_596053.call(nil, query_596054, nil, formData_596055, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_596030(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_596031, base: "/",
    url: url_PostDescribeDBEngineVersions_596032,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_596005 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBEngineVersions_596007(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBEngineVersions_596006(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: JString (required)
  section = newJObject()
  var valid_596008 = query.getOrDefault("Engine")
  valid_596008 = validateParameter(valid_596008, JString, required = false,
                                 default = nil)
  if valid_596008 != nil:
    section.add "Engine", valid_596008
  var valid_596009 = query.getOrDefault("ListSupportedCharacterSets")
  valid_596009 = validateParameter(valid_596009, JBool, required = false, default = nil)
  if valid_596009 != nil:
    section.add "ListSupportedCharacterSets", valid_596009
  var valid_596010 = query.getOrDefault("MaxRecords")
  valid_596010 = validateParameter(valid_596010, JInt, required = false, default = nil)
  if valid_596010 != nil:
    section.add "MaxRecords", valid_596010
  var valid_596011 = query.getOrDefault("DBParameterGroupFamily")
  valid_596011 = validateParameter(valid_596011, JString, required = false,
                                 default = nil)
  if valid_596011 != nil:
    section.add "DBParameterGroupFamily", valid_596011
  var valid_596012 = query.getOrDefault("Filters")
  valid_596012 = validateParameter(valid_596012, JArray, required = false,
                                 default = nil)
  if valid_596012 != nil:
    section.add "Filters", valid_596012
  var valid_596013 = query.getOrDefault("IncludeAll")
  valid_596013 = validateParameter(valid_596013, JBool, required = false, default = nil)
  if valid_596013 != nil:
    section.add "IncludeAll", valid_596013
  var valid_596014 = query.getOrDefault("ListSupportedTimezones")
  valid_596014 = validateParameter(valid_596014, JBool, required = false, default = nil)
  if valid_596014 != nil:
    section.add "ListSupportedTimezones", valid_596014
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596015 = query.getOrDefault("Action")
  valid_596015 = validateParameter(valid_596015, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_596015 != nil:
    section.add "Action", valid_596015
  var valid_596016 = query.getOrDefault("Marker")
  valid_596016 = validateParameter(valid_596016, JString, required = false,
                                 default = nil)
  if valid_596016 != nil:
    section.add "Marker", valid_596016
  var valid_596017 = query.getOrDefault("EngineVersion")
  valid_596017 = validateParameter(valid_596017, JString, required = false,
                                 default = nil)
  if valid_596017 != nil:
    section.add "EngineVersion", valid_596017
  var valid_596018 = query.getOrDefault("DefaultOnly")
  valid_596018 = validateParameter(valid_596018, JBool, required = false, default = nil)
  if valid_596018 != nil:
    section.add "DefaultOnly", valid_596018
  var valid_596019 = query.getOrDefault("Version")
  valid_596019 = validateParameter(valid_596019, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596019 != nil:
    section.add "Version", valid_596019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596020 = header.getOrDefault("X-Amz-Date")
  valid_596020 = validateParameter(valid_596020, JString, required = false,
                                 default = nil)
  if valid_596020 != nil:
    section.add "X-Amz-Date", valid_596020
  var valid_596021 = header.getOrDefault("X-Amz-Security-Token")
  valid_596021 = validateParameter(valid_596021, JString, required = false,
                                 default = nil)
  if valid_596021 != nil:
    section.add "X-Amz-Security-Token", valid_596021
  var valid_596022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596022 = validateParameter(valid_596022, JString, required = false,
                                 default = nil)
  if valid_596022 != nil:
    section.add "X-Amz-Content-Sha256", valid_596022
  var valid_596023 = header.getOrDefault("X-Amz-Algorithm")
  valid_596023 = validateParameter(valid_596023, JString, required = false,
                                 default = nil)
  if valid_596023 != nil:
    section.add "X-Amz-Algorithm", valid_596023
  var valid_596024 = header.getOrDefault("X-Amz-Signature")
  valid_596024 = validateParameter(valid_596024, JString, required = false,
                                 default = nil)
  if valid_596024 != nil:
    section.add "X-Amz-Signature", valid_596024
  var valid_596025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596025 = validateParameter(valid_596025, JString, required = false,
                                 default = nil)
  if valid_596025 != nil:
    section.add "X-Amz-SignedHeaders", valid_596025
  var valid_596026 = header.getOrDefault("X-Amz-Credential")
  valid_596026 = validateParameter(valid_596026, JString, required = false,
                                 default = nil)
  if valid_596026 != nil:
    section.add "X-Amz-Credential", valid_596026
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596027: Call_GetDescribeDBEngineVersions_596005; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_596027.validator(path, query, header, formData, body)
  let scheme = call_596027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596027.url(scheme.get, call_596027.host, call_596027.base,
                         call_596027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596027, url, valid)

proc call*(call_596028: Call_GetDescribeDBEngineVersions_596005;
          Engine: string = ""; ListSupportedCharacterSets: bool = false;
          MaxRecords: int = 0; DBParameterGroupFamily: string = "";
          Filters: JsonNode = nil; IncludeAll: bool = false;
          ListSupportedTimezones: bool = false;
          Action: string = "DescribeDBEngineVersions"; Marker: string = "";
          EngineVersion: string = ""; DefaultOnly: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: string (required)
  var query_596029 = newJObject()
  add(query_596029, "Engine", newJString(Engine))
  add(query_596029, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_596029, "MaxRecords", newJInt(MaxRecords))
  add(query_596029, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_596029.add "Filters", Filters
  add(query_596029, "IncludeAll", newJBool(IncludeAll))
  add(query_596029, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_596029, "Action", newJString(Action))
  add(query_596029, "Marker", newJString(Marker))
  add(query_596029, "EngineVersion", newJString(EngineVersion))
  add(query_596029, "DefaultOnly", newJBool(DefaultOnly))
  add(query_596029, "Version", newJString(Version))
  result = call_596028.call(nil, query_596029, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_596005(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_596006, base: "/",
    url: url_GetDescribeDBEngineVersions_596007,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstanceAutomatedBackups_596076 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBInstanceAutomatedBackups_596078(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBInstanceAutomatedBackups_596077(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596079 = query.getOrDefault("Action")
  valid_596079 = validateParameter(valid_596079, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_596079 != nil:
    section.add "Action", valid_596079
  var valid_596080 = query.getOrDefault("Version")
  valid_596080 = validateParameter(valid_596080, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596080 != nil:
    section.add "Version", valid_596080
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596081 = header.getOrDefault("X-Amz-Date")
  valid_596081 = validateParameter(valid_596081, JString, required = false,
                                 default = nil)
  if valid_596081 != nil:
    section.add "X-Amz-Date", valid_596081
  var valid_596082 = header.getOrDefault("X-Amz-Security-Token")
  valid_596082 = validateParameter(valid_596082, JString, required = false,
                                 default = nil)
  if valid_596082 != nil:
    section.add "X-Amz-Security-Token", valid_596082
  var valid_596083 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596083 = validateParameter(valid_596083, JString, required = false,
                                 default = nil)
  if valid_596083 != nil:
    section.add "X-Amz-Content-Sha256", valid_596083
  var valid_596084 = header.getOrDefault("X-Amz-Algorithm")
  valid_596084 = validateParameter(valid_596084, JString, required = false,
                                 default = nil)
  if valid_596084 != nil:
    section.add "X-Amz-Algorithm", valid_596084
  var valid_596085 = header.getOrDefault("X-Amz-Signature")
  valid_596085 = validateParameter(valid_596085, JString, required = false,
                                 default = nil)
  if valid_596085 != nil:
    section.add "X-Amz-Signature", valid_596085
  var valid_596086 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596086 = validateParameter(valid_596086, JString, required = false,
                                 default = nil)
  if valid_596086 != nil:
    section.add "X-Amz-SignedHeaders", valid_596086
  var valid_596087 = header.getOrDefault("X-Amz-Credential")
  valid_596087 = validateParameter(valid_596087, JString, required = false,
                                 default = nil)
  if valid_596087 != nil:
    section.add "X-Amz-Credential", valid_596087
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  section = newJObject()
  var valid_596088 = formData.getOrDefault("DBInstanceIdentifier")
  valid_596088 = validateParameter(valid_596088, JString, required = false,
                                 default = nil)
  if valid_596088 != nil:
    section.add "DBInstanceIdentifier", valid_596088
  var valid_596089 = formData.getOrDefault("DbiResourceId")
  valid_596089 = validateParameter(valid_596089, JString, required = false,
                                 default = nil)
  if valid_596089 != nil:
    section.add "DbiResourceId", valid_596089
  var valid_596090 = formData.getOrDefault("Marker")
  valid_596090 = validateParameter(valid_596090, JString, required = false,
                                 default = nil)
  if valid_596090 != nil:
    section.add "Marker", valid_596090
  var valid_596091 = formData.getOrDefault("Filters")
  valid_596091 = validateParameter(valid_596091, JArray, required = false,
                                 default = nil)
  if valid_596091 != nil:
    section.add "Filters", valid_596091
  var valid_596092 = formData.getOrDefault("MaxRecords")
  valid_596092 = validateParameter(valid_596092, JInt, required = false, default = nil)
  if valid_596092 != nil:
    section.add "MaxRecords", valid_596092
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596093: Call_PostDescribeDBInstanceAutomatedBackups_596076;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_596093.validator(path, query, header, formData, body)
  let scheme = call_596093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596093.url(scheme.get, call_596093.host, call_596093.base,
                         call_596093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596093, url, valid)

proc call*(call_596094: Call_PostDescribeDBInstanceAutomatedBackups_596076;
          DBInstanceIdentifier: string = ""; DbiResourceId: string = "";
          Marker: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Version: string (required)
  var query_596095 = newJObject()
  var formData_596096 = newJObject()
  add(formData_596096, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_596096, "DbiResourceId", newJString(DbiResourceId))
  add(formData_596096, "Marker", newJString(Marker))
  add(query_596095, "Action", newJString(Action))
  if Filters != nil:
    formData_596096.add "Filters", Filters
  add(formData_596096, "MaxRecords", newJInt(MaxRecords))
  add(query_596095, "Version", newJString(Version))
  result = call_596094.call(nil, query_596095, nil, formData_596096, nil)

var postDescribeDBInstanceAutomatedBackups* = Call_PostDescribeDBInstanceAutomatedBackups_596076(
    name: "postDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_PostDescribeDBInstanceAutomatedBackups_596077, base: "/",
    url: url_PostDescribeDBInstanceAutomatedBackups_596078,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstanceAutomatedBackups_596056 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBInstanceAutomatedBackups_596058(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBInstanceAutomatedBackups_596057(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  section = newJObject()
  var valid_596059 = query.getOrDefault("MaxRecords")
  valid_596059 = validateParameter(valid_596059, JInt, required = false, default = nil)
  if valid_596059 != nil:
    section.add "MaxRecords", valid_596059
  var valid_596060 = query.getOrDefault("Filters")
  valid_596060 = validateParameter(valid_596060, JArray, required = false,
                                 default = nil)
  if valid_596060 != nil:
    section.add "Filters", valid_596060
  var valid_596061 = query.getOrDefault("DbiResourceId")
  valid_596061 = validateParameter(valid_596061, JString, required = false,
                                 default = nil)
  if valid_596061 != nil:
    section.add "DbiResourceId", valid_596061
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596062 = query.getOrDefault("Action")
  valid_596062 = validateParameter(valid_596062, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_596062 != nil:
    section.add "Action", valid_596062
  var valid_596063 = query.getOrDefault("Marker")
  valid_596063 = validateParameter(valid_596063, JString, required = false,
                                 default = nil)
  if valid_596063 != nil:
    section.add "Marker", valid_596063
  var valid_596064 = query.getOrDefault("Version")
  valid_596064 = validateParameter(valid_596064, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596064 != nil:
    section.add "Version", valid_596064
  var valid_596065 = query.getOrDefault("DBInstanceIdentifier")
  valid_596065 = validateParameter(valid_596065, JString, required = false,
                                 default = nil)
  if valid_596065 != nil:
    section.add "DBInstanceIdentifier", valid_596065
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596066 = header.getOrDefault("X-Amz-Date")
  valid_596066 = validateParameter(valid_596066, JString, required = false,
                                 default = nil)
  if valid_596066 != nil:
    section.add "X-Amz-Date", valid_596066
  var valid_596067 = header.getOrDefault("X-Amz-Security-Token")
  valid_596067 = validateParameter(valid_596067, JString, required = false,
                                 default = nil)
  if valid_596067 != nil:
    section.add "X-Amz-Security-Token", valid_596067
  var valid_596068 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596068 = validateParameter(valid_596068, JString, required = false,
                                 default = nil)
  if valid_596068 != nil:
    section.add "X-Amz-Content-Sha256", valid_596068
  var valid_596069 = header.getOrDefault("X-Amz-Algorithm")
  valid_596069 = validateParameter(valid_596069, JString, required = false,
                                 default = nil)
  if valid_596069 != nil:
    section.add "X-Amz-Algorithm", valid_596069
  var valid_596070 = header.getOrDefault("X-Amz-Signature")
  valid_596070 = validateParameter(valid_596070, JString, required = false,
                                 default = nil)
  if valid_596070 != nil:
    section.add "X-Amz-Signature", valid_596070
  var valid_596071 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596071 = validateParameter(valid_596071, JString, required = false,
                                 default = nil)
  if valid_596071 != nil:
    section.add "X-Amz-SignedHeaders", valid_596071
  var valid_596072 = header.getOrDefault("X-Amz-Credential")
  valid_596072 = validateParameter(valid_596072, JString, required = false,
                                 default = nil)
  if valid_596072 != nil:
    section.add "X-Amz-Credential", valid_596072
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596073: Call_GetDescribeDBInstanceAutomatedBackups_596056;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_596073.validator(path, query, header, formData, body)
  let scheme = call_596073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596073.url(scheme.get, call_596073.host, call_596073.base,
                         call_596073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596073, url, valid)

proc call*(call_596074: Call_GetDescribeDBInstanceAutomatedBackups_596056;
          MaxRecords: int = 0; Filters: JsonNode = nil; DbiResourceId: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Marker: string = ""; Version: string = "2014-10-31";
          DBInstanceIdentifier: string = ""): Recallable =
  ## getDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  var query_596075 = newJObject()
  add(query_596075, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596075.add "Filters", Filters
  add(query_596075, "DbiResourceId", newJString(DbiResourceId))
  add(query_596075, "Action", newJString(Action))
  add(query_596075, "Marker", newJString(Marker))
  add(query_596075, "Version", newJString(Version))
  add(query_596075, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_596074.call(nil, query_596075, nil, nil, nil)

var getDescribeDBInstanceAutomatedBackups* = Call_GetDescribeDBInstanceAutomatedBackups_596056(
    name: "getDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_GetDescribeDBInstanceAutomatedBackups_596057, base: "/",
    url: url_GetDescribeDBInstanceAutomatedBackups_596058,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_596116 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBInstances_596118(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBInstances_596117(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596119 = query.getOrDefault("Action")
  valid_596119 = validateParameter(valid_596119, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_596119 != nil:
    section.add "Action", valid_596119
  var valid_596120 = query.getOrDefault("Version")
  valid_596120 = validateParameter(valid_596120, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596120 != nil:
    section.add "Version", valid_596120
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596121 = header.getOrDefault("X-Amz-Date")
  valid_596121 = validateParameter(valid_596121, JString, required = false,
                                 default = nil)
  if valid_596121 != nil:
    section.add "X-Amz-Date", valid_596121
  var valid_596122 = header.getOrDefault("X-Amz-Security-Token")
  valid_596122 = validateParameter(valid_596122, JString, required = false,
                                 default = nil)
  if valid_596122 != nil:
    section.add "X-Amz-Security-Token", valid_596122
  var valid_596123 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596123 = validateParameter(valid_596123, JString, required = false,
                                 default = nil)
  if valid_596123 != nil:
    section.add "X-Amz-Content-Sha256", valid_596123
  var valid_596124 = header.getOrDefault("X-Amz-Algorithm")
  valid_596124 = validateParameter(valid_596124, JString, required = false,
                                 default = nil)
  if valid_596124 != nil:
    section.add "X-Amz-Algorithm", valid_596124
  var valid_596125 = header.getOrDefault("X-Amz-Signature")
  valid_596125 = validateParameter(valid_596125, JString, required = false,
                                 default = nil)
  if valid_596125 != nil:
    section.add "X-Amz-Signature", valid_596125
  var valid_596126 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596126 = validateParameter(valid_596126, JString, required = false,
                                 default = nil)
  if valid_596126 != nil:
    section.add "X-Amz-SignedHeaders", valid_596126
  var valid_596127 = header.getOrDefault("X-Amz-Credential")
  valid_596127 = validateParameter(valid_596127, JString, required = false,
                                 default = nil)
  if valid_596127 != nil:
    section.add "X-Amz-Credential", valid_596127
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these resource identifiers.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596128 = formData.getOrDefault("DBInstanceIdentifier")
  valid_596128 = validateParameter(valid_596128, JString, required = false,
                                 default = nil)
  if valid_596128 != nil:
    section.add "DBInstanceIdentifier", valid_596128
  var valid_596129 = formData.getOrDefault("Marker")
  valid_596129 = validateParameter(valid_596129, JString, required = false,
                                 default = nil)
  if valid_596129 != nil:
    section.add "Marker", valid_596129
  var valid_596130 = formData.getOrDefault("Filters")
  valid_596130 = validateParameter(valid_596130, JArray, required = false,
                                 default = nil)
  if valid_596130 != nil:
    section.add "Filters", valid_596130
  var valid_596131 = formData.getOrDefault("MaxRecords")
  valid_596131 = validateParameter(valid_596131, JInt, required = false, default = nil)
  if valid_596131 != nil:
    section.add "MaxRecords", valid_596131
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596132: Call_PostDescribeDBInstances_596116; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  let valid = call_596132.validator(path, query, header, formData, body)
  let scheme = call_596132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596132.url(scheme.get, call_596132.host, call_596132.base,
                         call_596132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596132, url, valid)

proc call*(call_596133: Call_PostDescribeDBInstances_596116;
          DBInstanceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these resource identifiers.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596134 = newJObject()
  var formData_596135 = newJObject()
  add(formData_596135, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_596135, "Marker", newJString(Marker))
  add(query_596134, "Action", newJString(Action))
  if Filters != nil:
    formData_596135.add "Filters", Filters
  add(formData_596135, "MaxRecords", newJInt(MaxRecords))
  add(query_596134, "Version", newJString(Version))
  result = call_596133.call(nil, query_596134, nil, formData_596135, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_596116(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_596117, base: "/",
    url: url_PostDescribeDBInstances_596118, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_596097 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBInstances_596099(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBInstances_596098(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these resource identifiers.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_596100 = query.getOrDefault("MaxRecords")
  valid_596100 = validateParameter(valid_596100, JInt, required = false, default = nil)
  if valid_596100 != nil:
    section.add "MaxRecords", valid_596100
  var valid_596101 = query.getOrDefault("Filters")
  valid_596101 = validateParameter(valid_596101, JArray, required = false,
                                 default = nil)
  if valid_596101 != nil:
    section.add "Filters", valid_596101
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596102 = query.getOrDefault("Action")
  valid_596102 = validateParameter(valid_596102, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_596102 != nil:
    section.add "Action", valid_596102
  var valid_596103 = query.getOrDefault("Marker")
  valid_596103 = validateParameter(valid_596103, JString, required = false,
                                 default = nil)
  if valid_596103 != nil:
    section.add "Marker", valid_596103
  var valid_596104 = query.getOrDefault("Version")
  valid_596104 = validateParameter(valid_596104, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596104 != nil:
    section.add "Version", valid_596104
  var valid_596105 = query.getOrDefault("DBInstanceIdentifier")
  valid_596105 = validateParameter(valid_596105, JString, required = false,
                                 default = nil)
  if valid_596105 != nil:
    section.add "DBInstanceIdentifier", valid_596105
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596106 = header.getOrDefault("X-Amz-Date")
  valid_596106 = validateParameter(valid_596106, JString, required = false,
                                 default = nil)
  if valid_596106 != nil:
    section.add "X-Amz-Date", valid_596106
  var valid_596107 = header.getOrDefault("X-Amz-Security-Token")
  valid_596107 = validateParameter(valid_596107, JString, required = false,
                                 default = nil)
  if valid_596107 != nil:
    section.add "X-Amz-Security-Token", valid_596107
  var valid_596108 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596108 = validateParameter(valid_596108, JString, required = false,
                                 default = nil)
  if valid_596108 != nil:
    section.add "X-Amz-Content-Sha256", valid_596108
  var valid_596109 = header.getOrDefault("X-Amz-Algorithm")
  valid_596109 = validateParameter(valid_596109, JString, required = false,
                                 default = nil)
  if valid_596109 != nil:
    section.add "X-Amz-Algorithm", valid_596109
  var valid_596110 = header.getOrDefault("X-Amz-Signature")
  valid_596110 = validateParameter(valid_596110, JString, required = false,
                                 default = nil)
  if valid_596110 != nil:
    section.add "X-Amz-Signature", valid_596110
  var valid_596111 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596111 = validateParameter(valid_596111, JString, required = false,
                                 default = nil)
  if valid_596111 != nil:
    section.add "X-Amz-SignedHeaders", valid_596111
  var valid_596112 = header.getOrDefault("X-Amz-Credential")
  valid_596112 = validateParameter(valid_596112, JString, required = false,
                                 default = nil)
  if valid_596112 != nil:
    section.add "X-Amz-Credential", valid_596112
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596113: Call_GetDescribeDBInstances_596097; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  let valid = call_596113.validator(path, query, header, formData, body)
  let scheme = call_596113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596113.url(scheme.get, call_596113.host, call_596113.base,
                         call_596113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596113, url, valid)

proc call*(call_596114: Call_GetDescribeDBInstances_596097; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBInstances";
          Marker: string = ""; Version: string = "2014-10-31";
          DBInstanceIdentifier: string = ""): Recallable =
  ## getDescribeDBInstances
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these resource identifiers.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_596115 = newJObject()
  add(query_596115, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596115.add "Filters", Filters
  add(query_596115, "Action", newJString(Action))
  add(query_596115, "Marker", newJString(Marker))
  add(query_596115, "Version", newJString(Version))
  add(query_596115, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_596114.call(nil, query_596115, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_596097(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_596098, base: "/",
    url: url_GetDescribeDBInstances_596099, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBLogFiles_596158 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBLogFiles_596160(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBLogFiles_596159(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596161 = query.getOrDefault("Action")
  valid_596161 = validateParameter(valid_596161, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_596161 != nil:
    section.add "Action", valid_596161
  var valid_596162 = query.getOrDefault("Version")
  valid_596162 = validateParameter(valid_596162, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596162 != nil:
    section.add "Version", valid_596162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596163 = header.getOrDefault("X-Amz-Date")
  valid_596163 = validateParameter(valid_596163, JString, required = false,
                                 default = nil)
  if valid_596163 != nil:
    section.add "X-Amz-Date", valid_596163
  var valid_596164 = header.getOrDefault("X-Amz-Security-Token")
  valid_596164 = validateParameter(valid_596164, JString, required = false,
                                 default = nil)
  if valid_596164 != nil:
    section.add "X-Amz-Security-Token", valid_596164
  var valid_596165 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596165 = validateParameter(valid_596165, JString, required = false,
                                 default = nil)
  if valid_596165 != nil:
    section.add "X-Amz-Content-Sha256", valid_596165
  var valid_596166 = header.getOrDefault("X-Amz-Algorithm")
  valid_596166 = validateParameter(valid_596166, JString, required = false,
                                 default = nil)
  if valid_596166 != nil:
    section.add "X-Amz-Algorithm", valid_596166
  var valid_596167 = header.getOrDefault("X-Amz-Signature")
  valid_596167 = validateParameter(valid_596167, JString, required = false,
                                 default = nil)
  if valid_596167 != nil:
    section.add "X-Amz-Signature", valid_596167
  var valid_596168 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596168 = validateParameter(valid_596168, JString, required = false,
                                 default = nil)
  if valid_596168 != nil:
    section.add "X-Amz-SignedHeaders", valid_596168
  var valid_596169 = header.getOrDefault("X-Amz-Credential")
  valid_596169 = validateParameter(valid_596169, JString, required = false,
                                 default = nil)
  if valid_596169 != nil:
    section.add "X-Amz-Credential", valid_596169
  result.add "header", section
  ## parameters in `formData` object:
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  section = newJObject()
  var valid_596170 = formData.getOrDefault("FilenameContains")
  valid_596170 = validateParameter(valid_596170, JString, required = false,
                                 default = nil)
  if valid_596170 != nil:
    section.add "FilenameContains", valid_596170
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_596171 = formData.getOrDefault("DBInstanceIdentifier")
  valid_596171 = validateParameter(valid_596171, JString, required = true,
                                 default = nil)
  if valid_596171 != nil:
    section.add "DBInstanceIdentifier", valid_596171
  var valid_596172 = formData.getOrDefault("FileSize")
  valid_596172 = validateParameter(valid_596172, JInt, required = false, default = nil)
  if valid_596172 != nil:
    section.add "FileSize", valid_596172
  var valid_596173 = formData.getOrDefault("Marker")
  valid_596173 = validateParameter(valid_596173, JString, required = false,
                                 default = nil)
  if valid_596173 != nil:
    section.add "Marker", valid_596173
  var valid_596174 = formData.getOrDefault("Filters")
  valid_596174 = validateParameter(valid_596174, JArray, required = false,
                                 default = nil)
  if valid_596174 != nil:
    section.add "Filters", valid_596174
  var valid_596175 = formData.getOrDefault("MaxRecords")
  valid_596175 = validateParameter(valid_596175, JInt, required = false, default = nil)
  if valid_596175 != nil:
    section.add "MaxRecords", valid_596175
  var valid_596176 = formData.getOrDefault("FileLastWritten")
  valid_596176 = validateParameter(valid_596176, JInt, required = false, default = nil)
  if valid_596176 != nil:
    section.add "FileLastWritten", valid_596176
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596177: Call_PostDescribeDBLogFiles_596158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_596177.validator(path, query, header, formData, body)
  let scheme = call_596177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596177.url(scheme.get, call_596177.host, call_596177.base,
                         call_596177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596177, url, valid)

proc call*(call_596178: Call_PostDescribeDBLogFiles_596158;
          DBInstanceIdentifier: string; FilenameContains: string = "";
          FileSize: int = 0; Marker: string = ""; Action: string = "DescribeDBLogFiles";
          Filters: JsonNode = nil; MaxRecords: int = 0; FileLastWritten: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Version: string (required)
  var query_596179 = newJObject()
  var formData_596180 = newJObject()
  add(formData_596180, "FilenameContains", newJString(FilenameContains))
  add(formData_596180, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_596180, "FileSize", newJInt(FileSize))
  add(formData_596180, "Marker", newJString(Marker))
  add(query_596179, "Action", newJString(Action))
  if Filters != nil:
    formData_596180.add "Filters", Filters
  add(formData_596180, "MaxRecords", newJInt(MaxRecords))
  add(formData_596180, "FileLastWritten", newJInt(FileLastWritten))
  add(query_596179, "Version", newJString(Version))
  result = call_596178.call(nil, query_596179, nil, formData_596180, nil)

var postDescribeDBLogFiles* = Call_PostDescribeDBLogFiles_596158(
    name: "postDescribeDBLogFiles", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_PostDescribeDBLogFiles_596159, base: "/",
    url: url_PostDescribeDBLogFiles_596160, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBLogFiles_596136 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBLogFiles_596138(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBLogFiles_596137(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_596139 = query.getOrDefault("FileLastWritten")
  valid_596139 = validateParameter(valid_596139, JInt, required = false, default = nil)
  if valid_596139 != nil:
    section.add "FileLastWritten", valid_596139
  var valid_596140 = query.getOrDefault("MaxRecords")
  valid_596140 = validateParameter(valid_596140, JInt, required = false, default = nil)
  if valid_596140 != nil:
    section.add "MaxRecords", valid_596140
  var valid_596141 = query.getOrDefault("FilenameContains")
  valid_596141 = validateParameter(valid_596141, JString, required = false,
                                 default = nil)
  if valid_596141 != nil:
    section.add "FilenameContains", valid_596141
  var valid_596142 = query.getOrDefault("FileSize")
  valid_596142 = validateParameter(valid_596142, JInt, required = false, default = nil)
  if valid_596142 != nil:
    section.add "FileSize", valid_596142
  var valid_596143 = query.getOrDefault("Filters")
  valid_596143 = validateParameter(valid_596143, JArray, required = false,
                                 default = nil)
  if valid_596143 != nil:
    section.add "Filters", valid_596143
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596144 = query.getOrDefault("Action")
  valid_596144 = validateParameter(valid_596144, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_596144 != nil:
    section.add "Action", valid_596144
  var valid_596145 = query.getOrDefault("Marker")
  valid_596145 = validateParameter(valid_596145, JString, required = false,
                                 default = nil)
  if valid_596145 != nil:
    section.add "Marker", valid_596145
  var valid_596146 = query.getOrDefault("Version")
  valid_596146 = validateParameter(valid_596146, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596146 != nil:
    section.add "Version", valid_596146
  var valid_596147 = query.getOrDefault("DBInstanceIdentifier")
  valid_596147 = validateParameter(valid_596147, JString, required = true,
                                 default = nil)
  if valid_596147 != nil:
    section.add "DBInstanceIdentifier", valid_596147
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596148 = header.getOrDefault("X-Amz-Date")
  valid_596148 = validateParameter(valid_596148, JString, required = false,
                                 default = nil)
  if valid_596148 != nil:
    section.add "X-Amz-Date", valid_596148
  var valid_596149 = header.getOrDefault("X-Amz-Security-Token")
  valid_596149 = validateParameter(valid_596149, JString, required = false,
                                 default = nil)
  if valid_596149 != nil:
    section.add "X-Amz-Security-Token", valid_596149
  var valid_596150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596150 = validateParameter(valid_596150, JString, required = false,
                                 default = nil)
  if valid_596150 != nil:
    section.add "X-Amz-Content-Sha256", valid_596150
  var valid_596151 = header.getOrDefault("X-Amz-Algorithm")
  valid_596151 = validateParameter(valid_596151, JString, required = false,
                                 default = nil)
  if valid_596151 != nil:
    section.add "X-Amz-Algorithm", valid_596151
  var valid_596152 = header.getOrDefault("X-Amz-Signature")
  valid_596152 = validateParameter(valid_596152, JString, required = false,
                                 default = nil)
  if valid_596152 != nil:
    section.add "X-Amz-Signature", valid_596152
  var valid_596153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596153 = validateParameter(valid_596153, JString, required = false,
                                 default = nil)
  if valid_596153 != nil:
    section.add "X-Amz-SignedHeaders", valid_596153
  var valid_596154 = header.getOrDefault("X-Amz-Credential")
  valid_596154 = validateParameter(valid_596154, JString, required = false,
                                 default = nil)
  if valid_596154 != nil:
    section.add "X-Amz-Credential", valid_596154
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596155: Call_GetDescribeDBLogFiles_596136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_596155.validator(path, query, header, formData, body)
  let scheme = call_596155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596155.url(scheme.get, call_596155.host, call_596155.base,
                         call_596155.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596155, url, valid)

proc call*(call_596156: Call_GetDescribeDBLogFiles_596136;
          DBInstanceIdentifier: string; FileLastWritten: int = 0; MaxRecords: int = 0;
          FilenameContains: string = ""; FileSize: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBLogFiles"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_596157 = newJObject()
  add(query_596157, "FileLastWritten", newJInt(FileLastWritten))
  add(query_596157, "MaxRecords", newJInt(MaxRecords))
  add(query_596157, "FilenameContains", newJString(FilenameContains))
  add(query_596157, "FileSize", newJInt(FileSize))
  if Filters != nil:
    query_596157.add "Filters", Filters
  add(query_596157, "Action", newJString(Action))
  add(query_596157, "Marker", newJString(Marker))
  add(query_596157, "Version", newJString(Version))
  add(query_596157, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_596156.call(nil, query_596157, nil, nil, nil)

var getDescribeDBLogFiles* = Call_GetDescribeDBLogFiles_596136(
    name: "getDescribeDBLogFiles", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_GetDescribeDBLogFiles_596137, base: "/",
    url: url_GetDescribeDBLogFiles_596138, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_596200 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBParameterGroups_596202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBParameterGroups_596201(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596203 = query.getOrDefault("Action")
  valid_596203 = validateParameter(valid_596203, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_596203 != nil:
    section.add "Action", valid_596203
  var valid_596204 = query.getOrDefault("Version")
  valid_596204 = validateParameter(valid_596204, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596204 != nil:
    section.add "Version", valid_596204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596205 = header.getOrDefault("X-Amz-Date")
  valid_596205 = validateParameter(valid_596205, JString, required = false,
                                 default = nil)
  if valid_596205 != nil:
    section.add "X-Amz-Date", valid_596205
  var valid_596206 = header.getOrDefault("X-Amz-Security-Token")
  valid_596206 = validateParameter(valid_596206, JString, required = false,
                                 default = nil)
  if valid_596206 != nil:
    section.add "X-Amz-Security-Token", valid_596206
  var valid_596207 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596207 = validateParameter(valid_596207, JString, required = false,
                                 default = nil)
  if valid_596207 != nil:
    section.add "X-Amz-Content-Sha256", valid_596207
  var valid_596208 = header.getOrDefault("X-Amz-Algorithm")
  valid_596208 = validateParameter(valid_596208, JString, required = false,
                                 default = nil)
  if valid_596208 != nil:
    section.add "X-Amz-Algorithm", valid_596208
  var valid_596209 = header.getOrDefault("X-Amz-Signature")
  valid_596209 = validateParameter(valid_596209, JString, required = false,
                                 default = nil)
  if valid_596209 != nil:
    section.add "X-Amz-Signature", valid_596209
  var valid_596210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596210 = validateParameter(valid_596210, JString, required = false,
                                 default = nil)
  if valid_596210 != nil:
    section.add "X-Amz-SignedHeaders", valid_596210
  var valid_596211 = header.getOrDefault("X-Amz-Credential")
  valid_596211 = validateParameter(valid_596211, JString, required = false,
                                 default = nil)
  if valid_596211 != nil:
    section.add "X-Amz-Credential", valid_596211
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596212 = formData.getOrDefault("DBParameterGroupName")
  valid_596212 = validateParameter(valid_596212, JString, required = false,
                                 default = nil)
  if valid_596212 != nil:
    section.add "DBParameterGroupName", valid_596212
  var valid_596213 = formData.getOrDefault("Marker")
  valid_596213 = validateParameter(valid_596213, JString, required = false,
                                 default = nil)
  if valid_596213 != nil:
    section.add "Marker", valid_596213
  var valid_596214 = formData.getOrDefault("Filters")
  valid_596214 = validateParameter(valid_596214, JArray, required = false,
                                 default = nil)
  if valid_596214 != nil:
    section.add "Filters", valid_596214
  var valid_596215 = formData.getOrDefault("MaxRecords")
  valid_596215 = validateParameter(valid_596215, JInt, required = false, default = nil)
  if valid_596215 != nil:
    section.add "MaxRecords", valid_596215
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596216: Call_PostDescribeDBParameterGroups_596200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_596216.validator(path, query, header, formData, body)
  let scheme = call_596216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596216.url(scheme.get, call_596216.host, call_596216.base,
                         call_596216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596216, url, valid)

proc call*(call_596217: Call_PostDescribeDBParameterGroups_596200;
          DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596218 = newJObject()
  var formData_596219 = newJObject()
  add(formData_596219, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_596219, "Marker", newJString(Marker))
  add(query_596218, "Action", newJString(Action))
  if Filters != nil:
    formData_596219.add "Filters", Filters
  add(formData_596219, "MaxRecords", newJInt(MaxRecords))
  add(query_596218, "Version", newJString(Version))
  result = call_596217.call(nil, query_596218, nil, formData_596219, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_596200(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_596201, base: "/",
    url: url_PostDescribeDBParameterGroups_596202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_596181 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBParameterGroups_596183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBParameterGroups_596182(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_596184 = query.getOrDefault("MaxRecords")
  valid_596184 = validateParameter(valid_596184, JInt, required = false, default = nil)
  if valid_596184 != nil:
    section.add "MaxRecords", valid_596184
  var valid_596185 = query.getOrDefault("Filters")
  valid_596185 = validateParameter(valid_596185, JArray, required = false,
                                 default = nil)
  if valid_596185 != nil:
    section.add "Filters", valid_596185
  var valid_596186 = query.getOrDefault("DBParameterGroupName")
  valid_596186 = validateParameter(valid_596186, JString, required = false,
                                 default = nil)
  if valid_596186 != nil:
    section.add "DBParameterGroupName", valid_596186
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596187 = query.getOrDefault("Action")
  valid_596187 = validateParameter(valid_596187, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_596187 != nil:
    section.add "Action", valid_596187
  var valid_596188 = query.getOrDefault("Marker")
  valid_596188 = validateParameter(valid_596188, JString, required = false,
                                 default = nil)
  if valid_596188 != nil:
    section.add "Marker", valid_596188
  var valid_596189 = query.getOrDefault("Version")
  valid_596189 = validateParameter(valid_596189, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596189 != nil:
    section.add "Version", valid_596189
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596190 = header.getOrDefault("X-Amz-Date")
  valid_596190 = validateParameter(valid_596190, JString, required = false,
                                 default = nil)
  if valid_596190 != nil:
    section.add "X-Amz-Date", valid_596190
  var valid_596191 = header.getOrDefault("X-Amz-Security-Token")
  valid_596191 = validateParameter(valid_596191, JString, required = false,
                                 default = nil)
  if valid_596191 != nil:
    section.add "X-Amz-Security-Token", valid_596191
  var valid_596192 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596192 = validateParameter(valid_596192, JString, required = false,
                                 default = nil)
  if valid_596192 != nil:
    section.add "X-Amz-Content-Sha256", valid_596192
  var valid_596193 = header.getOrDefault("X-Amz-Algorithm")
  valid_596193 = validateParameter(valid_596193, JString, required = false,
                                 default = nil)
  if valid_596193 != nil:
    section.add "X-Amz-Algorithm", valid_596193
  var valid_596194 = header.getOrDefault("X-Amz-Signature")
  valid_596194 = validateParameter(valid_596194, JString, required = false,
                                 default = nil)
  if valid_596194 != nil:
    section.add "X-Amz-Signature", valid_596194
  var valid_596195 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596195 = validateParameter(valid_596195, JString, required = false,
                                 default = nil)
  if valid_596195 != nil:
    section.add "X-Amz-SignedHeaders", valid_596195
  var valid_596196 = header.getOrDefault("X-Amz-Credential")
  valid_596196 = validateParameter(valid_596196, JString, required = false,
                                 default = nil)
  if valid_596196 != nil:
    section.add "X-Amz-Credential", valid_596196
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596197: Call_GetDescribeDBParameterGroups_596181; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_596197.validator(path, query, header, formData, body)
  let scheme = call_596197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596197.url(scheme.get, call_596197.host, call_596197.base,
                         call_596197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596197, url, valid)

proc call*(call_596198: Call_GetDescribeDBParameterGroups_596181;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_596199 = newJObject()
  add(query_596199, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596199.add "Filters", Filters
  add(query_596199, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_596199, "Action", newJString(Action))
  add(query_596199, "Marker", newJString(Marker))
  add(query_596199, "Version", newJString(Version))
  result = call_596198.call(nil, query_596199, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_596181(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_596182, base: "/",
    url: url_GetDescribeDBParameterGroups_596183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_596240 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBParameters_596242(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBParameters_596241(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596243 = query.getOrDefault("Action")
  valid_596243 = validateParameter(valid_596243, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_596243 != nil:
    section.add "Action", valid_596243
  var valid_596244 = query.getOrDefault("Version")
  valid_596244 = validateParameter(valid_596244, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596244 != nil:
    section.add "Version", valid_596244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596245 = header.getOrDefault("X-Amz-Date")
  valid_596245 = validateParameter(valid_596245, JString, required = false,
                                 default = nil)
  if valid_596245 != nil:
    section.add "X-Amz-Date", valid_596245
  var valid_596246 = header.getOrDefault("X-Amz-Security-Token")
  valid_596246 = validateParameter(valid_596246, JString, required = false,
                                 default = nil)
  if valid_596246 != nil:
    section.add "X-Amz-Security-Token", valid_596246
  var valid_596247 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596247 = validateParameter(valid_596247, JString, required = false,
                                 default = nil)
  if valid_596247 != nil:
    section.add "X-Amz-Content-Sha256", valid_596247
  var valid_596248 = header.getOrDefault("X-Amz-Algorithm")
  valid_596248 = validateParameter(valid_596248, JString, required = false,
                                 default = nil)
  if valid_596248 != nil:
    section.add "X-Amz-Algorithm", valid_596248
  var valid_596249 = header.getOrDefault("X-Amz-Signature")
  valid_596249 = validateParameter(valid_596249, JString, required = false,
                                 default = nil)
  if valid_596249 != nil:
    section.add "X-Amz-Signature", valid_596249
  var valid_596250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596250 = validateParameter(valid_596250, JString, required = false,
                                 default = nil)
  if valid_596250 != nil:
    section.add "X-Amz-SignedHeaders", valid_596250
  var valid_596251 = header.getOrDefault("X-Amz-Credential")
  valid_596251 = validateParameter(valid_596251, JString, required = false,
                                 default = nil)
  if valid_596251 != nil:
    section.add "X-Amz-Credential", valid_596251
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_596252 = formData.getOrDefault("DBParameterGroupName")
  valid_596252 = validateParameter(valid_596252, JString, required = true,
                                 default = nil)
  if valid_596252 != nil:
    section.add "DBParameterGroupName", valid_596252
  var valid_596253 = formData.getOrDefault("Marker")
  valid_596253 = validateParameter(valid_596253, JString, required = false,
                                 default = nil)
  if valid_596253 != nil:
    section.add "Marker", valid_596253
  var valid_596254 = formData.getOrDefault("Filters")
  valid_596254 = validateParameter(valid_596254, JArray, required = false,
                                 default = nil)
  if valid_596254 != nil:
    section.add "Filters", valid_596254
  var valid_596255 = formData.getOrDefault("MaxRecords")
  valid_596255 = validateParameter(valid_596255, JInt, required = false, default = nil)
  if valid_596255 != nil:
    section.add "MaxRecords", valid_596255
  var valid_596256 = formData.getOrDefault("Source")
  valid_596256 = validateParameter(valid_596256, JString, required = false,
                                 default = nil)
  if valid_596256 != nil:
    section.add "Source", valid_596256
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596257: Call_PostDescribeDBParameters_596240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_596257.validator(path, query, header, formData, body)
  let scheme = call_596257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596257.url(scheme.get, call_596257.host, call_596257.base,
                         call_596257.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596257, url, valid)

proc call*(call_596258: Call_PostDescribeDBParameters_596240;
          DBParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  var query_596259 = newJObject()
  var formData_596260 = newJObject()
  add(formData_596260, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_596260, "Marker", newJString(Marker))
  add(query_596259, "Action", newJString(Action))
  if Filters != nil:
    formData_596260.add "Filters", Filters
  add(formData_596260, "MaxRecords", newJInt(MaxRecords))
  add(query_596259, "Version", newJString(Version))
  add(formData_596260, "Source", newJString(Source))
  result = call_596258.call(nil, query_596259, nil, formData_596260, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_596240(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_596241, base: "/",
    url: url_PostDescribeDBParameters_596242, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_596220 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBParameters_596222(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBParameters_596221(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596223 = query.getOrDefault("MaxRecords")
  valid_596223 = validateParameter(valid_596223, JInt, required = false, default = nil)
  if valid_596223 != nil:
    section.add "MaxRecords", valid_596223
  var valid_596224 = query.getOrDefault("Filters")
  valid_596224 = validateParameter(valid_596224, JArray, required = false,
                                 default = nil)
  if valid_596224 != nil:
    section.add "Filters", valid_596224
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_596225 = query.getOrDefault("DBParameterGroupName")
  valid_596225 = validateParameter(valid_596225, JString, required = true,
                                 default = nil)
  if valid_596225 != nil:
    section.add "DBParameterGroupName", valid_596225
  var valid_596226 = query.getOrDefault("Action")
  valid_596226 = validateParameter(valid_596226, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_596226 != nil:
    section.add "Action", valid_596226
  var valid_596227 = query.getOrDefault("Marker")
  valid_596227 = validateParameter(valid_596227, JString, required = false,
                                 default = nil)
  if valid_596227 != nil:
    section.add "Marker", valid_596227
  var valid_596228 = query.getOrDefault("Source")
  valid_596228 = validateParameter(valid_596228, JString, required = false,
                                 default = nil)
  if valid_596228 != nil:
    section.add "Source", valid_596228
  var valid_596229 = query.getOrDefault("Version")
  valid_596229 = validateParameter(valid_596229, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596229 != nil:
    section.add "Version", valid_596229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596230 = header.getOrDefault("X-Amz-Date")
  valid_596230 = validateParameter(valid_596230, JString, required = false,
                                 default = nil)
  if valid_596230 != nil:
    section.add "X-Amz-Date", valid_596230
  var valid_596231 = header.getOrDefault("X-Amz-Security-Token")
  valid_596231 = validateParameter(valid_596231, JString, required = false,
                                 default = nil)
  if valid_596231 != nil:
    section.add "X-Amz-Security-Token", valid_596231
  var valid_596232 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596232 = validateParameter(valid_596232, JString, required = false,
                                 default = nil)
  if valid_596232 != nil:
    section.add "X-Amz-Content-Sha256", valid_596232
  var valid_596233 = header.getOrDefault("X-Amz-Algorithm")
  valid_596233 = validateParameter(valid_596233, JString, required = false,
                                 default = nil)
  if valid_596233 != nil:
    section.add "X-Amz-Algorithm", valid_596233
  var valid_596234 = header.getOrDefault("X-Amz-Signature")
  valid_596234 = validateParameter(valid_596234, JString, required = false,
                                 default = nil)
  if valid_596234 != nil:
    section.add "X-Amz-Signature", valid_596234
  var valid_596235 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596235 = validateParameter(valid_596235, JString, required = false,
                                 default = nil)
  if valid_596235 != nil:
    section.add "X-Amz-SignedHeaders", valid_596235
  var valid_596236 = header.getOrDefault("X-Amz-Credential")
  valid_596236 = validateParameter(valid_596236, JString, required = false,
                                 default = nil)
  if valid_596236 != nil:
    section.add "X-Amz-Credential", valid_596236
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596237: Call_GetDescribeDBParameters_596220; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_596237.validator(path, query, header, formData, body)
  let scheme = call_596237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596237.url(scheme.get, call_596237.host, call_596237.base,
                         call_596237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596237, url, valid)

proc call*(call_596238: Call_GetDescribeDBParameters_596220;
          DBParameterGroupName: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBParameters"; Marker: string = "";
          Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: string (required)
  var query_596239 = newJObject()
  add(query_596239, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596239.add "Filters", Filters
  add(query_596239, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_596239, "Action", newJString(Action))
  add(query_596239, "Marker", newJString(Marker))
  add(query_596239, "Source", newJString(Source))
  add(query_596239, "Version", newJString(Version))
  result = call_596238.call(nil, query_596239, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_596220(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_596221, base: "/",
    url: url_GetDescribeDBParameters_596222, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSecurityGroups_596280 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBSecurityGroups_596282(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSecurityGroups_596281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596283 = query.getOrDefault("Action")
  valid_596283 = validateParameter(valid_596283, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_596283 != nil:
    section.add "Action", valid_596283
  var valid_596284 = query.getOrDefault("Version")
  valid_596284 = validateParameter(valid_596284, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596284 != nil:
    section.add "Version", valid_596284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596285 = header.getOrDefault("X-Amz-Date")
  valid_596285 = validateParameter(valid_596285, JString, required = false,
                                 default = nil)
  if valid_596285 != nil:
    section.add "X-Amz-Date", valid_596285
  var valid_596286 = header.getOrDefault("X-Amz-Security-Token")
  valid_596286 = validateParameter(valid_596286, JString, required = false,
                                 default = nil)
  if valid_596286 != nil:
    section.add "X-Amz-Security-Token", valid_596286
  var valid_596287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596287 = validateParameter(valid_596287, JString, required = false,
                                 default = nil)
  if valid_596287 != nil:
    section.add "X-Amz-Content-Sha256", valid_596287
  var valid_596288 = header.getOrDefault("X-Amz-Algorithm")
  valid_596288 = validateParameter(valid_596288, JString, required = false,
                                 default = nil)
  if valid_596288 != nil:
    section.add "X-Amz-Algorithm", valid_596288
  var valid_596289 = header.getOrDefault("X-Amz-Signature")
  valid_596289 = validateParameter(valid_596289, JString, required = false,
                                 default = nil)
  if valid_596289 != nil:
    section.add "X-Amz-Signature", valid_596289
  var valid_596290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596290 = validateParameter(valid_596290, JString, required = false,
                                 default = nil)
  if valid_596290 != nil:
    section.add "X-Amz-SignedHeaders", valid_596290
  var valid_596291 = header.getOrDefault("X-Amz-Credential")
  valid_596291 = validateParameter(valid_596291, JString, required = false,
                                 default = nil)
  if valid_596291 != nil:
    section.add "X-Amz-Credential", valid_596291
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596292 = formData.getOrDefault("DBSecurityGroupName")
  valid_596292 = validateParameter(valid_596292, JString, required = false,
                                 default = nil)
  if valid_596292 != nil:
    section.add "DBSecurityGroupName", valid_596292
  var valid_596293 = formData.getOrDefault("Marker")
  valid_596293 = validateParameter(valid_596293, JString, required = false,
                                 default = nil)
  if valid_596293 != nil:
    section.add "Marker", valid_596293
  var valid_596294 = formData.getOrDefault("Filters")
  valid_596294 = validateParameter(valid_596294, JArray, required = false,
                                 default = nil)
  if valid_596294 != nil:
    section.add "Filters", valid_596294
  var valid_596295 = formData.getOrDefault("MaxRecords")
  valid_596295 = validateParameter(valid_596295, JInt, required = false, default = nil)
  if valid_596295 != nil:
    section.add "MaxRecords", valid_596295
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596296: Call_PostDescribeDBSecurityGroups_596280; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_596296.validator(path, query, header, formData, body)
  let scheme = call_596296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596296.url(scheme.get, call_596296.host, call_596296.base,
                         call_596296.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596296, url, valid)

proc call*(call_596297: Call_PostDescribeDBSecurityGroups_596280;
          DBSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBSecurityGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596298 = newJObject()
  var formData_596299 = newJObject()
  add(formData_596299, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_596299, "Marker", newJString(Marker))
  add(query_596298, "Action", newJString(Action))
  if Filters != nil:
    formData_596299.add "Filters", Filters
  add(formData_596299, "MaxRecords", newJInt(MaxRecords))
  add(query_596298, "Version", newJString(Version))
  result = call_596297.call(nil, query_596298, nil, formData_596299, nil)

var postDescribeDBSecurityGroups* = Call_PostDescribeDBSecurityGroups_596280(
    name: "postDescribeDBSecurityGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_PostDescribeDBSecurityGroups_596281, base: "/",
    url: url_PostDescribeDBSecurityGroups_596282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSecurityGroups_596261 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBSecurityGroups_596263(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSecurityGroups_596262(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_596264 = query.getOrDefault("MaxRecords")
  valid_596264 = validateParameter(valid_596264, JInt, required = false, default = nil)
  if valid_596264 != nil:
    section.add "MaxRecords", valid_596264
  var valid_596265 = query.getOrDefault("DBSecurityGroupName")
  valid_596265 = validateParameter(valid_596265, JString, required = false,
                                 default = nil)
  if valid_596265 != nil:
    section.add "DBSecurityGroupName", valid_596265
  var valid_596266 = query.getOrDefault("Filters")
  valid_596266 = validateParameter(valid_596266, JArray, required = false,
                                 default = nil)
  if valid_596266 != nil:
    section.add "Filters", valid_596266
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596267 = query.getOrDefault("Action")
  valid_596267 = validateParameter(valid_596267, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_596267 != nil:
    section.add "Action", valid_596267
  var valid_596268 = query.getOrDefault("Marker")
  valid_596268 = validateParameter(valid_596268, JString, required = false,
                                 default = nil)
  if valid_596268 != nil:
    section.add "Marker", valid_596268
  var valid_596269 = query.getOrDefault("Version")
  valid_596269 = validateParameter(valid_596269, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596269 != nil:
    section.add "Version", valid_596269
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596270 = header.getOrDefault("X-Amz-Date")
  valid_596270 = validateParameter(valid_596270, JString, required = false,
                                 default = nil)
  if valid_596270 != nil:
    section.add "X-Amz-Date", valid_596270
  var valid_596271 = header.getOrDefault("X-Amz-Security-Token")
  valid_596271 = validateParameter(valid_596271, JString, required = false,
                                 default = nil)
  if valid_596271 != nil:
    section.add "X-Amz-Security-Token", valid_596271
  var valid_596272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596272 = validateParameter(valid_596272, JString, required = false,
                                 default = nil)
  if valid_596272 != nil:
    section.add "X-Amz-Content-Sha256", valid_596272
  var valid_596273 = header.getOrDefault("X-Amz-Algorithm")
  valid_596273 = validateParameter(valid_596273, JString, required = false,
                                 default = nil)
  if valid_596273 != nil:
    section.add "X-Amz-Algorithm", valid_596273
  var valid_596274 = header.getOrDefault("X-Amz-Signature")
  valid_596274 = validateParameter(valid_596274, JString, required = false,
                                 default = nil)
  if valid_596274 != nil:
    section.add "X-Amz-Signature", valid_596274
  var valid_596275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596275 = validateParameter(valid_596275, JString, required = false,
                                 default = nil)
  if valid_596275 != nil:
    section.add "X-Amz-SignedHeaders", valid_596275
  var valid_596276 = header.getOrDefault("X-Amz-Credential")
  valid_596276 = validateParameter(valid_596276, JString, required = false,
                                 default = nil)
  if valid_596276 != nil:
    section.add "X-Amz-Credential", valid_596276
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596277: Call_GetDescribeDBSecurityGroups_596261; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_596277.validator(path, query, header, formData, body)
  let scheme = call_596277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596277.url(scheme.get, call_596277.host, call_596277.base,
                         call_596277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596277, url, valid)

proc call*(call_596278: Call_GetDescribeDBSecurityGroups_596261;
          MaxRecords: int = 0; DBSecurityGroupName: string = "";
          Filters: JsonNode = nil; Action: string = "DescribeDBSecurityGroups";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_596279 = newJObject()
  add(query_596279, "MaxRecords", newJInt(MaxRecords))
  add(query_596279, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Filters != nil:
    query_596279.add "Filters", Filters
  add(query_596279, "Action", newJString(Action))
  add(query_596279, "Marker", newJString(Marker))
  add(query_596279, "Version", newJString(Version))
  result = call_596278.call(nil, query_596279, nil, nil, nil)

var getDescribeDBSecurityGroups* = Call_GetDescribeDBSecurityGroups_596261(
    name: "getDescribeDBSecurityGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_GetDescribeDBSecurityGroups_596262, base: "/",
    url: url_GetDescribeDBSecurityGroups_596263,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshotAttributes_596316 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBSnapshotAttributes_596318(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSnapshotAttributes_596317(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596319 = query.getOrDefault("Action")
  valid_596319 = validateParameter(valid_596319, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_596319 != nil:
    section.add "Action", valid_596319
  var valid_596320 = query.getOrDefault("Version")
  valid_596320 = validateParameter(valid_596320, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596320 != nil:
    section.add "Version", valid_596320
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596321 = header.getOrDefault("X-Amz-Date")
  valid_596321 = validateParameter(valid_596321, JString, required = false,
                                 default = nil)
  if valid_596321 != nil:
    section.add "X-Amz-Date", valid_596321
  var valid_596322 = header.getOrDefault("X-Amz-Security-Token")
  valid_596322 = validateParameter(valid_596322, JString, required = false,
                                 default = nil)
  if valid_596322 != nil:
    section.add "X-Amz-Security-Token", valid_596322
  var valid_596323 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596323 = validateParameter(valid_596323, JString, required = false,
                                 default = nil)
  if valid_596323 != nil:
    section.add "X-Amz-Content-Sha256", valid_596323
  var valid_596324 = header.getOrDefault("X-Amz-Algorithm")
  valid_596324 = validateParameter(valid_596324, JString, required = false,
                                 default = nil)
  if valid_596324 != nil:
    section.add "X-Amz-Algorithm", valid_596324
  var valid_596325 = header.getOrDefault("X-Amz-Signature")
  valid_596325 = validateParameter(valid_596325, JString, required = false,
                                 default = nil)
  if valid_596325 != nil:
    section.add "X-Amz-Signature", valid_596325
  var valid_596326 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596326 = validateParameter(valid_596326, JString, required = false,
                                 default = nil)
  if valid_596326 != nil:
    section.add "X-Amz-SignedHeaders", valid_596326
  var valid_596327 = header.getOrDefault("X-Amz-Credential")
  valid_596327 = validateParameter(valid_596327, JString, required = false,
                                 default = nil)
  if valid_596327 != nil:
    section.add "X-Amz-Credential", valid_596327
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_596328 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_596328 = validateParameter(valid_596328, JString, required = true,
                                 default = nil)
  if valid_596328 != nil:
    section.add "DBSnapshotIdentifier", valid_596328
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596329: Call_PostDescribeDBSnapshotAttributes_596316;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_596329.validator(path, query, header, formData, body)
  let scheme = call_596329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596329.url(scheme.get, call_596329.host, call_596329.base,
                         call_596329.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596329, url, valid)

proc call*(call_596330: Call_PostDescribeDBSnapshotAttributes_596316;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596331 = newJObject()
  var formData_596332 = newJObject()
  add(formData_596332, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_596331, "Action", newJString(Action))
  add(query_596331, "Version", newJString(Version))
  result = call_596330.call(nil, query_596331, nil, formData_596332, nil)

var postDescribeDBSnapshotAttributes* = Call_PostDescribeDBSnapshotAttributes_596316(
    name: "postDescribeDBSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_PostDescribeDBSnapshotAttributes_596317, base: "/",
    url: url_PostDescribeDBSnapshotAttributes_596318,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshotAttributes_596300 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBSnapshotAttributes_596302(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSnapshotAttributes_596301(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596303 = query.getOrDefault("Action")
  valid_596303 = validateParameter(valid_596303, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_596303 != nil:
    section.add "Action", valid_596303
  var valid_596304 = query.getOrDefault("Version")
  valid_596304 = validateParameter(valid_596304, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596304 != nil:
    section.add "Version", valid_596304
  var valid_596305 = query.getOrDefault("DBSnapshotIdentifier")
  valid_596305 = validateParameter(valid_596305, JString, required = true,
                                 default = nil)
  if valid_596305 != nil:
    section.add "DBSnapshotIdentifier", valid_596305
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596306 = header.getOrDefault("X-Amz-Date")
  valid_596306 = validateParameter(valid_596306, JString, required = false,
                                 default = nil)
  if valid_596306 != nil:
    section.add "X-Amz-Date", valid_596306
  var valid_596307 = header.getOrDefault("X-Amz-Security-Token")
  valid_596307 = validateParameter(valid_596307, JString, required = false,
                                 default = nil)
  if valid_596307 != nil:
    section.add "X-Amz-Security-Token", valid_596307
  var valid_596308 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596308 = validateParameter(valid_596308, JString, required = false,
                                 default = nil)
  if valid_596308 != nil:
    section.add "X-Amz-Content-Sha256", valid_596308
  var valid_596309 = header.getOrDefault("X-Amz-Algorithm")
  valid_596309 = validateParameter(valid_596309, JString, required = false,
                                 default = nil)
  if valid_596309 != nil:
    section.add "X-Amz-Algorithm", valid_596309
  var valid_596310 = header.getOrDefault("X-Amz-Signature")
  valid_596310 = validateParameter(valid_596310, JString, required = false,
                                 default = nil)
  if valid_596310 != nil:
    section.add "X-Amz-Signature", valid_596310
  var valid_596311 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596311 = validateParameter(valid_596311, JString, required = false,
                                 default = nil)
  if valid_596311 != nil:
    section.add "X-Amz-SignedHeaders", valid_596311
  var valid_596312 = header.getOrDefault("X-Amz-Credential")
  valid_596312 = validateParameter(valid_596312, JString, required = false,
                                 default = nil)
  if valid_596312 != nil:
    section.add "X-Amz-Credential", valid_596312
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596313: Call_GetDescribeDBSnapshotAttributes_596300;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_596313.validator(path, query, header, formData, body)
  let scheme = call_596313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596313.url(scheme.get, call_596313.host, call_596313.base,
                         call_596313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596313, url, valid)

proc call*(call_596314: Call_GetDescribeDBSnapshotAttributes_596300;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  var query_596315 = newJObject()
  add(query_596315, "Action", newJString(Action))
  add(query_596315, "Version", newJString(Version))
  add(query_596315, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_596314.call(nil, query_596315, nil, nil, nil)

var getDescribeDBSnapshotAttributes* = Call_GetDescribeDBSnapshotAttributes_596300(
    name: "getDescribeDBSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_GetDescribeDBSnapshotAttributes_596301, base: "/",
    url: url_GetDescribeDBSnapshotAttributes_596302,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshots_596357 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBSnapshots_596359(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSnapshots_596358(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596360 = query.getOrDefault("Action")
  valid_596360 = validateParameter(valid_596360, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_596360 != nil:
    section.add "Action", valid_596360
  var valid_596361 = query.getOrDefault("Version")
  valid_596361 = validateParameter(valid_596361, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596361 != nil:
    section.add "Version", valid_596361
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596362 = header.getOrDefault("X-Amz-Date")
  valid_596362 = validateParameter(valid_596362, JString, required = false,
                                 default = nil)
  if valid_596362 != nil:
    section.add "X-Amz-Date", valid_596362
  var valid_596363 = header.getOrDefault("X-Amz-Security-Token")
  valid_596363 = validateParameter(valid_596363, JString, required = false,
                                 default = nil)
  if valid_596363 != nil:
    section.add "X-Amz-Security-Token", valid_596363
  var valid_596364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596364 = validateParameter(valid_596364, JString, required = false,
                                 default = nil)
  if valid_596364 != nil:
    section.add "X-Amz-Content-Sha256", valid_596364
  var valid_596365 = header.getOrDefault("X-Amz-Algorithm")
  valid_596365 = validateParameter(valid_596365, JString, required = false,
                                 default = nil)
  if valid_596365 != nil:
    section.add "X-Amz-Algorithm", valid_596365
  var valid_596366 = header.getOrDefault("X-Amz-Signature")
  valid_596366 = validateParameter(valid_596366, JString, required = false,
                                 default = nil)
  if valid_596366 != nil:
    section.add "X-Amz-Signature", valid_596366
  var valid_596367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596367 = validateParameter(valid_596367, JString, required = false,
                                 default = nil)
  if valid_596367 != nil:
    section.add "X-Amz-SignedHeaders", valid_596367
  var valid_596368 = header.getOrDefault("X-Amz-Credential")
  valid_596368 = validateParameter(valid_596368, JString, required = false,
                                 default = nil)
  if valid_596368 != nil:
    section.add "X-Amz-Credential", valid_596368
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596369 = formData.getOrDefault("DBInstanceIdentifier")
  valid_596369 = validateParameter(valid_596369, JString, required = false,
                                 default = nil)
  if valid_596369 != nil:
    section.add "DBInstanceIdentifier", valid_596369
  var valid_596370 = formData.getOrDefault("IncludeShared")
  valid_596370 = validateParameter(valid_596370, JBool, required = false, default = nil)
  if valid_596370 != nil:
    section.add "IncludeShared", valid_596370
  var valid_596371 = formData.getOrDefault("IncludePublic")
  valid_596371 = validateParameter(valid_596371, JBool, required = false, default = nil)
  if valid_596371 != nil:
    section.add "IncludePublic", valid_596371
  var valid_596372 = formData.getOrDefault("DbiResourceId")
  valid_596372 = validateParameter(valid_596372, JString, required = false,
                                 default = nil)
  if valid_596372 != nil:
    section.add "DbiResourceId", valid_596372
  var valid_596373 = formData.getOrDefault("SnapshotType")
  valid_596373 = validateParameter(valid_596373, JString, required = false,
                                 default = nil)
  if valid_596373 != nil:
    section.add "SnapshotType", valid_596373
  var valid_596374 = formData.getOrDefault("Marker")
  valid_596374 = validateParameter(valid_596374, JString, required = false,
                                 default = nil)
  if valid_596374 != nil:
    section.add "Marker", valid_596374
  var valid_596375 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_596375 = validateParameter(valid_596375, JString, required = false,
                                 default = nil)
  if valid_596375 != nil:
    section.add "DBSnapshotIdentifier", valid_596375
  var valid_596376 = formData.getOrDefault("Filters")
  valid_596376 = validateParameter(valid_596376, JArray, required = false,
                                 default = nil)
  if valid_596376 != nil:
    section.add "Filters", valid_596376
  var valid_596377 = formData.getOrDefault("MaxRecords")
  valid_596377 = validateParameter(valid_596377, JInt, required = false, default = nil)
  if valid_596377 != nil:
    section.add "MaxRecords", valid_596377
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596378: Call_PostDescribeDBSnapshots_596357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_596378.validator(path, query, header, formData, body)
  let scheme = call_596378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596378.url(scheme.get, call_596378.host, call_596378.base,
                         call_596378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596378, url, valid)

proc call*(call_596379: Call_PostDescribeDBSnapshots_596357;
          DBInstanceIdentifier: string = ""; IncludeShared: bool = false;
          IncludePublic: bool = false; DbiResourceId: string = "";
          SnapshotType: string = ""; Marker: string = "";
          DBSnapshotIdentifier: string = ""; Action: string = "DescribeDBSnapshots";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596380 = newJObject()
  var formData_596381 = newJObject()
  add(formData_596381, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_596381, "IncludeShared", newJBool(IncludeShared))
  add(formData_596381, "IncludePublic", newJBool(IncludePublic))
  add(formData_596381, "DbiResourceId", newJString(DbiResourceId))
  add(formData_596381, "SnapshotType", newJString(SnapshotType))
  add(formData_596381, "Marker", newJString(Marker))
  add(formData_596381, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_596380, "Action", newJString(Action))
  if Filters != nil:
    formData_596381.add "Filters", Filters
  add(formData_596381, "MaxRecords", newJInt(MaxRecords))
  add(query_596380, "Version", newJString(Version))
  result = call_596379.call(nil, query_596380, nil, formData_596381, nil)

var postDescribeDBSnapshots* = Call_PostDescribeDBSnapshots_596357(
    name: "postDescribeDBSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_PostDescribeDBSnapshots_596358, base: "/",
    url: url_PostDescribeDBSnapshots_596359, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshots_596333 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBSnapshots_596335(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSnapshots_596334(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  section = newJObject()
  var valid_596336 = query.getOrDefault("IncludePublic")
  valid_596336 = validateParameter(valid_596336, JBool, required = false, default = nil)
  if valid_596336 != nil:
    section.add "IncludePublic", valid_596336
  var valid_596337 = query.getOrDefault("MaxRecords")
  valid_596337 = validateParameter(valid_596337, JInt, required = false, default = nil)
  if valid_596337 != nil:
    section.add "MaxRecords", valid_596337
  var valid_596338 = query.getOrDefault("Filters")
  valid_596338 = validateParameter(valid_596338, JArray, required = false,
                                 default = nil)
  if valid_596338 != nil:
    section.add "Filters", valid_596338
  var valid_596339 = query.getOrDefault("IncludeShared")
  valid_596339 = validateParameter(valid_596339, JBool, required = false, default = nil)
  if valid_596339 != nil:
    section.add "IncludeShared", valid_596339
  var valid_596340 = query.getOrDefault("DbiResourceId")
  valid_596340 = validateParameter(valid_596340, JString, required = false,
                                 default = nil)
  if valid_596340 != nil:
    section.add "DbiResourceId", valid_596340
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596341 = query.getOrDefault("Action")
  valid_596341 = validateParameter(valid_596341, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_596341 != nil:
    section.add "Action", valid_596341
  var valid_596342 = query.getOrDefault("Marker")
  valid_596342 = validateParameter(valid_596342, JString, required = false,
                                 default = nil)
  if valid_596342 != nil:
    section.add "Marker", valid_596342
  var valid_596343 = query.getOrDefault("SnapshotType")
  valid_596343 = validateParameter(valid_596343, JString, required = false,
                                 default = nil)
  if valid_596343 != nil:
    section.add "SnapshotType", valid_596343
  var valid_596344 = query.getOrDefault("Version")
  valid_596344 = validateParameter(valid_596344, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596344 != nil:
    section.add "Version", valid_596344
  var valid_596345 = query.getOrDefault("DBInstanceIdentifier")
  valid_596345 = validateParameter(valid_596345, JString, required = false,
                                 default = nil)
  if valid_596345 != nil:
    section.add "DBInstanceIdentifier", valid_596345
  var valid_596346 = query.getOrDefault("DBSnapshotIdentifier")
  valid_596346 = validateParameter(valid_596346, JString, required = false,
                                 default = nil)
  if valid_596346 != nil:
    section.add "DBSnapshotIdentifier", valid_596346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596347 = header.getOrDefault("X-Amz-Date")
  valid_596347 = validateParameter(valid_596347, JString, required = false,
                                 default = nil)
  if valid_596347 != nil:
    section.add "X-Amz-Date", valid_596347
  var valid_596348 = header.getOrDefault("X-Amz-Security-Token")
  valid_596348 = validateParameter(valid_596348, JString, required = false,
                                 default = nil)
  if valid_596348 != nil:
    section.add "X-Amz-Security-Token", valid_596348
  var valid_596349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596349 = validateParameter(valid_596349, JString, required = false,
                                 default = nil)
  if valid_596349 != nil:
    section.add "X-Amz-Content-Sha256", valid_596349
  var valid_596350 = header.getOrDefault("X-Amz-Algorithm")
  valid_596350 = validateParameter(valid_596350, JString, required = false,
                                 default = nil)
  if valid_596350 != nil:
    section.add "X-Amz-Algorithm", valid_596350
  var valid_596351 = header.getOrDefault("X-Amz-Signature")
  valid_596351 = validateParameter(valid_596351, JString, required = false,
                                 default = nil)
  if valid_596351 != nil:
    section.add "X-Amz-Signature", valid_596351
  var valid_596352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596352 = validateParameter(valid_596352, JString, required = false,
                                 default = nil)
  if valid_596352 != nil:
    section.add "X-Amz-SignedHeaders", valid_596352
  var valid_596353 = header.getOrDefault("X-Amz-Credential")
  valid_596353 = validateParameter(valid_596353, JString, required = false,
                                 default = nil)
  if valid_596353 != nil:
    section.add "X-Amz-Credential", valid_596353
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596354: Call_GetDescribeDBSnapshots_596333; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_596354.validator(path, query, header, formData, body)
  let scheme = call_596354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596354.url(scheme.get, call_596354.host, call_596354.base,
                         call_596354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596354, url, valid)

proc call*(call_596355: Call_GetDescribeDBSnapshots_596333;
          IncludePublic: bool = false; MaxRecords: int = 0; Filters: JsonNode = nil;
          IncludeShared: bool = false; DbiResourceId: string = "";
          Action: string = "DescribeDBSnapshots"; Marker: string = "";
          SnapshotType: string = ""; Version: string = "2014-10-31";
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = ""): Recallable =
  ## getDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  var query_596356 = newJObject()
  add(query_596356, "IncludePublic", newJBool(IncludePublic))
  add(query_596356, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596356.add "Filters", Filters
  add(query_596356, "IncludeShared", newJBool(IncludeShared))
  add(query_596356, "DbiResourceId", newJString(DbiResourceId))
  add(query_596356, "Action", newJString(Action))
  add(query_596356, "Marker", newJString(Marker))
  add(query_596356, "SnapshotType", newJString(SnapshotType))
  add(query_596356, "Version", newJString(Version))
  add(query_596356, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_596356, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_596355.call(nil, query_596356, nil, nil, nil)

var getDescribeDBSnapshots* = Call_GetDescribeDBSnapshots_596333(
    name: "getDescribeDBSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_GetDescribeDBSnapshots_596334, base: "/",
    url: url_GetDescribeDBSnapshots_596335, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_596401 = ref object of OpenApiRestCall_593421
proc url_PostDescribeDBSubnetGroups_596403(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSubnetGroups_596402(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596404 = query.getOrDefault("Action")
  valid_596404 = validateParameter(valid_596404, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_596404 != nil:
    section.add "Action", valid_596404
  var valid_596405 = query.getOrDefault("Version")
  valid_596405 = validateParameter(valid_596405, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596405 != nil:
    section.add "Version", valid_596405
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596406 = header.getOrDefault("X-Amz-Date")
  valid_596406 = validateParameter(valid_596406, JString, required = false,
                                 default = nil)
  if valid_596406 != nil:
    section.add "X-Amz-Date", valid_596406
  var valid_596407 = header.getOrDefault("X-Amz-Security-Token")
  valid_596407 = validateParameter(valid_596407, JString, required = false,
                                 default = nil)
  if valid_596407 != nil:
    section.add "X-Amz-Security-Token", valid_596407
  var valid_596408 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596408 = validateParameter(valid_596408, JString, required = false,
                                 default = nil)
  if valid_596408 != nil:
    section.add "X-Amz-Content-Sha256", valid_596408
  var valid_596409 = header.getOrDefault("X-Amz-Algorithm")
  valid_596409 = validateParameter(valid_596409, JString, required = false,
                                 default = nil)
  if valid_596409 != nil:
    section.add "X-Amz-Algorithm", valid_596409
  var valid_596410 = header.getOrDefault("X-Amz-Signature")
  valid_596410 = validateParameter(valid_596410, JString, required = false,
                                 default = nil)
  if valid_596410 != nil:
    section.add "X-Amz-Signature", valid_596410
  var valid_596411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596411 = validateParameter(valid_596411, JString, required = false,
                                 default = nil)
  if valid_596411 != nil:
    section.add "X-Amz-SignedHeaders", valid_596411
  var valid_596412 = header.getOrDefault("X-Amz-Credential")
  valid_596412 = validateParameter(valid_596412, JString, required = false,
                                 default = nil)
  if valid_596412 != nil:
    section.add "X-Amz-Credential", valid_596412
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596413 = formData.getOrDefault("DBSubnetGroupName")
  valid_596413 = validateParameter(valid_596413, JString, required = false,
                                 default = nil)
  if valid_596413 != nil:
    section.add "DBSubnetGroupName", valid_596413
  var valid_596414 = formData.getOrDefault("Marker")
  valid_596414 = validateParameter(valid_596414, JString, required = false,
                                 default = nil)
  if valid_596414 != nil:
    section.add "Marker", valid_596414
  var valid_596415 = formData.getOrDefault("Filters")
  valid_596415 = validateParameter(valid_596415, JArray, required = false,
                                 default = nil)
  if valid_596415 != nil:
    section.add "Filters", valid_596415
  var valid_596416 = formData.getOrDefault("MaxRecords")
  valid_596416 = validateParameter(valid_596416, JInt, required = false, default = nil)
  if valid_596416 != nil:
    section.add "MaxRecords", valid_596416
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596417: Call_PostDescribeDBSubnetGroups_596401; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_596417.validator(path, query, header, formData, body)
  let scheme = call_596417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596417.url(scheme.get, call_596417.host, call_596417.base,
                         call_596417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596417, url, valid)

proc call*(call_596418: Call_PostDescribeDBSubnetGroups_596401;
          DBSubnetGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596419 = newJObject()
  var formData_596420 = newJObject()
  add(formData_596420, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_596420, "Marker", newJString(Marker))
  add(query_596419, "Action", newJString(Action))
  if Filters != nil:
    formData_596420.add "Filters", Filters
  add(formData_596420, "MaxRecords", newJInt(MaxRecords))
  add(query_596419, "Version", newJString(Version))
  result = call_596418.call(nil, query_596419, nil, formData_596420, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_596401(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_596402, base: "/",
    url: url_PostDescribeDBSubnetGroups_596403,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_596382 = ref object of OpenApiRestCall_593421
proc url_GetDescribeDBSubnetGroups_596384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSubnetGroups_596383(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_596385 = query.getOrDefault("MaxRecords")
  valid_596385 = validateParameter(valid_596385, JInt, required = false, default = nil)
  if valid_596385 != nil:
    section.add "MaxRecords", valid_596385
  var valid_596386 = query.getOrDefault("Filters")
  valid_596386 = validateParameter(valid_596386, JArray, required = false,
                                 default = nil)
  if valid_596386 != nil:
    section.add "Filters", valid_596386
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596387 = query.getOrDefault("Action")
  valid_596387 = validateParameter(valid_596387, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_596387 != nil:
    section.add "Action", valid_596387
  var valid_596388 = query.getOrDefault("Marker")
  valid_596388 = validateParameter(valid_596388, JString, required = false,
                                 default = nil)
  if valid_596388 != nil:
    section.add "Marker", valid_596388
  var valid_596389 = query.getOrDefault("DBSubnetGroupName")
  valid_596389 = validateParameter(valid_596389, JString, required = false,
                                 default = nil)
  if valid_596389 != nil:
    section.add "DBSubnetGroupName", valid_596389
  var valid_596390 = query.getOrDefault("Version")
  valid_596390 = validateParameter(valid_596390, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596390 != nil:
    section.add "Version", valid_596390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596391 = header.getOrDefault("X-Amz-Date")
  valid_596391 = validateParameter(valid_596391, JString, required = false,
                                 default = nil)
  if valid_596391 != nil:
    section.add "X-Amz-Date", valid_596391
  var valid_596392 = header.getOrDefault("X-Amz-Security-Token")
  valid_596392 = validateParameter(valid_596392, JString, required = false,
                                 default = nil)
  if valid_596392 != nil:
    section.add "X-Amz-Security-Token", valid_596392
  var valid_596393 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596393 = validateParameter(valid_596393, JString, required = false,
                                 default = nil)
  if valid_596393 != nil:
    section.add "X-Amz-Content-Sha256", valid_596393
  var valid_596394 = header.getOrDefault("X-Amz-Algorithm")
  valid_596394 = validateParameter(valid_596394, JString, required = false,
                                 default = nil)
  if valid_596394 != nil:
    section.add "X-Amz-Algorithm", valid_596394
  var valid_596395 = header.getOrDefault("X-Amz-Signature")
  valid_596395 = validateParameter(valid_596395, JString, required = false,
                                 default = nil)
  if valid_596395 != nil:
    section.add "X-Amz-Signature", valid_596395
  var valid_596396 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596396 = validateParameter(valid_596396, JString, required = false,
                                 default = nil)
  if valid_596396 != nil:
    section.add "X-Amz-SignedHeaders", valid_596396
  var valid_596397 = header.getOrDefault("X-Amz-Credential")
  valid_596397 = validateParameter(valid_596397, JString, required = false,
                                 default = nil)
  if valid_596397 != nil:
    section.add "X-Amz-Credential", valid_596397
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596398: Call_GetDescribeDBSubnetGroups_596382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_596398.validator(path, query, header, formData, body)
  let scheme = call_596398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596398.url(scheme.get, call_596398.host, call_596398.base,
                         call_596398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596398, url, valid)

proc call*(call_596399: Call_GetDescribeDBSubnetGroups_596382; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBSubnetGroups";
          Marker: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  var query_596400 = newJObject()
  add(query_596400, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596400.add "Filters", Filters
  add(query_596400, "Action", newJString(Action))
  add(query_596400, "Marker", newJString(Marker))
  add(query_596400, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_596400, "Version", newJString(Version))
  result = call_596399.call(nil, query_596400, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_596382(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_596383, base: "/",
    url: url_GetDescribeDBSubnetGroups_596384,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_596440 = ref object of OpenApiRestCall_593421
proc url_PostDescribeEngineDefaultClusterParameters_596442(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_596441(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596443 = query.getOrDefault("Action")
  valid_596443 = validateParameter(valid_596443, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_596443 != nil:
    section.add "Action", valid_596443
  var valid_596444 = query.getOrDefault("Version")
  valid_596444 = validateParameter(valid_596444, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596444 != nil:
    section.add "Version", valid_596444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596445 = header.getOrDefault("X-Amz-Date")
  valid_596445 = validateParameter(valid_596445, JString, required = false,
                                 default = nil)
  if valid_596445 != nil:
    section.add "X-Amz-Date", valid_596445
  var valid_596446 = header.getOrDefault("X-Amz-Security-Token")
  valid_596446 = validateParameter(valid_596446, JString, required = false,
                                 default = nil)
  if valid_596446 != nil:
    section.add "X-Amz-Security-Token", valid_596446
  var valid_596447 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596447 = validateParameter(valid_596447, JString, required = false,
                                 default = nil)
  if valid_596447 != nil:
    section.add "X-Amz-Content-Sha256", valid_596447
  var valid_596448 = header.getOrDefault("X-Amz-Algorithm")
  valid_596448 = validateParameter(valid_596448, JString, required = false,
                                 default = nil)
  if valid_596448 != nil:
    section.add "X-Amz-Algorithm", valid_596448
  var valid_596449 = header.getOrDefault("X-Amz-Signature")
  valid_596449 = validateParameter(valid_596449, JString, required = false,
                                 default = nil)
  if valid_596449 != nil:
    section.add "X-Amz-Signature", valid_596449
  var valid_596450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596450 = validateParameter(valid_596450, JString, required = false,
                                 default = nil)
  if valid_596450 != nil:
    section.add "X-Amz-SignedHeaders", valid_596450
  var valid_596451 = header.getOrDefault("X-Amz-Credential")
  valid_596451 = validateParameter(valid_596451, JString, required = false,
                                 default = nil)
  if valid_596451 != nil:
    section.add "X-Amz-Credential", valid_596451
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596452 = formData.getOrDefault("Marker")
  valid_596452 = validateParameter(valid_596452, JString, required = false,
                                 default = nil)
  if valid_596452 != nil:
    section.add "Marker", valid_596452
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_596453 = formData.getOrDefault("DBParameterGroupFamily")
  valid_596453 = validateParameter(valid_596453, JString, required = true,
                                 default = nil)
  if valid_596453 != nil:
    section.add "DBParameterGroupFamily", valid_596453
  var valid_596454 = formData.getOrDefault("Filters")
  valid_596454 = validateParameter(valid_596454, JArray, required = false,
                                 default = nil)
  if valid_596454 != nil:
    section.add "Filters", valid_596454
  var valid_596455 = formData.getOrDefault("MaxRecords")
  valid_596455 = validateParameter(valid_596455, JInt, required = false, default = nil)
  if valid_596455 != nil:
    section.add "MaxRecords", valid_596455
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596456: Call_PostDescribeEngineDefaultClusterParameters_596440;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_596456.validator(path, query, header, formData, body)
  let scheme = call_596456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596456.url(scheme.get, call_596456.host, call_596456.base,
                         call_596456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596456, url, valid)

proc call*(call_596457: Call_PostDescribeEngineDefaultClusterParameters_596440;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596458 = newJObject()
  var formData_596459 = newJObject()
  add(formData_596459, "Marker", newJString(Marker))
  add(query_596458, "Action", newJString(Action))
  add(formData_596459, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_596459.add "Filters", Filters
  add(formData_596459, "MaxRecords", newJInt(MaxRecords))
  add(query_596458, "Version", newJString(Version))
  result = call_596457.call(nil, query_596458, nil, formData_596459, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_596440(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_596441,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_596442,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_596421 = ref object of OpenApiRestCall_593421
proc url_GetDescribeEngineDefaultClusterParameters_596423(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_596422(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_596424 = query.getOrDefault("MaxRecords")
  valid_596424 = validateParameter(valid_596424, JInt, required = false, default = nil)
  if valid_596424 != nil:
    section.add "MaxRecords", valid_596424
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_596425 = query.getOrDefault("DBParameterGroupFamily")
  valid_596425 = validateParameter(valid_596425, JString, required = true,
                                 default = nil)
  if valid_596425 != nil:
    section.add "DBParameterGroupFamily", valid_596425
  var valid_596426 = query.getOrDefault("Filters")
  valid_596426 = validateParameter(valid_596426, JArray, required = false,
                                 default = nil)
  if valid_596426 != nil:
    section.add "Filters", valid_596426
  var valid_596427 = query.getOrDefault("Action")
  valid_596427 = validateParameter(valid_596427, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_596427 != nil:
    section.add "Action", valid_596427
  var valid_596428 = query.getOrDefault("Marker")
  valid_596428 = validateParameter(valid_596428, JString, required = false,
                                 default = nil)
  if valid_596428 != nil:
    section.add "Marker", valid_596428
  var valid_596429 = query.getOrDefault("Version")
  valid_596429 = validateParameter(valid_596429, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596429 != nil:
    section.add "Version", valid_596429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596430 = header.getOrDefault("X-Amz-Date")
  valid_596430 = validateParameter(valid_596430, JString, required = false,
                                 default = nil)
  if valid_596430 != nil:
    section.add "X-Amz-Date", valid_596430
  var valid_596431 = header.getOrDefault("X-Amz-Security-Token")
  valid_596431 = validateParameter(valid_596431, JString, required = false,
                                 default = nil)
  if valid_596431 != nil:
    section.add "X-Amz-Security-Token", valid_596431
  var valid_596432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596432 = validateParameter(valid_596432, JString, required = false,
                                 default = nil)
  if valid_596432 != nil:
    section.add "X-Amz-Content-Sha256", valid_596432
  var valid_596433 = header.getOrDefault("X-Amz-Algorithm")
  valid_596433 = validateParameter(valid_596433, JString, required = false,
                                 default = nil)
  if valid_596433 != nil:
    section.add "X-Amz-Algorithm", valid_596433
  var valid_596434 = header.getOrDefault("X-Amz-Signature")
  valid_596434 = validateParameter(valid_596434, JString, required = false,
                                 default = nil)
  if valid_596434 != nil:
    section.add "X-Amz-Signature", valid_596434
  var valid_596435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596435 = validateParameter(valid_596435, JString, required = false,
                                 default = nil)
  if valid_596435 != nil:
    section.add "X-Amz-SignedHeaders", valid_596435
  var valid_596436 = header.getOrDefault("X-Amz-Credential")
  valid_596436 = validateParameter(valid_596436, JString, required = false,
                                 default = nil)
  if valid_596436 != nil:
    section.add "X-Amz-Credential", valid_596436
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596437: Call_GetDescribeEngineDefaultClusterParameters_596421;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_596437.validator(path, query, header, formData, body)
  let scheme = call_596437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596437.url(scheme.get, call_596437.host, call_596437.base,
                         call_596437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596437, url, valid)

proc call*(call_596438: Call_GetDescribeEngineDefaultClusterParameters_596421;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultClusterParameters";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_596439 = newJObject()
  add(query_596439, "MaxRecords", newJInt(MaxRecords))
  add(query_596439, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_596439.add "Filters", Filters
  add(query_596439, "Action", newJString(Action))
  add(query_596439, "Marker", newJString(Marker))
  add(query_596439, "Version", newJString(Version))
  result = call_596438.call(nil, query_596439, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_596421(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_596422,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_596423,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_596479 = ref object of OpenApiRestCall_593421
proc url_PostDescribeEngineDefaultParameters_596481(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_596480(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596482 = query.getOrDefault("Action")
  valid_596482 = validateParameter(valid_596482, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_596482 != nil:
    section.add "Action", valid_596482
  var valid_596483 = query.getOrDefault("Version")
  valid_596483 = validateParameter(valid_596483, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596483 != nil:
    section.add "Version", valid_596483
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596484 = header.getOrDefault("X-Amz-Date")
  valid_596484 = validateParameter(valid_596484, JString, required = false,
                                 default = nil)
  if valid_596484 != nil:
    section.add "X-Amz-Date", valid_596484
  var valid_596485 = header.getOrDefault("X-Amz-Security-Token")
  valid_596485 = validateParameter(valid_596485, JString, required = false,
                                 default = nil)
  if valid_596485 != nil:
    section.add "X-Amz-Security-Token", valid_596485
  var valid_596486 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596486 = validateParameter(valid_596486, JString, required = false,
                                 default = nil)
  if valid_596486 != nil:
    section.add "X-Amz-Content-Sha256", valid_596486
  var valid_596487 = header.getOrDefault("X-Amz-Algorithm")
  valid_596487 = validateParameter(valid_596487, JString, required = false,
                                 default = nil)
  if valid_596487 != nil:
    section.add "X-Amz-Algorithm", valid_596487
  var valid_596488 = header.getOrDefault("X-Amz-Signature")
  valid_596488 = validateParameter(valid_596488, JString, required = false,
                                 default = nil)
  if valid_596488 != nil:
    section.add "X-Amz-Signature", valid_596488
  var valid_596489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596489 = validateParameter(valid_596489, JString, required = false,
                                 default = nil)
  if valid_596489 != nil:
    section.add "X-Amz-SignedHeaders", valid_596489
  var valid_596490 = header.getOrDefault("X-Amz-Credential")
  valid_596490 = validateParameter(valid_596490, JString, required = false,
                                 default = nil)
  if valid_596490 != nil:
    section.add "X-Amz-Credential", valid_596490
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596491 = formData.getOrDefault("Marker")
  valid_596491 = validateParameter(valid_596491, JString, required = false,
                                 default = nil)
  if valid_596491 != nil:
    section.add "Marker", valid_596491
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_596492 = formData.getOrDefault("DBParameterGroupFamily")
  valid_596492 = validateParameter(valid_596492, JString, required = true,
                                 default = nil)
  if valid_596492 != nil:
    section.add "DBParameterGroupFamily", valid_596492
  var valid_596493 = formData.getOrDefault("Filters")
  valid_596493 = validateParameter(valid_596493, JArray, required = false,
                                 default = nil)
  if valid_596493 != nil:
    section.add "Filters", valid_596493
  var valid_596494 = formData.getOrDefault("MaxRecords")
  valid_596494 = validateParameter(valid_596494, JInt, required = false, default = nil)
  if valid_596494 != nil:
    section.add "MaxRecords", valid_596494
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596495: Call_PostDescribeEngineDefaultParameters_596479;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_596495.validator(path, query, header, formData, body)
  let scheme = call_596495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596495.url(scheme.get, call_596495.host, call_596495.base,
                         call_596495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596495, url, valid)

proc call*(call_596496: Call_PostDescribeEngineDefaultParameters_596479;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596497 = newJObject()
  var formData_596498 = newJObject()
  add(formData_596498, "Marker", newJString(Marker))
  add(query_596497, "Action", newJString(Action))
  add(formData_596498, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_596498.add "Filters", Filters
  add(formData_596498, "MaxRecords", newJInt(MaxRecords))
  add(query_596497, "Version", newJString(Version))
  result = call_596496.call(nil, query_596497, nil, formData_596498, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_596479(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_596480, base: "/",
    url: url_PostDescribeEngineDefaultParameters_596481,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_596460 = ref object of OpenApiRestCall_593421
proc url_GetDescribeEngineDefaultParameters_596462(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_596461(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_596463 = query.getOrDefault("MaxRecords")
  valid_596463 = validateParameter(valid_596463, JInt, required = false, default = nil)
  if valid_596463 != nil:
    section.add "MaxRecords", valid_596463
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_596464 = query.getOrDefault("DBParameterGroupFamily")
  valid_596464 = validateParameter(valid_596464, JString, required = true,
                                 default = nil)
  if valid_596464 != nil:
    section.add "DBParameterGroupFamily", valid_596464
  var valid_596465 = query.getOrDefault("Filters")
  valid_596465 = validateParameter(valid_596465, JArray, required = false,
                                 default = nil)
  if valid_596465 != nil:
    section.add "Filters", valid_596465
  var valid_596466 = query.getOrDefault("Action")
  valid_596466 = validateParameter(valid_596466, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_596466 != nil:
    section.add "Action", valid_596466
  var valid_596467 = query.getOrDefault("Marker")
  valid_596467 = validateParameter(valid_596467, JString, required = false,
                                 default = nil)
  if valid_596467 != nil:
    section.add "Marker", valid_596467
  var valid_596468 = query.getOrDefault("Version")
  valid_596468 = validateParameter(valid_596468, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596468 != nil:
    section.add "Version", valid_596468
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596469 = header.getOrDefault("X-Amz-Date")
  valid_596469 = validateParameter(valid_596469, JString, required = false,
                                 default = nil)
  if valid_596469 != nil:
    section.add "X-Amz-Date", valid_596469
  var valid_596470 = header.getOrDefault("X-Amz-Security-Token")
  valid_596470 = validateParameter(valid_596470, JString, required = false,
                                 default = nil)
  if valid_596470 != nil:
    section.add "X-Amz-Security-Token", valid_596470
  var valid_596471 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596471 = validateParameter(valid_596471, JString, required = false,
                                 default = nil)
  if valid_596471 != nil:
    section.add "X-Amz-Content-Sha256", valid_596471
  var valid_596472 = header.getOrDefault("X-Amz-Algorithm")
  valid_596472 = validateParameter(valid_596472, JString, required = false,
                                 default = nil)
  if valid_596472 != nil:
    section.add "X-Amz-Algorithm", valid_596472
  var valid_596473 = header.getOrDefault("X-Amz-Signature")
  valid_596473 = validateParameter(valid_596473, JString, required = false,
                                 default = nil)
  if valid_596473 != nil:
    section.add "X-Amz-Signature", valid_596473
  var valid_596474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596474 = validateParameter(valid_596474, JString, required = false,
                                 default = nil)
  if valid_596474 != nil:
    section.add "X-Amz-SignedHeaders", valid_596474
  var valid_596475 = header.getOrDefault("X-Amz-Credential")
  valid_596475 = validateParameter(valid_596475, JString, required = false,
                                 default = nil)
  if valid_596475 != nil:
    section.add "X-Amz-Credential", valid_596475
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596476: Call_GetDescribeEngineDefaultParameters_596460;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_596476.validator(path, query, header, formData, body)
  let scheme = call_596476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596476.url(scheme.get, call_596476.host, call_596476.base,
                         call_596476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596476, url, valid)

proc call*(call_596477: Call_GetDescribeEngineDefaultParameters_596460;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultParameters"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_596478 = newJObject()
  add(query_596478, "MaxRecords", newJInt(MaxRecords))
  add(query_596478, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_596478.add "Filters", Filters
  add(query_596478, "Action", newJString(Action))
  add(query_596478, "Marker", newJString(Marker))
  add(query_596478, "Version", newJString(Version))
  result = call_596477.call(nil, query_596478, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_596460(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_596461, base: "/",
    url: url_GetDescribeEngineDefaultParameters_596462,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_596516 = ref object of OpenApiRestCall_593421
proc url_PostDescribeEventCategories_596518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEventCategories_596517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596519 = query.getOrDefault("Action")
  valid_596519 = validateParameter(valid_596519, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_596519 != nil:
    section.add "Action", valid_596519
  var valid_596520 = query.getOrDefault("Version")
  valid_596520 = validateParameter(valid_596520, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596520 != nil:
    section.add "Version", valid_596520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596521 = header.getOrDefault("X-Amz-Date")
  valid_596521 = validateParameter(valid_596521, JString, required = false,
                                 default = nil)
  if valid_596521 != nil:
    section.add "X-Amz-Date", valid_596521
  var valid_596522 = header.getOrDefault("X-Amz-Security-Token")
  valid_596522 = validateParameter(valid_596522, JString, required = false,
                                 default = nil)
  if valid_596522 != nil:
    section.add "X-Amz-Security-Token", valid_596522
  var valid_596523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596523 = validateParameter(valid_596523, JString, required = false,
                                 default = nil)
  if valid_596523 != nil:
    section.add "X-Amz-Content-Sha256", valid_596523
  var valid_596524 = header.getOrDefault("X-Amz-Algorithm")
  valid_596524 = validateParameter(valid_596524, JString, required = false,
                                 default = nil)
  if valid_596524 != nil:
    section.add "X-Amz-Algorithm", valid_596524
  var valid_596525 = header.getOrDefault("X-Amz-Signature")
  valid_596525 = validateParameter(valid_596525, JString, required = false,
                                 default = nil)
  if valid_596525 != nil:
    section.add "X-Amz-Signature", valid_596525
  var valid_596526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596526 = validateParameter(valid_596526, JString, required = false,
                                 default = nil)
  if valid_596526 != nil:
    section.add "X-Amz-SignedHeaders", valid_596526
  var valid_596527 = header.getOrDefault("X-Amz-Credential")
  valid_596527 = validateParameter(valid_596527, JString, required = false,
                                 default = nil)
  if valid_596527 != nil:
    section.add "X-Amz-Credential", valid_596527
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_596528 = formData.getOrDefault("Filters")
  valid_596528 = validateParameter(valid_596528, JArray, required = false,
                                 default = nil)
  if valid_596528 != nil:
    section.add "Filters", valid_596528
  var valid_596529 = formData.getOrDefault("SourceType")
  valid_596529 = validateParameter(valid_596529, JString, required = false,
                                 default = nil)
  if valid_596529 != nil:
    section.add "SourceType", valid_596529
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596530: Call_PostDescribeEventCategories_596516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_596530.validator(path, query, header, formData, body)
  let scheme = call_596530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596530.url(scheme.get, call_596530.host, call_596530.base,
                         call_596530.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596530, url, valid)

proc call*(call_596531: Call_PostDescribeEventCategories_596516;
          Action: string = "DescribeEventCategories"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_596532 = newJObject()
  var formData_596533 = newJObject()
  add(query_596532, "Action", newJString(Action))
  if Filters != nil:
    formData_596533.add "Filters", Filters
  add(query_596532, "Version", newJString(Version))
  add(formData_596533, "SourceType", newJString(SourceType))
  result = call_596531.call(nil, query_596532, nil, formData_596533, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_596516(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_596517, base: "/",
    url: url_PostDescribeEventCategories_596518,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_596499 = ref object of OpenApiRestCall_593421
proc url_GetDescribeEventCategories_596501(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEventCategories_596500(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_596502 = query.getOrDefault("SourceType")
  valid_596502 = validateParameter(valid_596502, JString, required = false,
                                 default = nil)
  if valid_596502 != nil:
    section.add "SourceType", valid_596502
  var valid_596503 = query.getOrDefault("Filters")
  valid_596503 = validateParameter(valid_596503, JArray, required = false,
                                 default = nil)
  if valid_596503 != nil:
    section.add "Filters", valid_596503
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596504 = query.getOrDefault("Action")
  valid_596504 = validateParameter(valid_596504, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_596504 != nil:
    section.add "Action", valid_596504
  var valid_596505 = query.getOrDefault("Version")
  valid_596505 = validateParameter(valid_596505, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596505 != nil:
    section.add "Version", valid_596505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596506 = header.getOrDefault("X-Amz-Date")
  valid_596506 = validateParameter(valid_596506, JString, required = false,
                                 default = nil)
  if valid_596506 != nil:
    section.add "X-Amz-Date", valid_596506
  var valid_596507 = header.getOrDefault("X-Amz-Security-Token")
  valid_596507 = validateParameter(valid_596507, JString, required = false,
                                 default = nil)
  if valid_596507 != nil:
    section.add "X-Amz-Security-Token", valid_596507
  var valid_596508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596508 = validateParameter(valid_596508, JString, required = false,
                                 default = nil)
  if valid_596508 != nil:
    section.add "X-Amz-Content-Sha256", valid_596508
  var valid_596509 = header.getOrDefault("X-Amz-Algorithm")
  valid_596509 = validateParameter(valid_596509, JString, required = false,
                                 default = nil)
  if valid_596509 != nil:
    section.add "X-Amz-Algorithm", valid_596509
  var valid_596510 = header.getOrDefault("X-Amz-Signature")
  valid_596510 = validateParameter(valid_596510, JString, required = false,
                                 default = nil)
  if valid_596510 != nil:
    section.add "X-Amz-Signature", valid_596510
  var valid_596511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596511 = validateParameter(valid_596511, JString, required = false,
                                 default = nil)
  if valid_596511 != nil:
    section.add "X-Amz-SignedHeaders", valid_596511
  var valid_596512 = header.getOrDefault("X-Amz-Credential")
  valid_596512 = validateParameter(valid_596512, JString, required = false,
                                 default = nil)
  if valid_596512 != nil:
    section.add "X-Amz-Credential", valid_596512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596513: Call_GetDescribeEventCategories_596499; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_596513.validator(path, query, header, formData, body)
  let scheme = call_596513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596513.url(scheme.get, call_596513.host, call_596513.base,
                         call_596513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596513, url, valid)

proc call*(call_596514: Call_GetDescribeEventCategories_596499;
          SourceType: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEventCategories"; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596515 = newJObject()
  add(query_596515, "SourceType", newJString(SourceType))
  if Filters != nil:
    query_596515.add "Filters", Filters
  add(query_596515, "Action", newJString(Action))
  add(query_596515, "Version", newJString(Version))
  result = call_596514.call(nil, query_596515, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_596499(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_596500, base: "/",
    url: url_GetDescribeEventCategories_596501,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_596553 = ref object of OpenApiRestCall_593421
proc url_PostDescribeEventSubscriptions_596555(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEventSubscriptions_596554(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596556 = query.getOrDefault("Action")
  valid_596556 = validateParameter(valid_596556, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_596556 != nil:
    section.add "Action", valid_596556
  var valid_596557 = query.getOrDefault("Version")
  valid_596557 = validateParameter(valid_596557, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596557 != nil:
    section.add "Version", valid_596557
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596558 = header.getOrDefault("X-Amz-Date")
  valid_596558 = validateParameter(valid_596558, JString, required = false,
                                 default = nil)
  if valid_596558 != nil:
    section.add "X-Amz-Date", valid_596558
  var valid_596559 = header.getOrDefault("X-Amz-Security-Token")
  valid_596559 = validateParameter(valid_596559, JString, required = false,
                                 default = nil)
  if valid_596559 != nil:
    section.add "X-Amz-Security-Token", valid_596559
  var valid_596560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596560 = validateParameter(valid_596560, JString, required = false,
                                 default = nil)
  if valid_596560 != nil:
    section.add "X-Amz-Content-Sha256", valid_596560
  var valid_596561 = header.getOrDefault("X-Amz-Algorithm")
  valid_596561 = validateParameter(valid_596561, JString, required = false,
                                 default = nil)
  if valid_596561 != nil:
    section.add "X-Amz-Algorithm", valid_596561
  var valid_596562 = header.getOrDefault("X-Amz-Signature")
  valid_596562 = validateParameter(valid_596562, JString, required = false,
                                 default = nil)
  if valid_596562 != nil:
    section.add "X-Amz-Signature", valid_596562
  var valid_596563 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596563 = validateParameter(valid_596563, JString, required = false,
                                 default = nil)
  if valid_596563 != nil:
    section.add "X-Amz-SignedHeaders", valid_596563
  var valid_596564 = header.getOrDefault("X-Amz-Credential")
  valid_596564 = validateParameter(valid_596564, JString, required = false,
                                 default = nil)
  if valid_596564 != nil:
    section.add "X-Amz-Credential", valid_596564
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596565 = formData.getOrDefault("Marker")
  valid_596565 = validateParameter(valid_596565, JString, required = false,
                                 default = nil)
  if valid_596565 != nil:
    section.add "Marker", valid_596565
  var valid_596566 = formData.getOrDefault("SubscriptionName")
  valid_596566 = validateParameter(valid_596566, JString, required = false,
                                 default = nil)
  if valid_596566 != nil:
    section.add "SubscriptionName", valid_596566
  var valid_596567 = formData.getOrDefault("Filters")
  valid_596567 = validateParameter(valid_596567, JArray, required = false,
                                 default = nil)
  if valid_596567 != nil:
    section.add "Filters", valid_596567
  var valid_596568 = formData.getOrDefault("MaxRecords")
  valid_596568 = validateParameter(valid_596568, JInt, required = false, default = nil)
  if valid_596568 != nil:
    section.add "MaxRecords", valid_596568
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596569: Call_PostDescribeEventSubscriptions_596553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_596569.validator(path, query, header, formData, body)
  let scheme = call_596569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596569.url(scheme.get, call_596569.host, call_596569.base,
                         call_596569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596569, url, valid)

proc call*(call_596570: Call_PostDescribeEventSubscriptions_596553;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596571 = newJObject()
  var formData_596572 = newJObject()
  add(formData_596572, "Marker", newJString(Marker))
  add(formData_596572, "SubscriptionName", newJString(SubscriptionName))
  add(query_596571, "Action", newJString(Action))
  if Filters != nil:
    formData_596572.add "Filters", Filters
  add(formData_596572, "MaxRecords", newJInt(MaxRecords))
  add(query_596571, "Version", newJString(Version))
  result = call_596570.call(nil, query_596571, nil, formData_596572, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_596553(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_596554, base: "/",
    url: url_PostDescribeEventSubscriptions_596555,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_596534 = ref object of OpenApiRestCall_593421
proc url_GetDescribeEventSubscriptions_596536(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEventSubscriptions_596535(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Version: JString (required)
  section = newJObject()
  var valid_596537 = query.getOrDefault("MaxRecords")
  valid_596537 = validateParameter(valid_596537, JInt, required = false, default = nil)
  if valid_596537 != nil:
    section.add "MaxRecords", valid_596537
  var valid_596538 = query.getOrDefault("Filters")
  valid_596538 = validateParameter(valid_596538, JArray, required = false,
                                 default = nil)
  if valid_596538 != nil:
    section.add "Filters", valid_596538
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596539 = query.getOrDefault("Action")
  valid_596539 = validateParameter(valid_596539, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_596539 != nil:
    section.add "Action", valid_596539
  var valid_596540 = query.getOrDefault("Marker")
  valid_596540 = validateParameter(valid_596540, JString, required = false,
                                 default = nil)
  if valid_596540 != nil:
    section.add "Marker", valid_596540
  var valid_596541 = query.getOrDefault("SubscriptionName")
  valid_596541 = validateParameter(valid_596541, JString, required = false,
                                 default = nil)
  if valid_596541 != nil:
    section.add "SubscriptionName", valid_596541
  var valid_596542 = query.getOrDefault("Version")
  valid_596542 = validateParameter(valid_596542, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596542 != nil:
    section.add "Version", valid_596542
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596543 = header.getOrDefault("X-Amz-Date")
  valid_596543 = validateParameter(valid_596543, JString, required = false,
                                 default = nil)
  if valid_596543 != nil:
    section.add "X-Amz-Date", valid_596543
  var valid_596544 = header.getOrDefault("X-Amz-Security-Token")
  valid_596544 = validateParameter(valid_596544, JString, required = false,
                                 default = nil)
  if valid_596544 != nil:
    section.add "X-Amz-Security-Token", valid_596544
  var valid_596545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596545 = validateParameter(valid_596545, JString, required = false,
                                 default = nil)
  if valid_596545 != nil:
    section.add "X-Amz-Content-Sha256", valid_596545
  var valid_596546 = header.getOrDefault("X-Amz-Algorithm")
  valid_596546 = validateParameter(valid_596546, JString, required = false,
                                 default = nil)
  if valid_596546 != nil:
    section.add "X-Amz-Algorithm", valid_596546
  var valid_596547 = header.getOrDefault("X-Amz-Signature")
  valid_596547 = validateParameter(valid_596547, JString, required = false,
                                 default = nil)
  if valid_596547 != nil:
    section.add "X-Amz-Signature", valid_596547
  var valid_596548 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596548 = validateParameter(valid_596548, JString, required = false,
                                 default = nil)
  if valid_596548 != nil:
    section.add "X-Amz-SignedHeaders", valid_596548
  var valid_596549 = header.getOrDefault("X-Amz-Credential")
  valid_596549 = validateParameter(valid_596549, JString, required = false,
                                 default = nil)
  if valid_596549 != nil:
    section.add "X-Amz-Credential", valid_596549
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596550: Call_GetDescribeEventSubscriptions_596534; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_596550.validator(path, query, header, formData, body)
  let scheme = call_596550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596550.url(scheme.get, call_596550.host, call_596550.base,
                         call_596550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596550, url, valid)

proc call*(call_596551: Call_GetDescribeEventSubscriptions_596534;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeEventSubscriptions"; Marker: string = "";
          SubscriptionName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Version: string (required)
  var query_596552 = newJObject()
  add(query_596552, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596552.add "Filters", Filters
  add(query_596552, "Action", newJString(Action))
  add(query_596552, "Marker", newJString(Marker))
  add(query_596552, "SubscriptionName", newJString(SubscriptionName))
  add(query_596552, "Version", newJString(Version))
  result = call_596551.call(nil, query_596552, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_596534(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_596535, base: "/",
    url: url_GetDescribeEventSubscriptions_596536,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_596597 = ref object of OpenApiRestCall_593421
proc url_PostDescribeEvents_596599(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEvents_596598(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596600 = query.getOrDefault("Action")
  valid_596600 = validateParameter(valid_596600, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_596600 != nil:
    section.add "Action", valid_596600
  var valid_596601 = query.getOrDefault("Version")
  valid_596601 = validateParameter(valid_596601, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596601 != nil:
    section.add "Version", valid_596601
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596602 = header.getOrDefault("X-Amz-Date")
  valid_596602 = validateParameter(valid_596602, JString, required = false,
                                 default = nil)
  if valid_596602 != nil:
    section.add "X-Amz-Date", valid_596602
  var valid_596603 = header.getOrDefault("X-Amz-Security-Token")
  valid_596603 = validateParameter(valid_596603, JString, required = false,
                                 default = nil)
  if valid_596603 != nil:
    section.add "X-Amz-Security-Token", valid_596603
  var valid_596604 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596604 = validateParameter(valid_596604, JString, required = false,
                                 default = nil)
  if valid_596604 != nil:
    section.add "X-Amz-Content-Sha256", valid_596604
  var valid_596605 = header.getOrDefault("X-Amz-Algorithm")
  valid_596605 = validateParameter(valid_596605, JString, required = false,
                                 default = nil)
  if valid_596605 != nil:
    section.add "X-Amz-Algorithm", valid_596605
  var valid_596606 = header.getOrDefault("X-Amz-Signature")
  valid_596606 = validateParameter(valid_596606, JString, required = false,
                                 default = nil)
  if valid_596606 != nil:
    section.add "X-Amz-Signature", valid_596606
  var valid_596607 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596607 = validateParameter(valid_596607, JString, required = false,
                                 default = nil)
  if valid_596607 != nil:
    section.add "X-Amz-SignedHeaders", valid_596607
  var valid_596608 = header.getOrDefault("X-Amz-Credential")
  valid_596608 = validateParameter(valid_596608, JString, required = false,
                                 default = nil)
  if valid_596608 != nil:
    section.add "X-Amz-Credential", valid_596608
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  section = newJObject()
  var valid_596609 = formData.getOrDefault("SourceIdentifier")
  valid_596609 = validateParameter(valid_596609, JString, required = false,
                                 default = nil)
  if valid_596609 != nil:
    section.add "SourceIdentifier", valid_596609
  var valid_596610 = formData.getOrDefault("EventCategories")
  valid_596610 = validateParameter(valid_596610, JArray, required = false,
                                 default = nil)
  if valid_596610 != nil:
    section.add "EventCategories", valid_596610
  var valid_596611 = formData.getOrDefault("Marker")
  valid_596611 = validateParameter(valid_596611, JString, required = false,
                                 default = nil)
  if valid_596611 != nil:
    section.add "Marker", valid_596611
  var valid_596612 = formData.getOrDefault("StartTime")
  valid_596612 = validateParameter(valid_596612, JString, required = false,
                                 default = nil)
  if valid_596612 != nil:
    section.add "StartTime", valid_596612
  var valid_596613 = formData.getOrDefault("Duration")
  valid_596613 = validateParameter(valid_596613, JInt, required = false, default = nil)
  if valid_596613 != nil:
    section.add "Duration", valid_596613
  var valid_596614 = formData.getOrDefault("Filters")
  valid_596614 = validateParameter(valid_596614, JArray, required = false,
                                 default = nil)
  if valid_596614 != nil:
    section.add "Filters", valid_596614
  var valid_596615 = formData.getOrDefault("EndTime")
  valid_596615 = validateParameter(valid_596615, JString, required = false,
                                 default = nil)
  if valid_596615 != nil:
    section.add "EndTime", valid_596615
  var valid_596616 = formData.getOrDefault("MaxRecords")
  valid_596616 = validateParameter(valid_596616, JInt, required = false, default = nil)
  if valid_596616 != nil:
    section.add "MaxRecords", valid_596616
  var valid_596617 = formData.getOrDefault("SourceType")
  valid_596617 = validateParameter(valid_596617, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_596617 != nil:
    section.add "SourceType", valid_596617
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596618: Call_PostDescribeEvents_596597; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_596618.validator(path, query, header, formData, body)
  let scheme = call_596618.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596618.url(scheme.get, call_596618.host, call_596618.base,
                         call_596618.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596618, url, valid)

proc call*(call_596619: Call_PostDescribeEvents_596597;
          SourceIdentifier: string = ""; EventCategories: JsonNode = nil;
          Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeEvents"; Duration: int = 0; Filters: JsonNode = nil;
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2014-10-31";
          SourceType: string = "db-instance"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Action: string (required)
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  var query_596620 = newJObject()
  var formData_596621 = newJObject()
  add(formData_596621, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    formData_596621.add "EventCategories", EventCategories
  add(formData_596621, "Marker", newJString(Marker))
  add(formData_596621, "StartTime", newJString(StartTime))
  add(query_596620, "Action", newJString(Action))
  add(formData_596621, "Duration", newJInt(Duration))
  if Filters != nil:
    formData_596621.add "Filters", Filters
  add(formData_596621, "EndTime", newJString(EndTime))
  add(formData_596621, "MaxRecords", newJInt(MaxRecords))
  add(query_596620, "Version", newJString(Version))
  add(formData_596621, "SourceType", newJString(SourceType))
  result = call_596619.call(nil, query_596620, nil, formData_596621, nil)

var postDescribeEvents* = Call_PostDescribeEvents_596597(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_596598, base: "/",
    url: url_PostDescribeEvents_596599, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_596573 = ref object of OpenApiRestCall_593421
proc url_GetDescribeEvents_596575(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEvents_596574(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596576 = query.getOrDefault("SourceType")
  valid_596576 = validateParameter(valid_596576, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_596576 != nil:
    section.add "SourceType", valid_596576
  var valid_596577 = query.getOrDefault("MaxRecords")
  valid_596577 = validateParameter(valid_596577, JInt, required = false, default = nil)
  if valid_596577 != nil:
    section.add "MaxRecords", valid_596577
  var valid_596578 = query.getOrDefault("StartTime")
  valid_596578 = validateParameter(valid_596578, JString, required = false,
                                 default = nil)
  if valid_596578 != nil:
    section.add "StartTime", valid_596578
  var valid_596579 = query.getOrDefault("Filters")
  valid_596579 = validateParameter(valid_596579, JArray, required = false,
                                 default = nil)
  if valid_596579 != nil:
    section.add "Filters", valid_596579
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596580 = query.getOrDefault("Action")
  valid_596580 = validateParameter(valid_596580, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_596580 != nil:
    section.add "Action", valid_596580
  var valid_596581 = query.getOrDefault("SourceIdentifier")
  valid_596581 = validateParameter(valid_596581, JString, required = false,
                                 default = nil)
  if valid_596581 != nil:
    section.add "SourceIdentifier", valid_596581
  var valid_596582 = query.getOrDefault("Marker")
  valid_596582 = validateParameter(valid_596582, JString, required = false,
                                 default = nil)
  if valid_596582 != nil:
    section.add "Marker", valid_596582
  var valid_596583 = query.getOrDefault("EventCategories")
  valid_596583 = validateParameter(valid_596583, JArray, required = false,
                                 default = nil)
  if valid_596583 != nil:
    section.add "EventCategories", valid_596583
  var valid_596584 = query.getOrDefault("Duration")
  valid_596584 = validateParameter(valid_596584, JInt, required = false, default = nil)
  if valid_596584 != nil:
    section.add "Duration", valid_596584
  var valid_596585 = query.getOrDefault("EndTime")
  valid_596585 = validateParameter(valid_596585, JString, required = false,
                                 default = nil)
  if valid_596585 != nil:
    section.add "EndTime", valid_596585
  var valid_596586 = query.getOrDefault("Version")
  valid_596586 = validateParameter(valid_596586, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596586 != nil:
    section.add "Version", valid_596586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596587 = header.getOrDefault("X-Amz-Date")
  valid_596587 = validateParameter(valid_596587, JString, required = false,
                                 default = nil)
  if valid_596587 != nil:
    section.add "X-Amz-Date", valid_596587
  var valid_596588 = header.getOrDefault("X-Amz-Security-Token")
  valid_596588 = validateParameter(valid_596588, JString, required = false,
                                 default = nil)
  if valid_596588 != nil:
    section.add "X-Amz-Security-Token", valid_596588
  var valid_596589 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596589 = validateParameter(valid_596589, JString, required = false,
                                 default = nil)
  if valid_596589 != nil:
    section.add "X-Amz-Content-Sha256", valid_596589
  var valid_596590 = header.getOrDefault("X-Amz-Algorithm")
  valid_596590 = validateParameter(valid_596590, JString, required = false,
                                 default = nil)
  if valid_596590 != nil:
    section.add "X-Amz-Algorithm", valid_596590
  var valid_596591 = header.getOrDefault("X-Amz-Signature")
  valid_596591 = validateParameter(valid_596591, JString, required = false,
                                 default = nil)
  if valid_596591 != nil:
    section.add "X-Amz-Signature", valid_596591
  var valid_596592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596592 = validateParameter(valid_596592, JString, required = false,
                                 default = nil)
  if valid_596592 != nil:
    section.add "X-Amz-SignedHeaders", valid_596592
  var valid_596593 = header.getOrDefault("X-Amz-Credential")
  valid_596593 = validateParameter(valid_596593, JString, required = false,
                                 default = nil)
  if valid_596593 != nil:
    section.add "X-Amz-Credential", valid_596593
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596594: Call_GetDescribeEvents_596573; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_596594.validator(path, query, header, formData, body)
  let scheme = call_596594.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596594.url(scheme.get, call_596594.host, call_596594.base,
                         call_596594.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596594, url, valid)

proc call*(call_596595: Call_GetDescribeEvents_596573;
          SourceType: string = "db-instance"; MaxRecords: int = 0;
          StartTime: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEvents"; SourceIdentifier: string = "";
          Marker: string = ""; EventCategories: JsonNode = nil; Duration: int = 0;
          EndTime: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  var query_596596 = newJObject()
  add(query_596596, "SourceType", newJString(SourceType))
  add(query_596596, "MaxRecords", newJInt(MaxRecords))
  add(query_596596, "StartTime", newJString(StartTime))
  if Filters != nil:
    query_596596.add "Filters", Filters
  add(query_596596, "Action", newJString(Action))
  add(query_596596, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_596596, "Marker", newJString(Marker))
  if EventCategories != nil:
    query_596596.add "EventCategories", EventCategories
  add(query_596596, "Duration", newJInt(Duration))
  add(query_596596, "EndTime", newJString(EndTime))
  add(query_596596, "Version", newJString(Version))
  result = call_596595.call(nil, query_596596, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_596573(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_596574,
    base: "/", url: url_GetDescribeEvents_596575,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeGlobalClusters_596641 = ref object of OpenApiRestCall_593421
proc url_PostDescribeGlobalClusters_596643(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeGlobalClusters_596642(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596644 = query.getOrDefault("Action")
  valid_596644 = validateParameter(valid_596644, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_596644 != nil:
    section.add "Action", valid_596644
  var valid_596645 = query.getOrDefault("Version")
  valid_596645 = validateParameter(valid_596645, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596645 != nil:
    section.add "Version", valid_596645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596646 = header.getOrDefault("X-Amz-Date")
  valid_596646 = validateParameter(valid_596646, JString, required = false,
                                 default = nil)
  if valid_596646 != nil:
    section.add "X-Amz-Date", valid_596646
  var valid_596647 = header.getOrDefault("X-Amz-Security-Token")
  valid_596647 = validateParameter(valid_596647, JString, required = false,
                                 default = nil)
  if valid_596647 != nil:
    section.add "X-Amz-Security-Token", valid_596647
  var valid_596648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596648 = validateParameter(valid_596648, JString, required = false,
                                 default = nil)
  if valid_596648 != nil:
    section.add "X-Amz-Content-Sha256", valid_596648
  var valid_596649 = header.getOrDefault("X-Amz-Algorithm")
  valid_596649 = validateParameter(valid_596649, JString, required = false,
                                 default = nil)
  if valid_596649 != nil:
    section.add "X-Amz-Algorithm", valid_596649
  var valid_596650 = header.getOrDefault("X-Amz-Signature")
  valid_596650 = validateParameter(valid_596650, JString, required = false,
                                 default = nil)
  if valid_596650 != nil:
    section.add "X-Amz-Signature", valid_596650
  var valid_596651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596651 = validateParameter(valid_596651, JString, required = false,
                                 default = nil)
  if valid_596651 != nil:
    section.add "X-Amz-SignedHeaders", valid_596651
  var valid_596652 = header.getOrDefault("X-Amz-Credential")
  valid_596652 = validateParameter(valid_596652, JString, required = false,
                                 default = nil)
  if valid_596652 != nil:
    section.add "X-Amz-Credential", valid_596652
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596653 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_596653 = validateParameter(valid_596653, JString, required = false,
                                 default = nil)
  if valid_596653 != nil:
    section.add "GlobalClusterIdentifier", valid_596653
  var valid_596654 = formData.getOrDefault("Marker")
  valid_596654 = validateParameter(valid_596654, JString, required = false,
                                 default = nil)
  if valid_596654 != nil:
    section.add "Marker", valid_596654
  var valid_596655 = formData.getOrDefault("Filters")
  valid_596655 = validateParameter(valid_596655, JArray, required = false,
                                 default = nil)
  if valid_596655 != nil:
    section.add "Filters", valid_596655
  var valid_596656 = formData.getOrDefault("MaxRecords")
  valid_596656 = validateParameter(valid_596656, JInt, required = false, default = nil)
  if valid_596656 != nil:
    section.add "MaxRecords", valid_596656
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596657: Call_PostDescribeGlobalClusters_596641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596657.validator(path, query, header, formData, body)
  let scheme = call_596657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596657.url(scheme.get, call_596657.host, call_596657.base,
                         call_596657.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596657, url, valid)

proc call*(call_596658: Call_PostDescribeGlobalClusters_596641;
          GlobalClusterIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeGlobalClusters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596659 = newJObject()
  var formData_596660 = newJObject()
  add(formData_596660, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_596660, "Marker", newJString(Marker))
  add(query_596659, "Action", newJString(Action))
  if Filters != nil:
    formData_596660.add "Filters", Filters
  add(formData_596660, "MaxRecords", newJInt(MaxRecords))
  add(query_596659, "Version", newJString(Version))
  result = call_596658.call(nil, query_596659, nil, formData_596660, nil)

var postDescribeGlobalClusters* = Call_PostDescribeGlobalClusters_596641(
    name: "postDescribeGlobalClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_PostDescribeGlobalClusters_596642, base: "/",
    url: url_PostDescribeGlobalClusters_596643,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeGlobalClusters_596622 = ref object of OpenApiRestCall_593421
proc url_GetDescribeGlobalClusters_596624(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeGlobalClusters_596623(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596625 = query.getOrDefault("MaxRecords")
  valid_596625 = validateParameter(valid_596625, JInt, required = false, default = nil)
  if valid_596625 != nil:
    section.add "MaxRecords", valid_596625
  var valid_596626 = query.getOrDefault("Filters")
  valid_596626 = validateParameter(valid_596626, JArray, required = false,
                                 default = nil)
  if valid_596626 != nil:
    section.add "Filters", valid_596626
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596627 = query.getOrDefault("Action")
  valid_596627 = validateParameter(valid_596627, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_596627 != nil:
    section.add "Action", valid_596627
  var valid_596628 = query.getOrDefault("Marker")
  valid_596628 = validateParameter(valid_596628, JString, required = false,
                                 default = nil)
  if valid_596628 != nil:
    section.add "Marker", valid_596628
  var valid_596629 = query.getOrDefault("GlobalClusterIdentifier")
  valid_596629 = validateParameter(valid_596629, JString, required = false,
                                 default = nil)
  if valid_596629 != nil:
    section.add "GlobalClusterIdentifier", valid_596629
  var valid_596630 = query.getOrDefault("Version")
  valid_596630 = validateParameter(valid_596630, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596630 != nil:
    section.add "Version", valid_596630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596631 = header.getOrDefault("X-Amz-Date")
  valid_596631 = validateParameter(valid_596631, JString, required = false,
                                 default = nil)
  if valid_596631 != nil:
    section.add "X-Amz-Date", valid_596631
  var valid_596632 = header.getOrDefault("X-Amz-Security-Token")
  valid_596632 = validateParameter(valid_596632, JString, required = false,
                                 default = nil)
  if valid_596632 != nil:
    section.add "X-Amz-Security-Token", valid_596632
  var valid_596633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596633 = validateParameter(valid_596633, JString, required = false,
                                 default = nil)
  if valid_596633 != nil:
    section.add "X-Amz-Content-Sha256", valid_596633
  var valid_596634 = header.getOrDefault("X-Amz-Algorithm")
  valid_596634 = validateParameter(valid_596634, JString, required = false,
                                 default = nil)
  if valid_596634 != nil:
    section.add "X-Amz-Algorithm", valid_596634
  var valid_596635 = header.getOrDefault("X-Amz-Signature")
  valid_596635 = validateParameter(valid_596635, JString, required = false,
                                 default = nil)
  if valid_596635 != nil:
    section.add "X-Amz-Signature", valid_596635
  var valid_596636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596636 = validateParameter(valid_596636, JString, required = false,
                                 default = nil)
  if valid_596636 != nil:
    section.add "X-Amz-SignedHeaders", valid_596636
  var valid_596637 = header.getOrDefault("X-Amz-Credential")
  valid_596637 = validateParameter(valid_596637, JString, required = false,
                                 default = nil)
  if valid_596637 != nil:
    section.add "X-Amz-Credential", valid_596637
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596638: Call_GetDescribeGlobalClusters_596622; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596638.validator(path, query, header, formData, body)
  let scheme = call_596638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596638.url(scheme.get, call_596638.host, call_596638.base,
                         call_596638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596638, url, valid)

proc call*(call_596639: Call_GetDescribeGlobalClusters_596622; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeGlobalClusters";
          Marker: string = ""; GlobalClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  var query_596640 = newJObject()
  add(query_596640, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596640.add "Filters", Filters
  add(query_596640, "Action", newJString(Action))
  add(query_596640, "Marker", newJString(Marker))
  add(query_596640, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_596640, "Version", newJString(Version))
  result = call_596639.call(nil, query_596640, nil, nil, nil)

var getDescribeGlobalClusters* = Call_GetDescribeGlobalClusters_596622(
    name: "getDescribeGlobalClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_GetDescribeGlobalClusters_596623, base: "/",
    url: url_GetDescribeGlobalClusters_596624,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroupOptions_596681 = ref object of OpenApiRestCall_593421
proc url_PostDescribeOptionGroupOptions_596683(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeOptionGroupOptions_596682(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596684 = query.getOrDefault("Action")
  valid_596684 = validateParameter(valid_596684, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_596684 != nil:
    section.add "Action", valid_596684
  var valid_596685 = query.getOrDefault("Version")
  valid_596685 = validateParameter(valid_596685, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596685 != nil:
    section.add "Version", valid_596685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596686 = header.getOrDefault("X-Amz-Date")
  valid_596686 = validateParameter(valid_596686, JString, required = false,
                                 default = nil)
  if valid_596686 != nil:
    section.add "X-Amz-Date", valid_596686
  var valid_596687 = header.getOrDefault("X-Amz-Security-Token")
  valid_596687 = validateParameter(valid_596687, JString, required = false,
                                 default = nil)
  if valid_596687 != nil:
    section.add "X-Amz-Security-Token", valid_596687
  var valid_596688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596688 = validateParameter(valid_596688, JString, required = false,
                                 default = nil)
  if valid_596688 != nil:
    section.add "X-Amz-Content-Sha256", valid_596688
  var valid_596689 = header.getOrDefault("X-Amz-Algorithm")
  valid_596689 = validateParameter(valid_596689, JString, required = false,
                                 default = nil)
  if valid_596689 != nil:
    section.add "X-Amz-Algorithm", valid_596689
  var valid_596690 = header.getOrDefault("X-Amz-Signature")
  valid_596690 = validateParameter(valid_596690, JString, required = false,
                                 default = nil)
  if valid_596690 != nil:
    section.add "X-Amz-Signature", valid_596690
  var valid_596691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596691 = validateParameter(valid_596691, JString, required = false,
                                 default = nil)
  if valid_596691 != nil:
    section.add "X-Amz-SignedHeaders", valid_596691
  var valid_596692 = header.getOrDefault("X-Amz-Credential")
  valid_596692 = validateParameter(valid_596692, JString, required = false,
                                 default = nil)
  if valid_596692 != nil:
    section.add "X-Amz-Credential", valid_596692
  result.add "header", section
  ## parameters in `formData` object:
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596693 = formData.getOrDefault("MajorEngineVersion")
  valid_596693 = validateParameter(valid_596693, JString, required = false,
                                 default = nil)
  if valid_596693 != nil:
    section.add "MajorEngineVersion", valid_596693
  var valid_596694 = formData.getOrDefault("Marker")
  valid_596694 = validateParameter(valid_596694, JString, required = false,
                                 default = nil)
  if valid_596694 != nil:
    section.add "Marker", valid_596694
  assert formData != nil,
        "formData argument is necessary due to required `EngineName` field"
  var valid_596695 = formData.getOrDefault("EngineName")
  valid_596695 = validateParameter(valid_596695, JString, required = true,
                                 default = nil)
  if valid_596695 != nil:
    section.add "EngineName", valid_596695
  var valid_596696 = formData.getOrDefault("Filters")
  valid_596696 = validateParameter(valid_596696, JArray, required = false,
                                 default = nil)
  if valid_596696 != nil:
    section.add "Filters", valid_596696
  var valid_596697 = formData.getOrDefault("MaxRecords")
  valid_596697 = validateParameter(valid_596697, JInt, required = false, default = nil)
  if valid_596697 != nil:
    section.add "MaxRecords", valid_596697
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596698: Call_PostDescribeOptionGroupOptions_596681; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_596698.validator(path, query, header, formData, body)
  let scheme = call_596698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596698.url(scheme.get, call_596698.host, call_596698.base,
                         call_596698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596698, url, valid)

proc call*(call_596699: Call_PostDescribeOptionGroupOptions_596681;
          EngineName: string; MajorEngineVersion: string = ""; Marker: string = "";
          Action: string = "DescribeOptionGroupOptions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596700 = newJObject()
  var formData_596701 = newJObject()
  add(formData_596701, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(formData_596701, "Marker", newJString(Marker))
  add(query_596700, "Action", newJString(Action))
  add(formData_596701, "EngineName", newJString(EngineName))
  if Filters != nil:
    formData_596701.add "Filters", Filters
  add(formData_596701, "MaxRecords", newJInt(MaxRecords))
  add(query_596700, "Version", newJString(Version))
  result = call_596699.call(nil, query_596700, nil, formData_596701, nil)

var postDescribeOptionGroupOptions* = Call_PostDescribeOptionGroupOptions_596681(
    name: "postDescribeOptionGroupOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_PostDescribeOptionGroupOptions_596682, base: "/",
    url: url_PostDescribeOptionGroupOptions_596683,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroupOptions_596661 = ref object of OpenApiRestCall_593421
proc url_GetDescribeOptionGroupOptions_596663(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeOptionGroupOptions_596662(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  section = newJObject()
  var valid_596664 = query.getOrDefault("MaxRecords")
  valid_596664 = validateParameter(valid_596664, JInt, required = false, default = nil)
  if valid_596664 != nil:
    section.add "MaxRecords", valid_596664
  var valid_596665 = query.getOrDefault("Filters")
  valid_596665 = validateParameter(valid_596665, JArray, required = false,
                                 default = nil)
  if valid_596665 != nil:
    section.add "Filters", valid_596665
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596666 = query.getOrDefault("Action")
  valid_596666 = validateParameter(valid_596666, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_596666 != nil:
    section.add "Action", valid_596666
  var valid_596667 = query.getOrDefault("Marker")
  valid_596667 = validateParameter(valid_596667, JString, required = false,
                                 default = nil)
  if valid_596667 != nil:
    section.add "Marker", valid_596667
  var valid_596668 = query.getOrDefault("Version")
  valid_596668 = validateParameter(valid_596668, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596668 != nil:
    section.add "Version", valid_596668
  var valid_596669 = query.getOrDefault("EngineName")
  valid_596669 = validateParameter(valid_596669, JString, required = true,
                                 default = nil)
  if valid_596669 != nil:
    section.add "EngineName", valid_596669
  var valid_596670 = query.getOrDefault("MajorEngineVersion")
  valid_596670 = validateParameter(valid_596670, JString, required = false,
                                 default = nil)
  if valid_596670 != nil:
    section.add "MajorEngineVersion", valid_596670
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596671 = header.getOrDefault("X-Amz-Date")
  valid_596671 = validateParameter(valid_596671, JString, required = false,
                                 default = nil)
  if valid_596671 != nil:
    section.add "X-Amz-Date", valid_596671
  var valid_596672 = header.getOrDefault("X-Amz-Security-Token")
  valid_596672 = validateParameter(valid_596672, JString, required = false,
                                 default = nil)
  if valid_596672 != nil:
    section.add "X-Amz-Security-Token", valid_596672
  var valid_596673 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596673 = validateParameter(valid_596673, JString, required = false,
                                 default = nil)
  if valid_596673 != nil:
    section.add "X-Amz-Content-Sha256", valid_596673
  var valid_596674 = header.getOrDefault("X-Amz-Algorithm")
  valid_596674 = validateParameter(valid_596674, JString, required = false,
                                 default = nil)
  if valid_596674 != nil:
    section.add "X-Amz-Algorithm", valid_596674
  var valid_596675 = header.getOrDefault("X-Amz-Signature")
  valid_596675 = validateParameter(valid_596675, JString, required = false,
                                 default = nil)
  if valid_596675 != nil:
    section.add "X-Amz-Signature", valid_596675
  var valid_596676 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596676 = validateParameter(valid_596676, JString, required = false,
                                 default = nil)
  if valid_596676 != nil:
    section.add "X-Amz-SignedHeaders", valid_596676
  var valid_596677 = header.getOrDefault("X-Amz-Credential")
  valid_596677 = validateParameter(valid_596677, JString, required = false,
                                 default = nil)
  if valid_596677 != nil:
    section.add "X-Amz-Credential", valid_596677
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596678: Call_GetDescribeOptionGroupOptions_596661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_596678.validator(path, query, header, formData, body)
  let scheme = call_596678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596678.url(scheme.get, call_596678.host, call_596678.base,
                         call_596678.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596678, url, valid)

proc call*(call_596679: Call_GetDescribeOptionGroupOptions_596661;
          EngineName: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeOptionGroupOptions"; Marker: string = "";
          Version: string = "2014-10-31"; MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  var query_596680 = newJObject()
  add(query_596680, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596680.add "Filters", Filters
  add(query_596680, "Action", newJString(Action))
  add(query_596680, "Marker", newJString(Marker))
  add(query_596680, "Version", newJString(Version))
  add(query_596680, "EngineName", newJString(EngineName))
  add(query_596680, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_596679.call(nil, query_596680, nil, nil, nil)

var getDescribeOptionGroupOptions* = Call_GetDescribeOptionGroupOptions_596661(
    name: "getDescribeOptionGroupOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_GetDescribeOptionGroupOptions_596662, base: "/",
    url: url_GetDescribeOptionGroupOptions_596663,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroups_596723 = ref object of OpenApiRestCall_593421
proc url_PostDescribeOptionGroups_596725(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeOptionGroups_596724(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596726 = query.getOrDefault("Action")
  valid_596726 = validateParameter(valid_596726, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_596726 != nil:
    section.add "Action", valid_596726
  var valid_596727 = query.getOrDefault("Version")
  valid_596727 = validateParameter(valid_596727, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596727 != nil:
    section.add "Version", valid_596727
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596728 = header.getOrDefault("X-Amz-Date")
  valid_596728 = validateParameter(valid_596728, JString, required = false,
                                 default = nil)
  if valid_596728 != nil:
    section.add "X-Amz-Date", valid_596728
  var valid_596729 = header.getOrDefault("X-Amz-Security-Token")
  valid_596729 = validateParameter(valid_596729, JString, required = false,
                                 default = nil)
  if valid_596729 != nil:
    section.add "X-Amz-Security-Token", valid_596729
  var valid_596730 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596730 = validateParameter(valid_596730, JString, required = false,
                                 default = nil)
  if valid_596730 != nil:
    section.add "X-Amz-Content-Sha256", valid_596730
  var valid_596731 = header.getOrDefault("X-Amz-Algorithm")
  valid_596731 = validateParameter(valid_596731, JString, required = false,
                                 default = nil)
  if valid_596731 != nil:
    section.add "X-Amz-Algorithm", valid_596731
  var valid_596732 = header.getOrDefault("X-Amz-Signature")
  valid_596732 = validateParameter(valid_596732, JString, required = false,
                                 default = nil)
  if valid_596732 != nil:
    section.add "X-Amz-Signature", valid_596732
  var valid_596733 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596733 = validateParameter(valid_596733, JString, required = false,
                                 default = nil)
  if valid_596733 != nil:
    section.add "X-Amz-SignedHeaders", valid_596733
  var valid_596734 = header.getOrDefault("X-Amz-Credential")
  valid_596734 = validateParameter(valid_596734, JString, required = false,
                                 default = nil)
  if valid_596734 != nil:
    section.add "X-Amz-Credential", valid_596734
  result.add "header", section
  ## parameters in `formData` object:
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596735 = formData.getOrDefault("MajorEngineVersion")
  valid_596735 = validateParameter(valid_596735, JString, required = false,
                                 default = nil)
  if valid_596735 != nil:
    section.add "MajorEngineVersion", valid_596735
  var valid_596736 = formData.getOrDefault("OptionGroupName")
  valid_596736 = validateParameter(valid_596736, JString, required = false,
                                 default = nil)
  if valid_596736 != nil:
    section.add "OptionGroupName", valid_596736
  var valid_596737 = formData.getOrDefault("Marker")
  valid_596737 = validateParameter(valid_596737, JString, required = false,
                                 default = nil)
  if valid_596737 != nil:
    section.add "Marker", valid_596737
  var valid_596738 = formData.getOrDefault("EngineName")
  valid_596738 = validateParameter(valid_596738, JString, required = false,
                                 default = nil)
  if valid_596738 != nil:
    section.add "EngineName", valid_596738
  var valid_596739 = formData.getOrDefault("Filters")
  valid_596739 = validateParameter(valid_596739, JArray, required = false,
                                 default = nil)
  if valid_596739 != nil:
    section.add "Filters", valid_596739
  var valid_596740 = formData.getOrDefault("MaxRecords")
  valid_596740 = validateParameter(valid_596740, JInt, required = false, default = nil)
  if valid_596740 != nil:
    section.add "MaxRecords", valid_596740
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596741: Call_PostDescribeOptionGroups_596723; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_596741.validator(path, query, header, formData, body)
  let scheme = call_596741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596741.url(scheme.get, call_596741.host, call_596741.base,
                         call_596741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596741, url, valid)

proc call*(call_596742: Call_PostDescribeOptionGroups_596723;
          MajorEngineVersion: string = ""; OptionGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeOptionGroups";
          EngineName: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroups
  ## Describes the available option groups.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596743 = newJObject()
  var formData_596744 = newJObject()
  add(formData_596744, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(formData_596744, "OptionGroupName", newJString(OptionGroupName))
  add(formData_596744, "Marker", newJString(Marker))
  add(query_596743, "Action", newJString(Action))
  add(formData_596744, "EngineName", newJString(EngineName))
  if Filters != nil:
    formData_596744.add "Filters", Filters
  add(formData_596744, "MaxRecords", newJInt(MaxRecords))
  add(query_596743, "Version", newJString(Version))
  result = call_596742.call(nil, query_596743, nil, formData_596744, nil)

var postDescribeOptionGroups* = Call_PostDescribeOptionGroups_596723(
    name: "postDescribeOptionGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_PostDescribeOptionGroups_596724, base: "/",
    url: url_PostDescribeOptionGroups_596725, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroups_596702 = ref object of OpenApiRestCall_593421
proc url_GetDescribeOptionGroups_596704(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeOptionGroups_596703(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  section = newJObject()
  var valid_596705 = query.getOrDefault("MaxRecords")
  valid_596705 = validateParameter(valid_596705, JInt, required = false, default = nil)
  if valid_596705 != nil:
    section.add "MaxRecords", valid_596705
  var valid_596706 = query.getOrDefault("OptionGroupName")
  valid_596706 = validateParameter(valid_596706, JString, required = false,
                                 default = nil)
  if valid_596706 != nil:
    section.add "OptionGroupName", valid_596706
  var valid_596707 = query.getOrDefault("Filters")
  valid_596707 = validateParameter(valid_596707, JArray, required = false,
                                 default = nil)
  if valid_596707 != nil:
    section.add "Filters", valid_596707
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596708 = query.getOrDefault("Action")
  valid_596708 = validateParameter(valid_596708, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_596708 != nil:
    section.add "Action", valid_596708
  var valid_596709 = query.getOrDefault("Marker")
  valid_596709 = validateParameter(valid_596709, JString, required = false,
                                 default = nil)
  if valid_596709 != nil:
    section.add "Marker", valid_596709
  var valid_596710 = query.getOrDefault("Version")
  valid_596710 = validateParameter(valid_596710, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596710 != nil:
    section.add "Version", valid_596710
  var valid_596711 = query.getOrDefault("EngineName")
  valid_596711 = validateParameter(valid_596711, JString, required = false,
                                 default = nil)
  if valid_596711 != nil:
    section.add "EngineName", valid_596711
  var valid_596712 = query.getOrDefault("MajorEngineVersion")
  valid_596712 = validateParameter(valid_596712, JString, required = false,
                                 default = nil)
  if valid_596712 != nil:
    section.add "MajorEngineVersion", valid_596712
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596713 = header.getOrDefault("X-Amz-Date")
  valid_596713 = validateParameter(valid_596713, JString, required = false,
                                 default = nil)
  if valid_596713 != nil:
    section.add "X-Amz-Date", valid_596713
  var valid_596714 = header.getOrDefault("X-Amz-Security-Token")
  valid_596714 = validateParameter(valid_596714, JString, required = false,
                                 default = nil)
  if valid_596714 != nil:
    section.add "X-Amz-Security-Token", valid_596714
  var valid_596715 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596715 = validateParameter(valid_596715, JString, required = false,
                                 default = nil)
  if valid_596715 != nil:
    section.add "X-Amz-Content-Sha256", valid_596715
  var valid_596716 = header.getOrDefault("X-Amz-Algorithm")
  valid_596716 = validateParameter(valid_596716, JString, required = false,
                                 default = nil)
  if valid_596716 != nil:
    section.add "X-Amz-Algorithm", valid_596716
  var valid_596717 = header.getOrDefault("X-Amz-Signature")
  valid_596717 = validateParameter(valid_596717, JString, required = false,
                                 default = nil)
  if valid_596717 != nil:
    section.add "X-Amz-Signature", valid_596717
  var valid_596718 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596718 = validateParameter(valid_596718, JString, required = false,
                                 default = nil)
  if valid_596718 != nil:
    section.add "X-Amz-SignedHeaders", valid_596718
  var valid_596719 = header.getOrDefault("X-Amz-Credential")
  valid_596719 = validateParameter(valid_596719, JString, required = false,
                                 default = nil)
  if valid_596719 != nil:
    section.add "X-Amz-Credential", valid_596719
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596720: Call_GetDescribeOptionGroups_596702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_596720.validator(path, query, header, formData, body)
  let scheme = call_596720.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596720.url(scheme.get, call_596720.host, call_596720.base,
                         call_596720.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596720, url, valid)

proc call*(call_596721: Call_GetDescribeOptionGroups_596702; MaxRecords: int = 0;
          OptionGroupName: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeOptionGroups"; Marker: string = "";
          Version: string = "2014-10-31"; EngineName: string = "";
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroups
  ## Describes the available option groups.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  var query_596722 = newJObject()
  add(query_596722, "MaxRecords", newJInt(MaxRecords))
  add(query_596722, "OptionGroupName", newJString(OptionGroupName))
  if Filters != nil:
    query_596722.add "Filters", Filters
  add(query_596722, "Action", newJString(Action))
  add(query_596722, "Marker", newJString(Marker))
  add(query_596722, "Version", newJString(Version))
  add(query_596722, "EngineName", newJString(EngineName))
  add(query_596722, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_596721.call(nil, query_596722, nil, nil, nil)

var getDescribeOptionGroups* = Call_GetDescribeOptionGroups_596702(
    name: "getDescribeOptionGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_GetDescribeOptionGroups_596703, base: "/",
    url: url_GetDescribeOptionGroups_596704, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_596768 = ref object of OpenApiRestCall_593421
proc url_PostDescribeOrderableDBInstanceOptions_596770(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_596769(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596771 = query.getOrDefault("Action")
  valid_596771 = validateParameter(valid_596771, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_596771 != nil:
    section.add "Action", valid_596771
  var valid_596772 = query.getOrDefault("Version")
  valid_596772 = validateParameter(valid_596772, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596772 != nil:
    section.add "Version", valid_596772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596773 = header.getOrDefault("X-Amz-Date")
  valid_596773 = validateParameter(valid_596773, JString, required = false,
                                 default = nil)
  if valid_596773 != nil:
    section.add "X-Amz-Date", valid_596773
  var valid_596774 = header.getOrDefault("X-Amz-Security-Token")
  valid_596774 = validateParameter(valid_596774, JString, required = false,
                                 default = nil)
  if valid_596774 != nil:
    section.add "X-Amz-Security-Token", valid_596774
  var valid_596775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596775 = validateParameter(valid_596775, JString, required = false,
                                 default = nil)
  if valid_596775 != nil:
    section.add "X-Amz-Content-Sha256", valid_596775
  var valid_596776 = header.getOrDefault("X-Amz-Algorithm")
  valid_596776 = validateParameter(valid_596776, JString, required = false,
                                 default = nil)
  if valid_596776 != nil:
    section.add "X-Amz-Algorithm", valid_596776
  var valid_596777 = header.getOrDefault("X-Amz-Signature")
  valid_596777 = validateParameter(valid_596777, JString, required = false,
                                 default = nil)
  if valid_596777 != nil:
    section.add "X-Amz-Signature", valid_596777
  var valid_596778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596778 = validateParameter(valid_596778, JString, required = false,
                                 default = nil)
  if valid_596778 != nil:
    section.add "X-Amz-SignedHeaders", valid_596778
  var valid_596779 = header.getOrDefault("X-Amz-Credential")
  valid_596779 = validateParameter(valid_596779, JString, required = false,
                                 default = nil)
  if valid_596779 != nil:
    section.add "X-Amz-Credential", valid_596779
  result.add "header", section
  ## parameters in `formData` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_596780 = formData.getOrDefault("Engine")
  valid_596780 = validateParameter(valid_596780, JString, required = true,
                                 default = nil)
  if valid_596780 != nil:
    section.add "Engine", valid_596780
  var valid_596781 = formData.getOrDefault("Marker")
  valid_596781 = validateParameter(valid_596781, JString, required = false,
                                 default = nil)
  if valid_596781 != nil:
    section.add "Marker", valid_596781
  var valid_596782 = formData.getOrDefault("Vpc")
  valid_596782 = validateParameter(valid_596782, JBool, required = false, default = nil)
  if valid_596782 != nil:
    section.add "Vpc", valid_596782
  var valid_596783 = formData.getOrDefault("DBInstanceClass")
  valid_596783 = validateParameter(valid_596783, JString, required = false,
                                 default = nil)
  if valid_596783 != nil:
    section.add "DBInstanceClass", valid_596783
  var valid_596784 = formData.getOrDefault("Filters")
  valid_596784 = validateParameter(valid_596784, JArray, required = false,
                                 default = nil)
  if valid_596784 != nil:
    section.add "Filters", valid_596784
  var valid_596785 = formData.getOrDefault("LicenseModel")
  valid_596785 = validateParameter(valid_596785, JString, required = false,
                                 default = nil)
  if valid_596785 != nil:
    section.add "LicenseModel", valid_596785
  var valid_596786 = formData.getOrDefault("MaxRecords")
  valid_596786 = validateParameter(valid_596786, JInt, required = false, default = nil)
  if valid_596786 != nil:
    section.add "MaxRecords", valid_596786
  var valid_596787 = formData.getOrDefault("EngineVersion")
  valid_596787 = validateParameter(valid_596787, JString, required = false,
                                 default = nil)
  if valid_596787 != nil:
    section.add "EngineVersion", valid_596787
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596788: Call_PostDescribeOrderableDBInstanceOptions_596768;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_596788.validator(path, query, header, formData, body)
  let scheme = call_596788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596788.url(scheme.get, call_596788.host, call_596788.base,
                         call_596788.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596788, url, valid)

proc call*(call_596789: Call_PostDescribeOrderableDBInstanceOptions_596768;
          Engine: string; Marker: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions"; Vpc: bool = false;
          DBInstanceClass: string = ""; Filters: JsonNode = nil;
          LicenseModel: string = ""; MaxRecords: int = 0; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Action: string (required)
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_596790 = newJObject()
  var formData_596791 = newJObject()
  add(formData_596791, "Engine", newJString(Engine))
  add(formData_596791, "Marker", newJString(Marker))
  add(query_596790, "Action", newJString(Action))
  add(formData_596791, "Vpc", newJBool(Vpc))
  add(formData_596791, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_596791.add "Filters", Filters
  add(formData_596791, "LicenseModel", newJString(LicenseModel))
  add(formData_596791, "MaxRecords", newJInt(MaxRecords))
  add(formData_596791, "EngineVersion", newJString(EngineVersion))
  add(query_596790, "Version", newJString(Version))
  result = call_596789.call(nil, query_596790, nil, formData_596791, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_596768(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_596769, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_596770,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_596745 = ref object of OpenApiRestCall_593421
proc url_GetDescribeOrderableDBInstanceOptions_596747(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_596746(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_596748 = query.getOrDefault("Engine")
  valid_596748 = validateParameter(valid_596748, JString, required = true,
                                 default = nil)
  if valid_596748 != nil:
    section.add "Engine", valid_596748
  var valid_596749 = query.getOrDefault("MaxRecords")
  valid_596749 = validateParameter(valid_596749, JInt, required = false, default = nil)
  if valid_596749 != nil:
    section.add "MaxRecords", valid_596749
  var valid_596750 = query.getOrDefault("Filters")
  valid_596750 = validateParameter(valid_596750, JArray, required = false,
                                 default = nil)
  if valid_596750 != nil:
    section.add "Filters", valid_596750
  var valid_596751 = query.getOrDefault("LicenseModel")
  valid_596751 = validateParameter(valid_596751, JString, required = false,
                                 default = nil)
  if valid_596751 != nil:
    section.add "LicenseModel", valid_596751
  var valid_596752 = query.getOrDefault("Vpc")
  valid_596752 = validateParameter(valid_596752, JBool, required = false, default = nil)
  if valid_596752 != nil:
    section.add "Vpc", valid_596752
  var valid_596753 = query.getOrDefault("DBInstanceClass")
  valid_596753 = validateParameter(valid_596753, JString, required = false,
                                 default = nil)
  if valid_596753 != nil:
    section.add "DBInstanceClass", valid_596753
  var valid_596754 = query.getOrDefault("Action")
  valid_596754 = validateParameter(valid_596754, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_596754 != nil:
    section.add "Action", valid_596754
  var valid_596755 = query.getOrDefault("Marker")
  valid_596755 = validateParameter(valid_596755, JString, required = false,
                                 default = nil)
  if valid_596755 != nil:
    section.add "Marker", valid_596755
  var valid_596756 = query.getOrDefault("EngineVersion")
  valid_596756 = validateParameter(valid_596756, JString, required = false,
                                 default = nil)
  if valid_596756 != nil:
    section.add "EngineVersion", valid_596756
  var valid_596757 = query.getOrDefault("Version")
  valid_596757 = validateParameter(valid_596757, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596757 != nil:
    section.add "Version", valid_596757
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596758 = header.getOrDefault("X-Amz-Date")
  valid_596758 = validateParameter(valid_596758, JString, required = false,
                                 default = nil)
  if valid_596758 != nil:
    section.add "X-Amz-Date", valid_596758
  var valid_596759 = header.getOrDefault("X-Amz-Security-Token")
  valid_596759 = validateParameter(valid_596759, JString, required = false,
                                 default = nil)
  if valid_596759 != nil:
    section.add "X-Amz-Security-Token", valid_596759
  var valid_596760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596760 = validateParameter(valid_596760, JString, required = false,
                                 default = nil)
  if valid_596760 != nil:
    section.add "X-Amz-Content-Sha256", valid_596760
  var valid_596761 = header.getOrDefault("X-Amz-Algorithm")
  valid_596761 = validateParameter(valid_596761, JString, required = false,
                                 default = nil)
  if valid_596761 != nil:
    section.add "X-Amz-Algorithm", valid_596761
  var valid_596762 = header.getOrDefault("X-Amz-Signature")
  valid_596762 = validateParameter(valid_596762, JString, required = false,
                                 default = nil)
  if valid_596762 != nil:
    section.add "X-Amz-Signature", valid_596762
  var valid_596763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596763 = validateParameter(valid_596763, JString, required = false,
                                 default = nil)
  if valid_596763 != nil:
    section.add "X-Amz-SignedHeaders", valid_596763
  var valid_596764 = header.getOrDefault("X-Amz-Credential")
  valid_596764 = validateParameter(valid_596764, JString, required = false,
                                 default = nil)
  if valid_596764 != nil:
    section.add "X-Amz-Credential", valid_596764
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596765: Call_GetDescribeOrderableDBInstanceOptions_596745;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_596765.validator(path, query, header, formData, body)
  let scheme = call_596765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596765.url(scheme.get, call_596765.host, call_596765.base,
                         call_596765.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596765, url, valid)

proc call*(call_596766: Call_GetDescribeOrderableDBInstanceOptions_596745;
          Engine: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          LicenseModel: string = ""; Vpc: bool = false; DBInstanceClass: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Marker: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_596767 = newJObject()
  add(query_596767, "Engine", newJString(Engine))
  add(query_596767, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596767.add "Filters", Filters
  add(query_596767, "LicenseModel", newJString(LicenseModel))
  add(query_596767, "Vpc", newJBool(Vpc))
  add(query_596767, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_596767, "Action", newJString(Action))
  add(query_596767, "Marker", newJString(Marker))
  add(query_596767, "EngineVersion", newJString(EngineVersion))
  add(query_596767, "Version", newJString(Version))
  result = call_596766.call(nil, query_596767, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_596745(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_596746, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_596747,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_596811 = ref object of OpenApiRestCall_593421
proc url_PostDescribePendingMaintenanceActions_596813(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_596812(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596814 = query.getOrDefault("Action")
  valid_596814 = validateParameter(valid_596814, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_596814 != nil:
    section.add "Action", valid_596814
  var valid_596815 = query.getOrDefault("Version")
  valid_596815 = validateParameter(valid_596815, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596815 != nil:
    section.add "Version", valid_596815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596816 = header.getOrDefault("X-Amz-Date")
  valid_596816 = validateParameter(valid_596816, JString, required = false,
                                 default = nil)
  if valid_596816 != nil:
    section.add "X-Amz-Date", valid_596816
  var valid_596817 = header.getOrDefault("X-Amz-Security-Token")
  valid_596817 = validateParameter(valid_596817, JString, required = false,
                                 default = nil)
  if valid_596817 != nil:
    section.add "X-Amz-Security-Token", valid_596817
  var valid_596818 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596818 = validateParameter(valid_596818, JString, required = false,
                                 default = nil)
  if valid_596818 != nil:
    section.add "X-Amz-Content-Sha256", valid_596818
  var valid_596819 = header.getOrDefault("X-Amz-Algorithm")
  valid_596819 = validateParameter(valid_596819, JString, required = false,
                                 default = nil)
  if valid_596819 != nil:
    section.add "X-Amz-Algorithm", valid_596819
  var valid_596820 = header.getOrDefault("X-Amz-Signature")
  valid_596820 = validateParameter(valid_596820, JString, required = false,
                                 default = nil)
  if valid_596820 != nil:
    section.add "X-Amz-Signature", valid_596820
  var valid_596821 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596821 = validateParameter(valid_596821, JString, required = false,
                                 default = nil)
  if valid_596821 != nil:
    section.add "X-Amz-SignedHeaders", valid_596821
  var valid_596822 = header.getOrDefault("X-Amz-Credential")
  valid_596822 = validateParameter(valid_596822, JString, required = false,
                                 default = nil)
  if valid_596822 != nil:
    section.add "X-Amz-Credential", valid_596822
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596823 = formData.getOrDefault("Marker")
  valid_596823 = validateParameter(valid_596823, JString, required = false,
                                 default = nil)
  if valid_596823 != nil:
    section.add "Marker", valid_596823
  var valid_596824 = formData.getOrDefault("ResourceIdentifier")
  valid_596824 = validateParameter(valid_596824, JString, required = false,
                                 default = nil)
  if valid_596824 != nil:
    section.add "ResourceIdentifier", valid_596824
  var valid_596825 = formData.getOrDefault("Filters")
  valid_596825 = validateParameter(valid_596825, JArray, required = false,
                                 default = nil)
  if valid_596825 != nil:
    section.add "Filters", valid_596825
  var valid_596826 = formData.getOrDefault("MaxRecords")
  valid_596826 = validateParameter(valid_596826, JInt, required = false, default = nil)
  if valid_596826 != nil:
    section.add "MaxRecords", valid_596826
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596827: Call_PostDescribePendingMaintenanceActions_596811;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_596827.validator(path, query, header, formData, body)
  let scheme = call_596827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596827.url(scheme.get, call_596827.host, call_596827.base,
                         call_596827.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596827, url, valid)

proc call*(call_596828: Call_PostDescribePendingMaintenanceActions_596811;
          Marker: string = ""; Action: string = "DescribePendingMaintenanceActions";
          ResourceIdentifier: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596829 = newJObject()
  var formData_596830 = newJObject()
  add(formData_596830, "Marker", newJString(Marker))
  add(query_596829, "Action", newJString(Action))
  add(formData_596830, "ResourceIdentifier", newJString(ResourceIdentifier))
  if Filters != nil:
    formData_596830.add "Filters", Filters
  add(formData_596830, "MaxRecords", newJInt(MaxRecords))
  add(query_596829, "Version", newJString(Version))
  result = call_596828.call(nil, query_596829, nil, formData_596830, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_596811(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_596812, base: "/",
    url: url_PostDescribePendingMaintenanceActions_596813,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_596792 = ref object of OpenApiRestCall_593421
proc url_GetDescribePendingMaintenanceActions_596794(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_596793(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_596795 = query.getOrDefault("MaxRecords")
  valid_596795 = validateParameter(valid_596795, JInt, required = false, default = nil)
  if valid_596795 != nil:
    section.add "MaxRecords", valid_596795
  var valid_596796 = query.getOrDefault("Filters")
  valid_596796 = validateParameter(valid_596796, JArray, required = false,
                                 default = nil)
  if valid_596796 != nil:
    section.add "Filters", valid_596796
  var valid_596797 = query.getOrDefault("ResourceIdentifier")
  valid_596797 = validateParameter(valid_596797, JString, required = false,
                                 default = nil)
  if valid_596797 != nil:
    section.add "ResourceIdentifier", valid_596797
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596798 = query.getOrDefault("Action")
  valid_596798 = validateParameter(valid_596798, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_596798 != nil:
    section.add "Action", valid_596798
  var valid_596799 = query.getOrDefault("Marker")
  valid_596799 = validateParameter(valid_596799, JString, required = false,
                                 default = nil)
  if valid_596799 != nil:
    section.add "Marker", valid_596799
  var valid_596800 = query.getOrDefault("Version")
  valid_596800 = validateParameter(valid_596800, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596800 != nil:
    section.add "Version", valid_596800
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596801 = header.getOrDefault("X-Amz-Date")
  valid_596801 = validateParameter(valid_596801, JString, required = false,
                                 default = nil)
  if valid_596801 != nil:
    section.add "X-Amz-Date", valid_596801
  var valid_596802 = header.getOrDefault("X-Amz-Security-Token")
  valid_596802 = validateParameter(valid_596802, JString, required = false,
                                 default = nil)
  if valid_596802 != nil:
    section.add "X-Amz-Security-Token", valid_596802
  var valid_596803 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596803 = validateParameter(valid_596803, JString, required = false,
                                 default = nil)
  if valid_596803 != nil:
    section.add "X-Amz-Content-Sha256", valid_596803
  var valid_596804 = header.getOrDefault("X-Amz-Algorithm")
  valid_596804 = validateParameter(valid_596804, JString, required = false,
                                 default = nil)
  if valid_596804 != nil:
    section.add "X-Amz-Algorithm", valid_596804
  var valid_596805 = header.getOrDefault("X-Amz-Signature")
  valid_596805 = validateParameter(valid_596805, JString, required = false,
                                 default = nil)
  if valid_596805 != nil:
    section.add "X-Amz-Signature", valid_596805
  var valid_596806 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596806 = validateParameter(valid_596806, JString, required = false,
                                 default = nil)
  if valid_596806 != nil:
    section.add "X-Amz-SignedHeaders", valid_596806
  var valid_596807 = header.getOrDefault("X-Amz-Credential")
  valid_596807 = validateParameter(valid_596807, JString, required = false,
                                 default = nil)
  if valid_596807 != nil:
    section.add "X-Amz-Credential", valid_596807
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596808: Call_GetDescribePendingMaintenanceActions_596792;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_596808.validator(path, query, header, formData, body)
  let scheme = call_596808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596808.url(scheme.get, call_596808.host, call_596808.base,
                         call_596808.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596808, url, valid)

proc call*(call_596809: Call_GetDescribePendingMaintenanceActions_596792;
          MaxRecords: int = 0; Filters: JsonNode = nil; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_596810 = newJObject()
  add(query_596810, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596810.add "Filters", Filters
  add(query_596810, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_596810, "Action", newJString(Action))
  add(query_596810, "Marker", newJString(Marker))
  add(query_596810, "Version", newJString(Version))
  result = call_596809.call(nil, query_596810, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_596792(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_596793, base: "/",
    url: url_GetDescribePendingMaintenanceActions_596794,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstances_596857 = ref object of OpenApiRestCall_593421
proc url_PostDescribeReservedDBInstances_596859(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedDBInstances_596858(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596860 = query.getOrDefault("Action")
  valid_596860 = validateParameter(valid_596860, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_596860 != nil:
    section.add "Action", valid_596860
  var valid_596861 = query.getOrDefault("Version")
  valid_596861 = validateParameter(valid_596861, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596861 != nil:
    section.add "Version", valid_596861
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596862 = header.getOrDefault("X-Amz-Date")
  valid_596862 = validateParameter(valid_596862, JString, required = false,
                                 default = nil)
  if valid_596862 != nil:
    section.add "X-Amz-Date", valid_596862
  var valid_596863 = header.getOrDefault("X-Amz-Security-Token")
  valid_596863 = validateParameter(valid_596863, JString, required = false,
                                 default = nil)
  if valid_596863 != nil:
    section.add "X-Amz-Security-Token", valid_596863
  var valid_596864 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596864 = validateParameter(valid_596864, JString, required = false,
                                 default = nil)
  if valid_596864 != nil:
    section.add "X-Amz-Content-Sha256", valid_596864
  var valid_596865 = header.getOrDefault("X-Amz-Algorithm")
  valid_596865 = validateParameter(valid_596865, JString, required = false,
                                 default = nil)
  if valid_596865 != nil:
    section.add "X-Amz-Algorithm", valid_596865
  var valid_596866 = header.getOrDefault("X-Amz-Signature")
  valid_596866 = validateParameter(valid_596866, JString, required = false,
                                 default = nil)
  if valid_596866 != nil:
    section.add "X-Amz-Signature", valid_596866
  var valid_596867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596867 = validateParameter(valid_596867, JString, required = false,
                                 default = nil)
  if valid_596867 != nil:
    section.add "X-Amz-SignedHeaders", valid_596867
  var valid_596868 = header.getOrDefault("X-Amz-Credential")
  valid_596868 = validateParameter(valid_596868, JString, required = false,
                                 default = nil)
  if valid_596868 != nil:
    section.add "X-Amz-Credential", valid_596868
  result.add "header", section
  ## parameters in `formData` object:
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  section = newJObject()
  var valid_596869 = formData.getOrDefault("OfferingType")
  valid_596869 = validateParameter(valid_596869, JString, required = false,
                                 default = nil)
  if valid_596869 != nil:
    section.add "OfferingType", valid_596869
  var valid_596870 = formData.getOrDefault("ReservedDBInstanceId")
  valid_596870 = validateParameter(valid_596870, JString, required = false,
                                 default = nil)
  if valid_596870 != nil:
    section.add "ReservedDBInstanceId", valid_596870
  var valid_596871 = formData.getOrDefault("Marker")
  valid_596871 = validateParameter(valid_596871, JString, required = false,
                                 default = nil)
  if valid_596871 != nil:
    section.add "Marker", valid_596871
  var valid_596872 = formData.getOrDefault("MultiAZ")
  valid_596872 = validateParameter(valid_596872, JBool, required = false, default = nil)
  if valid_596872 != nil:
    section.add "MultiAZ", valid_596872
  var valid_596873 = formData.getOrDefault("Duration")
  valid_596873 = validateParameter(valid_596873, JString, required = false,
                                 default = nil)
  if valid_596873 != nil:
    section.add "Duration", valid_596873
  var valid_596874 = formData.getOrDefault("DBInstanceClass")
  valid_596874 = validateParameter(valid_596874, JString, required = false,
                                 default = nil)
  if valid_596874 != nil:
    section.add "DBInstanceClass", valid_596874
  var valid_596875 = formData.getOrDefault("Filters")
  valid_596875 = validateParameter(valid_596875, JArray, required = false,
                                 default = nil)
  if valid_596875 != nil:
    section.add "Filters", valid_596875
  var valid_596876 = formData.getOrDefault("ProductDescription")
  valid_596876 = validateParameter(valid_596876, JString, required = false,
                                 default = nil)
  if valid_596876 != nil:
    section.add "ProductDescription", valid_596876
  var valid_596877 = formData.getOrDefault("MaxRecords")
  valid_596877 = validateParameter(valid_596877, JInt, required = false, default = nil)
  if valid_596877 != nil:
    section.add "MaxRecords", valid_596877
  var valid_596878 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_596878 = validateParameter(valid_596878, JString, required = false,
                                 default = nil)
  if valid_596878 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_596878
  var valid_596879 = formData.getOrDefault("LeaseId")
  valid_596879 = validateParameter(valid_596879, JString, required = false,
                                 default = nil)
  if valid_596879 != nil:
    section.add "LeaseId", valid_596879
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596880: Call_PostDescribeReservedDBInstances_596857;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_596880.validator(path, query, header, formData, body)
  let scheme = call_596880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596880.url(scheme.get, call_596880.host, call_596880.base,
                         call_596880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596880, url, valid)

proc call*(call_596881: Call_PostDescribeReservedDBInstances_596857;
          OfferingType: string = ""; ReservedDBInstanceId: string = "";
          Marker: string = ""; MultiAZ: bool = false;
          Action: string = "DescribeReservedDBInstances"; Duration: string = "";
          DBInstanceClass: string = ""; Filters: JsonNode = nil;
          ProductDescription: string = ""; MaxRecords: int = 0;
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; LeaseId: string = ""): Recallable =
  ## postDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  var query_596882 = newJObject()
  var formData_596883 = newJObject()
  add(formData_596883, "OfferingType", newJString(OfferingType))
  add(formData_596883, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(formData_596883, "Marker", newJString(Marker))
  add(formData_596883, "MultiAZ", newJBool(MultiAZ))
  add(query_596882, "Action", newJString(Action))
  add(formData_596883, "Duration", newJString(Duration))
  add(formData_596883, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_596883.add "Filters", Filters
  add(formData_596883, "ProductDescription", newJString(ProductDescription))
  add(formData_596883, "MaxRecords", newJInt(MaxRecords))
  add(formData_596883, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_596882, "Version", newJString(Version))
  add(formData_596883, "LeaseId", newJString(LeaseId))
  result = call_596881.call(nil, query_596882, nil, formData_596883, nil)

var postDescribeReservedDBInstances* = Call_PostDescribeReservedDBInstances_596857(
    name: "postDescribeReservedDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_PostDescribeReservedDBInstances_596858, base: "/",
    url: url_PostDescribeReservedDBInstances_596859,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstances_596831 = ref object of OpenApiRestCall_593421
proc url_GetDescribeReservedDBInstances_596833(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedDBInstances_596832(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596834 = query.getOrDefault("ProductDescription")
  valid_596834 = validateParameter(valid_596834, JString, required = false,
                                 default = nil)
  if valid_596834 != nil:
    section.add "ProductDescription", valid_596834
  var valid_596835 = query.getOrDefault("LeaseId")
  valid_596835 = validateParameter(valid_596835, JString, required = false,
                                 default = nil)
  if valid_596835 != nil:
    section.add "LeaseId", valid_596835
  var valid_596836 = query.getOrDefault("MaxRecords")
  valid_596836 = validateParameter(valid_596836, JInt, required = false, default = nil)
  if valid_596836 != nil:
    section.add "MaxRecords", valid_596836
  var valid_596837 = query.getOrDefault("OfferingType")
  valid_596837 = validateParameter(valid_596837, JString, required = false,
                                 default = nil)
  if valid_596837 != nil:
    section.add "OfferingType", valid_596837
  var valid_596838 = query.getOrDefault("Filters")
  valid_596838 = validateParameter(valid_596838, JArray, required = false,
                                 default = nil)
  if valid_596838 != nil:
    section.add "Filters", valid_596838
  var valid_596839 = query.getOrDefault("MultiAZ")
  valid_596839 = validateParameter(valid_596839, JBool, required = false, default = nil)
  if valid_596839 != nil:
    section.add "MultiAZ", valid_596839
  var valid_596840 = query.getOrDefault("ReservedDBInstanceId")
  valid_596840 = validateParameter(valid_596840, JString, required = false,
                                 default = nil)
  if valid_596840 != nil:
    section.add "ReservedDBInstanceId", valid_596840
  var valid_596841 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_596841 = validateParameter(valid_596841, JString, required = false,
                                 default = nil)
  if valid_596841 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_596841
  var valid_596842 = query.getOrDefault("DBInstanceClass")
  valid_596842 = validateParameter(valid_596842, JString, required = false,
                                 default = nil)
  if valid_596842 != nil:
    section.add "DBInstanceClass", valid_596842
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596843 = query.getOrDefault("Action")
  valid_596843 = validateParameter(valid_596843, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_596843 != nil:
    section.add "Action", valid_596843
  var valid_596844 = query.getOrDefault("Marker")
  valid_596844 = validateParameter(valid_596844, JString, required = false,
                                 default = nil)
  if valid_596844 != nil:
    section.add "Marker", valid_596844
  var valid_596845 = query.getOrDefault("Duration")
  valid_596845 = validateParameter(valid_596845, JString, required = false,
                                 default = nil)
  if valid_596845 != nil:
    section.add "Duration", valid_596845
  var valid_596846 = query.getOrDefault("Version")
  valid_596846 = validateParameter(valid_596846, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596846 != nil:
    section.add "Version", valid_596846
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596847 = header.getOrDefault("X-Amz-Date")
  valid_596847 = validateParameter(valid_596847, JString, required = false,
                                 default = nil)
  if valid_596847 != nil:
    section.add "X-Amz-Date", valid_596847
  var valid_596848 = header.getOrDefault("X-Amz-Security-Token")
  valid_596848 = validateParameter(valid_596848, JString, required = false,
                                 default = nil)
  if valid_596848 != nil:
    section.add "X-Amz-Security-Token", valid_596848
  var valid_596849 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596849 = validateParameter(valid_596849, JString, required = false,
                                 default = nil)
  if valid_596849 != nil:
    section.add "X-Amz-Content-Sha256", valid_596849
  var valid_596850 = header.getOrDefault("X-Amz-Algorithm")
  valid_596850 = validateParameter(valid_596850, JString, required = false,
                                 default = nil)
  if valid_596850 != nil:
    section.add "X-Amz-Algorithm", valid_596850
  var valid_596851 = header.getOrDefault("X-Amz-Signature")
  valid_596851 = validateParameter(valid_596851, JString, required = false,
                                 default = nil)
  if valid_596851 != nil:
    section.add "X-Amz-Signature", valid_596851
  var valid_596852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596852 = validateParameter(valid_596852, JString, required = false,
                                 default = nil)
  if valid_596852 != nil:
    section.add "X-Amz-SignedHeaders", valid_596852
  var valid_596853 = header.getOrDefault("X-Amz-Credential")
  valid_596853 = validateParameter(valid_596853, JString, required = false,
                                 default = nil)
  if valid_596853 != nil:
    section.add "X-Amz-Credential", valid_596853
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596854: Call_GetDescribeReservedDBInstances_596831; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_596854.validator(path, query, header, formData, body)
  let scheme = call_596854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596854.url(scheme.get, call_596854.host, call_596854.base,
                         call_596854.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596854, url, valid)

proc call*(call_596855: Call_GetDescribeReservedDBInstances_596831;
          ProductDescription: string = ""; LeaseId: string = ""; MaxRecords: int = 0;
          OfferingType: string = ""; Filters: JsonNode = nil; MultiAZ: bool = false;
          ReservedDBInstanceId: string = "";
          ReservedDBInstancesOfferingId: string = ""; DBInstanceClass: string = "";
          Action: string = "DescribeReservedDBInstances"; Marker: string = "";
          Duration: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  var query_596856 = newJObject()
  add(query_596856, "ProductDescription", newJString(ProductDescription))
  add(query_596856, "LeaseId", newJString(LeaseId))
  add(query_596856, "MaxRecords", newJInt(MaxRecords))
  add(query_596856, "OfferingType", newJString(OfferingType))
  if Filters != nil:
    query_596856.add "Filters", Filters
  add(query_596856, "MultiAZ", newJBool(MultiAZ))
  add(query_596856, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_596856, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_596856, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_596856, "Action", newJString(Action))
  add(query_596856, "Marker", newJString(Marker))
  add(query_596856, "Duration", newJString(Duration))
  add(query_596856, "Version", newJString(Version))
  result = call_596855.call(nil, query_596856, nil, nil, nil)

var getDescribeReservedDBInstances* = Call_GetDescribeReservedDBInstances_596831(
    name: "getDescribeReservedDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_GetDescribeReservedDBInstances_596832, base: "/",
    url: url_GetDescribeReservedDBInstances_596833,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstancesOfferings_596908 = ref object of OpenApiRestCall_593421
proc url_PostDescribeReservedDBInstancesOfferings_596910(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedDBInstancesOfferings_596909(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596911 = query.getOrDefault("Action")
  valid_596911 = validateParameter(valid_596911, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_596911 != nil:
    section.add "Action", valid_596911
  var valid_596912 = query.getOrDefault("Version")
  valid_596912 = validateParameter(valid_596912, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596912 != nil:
    section.add "Version", valid_596912
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596913 = header.getOrDefault("X-Amz-Date")
  valid_596913 = validateParameter(valid_596913, JString, required = false,
                                 default = nil)
  if valid_596913 != nil:
    section.add "X-Amz-Date", valid_596913
  var valid_596914 = header.getOrDefault("X-Amz-Security-Token")
  valid_596914 = validateParameter(valid_596914, JString, required = false,
                                 default = nil)
  if valid_596914 != nil:
    section.add "X-Amz-Security-Token", valid_596914
  var valid_596915 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596915 = validateParameter(valid_596915, JString, required = false,
                                 default = nil)
  if valid_596915 != nil:
    section.add "X-Amz-Content-Sha256", valid_596915
  var valid_596916 = header.getOrDefault("X-Amz-Algorithm")
  valid_596916 = validateParameter(valid_596916, JString, required = false,
                                 default = nil)
  if valid_596916 != nil:
    section.add "X-Amz-Algorithm", valid_596916
  var valid_596917 = header.getOrDefault("X-Amz-Signature")
  valid_596917 = validateParameter(valid_596917, JString, required = false,
                                 default = nil)
  if valid_596917 != nil:
    section.add "X-Amz-Signature", valid_596917
  var valid_596918 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596918 = validateParameter(valid_596918, JString, required = false,
                                 default = nil)
  if valid_596918 != nil:
    section.add "X-Amz-SignedHeaders", valid_596918
  var valid_596919 = header.getOrDefault("X-Amz-Credential")
  valid_596919 = validateParameter(valid_596919, JString, required = false,
                                 default = nil)
  if valid_596919 != nil:
    section.add "X-Amz-Credential", valid_596919
  result.add "header", section
  ## parameters in `formData` object:
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_596920 = formData.getOrDefault("OfferingType")
  valid_596920 = validateParameter(valid_596920, JString, required = false,
                                 default = nil)
  if valid_596920 != nil:
    section.add "OfferingType", valid_596920
  var valid_596921 = formData.getOrDefault("Marker")
  valid_596921 = validateParameter(valid_596921, JString, required = false,
                                 default = nil)
  if valid_596921 != nil:
    section.add "Marker", valid_596921
  var valid_596922 = formData.getOrDefault("MultiAZ")
  valid_596922 = validateParameter(valid_596922, JBool, required = false, default = nil)
  if valid_596922 != nil:
    section.add "MultiAZ", valid_596922
  var valid_596923 = formData.getOrDefault("Duration")
  valid_596923 = validateParameter(valid_596923, JString, required = false,
                                 default = nil)
  if valid_596923 != nil:
    section.add "Duration", valid_596923
  var valid_596924 = formData.getOrDefault("DBInstanceClass")
  valid_596924 = validateParameter(valid_596924, JString, required = false,
                                 default = nil)
  if valid_596924 != nil:
    section.add "DBInstanceClass", valid_596924
  var valid_596925 = formData.getOrDefault("Filters")
  valid_596925 = validateParameter(valid_596925, JArray, required = false,
                                 default = nil)
  if valid_596925 != nil:
    section.add "Filters", valid_596925
  var valid_596926 = formData.getOrDefault("ProductDescription")
  valid_596926 = validateParameter(valid_596926, JString, required = false,
                                 default = nil)
  if valid_596926 != nil:
    section.add "ProductDescription", valid_596926
  var valid_596927 = formData.getOrDefault("MaxRecords")
  valid_596927 = validateParameter(valid_596927, JInt, required = false, default = nil)
  if valid_596927 != nil:
    section.add "MaxRecords", valid_596927
  var valid_596928 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_596928 = validateParameter(valid_596928, JString, required = false,
                                 default = nil)
  if valid_596928 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_596928
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596929: Call_PostDescribeReservedDBInstancesOfferings_596908;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_596929.validator(path, query, header, formData, body)
  let scheme = call_596929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596929.url(scheme.get, call_596929.host, call_596929.base,
                         call_596929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596929, url, valid)

proc call*(call_596930: Call_PostDescribeReservedDBInstancesOfferings_596908;
          OfferingType: string = ""; Marker: string = ""; MultiAZ: bool = false;
          Action: string = "DescribeReservedDBInstancesOfferings";
          Duration: string = ""; DBInstanceClass: string = ""; Filters: JsonNode = nil;
          ProductDescription: string = ""; MaxRecords: int = 0;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_596931 = newJObject()
  var formData_596932 = newJObject()
  add(formData_596932, "OfferingType", newJString(OfferingType))
  add(formData_596932, "Marker", newJString(Marker))
  add(formData_596932, "MultiAZ", newJBool(MultiAZ))
  add(query_596931, "Action", newJString(Action))
  add(formData_596932, "Duration", newJString(Duration))
  add(formData_596932, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_596932.add "Filters", Filters
  add(formData_596932, "ProductDescription", newJString(ProductDescription))
  add(formData_596932, "MaxRecords", newJInt(MaxRecords))
  add(formData_596932, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_596931, "Version", newJString(Version))
  result = call_596930.call(nil, query_596931, nil, formData_596932, nil)

var postDescribeReservedDBInstancesOfferings* = Call_PostDescribeReservedDBInstancesOfferings_596908(
    name: "postDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_PostDescribeReservedDBInstancesOfferings_596909,
    base: "/", url: url_PostDescribeReservedDBInstancesOfferings_596910,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstancesOfferings_596884 = ref object of OpenApiRestCall_593421
proc url_GetDescribeReservedDBInstancesOfferings_596886(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedDBInstancesOfferings_596885(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596887 = query.getOrDefault("ProductDescription")
  valid_596887 = validateParameter(valid_596887, JString, required = false,
                                 default = nil)
  if valid_596887 != nil:
    section.add "ProductDescription", valid_596887
  var valid_596888 = query.getOrDefault("MaxRecords")
  valid_596888 = validateParameter(valid_596888, JInt, required = false, default = nil)
  if valid_596888 != nil:
    section.add "MaxRecords", valid_596888
  var valid_596889 = query.getOrDefault("OfferingType")
  valid_596889 = validateParameter(valid_596889, JString, required = false,
                                 default = nil)
  if valid_596889 != nil:
    section.add "OfferingType", valid_596889
  var valid_596890 = query.getOrDefault("Filters")
  valid_596890 = validateParameter(valid_596890, JArray, required = false,
                                 default = nil)
  if valid_596890 != nil:
    section.add "Filters", valid_596890
  var valid_596891 = query.getOrDefault("MultiAZ")
  valid_596891 = validateParameter(valid_596891, JBool, required = false, default = nil)
  if valid_596891 != nil:
    section.add "MultiAZ", valid_596891
  var valid_596892 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_596892 = validateParameter(valid_596892, JString, required = false,
                                 default = nil)
  if valid_596892 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_596892
  var valid_596893 = query.getOrDefault("DBInstanceClass")
  valid_596893 = validateParameter(valid_596893, JString, required = false,
                                 default = nil)
  if valid_596893 != nil:
    section.add "DBInstanceClass", valid_596893
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596894 = query.getOrDefault("Action")
  valid_596894 = validateParameter(valid_596894, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_596894 != nil:
    section.add "Action", valid_596894
  var valid_596895 = query.getOrDefault("Marker")
  valid_596895 = validateParameter(valid_596895, JString, required = false,
                                 default = nil)
  if valid_596895 != nil:
    section.add "Marker", valid_596895
  var valid_596896 = query.getOrDefault("Duration")
  valid_596896 = validateParameter(valid_596896, JString, required = false,
                                 default = nil)
  if valid_596896 != nil:
    section.add "Duration", valid_596896
  var valid_596897 = query.getOrDefault("Version")
  valid_596897 = validateParameter(valid_596897, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596897 != nil:
    section.add "Version", valid_596897
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596898 = header.getOrDefault("X-Amz-Date")
  valid_596898 = validateParameter(valid_596898, JString, required = false,
                                 default = nil)
  if valid_596898 != nil:
    section.add "X-Amz-Date", valid_596898
  var valid_596899 = header.getOrDefault("X-Amz-Security-Token")
  valid_596899 = validateParameter(valid_596899, JString, required = false,
                                 default = nil)
  if valid_596899 != nil:
    section.add "X-Amz-Security-Token", valid_596899
  var valid_596900 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596900 = validateParameter(valid_596900, JString, required = false,
                                 default = nil)
  if valid_596900 != nil:
    section.add "X-Amz-Content-Sha256", valid_596900
  var valid_596901 = header.getOrDefault("X-Amz-Algorithm")
  valid_596901 = validateParameter(valid_596901, JString, required = false,
                                 default = nil)
  if valid_596901 != nil:
    section.add "X-Amz-Algorithm", valid_596901
  var valid_596902 = header.getOrDefault("X-Amz-Signature")
  valid_596902 = validateParameter(valid_596902, JString, required = false,
                                 default = nil)
  if valid_596902 != nil:
    section.add "X-Amz-Signature", valid_596902
  var valid_596903 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596903 = validateParameter(valid_596903, JString, required = false,
                                 default = nil)
  if valid_596903 != nil:
    section.add "X-Amz-SignedHeaders", valid_596903
  var valid_596904 = header.getOrDefault("X-Amz-Credential")
  valid_596904 = validateParameter(valid_596904, JString, required = false,
                                 default = nil)
  if valid_596904 != nil:
    section.add "X-Amz-Credential", valid_596904
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596905: Call_GetDescribeReservedDBInstancesOfferings_596884;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_596905.validator(path, query, header, formData, body)
  let scheme = call_596905.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596905.url(scheme.get, call_596905.host, call_596905.base,
                         call_596905.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596905, url, valid)

proc call*(call_596906: Call_GetDescribeReservedDBInstancesOfferings_596884;
          ProductDescription: string = ""; MaxRecords: int = 0;
          OfferingType: string = ""; Filters: JsonNode = nil; MultiAZ: bool = false;
          ReservedDBInstancesOfferingId: string = ""; DBInstanceClass: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          Marker: string = ""; Duration: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  var query_596907 = newJObject()
  add(query_596907, "ProductDescription", newJString(ProductDescription))
  add(query_596907, "MaxRecords", newJInt(MaxRecords))
  add(query_596907, "OfferingType", newJString(OfferingType))
  if Filters != nil:
    query_596907.add "Filters", Filters
  add(query_596907, "MultiAZ", newJBool(MultiAZ))
  add(query_596907, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_596907, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_596907, "Action", newJString(Action))
  add(query_596907, "Marker", newJString(Marker))
  add(query_596907, "Duration", newJString(Duration))
  add(query_596907, "Version", newJString(Version))
  result = call_596906.call(nil, query_596907, nil, nil, nil)

var getDescribeReservedDBInstancesOfferings* = Call_GetDescribeReservedDBInstancesOfferings_596884(
    name: "getDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_GetDescribeReservedDBInstancesOfferings_596885, base: "/",
    url: url_GetDescribeReservedDBInstancesOfferings_596886,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSourceRegions_596952 = ref object of OpenApiRestCall_593421
proc url_PostDescribeSourceRegions_596954(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeSourceRegions_596953(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596955 = query.getOrDefault("Action")
  valid_596955 = validateParameter(valid_596955, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_596955 != nil:
    section.add "Action", valid_596955
  var valid_596956 = query.getOrDefault("Version")
  valid_596956 = validateParameter(valid_596956, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596956 != nil:
    section.add "Version", valid_596956
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596957 = header.getOrDefault("X-Amz-Date")
  valid_596957 = validateParameter(valid_596957, JString, required = false,
                                 default = nil)
  if valid_596957 != nil:
    section.add "X-Amz-Date", valid_596957
  var valid_596958 = header.getOrDefault("X-Amz-Security-Token")
  valid_596958 = validateParameter(valid_596958, JString, required = false,
                                 default = nil)
  if valid_596958 != nil:
    section.add "X-Amz-Security-Token", valid_596958
  var valid_596959 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596959 = validateParameter(valid_596959, JString, required = false,
                                 default = nil)
  if valid_596959 != nil:
    section.add "X-Amz-Content-Sha256", valid_596959
  var valid_596960 = header.getOrDefault("X-Amz-Algorithm")
  valid_596960 = validateParameter(valid_596960, JString, required = false,
                                 default = nil)
  if valid_596960 != nil:
    section.add "X-Amz-Algorithm", valid_596960
  var valid_596961 = header.getOrDefault("X-Amz-Signature")
  valid_596961 = validateParameter(valid_596961, JString, required = false,
                                 default = nil)
  if valid_596961 != nil:
    section.add "X-Amz-Signature", valid_596961
  var valid_596962 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596962 = validateParameter(valid_596962, JString, required = false,
                                 default = nil)
  if valid_596962 != nil:
    section.add "X-Amz-SignedHeaders", valid_596962
  var valid_596963 = header.getOrDefault("X-Amz-Credential")
  valid_596963 = validateParameter(valid_596963, JString, required = false,
                                 default = nil)
  if valid_596963 != nil:
    section.add "X-Amz-Credential", valid_596963
  result.add "header", section
  ## parameters in `formData` object:
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_596964 = formData.getOrDefault("RegionName")
  valid_596964 = validateParameter(valid_596964, JString, required = false,
                                 default = nil)
  if valid_596964 != nil:
    section.add "RegionName", valid_596964
  var valid_596965 = formData.getOrDefault("Marker")
  valid_596965 = validateParameter(valid_596965, JString, required = false,
                                 default = nil)
  if valid_596965 != nil:
    section.add "Marker", valid_596965
  var valid_596966 = formData.getOrDefault("Filters")
  valid_596966 = validateParameter(valid_596966, JArray, required = false,
                                 default = nil)
  if valid_596966 != nil:
    section.add "Filters", valid_596966
  var valid_596967 = formData.getOrDefault("MaxRecords")
  valid_596967 = validateParameter(valid_596967, JInt, required = false, default = nil)
  if valid_596967 != nil:
    section.add "MaxRecords", valid_596967
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596968: Call_PostDescribeSourceRegions_596952; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_596968.validator(path, query, header, formData, body)
  let scheme = call_596968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596968.url(scheme.get, call_596968.host, call_596968.base,
                         call_596968.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596968, url, valid)

proc call*(call_596969: Call_PostDescribeSourceRegions_596952;
          RegionName: string = ""; Marker: string = "";
          Action: string = "DescribeSourceRegions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_596970 = newJObject()
  var formData_596971 = newJObject()
  add(formData_596971, "RegionName", newJString(RegionName))
  add(formData_596971, "Marker", newJString(Marker))
  add(query_596970, "Action", newJString(Action))
  if Filters != nil:
    formData_596971.add "Filters", Filters
  add(formData_596971, "MaxRecords", newJInt(MaxRecords))
  add(query_596970, "Version", newJString(Version))
  result = call_596969.call(nil, query_596970, nil, formData_596971, nil)

var postDescribeSourceRegions* = Call_PostDescribeSourceRegions_596952(
    name: "postDescribeSourceRegions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_PostDescribeSourceRegions_596953, base: "/",
    url: url_PostDescribeSourceRegions_596954,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSourceRegions_596933 = ref object of OpenApiRestCall_593421
proc url_GetDescribeSourceRegions_596935(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeSourceRegions_596934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  section = newJObject()
  var valid_596936 = query.getOrDefault("MaxRecords")
  valid_596936 = validateParameter(valid_596936, JInt, required = false, default = nil)
  if valid_596936 != nil:
    section.add "MaxRecords", valid_596936
  var valid_596937 = query.getOrDefault("Filters")
  valid_596937 = validateParameter(valid_596937, JArray, required = false,
                                 default = nil)
  if valid_596937 != nil:
    section.add "Filters", valid_596937
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596938 = query.getOrDefault("Action")
  valid_596938 = validateParameter(valid_596938, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_596938 != nil:
    section.add "Action", valid_596938
  var valid_596939 = query.getOrDefault("Marker")
  valid_596939 = validateParameter(valid_596939, JString, required = false,
                                 default = nil)
  if valid_596939 != nil:
    section.add "Marker", valid_596939
  var valid_596940 = query.getOrDefault("Version")
  valid_596940 = validateParameter(valid_596940, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596940 != nil:
    section.add "Version", valid_596940
  var valid_596941 = query.getOrDefault("RegionName")
  valid_596941 = validateParameter(valid_596941, JString, required = false,
                                 default = nil)
  if valid_596941 != nil:
    section.add "RegionName", valid_596941
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596942 = header.getOrDefault("X-Amz-Date")
  valid_596942 = validateParameter(valid_596942, JString, required = false,
                                 default = nil)
  if valid_596942 != nil:
    section.add "X-Amz-Date", valid_596942
  var valid_596943 = header.getOrDefault("X-Amz-Security-Token")
  valid_596943 = validateParameter(valid_596943, JString, required = false,
                                 default = nil)
  if valid_596943 != nil:
    section.add "X-Amz-Security-Token", valid_596943
  var valid_596944 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596944 = validateParameter(valid_596944, JString, required = false,
                                 default = nil)
  if valid_596944 != nil:
    section.add "X-Amz-Content-Sha256", valid_596944
  var valid_596945 = header.getOrDefault("X-Amz-Algorithm")
  valid_596945 = validateParameter(valid_596945, JString, required = false,
                                 default = nil)
  if valid_596945 != nil:
    section.add "X-Amz-Algorithm", valid_596945
  var valid_596946 = header.getOrDefault("X-Amz-Signature")
  valid_596946 = validateParameter(valid_596946, JString, required = false,
                                 default = nil)
  if valid_596946 != nil:
    section.add "X-Amz-Signature", valid_596946
  var valid_596947 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596947 = validateParameter(valid_596947, JString, required = false,
                                 default = nil)
  if valid_596947 != nil:
    section.add "X-Amz-SignedHeaders", valid_596947
  var valid_596948 = header.getOrDefault("X-Amz-Credential")
  valid_596948 = validateParameter(valid_596948, JString, required = false,
                                 default = nil)
  if valid_596948 != nil:
    section.add "X-Amz-Credential", valid_596948
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596949: Call_GetDescribeSourceRegions_596933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_596949.validator(path, query, header, formData, body)
  let scheme = call_596949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596949.url(scheme.get, call_596949.host, call_596949.base,
                         call_596949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596949, url, valid)

proc call*(call_596950: Call_GetDescribeSourceRegions_596933; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeSourceRegions";
          Marker: string = ""; Version: string = "2014-10-31"; RegionName: string = ""): Recallable =
  ## getDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  var query_596951 = newJObject()
  add(query_596951, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_596951.add "Filters", Filters
  add(query_596951, "Action", newJString(Action))
  add(query_596951, "Marker", newJString(Marker))
  add(query_596951, "Version", newJString(Version))
  add(query_596951, "RegionName", newJString(RegionName))
  result = call_596950.call(nil, query_596951, nil, nil, nil)

var getDescribeSourceRegions* = Call_GetDescribeSourceRegions_596933(
    name: "getDescribeSourceRegions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_GetDescribeSourceRegions_596934, base: "/",
    url: url_GetDescribeSourceRegions_596935, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_596988 = ref object of OpenApiRestCall_593421
proc url_PostDescribeValidDBInstanceModifications_596990(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_596989(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596991 = query.getOrDefault("Action")
  valid_596991 = validateParameter(valid_596991, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_596991 != nil:
    section.add "Action", valid_596991
  var valid_596992 = query.getOrDefault("Version")
  valid_596992 = validateParameter(valid_596992, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596992 != nil:
    section.add "Version", valid_596992
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596993 = header.getOrDefault("X-Amz-Date")
  valid_596993 = validateParameter(valid_596993, JString, required = false,
                                 default = nil)
  if valid_596993 != nil:
    section.add "X-Amz-Date", valid_596993
  var valid_596994 = header.getOrDefault("X-Amz-Security-Token")
  valid_596994 = validateParameter(valid_596994, JString, required = false,
                                 default = nil)
  if valid_596994 != nil:
    section.add "X-Amz-Security-Token", valid_596994
  var valid_596995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596995 = validateParameter(valid_596995, JString, required = false,
                                 default = nil)
  if valid_596995 != nil:
    section.add "X-Amz-Content-Sha256", valid_596995
  var valid_596996 = header.getOrDefault("X-Amz-Algorithm")
  valid_596996 = validateParameter(valid_596996, JString, required = false,
                                 default = nil)
  if valid_596996 != nil:
    section.add "X-Amz-Algorithm", valid_596996
  var valid_596997 = header.getOrDefault("X-Amz-Signature")
  valid_596997 = validateParameter(valid_596997, JString, required = false,
                                 default = nil)
  if valid_596997 != nil:
    section.add "X-Amz-Signature", valid_596997
  var valid_596998 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596998 = validateParameter(valid_596998, JString, required = false,
                                 default = nil)
  if valid_596998 != nil:
    section.add "X-Amz-SignedHeaders", valid_596998
  var valid_596999 = header.getOrDefault("X-Amz-Credential")
  valid_596999 = validateParameter(valid_596999, JString, required = false,
                                 default = nil)
  if valid_596999 != nil:
    section.add "X-Amz-Credential", valid_596999
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597000 = formData.getOrDefault("DBInstanceIdentifier")
  valid_597000 = validateParameter(valid_597000, JString, required = true,
                                 default = nil)
  if valid_597000 != nil:
    section.add "DBInstanceIdentifier", valid_597000
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597001: Call_PostDescribeValidDBInstanceModifications_596988;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_597001.validator(path, query, header, formData, body)
  let scheme = call_597001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597001.url(scheme.get, call_597001.host, call_597001.base,
                         call_597001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597001, url, valid)

proc call*(call_597002: Call_PostDescribeValidDBInstanceModifications_596988;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597003 = newJObject()
  var formData_597004 = newJObject()
  add(formData_597004, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_597003, "Action", newJString(Action))
  add(query_597003, "Version", newJString(Version))
  result = call_597002.call(nil, query_597003, nil, formData_597004, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_596988(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_596989,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_596990,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_596972 = ref object of OpenApiRestCall_593421
proc url_GetDescribeValidDBInstanceModifications_596974(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_596973(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596975 = query.getOrDefault("Action")
  valid_596975 = validateParameter(valid_596975, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_596975 != nil:
    section.add "Action", valid_596975
  var valid_596976 = query.getOrDefault("Version")
  valid_596976 = validateParameter(valid_596976, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596976 != nil:
    section.add "Version", valid_596976
  var valid_596977 = query.getOrDefault("DBInstanceIdentifier")
  valid_596977 = validateParameter(valid_596977, JString, required = true,
                                 default = nil)
  if valid_596977 != nil:
    section.add "DBInstanceIdentifier", valid_596977
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596978 = header.getOrDefault("X-Amz-Date")
  valid_596978 = validateParameter(valid_596978, JString, required = false,
                                 default = nil)
  if valid_596978 != nil:
    section.add "X-Amz-Date", valid_596978
  var valid_596979 = header.getOrDefault("X-Amz-Security-Token")
  valid_596979 = validateParameter(valid_596979, JString, required = false,
                                 default = nil)
  if valid_596979 != nil:
    section.add "X-Amz-Security-Token", valid_596979
  var valid_596980 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596980 = validateParameter(valid_596980, JString, required = false,
                                 default = nil)
  if valid_596980 != nil:
    section.add "X-Amz-Content-Sha256", valid_596980
  var valid_596981 = header.getOrDefault("X-Amz-Algorithm")
  valid_596981 = validateParameter(valid_596981, JString, required = false,
                                 default = nil)
  if valid_596981 != nil:
    section.add "X-Amz-Algorithm", valid_596981
  var valid_596982 = header.getOrDefault("X-Amz-Signature")
  valid_596982 = validateParameter(valid_596982, JString, required = false,
                                 default = nil)
  if valid_596982 != nil:
    section.add "X-Amz-Signature", valid_596982
  var valid_596983 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596983 = validateParameter(valid_596983, JString, required = false,
                                 default = nil)
  if valid_596983 != nil:
    section.add "X-Amz-SignedHeaders", valid_596983
  var valid_596984 = header.getOrDefault("X-Amz-Credential")
  valid_596984 = validateParameter(valid_596984, JString, required = false,
                                 default = nil)
  if valid_596984 != nil:
    section.add "X-Amz-Credential", valid_596984
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596985: Call_GetDescribeValidDBInstanceModifications_596972;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_596985.validator(path, query, header, formData, body)
  let scheme = call_596985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596985.url(scheme.get, call_596985.host, call_596985.base,
                         call_596985.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596985, url, valid)

proc call*(call_596986: Call_GetDescribeValidDBInstanceModifications_596972;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  var query_596987 = newJObject()
  add(query_596987, "Action", newJString(Action))
  add(query_596987, "Version", newJString(Version))
  add(query_596987, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_596986.call(nil, query_596987, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_596972(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_596973, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_596974,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDownloadDBLogFilePortion_597024 = ref object of OpenApiRestCall_593421
proc url_PostDownloadDBLogFilePortion_597026(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDownloadDBLogFilePortion_597025(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597027 = query.getOrDefault("Action")
  valid_597027 = validateParameter(valid_597027, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_597027 != nil:
    section.add "Action", valid_597027
  var valid_597028 = query.getOrDefault("Version")
  valid_597028 = validateParameter(valid_597028, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597028 != nil:
    section.add "Version", valid_597028
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597029 = header.getOrDefault("X-Amz-Date")
  valid_597029 = validateParameter(valid_597029, JString, required = false,
                                 default = nil)
  if valid_597029 != nil:
    section.add "X-Amz-Date", valid_597029
  var valid_597030 = header.getOrDefault("X-Amz-Security-Token")
  valid_597030 = validateParameter(valid_597030, JString, required = false,
                                 default = nil)
  if valid_597030 != nil:
    section.add "X-Amz-Security-Token", valid_597030
  var valid_597031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597031 = validateParameter(valid_597031, JString, required = false,
                                 default = nil)
  if valid_597031 != nil:
    section.add "X-Amz-Content-Sha256", valid_597031
  var valid_597032 = header.getOrDefault("X-Amz-Algorithm")
  valid_597032 = validateParameter(valid_597032, JString, required = false,
                                 default = nil)
  if valid_597032 != nil:
    section.add "X-Amz-Algorithm", valid_597032
  var valid_597033 = header.getOrDefault("X-Amz-Signature")
  valid_597033 = validateParameter(valid_597033, JString, required = false,
                                 default = nil)
  if valid_597033 != nil:
    section.add "X-Amz-Signature", valid_597033
  var valid_597034 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597034 = validateParameter(valid_597034, JString, required = false,
                                 default = nil)
  if valid_597034 != nil:
    section.add "X-Amz-SignedHeaders", valid_597034
  var valid_597035 = header.getOrDefault("X-Amz-Credential")
  valid_597035 = validateParameter(valid_597035, JString, required = false,
                                 default = nil)
  if valid_597035 != nil:
    section.add "X-Amz-Credential", valid_597035
  result.add "header", section
  ## parameters in `formData` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  section = newJObject()
  var valid_597036 = formData.getOrDefault("NumberOfLines")
  valid_597036 = validateParameter(valid_597036, JInt, required = false, default = nil)
  if valid_597036 != nil:
    section.add "NumberOfLines", valid_597036
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597037 = formData.getOrDefault("DBInstanceIdentifier")
  valid_597037 = validateParameter(valid_597037, JString, required = true,
                                 default = nil)
  if valid_597037 != nil:
    section.add "DBInstanceIdentifier", valid_597037
  var valid_597038 = formData.getOrDefault("Marker")
  valid_597038 = validateParameter(valid_597038, JString, required = false,
                                 default = nil)
  if valid_597038 != nil:
    section.add "Marker", valid_597038
  var valid_597039 = formData.getOrDefault("LogFileName")
  valid_597039 = validateParameter(valid_597039, JString, required = true,
                                 default = nil)
  if valid_597039 != nil:
    section.add "LogFileName", valid_597039
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597040: Call_PostDownloadDBLogFilePortion_597024; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_597040.validator(path, query, header, formData, body)
  let scheme = call_597040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597040.url(scheme.get, call_597040.host, call_597040.base,
                         call_597040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597040, url, valid)

proc call*(call_597041: Call_PostDownloadDBLogFilePortion_597024;
          DBInstanceIdentifier: string; LogFileName: string; NumberOfLines: int = 0;
          Marker: string = ""; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## postDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   Action: string (required)
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: string (required)
  var query_597042 = newJObject()
  var formData_597043 = newJObject()
  add(formData_597043, "NumberOfLines", newJInt(NumberOfLines))
  add(formData_597043, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_597043, "Marker", newJString(Marker))
  add(query_597042, "Action", newJString(Action))
  add(formData_597043, "LogFileName", newJString(LogFileName))
  add(query_597042, "Version", newJString(Version))
  result = call_597041.call(nil, query_597042, nil, formData_597043, nil)

var postDownloadDBLogFilePortion* = Call_PostDownloadDBLogFilePortion_597024(
    name: "postDownloadDBLogFilePortion", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_PostDownloadDBLogFilePortion_597025, base: "/",
    url: url_PostDownloadDBLogFilePortion_597026,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDownloadDBLogFilePortion_597005 = ref object of OpenApiRestCall_593421
proc url_GetDownloadDBLogFilePortion_597007(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDownloadDBLogFilePortion_597006(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_597008 = query.getOrDefault("NumberOfLines")
  valid_597008 = validateParameter(valid_597008, JInt, required = false, default = nil)
  if valid_597008 != nil:
    section.add "NumberOfLines", valid_597008
  assert query != nil,
        "query argument is necessary due to required `LogFileName` field"
  var valid_597009 = query.getOrDefault("LogFileName")
  valid_597009 = validateParameter(valid_597009, JString, required = true,
                                 default = nil)
  if valid_597009 != nil:
    section.add "LogFileName", valid_597009
  var valid_597010 = query.getOrDefault("Action")
  valid_597010 = validateParameter(valid_597010, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_597010 != nil:
    section.add "Action", valid_597010
  var valid_597011 = query.getOrDefault("Marker")
  valid_597011 = validateParameter(valid_597011, JString, required = false,
                                 default = nil)
  if valid_597011 != nil:
    section.add "Marker", valid_597011
  var valid_597012 = query.getOrDefault("Version")
  valid_597012 = validateParameter(valid_597012, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597012 != nil:
    section.add "Version", valid_597012
  var valid_597013 = query.getOrDefault("DBInstanceIdentifier")
  valid_597013 = validateParameter(valid_597013, JString, required = true,
                                 default = nil)
  if valid_597013 != nil:
    section.add "DBInstanceIdentifier", valid_597013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597014 = header.getOrDefault("X-Amz-Date")
  valid_597014 = validateParameter(valid_597014, JString, required = false,
                                 default = nil)
  if valid_597014 != nil:
    section.add "X-Amz-Date", valid_597014
  var valid_597015 = header.getOrDefault("X-Amz-Security-Token")
  valid_597015 = validateParameter(valid_597015, JString, required = false,
                                 default = nil)
  if valid_597015 != nil:
    section.add "X-Amz-Security-Token", valid_597015
  var valid_597016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597016 = validateParameter(valid_597016, JString, required = false,
                                 default = nil)
  if valid_597016 != nil:
    section.add "X-Amz-Content-Sha256", valid_597016
  var valid_597017 = header.getOrDefault("X-Amz-Algorithm")
  valid_597017 = validateParameter(valid_597017, JString, required = false,
                                 default = nil)
  if valid_597017 != nil:
    section.add "X-Amz-Algorithm", valid_597017
  var valid_597018 = header.getOrDefault("X-Amz-Signature")
  valid_597018 = validateParameter(valid_597018, JString, required = false,
                                 default = nil)
  if valid_597018 != nil:
    section.add "X-Amz-Signature", valid_597018
  var valid_597019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597019 = validateParameter(valid_597019, JString, required = false,
                                 default = nil)
  if valid_597019 != nil:
    section.add "X-Amz-SignedHeaders", valid_597019
  var valid_597020 = header.getOrDefault("X-Amz-Credential")
  valid_597020 = validateParameter(valid_597020, JString, required = false,
                                 default = nil)
  if valid_597020 != nil:
    section.add "X-Amz-Credential", valid_597020
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597021: Call_GetDownloadDBLogFilePortion_597005; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_597021.validator(path, query, header, formData, body)
  let scheme = call_597021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597021.url(scheme.get, call_597021.host, call_597021.base,
                         call_597021.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597021, url, valid)

proc call*(call_597022: Call_GetDownloadDBLogFilePortion_597005;
          LogFileName: string; DBInstanceIdentifier: string; NumberOfLines: int = 0;
          Action: string = "DownloadDBLogFilePortion"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Action: string (required)
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_597023 = newJObject()
  add(query_597023, "NumberOfLines", newJInt(NumberOfLines))
  add(query_597023, "LogFileName", newJString(LogFileName))
  add(query_597023, "Action", newJString(Action))
  add(query_597023, "Marker", newJString(Marker))
  add(query_597023, "Version", newJString(Version))
  add(query_597023, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_597022.call(nil, query_597023, nil, nil, nil)

var getDownloadDBLogFilePortion* = Call_GetDownloadDBLogFilePortion_597005(
    name: "getDownloadDBLogFilePortion", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_GetDownloadDBLogFilePortion_597006, base: "/",
    url: url_GetDownloadDBLogFilePortion_597007,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_597061 = ref object of OpenApiRestCall_593421
proc url_PostFailoverDBCluster_597063(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostFailoverDBCluster_597062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597064 = query.getOrDefault("Action")
  valid_597064 = validateParameter(valid_597064, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_597064 != nil:
    section.add "Action", valid_597064
  var valid_597065 = query.getOrDefault("Version")
  valid_597065 = validateParameter(valid_597065, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597065 != nil:
    section.add "Version", valid_597065
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597066 = header.getOrDefault("X-Amz-Date")
  valid_597066 = validateParameter(valid_597066, JString, required = false,
                                 default = nil)
  if valid_597066 != nil:
    section.add "X-Amz-Date", valid_597066
  var valid_597067 = header.getOrDefault("X-Amz-Security-Token")
  valid_597067 = validateParameter(valid_597067, JString, required = false,
                                 default = nil)
  if valid_597067 != nil:
    section.add "X-Amz-Security-Token", valid_597067
  var valid_597068 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597068 = validateParameter(valid_597068, JString, required = false,
                                 default = nil)
  if valid_597068 != nil:
    section.add "X-Amz-Content-Sha256", valid_597068
  var valid_597069 = header.getOrDefault("X-Amz-Algorithm")
  valid_597069 = validateParameter(valid_597069, JString, required = false,
                                 default = nil)
  if valid_597069 != nil:
    section.add "X-Amz-Algorithm", valid_597069
  var valid_597070 = header.getOrDefault("X-Amz-Signature")
  valid_597070 = validateParameter(valid_597070, JString, required = false,
                                 default = nil)
  if valid_597070 != nil:
    section.add "X-Amz-Signature", valid_597070
  var valid_597071 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597071 = validateParameter(valid_597071, JString, required = false,
                                 default = nil)
  if valid_597071 != nil:
    section.add "X-Amz-SignedHeaders", valid_597071
  var valid_597072 = header.getOrDefault("X-Amz-Credential")
  valid_597072 = validateParameter(valid_597072, JString, required = false,
                                 default = nil)
  if valid_597072 != nil:
    section.add "X-Amz-Credential", valid_597072
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_597073 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_597073 = validateParameter(valid_597073, JString, required = false,
                                 default = nil)
  if valid_597073 != nil:
    section.add "TargetDBInstanceIdentifier", valid_597073
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597074 = formData.getOrDefault("DBClusterIdentifier")
  valid_597074 = validateParameter(valid_597074, JString, required = true,
                                 default = nil)
  if valid_597074 != nil:
    section.add "DBClusterIdentifier", valid_597074
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597075: Call_PostFailoverDBCluster_597061; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597075.validator(path, query, header, formData, body)
  let scheme = call_597075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597075.url(scheme.get, call_597075.host, call_597075.base,
                         call_597075.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597075, url, valid)

proc call*(call_597076: Call_PostFailoverDBCluster_597061;
          DBClusterIdentifier: string; Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_597077 = newJObject()
  var formData_597078 = newJObject()
  add(query_597077, "Action", newJString(Action))
  add(formData_597078, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(formData_597078, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597077, "Version", newJString(Version))
  result = call_597076.call(nil, query_597077, nil, formData_597078, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_597061(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_597062, base: "/",
    url: url_PostFailoverDBCluster_597063, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_597044 = ref object of OpenApiRestCall_593421
proc url_GetFailoverDBCluster_597046(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetFailoverDBCluster_597045(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597047 = query.getOrDefault("DBClusterIdentifier")
  valid_597047 = validateParameter(valid_597047, JString, required = true,
                                 default = nil)
  if valid_597047 != nil:
    section.add "DBClusterIdentifier", valid_597047
  var valid_597048 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_597048 = validateParameter(valid_597048, JString, required = false,
                                 default = nil)
  if valid_597048 != nil:
    section.add "TargetDBInstanceIdentifier", valid_597048
  var valid_597049 = query.getOrDefault("Action")
  valid_597049 = validateParameter(valid_597049, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_597049 != nil:
    section.add "Action", valid_597049
  var valid_597050 = query.getOrDefault("Version")
  valid_597050 = validateParameter(valid_597050, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597050 != nil:
    section.add "Version", valid_597050
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597051 = header.getOrDefault("X-Amz-Date")
  valid_597051 = validateParameter(valid_597051, JString, required = false,
                                 default = nil)
  if valid_597051 != nil:
    section.add "X-Amz-Date", valid_597051
  var valid_597052 = header.getOrDefault("X-Amz-Security-Token")
  valid_597052 = validateParameter(valid_597052, JString, required = false,
                                 default = nil)
  if valid_597052 != nil:
    section.add "X-Amz-Security-Token", valid_597052
  var valid_597053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597053 = validateParameter(valid_597053, JString, required = false,
                                 default = nil)
  if valid_597053 != nil:
    section.add "X-Amz-Content-Sha256", valid_597053
  var valid_597054 = header.getOrDefault("X-Amz-Algorithm")
  valid_597054 = validateParameter(valid_597054, JString, required = false,
                                 default = nil)
  if valid_597054 != nil:
    section.add "X-Amz-Algorithm", valid_597054
  var valid_597055 = header.getOrDefault("X-Amz-Signature")
  valid_597055 = validateParameter(valid_597055, JString, required = false,
                                 default = nil)
  if valid_597055 != nil:
    section.add "X-Amz-Signature", valid_597055
  var valid_597056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597056 = validateParameter(valid_597056, JString, required = false,
                                 default = nil)
  if valid_597056 != nil:
    section.add "X-Amz-SignedHeaders", valid_597056
  var valid_597057 = header.getOrDefault("X-Amz-Credential")
  valid_597057 = validateParameter(valid_597057, JString, required = false,
                                 default = nil)
  if valid_597057 != nil:
    section.add "X-Amz-Credential", valid_597057
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597058: Call_GetFailoverDBCluster_597044; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597058.validator(path, query, header, formData, body)
  let scheme = call_597058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597058.url(scheme.get, call_597058.host, call_597058.base,
                         call_597058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597058, url, valid)

proc call*(call_597059: Call_GetFailoverDBCluster_597044;
          DBClusterIdentifier: string; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597060 = newJObject()
  add(query_597060, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597060, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_597060, "Action", newJString(Action))
  add(query_597060, "Version", newJString(Version))
  result = call_597059.call(nil, query_597060, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_597044(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_597045, base: "/",
    url: url_GetFailoverDBCluster_597046, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_597096 = ref object of OpenApiRestCall_593421
proc url_PostListTagsForResource_597098(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListTagsForResource_597097(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597099 = query.getOrDefault("Action")
  valid_597099 = validateParameter(valid_597099, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_597099 != nil:
    section.add "Action", valid_597099
  var valid_597100 = query.getOrDefault("Version")
  valid_597100 = validateParameter(valid_597100, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597100 != nil:
    section.add "Version", valid_597100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597101 = header.getOrDefault("X-Amz-Date")
  valid_597101 = validateParameter(valid_597101, JString, required = false,
                                 default = nil)
  if valid_597101 != nil:
    section.add "X-Amz-Date", valid_597101
  var valid_597102 = header.getOrDefault("X-Amz-Security-Token")
  valid_597102 = validateParameter(valid_597102, JString, required = false,
                                 default = nil)
  if valid_597102 != nil:
    section.add "X-Amz-Security-Token", valid_597102
  var valid_597103 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597103 = validateParameter(valid_597103, JString, required = false,
                                 default = nil)
  if valid_597103 != nil:
    section.add "X-Amz-Content-Sha256", valid_597103
  var valid_597104 = header.getOrDefault("X-Amz-Algorithm")
  valid_597104 = validateParameter(valid_597104, JString, required = false,
                                 default = nil)
  if valid_597104 != nil:
    section.add "X-Amz-Algorithm", valid_597104
  var valid_597105 = header.getOrDefault("X-Amz-Signature")
  valid_597105 = validateParameter(valid_597105, JString, required = false,
                                 default = nil)
  if valid_597105 != nil:
    section.add "X-Amz-Signature", valid_597105
  var valid_597106 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597106 = validateParameter(valid_597106, JString, required = false,
                                 default = nil)
  if valid_597106 != nil:
    section.add "X-Amz-SignedHeaders", valid_597106
  var valid_597107 = header.getOrDefault("X-Amz-Credential")
  valid_597107 = validateParameter(valid_597107, JString, required = false,
                                 default = nil)
  if valid_597107 != nil:
    section.add "X-Amz-Credential", valid_597107
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  section = newJObject()
  var valid_597108 = formData.getOrDefault("Filters")
  valid_597108 = validateParameter(valid_597108, JArray, required = false,
                                 default = nil)
  if valid_597108 != nil:
    section.add "Filters", valid_597108
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_597109 = formData.getOrDefault("ResourceName")
  valid_597109 = validateParameter(valid_597109, JString, required = true,
                                 default = nil)
  if valid_597109 != nil:
    section.add "ResourceName", valid_597109
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597110: Call_PostListTagsForResource_597096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_597110.validator(path, query, header, formData, body)
  let scheme = call_597110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597110.url(scheme.get, call_597110.host, call_597110.base,
                         call_597110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597110, url, valid)

proc call*(call_597111: Call_PostListTagsForResource_597096; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Version: string (required)
  var query_597112 = newJObject()
  var formData_597113 = newJObject()
  add(query_597112, "Action", newJString(Action))
  if Filters != nil:
    formData_597113.add "Filters", Filters
  add(formData_597113, "ResourceName", newJString(ResourceName))
  add(query_597112, "Version", newJString(Version))
  result = call_597111.call(nil, query_597112, nil, formData_597113, nil)

var postListTagsForResource* = Call_PostListTagsForResource_597096(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_597097, base: "/",
    url: url_PostListTagsForResource_597098, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_597079 = ref object of OpenApiRestCall_593421
proc url_GetListTagsForResource_597081(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListTagsForResource_597080(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_597082 = query.getOrDefault("Filters")
  valid_597082 = validateParameter(valid_597082, JArray, required = false,
                                 default = nil)
  if valid_597082 != nil:
    section.add "Filters", valid_597082
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_597083 = query.getOrDefault("ResourceName")
  valid_597083 = validateParameter(valid_597083, JString, required = true,
                                 default = nil)
  if valid_597083 != nil:
    section.add "ResourceName", valid_597083
  var valid_597084 = query.getOrDefault("Action")
  valid_597084 = validateParameter(valid_597084, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_597084 != nil:
    section.add "Action", valid_597084
  var valid_597085 = query.getOrDefault("Version")
  valid_597085 = validateParameter(valid_597085, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597085 != nil:
    section.add "Version", valid_597085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597086 = header.getOrDefault("X-Amz-Date")
  valid_597086 = validateParameter(valid_597086, JString, required = false,
                                 default = nil)
  if valid_597086 != nil:
    section.add "X-Amz-Date", valid_597086
  var valid_597087 = header.getOrDefault("X-Amz-Security-Token")
  valid_597087 = validateParameter(valid_597087, JString, required = false,
                                 default = nil)
  if valid_597087 != nil:
    section.add "X-Amz-Security-Token", valid_597087
  var valid_597088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597088 = validateParameter(valid_597088, JString, required = false,
                                 default = nil)
  if valid_597088 != nil:
    section.add "X-Amz-Content-Sha256", valid_597088
  var valid_597089 = header.getOrDefault("X-Amz-Algorithm")
  valid_597089 = validateParameter(valid_597089, JString, required = false,
                                 default = nil)
  if valid_597089 != nil:
    section.add "X-Amz-Algorithm", valid_597089
  var valid_597090 = header.getOrDefault("X-Amz-Signature")
  valid_597090 = validateParameter(valid_597090, JString, required = false,
                                 default = nil)
  if valid_597090 != nil:
    section.add "X-Amz-Signature", valid_597090
  var valid_597091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597091 = validateParameter(valid_597091, JString, required = false,
                                 default = nil)
  if valid_597091 != nil:
    section.add "X-Amz-SignedHeaders", valid_597091
  var valid_597092 = header.getOrDefault("X-Amz-Credential")
  valid_597092 = validateParameter(valid_597092, JString, required = false,
                                 default = nil)
  if valid_597092 != nil:
    section.add "X-Amz-Credential", valid_597092
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597093: Call_GetListTagsForResource_597079; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_597093.validator(path, query, header, formData, body)
  let scheme = call_597093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597093.url(scheme.get, call_597093.host, call_597093.base,
                         call_597093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597093, url, valid)

proc call*(call_597094: Call_GetListTagsForResource_597079; ResourceName: string;
          Filters: JsonNode = nil; Action: string = "ListTagsForResource";
          Version: string = "2014-10-31"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597095 = newJObject()
  if Filters != nil:
    query_597095.add "Filters", Filters
  add(query_597095, "ResourceName", newJString(ResourceName))
  add(query_597095, "Action", newJString(Action))
  add(query_597095, "Version", newJString(Version))
  result = call_597094.call(nil, query_597095, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_597079(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_597080, base: "/",
    url: url_GetListTagsForResource_597081, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCurrentDBClusterCapacity_597133 = ref object of OpenApiRestCall_593421
proc url_PostModifyCurrentDBClusterCapacity_597135(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCurrentDBClusterCapacity_597134(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597136 = query.getOrDefault("Action")
  valid_597136 = validateParameter(valid_597136, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_597136 != nil:
    section.add "Action", valid_597136
  var valid_597137 = query.getOrDefault("Version")
  valid_597137 = validateParameter(valid_597137, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597137 != nil:
    section.add "Version", valid_597137
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597138 = header.getOrDefault("X-Amz-Date")
  valid_597138 = validateParameter(valid_597138, JString, required = false,
                                 default = nil)
  if valid_597138 != nil:
    section.add "X-Amz-Date", valid_597138
  var valid_597139 = header.getOrDefault("X-Amz-Security-Token")
  valid_597139 = validateParameter(valid_597139, JString, required = false,
                                 default = nil)
  if valid_597139 != nil:
    section.add "X-Amz-Security-Token", valid_597139
  var valid_597140 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597140 = validateParameter(valid_597140, JString, required = false,
                                 default = nil)
  if valid_597140 != nil:
    section.add "X-Amz-Content-Sha256", valid_597140
  var valid_597141 = header.getOrDefault("X-Amz-Algorithm")
  valid_597141 = validateParameter(valid_597141, JString, required = false,
                                 default = nil)
  if valid_597141 != nil:
    section.add "X-Amz-Algorithm", valid_597141
  var valid_597142 = header.getOrDefault("X-Amz-Signature")
  valid_597142 = validateParameter(valid_597142, JString, required = false,
                                 default = nil)
  if valid_597142 != nil:
    section.add "X-Amz-Signature", valid_597142
  var valid_597143 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597143 = validateParameter(valid_597143, JString, required = false,
                                 default = nil)
  if valid_597143 != nil:
    section.add "X-Amz-SignedHeaders", valid_597143
  var valid_597144 = header.getOrDefault("X-Amz-Credential")
  valid_597144 = validateParameter(valid_597144, JString, required = false,
                                 default = nil)
  if valid_597144 != nil:
    section.add "X-Amz-Credential", valid_597144
  result.add "header", section
  ## parameters in `formData` object:
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  section = newJObject()
  var valid_597145 = formData.getOrDefault("TimeoutAction")
  valid_597145 = validateParameter(valid_597145, JString, required = false,
                                 default = nil)
  if valid_597145 != nil:
    section.add "TimeoutAction", valid_597145
  var valid_597146 = formData.getOrDefault("SecondsBeforeTimeout")
  valid_597146 = validateParameter(valid_597146, JInt, required = false, default = nil)
  if valid_597146 != nil:
    section.add "SecondsBeforeTimeout", valid_597146
  var valid_597147 = formData.getOrDefault("Capacity")
  valid_597147 = validateParameter(valid_597147, JInt, required = false, default = nil)
  if valid_597147 != nil:
    section.add "Capacity", valid_597147
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597148 = formData.getOrDefault("DBClusterIdentifier")
  valid_597148 = validateParameter(valid_597148, JString, required = true,
                                 default = nil)
  if valid_597148 != nil:
    section.add "DBClusterIdentifier", valid_597148
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597149: Call_PostModifyCurrentDBClusterCapacity_597133;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597149.validator(path, query, header, formData, body)
  let scheme = call_597149.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597149.url(scheme.get, call_597149.host, call_597149.base,
                         call_597149.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597149, url, valid)

proc call*(call_597150: Call_PostModifyCurrentDBClusterCapacity_597133;
          DBClusterIdentifier: string; TimeoutAction: string = "";
          SecondsBeforeTimeout: int = 0;
          Action: string = "ModifyCurrentDBClusterCapacity"; Capacity: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_597151 = newJObject()
  var formData_597152 = newJObject()
  add(formData_597152, "TimeoutAction", newJString(TimeoutAction))
  add(formData_597152, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_597151, "Action", newJString(Action))
  add(formData_597152, "Capacity", newJInt(Capacity))
  add(formData_597152, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597151, "Version", newJString(Version))
  result = call_597150.call(nil, query_597151, nil, formData_597152, nil)

var postModifyCurrentDBClusterCapacity* = Call_PostModifyCurrentDBClusterCapacity_597133(
    name: "postModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_PostModifyCurrentDBClusterCapacity_597134, base: "/",
    url: url_PostModifyCurrentDBClusterCapacity_597135,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCurrentDBClusterCapacity_597114 = ref object of OpenApiRestCall_593421
proc url_GetModifyCurrentDBClusterCapacity_597116(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCurrentDBClusterCapacity_597115(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   Action: JString (required)
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597117 = query.getOrDefault("SecondsBeforeTimeout")
  valid_597117 = validateParameter(valid_597117, JInt, required = false, default = nil)
  if valid_597117 != nil:
    section.add "SecondsBeforeTimeout", valid_597117
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597118 = query.getOrDefault("DBClusterIdentifier")
  valid_597118 = validateParameter(valid_597118, JString, required = true,
                                 default = nil)
  if valid_597118 != nil:
    section.add "DBClusterIdentifier", valid_597118
  var valid_597119 = query.getOrDefault("TimeoutAction")
  valid_597119 = validateParameter(valid_597119, JString, required = false,
                                 default = nil)
  if valid_597119 != nil:
    section.add "TimeoutAction", valid_597119
  var valid_597120 = query.getOrDefault("Action")
  valid_597120 = validateParameter(valid_597120, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_597120 != nil:
    section.add "Action", valid_597120
  var valid_597121 = query.getOrDefault("Capacity")
  valid_597121 = validateParameter(valid_597121, JInt, required = false, default = nil)
  if valid_597121 != nil:
    section.add "Capacity", valid_597121
  var valid_597122 = query.getOrDefault("Version")
  valid_597122 = validateParameter(valid_597122, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597122 != nil:
    section.add "Version", valid_597122
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597123 = header.getOrDefault("X-Amz-Date")
  valid_597123 = validateParameter(valid_597123, JString, required = false,
                                 default = nil)
  if valid_597123 != nil:
    section.add "X-Amz-Date", valid_597123
  var valid_597124 = header.getOrDefault("X-Amz-Security-Token")
  valid_597124 = validateParameter(valid_597124, JString, required = false,
                                 default = nil)
  if valid_597124 != nil:
    section.add "X-Amz-Security-Token", valid_597124
  var valid_597125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597125 = validateParameter(valid_597125, JString, required = false,
                                 default = nil)
  if valid_597125 != nil:
    section.add "X-Amz-Content-Sha256", valid_597125
  var valid_597126 = header.getOrDefault("X-Amz-Algorithm")
  valid_597126 = validateParameter(valid_597126, JString, required = false,
                                 default = nil)
  if valid_597126 != nil:
    section.add "X-Amz-Algorithm", valid_597126
  var valid_597127 = header.getOrDefault("X-Amz-Signature")
  valid_597127 = validateParameter(valid_597127, JString, required = false,
                                 default = nil)
  if valid_597127 != nil:
    section.add "X-Amz-Signature", valid_597127
  var valid_597128 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597128 = validateParameter(valid_597128, JString, required = false,
                                 default = nil)
  if valid_597128 != nil:
    section.add "X-Amz-SignedHeaders", valid_597128
  var valid_597129 = header.getOrDefault("X-Amz-Credential")
  valid_597129 = validateParameter(valid_597129, JString, required = false,
                                 default = nil)
  if valid_597129 != nil:
    section.add "X-Amz-Credential", valid_597129
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597130: Call_GetModifyCurrentDBClusterCapacity_597114;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597130.validator(path, query, header, formData, body)
  let scheme = call_597130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597130.url(scheme.get, call_597130.host, call_597130.base,
                         call_597130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597130, url, valid)

proc call*(call_597131: Call_GetModifyCurrentDBClusterCapacity_597114;
          DBClusterIdentifier: string; SecondsBeforeTimeout: int = 0;
          TimeoutAction: string = "";
          Action: string = "ModifyCurrentDBClusterCapacity"; Capacity: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   Action: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_597132 = newJObject()
  add(query_597132, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_597132, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597132, "TimeoutAction", newJString(TimeoutAction))
  add(query_597132, "Action", newJString(Action))
  add(query_597132, "Capacity", newJInt(Capacity))
  add(query_597132, "Version", newJString(Version))
  result = call_597131.call(nil, query_597132, nil, nil, nil)

var getModifyCurrentDBClusterCapacity* = Call_GetModifyCurrentDBClusterCapacity_597114(
    name: "getModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_GetModifyCurrentDBClusterCapacity_597115, base: "/",
    url: url_GetModifyCurrentDBClusterCapacity_597116,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_597194 = ref object of OpenApiRestCall_593421
proc url_PostModifyDBCluster_597196(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBCluster_597195(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597197 = query.getOrDefault("Action")
  valid_597197 = validateParameter(valid_597197, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_597197 != nil:
    section.add "Action", valid_597197
  var valid_597198 = query.getOrDefault("Version")
  valid_597198 = validateParameter(valid_597198, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597198 != nil:
    section.add "Version", valid_597198
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597199 = header.getOrDefault("X-Amz-Date")
  valid_597199 = validateParameter(valid_597199, JString, required = false,
                                 default = nil)
  if valid_597199 != nil:
    section.add "X-Amz-Date", valid_597199
  var valid_597200 = header.getOrDefault("X-Amz-Security-Token")
  valid_597200 = validateParameter(valid_597200, JString, required = false,
                                 default = nil)
  if valid_597200 != nil:
    section.add "X-Amz-Security-Token", valid_597200
  var valid_597201 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597201 = validateParameter(valid_597201, JString, required = false,
                                 default = nil)
  if valid_597201 != nil:
    section.add "X-Amz-Content-Sha256", valid_597201
  var valid_597202 = header.getOrDefault("X-Amz-Algorithm")
  valid_597202 = validateParameter(valid_597202, JString, required = false,
                                 default = nil)
  if valid_597202 != nil:
    section.add "X-Amz-Algorithm", valid_597202
  var valid_597203 = header.getOrDefault("X-Amz-Signature")
  valid_597203 = validateParameter(valid_597203, JString, required = false,
                                 default = nil)
  if valid_597203 != nil:
    section.add "X-Amz-Signature", valid_597203
  var valid_597204 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597204 = validateParameter(valid_597204, JString, required = false,
                                 default = nil)
  if valid_597204 != nil:
    section.add "X-Amz-SignedHeaders", valid_597204
  var valid_597205 = header.getOrDefault("X-Amz-Credential")
  valid_597205 = validateParameter(valid_597205, JString, required = false,
                                 default = nil)
  if valid_597205 != nil:
    section.add "X-Amz-Credential", valid_597205
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  section = newJObject()
  var valid_597206 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_597206 = validateParameter(valid_597206, JString, required = false,
                                 default = nil)
  if valid_597206 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_597206
  var valid_597207 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_597207 = validateParameter(valid_597207, JString, required = false,
                                 default = nil)
  if valid_597207 != nil:
    section.add "PreferredMaintenanceWindow", valid_597207
  var valid_597208 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_597208 = validateParameter(valid_597208, JString, required = false,
                                 default = nil)
  if valid_597208 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_597208
  var valid_597209 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_597209 = validateParameter(valid_597209, JArray, required = false,
                                 default = nil)
  if valid_597209 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_597209
  var valid_597210 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_597210 = validateParameter(valid_597210, JString, required = false,
                                 default = nil)
  if valid_597210 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_597210
  var valid_597211 = formData.getOrDefault("EnableHttpEndpoint")
  valid_597211 = validateParameter(valid_597211, JBool, required = false, default = nil)
  if valid_597211 != nil:
    section.add "EnableHttpEndpoint", valid_597211
  var valid_597212 = formData.getOrDefault("ApplyImmediately")
  valid_597212 = validateParameter(valid_597212, JBool, required = false, default = nil)
  if valid_597212 != nil:
    section.add "ApplyImmediately", valid_597212
  var valid_597213 = formData.getOrDefault("Port")
  valid_597213 = validateParameter(valid_597213, JInt, required = false, default = nil)
  if valid_597213 != nil:
    section.add "Port", valid_597213
  var valid_597214 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_597214 = validateParameter(valid_597214, JArray, required = false,
                                 default = nil)
  if valid_597214 != nil:
    section.add "VpcSecurityGroupIds", valid_597214
  var valid_597215 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_597215 = validateParameter(valid_597215, JBool, required = false, default = nil)
  if valid_597215 != nil:
    section.add "CopyTagsToSnapshot", valid_597215
  var valid_597216 = formData.getOrDefault("DBInstanceParameterGroupName")
  valid_597216 = validateParameter(valid_597216, JString, required = false,
                                 default = nil)
  if valid_597216 != nil:
    section.add "DBInstanceParameterGroupName", valid_597216
  var valid_597217 = formData.getOrDefault("OptionGroupName")
  valid_597217 = validateParameter(valid_597217, JString, required = false,
                                 default = nil)
  if valid_597217 != nil:
    section.add "OptionGroupName", valid_597217
  var valid_597218 = formData.getOrDefault("BackupRetentionPeriod")
  valid_597218 = validateParameter(valid_597218, JInt, required = false, default = nil)
  if valid_597218 != nil:
    section.add "BackupRetentionPeriod", valid_597218
  var valid_597219 = formData.getOrDefault("BacktrackWindow")
  valid_597219 = validateParameter(valid_597219, JInt, required = false, default = nil)
  if valid_597219 != nil:
    section.add "BacktrackWindow", valid_597219
  var valid_597220 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_597220 = validateParameter(valid_597220, JString, required = false,
                                 default = nil)
  if valid_597220 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_597220
  var valid_597221 = formData.getOrDefault("MasterUserPassword")
  valid_597221 = validateParameter(valid_597221, JString, required = false,
                                 default = nil)
  if valid_597221 != nil:
    section.add "MasterUserPassword", valid_597221
  var valid_597222 = formData.getOrDefault("DeletionProtection")
  valid_597222 = validateParameter(valid_597222, JBool, required = false, default = nil)
  if valid_597222 != nil:
    section.add "DeletionProtection", valid_597222
  var valid_597223 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_597223 = validateParameter(valid_597223, JString, required = false,
                                 default = nil)
  if valid_597223 != nil:
    section.add "NewDBClusterIdentifier", valid_597223
  var valid_597224 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_597224 = validateParameter(valid_597224, JArray, required = false,
                                 default = nil)
  if valid_597224 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_597224
  var valid_597225 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_597225 = validateParameter(valid_597225, JString, required = false,
                                 default = nil)
  if valid_597225 != nil:
    section.add "DBClusterParameterGroupName", valid_597225
  var valid_597226 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_597226 = validateParameter(valid_597226, JString, required = false,
                                 default = nil)
  if valid_597226 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_597226
  var valid_597227 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597227 = validateParameter(valid_597227, JBool, required = false, default = nil)
  if valid_597227 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597227
  var valid_597228 = formData.getOrDefault("PreferredBackupWindow")
  valid_597228 = validateParameter(valid_597228, JString, required = false,
                                 default = nil)
  if valid_597228 != nil:
    section.add "PreferredBackupWindow", valid_597228
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597229 = formData.getOrDefault("DBClusterIdentifier")
  valid_597229 = validateParameter(valid_597229, JString, required = true,
                                 default = nil)
  if valid_597229 != nil:
    section.add "DBClusterIdentifier", valid_597229
  var valid_597230 = formData.getOrDefault("EngineVersion")
  valid_597230 = validateParameter(valid_597230, JString, required = false,
                                 default = nil)
  if valid_597230 != nil:
    section.add "EngineVersion", valid_597230
  var valid_597231 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_597231 = validateParameter(valid_597231, JBool, required = false, default = nil)
  if valid_597231 != nil:
    section.add "AllowMajorVersionUpgrade", valid_597231
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597232: Call_PostModifyDBCluster_597194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597232.validator(path, query, header, formData, body)
  let scheme = call_597232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597232.url(scheme.get, call_597232.host, call_597232.base,
                         call_597232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597232, url, valid)

proc call*(call_597233: Call_PostModifyDBCluster_597194;
          DBClusterIdentifier: string;
          ScalingConfigurationTimeoutAction: string = "";
          PreferredMaintenanceWindow: string = "";
          ScalingConfigurationMaxCapacity: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ScalingConfigurationAutoPause: string = "";
          EnableHttpEndpoint: bool = false; ApplyImmediately: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          CopyTagsToSnapshot: bool = false;
          DBInstanceParameterGroupName: string = ""; OptionGroupName: string = "";
          BackupRetentionPeriod: int = 0; BacktrackWindow: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          MasterUserPassword: string = ""; DeletionProtection: bool = false;
          NewDBClusterIdentifier: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Action: string = "ModifyDBCluster";
          DBClusterParameterGroupName: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"; AllowMajorVersionUpgrade: bool = false): Recallable =
  ## postModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   Version: string (required)
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  var query_597234 = newJObject()
  var formData_597235 = newJObject()
  add(formData_597235, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_597235, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_597235, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_597235.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_597235, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_597235, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_597235, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_597235, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_597235.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_597235, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_597235, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(formData_597235, "OptionGroupName", newJString(OptionGroupName))
  add(formData_597235, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_597235, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_597235, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_597235, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_597235, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_597235, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_597235.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_597234, "Action", newJString(Action))
  add(formData_597235, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_597235, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_597235, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_597235, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_597235, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_597235, "EngineVersion", newJString(EngineVersion))
  add(query_597234, "Version", newJString(Version))
  add(formData_597235, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  result = call_597233.call(nil, query_597234, nil, formData_597235, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_597194(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_597195, base: "/",
    url: url_PostModifyDBCluster_597196, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_597153 = ref object of OpenApiRestCall_593421
proc url_GetModifyDBCluster_597155(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBCluster_597154(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   Action: JString (required)
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  section = newJObject()
  var valid_597156 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_597156 = validateParameter(valid_597156, JString, required = false,
                                 default = nil)
  if valid_597156 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_597156
  var valid_597157 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_597157 = validateParameter(valid_597157, JString, required = false,
                                 default = nil)
  if valid_597157 != nil:
    section.add "PreferredMaintenanceWindow", valid_597157
  var valid_597158 = query.getOrDefault("DBClusterParameterGroupName")
  valid_597158 = validateParameter(valid_597158, JString, required = false,
                                 default = nil)
  if valid_597158 != nil:
    section.add "DBClusterParameterGroupName", valid_597158
  var valid_597159 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597159 = validateParameter(valid_597159, JBool, required = false, default = nil)
  if valid_597159 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597159
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597160 = query.getOrDefault("DBClusterIdentifier")
  valid_597160 = validateParameter(valid_597160, JString, required = true,
                                 default = nil)
  if valid_597160 != nil:
    section.add "DBClusterIdentifier", valid_597160
  var valid_597161 = query.getOrDefault("OptionGroupName")
  valid_597161 = validateParameter(valid_597161, JString, required = false,
                                 default = nil)
  if valid_597161 != nil:
    section.add "OptionGroupName", valid_597161
  var valid_597162 = query.getOrDefault("MasterUserPassword")
  valid_597162 = validateParameter(valid_597162, JString, required = false,
                                 default = nil)
  if valid_597162 != nil:
    section.add "MasterUserPassword", valid_597162
  var valid_597163 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_597163 = validateParameter(valid_597163, JArray, required = false,
                                 default = nil)
  if valid_597163 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_597163
  var valid_597164 = query.getOrDefault("VpcSecurityGroupIds")
  valid_597164 = validateParameter(valid_597164, JArray, required = false,
                                 default = nil)
  if valid_597164 != nil:
    section.add "VpcSecurityGroupIds", valid_597164
  var valid_597165 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_597165 = validateParameter(valid_597165, JArray, required = false,
                                 default = nil)
  if valid_597165 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_597165
  var valid_597166 = query.getOrDefault("BackupRetentionPeriod")
  valid_597166 = validateParameter(valid_597166, JInt, required = false, default = nil)
  if valid_597166 != nil:
    section.add "BackupRetentionPeriod", valid_597166
  var valid_597167 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_597167 = validateParameter(valid_597167, JString, required = false,
                                 default = nil)
  if valid_597167 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_597167
  var valid_597168 = query.getOrDefault("NewDBClusterIdentifier")
  valid_597168 = validateParameter(valid_597168, JString, required = false,
                                 default = nil)
  if valid_597168 != nil:
    section.add "NewDBClusterIdentifier", valid_597168
  var valid_597169 = query.getOrDefault("CopyTagsToSnapshot")
  valid_597169 = validateParameter(valid_597169, JBool, required = false, default = nil)
  if valid_597169 != nil:
    section.add "CopyTagsToSnapshot", valid_597169
  var valid_597170 = query.getOrDefault("DeletionProtection")
  valid_597170 = validateParameter(valid_597170, JBool, required = false, default = nil)
  if valid_597170 != nil:
    section.add "DeletionProtection", valid_597170
  var valid_597171 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_597171 = validateParameter(valid_597171, JBool, required = false, default = nil)
  if valid_597171 != nil:
    section.add "AllowMajorVersionUpgrade", valid_597171
  var valid_597172 = query.getOrDefault("EnableHttpEndpoint")
  valid_597172 = validateParameter(valid_597172, JBool, required = false, default = nil)
  if valid_597172 != nil:
    section.add "EnableHttpEndpoint", valid_597172
  var valid_597173 = query.getOrDefault("Action")
  valid_597173 = validateParameter(valid_597173, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_597173 != nil:
    section.add "Action", valid_597173
  var valid_597174 = query.getOrDefault("BacktrackWindow")
  valid_597174 = validateParameter(valid_597174, JInt, required = false, default = nil)
  if valid_597174 != nil:
    section.add "BacktrackWindow", valid_597174
  var valid_597175 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_597175 = validateParameter(valid_597175, JString, required = false,
                                 default = nil)
  if valid_597175 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_597175
  var valid_597176 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_597176 = validateParameter(valid_597176, JString, required = false,
                                 default = nil)
  if valid_597176 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_597176
  var valid_597177 = query.getOrDefault("EngineVersion")
  valid_597177 = validateParameter(valid_597177, JString, required = false,
                                 default = nil)
  if valid_597177 != nil:
    section.add "EngineVersion", valid_597177
  var valid_597178 = query.getOrDefault("Port")
  valid_597178 = validateParameter(valid_597178, JInt, required = false, default = nil)
  if valid_597178 != nil:
    section.add "Port", valid_597178
  var valid_597179 = query.getOrDefault("PreferredBackupWindow")
  valid_597179 = validateParameter(valid_597179, JString, required = false,
                                 default = nil)
  if valid_597179 != nil:
    section.add "PreferredBackupWindow", valid_597179
  var valid_597180 = query.getOrDefault("Version")
  valid_597180 = validateParameter(valid_597180, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597180 != nil:
    section.add "Version", valid_597180
  var valid_597181 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_597181 = validateParameter(valid_597181, JString, required = false,
                                 default = nil)
  if valid_597181 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_597181
  var valid_597182 = query.getOrDefault("ApplyImmediately")
  valid_597182 = validateParameter(valid_597182, JBool, required = false, default = nil)
  if valid_597182 != nil:
    section.add "ApplyImmediately", valid_597182
  var valid_597183 = query.getOrDefault("DBInstanceParameterGroupName")
  valid_597183 = validateParameter(valid_597183, JString, required = false,
                                 default = nil)
  if valid_597183 != nil:
    section.add "DBInstanceParameterGroupName", valid_597183
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597184 = header.getOrDefault("X-Amz-Date")
  valid_597184 = validateParameter(valid_597184, JString, required = false,
                                 default = nil)
  if valid_597184 != nil:
    section.add "X-Amz-Date", valid_597184
  var valid_597185 = header.getOrDefault("X-Amz-Security-Token")
  valid_597185 = validateParameter(valid_597185, JString, required = false,
                                 default = nil)
  if valid_597185 != nil:
    section.add "X-Amz-Security-Token", valid_597185
  var valid_597186 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597186 = validateParameter(valid_597186, JString, required = false,
                                 default = nil)
  if valid_597186 != nil:
    section.add "X-Amz-Content-Sha256", valid_597186
  var valid_597187 = header.getOrDefault("X-Amz-Algorithm")
  valid_597187 = validateParameter(valid_597187, JString, required = false,
                                 default = nil)
  if valid_597187 != nil:
    section.add "X-Amz-Algorithm", valid_597187
  var valid_597188 = header.getOrDefault("X-Amz-Signature")
  valid_597188 = validateParameter(valid_597188, JString, required = false,
                                 default = nil)
  if valid_597188 != nil:
    section.add "X-Amz-Signature", valid_597188
  var valid_597189 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597189 = validateParameter(valid_597189, JString, required = false,
                                 default = nil)
  if valid_597189 != nil:
    section.add "X-Amz-SignedHeaders", valid_597189
  var valid_597190 = header.getOrDefault("X-Amz-Credential")
  valid_597190 = validateParameter(valid_597190, JString, required = false,
                                 default = nil)
  if valid_597190 != nil:
    section.add "X-Amz-Credential", valid_597190
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597191: Call_GetModifyDBCluster_597153; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597191.validator(path, query, header, formData, body)
  let scheme = call_597191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597191.url(scheme.get, call_597191.host, call_597191.base,
                         call_597191.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597191, url, valid)

proc call*(call_597192: Call_GetModifyDBCluster_597153;
          DBClusterIdentifier: string;
          ScalingConfigurationMinCapacity: string = "";
          PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0;
          ScalingConfigurationAutoPause: string = "";
          NewDBClusterIdentifier: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; AllowMajorVersionUpgrade: bool = false;
          EnableHttpEndpoint: bool = false; Action: string = "ModifyDBCluster";
          BacktrackWindow: int = 0;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationMaxCapacity: string = ""; EngineVersion: string = "";
          Port: int = 0; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31";
          ScalingConfigurationTimeoutAction: string = "";
          ApplyImmediately: bool = false; DBInstanceParameterGroupName: string = ""): Recallable =
  ## getModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   Action: string (required)
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  var query_597193 = newJObject()
  add(query_597193, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_597193, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_597193, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_597193, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_597193, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597193, "OptionGroupName", newJString(OptionGroupName))
  add(query_597193, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_597193.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_597193.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_597193.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_597193, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_597193, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_597193, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_597193, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_597193, "DeletionProtection", newJBool(DeletionProtection))
  add(query_597193, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_597193, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_597193, "Action", newJString(Action))
  add(query_597193, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_597193, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_597193, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_597193, "EngineVersion", newJString(EngineVersion))
  add(query_597193, "Port", newJInt(Port))
  add(query_597193, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_597193, "Version", newJString(Version))
  add(query_597193, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_597193, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_597193, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  result = call_597192.call(nil, query_597193, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_597153(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_597154,
    base: "/", url: url_GetModifyDBCluster_597155,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterEndpoint_597255 = ref object of OpenApiRestCall_593421
proc url_PostModifyDBClusterEndpoint_597257(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterEndpoint_597256(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597258 = query.getOrDefault("Action")
  valid_597258 = validateParameter(valid_597258, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_597258 != nil:
    section.add "Action", valid_597258
  var valid_597259 = query.getOrDefault("Version")
  valid_597259 = validateParameter(valid_597259, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597259 != nil:
    section.add "Version", valid_597259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597260 = header.getOrDefault("X-Amz-Date")
  valid_597260 = validateParameter(valid_597260, JString, required = false,
                                 default = nil)
  if valid_597260 != nil:
    section.add "X-Amz-Date", valid_597260
  var valid_597261 = header.getOrDefault("X-Amz-Security-Token")
  valid_597261 = validateParameter(valid_597261, JString, required = false,
                                 default = nil)
  if valid_597261 != nil:
    section.add "X-Amz-Security-Token", valid_597261
  var valid_597262 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597262 = validateParameter(valid_597262, JString, required = false,
                                 default = nil)
  if valid_597262 != nil:
    section.add "X-Amz-Content-Sha256", valid_597262
  var valid_597263 = header.getOrDefault("X-Amz-Algorithm")
  valid_597263 = validateParameter(valid_597263, JString, required = false,
                                 default = nil)
  if valid_597263 != nil:
    section.add "X-Amz-Algorithm", valid_597263
  var valid_597264 = header.getOrDefault("X-Amz-Signature")
  valid_597264 = validateParameter(valid_597264, JString, required = false,
                                 default = nil)
  if valid_597264 != nil:
    section.add "X-Amz-Signature", valid_597264
  var valid_597265 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597265 = validateParameter(valid_597265, JString, required = false,
                                 default = nil)
  if valid_597265 != nil:
    section.add "X-Amz-SignedHeaders", valid_597265
  var valid_597266 = header.getOrDefault("X-Amz-Credential")
  valid_597266 = validateParameter(valid_597266, JString, required = false,
                                 default = nil)
  if valid_597266 != nil:
    section.add "X-Amz-Credential", valid_597266
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  section = newJObject()
  var valid_597267 = formData.getOrDefault("ExcludedMembers")
  valid_597267 = validateParameter(valid_597267, JArray, required = false,
                                 default = nil)
  if valid_597267 != nil:
    section.add "ExcludedMembers", valid_597267
  var valid_597268 = formData.getOrDefault("EndpointType")
  valid_597268 = validateParameter(valid_597268, JString, required = false,
                                 default = nil)
  if valid_597268 != nil:
    section.add "EndpointType", valid_597268
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_597269 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_597269 = validateParameter(valid_597269, JString, required = true,
                                 default = nil)
  if valid_597269 != nil:
    section.add "DBClusterEndpointIdentifier", valid_597269
  var valid_597270 = formData.getOrDefault("StaticMembers")
  valid_597270 = validateParameter(valid_597270, JArray, required = false,
                                 default = nil)
  if valid_597270 != nil:
    section.add "StaticMembers", valid_597270
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597271: Call_PostModifyDBClusterEndpoint_597255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597271.validator(path, query, header, formData, body)
  let scheme = call_597271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597271.url(scheme.get, call_597271.host, call_597271.base,
                         call_597271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597271, url, valid)

proc call*(call_597272: Call_PostModifyDBClusterEndpoint_597255;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          EndpointType: string = ""; Action: string = "ModifyDBClusterEndpoint";
          StaticMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Version: string (required)
  var query_597273 = newJObject()
  var formData_597274 = newJObject()
  if ExcludedMembers != nil:
    formData_597274.add "ExcludedMembers", ExcludedMembers
  add(formData_597274, "EndpointType", newJString(EndpointType))
  add(query_597273, "Action", newJString(Action))
  add(formData_597274, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_597274.add "StaticMembers", StaticMembers
  add(query_597273, "Version", newJString(Version))
  result = call_597272.call(nil, query_597273, nil, formData_597274, nil)

var postModifyDBClusterEndpoint* = Call_PostModifyDBClusterEndpoint_597255(
    name: "postModifyDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_PostModifyDBClusterEndpoint_597256, base: "/",
    url: url_PostModifyDBClusterEndpoint_597257,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterEndpoint_597236 = ref object of OpenApiRestCall_593421
proc url_GetModifyDBClusterEndpoint_597238(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterEndpoint_597237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: JString (required)
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: JString (required)
  section = newJObject()
  var valid_597239 = query.getOrDefault("EndpointType")
  valid_597239 = validateParameter(valid_597239, JString, required = false,
                                 default = nil)
  if valid_597239 != nil:
    section.add "EndpointType", valid_597239
  var valid_597240 = query.getOrDefault("StaticMembers")
  valid_597240 = validateParameter(valid_597240, JArray, required = false,
                                 default = nil)
  if valid_597240 != nil:
    section.add "StaticMembers", valid_597240
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597241 = query.getOrDefault("Action")
  valid_597241 = validateParameter(valid_597241, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_597241 != nil:
    section.add "Action", valid_597241
  var valid_597242 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_597242 = validateParameter(valid_597242, JString, required = true,
                                 default = nil)
  if valid_597242 != nil:
    section.add "DBClusterEndpointIdentifier", valid_597242
  var valid_597243 = query.getOrDefault("ExcludedMembers")
  valid_597243 = validateParameter(valid_597243, JArray, required = false,
                                 default = nil)
  if valid_597243 != nil:
    section.add "ExcludedMembers", valid_597243
  var valid_597244 = query.getOrDefault("Version")
  valid_597244 = validateParameter(valid_597244, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597244 != nil:
    section.add "Version", valid_597244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597245 = header.getOrDefault("X-Amz-Date")
  valid_597245 = validateParameter(valid_597245, JString, required = false,
                                 default = nil)
  if valid_597245 != nil:
    section.add "X-Amz-Date", valid_597245
  var valid_597246 = header.getOrDefault("X-Amz-Security-Token")
  valid_597246 = validateParameter(valid_597246, JString, required = false,
                                 default = nil)
  if valid_597246 != nil:
    section.add "X-Amz-Security-Token", valid_597246
  var valid_597247 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597247 = validateParameter(valid_597247, JString, required = false,
                                 default = nil)
  if valid_597247 != nil:
    section.add "X-Amz-Content-Sha256", valid_597247
  var valid_597248 = header.getOrDefault("X-Amz-Algorithm")
  valid_597248 = validateParameter(valid_597248, JString, required = false,
                                 default = nil)
  if valid_597248 != nil:
    section.add "X-Amz-Algorithm", valid_597248
  var valid_597249 = header.getOrDefault("X-Amz-Signature")
  valid_597249 = validateParameter(valid_597249, JString, required = false,
                                 default = nil)
  if valid_597249 != nil:
    section.add "X-Amz-Signature", valid_597249
  var valid_597250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597250 = validateParameter(valid_597250, JString, required = false,
                                 default = nil)
  if valid_597250 != nil:
    section.add "X-Amz-SignedHeaders", valid_597250
  var valid_597251 = header.getOrDefault("X-Amz-Credential")
  valid_597251 = validateParameter(valid_597251, JString, required = false,
                                 default = nil)
  if valid_597251 != nil:
    section.add "X-Amz-Credential", valid_597251
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597252: Call_GetModifyDBClusterEndpoint_597236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597252.validator(path, query, header, formData, body)
  let scheme = call_597252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597252.url(scheme.get, call_597252.host, call_597252.base,
                         call_597252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597252, url, valid)

proc call*(call_597253: Call_GetModifyDBClusterEndpoint_597236;
          DBClusterEndpointIdentifier: string; EndpointType: string = "";
          StaticMembers: JsonNode = nil; Action: string = "ModifyDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_597254 = newJObject()
  add(query_597254, "EndpointType", newJString(EndpointType))
  if StaticMembers != nil:
    query_597254.add "StaticMembers", StaticMembers
  add(query_597254, "Action", newJString(Action))
  add(query_597254, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if ExcludedMembers != nil:
    query_597254.add "ExcludedMembers", ExcludedMembers
  add(query_597254, "Version", newJString(Version))
  result = call_597253.call(nil, query_597254, nil, nil, nil)

var getModifyDBClusterEndpoint* = Call_GetModifyDBClusterEndpoint_597236(
    name: "getModifyDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_GetModifyDBClusterEndpoint_597237, base: "/",
    url: url_GetModifyDBClusterEndpoint_597238,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_597292 = ref object of OpenApiRestCall_593421
proc url_PostModifyDBClusterParameterGroup_597294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_597293(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597295 = query.getOrDefault("Action")
  valid_597295 = validateParameter(valid_597295, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_597295 != nil:
    section.add "Action", valid_597295
  var valid_597296 = query.getOrDefault("Version")
  valid_597296 = validateParameter(valid_597296, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597296 != nil:
    section.add "Version", valid_597296
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597297 = header.getOrDefault("X-Amz-Date")
  valid_597297 = validateParameter(valid_597297, JString, required = false,
                                 default = nil)
  if valid_597297 != nil:
    section.add "X-Amz-Date", valid_597297
  var valid_597298 = header.getOrDefault("X-Amz-Security-Token")
  valid_597298 = validateParameter(valid_597298, JString, required = false,
                                 default = nil)
  if valid_597298 != nil:
    section.add "X-Amz-Security-Token", valid_597298
  var valid_597299 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597299 = validateParameter(valid_597299, JString, required = false,
                                 default = nil)
  if valid_597299 != nil:
    section.add "X-Amz-Content-Sha256", valid_597299
  var valid_597300 = header.getOrDefault("X-Amz-Algorithm")
  valid_597300 = validateParameter(valid_597300, JString, required = false,
                                 default = nil)
  if valid_597300 != nil:
    section.add "X-Amz-Algorithm", valid_597300
  var valid_597301 = header.getOrDefault("X-Amz-Signature")
  valid_597301 = validateParameter(valid_597301, JString, required = false,
                                 default = nil)
  if valid_597301 != nil:
    section.add "X-Amz-Signature", valid_597301
  var valid_597302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597302 = validateParameter(valid_597302, JString, required = false,
                                 default = nil)
  if valid_597302 != nil:
    section.add "X-Amz-SignedHeaders", valid_597302
  var valid_597303 = header.getOrDefault("X-Amz-Credential")
  valid_597303 = validateParameter(valid_597303, JString, required = false,
                                 default = nil)
  if valid_597303 != nil:
    section.add "X-Amz-Credential", valid_597303
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_597304 = formData.getOrDefault("Parameters")
  valid_597304 = validateParameter(valid_597304, JArray, required = true, default = nil)
  if valid_597304 != nil:
    section.add "Parameters", valid_597304
  var valid_597305 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_597305 = validateParameter(valid_597305, JString, required = true,
                                 default = nil)
  if valid_597305 != nil:
    section.add "DBClusterParameterGroupName", valid_597305
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597306: Call_PostModifyDBClusterParameterGroup_597292;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597306.validator(path, query, header, formData, body)
  let scheme = call_597306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597306.url(scheme.get, call_597306.host, call_597306.base,
                         call_597306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597306, url, valid)

proc call*(call_597307: Call_PostModifyDBClusterParameterGroup_597292;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_597308 = newJObject()
  var formData_597309 = newJObject()
  if Parameters != nil:
    formData_597309.add "Parameters", Parameters
  add(query_597308, "Action", newJString(Action))
  add(formData_597309, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_597308, "Version", newJString(Version))
  result = call_597307.call(nil, query_597308, nil, formData_597309, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_597292(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_597293, base: "/",
    url: url_PostModifyDBClusterParameterGroup_597294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_597275 = ref object of OpenApiRestCall_593421
proc url_GetModifyDBClusterParameterGroup_597277(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_597276(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_597278 = query.getOrDefault("DBClusterParameterGroupName")
  valid_597278 = validateParameter(valid_597278, JString, required = true,
                                 default = nil)
  if valid_597278 != nil:
    section.add "DBClusterParameterGroupName", valid_597278
  var valid_597279 = query.getOrDefault("Parameters")
  valid_597279 = validateParameter(valid_597279, JArray, required = true, default = nil)
  if valid_597279 != nil:
    section.add "Parameters", valid_597279
  var valid_597280 = query.getOrDefault("Action")
  valid_597280 = validateParameter(valid_597280, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_597280 != nil:
    section.add "Action", valid_597280
  var valid_597281 = query.getOrDefault("Version")
  valid_597281 = validateParameter(valid_597281, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597281 != nil:
    section.add "Version", valid_597281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597282 = header.getOrDefault("X-Amz-Date")
  valid_597282 = validateParameter(valid_597282, JString, required = false,
                                 default = nil)
  if valid_597282 != nil:
    section.add "X-Amz-Date", valid_597282
  var valid_597283 = header.getOrDefault("X-Amz-Security-Token")
  valid_597283 = validateParameter(valid_597283, JString, required = false,
                                 default = nil)
  if valid_597283 != nil:
    section.add "X-Amz-Security-Token", valid_597283
  var valid_597284 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597284 = validateParameter(valid_597284, JString, required = false,
                                 default = nil)
  if valid_597284 != nil:
    section.add "X-Amz-Content-Sha256", valid_597284
  var valid_597285 = header.getOrDefault("X-Amz-Algorithm")
  valid_597285 = validateParameter(valid_597285, JString, required = false,
                                 default = nil)
  if valid_597285 != nil:
    section.add "X-Amz-Algorithm", valid_597285
  var valid_597286 = header.getOrDefault("X-Amz-Signature")
  valid_597286 = validateParameter(valid_597286, JString, required = false,
                                 default = nil)
  if valid_597286 != nil:
    section.add "X-Amz-Signature", valid_597286
  var valid_597287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597287 = validateParameter(valid_597287, JString, required = false,
                                 default = nil)
  if valid_597287 != nil:
    section.add "X-Amz-SignedHeaders", valid_597287
  var valid_597288 = header.getOrDefault("X-Amz-Credential")
  valid_597288 = validateParameter(valid_597288, JString, required = false,
                                 default = nil)
  if valid_597288 != nil:
    section.add "X-Amz-Credential", valid_597288
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597289: Call_GetModifyDBClusterParameterGroup_597275;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597289.validator(path, query, header, formData, body)
  let scheme = call_597289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597289.url(scheme.get, call_597289.host, call_597289.base,
                         call_597289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597289, url, valid)

proc call*(call_597290: Call_GetModifyDBClusterParameterGroup_597275;
          DBClusterParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597291 = newJObject()
  add(query_597291, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_597291.add "Parameters", Parameters
  add(query_597291, "Action", newJString(Action))
  add(query_597291, "Version", newJString(Version))
  result = call_597290.call(nil, query_597291, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_597275(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_597276, base: "/",
    url: url_GetModifyDBClusterParameterGroup_597277,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_597329 = ref object of OpenApiRestCall_593421
proc url_PostModifyDBClusterSnapshotAttribute_597331(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_597330(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597332 = query.getOrDefault("Action")
  valid_597332 = validateParameter(valid_597332, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_597332 != nil:
    section.add "Action", valid_597332
  var valid_597333 = query.getOrDefault("Version")
  valid_597333 = validateParameter(valid_597333, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597333 != nil:
    section.add "Version", valid_597333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597334 = header.getOrDefault("X-Amz-Date")
  valid_597334 = validateParameter(valid_597334, JString, required = false,
                                 default = nil)
  if valid_597334 != nil:
    section.add "X-Amz-Date", valid_597334
  var valid_597335 = header.getOrDefault("X-Amz-Security-Token")
  valid_597335 = validateParameter(valid_597335, JString, required = false,
                                 default = nil)
  if valid_597335 != nil:
    section.add "X-Amz-Security-Token", valid_597335
  var valid_597336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597336 = validateParameter(valid_597336, JString, required = false,
                                 default = nil)
  if valid_597336 != nil:
    section.add "X-Amz-Content-Sha256", valid_597336
  var valid_597337 = header.getOrDefault("X-Amz-Algorithm")
  valid_597337 = validateParameter(valid_597337, JString, required = false,
                                 default = nil)
  if valid_597337 != nil:
    section.add "X-Amz-Algorithm", valid_597337
  var valid_597338 = header.getOrDefault("X-Amz-Signature")
  valid_597338 = validateParameter(valid_597338, JString, required = false,
                                 default = nil)
  if valid_597338 != nil:
    section.add "X-Amz-Signature", valid_597338
  var valid_597339 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597339 = validateParameter(valid_597339, JString, required = false,
                                 default = nil)
  if valid_597339 != nil:
    section.add "X-Amz-SignedHeaders", valid_597339
  var valid_597340 = header.getOrDefault("X-Amz-Credential")
  valid_597340 = validateParameter(valid_597340, JString, required = false,
                                 default = nil)
  if valid_597340 != nil:
    section.add "X-Amz-Credential", valid_597340
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_597341 = formData.getOrDefault("AttributeName")
  valid_597341 = validateParameter(valid_597341, JString, required = true,
                                 default = nil)
  if valid_597341 != nil:
    section.add "AttributeName", valid_597341
  var valid_597342 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_597342 = validateParameter(valid_597342, JString, required = true,
                                 default = nil)
  if valid_597342 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_597342
  var valid_597343 = formData.getOrDefault("ValuesToRemove")
  valid_597343 = validateParameter(valid_597343, JArray, required = false,
                                 default = nil)
  if valid_597343 != nil:
    section.add "ValuesToRemove", valid_597343
  var valid_597344 = formData.getOrDefault("ValuesToAdd")
  valid_597344 = validateParameter(valid_597344, JArray, required = false,
                                 default = nil)
  if valid_597344 != nil:
    section.add "ValuesToAdd", valid_597344
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597345: Call_PostModifyDBClusterSnapshotAttribute_597329;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597345.validator(path, query, header, formData, body)
  let scheme = call_597345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597345.url(scheme.get, call_597345.host, call_597345.base,
                         call_597345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597345, url, valid)

proc call*(call_597346: Call_PostModifyDBClusterSnapshotAttribute_597329;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_597347 = newJObject()
  var formData_597348 = newJObject()
  add(formData_597348, "AttributeName", newJString(AttributeName))
  add(formData_597348, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_597347, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_597348.add "ValuesToRemove", ValuesToRemove
  if ValuesToAdd != nil:
    formData_597348.add "ValuesToAdd", ValuesToAdd
  add(query_597347, "Version", newJString(Version))
  result = call_597346.call(nil, query_597347, nil, formData_597348, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_597329(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_597330, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_597331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_597310 = ref object of OpenApiRestCall_593421
proc url_GetModifyDBClusterSnapshotAttribute_597312(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_597311(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: JString (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AttributeName` field"
  var valid_597313 = query.getOrDefault("AttributeName")
  valid_597313 = validateParameter(valid_597313, JString, required = true,
                                 default = nil)
  if valid_597313 != nil:
    section.add "AttributeName", valid_597313
  var valid_597314 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_597314 = validateParameter(valid_597314, JString, required = true,
                                 default = nil)
  if valid_597314 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_597314
  var valid_597315 = query.getOrDefault("ValuesToAdd")
  valid_597315 = validateParameter(valid_597315, JArray, required = false,
                                 default = nil)
  if valid_597315 != nil:
    section.add "ValuesToAdd", valid_597315
  var valid_597316 = query.getOrDefault("Action")
  valid_597316 = validateParameter(valid_597316, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_597316 != nil:
    section.add "Action", valid_597316
  var valid_597317 = query.getOrDefault("ValuesToRemove")
  valid_597317 = validateParameter(valid_597317, JArray, required = false,
                                 default = nil)
  if valid_597317 != nil:
    section.add "ValuesToRemove", valid_597317
  var valid_597318 = query.getOrDefault("Version")
  valid_597318 = validateParameter(valid_597318, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597318 != nil:
    section.add "Version", valid_597318
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597319 = header.getOrDefault("X-Amz-Date")
  valid_597319 = validateParameter(valid_597319, JString, required = false,
                                 default = nil)
  if valid_597319 != nil:
    section.add "X-Amz-Date", valid_597319
  var valid_597320 = header.getOrDefault("X-Amz-Security-Token")
  valid_597320 = validateParameter(valid_597320, JString, required = false,
                                 default = nil)
  if valid_597320 != nil:
    section.add "X-Amz-Security-Token", valid_597320
  var valid_597321 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597321 = validateParameter(valid_597321, JString, required = false,
                                 default = nil)
  if valid_597321 != nil:
    section.add "X-Amz-Content-Sha256", valid_597321
  var valid_597322 = header.getOrDefault("X-Amz-Algorithm")
  valid_597322 = validateParameter(valid_597322, JString, required = false,
                                 default = nil)
  if valid_597322 != nil:
    section.add "X-Amz-Algorithm", valid_597322
  var valid_597323 = header.getOrDefault("X-Amz-Signature")
  valid_597323 = validateParameter(valid_597323, JString, required = false,
                                 default = nil)
  if valid_597323 != nil:
    section.add "X-Amz-Signature", valid_597323
  var valid_597324 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597324 = validateParameter(valid_597324, JString, required = false,
                                 default = nil)
  if valid_597324 != nil:
    section.add "X-Amz-SignedHeaders", valid_597324
  var valid_597325 = header.getOrDefault("X-Amz-Credential")
  valid_597325 = validateParameter(valid_597325, JString, required = false,
                                 default = nil)
  if valid_597325 != nil:
    section.add "X-Amz-Credential", valid_597325
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597326: Call_GetModifyDBClusterSnapshotAttribute_597310;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597326.validator(path, query, header, formData, body)
  let scheme = call_597326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597326.url(scheme.get, call_597326.host, call_597326.base,
                         call_597326.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597326, url, valid)

proc call*(call_597327: Call_GetModifyDBClusterSnapshotAttribute_597310;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_597328 = newJObject()
  add(query_597328, "AttributeName", newJString(AttributeName))
  add(query_597328, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if ValuesToAdd != nil:
    query_597328.add "ValuesToAdd", ValuesToAdd
  add(query_597328, "Action", newJString(Action))
  if ValuesToRemove != nil:
    query_597328.add "ValuesToRemove", ValuesToRemove
  add(query_597328, "Version", newJString(Version))
  result = call_597327.call(nil, query_597328, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_597310(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_597311, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_597312,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_597406 = ref object of OpenApiRestCall_593421
proc url_PostModifyDBInstance_597408(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBInstance_597407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597409 = query.getOrDefault("Action")
  valid_597409 = validateParameter(valid_597409, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_597409 != nil:
    section.add "Action", valid_597409
  var valid_597410 = query.getOrDefault("Version")
  valid_597410 = validateParameter(valid_597410, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597410 != nil:
    section.add "Version", valid_597410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597411 = header.getOrDefault("X-Amz-Date")
  valid_597411 = validateParameter(valid_597411, JString, required = false,
                                 default = nil)
  if valid_597411 != nil:
    section.add "X-Amz-Date", valid_597411
  var valid_597412 = header.getOrDefault("X-Amz-Security-Token")
  valid_597412 = validateParameter(valid_597412, JString, required = false,
                                 default = nil)
  if valid_597412 != nil:
    section.add "X-Amz-Security-Token", valid_597412
  var valid_597413 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597413 = validateParameter(valid_597413, JString, required = false,
                                 default = nil)
  if valid_597413 != nil:
    section.add "X-Amz-Content-Sha256", valid_597413
  var valid_597414 = header.getOrDefault("X-Amz-Algorithm")
  valid_597414 = validateParameter(valid_597414, JString, required = false,
                                 default = nil)
  if valid_597414 != nil:
    section.add "X-Amz-Algorithm", valid_597414
  var valid_597415 = header.getOrDefault("X-Amz-Signature")
  valid_597415 = validateParameter(valid_597415, JString, required = false,
                                 default = nil)
  if valid_597415 != nil:
    section.add "X-Amz-Signature", valid_597415
  var valid_597416 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597416 = validateParameter(valid_597416, JString, required = false,
                                 default = nil)
  if valid_597416 != nil:
    section.add "X-Amz-SignedHeaders", valid_597416
  var valid_597417 = header.getOrDefault("X-Amz-Credential")
  valid_597417 = validateParameter(valid_597417, JString, required = false,
                                 default = nil)
  if valid_597417 != nil:
    section.add "X-Amz-Credential", valid_597417
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Domain: JString
  ##         : The Active Directory Domain to move the instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. 
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  section = newJObject()
  var valid_597418 = formData.getOrDefault("ProcessorFeatures")
  valid_597418 = validateParameter(valid_597418, JArray, required = false,
                                 default = nil)
  if valid_597418 != nil:
    section.add "ProcessorFeatures", valid_597418
  var valid_597419 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_597419 = validateParameter(valid_597419, JArray, required = false,
                                 default = nil)
  if valid_597419 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_597419
  var valid_597420 = formData.getOrDefault("ApplyImmediately")
  valid_597420 = validateParameter(valid_597420, JBool, required = false, default = nil)
  if valid_597420 != nil:
    section.add "ApplyImmediately", valid_597420
  var valid_597421 = formData.getOrDefault("EnablePerformanceInsights")
  valid_597421 = validateParameter(valid_597421, JBool, required = false, default = nil)
  if valid_597421 != nil:
    section.add "EnablePerformanceInsights", valid_597421
  var valid_597422 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_597422 = validateParameter(valid_597422, JArray, required = false,
                                 default = nil)
  if valid_597422 != nil:
    section.add "VpcSecurityGroupIds", valid_597422
  var valid_597423 = formData.getOrDefault("Iops")
  valid_597423 = validateParameter(valid_597423, JInt, required = false, default = nil)
  if valid_597423 != nil:
    section.add "Iops", valid_597423
  var valid_597424 = formData.getOrDefault("BackupRetentionPeriod")
  valid_597424 = validateParameter(valid_597424, JInt, required = false, default = nil)
  if valid_597424 != nil:
    section.add "BackupRetentionPeriod", valid_597424
  var valid_597425 = formData.getOrDefault("MaxAllocatedStorage")
  valid_597425 = validateParameter(valid_597425, JInt, required = false, default = nil)
  if valid_597425 != nil:
    section.add "MaxAllocatedStorage", valid_597425
  var valid_597426 = formData.getOrDefault("TdeCredentialArn")
  valid_597426 = validateParameter(valid_597426, JString, required = false,
                                 default = nil)
  if valid_597426 != nil:
    section.add "TdeCredentialArn", valid_597426
  var valid_597427 = formData.getOrDefault("DeletionProtection")
  valid_597427 = validateParameter(valid_597427, JBool, required = false, default = nil)
  if valid_597427 != nil:
    section.add "DeletionProtection", valid_597427
  var valid_597428 = formData.getOrDefault("DBSubnetGroupName")
  valid_597428 = validateParameter(valid_597428, JString, required = false,
                                 default = nil)
  if valid_597428 != nil:
    section.add "DBSubnetGroupName", valid_597428
  var valid_597429 = formData.getOrDefault("MultiAZ")
  valid_597429 = validateParameter(valid_597429, JBool, required = false, default = nil)
  if valid_597429 != nil:
    section.add "MultiAZ", valid_597429
  var valid_597430 = formData.getOrDefault("DBPortNumber")
  valid_597430 = validateParameter(valid_597430, JInt, required = false, default = nil)
  if valid_597430 != nil:
    section.add "DBPortNumber", valid_597430
  var valid_597431 = formData.getOrDefault("PubliclyAccessible")
  valid_597431 = validateParameter(valid_597431, JBool, required = false, default = nil)
  if valid_597431 != nil:
    section.add "PubliclyAccessible", valid_597431
  var valid_597432 = formData.getOrDefault("StorageType")
  valid_597432 = validateParameter(valid_597432, JString, required = false,
                                 default = nil)
  if valid_597432 != nil:
    section.add "StorageType", valid_597432
  var valid_597433 = formData.getOrDefault("Domain")
  valid_597433 = validateParameter(valid_597433, JString, required = false,
                                 default = nil)
  if valid_597433 != nil:
    section.add "Domain", valid_597433
  var valid_597434 = formData.getOrDefault("LicenseModel")
  valid_597434 = validateParameter(valid_597434, JString, required = false,
                                 default = nil)
  if valid_597434 != nil:
    section.add "LicenseModel", valid_597434
  var valid_597435 = formData.getOrDefault("MonitoringRoleArn")
  valid_597435 = validateParameter(valid_597435, JString, required = false,
                                 default = nil)
  if valid_597435 != nil:
    section.add "MonitoringRoleArn", valid_597435
  var valid_597436 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_597436 = validateParameter(valid_597436, JInt, required = false, default = nil)
  if valid_597436 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_597436
  var valid_597437 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_597437 = validateParameter(valid_597437, JBool, required = false, default = nil)
  if valid_597437 != nil:
    section.add "UseDefaultProcessorFeatures", valid_597437
  var valid_597438 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_597438 = validateParameter(valid_597438, JBool, required = false, default = nil)
  if valid_597438 != nil:
    section.add "AllowMajorVersionUpgrade", valid_597438
  var valid_597439 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_597439 = validateParameter(valid_597439, JString, required = false,
                                 default = nil)
  if valid_597439 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_597439
  var valid_597440 = formData.getOrDefault("DBSecurityGroups")
  valid_597440 = validateParameter(valid_597440, JArray, required = false,
                                 default = nil)
  if valid_597440 != nil:
    section.add "DBSecurityGroups", valid_597440
  var valid_597441 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_597441 = validateParameter(valid_597441, JBool, required = false, default = nil)
  if valid_597441 != nil:
    section.add "CopyTagsToSnapshot", valid_597441
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597442 = formData.getOrDefault("DBInstanceIdentifier")
  valid_597442 = validateParameter(valid_597442, JString, required = true,
                                 default = nil)
  if valid_597442 != nil:
    section.add "DBInstanceIdentifier", valid_597442
  var valid_597443 = formData.getOrDefault("OptionGroupName")
  valid_597443 = validateParameter(valid_597443, JString, required = false,
                                 default = nil)
  if valid_597443 != nil:
    section.add "OptionGroupName", valid_597443
  var valid_597444 = formData.getOrDefault("DBParameterGroupName")
  valid_597444 = validateParameter(valid_597444, JString, required = false,
                                 default = nil)
  if valid_597444 != nil:
    section.add "DBParameterGroupName", valid_597444
  var valid_597445 = formData.getOrDefault("CACertificateIdentifier")
  valid_597445 = validateParameter(valid_597445, JString, required = false,
                                 default = nil)
  if valid_597445 != nil:
    section.add "CACertificateIdentifier", valid_597445
  var valid_597446 = formData.getOrDefault("MasterUserPassword")
  valid_597446 = validateParameter(valid_597446, JString, required = false,
                                 default = nil)
  if valid_597446 != nil:
    section.add "MasterUserPassword", valid_597446
  var valid_597447 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_597447 = validateParameter(valid_597447, JString, required = false,
                                 default = nil)
  if valid_597447 != nil:
    section.add "NewDBInstanceIdentifier", valid_597447
  var valid_597448 = formData.getOrDefault("TdeCredentialPassword")
  valid_597448 = validateParameter(valid_597448, JString, required = false,
                                 default = nil)
  if valid_597448 != nil:
    section.add "TdeCredentialPassword", valid_597448
  var valid_597449 = formData.getOrDefault("MonitoringInterval")
  valid_597449 = validateParameter(valid_597449, JInt, required = false, default = nil)
  if valid_597449 != nil:
    section.add "MonitoringInterval", valid_597449
  var valid_597450 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_597450 = validateParameter(valid_597450, JArray, required = false,
                                 default = nil)
  if valid_597450 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_597450
  var valid_597451 = formData.getOrDefault("DomainIAMRoleName")
  valid_597451 = validateParameter(valid_597451, JString, required = false,
                                 default = nil)
  if valid_597451 != nil:
    section.add "DomainIAMRoleName", valid_597451
  var valid_597452 = formData.getOrDefault("AllocatedStorage")
  valid_597452 = validateParameter(valid_597452, JInt, required = false, default = nil)
  if valid_597452 != nil:
    section.add "AllocatedStorage", valid_597452
  var valid_597453 = formData.getOrDefault("PromotionTier")
  valid_597453 = validateParameter(valid_597453, JInt, required = false, default = nil)
  if valid_597453 != nil:
    section.add "PromotionTier", valid_597453
  var valid_597454 = formData.getOrDefault("DBInstanceClass")
  valid_597454 = validateParameter(valid_597454, JString, required = false,
                                 default = nil)
  if valid_597454 != nil:
    section.add "DBInstanceClass", valid_597454
  var valid_597455 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597455 = validateParameter(valid_597455, JBool, required = false, default = nil)
  if valid_597455 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597455
  var valid_597456 = formData.getOrDefault("PreferredBackupWindow")
  valid_597456 = validateParameter(valid_597456, JString, required = false,
                                 default = nil)
  if valid_597456 != nil:
    section.add "PreferredBackupWindow", valid_597456
  var valid_597457 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_597457 = validateParameter(valid_597457, JBool, required = false, default = nil)
  if valid_597457 != nil:
    section.add "AutoMinorVersionUpgrade", valid_597457
  var valid_597458 = formData.getOrDefault("EngineVersion")
  valid_597458 = validateParameter(valid_597458, JString, required = false,
                                 default = nil)
  if valid_597458 != nil:
    section.add "EngineVersion", valid_597458
  var valid_597459 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_597459 = validateParameter(valid_597459, JString, required = false,
                                 default = nil)
  if valid_597459 != nil:
    section.add "PreferredMaintenanceWindow", valid_597459
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597460: Call_PostModifyDBInstance_597406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_597460.validator(path, query, header, formData, body)
  let scheme = call_597460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597460.url(scheme.get, call_597460.host, call_597460.base,
                         call_597460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597460, url, valid)

proc call*(call_597461: Call_PostModifyDBInstance_597406;
          DBInstanceIdentifier: string; ProcessorFeatures: JsonNode = nil;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ApplyImmediately: bool = false; EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; MaxAllocatedStorage: int = 0;
          TdeCredentialArn: string = ""; DeletionProtection: bool = false;
          DBSubnetGroupName: string = ""; MultiAZ: bool = false; DBPortNumber: int = 0;
          PubliclyAccessible: bool = false; StorageType: string = "";
          Domain: string = ""; LicenseModel: string = "";
          MonitoringRoleArn: string = "";
          PerformanceInsightsRetentionPeriod: int = 0;
          UseDefaultProcessorFeatures: bool = false;
          AllowMajorVersionUpgrade: bool = false;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          CACertificateIdentifier: string = ""; MasterUserPassword: string = "";
          NewDBInstanceIdentifier: string = ""; TdeCredentialPassword: string = "";
          MonitoringInterval: int = 0;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          DomainIAMRoleName: string = ""; Action: string = "ModifyDBInstance";
          AllocatedStorage: int = 0; PromotionTier: int = 0;
          DBInstanceClass: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Domain: string
  ##         : The Active Directory Domain to move the instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. 
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  var query_597462 = newJObject()
  var formData_597463 = newJObject()
  if ProcessorFeatures != nil:
    formData_597463.add "ProcessorFeatures", ProcessorFeatures
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_597463.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_597463, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_597463, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  if VpcSecurityGroupIds != nil:
    formData_597463.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_597463, "Iops", newJInt(Iops))
  add(formData_597463, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_597463, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_597463, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_597463, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_597463, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_597463, "MultiAZ", newJBool(MultiAZ))
  add(formData_597463, "DBPortNumber", newJInt(DBPortNumber))
  add(formData_597463, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_597463, "StorageType", newJString(StorageType))
  add(formData_597463, "Domain", newJString(Domain))
  add(formData_597463, "LicenseModel", newJString(LicenseModel))
  add(formData_597463, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_597463, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_597463, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_597463, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_597463, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_597463.add "DBSecurityGroups", DBSecurityGroups
  add(formData_597463, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_597463, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_597463, "OptionGroupName", newJString(OptionGroupName))
  add(formData_597463, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_597463, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_597463, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_597463, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(formData_597463, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_597463, "MonitoringInterval", newJInt(MonitoringInterval))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_597463.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_597463, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_597462, "Action", newJString(Action))
  add(formData_597463, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_597463, "PromotionTier", newJInt(PromotionTier))
  add(formData_597463, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_597463, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_597463, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_597463, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_597463, "EngineVersion", newJString(EngineVersion))
  add(query_597462, "Version", newJString(Version))
  add(formData_597463, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_597461.call(nil, query_597462, nil, formData_597463, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_597406(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_597407, base: "/",
    url: url_PostModifyDBInstance_597408, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_597349 = ref object of OpenApiRestCall_593421
proc url_GetModifyDBInstance_597351(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBInstance_597350(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: JString
  ##         : The Active Directory Domain to move the instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. 
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   Action: JString (required)
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  section = newJObject()
  var valid_597352 = query.getOrDefault("MonitoringInterval")
  valid_597352 = validateParameter(valid_597352, JInt, required = false, default = nil)
  if valid_597352 != nil:
    section.add "MonitoringInterval", valid_597352
  var valid_597353 = query.getOrDefault("PromotionTier")
  valid_597353 = validateParameter(valid_597353, JInt, required = false, default = nil)
  if valid_597353 != nil:
    section.add "PromotionTier", valid_597353
  var valid_597354 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_597354 = validateParameter(valid_597354, JBool, required = false, default = nil)
  if valid_597354 != nil:
    section.add "UseDefaultProcessorFeatures", valid_597354
  var valid_597355 = query.getOrDefault("MaxAllocatedStorage")
  valid_597355 = validateParameter(valid_597355, JInt, required = false, default = nil)
  if valid_597355 != nil:
    section.add "MaxAllocatedStorage", valid_597355
  var valid_597356 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_597356 = validateParameter(valid_597356, JInt, required = false, default = nil)
  if valid_597356 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_597356
  var valid_597357 = query.getOrDefault("AllocatedStorage")
  valid_597357 = validateParameter(valid_597357, JInt, required = false, default = nil)
  if valid_597357 != nil:
    section.add "AllocatedStorage", valid_597357
  var valid_597358 = query.getOrDefault("StorageType")
  valid_597358 = validateParameter(valid_597358, JString, required = false,
                                 default = nil)
  if valid_597358 != nil:
    section.add "StorageType", valid_597358
  var valid_597359 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597359 = validateParameter(valid_597359, JBool, required = false, default = nil)
  if valid_597359 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597359
  var valid_597360 = query.getOrDefault("DBSecurityGroups")
  valid_597360 = validateParameter(valid_597360, JArray, required = false,
                                 default = nil)
  if valid_597360 != nil:
    section.add "DBSecurityGroups", valid_597360
  var valid_597361 = query.getOrDefault("MasterUserPassword")
  valid_597361 = validateParameter(valid_597361, JString, required = false,
                                 default = nil)
  if valid_597361 != nil:
    section.add "MasterUserPassword", valid_597361
  var valid_597362 = query.getOrDefault("MonitoringRoleArn")
  valid_597362 = validateParameter(valid_597362, JString, required = false,
                                 default = nil)
  if valid_597362 != nil:
    section.add "MonitoringRoleArn", valid_597362
  var valid_597363 = query.getOrDefault("MultiAZ")
  valid_597363 = validateParameter(valid_597363, JBool, required = false, default = nil)
  if valid_597363 != nil:
    section.add "MultiAZ", valid_597363
  var valid_597364 = query.getOrDefault("TdeCredentialPassword")
  valid_597364 = validateParameter(valid_597364, JString, required = false,
                                 default = nil)
  if valid_597364 != nil:
    section.add "TdeCredentialPassword", valid_597364
  var valid_597365 = query.getOrDefault("DomainIAMRoleName")
  valid_597365 = validateParameter(valid_597365, JString, required = false,
                                 default = nil)
  if valid_597365 != nil:
    section.add "DomainIAMRoleName", valid_597365
  var valid_597366 = query.getOrDefault("BackupRetentionPeriod")
  valid_597366 = validateParameter(valid_597366, JInt, required = false, default = nil)
  if valid_597366 != nil:
    section.add "BackupRetentionPeriod", valid_597366
  var valid_597367 = query.getOrDefault("CopyTagsToSnapshot")
  valid_597367 = validateParameter(valid_597367, JBool, required = false, default = nil)
  if valid_597367 != nil:
    section.add "CopyTagsToSnapshot", valid_597367
  var valid_597368 = query.getOrDefault("DeletionProtection")
  valid_597368 = validateParameter(valid_597368, JBool, required = false, default = nil)
  if valid_597368 != nil:
    section.add "DeletionProtection", valid_597368
  var valid_597369 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_597369 = validateParameter(valid_597369, JString, required = false,
                                 default = nil)
  if valid_597369 != nil:
    section.add "NewDBInstanceIdentifier", valid_597369
  var valid_597370 = query.getOrDefault("DBSubnetGroupName")
  valid_597370 = validateParameter(valid_597370, JString, required = false,
                                 default = nil)
  if valid_597370 != nil:
    section.add "DBSubnetGroupName", valid_597370
  var valid_597371 = query.getOrDefault("Domain")
  valid_597371 = validateParameter(valid_597371, JString, required = false,
                                 default = nil)
  if valid_597371 != nil:
    section.add "Domain", valid_597371
  var valid_597372 = query.getOrDefault("EngineVersion")
  valid_597372 = validateParameter(valid_597372, JString, required = false,
                                 default = nil)
  if valid_597372 != nil:
    section.add "EngineVersion", valid_597372
  var valid_597373 = query.getOrDefault("PreferredBackupWindow")
  valid_597373 = validateParameter(valid_597373, JString, required = false,
                                 default = nil)
  if valid_597373 != nil:
    section.add "PreferredBackupWindow", valid_597373
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597374 = query.getOrDefault("DBInstanceIdentifier")
  valid_597374 = validateParameter(valid_597374, JString, required = true,
                                 default = nil)
  if valid_597374 != nil:
    section.add "DBInstanceIdentifier", valid_597374
  var valid_597375 = query.getOrDefault("CACertificateIdentifier")
  valid_597375 = validateParameter(valid_597375, JString, required = false,
                                 default = nil)
  if valid_597375 != nil:
    section.add "CACertificateIdentifier", valid_597375
  var valid_597376 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_597376 = validateParameter(valid_597376, JString, required = false,
                                 default = nil)
  if valid_597376 != nil:
    section.add "PreferredMaintenanceWindow", valid_597376
  var valid_597377 = query.getOrDefault("ProcessorFeatures")
  valid_597377 = validateParameter(valid_597377, JArray, required = false,
                                 default = nil)
  if valid_597377 != nil:
    section.add "ProcessorFeatures", valid_597377
  var valid_597378 = query.getOrDefault("OptionGroupName")
  valid_597378 = validateParameter(valid_597378, JString, required = false,
                                 default = nil)
  if valid_597378 != nil:
    section.add "OptionGroupName", valid_597378
  var valid_597379 = query.getOrDefault("Iops")
  valid_597379 = validateParameter(valid_597379, JInt, required = false, default = nil)
  if valid_597379 != nil:
    section.add "Iops", valid_597379
  var valid_597380 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_597380 = validateParameter(valid_597380, JArray, required = false,
                                 default = nil)
  if valid_597380 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_597380
  var valid_597381 = query.getOrDefault("VpcSecurityGroupIds")
  valid_597381 = validateParameter(valid_597381, JArray, required = false,
                                 default = nil)
  if valid_597381 != nil:
    section.add "VpcSecurityGroupIds", valid_597381
  var valid_597382 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_597382 = validateParameter(valid_597382, JArray, required = false,
                                 default = nil)
  if valid_597382 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_597382
  var valid_597383 = query.getOrDefault("LicenseModel")
  valid_597383 = validateParameter(valid_597383, JString, required = false,
                                 default = nil)
  if valid_597383 != nil:
    section.add "LicenseModel", valid_597383
  var valid_597384 = query.getOrDefault("DBPortNumber")
  valid_597384 = validateParameter(valid_597384, JInt, required = false, default = nil)
  if valid_597384 != nil:
    section.add "DBPortNumber", valid_597384
  var valid_597385 = query.getOrDefault("DBParameterGroupName")
  valid_597385 = validateParameter(valid_597385, JString, required = false,
                                 default = nil)
  if valid_597385 != nil:
    section.add "DBParameterGroupName", valid_597385
  var valid_597386 = query.getOrDefault("DBInstanceClass")
  valid_597386 = validateParameter(valid_597386, JString, required = false,
                                 default = nil)
  if valid_597386 != nil:
    section.add "DBInstanceClass", valid_597386
  var valid_597387 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_597387 = validateParameter(valid_597387, JString, required = false,
                                 default = nil)
  if valid_597387 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_597387
  var valid_597388 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_597388 = validateParameter(valid_597388, JBool, required = false, default = nil)
  if valid_597388 != nil:
    section.add "AllowMajorVersionUpgrade", valid_597388
  var valid_597389 = query.getOrDefault("Action")
  valid_597389 = validateParameter(valid_597389, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_597389 != nil:
    section.add "Action", valid_597389
  var valid_597390 = query.getOrDefault("TdeCredentialArn")
  valid_597390 = validateParameter(valid_597390, JString, required = false,
                                 default = nil)
  if valid_597390 != nil:
    section.add "TdeCredentialArn", valid_597390
  var valid_597391 = query.getOrDefault("PubliclyAccessible")
  valid_597391 = validateParameter(valid_597391, JBool, required = false, default = nil)
  if valid_597391 != nil:
    section.add "PubliclyAccessible", valid_597391
  var valid_597392 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_597392 = validateParameter(valid_597392, JBool, required = false, default = nil)
  if valid_597392 != nil:
    section.add "AutoMinorVersionUpgrade", valid_597392
  var valid_597393 = query.getOrDefault("EnablePerformanceInsights")
  valid_597393 = validateParameter(valid_597393, JBool, required = false, default = nil)
  if valid_597393 != nil:
    section.add "EnablePerformanceInsights", valid_597393
  var valid_597394 = query.getOrDefault("Version")
  valid_597394 = validateParameter(valid_597394, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597394 != nil:
    section.add "Version", valid_597394
  var valid_597395 = query.getOrDefault("ApplyImmediately")
  valid_597395 = validateParameter(valid_597395, JBool, required = false, default = nil)
  if valid_597395 != nil:
    section.add "ApplyImmediately", valid_597395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597396 = header.getOrDefault("X-Amz-Date")
  valid_597396 = validateParameter(valid_597396, JString, required = false,
                                 default = nil)
  if valid_597396 != nil:
    section.add "X-Amz-Date", valid_597396
  var valid_597397 = header.getOrDefault("X-Amz-Security-Token")
  valid_597397 = validateParameter(valid_597397, JString, required = false,
                                 default = nil)
  if valid_597397 != nil:
    section.add "X-Amz-Security-Token", valid_597397
  var valid_597398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597398 = validateParameter(valid_597398, JString, required = false,
                                 default = nil)
  if valid_597398 != nil:
    section.add "X-Amz-Content-Sha256", valid_597398
  var valid_597399 = header.getOrDefault("X-Amz-Algorithm")
  valid_597399 = validateParameter(valid_597399, JString, required = false,
                                 default = nil)
  if valid_597399 != nil:
    section.add "X-Amz-Algorithm", valid_597399
  var valid_597400 = header.getOrDefault("X-Amz-Signature")
  valid_597400 = validateParameter(valid_597400, JString, required = false,
                                 default = nil)
  if valid_597400 != nil:
    section.add "X-Amz-Signature", valid_597400
  var valid_597401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597401 = validateParameter(valid_597401, JString, required = false,
                                 default = nil)
  if valid_597401 != nil:
    section.add "X-Amz-SignedHeaders", valid_597401
  var valid_597402 = header.getOrDefault("X-Amz-Credential")
  valid_597402 = validateParameter(valid_597402, JString, required = false,
                                 default = nil)
  if valid_597402 != nil:
    section.add "X-Amz-Credential", valid_597402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597403: Call_GetModifyDBInstance_597349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_597403.validator(path, query, header, formData, body)
  let scheme = call_597403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597403.url(scheme.get, call_597403.host, call_597403.base,
                         call_597403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597403, url, valid)

proc call*(call_597404: Call_GetModifyDBInstance_597349;
          DBInstanceIdentifier: string; MonitoringInterval: int = 0;
          PromotionTier: int = 0; UseDefaultProcessorFeatures: bool = false;
          MaxAllocatedStorage: int = 0; PerformanceInsightsRetentionPeriod: int = 0;
          AllocatedStorage: int = 0; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          DBSecurityGroups: JsonNode = nil; MasterUserPassword: string = "";
          MonitoringRoleArn: string = ""; MultiAZ: bool = false;
          TdeCredentialPassword: string = ""; DomainIAMRoleName: string = "";
          BackupRetentionPeriod: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; NewDBInstanceIdentifier: string = "";
          DBSubnetGroupName: string = ""; Domain: string = "";
          EngineVersion: string = ""; PreferredBackupWindow: string = "";
          CACertificateIdentifier: string = "";
          PreferredMaintenanceWindow: string = "";
          ProcessorFeatures: JsonNode = nil; OptionGroupName: string = "";
          Iops: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          LicenseModel: string = ""; DBPortNumber: int = 0;
          DBParameterGroupName: string = ""; DBInstanceClass: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          AllowMajorVersionUpgrade: bool = false;
          Action: string = "ModifyDBInstance"; TdeCredentialArn: string = "";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: string
  ##         : The Active Directory Domain to move the instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. 
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   Action: string (required)
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  var query_597405 = newJObject()
  add(query_597405, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_597405, "PromotionTier", newJInt(PromotionTier))
  add(query_597405, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_597405, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_597405, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_597405, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_597405, "StorageType", newJString(StorageType))
  add(query_597405, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if DBSecurityGroups != nil:
    query_597405.add "DBSecurityGroups", DBSecurityGroups
  add(query_597405, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_597405, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_597405, "MultiAZ", newJBool(MultiAZ))
  add(query_597405, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_597405, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_597405, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_597405, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_597405, "DeletionProtection", newJBool(DeletionProtection))
  add(query_597405, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_597405, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_597405, "Domain", newJString(Domain))
  add(query_597405, "EngineVersion", newJString(EngineVersion))
  add(query_597405, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_597405, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_597405, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_597405, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  if ProcessorFeatures != nil:
    query_597405.add "ProcessorFeatures", ProcessorFeatures
  add(query_597405, "OptionGroupName", newJString(OptionGroupName))
  add(query_597405, "Iops", newJInt(Iops))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_597405.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_597405.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_597405.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_597405, "LicenseModel", newJString(LicenseModel))
  add(query_597405, "DBPortNumber", newJInt(DBPortNumber))
  add(query_597405, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_597405, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_597405, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_597405, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_597405, "Action", newJString(Action))
  add(query_597405, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_597405, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_597405, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_597405, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_597405, "Version", newJString(Version))
  add(query_597405, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_597404.call(nil, query_597405, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_597349(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_597350, base: "/",
    url: url_GetModifyDBInstance_597351, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_597481 = ref object of OpenApiRestCall_593421
proc url_PostModifyDBParameterGroup_597483(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBParameterGroup_597482(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597484 = query.getOrDefault("Action")
  valid_597484 = validateParameter(valid_597484, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_597484 != nil:
    section.add "Action", valid_597484
  var valid_597485 = query.getOrDefault("Version")
  valid_597485 = validateParameter(valid_597485, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597485 != nil:
    section.add "Version", valid_597485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597486 = header.getOrDefault("X-Amz-Date")
  valid_597486 = validateParameter(valid_597486, JString, required = false,
                                 default = nil)
  if valid_597486 != nil:
    section.add "X-Amz-Date", valid_597486
  var valid_597487 = header.getOrDefault("X-Amz-Security-Token")
  valid_597487 = validateParameter(valid_597487, JString, required = false,
                                 default = nil)
  if valid_597487 != nil:
    section.add "X-Amz-Security-Token", valid_597487
  var valid_597488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597488 = validateParameter(valid_597488, JString, required = false,
                                 default = nil)
  if valid_597488 != nil:
    section.add "X-Amz-Content-Sha256", valid_597488
  var valid_597489 = header.getOrDefault("X-Amz-Algorithm")
  valid_597489 = validateParameter(valid_597489, JString, required = false,
                                 default = nil)
  if valid_597489 != nil:
    section.add "X-Amz-Algorithm", valid_597489
  var valid_597490 = header.getOrDefault("X-Amz-Signature")
  valid_597490 = validateParameter(valid_597490, JString, required = false,
                                 default = nil)
  if valid_597490 != nil:
    section.add "X-Amz-Signature", valid_597490
  var valid_597491 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597491 = validateParameter(valid_597491, JString, required = false,
                                 default = nil)
  if valid_597491 != nil:
    section.add "X-Amz-SignedHeaders", valid_597491
  var valid_597492 = header.getOrDefault("X-Amz-Credential")
  valid_597492 = validateParameter(valid_597492, JString, required = false,
                                 default = nil)
  if valid_597492 != nil:
    section.add "X-Amz-Credential", valid_597492
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_597493 = formData.getOrDefault("DBParameterGroupName")
  valid_597493 = validateParameter(valid_597493, JString, required = true,
                                 default = nil)
  if valid_597493 != nil:
    section.add "DBParameterGroupName", valid_597493
  var valid_597494 = formData.getOrDefault("Parameters")
  valid_597494 = validateParameter(valid_597494, JArray, required = true, default = nil)
  if valid_597494 != nil:
    section.add "Parameters", valid_597494
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597495: Call_PostModifyDBParameterGroup_597481; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_597495.validator(path, query, header, formData, body)
  let scheme = call_597495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597495.url(scheme.get, call_597495.host, call_597495.base,
                         call_597495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597495, url, valid)

proc call*(call_597496: Call_PostModifyDBParameterGroup_597481;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597497 = newJObject()
  var formData_597498 = newJObject()
  add(formData_597498, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_597498.add "Parameters", Parameters
  add(query_597497, "Action", newJString(Action))
  add(query_597497, "Version", newJString(Version))
  result = call_597496.call(nil, query_597497, nil, formData_597498, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_597481(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_597482, base: "/",
    url: url_PostModifyDBParameterGroup_597483,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_597464 = ref object of OpenApiRestCall_593421
proc url_GetModifyDBParameterGroup_597466(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBParameterGroup_597465(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_597467 = query.getOrDefault("DBParameterGroupName")
  valid_597467 = validateParameter(valid_597467, JString, required = true,
                                 default = nil)
  if valid_597467 != nil:
    section.add "DBParameterGroupName", valid_597467
  var valid_597468 = query.getOrDefault("Parameters")
  valid_597468 = validateParameter(valid_597468, JArray, required = true, default = nil)
  if valid_597468 != nil:
    section.add "Parameters", valid_597468
  var valid_597469 = query.getOrDefault("Action")
  valid_597469 = validateParameter(valid_597469, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_597469 != nil:
    section.add "Action", valid_597469
  var valid_597470 = query.getOrDefault("Version")
  valid_597470 = validateParameter(valid_597470, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597470 != nil:
    section.add "Version", valid_597470
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597471 = header.getOrDefault("X-Amz-Date")
  valid_597471 = validateParameter(valid_597471, JString, required = false,
                                 default = nil)
  if valid_597471 != nil:
    section.add "X-Amz-Date", valid_597471
  var valid_597472 = header.getOrDefault("X-Amz-Security-Token")
  valid_597472 = validateParameter(valid_597472, JString, required = false,
                                 default = nil)
  if valid_597472 != nil:
    section.add "X-Amz-Security-Token", valid_597472
  var valid_597473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597473 = validateParameter(valid_597473, JString, required = false,
                                 default = nil)
  if valid_597473 != nil:
    section.add "X-Amz-Content-Sha256", valid_597473
  var valid_597474 = header.getOrDefault("X-Amz-Algorithm")
  valid_597474 = validateParameter(valid_597474, JString, required = false,
                                 default = nil)
  if valid_597474 != nil:
    section.add "X-Amz-Algorithm", valid_597474
  var valid_597475 = header.getOrDefault("X-Amz-Signature")
  valid_597475 = validateParameter(valid_597475, JString, required = false,
                                 default = nil)
  if valid_597475 != nil:
    section.add "X-Amz-Signature", valid_597475
  var valid_597476 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597476 = validateParameter(valid_597476, JString, required = false,
                                 default = nil)
  if valid_597476 != nil:
    section.add "X-Amz-SignedHeaders", valid_597476
  var valid_597477 = header.getOrDefault("X-Amz-Credential")
  valid_597477 = validateParameter(valid_597477, JString, required = false,
                                 default = nil)
  if valid_597477 != nil:
    section.add "X-Amz-Credential", valid_597477
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597478: Call_GetModifyDBParameterGroup_597464; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_597478.validator(path, query, header, formData, body)
  let scheme = call_597478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597478.url(scheme.get, call_597478.host, call_597478.base,
                         call_597478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597478, url, valid)

proc call*(call_597479: Call_GetModifyDBParameterGroup_597464;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597480 = newJObject()
  add(query_597480, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_597480.add "Parameters", Parameters
  add(query_597480, "Action", newJString(Action))
  add(query_597480, "Version", newJString(Version))
  result = call_597479.call(nil, query_597480, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_597464(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_597465, base: "/",
    url: url_GetModifyDBParameterGroup_597466,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshot_597517 = ref object of OpenApiRestCall_593421
proc url_PostModifyDBSnapshot_597519(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBSnapshot_597518(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597520 = query.getOrDefault("Action")
  valid_597520 = validateParameter(valid_597520, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_597520 != nil:
    section.add "Action", valid_597520
  var valid_597521 = query.getOrDefault("Version")
  valid_597521 = validateParameter(valid_597521, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597521 != nil:
    section.add "Version", valid_597521
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597522 = header.getOrDefault("X-Amz-Date")
  valid_597522 = validateParameter(valid_597522, JString, required = false,
                                 default = nil)
  if valid_597522 != nil:
    section.add "X-Amz-Date", valid_597522
  var valid_597523 = header.getOrDefault("X-Amz-Security-Token")
  valid_597523 = validateParameter(valid_597523, JString, required = false,
                                 default = nil)
  if valid_597523 != nil:
    section.add "X-Amz-Security-Token", valid_597523
  var valid_597524 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597524 = validateParameter(valid_597524, JString, required = false,
                                 default = nil)
  if valid_597524 != nil:
    section.add "X-Amz-Content-Sha256", valid_597524
  var valid_597525 = header.getOrDefault("X-Amz-Algorithm")
  valid_597525 = validateParameter(valid_597525, JString, required = false,
                                 default = nil)
  if valid_597525 != nil:
    section.add "X-Amz-Algorithm", valid_597525
  var valid_597526 = header.getOrDefault("X-Amz-Signature")
  valid_597526 = validateParameter(valid_597526, JString, required = false,
                                 default = nil)
  if valid_597526 != nil:
    section.add "X-Amz-Signature", valid_597526
  var valid_597527 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597527 = validateParameter(valid_597527, JString, required = false,
                                 default = nil)
  if valid_597527 != nil:
    section.add "X-Amz-SignedHeaders", valid_597527
  var valid_597528 = header.getOrDefault("X-Amz-Credential")
  valid_597528 = validateParameter(valid_597528, JString, required = false,
                                 default = nil)
  if valid_597528 != nil:
    section.add "X-Amz-Credential", valid_597528
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  section = newJObject()
  var valid_597529 = formData.getOrDefault("OptionGroupName")
  valid_597529 = validateParameter(valid_597529, JString, required = false,
                                 default = nil)
  if valid_597529 != nil:
    section.add "OptionGroupName", valid_597529
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_597530 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_597530 = validateParameter(valid_597530, JString, required = true,
                                 default = nil)
  if valid_597530 != nil:
    section.add "DBSnapshotIdentifier", valid_597530
  var valid_597531 = formData.getOrDefault("EngineVersion")
  valid_597531 = validateParameter(valid_597531, JString, required = false,
                                 default = nil)
  if valid_597531 != nil:
    section.add "EngineVersion", valid_597531
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597532: Call_PostModifyDBSnapshot_597517; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  let valid = call_597532.validator(path, query, header, formData, body)
  let scheme = call_597532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597532.url(scheme.get, call_597532.host, call_597532.base,
                         call_597532.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597532, url, valid)

proc call*(call_597533: Call_PostModifyDBSnapshot_597517;
          DBSnapshotIdentifier: string; OptionGroupName: string = "";
          Action: string = "ModifyDBSnapshot"; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   Action: string (required)
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   Version: string (required)
  var query_597534 = newJObject()
  var formData_597535 = newJObject()
  add(formData_597535, "OptionGroupName", newJString(OptionGroupName))
  add(formData_597535, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_597534, "Action", newJString(Action))
  add(formData_597535, "EngineVersion", newJString(EngineVersion))
  add(query_597534, "Version", newJString(Version))
  result = call_597533.call(nil, query_597534, nil, formData_597535, nil)

var postModifyDBSnapshot* = Call_PostModifyDBSnapshot_597517(
    name: "postModifyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_PostModifyDBSnapshot_597518, base: "/",
    url: url_PostModifyDBSnapshot_597519, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshot_597499 = ref object of OpenApiRestCall_593421
proc url_GetModifyDBSnapshot_597501(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBSnapshot_597500(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  section = newJObject()
  var valid_597502 = query.getOrDefault("OptionGroupName")
  valid_597502 = validateParameter(valid_597502, JString, required = false,
                                 default = nil)
  if valid_597502 != nil:
    section.add "OptionGroupName", valid_597502
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597503 = query.getOrDefault("Action")
  valid_597503 = validateParameter(valid_597503, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_597503 != nil:
    section.add "Action", valid_597503
  var valid_597504 = query.getOrDefault("EngineVersion")
  valid_597504 = validateParameter(valid_597504, JString, required = false,
                                 default = nil)
  if valid_597504 != nil:
    section.add "EngineVersion", valid_597504
  var valid_597505 = query.getOrDefault("Version")
  valid_597505 = validateParameter(valid_597505, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597505 != nil:
    section.add "Version", valid_597505
  var valid_597506 = query.getOrDefault("DBSnapshotIdentifier")
  valid_597506 = validateParameter(valid_597506, JString, required = true,
                                 default = nil)
  if valid_597506 != nil:
    section.add "DBSnapshotIdentifier", valid_597506
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597507 = header.getOrDefault("X-Amz-Date")
  valid_597507 = validateParameter(valid_597507, JString, required = false,
                                 default = nil)
  if valid_597507 != nil:
    section.add "X-Amz-Date", valid_597507
  var valid_597508 = header.getOrDefault("X-Amz-Security-Token")
  valid_597508 = validateParameter(valid_597508, JString, required = false,
                                 default = nil)
  if valid_597508 != nil:
    section.add "X-Amz-Security-Token", valid_597508
  var valid_597509 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597509 = validateParameter(valid_597509, JString, required = false,
                                 default = nil)
  if valid_597509 != nil:
    section.add "X-Amz-Content-Sha256", valid_597509
  var valid_597510 = header.getOrDefault("X-Amz-Algorithm")
  valid_597510 = validateParameter(valid_597510, JString, required = false,
                                 default = nil)
  if valid_597510 != nil:
    section.add "X-Amz-Algorithm", valid_597510
  var valid_597511 = header.getOrDefault("X-Amz-Signature")
  valid_597511 = validateParameter(valid_597511, JString, required = false,
                                 default = nil)
  if valid_597511 != nil:
    section.add "X-Amz-Signature", valid_597511
  var valid_597512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597512 = validateParameter(valid_597512, JString, required = false,
                                 default = nil)
  if valid_597512 != nil:
    section.add "X-Amz-SignedHeaders", valid_597512
  var valid_597513 = header.getOrDefault("X-Amz-Credential")
  valid_597513 = validateParameter(valid_597513, JString, required = false,
                                 default = nil)
  if valid_597513 != nil:
    section.add "X-Amz-Credential", valid_597513
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597514: Call_GetModifyDBSnapshot_597499; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  let valid = call_597514.validator(path, query, header, formData, body)
  let scheme = call_597514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597514.url(scheme.get, call_597514.host, call_597514.base,
                         call_597514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597514, url, valid)

proc call*(call_597515: Call_GetModifyDBSnapshot_597499;
          DBSnapshotIdentifier: string; OptionGroupName: string = "";
          Action: string = "ModifyDBSnapshot"; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  var query_597516 = newJObject()
  add(query_597516, "OptionGroupName", newJString(OptionGroupName))
  add(query_597516, "Action", newJString(Action))
  add(query_597516, "EngineVersion", newJString(EngineVersion))
  add(query_597516, "Version", newJString(Version))
  add(query_597516, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_597515.call(nil, query_597516, nil, nil, nil)

var getModifyDBSnapshot* = Call_GetModifyDBSnapshot_597499(
    name: "getModifyDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_GetModifyDBSnapshot_597500, base: "/",
    url: url_GetModifyDBSnapshot_597501, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshotAttribute_597555 = ref object of OpenApiRestCall_593421
proc url_PostModifyDBSnapshotAttribute_597557(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBSnapshotAttribute_597556(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597558 = query.getOrDefault("Action")
  valid_597558 = validateParameter(valid_597558, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_597558 != nil:
    section.add "Action", valid_597558
  var valid_597559 = query.getOrDefault("Version")
  valid_597559 = validateParameter(valid_597559, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597559 != nil:
    section.add "Version", valid_597559
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597560 = header.getOrDefault("X-Amz-Date")
  valid_597560 = validateParameter(valid_597560, JString, required = false,
                                 default = nil)
  if valid_597560 != nil:
    section.add "X-Amz-Date", valid_597560
  var valid_597561 = header.getOrDefault("X-Amz-Security-Token")
  valid_597561 = validateParameter(valid_597561, JString, required = false,
                                 default = nil)
  if valid_597561 != nil:
    section.add "X-Amz-Security-Token", valid_597561
  var valid_597562 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597562 = validateParameter(valid_597562, JString, required = false,
                                 default = nil)
  if valid_597562 != nil:
    section.add "X-Amz-Content-Sha256", valid_597562
  var valid_597563 = header.getOrDefault("X-Amz-Algorithm")
  valid_597563 = validateParameter(valid_597563, JString, required = false,
                                 default = nil)
  if valid_597563 != nil:
    section.add "X-Amz-Algorithm", valid_597563
  var valid_597564 = header.getOrDefault("X-Amz-Signature")
  valid_597564 = validateParameter(valid_597564, JString, required = false,
                                 default = nil)
  if valid_597564 != nil:
    section.add "X-Amz-Signature", valid_597564
  var valid_597565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597565 = validateParameter(valid_597565, JString, required = false,
                                 default = nil)
  if valid_597565 != nil:
    section.add "X-Amz-SignedHeaders", valid_597565
  var valid_597566 = header.getOrDefault("X-Amz-Credential")
  valid_597566 = validateParameter(valid_597566, JString, required = false,
                                 default = nil)
  if valid_597566 != nil:
    section.add "X-Amz-Credential", valid_597566
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_597567 = formData.getOrDefault("AttributeName")
  valid_597567 = validateParameter(valid_597567, JString, required = true,
                                 default = nil)
  if valid_597567 != nil:
    section.add "AttributeName", valid_597567
  var valid_597568 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_597568 = validateParameter(valid_597568, JString, required = true,
                                 default = nil)
  if valid_597568 != nil:
    section.add "DBSnapshotIdentifier", valid_597568
  var valid_597569 = formData.getOrDefault("ValuesToRemove")
  valid_597569 = validateParameter(valid_597569, JArray, required = false,
                                 default = nil)
  if valid_597569 != nil:
    section.add "ValuesToRemove", valid_597569
  var valid_597570 = formData.getOrDefault("ValuesToAdd")
  valid_597570 = validateParameter(valid_597570, JArray, required = false,
                                 default = nil)
  if valid_597570 != nil:
    section.add "ValuesToAdd", valid_597570
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597571: Call_PostModifyDBSnapshotAttribute_597555; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_597571.validator(path, query, header, formData, body)
  let scheme = call_597571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597571.url(scheme.get, call_597571.host, call_597571.base,
                         call_597571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597571, url, valid)

proc call*(call_597572: Call_PostModifyDBSnapshotAttribute_597555;
          AttributeName: string; DBSnapshotIdentifier: string;
          Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_597573 = newJObject()
  var formData_597574 = newJObject()
  add(formData_597574, "AttributeName", newJString(AttributeName))
  add(formData_597574, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_597573, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_597574.add "ValuesToRemove", ValuesToRemove
  if ValuesToAdd != nil:
    formData_597574.add "ValuesToAdd", ValuesToAdd
  add(query_597573, "Version", newJString(Version))
  result = call_597572.call(nil, query_597573, nil, formData_597574, nil)

var postModifyDBSnapshotAttribute* = Call_PostModifyDBSnapshotAttribute_597555(
    name: "postModifyDBSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_PostModifyDBSnapshotAttribute_597556, base: "/",
    url: url_PostModifyDBSnapshotAttribute_597557,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshotAttribute_597536 = ref object of OpenApiRestCall_593421
proc url_GetModifyDBSnapshotAttribute_597538(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBSnapshotAttribute_597537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: JString (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AttributeName` field"
  var valid_597539 = query.getOrDefault("AttributeName")
  valid_597539 = validateParameter(valid_597539, JString, required = true,
                                 default = nil)
  if valid_597539 != nil:
    section.add "AttributeName", valid_597539
  var valid_597540 = query.getOrDefault("ValuesToAdd")
  valid_597540 = validateParameter(valid_597540, JArray, required = false,
                                 default = nil)
  if valid_597540 != nil:
    section.add "ValuesToAdd", valid_597540
  var valid_597541 = query.getOrDefault("Action")
  valid_597541 = validateParameter(valid_597541, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_597541 != nil:
    section.add "Action", valid_597541
  var valid_597542 = query.getOrDefault("ValuesToRemove")
  valid_597542 = validateParameter(valid_597542, JArray, required = false,
                                 default = nil)
  if valid_597542 != nil:
    section.add "ValuesToRemove", valid_597542
  var valid_597543 = query.getOrDefault("Version")
  valid_597543 = validateParameter(valid_597543, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597543 != nil:
    section.add "Version", valid_597543
  var valid_597544 = query.getOrDefault("DBSnapshotIdentifier")
  valid_597544 = validateParameter(valid_597544, JString, required = true,
                                 default = nil)
  if valid_597544 != nil:
    section.add "DBSnapshotIdentifier", valid_597544
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597545 = header.getOrDefault("X-Amz-Date")
  valid_597545 = validateParameter(valid_597545, JString, required = false,
                                 default = nil)
  if valid_597545 != nil:
    section.add "X-Amz-Date", valid_597545
  var valid_597546 = header.getOrDefault("X-Amz-Security-Token")
  valid_597546 = validateParameter(valid_597546, JString, required = false,
                                 default = nil)
  if valid_597546 != nil:
    section.add "X-Amz-Security-Token", valid_597546
  var valid_597547 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597547 = validateParameter(valid_597547, JString, required = false,
                                 default = nil)
  if valid_597547 != nil:
    section.add "X-Amz-Content-Sha256", valid_597547
  var valid_597548 = header.getOrDefault("X-Amz-Algorithm")
  valid_597548 = validateParameter(valid_597548, JString, required = false,
                                 default = nil)
  if valid_597548 != nil:
    section.add "X-Amz-Algorithm", valid_597548
  var valid_597549 = header.getOrDefault("X-Amz-Signature")
  valid_597549 = validateParameter(valid_597549, JString, required = false,
                                 default = nil)
  if valid_597549 != nil:
    section.add "X-Amz-Signature", valid_597549
  var valid_597550 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597550 = validateParameter(valid_597550, JString, required = false,
                                 default = nil)
  if valid_597550 != nil:
    section.add "X-Amz-SignedHeaders", valid_597550
  var valid_597551 = header.getOrDefault("X-Amz-Credential")
  valid_597551 = validateParameter(valid_597551, JString, required = false,
                                 default = nil)
  if valid_597551 != nil:
    section.add "X-Amz-Credential", valid_597551
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597552: Call_GetModifyDBSnapshotAttribute_597536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_597552.validator(path, query, header, formData, body)
  let scheme = call_597552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597552.url(scheme.get, call_597552.host, call_597552.base,
                         call_597552.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597552, url, valid)

proc call*(call_597553: Call_GetModifyDBSnapshotAttribute_597536;
          AttributeName: string; DBSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil; Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  var query_597554 = newJObject()
  add(query_597554, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_597554.add "ValuesToAdd", ValuesToAdd
  add(query_597554, "Action", newJString(Action))
  if ValuesToRemove != nil:
    query_597554.add "ValuesToRemove", ValuesToRemove
  add(query_597554, "Version", newJString(Version))
  add(query_597554, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_597553.call(nil, query_597554, nil, nil, nil)

var getModifyDBSnapshotAttribute* = Call_GetModifyDBSnapshotAttribute_597536(
    name: "getModifyDBSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_GetModifyDBSnapshotAttribute_597537, base: "/",
    url: url_GetModifyDBSnapshotAttribute_597538,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_597593 = ref object of OpenApiRestCall_593421
proc url_PostModifyDBSubnetGroup_597595(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBSubnetGroup_597594(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597596 = query.getOrDefault("Action")
  valid_597596 = validateParameter(valid_597596, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_597596 != nil:
    section.add "Action", valid_597596
  var valid_597597 = query.getOrDefault("Version")
  valid_597597 = validateParameter(valid_597597, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597597 != nil:
    section.add "Version", valid_597597
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597598 = header.getOrDefault("X-Amz-Date")
  valid_597598 = validateParameter(valid_597598, JString, required = false,
                                 default = nil)
  if valid_597598 != nil:
    section.add "X-Amz-Date", valid_597598
  var valid_597599 = header.getOrDefault("X-Amz-Security-Token")
  valid_597599 = validateParameter(valid_597599, JString, required = false,
                                 default = nil)
  if valid_597599 != nil:
    section.add "X-Amz-Security-Token", valid_597599
  var valid_597600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597600 = validateParameter(valid_597600, JString, required = false,
                                 default = nil)
  if valid_597600 != nil:
    section.add "X-Amz-Content-Sha256", valid_597600
  var valid_597601 = header.getOrDefault("X-Amz-Algorithm")
  valid_597601 = validateParameter(valid_597601, JString, required = false,
                                 default = nil)
  if valid_597601 != nil:
    section.add "X-Amz-Algorithm", valid_597601
  var valid_597602 = header.getOrDefault("X-Amz-Signature")
  valid_597602 = validateParameter(valid_597602, JString, required = false,
                                 default = nil)
  if valid_597602 != nil:
    section.add "X-Amz-Signature", valid_597602
  var valid_597603 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597603 = validateParameter(valid_597603, JString, required = false,
                                 default = nil)
  if valid_597603 != nil:
    section.add "X-Amz-SignedHeaders", valid_597603
  var valid_597604 = header.getOrDefault("X-Amz-Credential")
  valid_597604 = validateParameter(valid_597604, JString, required = false,
                                 default = nil)
  if valid_597604 != nil:
    section.add "X-Amz-Credential", valid_597604
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_597605 = formData.getOrDefault("DBSubnetGroupName")
  valid_597605 = validateParameter(valid_597605, JString, required = true,
                                 default = nil)
  if valid_597605 != nil:
    section.add "DBSubnetGroupName", valid_597605
  var valid_597606 = formData.getOrDefault("SubnetIds")
  valid_597606 = validateParameter(valid_597606, JArray, required = true, default = nil)
  if valid_597606 != nil:
    section.add "SubnetIds", valid_597606
  var valid_597607 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_597607 = validateParameter(valid_597607, JString, required = false,
                                 default = nil)
  if valid_597607 != nil:
    section.add "DBSubnetGroupDescription", valid_597607
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597608: Call_PostModifyDBSubnetGroup_597593; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_597608.validator(path, query, header, formData, body)
  let scheme = call_597608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597608.url(scheme.get, call_597608.host, call_597608.base,
                         call_597608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597608, url, valid)

proc call*(call_597609: Call_PostModifyDBSubnetGroup_597593;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_597610 = newJObject()
  var formData_597611 = newJObject()
  add(formData_597611, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_597611.add "SubnetIds", SubnetIds
  add(query_597610, "Action", newJString(Action))
  add(formData_597611, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_597610, "Version", newJString(Version))
  result = call_597609.call(nil, query_597610, nil, formData_597611, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_597593(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_597594, base: "/",
    url: url_PostModifyDBSubnetGroup_597595, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_597575 = ref object of OpenApiRestCall_593421
proc url_GetModifyDBSubnetGroup_597577(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBSubnetGroup_597576(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597578 = query.getOrDefault("Action")
  valid_597578 = validateParameter(valid_597578, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_597578 != nil:
    section.add "Action", valid_597578
  var valid_597579 = query.getOrDefault("DBSubnetGroupName")
  valid_597579 = validateParameter(valid_597579, JString, required = true,
                                 default = nil)
  if valid_597579 != nil:
    section.add "DBSubnetGroupName", valid_597579
  var valid_597580 = query.getOrDefault("SubnetIds")
  valid_597580 = validateParameter(valid_597580, JArray, required = true, default = nil)
  if valid_597580 != nil:
    section.add "SubnetIds", valid_597580
  var valid_597581 = query.getOrDefault("DBSubnetGroupDescription")
  valid_597581 = validateParameter(valid_597581, JString, required = false,
                                 default = nil)
  if valid_597581 != nil:
    section.add "DBSubnetGroupDescription", valid_597581
  var valid_597582 = query.getOrDefault("Version")
  valid_597582 = validateParameter(valid_597582, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597582 != nil:
    section.add "Version", valid_597582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597583 = header.getOrDefault("X-Amz-Date")
  valid_597583 = validateParameter(valid_597583, JString, required = false,
                                 default = nil)
  if valid_597583 != nil:
    section.add "X-Amz-Date", valid_597583
  var valid_597584 = header.getOrDefault("X-Amz-Security-Token")
  valid_597584 = validateParameter(valid_597584, JString, required = false,
                                 default = nil)
  if valid_597584 != nil:
    section.add "X-Amz-Security-Token", valid_597584
  var valid_597585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597585 = validateParameter(valid_597585, JString, required = false,
                                 default = nil)
  if valid_597585 != nil:
    section.add "X-Amz-Content-Sha256", valid_597585
  var valid_597586 = header.getOrDefault("X-Amz-Algorithm")
  valid_597586 = validateParameter(valid_597586, JString, required = false,
                                 default = nil)
  if valid_597586 != nil:
    section.add "X-Amz-Algorithm", valid_597586
  var valid_597587 = header.getOrDefault("X-Amz-Signature")
  valid_597587 = validateParameter(valid_597587, JString, required = false,
                                 default = nil)
  if valid_597587 != nil:
    section.add "X-Amz-Signature", valid_597587
  var valid_597588 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597588 = validateParameter(valid_597588, JString, required = false,
                                 default = nil)
  if valid_597588 != nil:
    section.add "X-Amz-SignedHeaders", valid_597588
  var valid_597589 = header.getOrDefault("X-Amz-Credential")
  valid_597589 = validateParameter(valid_597589, JString, required = false,
                                 default = nil)
  if valid_597589 != nil:
    section.add "X-Amz-Credential", valid_597589
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597590: Call_GetModifyDBSubnetGroup_597575; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_597590.validator(path, query, header, formData, body)
  let scheme = call_597590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597590.url(scheme.get, call_597590.host, call_597590.base,
                         call_597590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597590, url, valid)

proc call*(call_597591: Call_GetModifyDBSubnetGroup_597575;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_597592 = newJObject()
  add(query_597592, "Action", newJString(Action))
  add(query_597592, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_597592.add "SubnetIds", SubnetIds
  add(query_597592, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_597592, "Version", newJString(Version))
  result = call_597591.call(nil, query_597592, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_597575(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_597576, base: "/",
    url: url_GetModifyDBSubnetGroup_597577, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_597632 = ref object of OpenApiRestCall_593421
proc url_PostModifyEventSubscription_597634(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyEventSubscription_597633(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597635 = query.getOrDefault("Action")
  valid_597635 = validateParameter(valid_597635, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_597635 != nil:
    section.add "Action", valid_597635
  var valid_597636 = query.getOrDefault("Version")
  valid_597636 = validateParameter(valid_597636, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597636 != nil:
    section.add "Version", valid_597636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597637 = header.getOrDefault("X-Amz-Date")
  valid_597637 = validateParameter(valid_597637, JString, required = false,
                                 default = nil)
  if valid_597637 != nil:
    section.add "X-Amz-Date", valid_597637
  var valid_597638 = header.getOrDefault("X-Amz-Security-Token")
  valid_597638 = validateParameter(valid_597638, JString, required = false,
                                 default = nil)
  if valid_597638 != nil:
    section.add "X-Amz-Security-Token", valid_597638
  var valid_597639 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597639 = validateParameter(valid_597639, JString, required = false,
                                 default = nil)
  if valid_597639 != nil:
    section.add "X-Amz-Content-Sha256", valid_597639
  var valid_597640 = header.getOrDefault("X-Amz-Algorithm")
  valid_597640 = validateParameter(valid_597640, JString, required = false,
                                 default = nil)
  if valid_597640 != nil:
    section.add "X-Amz-Algorithm", valid_597640
  var valid_597641 = header.getOrDefault("X-Amz-Signature")
  valid_597641 = validateParameter(valid_597641, JString, required = false,
                                 default = nil)
  if valid_597641 != nil:
    section.add "X-Amz-Signature", valid_597641
  var valid_597642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597642 = validateParameter(valid_597642, JString, required = false,
                                 default = nil)
  if valid_597642 != nil:
    section.add "X-Amz-SignedHeaders", valid_597642
  var valid_597643 = header.getOrDefault("X-Amz-Credential")
  valid_597643 = validateParameter(valid_597643, JString, required = false,
                                 default = nil)
  if valid_597643 != nil:
    section.add "X-Amz-Credential", valid_597643
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_597644 = formData.getOrDefault("Enabled")
  valid_597644 = validateParameter(valid_597644, JBool, required = false, default = nil)
  if valid_597644 != nil:
    section.add "Enabled", valid_597644
  var valid_597645 = formData.getOrDefault("EventCategories")
  valid_597645 = validateParameter(valid_597645, JArray, required = false,
                                 default = nil)
  if valid_597645 != nil:
    section.add "EventCategories", valid_597645
  var valid_597646 = formData.getOrDefault("SnsTopicArn")
  valid_597646 = validateParameter(valid_597646, JString, required = false,
                                 default = nil)
  if valid_597646 != nil:
    section.add "SnsTopicArn", valid_597646
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_597647 = formData.getOrDefault("SubscriptionName")
  valid_597647 = validateParameter(valid_597647, JString, required = true,
                                 default = nil)
  if valid_597647 != nil:
    section.add "SubscriptionName", valid_597647
  var valid_597648 = formData.getOrDefault("SourceType")
  valid_597648 = validateParameter(valid_597648, JString, required = false,
                                 default = nil)
  if valid_597648 != nil:
    section.add "SourceType", valid_597648
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597649: Call_PostModifyEventSubscription_597632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_597649.validator(path, query, header, formData, body)
  let scheme = call_597649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597649.url(scheme.get, call_597649.host, call_597649.base,
                         call_597649.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597649, url, valid)

proc call*(call_597650: Call_PostModifyEventSubscription_597632;
          SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SnsTopicArn: string = "";
          Action: string = "ModifyEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_597651 = newJObject()
  var formData_597652 = newJObject()
  add(formData_597652, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_597652.add "EventCategories", EventCategories
  add(formData_597652, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_597652, "SubscriptionName", newJString(SubscriptionName))
  add(query_597651, "Action", newJString(Action))
  add(query_597651, "Version", newJString(Version))
  add(formData_597652, "SourceType", newJString(SourceType))
  result = call_597650.call(nil, query_597651, nil, formData_597652, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_597632(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_597633, base: "/",
    url: url_PostModifyEventSubscription_597634,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_597612 = ref object of OpenApiRestCall_593421
proc url_GetModifyEventSubscription_597614(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyEventSubscription_597613(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   Version: JString (required)
  section = newJObject()
  var valid_597615 = query.getOrDefault("SourceType")
  valid_597615 = validateParameter(valid_597615, JString, required = false,
                                 default = nil)
  if valid_597615 != nil:
    section.add "SourceType", valid_597615
  var valid_597616 = query.getOrDefault("Enabled")
  valid_597616 = validateParameter(valid_597616, JBool, required = false, default = nil)
  if valid_597616 != nil:
    section.add "Enabled", valid_597616
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597617 = query.getOrDefault("Action")
  valid_597617 = validateParameter(valid_597617, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_597617 != nil:
    section.add "Action", valid_597617
  var valid_597618 = query.getOrDefault("SnsTopicArn")
  valid_597618 = validateParameter(valid_597618, JString, required = false,
                                 default = nil)
  if valid_597618 != nil:
    section.add "SnsTopicArn", valid_597618
  var valid_597619 = query.getOrDefault("EventCategories")
  valid_597619 = validateParameter(valid_597619, JArray, required = false,
                                 default = nil)
  if valid_597619 != nil:
    section.add "EventCategories", valid_597619
  var valid_597620 = query.getOrDefault("SubscriptionName")
  valid_597620 = validateParameter(valid_597620, JString, required = true,
                                 default = nil)
  if valid_597620 != nil:
    section.add "SubscriptionName", valid_597620
  var valid_597621 = query.getOrDefault("Version")
  valid_597621 = validateParameter(valid_597621, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597621 != nil:
    section.add "Version", valid_597621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597622 = header.getOrDefault("X-Amz-Date")
  valid_597622 = validateParameter(valid_597622, JString, required = false,
                                 default = nil)
  if valid_597622 != nil:
    section.add "X-Amz-Date", valid_597622
  var valid_597623 = header.getOrDefault("X-Amz-Security-Token")
  valid_597623 = validateParameter(valid_597623, JString, required = false,
                                 default = nil)
  if valid_597623 != nil:
    section.add "X-Amz-Security-Token", valid_597623
  var valid_597624 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597624 = validateParameter(valid_597624, JString, required = false,
                                 default = nil)
  if valid_597624 != nil:
    section.add "X-Amz-Content-Sha256", valid_597624
  var valid_597625 = header.getOrDefault("X-Amz-Algorithm")
  valid_597625 = validateParameter(valid_597625, JString, required = false,
                                 default = nil)
  if valid_597625 != nil:
    section.add "X-Amz-Algorithm", valid_597625
  var valid_597626 = header.getOrDefault("X-Amz-Signature")
  valid_597626 = validateParameter(valid_597626, JString, required = false,
                                 default = nil)
  if valid_597626 != nil:
    section.add "X-Amz-Signature", valid_597626
  var valid_597627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597627 = validateParameter(valid_597627, JString, required = false,
                                 default = nil)
  if valid_597627 != nil:
    section.add "X-Amz-SignedHeaders", valid_597627
  var valid_597628 = header.getOrDefault("X-Amz-Credential")
  valid_597628 = validateParameter(valid_597628, JString, required = false,
                                 default = nil)
  if valid_597628 != nil:
    section.add "X-Amz-Credential", valid_597628
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597629: Call_GetModifyEventSubscription_597612; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_597629.validator(path, query, header, formData, body)
  let scheme = call_597629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597629.url(scheme.get, call_597629.host, call_597629.base,
                         call_597629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597629, url, valid)

proc call*(call_597630: Call_GetModifyEventSubscription_597612;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   Version: string (required)
  var query_597631 = newJObject()
  add(query_597631, "SourceType", newJString(SourceType))
  add(query_597631, "Enabled", newJBool(Enabled))
  add(query_597631, "Action", newJString(Action))
  add(query_597631, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_597631.add "EventCategories", EventCategories
  add(query_597631, "SubscriptionName", newJString(SubscriptionName))
  add(query_597631, "Version", newJString(Version))
  result = call_597630.call(nil, query_597631, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_597612(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_597613, base: "/",
    url: url_GetModifyEventSubscription_597614,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyGlobalCluster_597671 = ref object of OpenApiRestCall_593421
proc url_PostModifyGlobalCluster_597673(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyGlobalCluster_597672(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597674 = query.getOrDefault("Action")
  valid_597674 = validateParameter(valid_597674, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_597674 != nil:
    section.add "Action", valid_597674
  var valid_597675 = query.getOrDefault("Version")
  valid_597675 = validateParameter(valid_597675, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597675 != nil:
    section.add "Version", valid_597675
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597676 = header.getOrDefault("X-Amz-Date")
  valid_597676 = validateParameter(valid_597676, JString, required = false,
                                 default = nil)
  if valid_597676 != nil:
    section.add "X-Amz-Date", valid_597676
  var valid_597677 = header.getOrDefault("X-Amz-Security-Token")
  valid_597677 = validateParameter(valid_597677, JString, required = false,
                                 default = nil)
  if valid_597677 != nil:
    section.add "X-Amz-Security-Token", valid_597677
  var valid_597678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597678 = validateParameter(valid_597678, JString, required = false,
                                 default = nil)
  if valid_597678 != nil:
    section.add "X-Amz-Content-Sha256", valid_597678
  var valid_597679 = header.getOrDefault("X-Amz-Algorithm")
  valid_597679 = validateParameter(valid_597679, JString, required = false,
                                 default = nil)
  if valid_597679 != nil:
    section.add "X-Amz-Algorithm", valid_597679
  var valid_597680 = header.getOrDefault("X-Amz-Signature")
  valid_597680 = validateParameter(valid_597680, JString, required = false,
                                 default = nil)
  if valid_597680 != nil:
    section.add "X-Amz-Signature", valid_597680
  var valid_597681 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597681 = validateParameter(valid_597681, JString, required = false,
                                 default = nil)
  if valid_597681 != nil:
    section.add "X-Amz-SignedHeaders", valid_597681
  var valid_597682 = header.getOrDefault("X-Amz-Credential")
  valid_597682 = validateParameter(valid_597682, JString, required = false,
                                 default = nil)
  if valid_597682 != nil:
    section.add "X-Amz-Credential", valid_597682
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_597683 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_597683 = validateParameter(valid_597683, JString, required = false,
                                 default = nil)
  if valid_597683 != nil:
    section.add "GlobalClusterIdentifier", valid_597683
  var valid_597684 = formData.getOrDefault("DeletionProtection")
  valid_597684 = validateParameter(valid_597684, JBool, required = false, default = nil)
  if valid_597684 != nil:
    section.add "DeletionProtection", valid_597684
  var valid_597685 = formData.getOrDefault("NewGlobalClusterIdentifier")
  valid_597685 = validateParameter(valid_597685, JString, required = false,
                                 default = nil)
  if valid_597685 != nil:
    section.add "NewGlobalClusterIdentifier", valid_597685
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597686: Call_PostModifyGlobalCluster_597671; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597686.validator(path, query, header, formData, body)
  let scheme = call_597686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597686.url(scheme.get, call_597686.host, call_597686.base,
                         call_597686.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597686, url, valid)

proc call*(call_597687: Call_PostModifyGlobalCluster_597671;
          GlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          NewGlobalClusterIdentifier: string = "";
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597688 = newJObject()
  var formData_597689 = newJObject()
  add(formData_597689, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_597689, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_597689, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_597688, "Action", newJString(Action))
  add(query_597688, "Version", newJString(Version))
  result = call_597687.call(nil, query_597688, nil, formData_597689, nil)

var postModifyGlobalCluster* = Call_PostModifyGlobalCluster_597671(
    name: "postModifyGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_PostModifyGlobalCluster_597672, base: "/",
    url: url_PostModifyGlobalCluster_597673, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyGlobalCluster_597653 = ref object of OpenApiRestCall_593421
proc url_GetModifyGlobalCluster_597655(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyGlobalCluster_597654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597656 = query.getOrDefault("NewGlobalClusterIdentifier")
  valid_597656 = validateParameter(valid_597656, JString, required = false,
                                 default = nil)
  if valid_597656 != nil:
    section.add "NewGlobalClusterIdentifier", valid_597656
  var valid_597657 = query.getOrDefault("DeletionProtection")
  valid_597657 = validateParameter(valid_597657, JBool, required = false, default = nil)
  if valid_597657 != nil:
    section.add "DeletionProtection", valid_597657
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597658 = query.getOrDefault("Action")
  valid_597658 = validateParameter(valid_597658, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_597658 != nil:
    section.add "Action", valid_597658
  var valid_597659 = query.getOrDefault("GlobalClusterIdentifier")
  valid_597659 = validateParameter(valid_597659, JString, required = false,
                                 default = nil)
  if valid_597659 != nil:
    section.add "GlobalClusterIdentifier", valid_597659
  var valid_597660 = query.getOrDefault("Version")
  valid_597660 = validateParameter(valid_597660, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597660 != nil:
    section.add "Version", valid_597660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597661 = header.getOrDefault("X-Amz-Date")
  valid_597661 = validateParameter(valid_597661, JString, required = false,
                                 default = nil)
  if valid_597661 != nil:
    section.add "X-Amz-Date", valid_597661
  var valid_597662 = header.getOrDefault("X-Amz-Security-Token")
  valid_597662 = validateParameter(valid_597662, JString, required = false,
                                 default = nil)
  if valid_597662 != nil:
    section.add "X-Amz-Security-Token", valid_597662
  var valid_597663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597663 = validateParameter(valid_597663, JString, required = false,
                                 default = nil)
  if valid_597663 != nil:
    section.add "X-Amz-Content-Sha256", valid_597663
  var valid_597664 = header.getOrDefault("X-Amz-Algorithm")
  valid_597664 = validateParameter(valid_597664, JString, required = false,
                                 default = nil)
  if valid_597664 != nil:
    section.add "X-Amz-Algorithm", valid_597664
  var valid_597665 = header.getOrDefault("X-Amz-Signature")
  valid_597665 = validateParameter(valid_597665, JString, required = false,
                                 default = nil)
  if valid_597665 != nil:
    section.add "X-Amz-Signature", valid_597665
  var valid_597666 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597666 = validateParameter(valid_597666, JString, required = false,
                                 default = nil)
  if valid_597666 != nil:
    section.add "X-Amz-SignedHeaders", valid_597666
  var valid_597667 = header.getOrDefault("X-Amz-Credential")
  valid_597667 = validateParameter(valid_597667, JString, required = false,
                                 default = nil)
  if valid_597667 != nil:
    section.add "X-Amz-Credential", valid_597667
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597668: Call_GetModifyGlobalCluster_597653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597668.validator(path, query, header, formData, body)
  let scheme = call_597668.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597668.url(scheme.get, call_597668.host, call_597668.base,
                         call_597668.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597668, url, valid)

proc call*(call_597669: Call_GetModifyGlobalCluster_597653;
          NewGlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          Action: string = "ModifyGlobalCluster";
          GlobalClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_597670 = newJObject()
  add(query_597670, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_597670, "DeletionProtection", newJBool(DeletionProtection))
  add(query_597670, "Action", newJString(Action))
  add(query_597670, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_597670, "Version", newJString(Version))
  result = call_597669.call(nil, query_597670, nil, nil, nil)

var getModifyGlobalCluster* = Call_GetModifyGlobalCluster_597653(
    name: "getModifyGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_GetModifyGlobalCluster_597654, base: "/",
    url: url_GetModifyGlobalCluster_597655, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyOptionGroup_597709 = ref object of OpenApiRestCall_593421
proc url_PostModifyOptionGroup_597711(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyOptionGroup_597710(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597712 = query.getOrDefault("Action")
  valid_597712 = validateParameter(valid_597712, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_597712 != nil:
    section.add "Action", valid_597712
  var valid_597713 = query.getOrDefault("Version")
  valid_597713 = validateParameter(valid_597713, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597713 != nil:
    section.add "Version", valid_597713
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597714 = header.getOrDefault("X-Amz-Date")
  valid_597714 = validateParameter(valid_597714, JString, required = false,
                                 default = nil)
  if valid_597714 != nil:
    section.add "X-Amz-Date", valid_597714
  var valid_597715 = header.getOrDefault("X-Amz-Security-Token")
  valid_597715 = validateParameter(valid_597715, JString, required = false,
                                 default = nil)
  if valid_597715 != nil:
    section.add "X-Amz-Security-Token", valid_597715
  var valid_597716 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597716 = validateParameter(valid_597716, JString, required = false,
                                 default = nil)
  if valid_597716 != nil:
    section.add "X-Amz-Content-Sha256", valid_597716
  var valid_597717 = header.getOrDefault("X-Amz-Algorithm")
  valid_597717 = validateParameter(valid_597717, JString, required = false,
                                 default = nil)
  if valid_597717 != nil:
    section.add "X-Amz-Algorithm", valid_597717
  var valid_597718 = header.getOrDefault("X-Amz-Signature")
  valid_597718 = validateParameter(valid_597718, JString, required = false,
                                 default = nil)
  if valid_597718 != nil:
    section.add "X-Amz-Signature", valid_597718
  var valid_597719 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597719 = validateParameter(valid_597719, JString, required = false,
                                 default = nil)
  if valid_597719 != nil:
    section.add "X-Amz-SignedHeaders", valid_597719
  var valid_597720 = header.getOrDefault("X-Amz-Credential")
  valid_597720 = validateParameter(valid_597720, JString, required = false,
                                 default = nil)
  if valid_597720 != nil:
    section.add "X-Amz-Credential", valid_597720
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  section = newJObject()
  var valid_597721 = formData.getOrDefault("OptionsToRemove")
  valid_597721 = validateParameter(valid_597721, JArray, required = false,
                                 default = nil)
  if valid_597721 != nil:
    section.add "OptionsToRemove", valid_597721
  var valid_597722 = formData.getOrDefault("ApplyImmediately")
  valid_597722 = validateParameter(valid_597722, JBool, required = false, default = nil)
  if valid_597722 != nil:
    section.add "ApplyImmediately", valid_597722
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_597723 = formData.getOrDefault("OptionGroupName")
  valid_597723 = validateParameter(valid_597723, JString, required = true,
                                 default = nil)
  if valid_597723 != nil:
    section.add "OptionGroupName", valid_597723
  var valid_597724 = formData.getOrDefault("OptionsToInclude")
  valid_597724 = validateParameter(valid_597724, JArray, required = false,
                                 default = nil)
  if valid_597724 != nil:
    section.add "OptionsToInclude", valid_597724
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597725: Call_PostModifyOptionGroup_597709; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_597725.validator(path, query, header, formData, body)
  let scheme = call_597725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597725.url(scheme.get, call_597725.host, call_597725.base,
                         call_597725.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597725, url, valid)

proc call*(call_597726: Call_PostModifyOptionGroup_597709; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597727 = newJObject()
  var formData_597728 = newJObject()
  if OptionsToRemove != nil:
    formData_597728.add "OptionsToRemove", OptionsToRemove
  add(formData_597728, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_597728, "OptionGroupName", newJString(OptionGroupName))
  if OptionsToInclude != nil:
    formData_597728.add "OptionsToInclude", OptionsToInclude
  add(query_597727, "Action", newJString(Action))
  add(query_597727, "Version", newJString(Version))
  result = call_597726.call(nil, query_597727, nil, formData_597728, nil)

var postModifyOptionGroup* = Call_PostModifyOptionGroup_597709(
    name: "postModifyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_PostModifyOptionGroup_597710, base: "/",
    url: url_PostModifyOptionGroup_597711, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyOptionGroup_597690 = ref object of OpenApiRestCall_593421
proc url_GetModifyOptionGroup_597692(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyOptionGroup_597691(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OptionGroupName` field"
  var valid_597693 = query.getOrDefault("OptionGroupName")
  valid_597693 = validateParameter(valid_597693, JString, required = true,
                                 default = nil)
  if valid_597693 != nil:
    section.add "OptionGroupName", valid_597693
  var valid_597694 = query.getOrDefault("OptionsToRemove")
  valid_597694 = validateParameter(valid_597694, JArray, required = false,
                                 default = nil)
  if valid_597694 != nil:
    section.add "OptionsToRemove", valid_597694
  var valid_597695 = query.getOrDefault("Action")
  valid_597695 = validateParameter(valid_597695, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_597695 != nil:
    section.add "Action", valid_597695
  var valid_597696 = query.getOrDefault("Version")
  valid_597696 = validateParameter(valid_597696, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597696 != nil:
    section.add "Version", valid_597696
  var valid_597697 = query.getOrDefault("ApplyImmediately")
  valid_597697 = validateParameter(valid_597697, JBool, required = false, default = nil)
  if valid_597697 != nil:
    section.add "ApplyImmediately", valid_597697
  var valid_597698 = query.getOrDefault("OptionsToInclude")
  valid_597698 = validateParameter(valid_597698, JArray, required = false,
                                 default = nil)
  if valid_597698 != nil:
    section.add "OptionsToInclude", valid_597698
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597699 = header.getOrDefault("X-Amz-Date")
  valid_597699 = validateParameter(valid_597699, JString, required = false,
                                 default = nil)
  if valid_597699 != nil:
    section.add "X-Amz-Date", valid_597699
  var valid_597700 = header.getOrDefault("X-Amz-Security-Token")
  valid_597700 = validateParameter(valid_597700, JString, required = false,
                                 default = nil)
  if valid_597700 != nil:
    section.add "X-Amz-Security-Token", valid_597700
  var valid_597701 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597701 = validateParameter(valid_597701, JString, required = false,
                                 default = nil)
  if valid_597701 != nil:
    section.add "X-Amz-Content-Sha256", valid_597701
  var valid_597702 = header.getOrDefault("X-Amz-Algorithm")
  valid_597702 = validateParameter(valid_597702, JString, required = false,
                                 default = nil)
  if valid_597702 != nil:
    section.add "X-Amz-Algorithm", valid_597702
  var valid_597703 = header.getOrDefault("X-Amz-Signature")
  valid_597703 = validateParameter(valid_597703, JString, required = false,
                                 default = nil)
  if valid_597703 != nil:
    section.add "X-Amz-Signature", valid_597703
  var valid_597704 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597704 = validateParameter(valid_597704, JString, required = false,
                                 default = nil)
  if valid_597704 != nil:
    section.add "X-Amz-SignedHeaders", valid_597704
  var valid_597705 = header.getOrDefault("X-Amz-Credential")
  valid_597705 = validateParameter(valid_597705, JString, required = false,
                                 default = nil)
  if valid_597705 != nil:
    section.add "X-Amz-Credential", valid_597705
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597706: Call_GetModifyOptionGroup_597690; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_597706.validator(path, query, header, formData, body)
  let scheme = call_597706.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597706.url(scheme.get, call_597706.host, call_597706.base,
                         call_597706.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597706, url, valid)

proc call*(call_597707: Call_GetModifyOptionGroup_597690; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil): Recallable =
  ## getModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  var query_597708 = newJObject()
  add(query_597708, "OptionGroupName", newJString(OptionGroupName))
  if OptionsToRemove != nil:
    query_597708.add "OptionsToRemove", OptionsToRemove
  add(query_597708, "Action", newJString(Action))
  add(query_597708, "Version", newJString(Version))
  add(query_597708, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToInclude != nil:
    query_597708.add "OptionsToInclude", OptionsToInclude
  result = call_597707.call(nil, query_597708, nil, nil, nil)

var getModifyOptionGroup* = Call_GetModifyOptionGroup_597690(
    name: "getModifyOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_GetModifyOptionGroup_597691, base: "/",
    url: url_GetModifyOptionGroup_597692, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplica_597747 = ref object of OpenApiRestCall_593421
proc url_PostPromoteReadReplica_597749(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPromoteReadReplica_597748(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597750 = query.getOrDefault("Action")
  valid_597750 = validateParameter(valid_597750, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_597750 != nil:
    section.add "Action", valid_597750
  var valid_597751 = query.getOrDefault("Version")
  valid_597751 = validateParameter(valid_597751, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597751 != nil:
    section.add "Version", valid_597751
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597752 = header.getOrDefault("X-Amz-Date")
  valid_597752 = validateParameter(valid_597752, JString, required = false,
                                 default = nil)
  if valid_597752 != nil:
    section.add "X-Amz-Date", valid_597752
  var valid_597753 = header.getOrDefault("X-Amz-Security-Token")
  valid_597753 = validateParameter(valid_597753, JString, required = false,
                                 default = nil)
  if valid_597753 != nil:
    section.add "X-Amz-Security-Token", valid_597753
  var valid_597754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597754 = validateParameter(valid_597754, JString, required = false,
                                 default = nil)
  if valid_597754 != nil:
    section.add "X-Amz-Content-Sha256", valid_597754
  var valid_597755 = header.getOrDefault("X-Amz-Algorithm")
  valid_597755 = validateParameter(valid_597755, JString, required = false,
                                 default = nil)
  if valid_597755 != nil:
    section.add "X-Amz-Algorithm", valid_597755
  var valid_597756 = header.getOrDefault("X-Amz-Signature")
  valid_597756 = validateParameter(valid_597756, JString, required = false,
                                 default = nil)
  if valid_597756 != nil:
    section.add "X-Amz-Signature", valid_597756
  var valid_597757 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597757 = validateParameter(valid_597757, JString, required = false,
                                 default = nil)
  if valid_597757 != nil:
    section.add "X-Amz-SignedHeaders", valid_597757
  var valid_597758 = header.getOrDefault("X-Amz-Credential")
  valid_597758 = validateParameter(valid_597758, JString, required = false,
                                 default = nil)
  if valid_597758 != nil:
    section.add "X-Amz-Credential", valid_597758
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597759 = formData.getOrDefault("DBInstanceIdentifier")
  valid_597759 = validateParameter(valid_597759, JString, required = true,
                                 default = nil)
  if valid_597759 != nil:
    section.add "DBInstanceIdentifier", valid_597759
  var valid_597760 = formData.getOrDefault("BackupRetentionPeriod")
  valid_597760 = validateParameter(valid_597760, JInt, required = false, default = nil)
  if valid_597760 != nil:
    section.add "BackupRetentionPeriod", valid_597760
  var valid_597761 = formData.getOrDefault("PreferredBackupWindow")
  valid_597761 = validateParameter(valid_597761, JString, required = false,
                                 default = nil)
  if valid_597761 != nil:
    section.add "PreferredBackupWindow", valid_597761
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597762: Call_PostPromoteReadReplica_597747; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_597762.validator(path, query, header, formData, body)
  let scheme = call_597762.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597762.url(scheme.get, call_597762.host, call_597762.base,
                         call_597762.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597762, url, valid)

proc call*(call_597763: Call_PostPromoteReadReplica_597747;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  var query_597764 = newJObject()
  var formData_597765 = newJObject()
  add(formData_597765, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_597765, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_597764, "Action", newJString(Action))
  add(formData_597765, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_597764, "Version", newJString(Version))
  result = call_597763.call(nil, query_597764, nil, formData_597765, nil)

var postPromoteReadReplica* = Call_PostPromoteReadReplica_597747(
    name: "postPromoteReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_PostPromoteReadReplica_597748, base: "/",
    url: url_PostPromoteReadReplica_597749, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplica_597729 = ref object of OpenApiRestCall_593421
proc url_GetPromoteReadReplica_597731(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPromoteReadReplica_597730(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  section = newJObject()
  var valid_597732 = query.getOrDefault("BackupRetentionPeriod")
  valid_597732 = validateParameter(valid_597732, JInt, required = false, default = nil)
  if valid_597732 != nil:
    section.add "BackupRetentionPeriod", valid_597732
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597733 = query.getOrDefault("Action")
  valid_597733 = validateParameter(valid_597733, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_597733 != nil:
    section.add "Action", valid_597733
  var valid_597734 = query.getOrDefault("PreferredBackupWindow")
  valid_597734 = validateParameter(valid_597734, JString, required = false,
                                 default = nil)
  if valid_597734 != nil:
    section.add "PreferredBackupWindow", valid_597734
  var valid_597735 = query.getOrDefault("Version")
  valid_597735 = validateParameter(valid_597735, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597735 != nil:
    section.add "Version", valid_597735
  var valid_597736 = query.getOrDefault("DBInstanceIdentifier")
  valid_597736 = validateParameter(valid_597736, JString, required = true,
                                 default = nil)
  if valid_597736 != nil:
    section.add "DBInstanceIdentifier", valid_597736
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597737 = header.getOrDefault("X-Amz-Date")
  valid_597737 = validateParameter(valid_597737, JString, required = false,
                                 default = nil)
  if valid_597737 != nil:
    section.add "X-Amz-Date", valid_597737
  var valid_597738 = header.getOrDefault("X-Amz-Security-Token")
  valid_597738 = validateParameter(valid_597738, JString, required = false,
                                 default = nil)
  if valid_597738 != nil:
    section.add "X-Amz-Security-Token", valid_597738
  var valid_597739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597739 = validateParameter(valid_597739, JString, required = false,
                                 default = nil)
  if valid_597739 != nil:
    section.add "X-Amz-Content-Sha256", valid_597739
  var valid_597740 = header.getOrDefault("X-Amz-Algorithm")
  valid_597740 = validateParameter(valid_597740, JString, required = false,
                                 default = nil)
  if valid_597740 != nil:
    section.add "X-Amz-Algorithm", valid_597740
  var valid_597741 = header.getOrDefault("X-Amz-Signature")
  valid_597741 = validateParameter(valid_597741, JString, required = false,
                                 default = nil)
  if valid_597741 != nil:
    section.add "X-Amz-Signature", valid_597741
  var valid_597742 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597742 = validateParameter(valid_597742, JString, required = false,
                                 default = nil)
  if valid_597742 != nil:
    section.add "X-Amz-SignedHeaders", valid_597742
  var valid_597743 = header.getOrDefault("X-Amz-Credential")
  valid_597743 = validateParameter(valid_597743, JString, required = false,
                                 default = nil)
  if valid_597743 != nil:
    section.add "X-Amz-Credential", valid_597743
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597744: Call_GetPromoteReadReplica_597729; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_597744.validator(path, query, header, formData, body)
  let scheme = call_597744.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597744.url(scheme.get, call_597744.host, call_597744.base,
                         call_597744.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597744, url, valid)

proc call*(call_597745: Call_GetPromoteReadReplica_597729;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  var query_597746 = newJObject()
  add(query_597746, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_597746, "Action", newJString(Action))
  add(query_597746, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_597746, "Version", newJString(Version))
  add(query_597746, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_597745.call(nil, query_597746, nil, nil, nil)

var getPromoteReadReplica* = Call_GetPromoteReadReplica_597729(
    name: "getPromoteReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_GetPromoteReadReplica_597730, base: "/",
    url: url_GetPromoteReadReplica_597731, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_597782 = ref object of OpenApiRestCall_593421
proc url_PostPromoteReadReplicaDBCluster_597784(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_597783(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597785 = query.getOrDefault("Action")
  valid_597785 = validateParameter(valid_597785, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_597785 != nil:
    section.add "Action", valid_597785
  var valid_597786 = query.getOrDefault("Version")
  valid_597786 = validateParameter(valid_597786, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597786 != nil:
    section.add "Version", valid_597786
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597787 = header.getOrDefault("X-Amz-Date")
  valid_597787 = validateParameter(valid_597787, JString, required = false,
                                 default = nil)
  if valid_597787 != nil:
    section.add "X-Amz-Date", valid_597787
  var valid_597788 = header.getOrDefault("X-Amz-Security-Token")
  valid_597788 = validateParameter(valid_597788, JString, required = false,
                                 default = nil)
  if valid_597788 != nil:
    section.add "X-Amz-Security-Token", valid_597788
  var valid_597789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597789 = validateParameter(valid_597789, JString, required = false,
                                 default = nil)
  if valid_597789 != nil:
    section.add "X-Amz-Content-Sha256", valid_597789
  var valid_597790 = header.getOrDefault("X-Amz-Algorithm")
  valid_597790 = validateParameter(valid_597790, JString, required = false,
                                 default = nil)
  if valid_597790 != nil:
    section.add "X-Amz-Algorithm", valid_597790
  var valid_597791 = header.getOrDefault("X-Amz-Signature")
  valid_597791 = validateParameter(valid_597791, JString, required = false,
                                 default = nil)
  if valid_597791 != nil:
    section.add "X-Amz-Signature", valid_597791
  var valid_597792 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597792 = validateParameter(valid_597792, JString, required = false,
                                 default = nil)
  if valid_597792 != nil:
    section.add "X-Amz-SignedHeaders", valid_597792
  var valid_597793 = header.getOrDefault("X-Amz-Credential")
  valid_597793 = validateParameter(valid_597793, JString, required = false,
                                 default = nil)
  if valid_597793 != nil:
    section.add "X-Amz-Credential", valid_597793
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597794 = formData.getOrDefault("DBClusterIdentifier")
  valid_597794 = validateParameter(valid_597794, JString, required = true,
                                 default = nil)
  if valid_597794 != nil:
    section.add "DBClusterIdentifier", valid_597794
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597795: Call_PostPromoteReadReplicaDBCluster_597782;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597795.validator(path, query, header, formData, body)
  let scheme = call_597795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597795.url(scheme.get, call_597795.host, call_597795.base,
                         call_597795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597795, url, valid)

proc call*(call_597796: Call_PostPromoteReadReplicaDBCluster_597782;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Version: string (required)
  var query_597797 = newJObject()
  var formData_597798 = newJObject()
  add(query_597797, "Action", newJString(Action))
  add(formData_597798, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597797, "Version", newJString(Version))
  result = call_597796.call(nil, query_597797, nil, formData_597798, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_597782(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_597783, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_597784,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_597766 = ref object of OpenApiRestCall_593421
proc url_GetPromoteReadReplicaDBCluster_597768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_597767(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597769 = query.getOrDefault("DBClusterIdentifier")
  valid_597769 = validateParameter(valid_597769, JString, required = true,
                                 default = nil)
  if valid_597769 != nil:
    section.add "DBClusterIdentifier", valid_597769
  var valid_597770 = query.getOrDefault("Action")
  valid_597770 = validateParameter(valid_597770, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_597770 != nil:
    section.add "Action", valid_597770
  var valid_597771 = query.getOrDefault("Version")
  valid_597771 = validateParameter(valid_597771, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597771 != nil:
    section.add "Version", valid_597771
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597772 = header.getOrDefault("X-Amz-Date")
  valid_597772 = validateParameter(valid_597772, JString, required = false,
                                 default = nil)
  if valid_597772 != nil:
    section.add "X-Amz-Date", valid_597772
  var valid_597773 = header.getOrDefault("X-Amz-Security-Token")
  valid_597773 = validateParameter(valid_597773, JString, required = false,
                                 default = nil)
  if valid_597773 != nil:
    section.add "X-Amz-Security-Token", valid_597773
  var valid_597774 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597774 = validateParameter(valid_597774, JString, required = false,
                                 default = nil)
  if valid_597774 != nil:
    section.add "X-Amz-Content-Sha256", valid_597774
  var valid_597775 = header.getOrDefault("X-Amz-Algorithm")
  valid_597775 = validateParameter(valid_597775, JString, required = false,
                                 default = nil)
  if valid_597775 != nil:
    section.add "X-Amz-Algorithm", valid_597775
  var valid_597776 = header.getOrDefault("X-Amz-Signature")
  valid_597776 = validateParameter(valid_597776, JString, required = false,
                                 default = nil)
  if valid_597776 != nil:
    section.add "X-Amz-Signature", valid_597776
  var valid_597777 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597777 = validateParameter(valid_597777, JString, required = false,
                                 default = nil)
  if valid_597777 != nil:
    section.add "X-Amz-SignedHeaders", valid_597777
  var valid_597778 = header.getOrDefault("X-Amz-Credential")
  valid_597778 = validateParameter(valid_597778, JString, required = false,
                                 default = nil)
  if valid_597778 != nil:
    section.add "X-Amz-Credential", valid_597778
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597779: Call_GetPromoteReadReplicaDBCluster_597766; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597779.validator(path, query, header, formData, body)
  let scheme = call_597779.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597779.url(scheme.get, call_597779.host, call_597779.base,
                         call_597779.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597779, url, valid)

proc call*(call_597780: Call_GetPromoteReadReplicaDBCluster_597766;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597781 = newJObject()
  add(query_597781, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597781, "Action", newJString(Action))
  add(query_597781, "Version", newJString(Version))
  result = call_597780.call(nil, query_597781, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_597766(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_597767, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_597768,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedDBInstancesOffering_597818 = ref object of OpenApiRestCall_593421
proc url_PostPurchaseReservedDBInstancesOffering_597820(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPurchaseReservedDBInstancesOffering_597819(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597821 = query.getOrDefault("Action")
  valid_597821 = validateParameter(valid_597821, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_597821 != nil:
    section.add "Action", valid_597821
  var valid_597822 = query.getOrDefault("Version")
  valid_597822 = validateParameter(valid_597822, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597822 != nil:
    section.add "Version", valid_597822
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597823 = header.getOrDefault("X-Amz-Date")
  valid_597823 = validateParameter(valid_597823, JString, required = false,
                                 default = nil)
  if valid_597823 != nil:
    section.add "X-Amz-Date", valid_597823
  var valid_597824 = header.getOrDefault("X-Amz-Security-Token")
  valid_597824 = validateParameter(valid_597824, JString, required = false,
                                 default = nil)
  if valid_597824 != nil:
    section.add "X-Amz-Security-Token", valid_597824
  var valid_597825 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597825 = validateParameter(valid_597825, JString, required = false,
                                 default = nil)
  if valid_597825 != nil:
    section.add "X-Amz-Content-Sha256", valid_597825
  var valid_597826 = header.getOrDefault("X-Amz-Algorithm")
  valid_597826 = validateParameter(valid_597826, JString, required = false,
                                 default = nil)
  if valid_597826 != nil:
    section.add "X-Amz-Algorithm", valid_597826
  var valid_597827 = header.getOrDefault("X-Amz-Signature")
  valid_597827 = validateParameter(valid_597827, JString, required = false,
                                 default = nil)
  if valid_597827 != nil:
    section.add "X-Amz-Signature", valid_597827
  var valid_597828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597828 = validateParameter(valid_597828, JString, required = false,
                                 default = nil)
  if valid_597828 != nil:
    section.add "X-Amz-SignedHeaders", valid_597828
  var valid_597829 = header.getOrDefault("X-Amz-Credential")
  valid_597829 = validateParameter(valid_597829, JString, required = false,
                                 default = nil)
  if valid_597829 != nil:
    section.add "X-Amz-Credential", valid_597829
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  section = newJObject()
  var valid_597830 = formData.getOrDefault("ReservedDBInstanceId")
  valid_597830 = validateParameter(valid_597830, JString, required = false,
                                 default = nil)
  if valid_597830 != nil:
    section.add "ReservedDBInstanceId", valid_597830
  var valid_597831 = formData.getOrDefault("Tags")
  valid_597831 = validateParameter(valid_597831, JArray, required = false,
                                 default = nil)
  if valid_597831 != nil:
    section.add "Tags", valid_597831
  var valid_597832 = formData.getOrDefault("DBInstanceCount")
  valid_597832 = validateParameter(valid_597832, JInt, required = false, default = nil)
  if valid_597832 != nil:
    section.add "DBInstanceCount", valid_597832
  assert formData != nil, "formData argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_597833 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_597833 = validateParameter(valid_597833, JString, required = true,
                                 default = nil)
  if valid_597833 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_597833
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597834: Call_PostPurchaseReservedDBInstancesOffering_597818;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_597834.validator(path, query, header, formData, body)
  let scheme = call_597834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597834.url(scheme.get, call_597834.host, call_597834.base,
                         call_597834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597834, url, valid)

proc call*(call_597835: Call_PostPurchaseReservedDBInstancesOffering_597818;
          ReservedDBInstancesOfferingId: string;
          ReservedDBInstanceId: string = ""; Tags: JsonNode = nil;
          DBInstanceCount: int = 0;
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## postPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  var query_597836 = newJObject()
  var formData_597837 = newJObject()
  add(formData_597837, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  if Tags != nil:
    formData_597837.add "Tags", Tags
  add(formData_597837, "DBInstanceCount", newJInt(DBInstanceCount))
  add(query_597836, "Action", newJString(Action))
  add(formData_597837, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_597836, "Version", newJString(Version))
  result = call_597835.call(nil, query_597836, nil, formData_597837, nil)

var postPurchaseReservedDBInstancesOffering* = Call_PostPurchaseReservedDBInstancesOffering_597818(
    name: "postPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_PostPurchaseReservedDBInstancesOffering_597819, base: "/",
    url: url_PostPurchaseReservedDBInstancesOffering_597820,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedDBInstancesOffering_597799 = ref object of OpenApiRestCall_593421
proc url_GetPurchaseReservedDBInstancesOffering_597801(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPurchaseReservedDBInstancesOffering_597800(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_597802 = query.getOrDefault("DBInstanceCount")
  valid_597802 = validateParameter(valid_597802, JInt, required = false, default = nil)
  if valid_597802 != nil:
    section.add "DBInstanceCount", valid_597802
  var valid_597803 = query.getOrDefault("Tags")
  valid_597803 = validateParameter(valid_597803, JArray, required = false,
                                 default = nil)
  if valid_597803 != nil:
    section.add "Tags", valid_597803
  var valid_597804 = query.getOrDefault("ReservedDBInstanceId")
  valid_597804 = validateParameter(valid_597804, JString, required = false,
                                 default = nil)
  if valid_597804 != nil:
    section.add "ReservedDBInstanceId", valid_597804
  assert query != nil, "query argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_597805 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_597805 = validateParameter(valid_597805, JString, required = true,
                                 default = nil)
  if valid_597805 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_597805
  var valid_597806 = query.getOrDefault("Action")
  valid_597806 = validateParameter(valid_597806, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_597806 != nil:
    section.add "Action", valid_597806
  var valid_597807 = query.getOrDefault("Version")
  valid_597807 = validateParameter(valid_597807, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597807 != nil:
    section.add "Version", valid_597807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597808 = header.getOrDefault("X-Amz-Date")
  valid_597808 = validateParameter(valid_597808, JString, required = false,
                                 default = nil)
  if valid_597808 != nil:
    section.add "X-Amz-Date", valid_597808
  var valid_597809 = header.getOrDefault("X-Amz-Security-Token")
  valid_597809 = validateParameter(valid_597809, JString, required = false,
                                 default = nil)
  if valid_597809 != nil:
    section.add "X-Amz-Security-Token", valid_597809
  var valid_597810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597810 = validateParameter(valid_597810, JString, required = false,
                                 default = nil)
  if valid_597810 != nil:
    section.add "X-Amz-Content-Sha256", valid_597810
  var valid_597811 = header.getOrDefault("X-Amz-Algorithm")
  valid_597811 = validateParameter(valid_597811, JString, required = false,
                                 default = nil)
  if valid_597811 != nil:
    section.add "X-Amz-Algorithm", valid_597811
  var valid_597812 = header.getOrDefault("X-Amz-Signature")
  valid_597812 = validateParameter(valid_597812, JString, required = false,
                                 default = nil)
  if valid_597812 != nil:
    section.add "X-Amz-Signature", valid_597812
  var valid_597813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597813 = validateParameter(valid_597813, JString, required = false,
                                 default = nil)
  if valid_597813 != nil:
    section.add "X-Amz-SignedHeaders", valid_597813
  var valid_597814 = header.getOrDefault("X-Amz-Credential")
  valid_597814 = validateParameter(valid_597814, JString, required = false,
                                 default = nil)
  if valid_597814 != nil:
    section.add "X-Amz-Credential", valid_597814
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597815: Call_GetPurchaseReservedDBInstancesOffering_597799;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_597815.validator(path, query, header, formData, body)
  let scheme = call_597815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597815.url(scheme.get, call_597815.host, call_597815.base,
                         call_597815.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597815, url, valid)

proc call*(call_597816: Call_GetPurchaseReservedDBInstancesOffering_597799;
          ReservedDBInstancesOfferingId: string; DBInstanceCount: int = 0;
          Tags: JsonNode = nil; ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## getPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597817 = newJObject()
  add(query_597817, "DBInstanceCount", newJInt(DBInstanceCount))
  if Tags != nil:
    query_597817.add "Tags", Tags
  add(query_597817, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_597817, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_597817, "Action", newJString(Action))
  add(query_597817, "Version", newJString(Version))
  result = call_597816.call(nil, query_597817, nil, nil, nil)

var getPurchaseReservedDBInstancesOffering* = Call_GetPurchaseReservedDBInstancesOffering_597799(
    name: "getPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_GetPurchaseReservedDBInstancesOffering_597800, base: "/",
    url: url_GetPurchaseReservedDBInstancesOffering_597801,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_597855 = ref object of OpenApiRestCall_593421
proc url_PostRebootDBInstance_597857(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRebootDBInstance_597856(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597858 = query.getOrDefault("Action")
  valid_597858 = validateParameter(valid_597858, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_597858 != nil:
    section.add "Action", valid_597858
  var valid_597859 = query.getOrDefault("Version")
  valid_597859 = validateParameter(valid_597859, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597859 != nil:
    section.add "Version", valid_597859
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597860 = header.getOrDefault("X-Amz-Date")
  valid_597860 = validateParameter(valid_597860, JString, required = false,
                                 default = nil)
  if valid_597860 != nil:
    section.add "X-Amz-Date", valid_597860
  var valid_597861 = header.getOrDefault("X-Amz-Security-Token")
  valid_597861 = validateParameter(valid_597861, JString, required = false,
                                 default = nil)
  if valid_597861 != nil:
    section.add "X-Amz-Security-Token", valid_597861
  var valid_597862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597862 = validateParameter(valid_597862, JString, required = false,
                                 default = nil)
  if valid_597862 != nil:
    section.add "X-Amz-Content-Sha256", valid_597862
  var valid_597863 = header.getOrDefault("X-Amz-Algorithm")
  valid_597863 = validateParameter(valid_597863, JString, required = false,
                                 default = nil)
  if valid_597863 != nil:
    section.add "X-Amz-Algorithm", valid_597863
  var valid_597864 = header.getOrDefault("X-Amz-Signature")
  valid_597864 = validateParameter(valid_597864, JString, required = false,
                                 default = nil)
  if valid_597864 != nil:
    section.add "X-Amz-Signature", valid_597864
  var valid_597865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597865 = validateParameter(valid_597865, JString, required = false,
                                 default = nil)
  if valid_597865 != nil:
    section.add "X-Amz-SignedHeaders", valid_597865
  var valid_597866 = header.getOrDefault("X-Amz-Credential")
  valid_597866 = validateParameter(valid_597866, JString, required = false,
                                 default = nil)
  if valid_597866 != nil:
    section.add "X-Amz-Credential", valid_597866
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597867 = formData.getOrDefault("DBInstanceIdentifier")
  valid_597867 = validateParameter(valid_597867, JString, required = true,
                                 default = nil)
  if valid_597867 != nil:
    section.add "DBInstanceIdentifier", valid_597867
  var valid_597868 = formData.getOrDefault("ForceFailover")
  valid_597868 = validateParameter(valid_597868, JBool, required = false, default = nil)
  if valid_597868 != nil:
    section.add "ForceFailover", valid_597868
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597869: Call_PostRebootDBInstance_597855; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_597869.validator(path, query, header, formData, body)
  let scheme = call_597869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597869.url(scheme.get, call_597869.host, call_597869.base,
                         call_597869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597869, url, valid)

proc call*(call_597870: Call_PostRebootDBInstance_597855;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   Version: string (required)
  var query_597871 = newJObject()
  var formData_597872 = newJObject()
  add(formData_597872, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_597871, "Action", newJString(Action))
  add(formData_597872, "ForceFailover", newJBool(ForceFailover))
  add(query_597871, "Version", newJString(Version))
  result = call_597870.call(nil, query_597871, nil, formData_597872, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_597855(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_597856, base: "/",
    url: url_PostRebootDBInstance_597857, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_597838 = ref object of OpenApiRestCall_593421
proc url_GetRebootDBInstance_597840(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRebootDBInstance_597839(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597841 = query.getOrDefault("Action")
  valid_597841 = validateParameter(valid_597841, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_597841 != nil:
    section.add "Action", valid_597841
  var valid_597842 = query.getOrDefault("ForceFailover")
  valid_597842 = validateParameter(valid_597842, JBool, required = false, default = nil)
  if valid_597842 != nil:
    section.add "ForceFailover", valid_597842
  var valid_597843 = query.getOrDefault("Version")
  valid_597843 = validateParameter(valid_597843, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597843 != nil:
    section.add "Version", valid_597843
  var valid_597844 = query.getOrDefault("DBInstanceIdentifier")
  valid_597844 = validateParameter(valid_597844, JString, required = true,
                                 default = nil)
  if valid_597844 != nil:
    section.add "DBInstanceIdentifier", valid_597844
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597845 = header.getOrDefault("X-Amz-Date")
  valid_597845 = validateParameter(valid_597845, JString, required = false,
                                 default = nil)
  if valid_597845 != nil:
    section.add "X-Amz-Date", valid_597845
  var valid_597846 = header.getOrDefault("X-Amz-Security-Token")
  valid_597846 = validateParameter(valid_597846, JString, required = false,
                                 default = nil)
  if valid_597846 != nil:
    section.add "X-Amz-Security-Token", valid_597846
  var valid_597847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597847 = validateParameter(valid_597847, JString, required = false,
                                 default = nil)
  if valid_597847 != nil:
    section.add "X-Amz-Content-Sha256", valid_597847
  var valid_597848 = header.getOrDefault("X-Amz-Algorithm")
  valid_597848 = validateParameter(valid_597848, JString, required = false,
                                 default = nil)
  if valid_597848 != nil:
    section.add "X-Amz-Algorithm", valid_597848
  var valid_597849 = header.getOrDefault("X-Amz-Signature")
  valid_597849 = validateParameter(valid_597849, JString, required = false,
                                 default = nil)
  if valid_597849 != nil:
    section.add "X-Amz-Signature", valid_597849
  var valid_597850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597850 = validateParameter(valid_597850, JString, required = false,
                                 default = nil)
  if valid_597850 != nil:
    section.add "X-Amz-SignedHeaders", valid_597850
  var valid_597851 = header.getOrDefault("X-Amz-Credential")
  valid_597851 = validateParameter(valid_597851, JString, required = false,
                                 default = nil)
  if valid_597851 != nil:
    section.add "X-Amz-Credential", valid_597851
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597852: Call_GetRebootDBInstance_597838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_597852.validator(path, query, header, formData, body)
  let scheme = call_597852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597852.url(scheme.get, call_597852.host, call_597852.base,
                         call_597852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597852, url, valid)

proc call*(call_597853: Call_GetRebootDBInstance_597838;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_597854 = newJObject()
  add(query_597854, "Action", newJString(Action))
  add(query_597854, "ForceFailover", newJBool(ForceFailover))
  add(query_597854, "Version", newJString(Version))
  add(query_597854, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_597853.call(nil, query_597854, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_597838(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_597839, base: "/",
    url: url_GetRebootDBInstance_597840, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveFromGlobalCluster_597890 = ref object of OpenApiRestCall_593421
proc url_PostRemoveFromGlobalCluster_597892(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveFromGlobalCluster_597891(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597893 = query.getOrDefault("Action")
  valid_597893 = validateParameter(valid_597893, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_597893 != nil:
    section.add "Action", valid_597893
  var valid_597894 = query.getOrDefault("Version")
  valid_597894 = validateParameter(valid_597894, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597894 != nil:
    section.add "Version", valid_597894
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597895 = header.getOrDefault("X-Amz-Date")
  valid_597895 = validateParameter(valid_597895, JString, required = false,
                                 default = nil)
  if valid_597895 != nil:
    section.add "X-Amz-Date", valid_597895
  var valid_597896 = header.getOrDefault("X-Amz-Security-Token")
  valid_597896 = validateParameter(valid_597896, JString, required = false,
                                 default = nil)
  if valid_597896 != nil:
    section.add "X-Amz-Security-Token", valid_597896
  var valid_597897 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597897 = validateParameter(valid_597897, JString, required = false,
                                 default = nil)
  if valid_597897 != nil:
    section.add "X-Amz-Content-Sha256", valid_597897
  var valid_597898 = header.getOrDefault("X-Amz-Algorithm")
  valid_597898 = validateParameter(valid_597898, JString, required = false,
                                 default = nil)
  if valid_597898 != nil:
    section.add "X-Amz-Algorithm", valid_597898
  var valid_597899 = header.getOrDefault("X-Amz-Signature")
  valid_597899 = validateParameter(valid_597899, JString, required = false,
                                 default = nil)
  if valid_597899 != nil:
    section.add "X-Amz-Signature", valid_597899
  var valid_597900 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597900 = validateParameter(valid_597900, JString, required = false,
                                 default = nil)
  if valid_597900 != nil:
    section.add "X-Amz-SignedHeaders", valid_597900
  var valid_597901 = header.getOrDefault("X-Amz-Credential")
  valid_597901 = validateParameter(valid_597901, JString, required = false,
                                 default = nil)
  if valid_597901 != nil:
    section.add "X-Amz-Credential", valid_597901
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  section = newJObject()
  var valid_597902 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_597902 = validateParameter(valid_597902, JString, required = false,
                                 default = nil)
  if valid_597902 != nil:
    section.add "GlobalClusterIdentifier", valid_597902
  var valid_597903 = formData.getOrDefault("DbClusterIdentifier")
  valid_597903 = validateParameter(valid_597903, JString, required = false,
                                 default = nil)
  if valid_597903 != nil:
    section.add "DbClusterIdentifier", valid_597903
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597904: Call_PostRemoveFromGlobalCluster_597890; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597904.validator(path, query, header, formData, body)
  let scheme = call_597904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597904.url(scheme.get, call_597904.host, call_597904.base,
                         call_597904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597904, url, valid)

proc call*(call_597905: Call_PostRemoveFromGlobalCluster_597890;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597906 = newJObject()
  var formData_597907 = newJObject()
  add(formData_597907, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_597907, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_597906, "Action", newJString(Action))
  add(query_597906, "Version", newJString(Version))
  result = call_597905.call(nil, query_597906, nil, formData_597907, nil)

var postRemoveFromGlobalCluster* = Call_PostRemoveFromGlobalCluster_597890(
    name: "postRemoveFromGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_PostRemoveFromGlobalCluster_597891, base: "/",
    url: url_PostRemoveFromGlobalCluster_597892,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveFromGlobalCluster_597873 = ref object of OpenApiRestCall_593421
proc url_GetRemoveFromGlobalCluster_597875(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveFromGlobalCluster_597874(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_597876 = query.getOrDefault("DbClusterIdentifier")
  valid_597876 = validateParameter(valid_597876, JString, required = false,
                                 default = nil)
  if valid_597876 != nil:
    section.add "DbClusterIdentifier", valid_597876
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597877 = query.getOrDefault("Action")
  valid_597877 = validateParameter(valid_597877, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_597877 != nil:
    section.add "Action", valid_597877
  var valid_597878 = query.getOrDefault("GlobalClusterIdentifier")
  valid_597878 = validateParameter(valid_597878, JString, required = false,
                                 default = nil)
  if valid_597878 != nil:
    section.add "GlobalClusterIdentifier", valid_597878
  var valid_597879 = query.getOrDefault("Version")
  valid_597879 = validateParameter(valid_597879, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597879 != nil:
    section.add "Version", valid_597879
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597880 = header.getOrDefault("X-Amz-Date")
  valid_597880 = validateParameter(valid_597880, JString, required = false,
                                 default = nil)
  if valid_597880 != nil:
    section.add "X-Amz-Date", valid_597880
  var valid_597881 = header.getOrDefault("X-Amz-Security-Token")
  valid_597881 = validateParameter(valid_597881, JString, required = false,
                                 default = nil)
  if valid_597881 != nil:
    section.add "X-Amz-Security-Token", valid_597881
  var valid_597882 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597882 = validateParameter(valid_597882, JString, required = false,
                                 default = nil)
  if valid_597882 != nil:
    section.add "X-Amz-Content-Sha256", valid_597882
  var valid_597883 = header.getOrDefault("X-Amz-Algorithm")
  valid_597883 = validateParameter(valid_597883, JString, required = false,
                                 default = nil)
  if valid_597883 != nil:
    section.add "X-Amz-Algorithm", valid_597883
  var valid_597884 = header.getOrDefault("X-Amz-Signature")
  valid_597884 = validateParameter(valid_597884, JString, required = false,
                                 default = nil)
  if valid_597884 != nil:
    section.add "X-Amz-Signature", valid_597884
  var valid_597885 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597885 = validateParameter(valid_597885, JString, required = false,
                                 default = nil)
  if valid_597885 != nil:
    section.add "X-Amz-SignedHeaders", valid_597885
  var valid_597886 = header.getOrDefault("X-Amz-Credential")
  valid_597886 = validateParameter(valid_597886, JString, required = false,
                                 default = nil)
  if valid_597886 != nil:
    section.add "X-Amz-Credential", valid_597886
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597887: Call_GetRemoveFromGlobalCluster_597873; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597887.validator(path, query, header, formData, body)
  let scheme = call_597887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597887.url(scheme.get, call_597887.host, call_597887.base,
                         call_597887.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597887, url, valid)

proc call*(call_597888: Call_GetRemoveFromGlobalCluster_597873;
          DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster";
          GlobalClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   Version: string (required)
  var query_597889 = newJObject()
  add(query_597889, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_597889, "Action", newJString(Action))
  add(query_597889, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_597889, "Version", newJString(Version))
  result = call_597888.call(nil, query_597889, nil, nil, nil)

var getRemoveFromGlobalCluster* = Call_GetRemoveFromGlobalCluster_597873(
    name: "getRemoveFromGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_GetRemoveFromGlobalCluster_597874, base: "/",
    url: url_GetRemoveFromGlobalCluster_597875,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_597926 = ref object of OpenApiRestCall_593421
proc url_PostRemoveRoleFromDBCluster_597928(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_597927(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597929 = query.getOrDefault("Action")
  valid_597929 = validateParameter(valid_597929, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_597929 != nil:
    section.add "Action", valid_597929
  var valid_597930 = query.getOrDefault("Version")
  valid_597930 = validateParameter(valid_597930, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597930 != nil:
    section.add "Version", valid_597930
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597931 = header.getOrDefault("X-Amz-Date")
  valid_597931 = validateParameter(valid_597931, JString, required = false,
                                 default = nil)
  if valid_597931 != nil:
    section.add "X-Amz-Date", valid_597931
  var valid_597932 = header.getOrDefault("X-Amz-Security-Token")
  valid_597932 = validateParameter(valid_597932, JString, required = false,
                                 default = nil)
  if valid_597932 != nil:
    section.add "X-Amz-Security-Token", valid_597932
  var valid_597933 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597933 = validateParameter(valid_597933, JString, required = false,
                                 default = nil)
  if valid_597933 != nil:
    section.add "X-Amz-Content-Sha256", valid_597933
  var valid_597934 = header.getOrDefault("X-Amz-Algorithm")
  valid_597934 = validateParameter(valid_597934, JString, required = false,
                                 default = nil)
  if valid_597934 != nil:
    section.add "X-Amz-Algorithm", valid_597934
  var valid_597935 = header.getOrDefault("X-Amz-Signature")
  valid_597935 = validateParameter(valid_597935, JString, required = false,
                                 default = nil)
  if valid_597935 != nil:
    section.add "X-Amz-Signature", valid_597935
  var valid_597936 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597936 = validateParameter(valid_597936, JString, required = false,
                                 default = nil)
  if valid_597936 != nil:
    section.add "X-Amz-SignedHeaders", valid_597936
  var valid_597937 = header.getOrDefault("X-Amz-Credential")
  valid_597937 = validateParameter(valid_597937, JString, required = false,
                                 default = nil)
  if valid_597937 != nil:
    section.add "X-Amz-Credential", valid_597937
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_597938 = formData.getOrDefault("RoleArn")
  valid_597938 = validateParameter(valid_597938, JString, required = true,
                                 default = nil)
  if valid_597938 != nil:
    section.add "RoleArn", valid_597938
  var valid_597939 = formData.getOrDefault("DBClusterIdentifier")
  valid_597939 = validateParameter(valid_597939, JString, required = true,
                                 default = nil)
  if valid_597939 != nil:
    section.add "DBClusterIdentifier", valid_597939
  var valid_597940 = formData.getOrDefault("FeatureName")
  valid_597940 = validateParameter(valid_597940, JString, required = false,
                                 default = nil)
  if valid_597940 != nil:
    section.add "FeatureName", valid_597940
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597941: Call_PostRemoveRoleFromDBCluster_597926; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597941.validator(path, query, header, formData, body)
  let scheme = call_597941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597941.url(scheme.get, call_597941.host, call_597941.base,
                         call_597941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597941, url, valid)

proc call*(call_597942: Call_PostRemoveRoleFromDBCluster_597926; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"; FeatureName: string = ""): Recallable =
  ## postRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Version: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  var query_597943 = newJObject()
  var formData_597944 = newJObject()
  add(formData_597944, "RoleArn", newJString(RoleArn))
  add(query_597943, "Action", newJString(Action))
  add(formData_597944, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597943, "Version", newJString(Version))
  add(formData_597944, "FeatureName", newJString(FeatureName))
  result = call_597942.call(nil, query_597943, nil, formData_597944, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_597926(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_597927, base: "/",
    url: url_PostRemoveRoleFromDBCluster_597928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_597908 = ref object of OpenApiRestCall_593421
proc url_GetRemoveRoleFromDBCluster_597910(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_597909(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: JString (required)
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597911 = query.getOrDefault("DBClusterIdentifier")
  valid_597911 = validateParameter(valid_597911, JString, required = true,
                                 default = nil)
  if valid_597911 != nil:
    section.add "DBClusterIdentifier", valid_597911
  var valid_597912 = query.getOrDefault("RoleArn")
  valid_597912 = validateParameter(valid_597912, JString, required = true,
                                 default = nil)
  if valid_597912 != nil:
    section.add "RoleArn", valid_597912
  var valid_597913 = query.getOrDefault("Action")
  valid_597913 = validateParameter(valid_597913, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_597913 != nil:
    section.add "Action", valid_597913
  var valid_597914 = query.getOrDefault("FeatureName")
  valid_597914 = validateParameter(valid_597914, JString, required = false,
                                 default = nil)
  if valid_597914 != nil:
    section.add "FeatureName", valid_597914
  var valid_597915 = query.getOrDefault("Version")
  valid_597915 = validateParameter(valid_597915, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597915 != nil:
    section.add "Version", valid_597915
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597916 = header.getOrDefault("X-Amz-Date")
  valid_597916 = validateParameter(valid_597916, JString, required = false,
                                 default = nil)
  if valid_597916 != nil:
    section.add "X-Amz-Date", valid_597916
  var valid_597917 = header.getOrDefault("X-Amz-Security-Token")
  valid_597917 = validateParameter(valid_597917, JString, required = false,
                                 default = nil)
  if valid_597917 != nil:
    section.add "X-Amz-Security-Token", valid_597917
  var valid_597918 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597918 = validateParameter(valid_597918, JString, required = false,
                                 default = nil)
  if valid_597918 != nil:
    section.add "X-Amz-Content-Sha256", valid_597918
  var valid_597919 = header.getOrDefault("X-Amz-Algorithm")
  valid_597919 = validateParameter(valid_597919, JString, required = false,
                                 default = nil)
  if valid_597919 != nil:
    section.add "X-Amz-Algorithm", valid_597919
  var valid_597920 = header.getOrDefault("X-Amz-Signature")
  valid_597920 = validateParameter(valid_597920, JString, required = false,
                                 default = nil)
  if valid_597920 != nil:
    section.add "X-Amz-Signature", valid_597920
  var valid_597921 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597921 = validateParameter(valid_597921, JString, required = false,
                                 default = nil)
  if valid_597921 != nil:
    section.add "X-Amz-SignedHeaders", valid_597921
  var valid_597922 = header.getOrDefault("X-Amz-Credential")
  valid_597922 = validateParameter(valid_597922, JString, required = false,
                                 default = nil)
  if valid_597922 != nil:
    section.add "X-Amz-Credential", valid_597922
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597923: Call_GetRemoveRoleFromDBCluster_597908; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597923.validator(path, query, header, formData, body)
  let scheme = call_597923.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597923.url(scheme.get, call_597923.host, call_597923.base,
                         call_597923.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597923, url, valid)

proc call*(call_597924: Call_GetRemoveRoleFromDBCluster_597908;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "RemoveRoleFromDBCluster"; FeatureName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: string (required)
  var query_597925 = newJObject()
  add(query_597925, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597925, "RoleArn", newJString(RoleArn))
  add(query_597925, "Action", newJString(Action))
  add(query_597925, "FeatureName", newJString(FeatureName))
  add(query_597925, "Version", newJString(Version))
  result = call_597924.call(nil, query_597925, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_597908(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_597909, base: "/",
    url: url_GetRemoveRoleFromDBCluster_597910,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBInstance_597963 = ref object of OpenApiRestCall_593421
proc url_PostRemoveRoleFromDBInstance_597965(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveRoleFromDBInstance_597964(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597966 = query.getOrDefault("Action")
  valid_597966 = validateParameter(valid_597966, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_597966 != nil:
    section.add "Action", valid_597966
  var valid_597967 = query.getOrDefault("Version")
  valid_597967 = validateParameter(valid_597967, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597967 != nil:
    section.add "Version", valid_597967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597968 = header.getOrDefault("X-Amz-Date")
  valid_597968 = validateParameter(valid_597968, JString, required = false,
                                 default = nil)
  if valid_597968 != nil:
    section.add "X-Amz-Date", valid_597968
  var valid_597969 = header.getOrDefault("X-Amz-Security-Token")
  valid_597969 = validateParameter(valid_597969, JString, required = false,
                                 default = nil)
  if valid_597969 != nil:
    section.add "X-Amz-Security-Token", valid_597969
  var valid_597970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597970 = validateParameter(valid_597970, JString, required = false,
                                 default = nil)
  if valid_597970 != nil:
    section.add "X-Amz-Content-Sha256", valid_597970
  var valid_597971 = header.getOrDefault("X-Amz-Algorithm")
  valid_597971 = validateParameter(valid_597971, JString, required = false,
                                 default = nil)
  if valid_597971 != nil:
    section.add "X-Amz-Algorithm", valid_597971
  var valid_597972 = header.getOrDefault("X-Amz-Signature")
  valid_597972 = validateParameter(valid_597972, JString, required = false,
                                 default = nil)
  if valid_597972 != nil:
    section.add "X-Amz-Signature", valid_597972
  var valid_597973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597973 = validateParameter(valid_597973, JString, required = false,
                                 default = nil)
  if valid_597973 != nil:
    section.add "X-Amz-SignedHeaders", valid_597973
  var valid_597974 = header.getOrDefault("X-Amz-Credential")
  valid_597974 = validateParameter(valid_597974, JString, required = false,
                                 default = nil)
  if valid_597974 != nil:
    section.add "X-Amz-Credential", valid_597974
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597975 = formData.getOrDefault("DBInstanceIdentifier")
  valid_597975 = validateParameter(valid_597975, JString, required = true,
                                 default = nil)
  if valid_597975 != nil:
    section.add "DBInstanceIdentifier", valid_597975
  var valid_597976 = formData.getOrDefault("RoleArn")
  valid_597976 = validateParameter(valid_597976, JString, required = true,
                                 default = nil)
  if valid_597976 != nil:
    section.add "RoleArn", valid_597976
  var valid_597977 = formData.getOrDefault("FeatureName")
  valid_597977 = validateParameter(valid_597977, JString, required = true,
                                 default = nil)
  if valid_597977 != nil:
    section.add "FeatureName", valid_597977
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597978: Call_PostRemoveRoleFromDBInstance_597963; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_597978.validator(path, query, header, formData, body)
  let scheme = call_597978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597978.url(scheme.get, call_597978.host, call_597978.base,
                         call_597978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597978, url, valid)

proc call*(call_597979: Call_PostRemoveRoleFromDBInstance_597963;
          DBInstanceIdentifier: string; RoleArn: string; FeatureName: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  var query_597980 = newJObject()
  var formData_597981 = newJObject()
  add(formData_597981, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_597981, "RoleArn", newJString(RoleArn))
  add(query_597980, "Action", newJString(Action))
  add(query_597980, "Version", newJString(Version))
  add(formData_597981, "FeatureName", newJString(FeatureName))
  result = call_597979.call(nil, query_597980, nil, formData_597981, nil)

var postRemoveRoleFromDBInstance* = Call_PostRemoveRoleFromDBInstance_597963(
    name: "postRemoveRoleFromDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_PostRemoveRoleFromDBInstance_597964, base: "/",
    url: url_PostRemoveRoleFromDBInstance_597965,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBInstance_597945 = ref object of OpenApiRestCall_593421
proc url_GetRemoveRoleFromDBInstance_597947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveRoleFromDBInstance_597946(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   Action: JString (required)
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_597948 = query.getOrDefault("RoleArn")
  valid_597948 = validateParameter(valid_597948, JString, required = true,
                                 default = nil)
  if valid_597948 != nil:
    section.add "RoleArn", valid_597948
  var valid_597949 = query.getOrDefault("Action")
  valid_597949 = validateParameter(valid_597949, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_597949 != nil:
    section.add "Action", valid_597949
  var valid_597950 = query.getOrDefault("FeatureName")
  valid_597950 = validateParameter(valid_597950, JString, required = true,
                                 default = nil)
  if valid_597950 != nil:
    section.add "FeatureName", valid_597950
  var valid_597951 = query.getOrDefault("Version")
  valid_597951 = validateParameter(valid_597951, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597951 != nil:
    section.add "Version", valid_597951
  var valid_597952 = query.getOrDefault("DBInstanceIdentifier")
  valid_597952 = validateParameter(valid_597952, JString, required = true,
                                 default = nil)
  if valid_597952 != nil:
    section.add "DBInstanceIdentifier", valid_597952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597953 = header.getOrDefault("X-Amz-Date")
  valid_597953 = validateParameter(valid_597953, JString, required = false,
                                 default = nil)
  if valid_597953 != nil:
    section.add "X-Amz-Date", valid_597953
  var valid_597954 = header.getOrDefault("X-Amz-Security-Token")
  valid_597954 = validateParameter(valid_597954, JString, required = false,
                                 default = nil)
  if valid_597954 != nil:
    section.add "X-Amz-Security-Token", valid_597954
  var valid_597955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597955 = validateParameter(valid_597955, JString, required = false,
                                 default = nil)
  if valid_597955 != nil:
    section.add "X-Amz-Content-Sha256", valid_597955
  var valid_597956 = header.getOrDefault("X-Amz-Algorithm")
  valid_597956 = validateParameter(valid_597956, JString, required = false,
                                 default = nil)
  if valid_597956 != nil:
    section.add "X-Amz-Algorithm", valid_597956
  var valid_597957 = header.getOrDefault("X-Amz-Signature")
  valid_597957 = validateParameter(valid_597957, JString, required = false,
                                 default = nil)
  if valid_597957 != nil:
    section.add "X-Amz-Signature", valid_597957
  var valid_597958 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597958 = validateParameter(valid_597958, JString, required = false,
                                 default = nil)
  if valid_597958 != nil:
    section.add "X-Amz-SignedHeaders", valid_597958
  var valid_597959 = header.getOrDefault("X-Amz-Credential")
  valid_597959 = validateParameter(valid_597959, JString, required = false,
                                 default = nil)
  if valid_597959 != nil:
    section.add "X-Amz-Credential", valid_597959
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597960: Call_GetRemoveRoleFromDBInstance_597945; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_597960.validator(path, query, header, formData, body)
  let scheme = call_597960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597960.url(scheme.get, call_597960.host, call_597960.base,
                         call_597960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597960, url, valid)

proc call*(call_597961: Call_GetRemoveRoleFromDBInstance_597945; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   Action: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  var query_597962 = newJObject()
  add(query_597962, "RoleArn", newJString(RoleArn))
  add(query_597962, "Action", newJString(Action))
  add(query_597962, "FeatureName", newJString(FeatureName))
  add(query_597962, "Version", newJString(Version))
  add(query_597962, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_597961.call(nil, query_597962, nil, nil, nil)

var getRemoveRoleFromDBInstance* = Call_GetRemoveRoleFromDBInstance_597945(
    name: "getRemoveRoleFromDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_GetRemoveRoleFromDBInstance_597946, base: "/",
    url: url_GetRemoveRoleFromDBInstance_597947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_597999 = ref object of OpenApiRestCall_593421
proc url_PostRemoveSourceIdentifierFromSubscription_598001(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_598000(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598002 = query.getOrDefault("Action")
  valid_598002 = validateParameter(valid_598002, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_598002 != nil:
    section.add "Action", valid_598002
  var valid_598003 = query.getOrDefault("Version")
  valid_598003 = validateParameter(valid_598003, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598003 != nil:
    section.add "Version", valid_598003
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598004 = header.getOrDefault("X-Amz-Date")
  valid_598004 = validateParameter(valid_598004, JString, required = false,
                                 default = nil)
  if valid_598004 != nil:
    section.add "X-Amz-Date", valid_598004
  var valid_598005 = header.getOrDefault("X-Amz-Security-Token")
  valid_598005 = validateParameter(valid_598005, JString, required = false,
                                 default = nil)
  if valid_598005 != nil:
    section.add "X-Amz-Security-Token", valid_598005
  var valid_598006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598006 = validateParameter(valid_598006, JString, required = false,
                                 default = nil)
  if valid_598006 != nil:
    section.add "X-Amz-Content-Sha256", valid_598006
  var valid_598007 = header.getOrDefault("X-Amz-Algorithm")
  valid_598007 = validateParameter(valid_598007, JString, required = false,
                                 default = nil)
  if valid_598007 != nil:
    section.add "X-Amz-Algorithm", valid_598007
  var valid_598008 = header.getOrDefault("X-Amz-Signature")
  valid_598008 = validateParameter(valid_598008, JString, required = false,
                                 default = nil)
  if valid_598008 != nil:
    section.add "X-Amz-Signature", valid_598008
  var valid_598009 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598009 = validateParameter(valid_598009, JString, required = false,
                                 default = nil)
  if valid_598009 != nil:
    section.add "X-Amz-SignedHeaders", valid_598009
  var valid_598010 = header.getOrDefault("X-Amz-Credential")
  valid_598010 = validateParameter(valid_598010, JString, required = false,
                                 default = nil)
  if valid_598010 != nil:
    section.add "X-Amz-Credential", valid_598010
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_598011 = formData.getOrDefault("SourceIdentifier")
  valid_598011 = validateParameter(valid_598011, JString, required = true,
                                 default = nil)
  if valid_598011 != nil:
    section.add "SourceIdentifier", valid_598011
  var valid_598012 = formData.getOrDefault("SubscriptionName")
  valid_598012 = validateParameter(valid_598012, JString, required = true,
                                 default = nil)
  if valid_598012 != nil:
    section.add "SubscriptionName", valid_598012
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598013: Call_PostRemoveSourceIdentifierFromSubscription_597999;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_598013.validator(path, query, header, formData, body)
  let scheme = call_598013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598013.url(scheme.get, call_598013.host, call_598013.base,
                         call_598013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598013, url, valid)

proc call*(call_598014: Call_PostRemoveSourceIdentifierFromSubscription_597999;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598015 = newJObject()
  var formData_598016 = newJObject()
  add(formData_598016, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_598016, "SubscriptionName", newJString(SubscriptionName))
  add(query_598015, "Action", newJString(Action))
  add(query_598015, "Version", newJString(Version))
  result = call_598014.call(nil, query_598015, nil, formData_598016, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_597999(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_598000,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_598001,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_597982 = ref object of OpenApiRestCall_593421
proc url_GetRemoveSourceIdentifierFromSubscription_597984(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_597983(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597985 = query.getOrDefault("Action")
  valid_597985 = validateParameter(valid_597985, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_597985 != nil:
    section.add "Action", valid_597985
  var valid_597986 = query.getOrDefault("SourceIdentifier")
  valid_597986 = validateParameter(valid_597986, JString, required = true,
                                 default = nil)
  if valid_597986 != nil:
    section.add "SourceIdentifier", valid_597986
  var valid_597987 = query.getOrDefault("SubscriptionName")
  valid_597987 = validateParameter(valid_597987, JString, required = true,
                                 default = nil)
  if valid_597987 != nil:
    section.add "SubscriptionName", valid_597987
  var valid_597988 = query.getOrDefault("Version")
  valid_597988 = validateParameter(valid_597988, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597988 != nil:
    section.add "Version", valid_597988
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597989 = header.getOrDefault("X-Amz-Date")
  valid_597989 = validateParameter(valid_597989, JString, required = false,
                                 default = nil)
  if valid_597989 != nil:
    section.add "X-Amz-Date", valid_597989
  var valid_597990 = header.getOrDefault("X-Amz-Security-Token")
  valid_597990 = validateParameter(valid_597990, JString, required = false,
                                 default = nil)
  if valid_597990 != nil:
    section.add "X-Amz-Security-Token", valid_597990
  var valid_597991 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597991 = validateParameter(valid_597991, JString, required = false,
                                 default = nil)
  if valid_597991 != nil:
    section.add "X-Amz-Content-Sha256", valid_597991
  var valid_597992 = header.getOrDefault("X-Amz-Algorithm")
  valid_597992 = validateParameter(valid_597992, JString, required = false,
                                 default = nil)
  if valid_597992 != nil:
    section.add "X-Amz-Algorithm", valid_597992
  var valid_597993 = header.getOrDefault("X-Amz-Signature")
  valid_597993 = validateParameter(valid_597993, JString, required = false,
                                 default = nil)
  if valid_597993 != nil:
    section.add "X-Amz-Signature", valid_597993
  var valid_597994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597994 = validateParameter(valid_597994, JString, required = false,
                                 default = nil)
  if valid_597994 != nil:
    section.add "X-Amz-SignedHeaders", valid_597994
  var valid_597995 = header.getOrDefault("X-Amz-Credential")
  valid_597995 = validateParameter(valid_597995, JString, required = false,
                                 default = nil)
  if valid_597995 != nil:
    section.add "X-Amz-Credential", valid_597995
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597996: Call_GetRemoveSourceIdentifierFromSubscription_597982;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_597996.validator(path, query, header, formData, body)
  let scheme = call_597996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597996.url(scheme.get, call_597996.host, call_597996.base,
                         call_597996.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597996, url, valid)

proc call*(call_597997: Call_GetRemoveSourceIdentifierFromSubscription_597982;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Version: string (required)
  var query_597998 = newJObject()
  add(query_597998, "Action", newJString(Action))
  add(query_597998, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_597998, "SubscriptionName", newJString(SubscriptionName))
  add(query_597998, "Version", newJString(Version))
  result = call_597997.call(nil, query_597998, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_597982(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_597983,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_597984,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_598034 = ref object of OpenApiRestCall_593421
proc url_PostRemoveTagsFromResource_598036(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveTagsFromResource_598035(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598037 = query.getOrDefault("Action")
  valid_598037 = validateParameter(valid_598037, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_598037 != nil:
    section.add "Action", valid_598037
  var valid_598038 = query.getOrDefault("Version")
  valid_598038 = validateParameter(valid_598038, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598038 != nil:
    section.add "Version", valid_598038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598039 = header.getOrDefault("X-Amz-Date")
  valid_598039 = validateParameter(valid_598039, JString, required = false,
                                 default = nil)
  if valid_598039 != nil:
    section.add "X-Amz-Date", valid_598039
  var valid_598040 = header.getOrDefault("X-Amz-Security-Token")
  valid_598040 = validateParameter(valid_598040, JString, required = false,
                                 default = nil)
  if valid_598040 != nil:
    section.add "X-Amz-Security-Token", valid_598040
  var valid_598041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598041 = validateParameter(valid_598041, JString, required = false,
                                 default = nil)
  if valid_598041 != nil:
    section.add "X-Amz-Content-Sha256", valid_598041
  var valid_598042 = header.getOrDefault("X-Amz-Algorithm")
  valid_598042 = validateParameter(valid_598042, JString, required = false,
                                 default = nil)
  if valid_598042 != nil:
    section.add "X-Amz-Algorithm", valid_598042
  var valid_598043 = header.getOrDefault("X-Amz-Signature")
  valid_598043 = validateParameter(valid_598043, JString, required = false,
                                 default = nil)
  if valid_598043 != nil:
    section.add "X-Amz-Signature", valid_598043
  var valid_598044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598044 = validateParameter(valid_598044, JString, required = false,
                                 default = nil)
  if valid_598044 != nil:
    section.add "X-Amz-SignedHeaders", valid_598044
  var valid_598045 = header.getOrDefault("X-Amz-Credential")
  valid_598045 = validateParameter(valid_598045, JString, required = false,
                                 default = nil)
  if valid_598045 != nil:
    section.add "X-Amz-Credential", valid_598045
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_598046 = formData.getOrDefault("TagKeys")
  valid_598046 = validateParameter(valid_598046, JArray, required = true, default = nil)
  if valid_598046 != nil:
    section.add "TagKeys", valid_598046
  var valid_598047 = formData.getOrDefault("ResourceName")
  valid_598047 = validateParameter(valid_598047, JString, required = true,
                                 default = nil)
  if valid_598047 != nil:
    section.add "ResourceName", valid_598047
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598048: Call_PostRemoveTagsFromResource_598034; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_598048.validator(path, query, header, formData, body)
  let scheme = call_598048.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598048.url(scheme.get, call_598048.host, call_598048.base,
                         call_598048.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598048, url, valid)

proc call*(call_598049: Call_PostRemoveTagsFromResource_598034; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_598050 = newJObject()
  var formData_598051 = newJObject()
  add(query_598050, "Action", newJString(Action))
  if TagKeys != nil:
    formData_598051.add "TagKeys", TagKeys
  add(formData_598051, "ResourceName", newJString(ResourceName))
  add(query_598050, "Version", newJString(Version))
  result = call_598049.call(nil, query_598050, nil, formData_598051, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_598034(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_598035, base: "/",
    url: url_PostRemoveTagsFromResource_598036,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_598017 = ref object of OpenApiRestCall_593421
proc url_GetRemoveTagsFromResource_598019(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveTagsFromResource_598018(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_598020 = query.getOrDefault("ResourceName")
  valid_598020 = validateParameter(valid_598020, JString, required = true,
                                 default = nil)
  if valid_598020 != nil:
    section.add "ResourceName", valid_598020
  var valid_598021 = query.getOrDefault("Action")
  valid_598021 = validateParameter(valid_598021, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_598021 != nil:
    section.add "Action", valid_598021
  var valid_598022 = query.getOrDefault("TagKeys")
  valid_598022 = validateParameter(valid_598022, JArray, required = true, default = nil)
  if valid_598022 != nil:
    section.add "TagKeys", valid_598022
  var valid_598023 = query.getOrDefault("Version")
  valid_598023 = validateParameter(valid_598023, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598023 != nil:
    section.add "Version", valid_598023
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598024 = header.getOrDefault("X-Amz-Date")
  valid_598024 = validateParameter(valid_598024, JString, required = false,
                                 default = nil)
  if valid_598024 != nil:
    section.add "X-Amz-Date", valid_598024
  var valid_598025 = header.getOrDefault("X-Amz-Security-Token")
  valid_598025 = validateParameter(valid_598025, JString, required = false,
                                 default = nil)
  if valid_598025 != nil:
    section.add "X-Amz-Security-Token", valid_598025
  var valid_598026 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598026 = validateParameter(valid_598026, JString, required = false,
                                 default = nil)
  if valid_598026 != nil:
    section.add "X-Amz-Content-Sha256", valid_598026
  var valid_598027 = header.getOrDefault("X-Amz-Algorithm")
  valid_598027 = validateParameter(valid_598027, JString, required = false,
                                 default = nil)
  if valid_598027 != nil:
    section.add "X-Amz-Algorithm", valid_598027
  var valid_598028 = header.getOrDefault("X-Amz-Signature")
  valid_598028 = validateParameter(valid_598028, JString, required = false,
                                 default = nil)
  if valid_598028 != nil:
    section.add "X-Amz-Signature", valid_598028
  var valid_598029 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598029 = validateParameter(valid_598029, JString, required = false,
                                 default = nil)
  if valid_598029 != nil:
    section.add "X-Amz-SignedHeaders", valid_598029
  var valid_598030 = header.getOrDefault("X-Amz-Credential")
  valid_598030 = validateParameter(valid_598030, JString, required = false,
                                 default = nil)
  if valid_598030 != nil:
    section.add "X-Amz-Credential", valid_598030
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598031: Call_GetRemoveTagsFromResource_598017; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_598031.validator(path, query, header, formData, body)
  let scheme = call_598031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598031.url(scheme.get, call_598031.host, call_598031.base,
                         call_598031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598031, url, valid)

proc call*(call_598032: Call_GetRemoveTagsFromResource_598017;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: string (required)
  var query_598033 = newJObject()
  add(query_598033, "ResourceName", newJString(ResourceName))
  add(query_598033, "Action", newJString(Action))
  if TagKeys != nil:
    query_598033.add "TagKeys", TagKeys
  add(query_598033, "Version", newJString(Version))
  result = call_598032.call(nil, query_598033, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_598017(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_598018, base: "/",
    url: url_GetRemoveTagsFromResource_598019,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_598070 = ref object of OpenApiRestCall_593421
proc url_PostResetDBClusterParameterGroup_598072(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetDBClusterParameterGroup_598071(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598073 = query.getOrDefault("Action")
  valid_598073 = validateParameter(valid_598073, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_598073 != nil:
    section.add "Action", valid_598073
  var valid_598074 = query.getOrDefault("Version")
  valid_598074 = validateParameter(valid_598074, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598074 != nil:
    section.add "Version", valid_598074
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598075 = header.getOrDefault("X-Amz-Date")
  valid_598075 = validateParameter(valid_598075, JString, required = false,
                                 default = nil)
  if valid_598075 != nil:
    section.add "X-Amz-Date", valid_598075
  var valid_598076 = header.getOrDefault("X-Amz-Security-Token")
  valid_598076 = validateParameter(valid_598076, JString, required = false,
                                 default = nil)
  if valid_598076 != nil:
    section.add "X-Amz-Security-Token", valid_598076
  var valid_598077 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598077 = validateParameter(valid_598077, JString, required = false,
                                 default = nil)
  if valid_598077 != nil:
    section.add "X-Amz-Content-Sha256", valid_598077
  var valid_598078 = header.getOrDefault("X-Amz-Algorithm")
  valid_598078 = validateParameter(valid_598078, JString, required = false,
                                 default = nil)
  if valid_598078 != nil:
    section.add "X-Amz-Algorithm", valid_598078
  var valid_598079 = header.getOrDefault("X-Amz-Signature")
  valid_598079 = validateParameter(valid_598079, JString, required = false,
                                 default = nil)
  if valid_598079 != nil:
    section.add "X-Amz-Signature", valid_598079
  var valid_598080 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598080 = validateParameter(valid_598080, JString, required = false,
                                 default = nil)
  if valid_598080 != nil:
    section.add "X-Amz-SignedHeaders", valid_598080
  var valid_598081 = header.getOrDefault("X-Amz-Credential")
  valid_598081 = validateParameter(valid_598081, JString, required = false,
                                 default = nil)
  if valid_598081 != nil:
    section.add "X-Amz-Credential", valid_598081
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  section = newJObject()
  var valid_598082 = formData.getOrDefault("Parameters")
  valid_598082 = validateParameter(valid_598082, JArray, required = false,
                                 default = nil)
  if valid_598082 != nil:
    section.add "Parameters", valid_598082
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_598083 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_598083 = validateParameter(valid_598083, JString, required = true,
                                 default = nil)
  if valid_598083 != nil:
    section.add "DBClusterParameterGroupName", valid_598083
  var valid_598084 = formData.getOrDefault("ResetAllParameters")
  valid_598084 = validateParameter(valid_598084, JBool, required = false, default = nil)
  if valid_598084 != nil:
    section.add "ResetAllParameters", valid_598084
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598085: Call_PostResetDBClusterParameterGroup_598070;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598085.validator(path, query, header, formData, body)
  let scheme = call_598085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598085.url(scheme.get, call_598085.host, call_598085.base,
                         call_598085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598085, url, valid)

proc call*(call_598086: Call_PostResetDBClusterParameterGroup_598070;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_598087 = newJObject()
  var formData_598088 = newJObject()
  if Parameters != nil:
    formData_598088.add "Parameters", Parameters
  add(query_598087, "Action", newJString(Action))
  add(formData_598088, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_598088, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_598087, "Version", newJString(Version))
  result = call_598086.call(nil, query_598087, nil, formData_598088, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_598070(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_598071, base: "/",
    url: url_PostResetDBClusterParameterGroup_598072,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_598052 = ref object of OpenApiRestCall_593421
proc url_GetResetDBClusterParameterGroup_598054(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetDBClusterParameterGroup_598053(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_598055 = query.getOrDefault("DBClusterParameterGroupName")
  valid_598055 = validateParameter(valid_598055, JString, required = true,
                                 default = nil)
  if valid_598055 != nil:
    section.add "DBClusterParameterGroupName", valid_598055
  var valid_598056 = query.getOrDefault("Parameters")
  valid_598056 = validateParameter(valid_598056, JArray, required = false,
                                 default = nil)
  if valid_598056 != nil:
    section.add "Parameters", valid_598056
  var valid_598057 = query.getOrDefault("Action")
  valid_598057 = validateParameter(valid_598057, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_598057 != nil:
    section.add "Action", valid_598057
  var valid_598058 = query.getOrDefault("ResetAllParameters")
  valid_598058 = validateParameter(valid_598058, JBool, required = false, default = nil)
  if valid_598058 != nil:
    section.add "ResetAllParameters", valid_598058
  var valid_598059 = query.getOrDefault("Version")
  valid_598059 = validateParameter(valid_598059, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598059 != nil:
    section.add "Version", valid_598059
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598060 = header.getOrDefault("X-Amz-Date")
  valid_598060 = validateParameter(valid_598060, JString, required = false,
                                 default = nil)
  if valid_598060 != nil:
    section.add "X-Amz-Date", valid_598060
  var valid_598061 = header.getOrDefault("X-Amz-Security-Token")
  valid_598061 = validateParameter(valid_598061, JString, required = false,
                                 default = nil)
  if valid_598061 != nil:
    section.add "X-Amz-Security-Token", valid_598061
  var valid_598062 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598062 = validateParameter(valid_598062, JString, required = false,
                                 default = nil)
  if valid_598062 != nil:
    section.add "X-Amz-Content-Sha256", valid_598062
  var valid_598063 = header.getOrDefault("X-Amz-Algorithm")
  valid_598063 = validateParameter(valid_598063, JString, required = false,
                                 default = nil)
  if valid_598063 != nil:
    section.add "X-Amz-Algorithm", valid_598063
  var valid_598064 = header.getOrDefault("X-Amz-Signature")
  valid_598064 = validateParameter(valid_598064, JString, required = false,
                                 default = nil)
  if valid_598064 != nil:
    section.add "X-Amz-Signature", valid_598064
  var valid_598065 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598065 = validateParameter(valid_598065, JString, required = false,
                                 default = nil)
  if valid_598065 != nil:
    section.add "X-Amz-SignedHeaders", valid_598065
  var valid_598066 = header.getOrDefault("X-Amz-Credential")
  valid_598066 = validateParameter(valid_598066, JString, required = false,
                                 default = nil)
  if valid_598066 != nil:
    section.add "X-Amz-Credential", valid_598066
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598067: Call_GetResetDBClusterParameterGroup_598052;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598067.validator(path, query, header, formData, body)
  let scheme = call_598067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598067.url(scheme.get, call_598067.host, call_598067.base,
                         call_598067.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598067, url, valid)

proc call*(call_598068: Call_GetResetDBClusterParameterGroup_598052;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_598069 = newJObject()
  add(query_598069, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_598069.add "Parameters", Parameters
  add(query_598069, "Action", newJString(Action))
  add(query_598069, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_598069, "Version", newJString(Version))
  result = call_598068.call(nil, query_598069, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_598052(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_598053, base: "/",
    url: url_GetResetDBClusterParameterGroup_598054,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_598107 = ref object of OpenApiRestCall_593421
proc url_PostResetDBParameterGroup_598109(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetDBParameterGroup_598108(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598110 = query.getOrDefault("Action")
  valid_598110 = validateParameter(valid_598110, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_598110 != nil:
    section.add "Action", valid_598110
  var valid_598111 = query.getOrDefault("Version")
  valid_598111 = validateParameter(valid_598111, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598111 != nil:
    section.add "Version", valid_598111
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598112 = header.getOrDefault("X-Amz-Date")
  valid_598112 = validateParameter(valid_598112, JString, required = false,
                                 default = nil)
  if valid_598112 != nil:
    section.add "X-Amz-Date", valid_598112
  var valid_598113 = header.getOrDefault("X-Amz-Security-Token")
  valid_598113 = validateParameter(valid_598113, JString, required = false,
                                 default = nil)
  if valid_598113 != nil:
    section.add "X-Amz-Security-Token", valid_598113
  var valid_598114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598114 = validateParameter(valid_598114, JString, required = false,
                                 default = nil)
  if valid_598114 != nil:
    section.add "X-Amz-Content-Sha256", valid_598114
  var valid_598115 = header.getOrDefault("X-Amz-Algorithm")
  valid_598115 = validateParameter(valid_598115, JString, required = false,
                                 default = nil)
  if valid_598115 != nil:
    section.add "X-Amz-Algorithm", valid_598115
  var valid_598116 = header.getOrDefault("X-Amz-Signature")
  valid_598116 = validateParameter(valid_598116, JString, required = false,
                                 default = nil)
  if valid_598116 != nil:
    section.add "X-Amz-Signature", valid_598116
  var valid_598117 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598117 = validateParameter(valid_598117, JString, required = false,
                                 default = nil)
  if valid_598117 != nil:
    section.add "X-Amz-SignedHeaders", valid_598117
  var valid_598118 = header.getOrDefault("X-Amz-Credential")
  valid_598118 = validateParameter(valid_598118, JString, required = false,
                                 default = nil)
  if valid_598118 != nil:
    section.add "X-Amz-Credential", valid_598118
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_598119 = formData.getOrDefault("DBParameterGroupName")
  valid_598119 = validateParameter(valid_598119, JString, required = true,
                                 default = nil)
  if valid_598119 != nil:
    section.add "DBParameterGroupName", valid_598119
  var valid_598120 = formData.getOrDefault("Parameters")
  valid_598120 = validateParameter(valid_598120, JArray, required = false,
                                 default = nil)
  if valid_598120 != nil:
    section.add "Parameters", valid_598120
  var valid_598121 = formData.getOrDefault("ResetAllParameters")
  valid_598121 = validateParameter(valid_598121, JBool, required = false, default = nil)
  if valid_598121 != nil:
    section.add "ResetAllParameters", valid_598121
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598122: Call_PostResetDBParameterGroup_598107; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_598122.validator(path, query, header, formData, body)
  let scheme = call_598122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598122.url(scheme.get, call_598122.host, call_598122.base,
                         call_598122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598122, url, valid)

proc call*(call_598123: Call_PostResetDBParameterGroup_598107;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Version: string (required)
  var query_598124 = newJObject()
  var formData_598125 = newJObject()
  add(formData_598125, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_598125.add "Parameters", Parameters
  add(query_598124, "Action", newJString(Action))
  add(formData_598125, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_598124, "Version", newJString(Version))
  result = call_598123.call(nil, query_598124, nil, formData_598125, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_598107(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_598108, base: "/",
    url: url_PostResetDBParameterGroup_598109,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_598089 = ref object of OpenApiRestCall_593421
proc url_GetResetDBParameterGroup_598091(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetDBParameterGroup_598090(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_598092 = query.getOrDefault("DBParameterGroupName")
  valid_598092 = validateParameter(valid_598092, JString, required = true,
                                 default = nil)
  if valid_598092 != nil:
    section.add "DBParameterGroupName", valid_598092
  var valid_598093 = query.getOrDefault("Parameters")
  valid_598093 = validateParameter(valid_598093, JArray, required = false,
                                 default = nil)
  if valid_598093 != nil:
    section.add "Parameters", valid_598093
  var valid_598094 = query.getOrDefault("Action")
  valid_598094 = validateParameter(valid_598094, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_598094 != nil:
    section.add "Action", valid_598094
  var valid_598095 = query.getOrDefault("ResetAllParameters")
  valid_598095 = validateParameter(valid_598095, JBool, required = false, default = nil)
  if valid_598095 != nil:
    section.add "ResetAllParameters", valid_598095
  var valid_598096 = query.getOrDefault("Version")
  valid_598096 = validateParameter(valid_598096, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598096 != nil:
    section.add "Version", valid_598096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598097 = header.getOrDefault("X-Amz-Date")
  valid_598097 = validateParameter(valid_598097, JString, required = false,
                                 default = nil)
  if valid_598097 != nil:
    section.add "X-Amz-Date", valid_598097
  var valid_598098 = header.getOrDefault("X-Amz-Security-Token")
  valid_598098 = validateParameter(valid_598098, JString, required = false,
                                 default = nil)
  if valid_598098 != nil:
    section.add "X-Amz-Security-Token", valid_598098
  var valid_598099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598099 = validateParameter(valid_598099, JString, required = false,
                                 default = nil)
  if valid_598099 != nil:
    section.add "X-Amz-Content-Sha256", valid_598099
  var valid_598100 = header.getOrDefault("X-Amz-Algorithm")
  valid_598100 = validateParameter(valid_598100, JString, required = false,
                                 default = nil)
  if valid_598100 != nil:
    section.add "X-Amz-Algorithm", valid_598100
  var valid_598101 = header.getOrDefault("X-Amz-Signature")
  valid_598101 = validateParameter(valid_598101, JString, required = false,
                                 default = nil)
  if valid_598101 != nil:
    section.add "X-Amz-Signature", valid_598101
  var valid_598102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598102 = validateParameter(valid_598102, JString, required = false,
                                 default = nil)
  if valid_598102 != nil:
    section.add "X-Amz-SignedHeaders", valid_598102
  var valid_598103 = header.getOrDefault("X-Amz-Credential")
  valid_598103 = validateParameter(valid_598103, JString, required = false,
                                 default = nil)
  if valid_598103 != nil:
    section.add "X-Amz-Credential", valid_598103
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598104: Call_GetResetDBParameterGroup_598089; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_598104.validator(path, query, header, formData, body)
  let scheme = call_598104.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598104.url(scheme.get, call_598104.host, call_598104.base,
                         call_598104.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598104, url, valid)

proc call*(call_598105: Call_GetResetDBParameterGroup_598089;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Version: string (required)
  var query_598106 = newJObject()
  add(query_598106, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_598106.add "Parameters", Parameters
  add(query_598106, "Action", newJString(Action))
  add(query_598106, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_598106, "Version", newJString(Version))
  result = call_598105.call(nil, query_598106, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_598089(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_598090, base: "/",
    url: url_GetResetDBParameterGroup_598091, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromS3_598170 = ref object of OpenApiRestCall_593421
proc url_PostRestoreDBClusterFromS3_598172(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterFromS3_598171(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598173 = query.getOrDefault("Action")
  valid_598173 = validateParameter(valid_598173, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_598173 != nil:
    section.add "Action", valid_598173
  var valid_598174 = query.getOrDefault("Version")
  valid_598174 = validateParameter(valid_598174, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598174 != nil:
    section.add "Version", valid_598174
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598175 = header.getOrDefault("X-Amz-Date")
  valid_598175 = validateParameter(valid_598175, JString, required = false,
                                 default = nil)
  if valid_598175 != nil:
    section.add "X-Amz-Date", valid_598175
  var valid_598176 = header.getOrDefault("X-Amz-Security-Token")
  valid_598176 = validateParameter(valid_598176, JString, required = false,
                                 default = nil)
  if valid_598176 != nil:
    section.add "X-Amz-Security-Token", valid_598176
  var valid_598177 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598177 = validateParameter(valid_598177, JString, required = false,
                                 default = nil)
  if valid_598177 != nil:
    section.add "X-Amz-Content-Sha256", valid_598177
  var valid_598178 = header.getOrDefault("X-Amz-Algorithm")
  valid_598178 = validateParameter(valid_598178, JString, required = false,
                                 default = nil)
  if valid_598178 != nil:
    section.add "X-Amz-Algorithm", valid_598178
  var valid_598179 = header.getOrDefault("X-Amz-Signature")
  valid_598179 = validateParameter(valid_598179, JString, required = false,
                                 default = nil)
  if valid_598179 != nil:
    section.add "X-Amz-Signature", valid_598179
  var valid_598180 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598180 = validateParameter(valid_598180, JString, required = false,
                                 default = nil)
  if valid_598180 != nil:
    section.add "X-Amz-SignedHeaders", valid_598180
  var valid_598181 = header.getOrDefault("X-Amz-Credential")
  valid_598181 = validateParameter(valid_598181, JString, required = false,
                                 default = nil)
  if valid_598181 != nil:
    section.add "X-Amz-Credential", valid_598181
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `S3BucketName` field"
  var valid_598182 = formData.getOrDefault("S3BucketName")
  valid_598182 = validateParameter(valid_598182, JString, required = true,
                                 default = nil)
  if valid_598182 != nil:
    section.add "S3BucketName", valid_598182
  var valid_598183 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_598183 = validateParameter(valid_598183, JBool, required = false, default = nil)
  if valid_598183 != nil:
    section.add "CopyTagsToSnapshot", valid_598183
  var valid_598184 = formData.getOrDefault("Port")
  valid_598184 = validateParameter(valid_598184, JInt, required = false, default = nil)
  if valid_598184 != nil:
    section.add "Port", valid_598184
  var valid_598185 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_598185 = validateParameter(valid_598185, JArray, required = false,
                                 default = nil)
  if valid_598185 != nil:
    section.add "VpcSecurityGroupIds", valid_598185
  var valid_598186 = formData.getOrDefault("Engine")
  valid_598186 = validateParameter(valid_598186, JString, required = true,
                                 default = nil)
  if valid_598186 != nil:
    section.add "Engine", valid_598186
  var valid_598187 = formData.getOrDefault("SourceEngine")
  valid_598187 = validateParameter(valid_598187, JString, required = true,
                                 default = nil)
  if valid_598187 != nil:
    section.add "SourceEngine", valid_598187
  var valid_598188 = formData.getOrDefault("OptionGroupName")
  valid_598188 = validateParameter(valid_598188, JString, required = false,
                                 default = nil)
  if valid_598188 != nil:
    section.add "OptionGroupName", valid_598188
  var valid_598189 = formData.getOrDefault("BackupRetentionPeriod")
  valid_598189 = validateParameter(valid_598189, JInt, required = false, default = nil)
  if valid_598189 != nil:
    section.add "BackupRetentionPeriod", valid_598189
  var valid_598190 = formData.getOrDefault("BacktrackWindow")
  valid_598190 = validateParameter(valid_598190, JInt, required = false, default = nil)
  if valid_598190 != nil:
    section.add "BacktrackWindow", valid_598190
  var valid_598191 = formData.getOrDefault("Tags")
  valid_598191 = validateParameter(valid_598191, JArray, required = false,
                                 default = nil)
  if valid_598191 != nil:
    section.add "Tags", valid_598191
  var valid_598192 = formData.getOrDefault("MasterUserPassword")
  valid_598192 = validateParameter(valid_598192, JString, required = true,
                                 default = nil)
  if valid_598192 != nil:
    section.add "MasterUserPassword", valid_598192
  var valid_598193 = formData.getOrDefault("SourceEngineVersion")
  valid_598193 = validateParameter(valid_598193, JString, required = true,
                                 default = nil)
  if valid_598193 != nil:
    section.add "SourceEngineVersion", valid_598193
  var valid_598194 = formData.getOrDefault("S3Prefix")
  valid_598194 = validateParameter(valid_598194, JString, required = false,
                                 default = nil)
  if valid_598194 != nil:
    section.add "S3Prefix", valid_598194
  var valid_598195 = formData.getOrDefault("DeletionProtection")
  valid_598195 = validateParameter(valid_598195, JBool, required = false, default = nil)
  if valid_598195 != nil:
    section.add "DeletionProtection", valid_598195
  var valid_598196 = formData.getOrDefault("DBSubnetGroupName")
  valid_598196 = validateParameter(valid_598196, JString, required = false,
                                 default = nil)
  if valid_598196 != nil:
    section.add "DBSubnetGroupName", valid_598196
  var valid_598197 = formData.getOrDefault("S3IngestionRoleArn")
  valid_598197 = validateParameter(valid_598197, JString, required = true,
                                 default = nil)
  if valid_598197 != nil:
    section.add "S3IngestionRoleArn", valid_598197
  var valid_598198 = formData.getOrDefault("AvailabilityZones")
  valid_598198 = validateParameter(valid_598198, JArray, required = false,
                                 default = nil)
  if valid_598198 != nil:
    section.add "AvailabilityZones", valid_598198
  var valid_598199 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_598199 = validateParameter(valid_598199, JString, required = false,
                                 default = nil)
  if valid_598199 != nil:
    section.add "DBClusterParameterGroupName", valid_598199
  var valid_598200 = formData.getOrDefault("MasterUsername")
  valid_598200 = validateParameter(valid_598200, JString, required = true,
                                 default = nil)
  if valid_598200 != nil:
    section.add "MasterUsername", valid_598200
  var valid_598201 = formData.getOrDefault("DatabaseName")
  valid_598201 = validateParameter(valid_598201, JString, required = false,
                                 default = nil)
  if valid_598201 != nil:
    section.add "DatabaseName", valid_598201
  var valid_598202 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_598202 = validateParameter(valid_598202, JArray, required = false,
                                 default = nil)
  if valid_598202 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598202
  var valid_598203 = formData.getOrDefault("CharacterSetName")
  valid_598203 = validateParameter(valid_598203, JString, required = false,
                                 default = nil)
  if valid_598203 != nil:
    section.add "CharacterSetName", valid_598203
  var valid_598204 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598204 = validateParameter(valid_598204, JBool, required = false, default = nil)
  if valid_598204 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598204
  var valid_598205 = formData.getOrDefault("PreferredBackupWindow")
  valid_598205 = validateParameter(valid_598205, JString, required = false,
                                 default = nil)
  if valid_598205 != nil:
    section.add "PreferredBackupWindow", valid_598205
  var valid_598206 = formData.getOrDefault("KmsKeyId")
  valid_598206 = validateParameter(valid_598206, JString, required = false,
                                 default = nil)
  if valid_598206 != nil:
    section.add "KmsKeyId", valid_598206
  var valid_598207 = formData.getOrDefault("StorageEncrypted")
  valid_598207 = validateParameter(valid_598207, JBool, required = false, default = nil)
  if valid_598207 != nil:
    section.add "StorageEncrypted", valid_598207
  var valid_598208 = formData.getOrDefault("DBClusterIdentifier")
  valid_598208 = validateParameter(valid_598208, JString, required = true,
                                 default = nil)
  if valid_598208 != nil:
    section.add "DBClusterIdentifier", valid_598208
  var valid_598209 = formData.getOrDefault("EngineVersion")
  valid_598209 = validateParameter(valid_598209, JString, required = false,
                                 default = nil)
  if valid_598209 != nil:
    section.add "EngineVersion", valid_598209
  var valid_598210 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_598210 = validateParameter(valid_598210, JString, required = false,
                                 default = nil)
  if valid_598210 != nil:
    section.add "PreferredMaintenanceWindow", valid_598210
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598211: Call_PostRestoreDBClusterFromS3_598170; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598211.validator(path, query, header, formData, body)
  let scheme = call_598211.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598211.url(scheme.get, call_598211.host, call_598211.base,
                         call_598211.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598211, url, valid)

proc call*(call_598212: Call_PostRestoreDBClusterFromS3_598170;
          S3BucketName: string; Engine: string; SourceEngine: string;
          MasterUserPassword: string; SourceEngineVersion: string;
          S3IngestionRoleArn: string; MasterUsername: string;
          DBClusterIdentifier: string; CopyTagsToSnapshot: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          OptionGroupName: string = ""; BackupRetentionPeriod: int = 0;
          BacktrackWindow: int = 0; Tags: JsonNode = nil; S3Prefix: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterFromS3";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; DatabaseName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_598213 = newJObject()
  var formData_598214 = newJObject()
  add(formData_598214, "S3BucketName", newJString(S3BucketName))
  add(formData_598214, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_598214, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_598214.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_598214, "Engine", newJString(Engine))
  add(formData_598214, "SourceEngine", newJString(SourceEngine))
  add(formData_598214, "OptionGroupName", newJString(OptionGroupName))
  add(formData_598214, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_598214, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_598214.add "Tags", Tags
  add(formData_598214, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_598214, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_598214, "S3Prefix", newJString(S3Prefix))
  add(formData_598214, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_598214, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_598214, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_598213, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_598214.add "AvailabilityZones", AvailabilityZones
  add(formData_598214, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_598214, "MasterUsername", newJString(MasterUsername))
  add(formData_598214, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_598214.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_598214, "CharacterSetName", newJString(CharacterSetName))
  add(formData_598214, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_598214, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_598214, "KmsKeyId", newJString(KmsKeyId))
  add(formData_598214, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_598214, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_598214, "EngineVersion", newJString(EngineVersion))
  add(query_598213, "Version", newJString(Version))
  add(formData_598214, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_598212.call(nil, query_598213, nil, formData_598214, nil)

var postRestoreDBClusterFromS3* = Call_PostRestoreDBClusterFromS3_598170(
    name: "postRestoreDBClusterFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_PostRestoreDBClusterFromS3_598171, base: "/",
    url: url_PostRestoreDBClusterFromS3_598172,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromS3_598126 = ref object of OpenApiRestCall_593421
proc url_GetRestoreDBClusterFromS3_598128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterFromS3_598127(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_598129 = query.getOrDefault("Engine")
  valid_598129 = validateParameter(valid_598129, JString, required = true,
                                 default = nil)
  if valid_598129 != nil:
    section.add "Engine", valid_598129
  var valid_598130 = query.getOrDefault("S3BucketName")
  valid_598130 = validateParameter(valid_598130, JString, required = true,
                                 default = nil)
  if valid_598130 != nil:
    section.add "S3BucketName", valid_598130
  var valid_598131 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_598131 = validateParameter(valid_598131, JString, required = false,
                                 default = nil)
  if valid_598131 != nil:
    section.add "PreferredMaintenanceWindow", valid_598131
  var valid_598132 = query.getOrDefault("DBClusterParameterGroupName")
  valid_598132 = validateParameter(valid_598132, JString, required = false,
                                 default = nil)
  if valid_598132 != nil:
    section.add "DBClusterParameterGroupName", valid_598132
  var valid_598133 = query.getOrDefault("StorageEncrypted")
  valid_598133 = validateParameter(valid_598133, JBool, required = false, default = nil)
  if valid_598133 != nil:
    section.add "StorageEncrypted", valid_598133
  var valid_598134 = query.getOrDefault("S3Prefix")
  valid_598134 = validateParameter(valid_598134, JString, required = false,
                                 default = nil)
  if valid_598134 != nil:
    section.add "S3Prefix", valid_598134
  var valid_598135 = query.getOrDefault("AvailabilityZones")
  valid_598135 = validateParameter(valid_598135, JArray, required = false,
                                 default = nil)
  if valid_598135 != nil:
    section.add "AvailabilityZones", valid_598135
  var valid_598136 = query.getOrDefault("DatabaseName")
  valid_598136 = validateParameter(valid_598136, JString, required = false,
                                 default = nil)
  if valid_598136 != nil:
    section.add "DatabaseName", valid_598136
  var valid_598137 = query.getOrDefault("DBClusterIdentifier")
  valid_598137 = validateParameter(valid_598137, JString, required = true,
                                 default = nil)
  if valid_598137 != nil:
    section.add "DBClusterIdentifier", valid_598137
  var valid_598138 = query.getOrDefault("OptionGroupName")
  valid_598138 = validateParameter(valid_598138, JString, required = false,
                                 default = nil)
  if valid_598138 != nil:
    section.add "OptionGroupName", valid_598138
  var valid_598139 = query.getOrDefault("MasterUserPassword")
  valid_598139 = validateParameter(valid_598139, JString, required = true,
                                 default = nil)
  if valid_598139 != nil:
    section.add "MasterUserPassword", valid_598139
  var valid_598140 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598140 = validateParameter(valid_598140, JBool, required = false, default = nil)
  if valid_598140 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598140
  var valid_598141 = query.getOrDefault("VpcSecurityGroupIds")
  valid_598141 = validateParameter(valid_598141, JArray, required = false,
                                 default = nil)
  if valid_598141 != nil:
    section.add "VpcSecurityGroupIds", valid_598141
  var valid_598142 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_598142 = validateParameter(valid_598142, JArray, required = false,
                                 default = nil)
  if valid_598142 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598142
  var valid_598143 = query.getOrDefault("Tags")
  valid_598143 = validateParameter(valid_598143, JArray, required = false,
                                 default = nil)
  if valid_598143 != nil:
    section.add "Tags", valid_598143
  var valid_598144 = query.getOrDefault("BackupRetentionPeriod")
  valid_598144 = validateParameter(valid_598144, JInt, required = false, default = nil)
  if valid_598144 != nil:
    section.add "BackupRetentionPeriod", valid_598144
  var valid_598145 = query.getOrDefault("S3IngestionRoleArn")
  valid_598145 = validateParameter(valid_598145, JString, required = true,
                                 default = nil)
  if valid_598145 != nil:
    section.add "S3IngestionRoleArn", valid_598145
  var valid_598146 = query.getOrDefault("CopyTagsToSnapshot")
  valid_598146 = validateParameter(valid_598146, JBool, required = false, default = nil)
  if valid_598146 != nil:
    section.add "CopyTagsToSnapshot", valid_598146
  var valid_598147 = query.getOrDefault("DeletionProtection")
  valid_598147 = validateParameter(valid_598147, JBool, required = false, default = nil)
  if valid_598147 != nil:
    section.add "DeletionProtection", valid_598147
  var valid_598148 = query.getOrDefault("Action")
  valid_598148 = validateParameter(valid_598148, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_598148 != nil:
    section.add "Action", valid_598148
  var valid_598149 = query.getOrDefault("CharacterSetName")
  valid_598149 = validateParameter(valid_598149, JString, required = false,
                                 default = nil)
  if valid_598149 != nil:
    section.add "CharacterSetName", valid_598149
  var valid_598150 = query.getOrDefault("DBSubnetGroupName")
  valid_598150 = validateParameter(valid_598150, JString, required = false,
                                 default = nil)
  if valid_598150 != nil:
    section.add "DBSubnetGroupName", valid_598150
  var valid_598151 = query.getOrDefault("KmsKeyId")
  valid_598151 = validateParameter(valid_598151, JString, required = false,
                                 default = nil)
  if valid_598151 != nil:
    section.add "KmsKeyId", valid_598151
  var valid_598152 = query.getOrDefault("SourceEngine")
  valid_598152 = validateParameter(valid_598152, JString, required = true,
                                 default = nil)
  if valid_598152 != nil:
    section.add "SourceEngine", valid_598152
  var valid_598153 = query.getOrDefault("BacktrackWindow")
  valid_598153 = validateParameter(valid_598153, JInt, required = false, default = nil)
  if valid_598153 != nil:
    section.add "BacktrackWindow", valid_598153
  var valid_598154 = query.getOrDefault("EngineVersion")
  valid_598154 = validateParameter(valid_598154, JString, required = false,
                                 default = nil)
  if valid_598154 != nil:
    section.add "EngineVersion", valid_598154
  var valid_598155 = query.getOrDefault("Port")
  valid_598155 = validateParameter(valid_598155, JInt, required = false, default = nil)
  if valid_598155 != nil:
    section.add "Port", valid_598155
  var valid_598156 = query.getOrDefault("SourceEngineVersion")
  valid_598156 = validateParameter(valid_598156, JString, required = true,
                                 default = nil)
  if valid_598156 != nil:
    section.add "SourceEngineVersion", valid_598156
  var valid_598157 = query.getOrDefault("PreferredBackupWindow")
  valid_598157 = validateParameter(valid_598157, JString, required = false,
                                 default = nil)
  if valid_598157 != nil:
    section.add "PreferredBackupWindow", valid_598157
  var valid_598158 = query.getOrDefault("Version")
  valid_598158 = validateParameter(valid_598158, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598158 != nil:
    section.add "Version", valid_598158
  var valid_598159 = query.getOrDefault("MasterUsername")
  valid_598159 = validateParameter(valid_598159, JString, required = true,
                                 default = nil)
  if valid_598159 != nil:
    section.add "MasterUsername", valid_598159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598160 = header.getOrDefault("X-Amz-Date")
  valid_598160 = validateParameter(valid_598160, JString, required = false,
                                 default = nil)
  if valid_598160 != nil:
    section.add "X-Amz-Date", valid_598160
  var valid_598161 = header.getOrDefault("X-Amz-Security-Token")
  valid_598161 = validateParameter(valid_598161, JString, required = false,
                                 default = nil)
  if valid_598161 != nil:
    section.add "X-Amz-Security-Token", valid_598161
  var valid_598162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598162 = validateParameter(valid_598162, JString, required = false,
                                 default = nil)
  if valid_598162 != nil:
    section.add "X-Amz-Content-Sha256", valid_598162
  var valid_598163 = header.getOrDefault("X-Amz-Algorithm")
  valid_598163 = validateParameter(valid_598163, JString, required = false,
                                 default = nil)
  if valid_598163 != nil:
    section.add "X-Amz-Algorithm", valid_598163
  var valid_598164 = header.getOrDefault("X-Amz-Signature")
  valid_598164 = validateParameter(valid_598164, JString, required = false,
                                 default = nil)
  if valid_598164 != nil:
    section.add "X-Amz-Signature", valid_598164
  var valid_598165 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598165 = validateParameter(valid_598165, JString, required = false,
                                 default = nil)
  if valid_598165 != nil:
    section.add "X-Amz-SignedHeaders", valid_598165
  var valid_598166 = header.getOrDefault("X-Amz-Credential")
  valid_598166 = validateParameter(valid_598166, JString, required = false,
                                 default = nil)
  if valid_598166 != nil:
    section.add "X-Amz-Credential", valid_598166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598167: Call_GetRestoreDBClusterFromS3_598126; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598167.validator(path, query, header, formData, body)
  let scheme = call_598167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598167.url(scheme.get, call_598167.host, call_598167.base,
                         call_598167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598167, url, valid)

proc call*(call_598168: Call_GetRestoreDBClusterFromS3_598126; Engine: string;
          S3BucketName: string; DBClusterIdentifier: string;
          MasterUserPassword: string; S3IngestionRoleArn: string;
          SourceEngine: string; SourceEngineVersion: string; MasterUsername: string;
          PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = ""; StorageEncrypted: bool = false;
          S3Prefix: string = ""; AvailabilityZones: JsonNode = nil;
          DatabaseName: string = ""; OptionGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          BackupRetentionPeriod: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false;
          Action: string = "RestoreDBClusterFromS3"; CharacterSetName: string = "";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          BacktrackWindow: int = 0; EngineVersion: string = ""; Port: int = 0;
          PreferredBackupWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  var query_598169 = newJObject()
  add(query_598169, "Engine", newJString(Engine))
  add(query_598169, "S3BucketName", newJString(S3BucketName))
  add(query_598169, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_598169, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_598169, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_598169, "S3Prefix", newJString(S3Prefix))
  if AvailabilityZones != nil:
    query_598169.add "AvailabilityZones", AvailabilityZones
  add(query_598169, "DatabaseName", newJString(DatabaseName))
  add(query_598169, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_598169, "OptionGroupName", newJString(OptionGroupName))
  add(query_598169, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_598169, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if VpcSecurityGroupIds != nil:
    query_598169.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_598169.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_598169.add "Tags", Tags
  add(query_598169, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_598169, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_598169, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_598169, "DeletionProtection", newJBool(DeletionProtection))
  add(query_598169, "Action", newJString(Action))
  add(query_598169, "CharacterSetName", newJString(CharacterSetName))
  add(query_598169, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_598169, "KmsKeyId", newJString(KmsKeyId))
  add(query_598169, "SourceEngine", newJString(SourceEngine))
  add(query_598169, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_598169, "EngineVersion", newJString(EngineVersion))
  add(query_598169, "Port", newJInt(Port))
  add(query_598169, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_598169, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_598169, "Version", newJString(Version))
  add(query_598169, "MasterUsername", newJString(MasterUsername))
  result = call_598168.call(nil, query_598169, nil, nil, nil)

var getRestoreDBClusterFromS3* = Call_GetRestoreDBClusterFromS3_598126(
    name: "getRestoreDBClusterFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_GetRestoreDBClusterFromS3_598127, base: "/",
    url: url_GetRestoreDBClusterFromS3_598128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_598254 = ref object of OpenApiRestCall_593421
proc url_PostRestoreDBClusterFromSnapshot_598256(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_598255(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598257 = query.getOrDefault("Action")
  valid_598257 = validateParameter(valid_598257, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_598257 != nil:
    section.add "Action", valid_598257
  var valid_598258 = query.getOrDefault("Version")
  valid_598258 = validateParameter(valid_598258, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598258 != nil:
    section.add "Version", valid_598258
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598259 = header.getOrDefault("X-Amz-Date")
  valid_598259 = validateParameter(valid_598259, JString, required = false,
                                 default = nil)
  if valid_598259 != nil:
    section.add "X-Amz-Date", valid_598259
  var valid_598260 = header.getOrDefault("X-Amz-Security-Token")
  valid_598260 = validateParameter(valid_598260, JString, required = false,
                                 default = nil)
  if valid_598260 != nil:
    section.add "X-Amz-Security-Token", valid_598260
  var valid_598261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598261 = validateParameter(valid_598261, JString, required = false,
                                 default = nil)
  if valid_598261 != nil:
    section.add "X-Amz-Content-Sha256", valid_598261
  var valid_598262 = header.getOrDefault("X-Amz-Algorithm")
  valid_598262 = validateParameter(valid_598262, JString, required = false,
                                 default = nil)
  if valid_598262 != nil:
    section.add "X-Amz-Algorithm", valid_598262
  var valid_598263 = header.getOrDefault("X-Amz-Signature")
  valid_598263 = validateParameter(valid_598263, JString, required = false,
                                 default = nil)
  if valid_598263 != nil:
    section.add "X-Amz-Signature", valid_598263
  var valid_598264 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598264 = validateParameter(valid_598264, JString, required = false,
                                 default = nil)
  if valid_598264 != nil:
    section.add "X-Amz-SignedHeaders", valid_598264
  var valid_598265 = header.getOrDefault("X-Amz-Credential")
  valid_598265 = validateParameter(valid_598265, JString, required = false,
                                 default = nil)
  if valid_598265 != nil:
    section.add "X-Amz-Credential", valid_598265
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  section = newJObject()
  var valid_598266 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_598266 = validateParameter(valid_598266, JString, required = false,
                                 default = nil)
  if valid_598266 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_598266
  var valid_598267 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_598267 = validateParameter(valid_598267, JString, required = false,
                                 default = nil)
  if valid_598267 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_598267
  var valid_598268 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_598268 = validateParameter(valid_598268, JString, required = false,
                                 default = nil)
  if valid_598268 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_598268
  var valid_598269 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_598269 = validateParameter(valid_598269, JBool, required = false, default = nil)
  if valid_598269 != nil:
    section.add "CopyTagsToSnapshot", valid_598269
  var valid_598270 = formData.getOrDefault("Port")
  valid_598270 = validateParameter(valid_598270, JInt, required = false, default = nil)
  if valid_598270 != nil:
    section.add "Port", valid_598270
  var valid_598271 = formData.getOrDefault("EngineMode")
  valid_598271 = validateParameter(valid_598271, JString, required = false,
                                 default = nil)
  if valid_598271 != nil:
    section.add "EngineMode", valid_598271
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_598272 = formData.getOrDefault("Engine")
  valid_598272 = validateParameter(valid_598272, JString, required = true,
                                 default = nil)
  if valid_598272 != nil:
    section.add "Engine", valid_598272
  var valid_598273 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_598273 = validateParameter(valid_598273, JArray, required = false,
                                 default = nil)
  if valid_598273 != nil:
    section.add "VpcSecurityGroupIds", valid_598273
  var valid_598274 = formData.getOrDefault("OptionGroupName")
  valid_598274 = validateParameter(valid_598274, JString, required = false,
                                 default = nil)
  if valid_598274 != nil:
    section.add "OptionGroupName", valid_598274
  var valid_598275 = formData.getOrDefault("BacktrackWindow")
  valid_598275 = validateParameter(valid_598275, JInt, required = false, default = nil)
  if valid_598275 != nil:
    section.add "BacktrackWindow", valid_598275
  var valid_598276 = formData.getOrDefault("Tags")
  valid_598276 = validateParameter(valid_598276, JArray, required = false,
                                 default = nil)
  if valid_598276 != nil:
    section.add "Tags", valid_598276
  var valid_598277 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_598277 = validateParameter(valid_598277, JString, required = false,
                                 default = nil)
  if valid_598277 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_598277
  var valid_598278 = formData.getOrDefault("DeletionProtection")
  valid_598278 = validateParameter(valid_598278, JBool, required = false, default = nil)
  if valid_598278 != nil:
    section.add "DeletionProtection", valid_598278
  var valid_598279 = formData.getOrDefault("DBSubnetGroupName")
  valid_598279 = validateParameter(valid_598279, JString, required = false,
                                 default = nil)
  if valid_598279 != nil:
    section.add "DBSubnetGroupName", valid_598279
  var valid_598280 = formData.getOrDefault("AvailabilityZones")
  valid_598280 = validateParameter(valid_598280, JArray, required = false,
                                 default = nil)
  if valid_598280 != nil:
    section.add "AvailabilityZones", valid_598280
  var valid_598281 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_598281 = validateParameter(valid_598281, JString, required = false,
                                 default = nil)
  if valid_598281 != nil:
    section.add "DBClusterParameterGroupName", valid_598281
  var valid_598282 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_598282 = validateParameter(valid_598282, JString, required = false,
                                 default = nil)
  if valid_598282 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_598282
  var valid_598283 = formData.getOrDefault("DatabaseName")
  valid_598283 = validateParameter(valid_598283, JString, required = false,
                                 default = nil)
  if valid_598283 != nil:
    section.add "DatabaseName", valid_598283
  var valid_598284 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_598284 = validateParameter(valid_598284, JArray, required = false,
                                 default = nil)
  if valid_598284 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598284
  var valid_598285 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598285 = validateParameter(valid_598285, JBool, required = false, default = nil)
  if valid_598285 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598285
  var valid_598286 = formData.getOrDefault("KmsKeyId")
  valid_598286 = validateParameter(valid_598286, JString, required = false,
                                 default = nil)
  if valid_598286 != nil:
    section.add "KmsKeyId", valid_598286
  var valid_598287 = formData.getOrDefault("SnapshotIdentifier")
  valid_598287 = validateParameter(valid_598287, JString, required = true,
                                 default = nil)
  if valid_598287 != nil:
    section.add "SnapshotIdentifier", valid_598287
  var valid_598288 = formData.getOrDefault("DBClusterIdentifier")
  valid_598288 = validateParameter(valid_598288, JString, required = true,
                                 default = nil)
  if valid_598288 != nil:
    section.add "DBClusterIdentifier", valid_598288
  var valid_598289 = formData.getOrDefault("EngineVersion")
  valid_598289 = validateParameter(valid_598289, JString, required = false,
                                 default = nil)
  if valid_598289 != nil:
    section.add "EngineVersion", valid_598289
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598290: Call_PostRestoreDBClusterFromSnapshot_598254;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598290.validator(path, query, header, formData, body)
  let scheme = call_598290.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598290.url(scheme.get, call_598290.host, call_598290.base,
                         call_598290.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598290, url, valid)

proc call*(call_598291: Call_PostRestoreDBClusterFromSnapshot_598254;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationMaxCapacity: string = "";
          ScalingConfigurationAutoPause: string = "";
          CopyTagsToSnapshot: bool = false; Port: int = 0; EngineMode: string = "";
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          BacktrackWindow: int = 0; Tags: JsonNode = nil;
          ScalingConfigurationMinCapacity: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterFromSnapshot";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          DatabaseName: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EngineVersion: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Version: string (required)
  var query_598292 = newJObject()
  var formData_598293 = newJObject()
  add(formData_598293, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_598293, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(formData_598293, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_598293, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_598293, "Port", newJInt(Port))
  add(formData_598293, "EngineMode", newJString(EngineMode))
  add(formData_598293, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_598293.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_598293, "OptionGroupName", newJString(OptionGroupName))
  add(formData_598293, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_598293.add "Tags", Tags
  add(formData_598293, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_598293, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_598293, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_598292, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_598293.add "AvailabilityZones", AvailabilityZones
  add(formData_598293, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_598293, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_598293, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_598293.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_598293, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_598293, "KmsKeyId", newJString(KmsKeyId))
  add(formData_598293, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_598293, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_598293, "EngineVersion", newJString(EngineVersion))
  add(query_598292, "Version", newJString(Version))
  result = call_598291.call(nil, query_598292, nil, formData_598293, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_598254(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_598255, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_598256,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_598215 = ref object of OpenApiRestCall_593421
proc url_GetRestoreDBClusterFromSnapshot_598217(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_598216(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_598218 = query.getOrDefault("Engine")
  valid_598218 = validateParameter(valid_598218, JString, required = true,
                                 default = nil)
  if valid_598218 != nil:
    section.add "Engine", valid_598218
  var valid_598219 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_598219 = validateParameter(valid_598219, JString, required = false,
                                 default = nil)
  if valid_598219 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_598219
  var valid_598220 = query.getOrDefault("DBClusterParameterGroupName")
  valid_598220 = validateParameter(valid_598220, JString, required = false,
                                 default = nil)
  if valid_598220 != nil:
    section.add "DBClusterParameterGroupName", valid_598220
  var valid_598221 = query.getOrDefault("AvailabilityZones")
  valid_598221 = validateParameter(valid_598221, JArray, required = false,
                                 default = nil)
  if valid_598221 != nil:
    section.add "AvailabilityZones", valid_598221
  var valid_598222 = query.getOrDefault("DatabaseName")
  valid_598222 = validateParameter(valid_598222, JString, required = false,
                                 default = nil)
  if valid_598222 != nil:
    section.add "DatabaseName", valid_598222
  var valid_598223 = query.getOrDefault("DBClusterIdentifier")
  valid_598223 = validateParameter(valid_598223, JString, required = true,
                                 default = nil)
  if valid_598223 != nil:
    section.add "DBClusterIdentifier", valid_598223
  var valid_598224 = query.getOrDefault("OptionGroupName")
  valid_598224 = validateParameter(valid_598224, JString, required = false,
                                 default = nil)
  if valid_598224 != nil:
    section.add "OptionGroupName", valid_598224
  var valid_598225 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598225 = validateParameter(valid_598225, JBool, required = false, default = nil)
  if valid_598225 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598225
  var valid_598226 = query.getOrDefault("EngineMode")
  valid_598226 = validateParameter(valid_598226, JString, required = false,
                                 default = nil)
  if valid_598226 != nil:
    section.add "EngineMode", valid_598226
  var valid_598227 = query.getOrDefault("VpcSecurityGroupIds")
  valid_598227 = validateParameter(valid_598227, JArray, required = false,
                                 default = nil)
  if valid_598227 != nil:
    section.add "VpcSecurityGroupIds", valid_598227
  var valid_598228 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_598228 = validateParameter(valid_598228, JArray, required = false,
                                 default = nil)
  if valid_598228 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598228
  var valid_598229 = query.getOrDefault("Tags")
  valid_598229 = validateParameter(valid_598229, JArray, required = false,
                                 default = nil)
  if valid_598229 != nil:
    section.add "Tags", valid_598229
  var valid_598230 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_598230 = validateParameter(valid_598230, JString, required = false,
                                 default = nil)
  if valid_598230 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_598230
  var valid_598231 = query.getOrDefault("CopyTagsToSnapshot")
  valid_598231 = validateParameter(valid_598231, JBool, required = false, default = nil)
  if valid_598231 != nil:
    section.add "CopyTagsToSnapshot", valid_598231
  var valid_598232 = query.getOrDefault("DeletionProtection")
  valid_598232 = validateParameter(valid_598232, JBool, required = false, default = nil)
  if valid_598232 != nil:
    section.add "DeletionProtection", valid_598232
  var valid_598233 = query.getOrDefault("Action")
  valid_598233 = validateParameter(valid_598233, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_598233 != nil:
    section.add "Action", valid_598233
  var valid_598234 = query.getOrDefault("DBSubnetGroupName")
  valid_598234 = validateParameter(valid_598234, JString, required = false,
                                 default = nil)
  if valid_598234 != nil:
    section.add "DBSubnetGroupName", valid_598234
  var valid_598235 = query.getOrDefault("KmsKeyId")
  valid_598235 = validateParameter(valid_598235, JString, required = false,
                                 default = nil)
  if valid_598235 != nil:
    section.add "KmsKeyId", valid_598235
  var valid_598236 = query.getOrDefault("BacktrackWindow")
  valid_598236 = validateParameter(valid_598236, JInt, required = false, default = nil)
  if valid_598236 != nil:
    section.add "BacktrackWindow", valid_598236
  var valid_598237 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_598237 = validateParameter(valid_598237, JString, required = false,
                                 default = nil)
  if valid_598237 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_598237
  var valid_598238 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_598238 = validateParameter(valid_598238, JString, required = false,
                                 default = nil)
  if valid_598238 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_598238
  var valid_598239 = query.getOrDefault("EngineVersion")
  valid_598239 = validateParameter(valid_598239, JString, required = false,
                                 default = nil)
  if valid_598239 != nil:
    section.add "EngineVersion", valid_598239
  var valid_598240 = query.getOrDefault("Port")
  valid_598240 = validateParameter(valid_598240, JInt, required = false, default = nil)
  if valid_598240 != nil:
    section.add "Port", valid_598240
  var valid_598241 = query.getOrDefault("SnapshotIdentifier")
  valid_598241 = validateParameter(valid_598241, JString, required = true,
                                 default = nil)
  if valid_598241 != nil:
    section.add "SnapshotIdentifier", valid_598241
  var valid_598242 = query.getOrDefault("Version")
  valid_598242 = validateParameter(valid_598242, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598242 != nil:
    section.add "Version", valid_598242
  var valid_598243 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_598243 = validateParameter(valid_598243, JString, required = false,
                                 default = nil)
  if valid_598243 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_598243
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598244 = header.getOrDefault("X-Amz-Date")
  valid_598244 = validateParameter(valid_598244, JString, required = false,
                                 default = nil)
  if valid_598244 != nil:
    section.add "X-Amz-Date", valid_598244
  var valid_598245 = header.getOrDefault("X-Amz-Security-Token")
  valid_598245 = validateParameter(valid_598245, JString, required = false,
                                 default = nil)
  if valid_598245 != nil:
    section.add "X-Amz-Security-Token", valid_598245
  var valid_598246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598246 = validateParameter(valid_598246, JString, required = false,
                                 default = nil)
  if valid_598246 != nil:
    section.add "X-Amz-Content-Sha256", valid_598246
  var valid_598247 = header.getOrDefault("X-Amz-Algorithm")
  valid_598247 = validateParameter(valid_598247, JString, required = false,
                                 default = nil)
  if valid_598247 != nil:
    section.add "X-Amz-Algorithm", valid_598247
  var valid_598248 = header.getOrDefault("X-Amz-Signature")
  valid_598248 = validateParameter(valid_598248, JString, required = false,
                                 default = nil)
  if valid_598248 != nil:
    section.add "X-Amz-Signature", valid_598248
  var valid_598249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598249 = validateParameter(valid_598249, JString, required = false,
                                 default = nil)
  if valid_598249 != nil:
    section.add "X-Amz-SignedHeaders", valid_598249
  var valid_598250 = header.getOrDefault("X-Amz-Credential")
  valid_598250 = validateParameter(valid_598250, JString, required = false,
                                 default = nil)
  if valid_598250 != nil:
    section.add "X-Amz-Credential", valid_598250
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598251: Call_GetRestoreDBClusterFromSnapshot_598215;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598251.validator(path, query, header, formData, body)
  let scheme = call_598251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598251.url(scheme.get, call_598251.host, call_598251.base,
                         call_598251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598251, url, valid)

proc call*(call_598252: Call_GetRestoreDBClusterFromSnapshot_598215;
          Engine: string; DBClusterIdentifier: string; SnapshotIdentifier: string;
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; DatabaseName: string = "";
          OptionGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false; EngineMode: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          ScalingConfigurationAutoPause: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          Action: string = "RestoreDBClusterFromSnapshot";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          BacktrackWindow: int = 0;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationMaxCapacity: string = ""; EngineVersion: string = "";
          Port: int = 0; Version: string = "2014-10-31";
          ScalingConfigurationTimeoutAction: string = ""): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: string (required)
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  var query_598253 = newJObject()
  add(query_598253, "Engine", newJString(Engine))
  add(query_598253, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_598253, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_598253.add "AvailabilityZones", AvailabilityZones
  add(query_598253, "DatabaseName", newJString(DatabaseName))
  add(query_598253, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_598253, "OptionGroupName", newJString(OptionGroupName))
  add(query_598253, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_598253, "EngineMode", newJString(EngineMode))
  if VpcSecurityGroupIds != nil:
    query_598253.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_598253.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_598253.add "Tags", Tags
  add(query_598253, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_598253, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_598253, "DeletionProtection", newJBool(DeletionProtection))
  add(query_598253, "Action", newJString(Action))
  add(query_598253, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_598253, "KmsKeyId", newJString(KmsKeyId))
  add(query_598253, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_598253, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_598253, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_598253, "EngineVersion", newJString(EngineVersion))
  add(query_598253, "Port", newJInt(Port))
  add(query_598253, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_598253, "Version", newJString(Version))
  add(query_598253, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  result = call_598252.call(nil, query_598253, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_598215(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_598216, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_598217,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_598326 = ref object of OpenApiRestCall_593421
proc url_PostRestoreDBClusterToPointInTime_598328(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_598327(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598329 = query.getOrDefault("Action")
  valid_598329 = validateParameter(valid_598329, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_598329 != nil:
    section.add "Action", valid_598329
  var valid_598330 = query.getOrDefault("Version")
  valid_598330 = validateParameter(valid_598330, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598330 != nil:
    section.add "Version", valid_598330
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598331 = header.getOrDefault("X-Amz-Date")
  valid_598331 = validateParameter(valid_598331, JString, required = false,
                                 default = nil)
  if valid_598331 != nil:
    section.add "X-Amz-Date", valid_598331
  var valid_598332 = header.getOrDefault("X-Amz-Security-Token")
  valid_598332 = validateParameter(valid_598332, JString, required = false,
                                 default = nil)
  if valid_598332 != nil:
    section.add "X-Amz-Security-Token", valid_598332
  var valid_598333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598333 = validateParameter(valid_598333, JString, required = false,
                                 default = nil)
  if valid_598333 != nil:
    section.add "X-Amz-Content-Sha256", valid_598333
  var valid_598334 = header.getOrDefault("X-Amz-Algorithm")
  valid_598334 = validateParameter(valid_598334, JString, required = false,
                                 default = nil)
  if valid_598334 != nil:
    section.add "X-Amz-Algorithm", valid_598334
  var valid_598335 = header.getOrDefault("X-Amz-Signature")
  valid_598335 = validateParameter(valid_598335, JString, required = false,
                                 default = nil)
  if valid_598335 != nil:
    section.add "X-Amz-Signature", valid_598335
  var valid_598336 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598336 = validateParameter(valid_598336, JString, required = false,
                                 default = nil)
  if valid_598336 != nil:
    section.add "X-Amz-SignedHeaders", valid_598336
  var valid_598337 = header.getOrDefault("X-Amz-Credential")
  valid_598337 = validateParameter(valid_598337, JString, required = false,
                                 default = nil)
  if valid_598337 != nil:
    section.add "X-Amz-Credential", valid_598337
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_598338 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_598338 = validateParameter(valid_598338, JString, required = true,
                                 default = nil)
  if valid_598338 != nil:
    section.add "SourceDBClusterIdentifier", valid_598338
  var valid_598339 = formData.getOrDefault("UseLatestRestorableTime")
  valid_598339 = validateParameter(valid_598339, JBool, required = false, default = nil)
  if valid_598339 != nil:
    section.add "UseLatestRestorableTime", valid_598339
  var valid_598340 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_598340 = validateParameter(valid_598340, JBool, required = false, default = nil)
  if valid_598340 != nil:
    section.add "CopyTagsToSnapshot", valid_598340
  var valid_598341 = formData.getOrDefault("Port")
  valid_598341 = validateParameter(valid_598341, JInt, required = false, default = nil)
  if valid_598341 != nil:
    section.add "Port", valid_598341
  var valid_598342 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_598342 = validateParameter(valid_598342, JArray, required = false,
                                 default = nil)
  if valid_598342 != nil:
    section.add "VpcSecurityGroupIds", valid_598342
  var valid_598343 = formData.getOrDefault("RestoreToTime")
  valid_598343 = validateParameter(valid_598343, JString, required = false,
                                 default = nil)
  if valid_598343 != nil:
    section.add "RestoreToTime", valid_598343
  var valid_598344 = formData.getOrDefault("OptionGroupName")
  valid_598344 = validateParameter(valid_598344, JString, required = false,
                                 default = nil)
  if valid_598344 != nil:
    section.add "OptionGroupName", valid_598344
  var valid_598345 = formData.getOrDefault("BacktrackWindow")
  valid_598345 = validateParameter(valid_598345, JInt, required = false, default = nil)
  if valid_598345 != nil:
    section.add "BacktrackWindow", valid_598345
  var valid_598346 = formData.getOrDefault("Tags")
  valid_598346 = validateParameter(valid_598346, JArray, required = false,
                                 default = nil)
  if valid_598346 != nil:
    section.add "Tags", valid_598346
  var valid_598347 = formData.getOrDefault("DeletionProtection")
  valid_598347 = validateParameter(valid_598347, JBool, required = false, default = nil)
  if valid_598347 != nil:
    section.add "DeletionProtection", valid_598347
  var valid_598348 = formData.getOrDefault("DBSubnetGroupName")
  valid_598348 = validateParameter(valid_598348, JString, required = false,
                                 default = nil)
  if valid_598348 != nil:
    section.add "DBSubnetGroupName", valid_598348
  var valid_598349 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_598349 = validateParameter(valid_598349, JString, required = false,
                                 default = nil)
  if valid_598349 != nil:
    section.add "DBClusterParameterGroupName", valid_598349
  var valid_598350 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_598350 = validateParameter(valid_598350, JArray, required = false,
                                 default = nil)
  if valid_598350 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598350
  var valid_598351 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598351 = validateParameter(valid_598351, JBool, required = false, default = nil)
  if valid_598351 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598351
  var valid_598352 = formData.getOrDefault("KmsKeyId")
  valid_598352 = validateParameter(valid_598352, JString, required = false,
                                 default = nil)
  if valid_598352 != nil:
    section.add "KmsKeyId", valid_598352
  var valid_598353 = formData.getOrDefault("RestoreType")
  valid_598353 = validateParameter(valid_598353, JString, required = false,
                                 default = nil)
  if valid_598353 != nil:
    section.add "RestoreType", valid_598353
  var valid_598354 = formData.getOrDefault("DBClusterIdentifier")
  valid_598354 = validateParameter(valid_598354, JString, required = true,
                                 default = nil)
  if valid_598354 != nil:
    section.add "DBClusterIdentifier", valid_598354
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598355: Call_PostRestoreDBClusterToPointInTime_598326;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598355.validator(path, query, header, formData, body)
  let scheme = call_598355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598355.url(scheme.get, call_598355.host, call_598355.base,
                         call_598355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598355, url, valid)

proc call*(call_598356: Call_PostRestoreDBClusterToPointInTime_598326;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          RestoreToTime: string = ""; OptionGroupName: string = "";
          BacktrackWindow: int = 0; Tags: JsonNode = nil;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterToPointInTime";
          DBClusterParameterGroupName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  var query_598357 = newJObject()
  var formData_598358 = newJObject()
  add(formData_598358, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_598358, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_598358, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_598358, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_598358.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_598358, "RestoreToTime", newJString(RestoreToTime))
  add(formData_598358, "OptionGroupName", newJString(OptionGroupName))
  add(formData_598358, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_598358.add "Tags", Tags
  add(formData_598358, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_598358, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_598357, "Action", newJString(Action))
  add(formData_598358, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if EnableCloudwatchLogsExports != nil:
    formData_598358.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_598358, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_598358, "KmsKeyId", newJString(KmsKeyId))
  add(formData_598358, "RestoreType", newJString(RestoreType))
  add(formData_598358, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_598357, "Version", newJString(Version))
  result = call_598356.call(nil, query_598357, nil, formData_598358, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_598326(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_598327, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_598328,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_598294 = ref object of OpenApiRestCall_593421
proc url_GetRestoreDBClusterToPointInTime_598296(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_598295(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_598297 = query.getOrDefault("RestoreToTime")
  valid_598297 = validateParameter(valid_598297, JString, required = false,
                                 default = nil)
  if valid_598297 != nil:
    section.add "RestoreToTime", valid_598297
  var valid_598298 = query.getOrDefault("DBClusterParameterGroupName")
  valid_598298 = validateParameter(valid_598298, JString, required = false,
                                 default = nil)
  if valid_598298 != nil:
    section.add "DBClusterParameterGroupName", valid_598298
  var valid_598299 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598299 = validateParameter(valid_598299, JBool, required = false, default = nil)
  if valid_598299 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598299
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_598300 = query.getOrDefault("DBClusterIdentifier")
  valid_598300 = validateParameter(valid_598300, JString, required = true,
                                 default = nil)
  if valid_598300 != nil:
    section.add "DBClusterIdentifier", valid_598300
  var valid_598301 = query.getOrDefault("OptionGroupName")
  valid_598301 = validateParameter(valid_598301, JString, required = false,
                                 default = nil)
  if valid_598301 != nil:
    section.add "OptionGroupName", valid_598301
  var valid_598302 = query.getOrDefault("VpcSecurityGroupIds")
  valid_598302 = validateParameter(valid_598302, JArray, required = false,
                                 default = nil)
  if valid_598302 != nil:
    section.add "VpcSecurityGroupIds", valid_598302
  var valid_598303 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_598303 = validateParameter(valid_598303, JArray, required = false,
                                 default = nil)
  if valid_598303 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598303
  var valid_598304 = query.getOrDefault("Tags")
  valid_598304 = validateParameter(valid_598304, JArray, required = false,
                                 default = nil)
  if valid_598304 != nil:
    section.add "Tags", valid_598304
  var valid_598305 = query.getOrDefault("CopyTagsToSnapshot")
  valid_598305 = validateParameter(valid_598305, JBool, required = false, default = nil)
  if valid_598305 != nil:
    section.add "CopyTagsToSnapshot", valid_598305
  var valid_598306 = query.getOrDefault("RestoreType")
  valid_598306 = validateParameter(valid_598306, JString, required = false,
                                 default = nil)
  if valid_598306 != nil:
    section.add "RestoreType", valid_598306
  var valid_598307 = query.getOrDefault("DeletionProtection")
  valid_598307 = validateParameter(valid_598307, JBool, required = false, default = nil)
  if valid_598307 != nil:
    section.add "DeletionProtection", valid_598307
  var valid_598308 = query.getOrDefault("UseLatestRestorableTime")
  valid_598308 = validateParameter(valid_598308, JBool, required = false, default = nil)
  if valid_598308 != nil:
    section.add "UseLatestRestorableTime", valid_598308
  var valid_598309 = query.getOrDefault("Action")
  valid_598309 = validateParameter(valid_598309, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_598309 != nil:
    section.add "Action", valid_598309
  var valid_598310 = query.getOrDefault("DBSubnetGroupName")
  valid_598310 = validateParameter(valid_598310, JString, required = false,
                                 default = nil)
  if valid_598310 != nil:
    section.add "DBSubnetGroupName", valid_598310
  var valid_598311 = query.getOrDefault("KmsKeyId")
  valid_598311 = validateParameter(valid_598311, JString, required = false,
                                 default = nil)
  if valid_598311 != nil:
    section.add "KmsKeyId", valid_598311
  var valid_598312 = query.getOrDefault("BacktrackWindow")
  valid_598312 = validateParameter(valid_598312, JInt, required = false, default = nil)
  if valid_598312 != nil:
    section.add "BacktrackWindow", valid_598312
  var valid_598313 = query.getOrDefault("Port")
  valid_598313 = validateParameter(valid_598313, JInt, required = false, default = nil)
  if valid_598313 != nil:
    section.add "Port", valid_598313
  var valid_598314 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_598314 = validateParameter(valid_598314, JString, required = true,
                                 default = nil)
  if valid_598314 != nil:
    section.add "SourceDBClusterIdentifier", valid_598314
  var valid_598315 = query.getOrDefault("Version")
  valid_598315 = validateParameter(valid_598315, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598315 != nil:
    section.add "Version", valid_598315
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598316 = header.getOrDefault("X-Amz-Date")
  valid_598316 = validateParameter(valid_598316, JString, required = false,
                                 default = nil)
  if valid_598316 != nil:
    section.add "X-Amz-Date", valid_598316
  var valid_598317 = header.getOrDefault("X-Amz-Security-Token")
  valid_598317 = validateParameter(valid_598317, JString, required = false,
                                 default = nil)
  if valid_598317 != nil:
    section.add "X-Amz-Security-Token", valid_598317
  var valid_598318 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598318 = validateParameter(valid_598318, JString, required = false,
                                 default = nil)
  if valid_598318 != nil:
    section.add "X-Amz-Content-Sha256", valid_598318
  var valid_598319 = header.getOrDefault("X-Amz-Algorithm")
  valid_598319 = validateParameter(valid_598319, JString, required = false,
                                 default = nil)
  if valid_598319 != nil:
    section.add "X-Amz-Algorithm", valid_598319
  var valid_598320 = header.getOrDefault("X-Amz-Signature")
  valid_598320 = validateParameter(valid_598320, JString, required = false,
                                 default = nil)
  if valid_598320 != nil:
    section.add "X-Amz-Signature", valid_598320
  var valid_598321 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598321 = validateParameter(valid_598321, JString, required = false,
                                 default = nil)
  if valid_598321 != nil:
    section.add "X-Amz-SignedHeaders", valid_598321
  var valid_598322 = header.getOrDefault("X-Amz-Credential")
  valid_598322 = validateParameter(valid_598322, JString, required = false,
                                 default = nil)
  if valid_598322 != nil:
    section.add "X-Amz-Credential", valid_598322
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598323: Call_GetRestoreDBClusterToPointInTime_598294;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598323.validator(path, query, header, formData, body)
  let scheme = call_598323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598323.url(scheme.get, call_598323.host, call_598323.base,
                         call_598323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598323, url, valid)

proc call*(call_598324: Call_GetRestoreDBClusterToPointInTime_598294;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          RestoreToTime: string = ""; DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          CopyTagsToSnapshot: bool = false; RestoreType: string = "";
          DeletionProtection: bool = false; UseLatestRestorableTime: bool = false;
          Action: string = "RestoreDBClusterToPointInTime";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          BacktrackWindow: int = 0; Port: int = 0; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_598325 = newJObject()
  add(query_598325, "RestoreToTime", newJString(RestoreToTime))
  add(query_598325, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_598325, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_598325, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_598325, "OptionGroupName", newJString(OptionGroupName))
  if VpcSecurityGroupIds != nil:
    query_598325.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_598325.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_598325.add "Tags", Tags
  add(query_598325, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_598325, "RestoreType", newJString(RestoreType))
  add(query_598325, "DeletionProtection", newJBool(DeletionProtection))
  add(query_598325, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_598325, "Action", newJString(Action))
  add(query_598325, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_598325, "KmsKeyId", newJString(KmsKeyId))
  add(query_598325, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_598325, "Port", newJInt(Port))
  add(query_598325, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_598325, "Version", newJString(Version))
  result = call_598324.call(nil, query_598325, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_598294(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_598295, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_598296,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromDBSnapshot_598402 = ref object of OpenApiRestCall_593421
proc url_PostRestoreDBInstanceFromDBSnapshot_598404(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBInstanceFromDBSnapshot_598403(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598405 = query.getOrDefault("Action")
  valid_598405 = validateParameter(valid_598405, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_598405 != nil:
    section.add "Action", valid_598405
  var valid_598406 = query.getOrDefault("Version")
  valid_598406 = validateParameter(valid_598406, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598406 != nil:
    section.add "Version", valid_598406
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598407 = header.getOrDefault("X-Amz-Date")
  valid_598407 = validateParameter(valid_598407, JString, required = false,
                                 default = nil)
  if valid_598407 != nil:
    section.add "X-Amz-Date", valid_598407
  var valid_598408 = header.getOrDefault("X-Amz-Security-Token")
  valid_598408 = validateParameter(valid_598408, JString, required = false,
                                 default = nil)
  if valid_598408 != nil:
    section.add "X-Amz-Security-Token", valid_598408
  var valid_598409 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598409 = validateParameter(valid_598409, JString, required = false,
                                 default = nil)
  if valid_598409 != nil:
    section.add "X-Amz-Content-Sha256", valid_598409
  var valid_598410 = header.getOrDefault("X-Amz-Algorithm")
  valid_598410 = validateParameter(valid_598410, JString, required = false,
                                 default = nil)
  if valid_598410 != nil:
    section.add "X-Amz-Algorithm", valid_598410
  var valid_598411 = header.getOrDefault("X-Amz-Signature")
  valid_598411 = validateParameter(valid_598411, JString, required = false,
                                 default = nil)
  if valid_598411 != nil:
    section.add "X-Amz-Signature", valid_598411
  var valid_598412 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598412 = validateParameter(valid_598412, JString, required = false,
                                 default = nil)
  if valid_598412 != nil:
    section.add "X-Amz-SignedHeaders", valid_598412
  var valid_598413 = header.getOrDefault("X-Amz-Credential")
  valid_598413 = validateParameter(valid_598413, JString, required = false,
                                 default = nil)
  if valid_598413 != nil:
    section.add "X-Amz-Credential", valid_598413
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  section = newJObject()
  var valid_598414 = formData.getOrDefault("ProcessorFeatures")
  valid_598414 = validateParameter(valid_598414, JArray, required = false,
                                 default = nil)
  if valid_598414 != nil:
    section.add "ProcessorFeatures", valid_598414
  var valid_598415 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_598415 = validateParameter(valid_598415, JBool, required = false, default = nil)
  if valid_598415 != nil:
    section.add "CopyTagsToSnapshot", valid_598415
  var valid_598416 = formData.getOrDefault("Port")
  valid_598416 = validateParameter(valid_598416, JInt, required = false, default = nil)
  if valid_598416 != nil:
    section.add "Port", valid_598416
  var valid_598417 = formData.getOrDefault("Engine")
  valid_598417 = validateParameter(valid_598417, JString, required = false,
                                 default = nil)
  if valid_598417 != nil:
    section.add "Engine", valid_598417
  var valid_598418 = formData.getOrDefault("Iops")
  valid_598418 = validateParameter(valid_598418, JInt, required = false, default = nil)
  if valid_598418 != nil:
    section.add "Iops", valid_598418
  var valid_598419 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_598419 = validateParameter(valid_598419, JArray, required = false,
                                 default = nil)
  if valid_598419 != nil:
    section.add "VpcSecurityGroupIds", valid_598419
  var valid_598420 = formData.getOrDefault("DBName")
  valid_598420 = validateParameter(valid_598420, JString, required = false,
                                 default = nil)
  if valid_598420 != nil:
    section.add "DBName", valid_598420
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_598421 = formData.getOrDefault("DBInstanceIdentifier")
  valid_598421 = validateParameter(valid_598421, JString, required = true,
                                 default = nil)
  if valid_598421 != nil:
    section.add "DBInstanceIdentifier", valid_598421
  var valid_598422 = formData.getOrDefault("OptionGroupName")
  valid_598422 = validateParameter(valid_598422, JString, required = false,
                                 default = nil)
  if valid_598422 != nil:
    section.add "OptionGroupName", valid_598422
  var valid_598423 = formData.getOrDefault("DBParameterGroupName")
  valid_598423 = validateParameter(valid_598423, JString, required = false,
                                 default = nil)
  if valid_598423 != nil:
    section.add "DBParameterGroupName", valid_598423
  var valid_598424 = formData.getOrDefault("Tags")
  valid_598424 = validateParameter(valid_598424, JArray, required = false,
                                 default = nil)
  if valid_598424 != nil:
    section.add "Tags", valid_598424
  var valid_598425 = formData.getOrDefault("TdeCredentialArn")
  valid_598425 = validateParameter(valid_598425, JString, required = false,
                                 default = nil)
  if valid_598425 != nil:
    section.add "TdeCredentialArn", valid_598425
  var valid_598426 = formData.getOrDefault("DeletionProtection")
  valid_598426 = validateParameter(valid_598426, JBool, required = false, default = nil)
  if valid_598426 != nil:
    section.add "DeletionProtection", valid_598426
  var valid_598427 = formData.getOrDefault("DBSubnetGroupName")
  valid_598427 = validateParameter(valid_598427, JString, required = false,
                                 default = nil)
  if valid_598427 != nil:
    section.add "DBSubnetGroupName", valid_598427
  var valid_598428 = formData.getOrDefault("TdeCredentialPassword")
  valid_598428 = validateParameter(valid_598428, JString, required = false,
                                 default = nil)
  if valid_598428 != nil:
    section.add "TdeCredentialPassword", valid_598428
  var valid_598429 = formData.getOrDefault("AvailabilityZone")
  valid_598429 = validateParameter(valid_598429, JString, required = false,
                                 default = nil)
  if valid_598429 != nil:
    section.add "AvailabilityZone", valid_598429
  var valid_598430 = formData.getOrDefault("MultiAZ")
  valid_598430 = validateParameter(valid_598430, JBool, required = false, default = nil)
  if valid_598430 != nil:
    section.add "MultiAZ", valid_598430
  var valid_598431 = formData.getOrDefault("DomainIAMRoleName")
  valid_598431 = validateParameter(valid_598431, JString, required = false,
                                 default = nil)
  if valid_598431 != nil:
    section.add "DomainIAMRoleName", valid_598431
  var valid_598432 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_598432 = validateParameter(valid_598432, JString, required = true,
                                 default = nil)
  if valid_598432 != nil:
    section.add "DBSnapshotIdentifier", valid_598432
  var valid_598433 = formData.getOrDefault("PubliclyAccessible")
  valid_598433 = validateParameter(valid_598433, JBool, required = false, default = nil)
  if valid_598433 != nil:
    section.add "PubliclyAccessible", valid_598433
  var valid_598434 = formData.getOrDefault("StorageType")
  valid_598434 = validateParameter(valid_598434, JString, required = false,
                                 default = nil)
  if valid_598434 != nil:
    section.add "StorageType", valid_598434
  var valid_598435 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_598435 = validateParameter(valid_598435, JArray, required = false,
                                 default = nil)
  if valid_598435 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598435
  var valid_598436 = formData.getOrDefault("DBInstanceClass")
  valid_598436 = validateParameter(valid_598436, JString, required = false,
                                 default = nil)
  if valid_598436 != nil:
    section.add "DBInstanceClass", valid_598436
  var valid_598437 = formData.getOrDefault("Domain")
  valid_598437 = validateParameter(valid_598437, JString, required = false,
                                 default = nil)
  if valid_598437 != nil:
    section.add "Domain", valid_598437
  var valid_598438 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598438 = validateParameter(valid_598438, JBool, required = false, default = nil)
  if valid_598438 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598438
  var valid_598439 = formData.getOrDefault("LicenseModel")
  valid_598439 = validateParameter(valid_598439, JString, required = false,
                                 default = nil)
  if valid_598439 != nil:
    section.add "LicenseModel", valid_598439
  var valid_598440 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_598440 = validateParameter(valid_598440, JBool, required = false, default = nil)
  if valid_598440 != nil:
    section.add "AutoMinorVersionUpgrade", valid_598440
  var valid_598441 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_598441 = validateParameter(valid_598441, JBool, required = false, default = nil)
  if valid_598441 != nil:
    section.add "UseDefaultProcessorFeatures", valid_598441
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598442: Call_PostRestoreDBInstanceFromDBSnapshot_598402;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_598442.validator(path, query, header, formData, body)
  let scheme = call_598442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598442.url(scheme.get, call_598442.host, call_598442.base,
                         call_598442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598442, url, valid)

proc call*(call_598443: Call_PostRestoreDBInstanceFromDBSnapshot_598402;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          ProcessorFeatures: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; Engine: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; DBName: string = "";
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; TdeCredentialArn: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MultiAZ: bool = false; DomainIAMRoleName: string = "";
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          PubliclyAccessible: bool = false; StorageType: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; DBInstanceClass: string = "";
          Domain: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          LicenseModel: string = ""; AutoMinorVersionUpgrade: bool = false;
          Version: string = "2014-10-31"; UseDefaultProcessorFeatures: bool = false): Recallable =
  ## postRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   Action: string (required)
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Version: string (required)
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  var query_598444 = newJObject()
  var formData_598445 = newJObject()
  if ProcessorFeatures != nil:
    formData_598445.add "ProcessorFeatures", ProcessorFeatures
  add(formData_598445, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_598445, "Port", newJInt(Port))
  add(formData_598445, "Engine", newJString(Engine))
  add(formData_598445, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    formData_598445.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_598445, "DBName", newJString(DBName))
  add(formData_598445, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_598445, "OptionGroupName", newJString(OptionGroupName))
  add(formData_598445, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_598445.add "Tags", Tags
  add(formData_598445, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_598445, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_598445, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_598445, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_598445, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_598445, "MultiAZ", newJBool(MultiAZ))
  add(formData_598445, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_598445, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_598444, "Action", newJString(Action))
  add(formData_598445, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_598445, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_598445.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_598445, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_598445, "Domain", newJString(Domain))
  add(formData_598445, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_598445, "LicenseModel", newJString(LicenseModel))
  add(formData_598445, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(query_598444, "Version", newJString(Version))
  add(formData_598445, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  result = call_598443.call(nil, query_598444, nil, formData_598445, nil)

var postRestoreDBInstanceFromDBSnapshot* = Call_PostRestoreDBInstanceFromDBSnapshot_598402(
    name: "postRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_PostRestoreDBInstanceFromDBSnapshot_598403, base: "/",
    url: url_PostRestoreDBInstanceFromDBSnapshot_598404,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromDBSnapshot_598359 = ref object of OpenApiRestCall_593421
proc url_GetRestoreDBInstanceFromDBSnapshot_598361(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBInstanceFromDBSnapshot_598360(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  section = newJObject()
  var valid_598362 = query.getOrDefault("Engine")
  valid_598362 = validateParameter(valid_598362, JString, required = false,
                                 default = nil)
  if valid_598362 != nil:
    section.add "Engine", valid_598362
  var valid_598363 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_598363 = validateParameter(valid_598363, JBool, required = false, default = nil)
  if valid_598363 != nil:
    section.add "UseDefaultProcessorFeatures", valid_598363
  var valid_598364 = query.getOrDefault("ProcessorFeatures")
  valid_598364 = validateParameter(valid_598364, JArray, required = false,
                                 default = nil)
  if valid_598364 != nil:
    section.add "ProcessorFeatures", valid_598364
  var valid_598365 = query.getOrDefault("StorageType")
  valid_598365 = validateParameter(valid_598365, JString, required = false,
                                 default = nil)
  if valid_598365 != nil:
    section.add "StorageType", valid_598365
  var valid_598366 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598366 = validateParameter(valid_598366, JBool, required = false, default = nil)
  if valid_598366 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598366
  var valid_598367 = query.getOrDefault("OptionGroupName")
  valid_598367 = validateParameter(valid_598367, JString, required = false,
                                 default = nil)
  if valid_598367 != nil:
    section.add "OptionGroupName", valid_598367
  var valid_598368 = query.getOrDefault("AvailabilityZone")
  valid_598368 = validateParameter(valid_598368, JString, required = false,
                                 default = nil)
  if valid_598368 != nil:
    section.add "AvailabilityZone", valid_598368
  var valid_598369 = query.getOrDefault("Iops")
  valid_598369 = validateParameter(valid_598369, JInt, required = false, default = nil)
  if valid_598369 != nil:
    section.add "Iops", valid_598369
  var valid_598370 = query.getOrDefault("VpcSecurityGroupIds")
  valid_598370 = validateParameter(valid_598370, JArray, required = false,
                                 default = nil)
  if valid_598370 != nil:
    section.add "VpcSecurityGroupIds", valid_598370
  var valid_598371 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_598371 = validateParameter(valid_598371, JArray, required = false,
                                 default = nil)
  if valid_598371 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598371
  var valid_598372 = query.getOrDefault("MultiAZ")
  valid_598372 = validateParameter(valid_598372, JBool, required = false, default = nil)
  if valid_598372 != nil:
    section.add "MultiAZ", valid_598372
  var valid_598373 = query.getOrDefault("TdeCredentialPassword")
  valid_598373 = validateParameter(valid_598373, JString, required = false,
                                 default = nil)
  if valid_598373 != nil:
    section.add "TdeCredentialPassword", valid_598373
  var valid_598374 = query.getOrDefault("LicenseModel")
  valid_598374 = validateParameter(valid_598374, JString, required = false,
                                 default = nil)
  if valid_598374 != nil:
    section.add "LicenseModel", valid_598374
  var valid_598375 = query.getOrDefault("Tags")
  valid_598375 = validateParameter(valid_598375, JArray, required = false,
                                 default = nil)
  if valid_598375 != nil:
    section.add "Tags", valid_598375
  var valid_598376 = query.getOrDefault("DBName")
  valid_598376 = validateParameter(valid_598376, JString, required = false,
                                 default = nil)
  if valid_598376 != nil:
    section.add "DBName", valid_598376
  var valid_598377 = query.getOrDefault("CopyTagsToSnapshot")
  valid_598377 = validateParameter(valid_598377, JBool, required = false, default = nil)
  if valid_598377 != nil:
    section.add "CopyTagsToSnapshot", valid_598377
  var valid_598378 = query.getOrDefault("DomainIAMRoleName")
  valid_598378 = validateParameter(valid_598378, JString, required = false,
                                 default = nil)
  if valid_598378 != nil:
    section.add "DomainIAMRoleName", valid_598378
  var valid_598379 = query.getOrDefault("DBInstanceClass")
  valid_598379 = validateParameter(valid_598379, JString, required = false,
                                 default = nil)
  if valid_598379 != nil:
    section.add "DBInstanceClass", valid_598379
  var valid_598380 = query.getOrDefault("DBParameterGroupName")
  valid_598380 = validateParameter(valid_598380, JString, required = false,
                                 default = nil)
  if valid_598380 != nil:
    section.add "DBParameterGroupName", valid_598380
  var valid_598381 = query.getOrDefault("DeletionProtection")
  valid_598381 = validateParameter(valid_598381, JBool, required = false, default = nil)
  if valid_598381 != nil:
    section.add "DeletionProtection", valid_598381
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598382 = query.getOrDefault("Action")
  valid_598382 = validateParameter(valid_598382, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_598382 != nil:
    section.add "Action", valid_598382
  var valid_598383 = query.getOrDefault("DBSubnetGroupName")
  valid_598383 = validateParameter(valid_598383, JString, required = false,
                                 default = nil)
  if valid_598383 != nil:
    section.add "DBSubnetGroupName", valid_598383
  var valid_598384 = query.getOrDefault("Domain")
  valid_598384 = validateParameter(valid_598384, JString, required = false,
                                 default = nil)
  if valid_598384 != nil:
    section.add "Domain", valid_598384
  var valid_598385 = query.getOrDefault("TdeCredentialArn")
  valid_598385 = validateParameter(valid_598385, JString, required = false,
                                 default = nil)
  if valid_598385 != nil:
    section.add "TdeCredentialArn", valid_598385
  var valid_598386 = query.getOrDefault("PubliclyAccessible")
  valid_598386 = validateParameter(valid_598386, JBool, required = false, default = nil)
  if valid_598386 != nil:
    section.add "PubliclyAccessible", valid_598386
  var valid_598387 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_598387 = validateParameter(valid_598387, JBool, required = false, default = nil)
  if valid_598387 != nil:
    section.add "AutoMinorVersionUpgrade", valid_598387
  var valid_598388 = query.getOrDefault("Port")
  valid_598388 = validateParameter(valid_598388, JInt, required = false, default = nil)
  if valid_598388 != nil:
    section.add "Port", valid_598388
  var valid_598389 = query.getOrDefault("Version")
  valid_598389 = validateParameter(valid_598389, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598389 != nil:
    section.add "Version", valid_598389
  var valid_598390 = query.getOrDefault("DBInstanceIdentifier")
  valid_598390 = validateParameter(valid_598390, JString, required = true,
                                 default = nil)
  if valid_598390 != nil:
    section.add "DBInstanceIdentifier", valid_598390
  var valid_598391 = query.getOrDefault("DBSnapshotIdentifier")
  valid_598391 = validateParameter(valid_598391, JString, required = true,
                                 default = nil)
  if valid_598391 != nil:
    section.add "DBSnapshotIdentifier", valid_598391
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598392 = header.getOrDefault("X-Amz-Date")
  valid_598392 = validateParameter(valid_598392, JString, required = false,
                                 default = nil)
  if valid_598392 != nil:
    section.add "X-Amz-Date", valid_598392
  var valid_598393 = header.getOrDefault("X-Amz-Security-Token")
  valid_598393 = validateParameter(valid_598393, JString, required = false,
                                 default = nil)
  if valid_598393 != nil:
    section.add "X-Amz-Security-Token", valid_598393
  var valid_598394 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598394 = validateParameter(valid_598394, JString, required = false,
                                 default = nil)
  if valid_598394 != nil:
    section.add "X-Amz-Content-Sha256", valid_598394
  var valid_598395 = header.getOrDefault("X-Amz-Algorithm")
  valid_598395 = validateParameter(valid_598395, JString, required = false,
                                 default = nil)
  if valid_598395 != nil:
    section.add "X-Amz-Algorithm", valid_598395
  var valid_598396 = header.getOrDefault("X-Amz-Signature")
  valid_598396 = validateParameter(valid_598396, JString, required = false,
                                 default = nil)
  if valid_598396 != nil:
    section.add "X-Amz-Signature", valid_598396
  var valid_598397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598397 = validateParameter(valid_598397, JString, required = false,
                                 default = nil)
  if valid_598397 != nil:
    section.add "X-Amz-SignedHeaders", valid_598397
  var valid_598398 = header.getOrDefault("X-Amz-Credential")
  valid_598398 = validateParameter(valid_598398, JString, required = false,
                                 default = nil)
  if valid_598398 != nil:
    section.add "X-Amz-Credential", valid_598398
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598399: Call_GetRestoreDBInstanceFromDBSnapshot_598359;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_598399.validator(path, query, header, formData, body)
  let scheme = call_598399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598399.url(scheme.get, call_598399.host, call_598399.base,
                         call_598399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598399, url, valid)

proc call*(call_598400: Call_GetRestoreDBInstanceFromDBSnapshot_598359;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Engine: string = ""; UseDefaultProcessorFeatures: bool = false;
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; MultiAZ: bool = false;
          TdeCredentialPassword: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DBName: string = ""; CopyTagsToSnapshot: bool = false;
          DomainIAMRoleName: string = ""; DBInstanceClass: string = "";
          DBParameterGroupName: string = ""; DeletionProtection: bool = false;
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          DBSubnetGroupName: string = ""; Domain: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  var query_598401 = newJObject()
  add(query_598401, "Engine", newJString(Engine))
  add(query_598401, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  if ProcessorFeatures != nil:
    query_598401.add "ProcessorFeatures", ProcessorFeatures
  add(query_598401, "StorageType", newJString(StorageType))
  add(query_598401, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_598401, "OptionGroupName", newJString(OptionGroupName))
  add(query_598401, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_598401, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_598401.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_598401.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_598401, "MultiAZ", newJBool(MultiAZ))
  add(query_598401, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_598401, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_598401.add "Tags", Tags
  add(query_598401, "DBName", newJString(DBName))
  add(query_598401, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_598401, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_598401, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_598401, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_598401, "DeletionProtection", newJBool(DeletionProtection))
  add(query_598401, "Action", newJString(Action))
  add(query_598401, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_598401, "Domain", newJString(Domain))
  add(query_598401, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_598401, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_598401, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_598401, "Port", newJInt(Port))
  add(query_598401, "Version", newJString(Version))
  add(query_598401, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_598401, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_598400.call(nil, query_598401, nil, nil, nil)

var getRestoreDBInstanceFromDBSnapshot* = Call_GetRestoreDBInstanceFromDBSnapshot_598359(
    name: "getRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_GetRestoreDBInstanceFromDBSnapshot_598360, base: "/",
    url: url_GetRestoreDBInstanceFromDBSnapshot_598361,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromS3_598504 = ref object of OpenApiRestCall_593421
proc url_PostRestoreDBInstanceFromS3_598506(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBInstanceFromS3_598505(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598507 = query.getOrDefault("Action")
  valid_598507 = validateParameter(valid_598507, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_598507 != nil:
    section.add "Action", valid_598507
  var valid_598508 = query.getOrDefault("Version")
  valid_598508 = validateParameter(valid_598508, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598508 != nil:
    section.add "Version", valid_598508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598509 = header.getOrDefault("X-Amz-Date")
  valid_598509 = validateParameter(valid_598509, JString, required = false,
                                 default = nil)
  if valid_598509 != nil:
    section.add "X-Amz-Date", valid_598509
  var valid_598510 = header.getOrDefault("X-Amz-Security-Token")
  valid_598510 = validateParameter(valid_598510, JString, required = false,
                                 default = nil)
  if valid_598510 != nil:
    section.add "X-Amz-Security-Token", valid_598510
  var valid_598511 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598511 = validateParameter(valid_598511, JString, required = false,
                                 default = nil)
  if valid_598511 != nil:
    section.add "X-Amz-Content-Sha256", valid_598511
  var valid_598512 = header.getOrDefault("X-Amz-Algorithm")
  valid_598512 = validateParameter(valid_598512, JString, required = false,
                                 default = nil)
  if valid_598512 != nil:
    section.add "X-Amz-Algorithm", valid_598512
  var valid_598513 = header.getOrDefault("X-Amz-Signature")
  valid_598513 = validateParameter(valid_598513, JString, required = false,
                                 default = nil)
  if valid_598513 != nil:
    section.add "X-Amz-Signature", valid_598513
  var valid_598514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598514 = validateParameter(valid_598514, JString, required = false,
                                 default = nil)
  if valid_598514 != nil:
    section.add "X-Amz-SignedHeaders", valid_598514
  var valid_598515 = header.getOrDefault("X-Amz-Credential")
  valid_598515 = validateParameter(valid_598515, JString, required = false,
                                 default = nil)
  if valid_598515 != nil:
    section.add "X-Amz-Credential", valid_598515
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  var valid_598516 = formData.getOrDefault("ProcessorFeatures")
  valid_598516 = validateParameter(valid_598516, JArray, required = false,
                                 default = nil)
  if valid_598516 != nil:
    section.add "ProcessorFeatures", valid_598516
  var valid_598517 = formData.getOrDefault("EnablePerformanceInsights")
  valid_598517 = validateParameter(valid_598517, JBool, required = false, default = nil)
  if valid_598517 != nil:
    section.add "EnablePerformanceInsights", valid_598517
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_598518 = formData.getOrDefault("Engine")
  valid_598518 = validateParameter(valid_598518, JString, required = true,
                                 default = nil)
  if valid_598518 != nil:
    section.add "Engine", valid_598518
  var valid_598519 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_598519 = validateParameter(valid_598519, JArray, required = false,
                                 default = nil)
  if valid_598519 != nil:
    section.add "VpcSecurityGroupIds", valid_598519
  var valid_598520 = formData.getOrDefault("Iops")
  valid_598520 = validateParameter(valid_598520, JInt, required = false, default = nil)
  if valid_598520 != nil:
    section.add "Iops", valid_598520
  var valid_598521 = formData.getOrDefault("BackupRetentionPeriod")
  valid_598521 = validateParameter(valid_598521, JInt, required = false, default = nil)
  if valid_598521 != nil:
    section.add "BackupRetentionPeriod", valid_598521
  var valid_598522 = formData.getOrDefault("Tags")
  valid_598522 = validateParameter(valid_598522, JArray, required = false,
                                 default = nil)
  if valid_598522 != nil:
    section.add "Tags", valid_598522
  var valid_598523 = formData.getOrDefault("DeletionProtection")
  valid_598523 = validateParameter(valid_598523, JBool, required = false, default = nil)
  if valid_598523 != nil:
    section.add "DeletionProtection", valid_598523
  var valid_598524 = formData.getOrDefault("DBSubnetGroupName")
  valid_598524 = validateParameter(valid_598524, JString, required = false,
                                 default = nil)
  if valid_598524 != nil:
    section.add "DBSubnetGroupName", valid_598524
  var valid_598525 = formData.getOrDefault("MultiAZ")
  valid_598525 = validateParameter(valid_598525, JBool, required = false, default = nil)
  if valid_598525 != nil:
    section.add "MultiAZ", valid_598525
  var valid_598526 = formData.getOrDefault("PubliclyAccessible")
  valid_598526 = validateParameter(valid_598526, JBool, required = false, default = nil)
  if valid_598526 != nil:
    section.add "PubliclyAccessible", valid_598526
  var valid_598527 = formData.getOrDefault("StorageType")
  valid_598527 = validateParameter(valid_598527, JString, required = false,
                                 default = nil)
  if valid_598527 != nil:
    section.add "StorageType", valid_598527
  var valid_598528 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_598528 = validateParameter(valid_598528, JArray, required = false,
                                 default = nil)
  if valid_598528 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598528
  var valid_598529 = formData.getOrDefault("LicenseModel")
  valid_598529 = validateParameter(valid_598529, JString, required = false,
                                 default = nil)
  if valid_598529 != nil:
    section.add "LicenseModel", valid_598529
  var valid_598530 = formData.getOrDefault("KmsKeyId")
  valid_598530 = validateParameter(valid_598530, JString, required = false,
                                 default = nil)
  if valid_598530 != nil:
    section.add "KmsKeyId", valid_598530
  var valid_598531 = formData.getOrDefault("StorageEncrypted")
  valid_598531 = validateParameter(valid_598531, JBool, required = false, default = nil)
  if valid_598531 != nil:
    section.add "StorageEncrypted", valid_598531
  var valid_598532 = formData.getOrDefault("MonitoringRoleArn")
  valid_598532 = validateParameter(valid_598532, JString, required = false,
                                 default = nil)
  if valid_598532 != nil:
    section.add "MonitoringRoleArn", valid_598532
  var valid_598533 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_598533 = validateParameter(valid_598533, JInt, required = false, default = nil)
  if valid_598533 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_598533
  var valid_598534 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_598534 = validateParameter(valid_598534, JBool, required = false, default = nil)
  if valid_598534 != nil:
    section.add "UseDefaultProcessorFeatures", valid_598534
  var valid_598535 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_598535 = validateParameter(valid_598535, JString, required = false,
                                 default = nil)
  if valid_598535 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_598535
  var valid_598536 = formData.getOrDefault("S3BucketName")
  valid_598536 = validateParameter(valid_598536, JString, required = true,
                                 default = nil)
  if valid_598536 != nil:
    section.add "S3BucketName", valid_598536
  var valid_598537 = formData.getOrDefault("DBSecurityGroups")
  valid_598537 = validateParameter(valid_598537, JArray, required = false,
                                 default = nil)
  if valid_598537 != nil:
    section.add "DBSecurityGroups", valid_598537
  var valid_598538 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_598538 = validateParameter(valid_598538, JBool, required = false, default = nil)
  if valid_598538 != nil:
    section.add "CopyTagsToSnapshot", valid_598538
  var valid_598539 = formData.getOrDefault("Port")
  valid_598539 = validateParameter(valid_598539, JInt, required = false, default = nil)
  if valid_598539 != nil:
    section.add "Port", valid_598539
  var valid_598540 = formData.getOrDefault("SourceEngine")
  valid_598540 = validateParameter(valid_598540, JString, required = true,
                                 default = nil)
  if valid_598540 != nil:
    section.add "SourceEngine", valid_598540
  var valid_598541 = formData.getOrDefault("DBName")
  valid_598541 = validateParameter(valid_598541, JString, required = false,
                                 default = nil)
  if valid_598541 != nil:
    section.add "DBName", valid_598541
  var valid_598542 = formData.getOrDefault("DBInstanceIdentifier")
  valid_598542 = validateParameter(valid_598542, JString, required = true,
                                 default = nil)
  if valid_598542 != nil:
    section.add "DBInstanceIdentifier", valid_598542
  var valid_598543 = formData.getOrDefault("OptionGroupName")
  valid_598543 = validateParameter(valid_598543, JString, required = false,
                                 default = nil)
  if valid_598543 != nil:
    section.add "OptionGroupName", valid_598543
  var valid_598544 = formData.getOrDefault("DBParameterGroupName")
  valid_598544 = validateParameter(valid_598544, JString, required = false,
                                 default = nil)
  if valid_598544 != nil:
    section.add "DBParameterGroupName", valid_598544
  var valid_598545 = formData.getOrDefault("MasterUserPassword")
  valid_598545 = validateParameter(valid_598545, JString, required = false,
                                 default = nil)
  if valid_598545 != nil:
    section.add "MasterUserPassword", valid_598545
  var valid_598546 = formData.getOrDefault("SourceEngineVersion")
  valid_598546 = validateParameter(valid_598546, JString, required = true,
                                 default = nil)
  if valid_598546 != nil:
    section.add "SourceEngineVersion", valid_598546
  var valid_598547 = formData.getOrDefault("S3Prefix")
  valid_598547 = validateParameter(valid_598547, JString, required = false,
                                 default = nil)
  if valid_598547 != nil:
    section.add "S3Prefix", valid_598547
  var valid_598548 = formData.getOrDefault("AvailabilityZone")
  valid_598548 = validateParameter(valid_598548, JString, required = false,
                                 default = nil)
  if valid_598548 != nil:
    section.add "AvailabilityZone", valid_598548
  var valid_598549 = formData.getOrDefault("MonitoringInterval")
  valid_598549 = validateParameter(valid_598549, JInt, required = false, default = nil)
  if valid_598549 != nil:
    section.add "MonitoringInterval", valid_598549
  var valid_598550 = formData.getOrDefault("S3IngestionRoleArn")
  valid_598550 = validateParameter(valid_598550, JString, required = true,
                                 default = nil)
  if valid_598550 != nil:
    section.add "S3IngestionRoleArn", valid_598550
  var valid_598551 = formData.getOrDefault("AllocatedStorage")
  valid_598551 = validateParameter(valid_598551, JInt, required = false, default = nil)
  if valid_598551 != nil:
    section.add "AllocatedStorage", valid_598551
  var valid_598552 = formData.getOrDefault("MasterUsername")
  valid_598552 = validateParameter(valid_598552, JString, required = false,
                                 default = nil)
  if valid_598552 != nil:
    section.add "MasterUsername", valid_598552
  var valid_598553 = formData.getOrDefault("DBInstanceClass")
  valid_598553 = validateParameter(valid_598553, JString, required = true,
                                 default = nil)
  if valid_598553 != nil:
    section.add "DBInstanceClass", valid_598553
  var valid_598554 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598554 = validateParameter(valid_598554, JBool, required = false, default = nil)
  if valid_598554 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598554
  var valid_598555 = formData.getOrDefault("PreferredBackupWindow")
  valid_598555 = validateParameter(valid_598555, JString, required = false,
                                 default = nil)
  if valid_598555 != nil:
    section.add "PreferredBackupWindow", valid_598555
  var valid_598556 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_598556 = validateParameter(valid_598556, JBool, required = false, default = nil)
  if valid_598556 != nil:
    section.add "AutoMinorVersionUpgrade", valid_598556
  var valid_598557 = formData.getOrDefault("EngineVersion")
  valid_598557 = validateParameter(valid_598557, JString, required = false,
                                 default = nil)
  if valid_598557 != nil:
    section.add "EngineVersion", valid_598557
  var valid_598558 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_598558 = validateParameter(valid_598558, JString, required = false,
                                 default = nil)
  if valid_598558 != nil:
    section.add "PreferredMaintenanceWindow", valid_598558
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598559: Call_PostRestoreDBInstanceFromS3_598504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_598559.validator(path, query, header, formData, body)
  let scheme = call_598559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598559.url(scheme.get, call_598559.host, call_598559.base,
                         call_598559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598559, url, valid)

proc call*(call_598560: Call_PostRestoreDBInstanceFromS3_598504; Engine: string;
          S3BucketName: string; SourceEngine: string; DBInstanceIdentifier: string;
          SourceEngineVersion: string; S3IngestionRoleArn: string;
          DBInstanceClass: string; ProcessorFeatures: JsonNode = nil;
          EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; Tags: JsonNode = nil;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          MultiAZ: bool = false; PubliclyAccessible: bool = false;
          StorageType: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          LicenseModel: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false; MonitoringRoleArn: string = "";
          PerformanceInsightsRetentionPeriod: int = 0;
          UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; DBName: string = ""; OptionGroupName: string = "";
          DBParameterGroupName: string = ""; MasterUserPassword: string = "";
          S3Prefix: string = ""; AvailabilityZone: string = "";
          MonitoringInterval: int = 0; Action: string = "RestoreDBInstanceFromS3";
          AllocatedStorage: int = 0; MasterUsername: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  var query_598561 = newJObject()
  var formData_598562 = newJObject()
  if ProcessorFeatures != nil:
    formData_598562.add "ProcessorFeatures", ProcessorFeatures
  add(formData_598562, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_598562, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_598562.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_598562, "Iops", newJInt(Iops))
  add(formData_598562, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if Tags != nil:
    formData_598562.add "Tags", Tags
  add(formData_598562, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_598562, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_598562, "MultiAZ", newJBool(MultiAZ))
  add(formData_598562, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_598562, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_598562.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_598562, "LicenseModel", newJString(LicenseModel))
  add(formData_598562, "KmsKeyId", newJString(KmsKeyId))
  add(formData_598562, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_598562, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_598562, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_598562, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_598562, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_598562, "S3BucketName", newJString(S3BucketName))
  if DBSecurityGroups != nil:
    formData_598562.add "DBSecurityGroups", DBSecurityGroups
  add(formData_598562, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_598562, "Port", newJInt(Port))
  add(formData_598562, "SourceEngine", newJString(SourceEngine))
  add(formData_598562, "DBName", newJString(DBName))
  add(formData_598562, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_598562, "OptionGroupName", newJString(OptionGroupName))
  add(formData_598562, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_598562, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_598562, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_598562, "S3Prefix", newJString(S3Prefix))
  add(formData_598562, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_598562, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_598562, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_598561, "Action", newJString(Action))
  add(formData_598562, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_598562, "MasterUsername", newJString(MasterUsername))
  add(formData_598562, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_598562, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_598562, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_598562, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_598562, "EngineVersion", newJString(EngineVersion))
  add(query_598561, "Version", newJString(Version))
  add(formData_598562, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_598560.call(nil, query_598561, nil, formData_598562, nil)

var postRestoreDBInstanceFromS3* = Call_PostRestoreDBInstanceFromS3_598504(
    name: "postRestoreDBInstanceFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_PostRestoreDBInstanceFromS3_598505, base: "/",
    url: url_PostRestoreDBInstanceFromS3_598506,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromS3_598446 = ref object of OpenApiRestCall_593421
proc url_GetRestoreDBInstanceFromS3_598448(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBInstanceFromS3_598447(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: JString (required)
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_598449 = query.getOrDefault("MonitoringInterval")
  valid_598449 = validateParameter(valid_598449, JInt, required = false, default = nil)
  if valid_598449 != nil:
    section.add "MonitoringInterval", valid_598449
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_598450 = query.getOrDefault("Engine")
  valid_598450 = validateParameter(valid_598450, JString, required = true,
                                 default = nil)
  if valid_598450 != nil:
    section.add "Engine", valid_598450
  var valid_598451 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_598451 = validateParameter(valid_598451, JBool, required = false, default = nil)
  if valid_598451 != nil:
    section.add "UseDefaultProcessorFeatures", valid_598451
  var valid_598452 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_598452 = validateParameter(valid_598452, JInt, required = false, default = nil)
  if valid_598452 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_598452
  var valid_598453 = query.getOrDefault("StorageEncrypted")
  valid_598453 = validateParameter(valid_598453, JBool, required = false, default = nil)
  if valid_598453 != nil:
    section.add "StorageEncrypted", valid_598453
  var valid_598454 = query.getOrDefault("AllocatedStorage")
  valid_598454 = validateParameter(valid_598454, JInt, required = false, default = nil)
  if valid_598454 != nil:
    section.add "AllocatedStorage", valid_598454
  var valid_598455 = query.getOrDefault("StorageType")
  valid_598455 = validateParameter(valid_598455, JString, required = false,
                                 default = nil)
  if valid_598455 != nil:
    section.add "StorageType", valid_598455
  var valid_598456 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598456 = validateParameter(valid_598456, JBool, required = false, default = nil)
  if valid_598456 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598456
  var valid_598457 = query.getOrDefault("S3Prefix")
  valid_598457 = validateParameter(valid_598457, JString, required = false,
                                 default = nil)
  if valid_598457 != nil:
    section.add "S3Prefix", valid_598457
  var valid_598458 = query.getOrDefault("DBSecurityGroups")
  valid_598458 = validateParameter(valid_598458, JArray, required = false,
                                 default = nil)
  if valid_598458 != nil:
    section.add "DBSecurityGroups", valid_598458
  var valid_598459 = query.getOrDefault("MasterUserPassword")
  valid_598459 = validateParameter(valid_598459, JString, required = false,
                                 default = nil)
  if valid_598459 != nil:
    section.add "MasterUserPassword", valid_598459
  var valid_598460 = query.getOrDefault("MonitoringRoleArn")
  valid_598460 = validateParameter(valid_598460, JString, required = false,
                                 default = nil)
  if valid_598460 != nil:
    section.add "MonitoringRoleArn", valid_598460
  var valid_598461 = query.getOrDefault("MultiAZ")
  valid_598461 = validateParameter(valid_598461, JBool, required = false, default = nil)
  if valid_598461 != nil:
    section.add "MultiAZ", valid_598461
  var valid_598462 = query.getOrDefault("BackupRetentionPeriod")
  valid_598462 = validateParameter(valid_598462, JInt, required = false, default = nil)
  if valid_598462 != nil:
    section.add "BackupRetentionPeriod", valid_598462
  var valid_598463 = query.getOrDefault("DBName")
  valid_598463 = validateParameter(valid_598463, JString, required = false,
                                 default = nil)
  if valid_598463 != nil:
    section.add "DBName", valid_598463
  var valid_598464 = query.getOrDefault("CopyTagsToSnapshot")
  valid_598464 = validateParameter(valid_598464, JBool, required = false, default = nil)
  if valid_598464 != nil:
    section.add "CopyTagsToSnapshot", valid_598464
  var valid_598465 = query.getOrDefault("DeletionProtection")
  valid_598465 = validateParameter(valid_598465, JBool, required = false, default = nil)
  if valid_598465 != nil:
    section.add "DeletionProtection", valid_598465
  var valid_598466 = query.getOrDefault("DBSubnetGroupName")
  valid_598466 = validateParameter(valid_598466, JString, required = false,
                                 default = nil)
  if valid_598466 != nil:
    section.add "DBSubnetGroupName", valid_598466
  var valid_598467 = query.getOrDefault("KmsKeyId")
  valid_598467 = validateParameter(valid_598467, JString, required = false,
                                 default = nil)
  if valid_598467 != nil:
    section.add "KmsKeyId", valid_598467
  var valid_598468 = query.getOrDefault("SourceEngine")
  valid_598468 = validateParameter(valid_598468, JString, required = true,
                                 default = nil)
  if valid_598468 != nil:
    section.add "SourceEngine", valid_598468
  var valid_598469 = query.getOrDefault("EngineVersion")
  valid_598469 = validateParameter(valid_598469, JString, required = false,
                                 default = nil)
  if valid_598469 != nil:
    section.add "EngineVersion", valid_598469
  var valid_598470 = query.getOrDefault("SourceEngineVersion")
  valid_598470 = validateParameter(valid_598470, JString, required = true,
                                 default = nil)
  if valid_598470 != nil:
    section.add "SourceEngineVersion", valid_598470
  var valid_598471 = query.getOrDefault("PreferredBackupWindow")
  valid_598471 = validateParameter(valid_598471, JString, required = false,
                                 default = nil)
  if valid_598471 != nil:
    section.add "PreferredBackupWindow", valid_598471
  var valid_598472 = query.getOrDefault("DBInstanceIdentifier")
  valid_598472 = validateParameter(valid_598472, JString, required = true,
                                 default = nil)
  if valid_598472 != nil:
    section.add "DBInstanceIdentifier", valid_598472
  var valid_598473 = query.getOrDefault("MasterUsername")
  valid_598473 = validateParameter(valid_598473, JString, required = false,
                                 default = nil)
  if valid_598473 != nil:
    section.add "MasterUsername", valid_598473
  var valid_598474 = query.getOrDefault("S3BucketName")
  valid_598474 = validateParameter(valid_598474, JString, required = true,
                                 default = nil)
  if valid_598474 != nil:
    section.add "S3BucketName", valid_598474
  var valid_598475 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_598475 = validateParameter(valid_598475, JString, required = false,
                                 default = nil)
  if valid_598475 != nil:
    section.add "PreferredMaintenanceWindow", valid_598475
  var valid_598476 = query.getOrDefault("ProcessorFeatures")
  valid_598476 = validateParameter(valid_598476, JArray, required = false,
                                 default = nil)
  if valid_598476 != nil:
    section.add "ProcessorFeatures", valid_598476
  var valid_598477 = query.getOrDefault("OptionGroupName")
  valid_598477 = validateParameter(valid_598477, JString, required = false,
                                 default = nil)
  if valid_598477 != nil:
    section.add "OptionGroupName", valid_598477
  var valid_598478 = query.getOrDefault("AvailabilityZone")
  valid_598478 = validateParameter(valid_598478, JString, required = false,
                                 default = nil)
  if valid_598478 != nil:
    section.add "AvailabilityZone", valid_598478
  var valid_598479 = query.getOrDefault("Iops")
  valid_598479 = validateParameter(valid_598479, JInt, required = false, default = nil)
  if valid_598479 != nil:
    section.add "Iops", valid_598479
  var valid_598480 = query.getOrDefault("VpcSecurityGroupIds")
  valid_598480 = validateParameter(valid_598480, JArray, required = false,
                                 default = nil)
  if valid_598480 != nil:
    section.add "VpcSecurityGroupIds", valid_598480
  var valid_598481 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_598481 = validateParameter(valid_598481, JArray, required = false,
                                 default = nil)
  if valid_598481 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598481
  var valid_598482 = query.getOrDefault("LicenseModel")
  valid_598482 = validateParameter(valid_598482, JString, required = false,
                                 default = nil)
  if valid_598482 != nil:
    section.add "LicenseModel", valid_598482
  var valid_598483 = query.getOrDefault("Tags")
  valid_598483 = validateParameter(valid_598483, JArray, required = false,
                                 default = nil)
  if valid_598483 != nil:
    section.add "Tags", valid_598483
  var valid_598484 = query.getOrDefault("S3IngestionRoleArn")
  valid_598484 = validateParameter(valid_598484, JString, required = true,
                                 default = nil)
  if valid_598484 != nil:
    section.add "S3IngestionRoleArn", valid_598484
  var valid_598485 = query.getOrDefault("DBParameterGroupName")
  valid_598485 = validateParameter(valid_598485, JString, required = false,
                                 default = nil)
  if valid_598485 != nil:
    section.add "DBParameterGroupName", valid_598485
  var valid_598486 = query.getOrDefault("DBInstanceClass")
  valid_598486 = validateParameter(valid_598486, JString, required = true,
                                 default = nil)
  if valid_598486 != nil:
    section.add "DBInstanceClass", valid_598486
  var valid_598487 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_598487 = validateParameter(valid_598487, JString, required = false,
                                 default = nil)
  if valid_598487 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_598487
  var valid_598488 = query.getOrDefault("Action")
  valid_598488 = validateParameter(valid_598488, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_598488 != nil:
    section.add "Action", valid_598488
  var valid_598489 = query.getOrDefault("PubliclyAccessible")
  valid_598489 = validateParameter(valid_598489, JBool, required = false, default = nil)
  if valid_598489 != nil:
    section.add "PubliclyAccessible", valid_598489
  var valid_598490 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_598490 = validateParameter(valid_598490, JBool, required = false, default = nil)
  if valid_598490 != nil:
    section.add "AutoMinorVersionUpgrade", valid_598490
  var valid_598491 = query.getOrDefault("Port")
  valid_598491 = validateParameter(valid_598491, JInt, required = false, default = nil)
  if valid_598491 != nil:
    section.add "Port", valid_598491
  var valid_598492 = query.getOrDefault("EnablePerformanceInsights")
  valid_598492 = validateParameter(valid_598492, JBool, required = false, default = nil)
  if valid_598492 != nil:
    section.add "EnablePerformanceInsights", valid_598492
  var valid_598493 = query.getOrDefault("Version")
  valid_598493 = validateParameter(valid_598493, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598493 != nil:
    section.add "Version", valid_598493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598494 = header.getOrDefault("X-Amz-Date")
  valid_598494 = validateParameter(valid_598494, JString, required = false,
                                 default = nil)
  if valid_598494 != nil:
    section.add "X-Amz-Date", valid_598494
  var valid_598495 = header.getOrDefault("X-Amz-Security-Token")
  valid_598495 = validateParameter(valid_598495, JString, required = false,
                                 default = nil)
  if valid_598495 != nil:
    section.add "X-Amz-Security-Token", valid_598495
  var valid_598496 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598496 = validateParameter(valid_598496, JString, required = false,
                                 default = nil)
  if valid_598496 != nil:
    section.add "X-Amz-Content-Sha256", valid_598496
  var valid_598497 = header.getOrDefault("X-Amz-Algorithm")
  valid_598497 = validateParameter(valid_598497, JString, required = false,
                                 default = nil)
  if valid_598497 != nil:
    section.add "X-Amz-Algorithm", valid_598497
  var valid_598498 = header.getOrDefault("X-Amz-Signature")
  valid_598498 = validateParameter(valid_598498, JString, required = false,
                                 default = nil)
  if valid_598498 != nil:
    section.add "X-Amz-Signature", valid_598498
  var valid_598499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598499 = validateParameter(valid_598499, JString, required = false,
                                 default = nil)
  if valid_598499 != nil:
    section.add "X-Amz-SignedHeaders", valid_598499
  var valid_598500 = header.getOrDefault("X-Amz-Credential")
  valid_598500 = validateParameter(valid_598500, JString, required = false,
                                 default = nil)
  if valid_598500 != nil:
    section.add "X-Amz-Credential", valid_598500
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598501: Call_GetRestoreDBInstanceFromS3_598446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_598501.validator(path, query, header, formData, body)
  let scheme = call_598501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598501.url(scheme.get, call_598501.host, call_598501.base,
                         call_598501.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598501, url, valid)

proc call*(call_598502: Call_GetRestoreDBInstanceFromS3_598446; Engine: string;
          SourceEngine: string; SourceEngineVersion: string;
          DBInstanceIdentifier: string; S3BucketName: string;
          S3IngestionRoleArn: string; DBInstanceClass: string;
          MonitoringInterval: int = 0; UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0;
          StorageEncrypted: bool = false; AllocatedStorage: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          S3Prefix: string = ""; DBSecurityGroups: JsonNode = nil;
          MasterUserPassword: string = ""; MonitoringRoleArn: string = "";
          MultiAZ: bool = false; BackupRetentionPeriod: int = 0; DBName: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          EngineVersion: string = ""; PreferredBackupWindow: string = "";
          MasterUsername: string = ""; PreferredMaintenanceWindow: string = "";
          ProcessorFeatures: JsonNode = nil; OptionGroupName: string = "";
          AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; LicenseModel: string = "";
          Tags: JsonNode = nil; DBParameterGroupName: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          Action: string = "RestoreDBInstanceFromS3";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          Port: int = 0; EnablePerformanceInsights: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: string (required)
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: string (required)
  var query_598503 = newJObject()
  add(query_598503, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_598503, "Engine", newJString(Engine))
  add(query_598503, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_598503, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_598503, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_598503, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_598503, "StorageType", newJString(StorageType))
  add(query_598503, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_598503, "S3Prefix", newJString(S3Prefix))
  if DBSecurityGroups != nil:
    query_598503.add "DBSecurityGroups", DBSecurityGroups
  add(query_598503, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_598503, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_598503, "MultiAZ", newJBool(MultiAZ))
  add(query_598503, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_598503, "DBName", newJString(DBName))
  add(query_598503, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_598503, "DeletionProtection", newJBool(DeletionProtection))
  add(query_598503, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_598503, "KmsKeyId", newJString(KmsKeyId))
  add(query_598503, "SourceEngine", newJString(SourceEngine))
  add(query_598503, "EngineVersion", newJString(EngineVersion))
  add(query_598503, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_598503, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_598503, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_598503, "MasterUsername", newJString(MasterUsername))
  add(query_598503, "S3BucketName", newJString(S3BucketName))
  add(query_598503, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  if ProcessorFeatures != nil:
    query_598503.add "ProcessorFeatures", ProcessorFeatures
  add(query_598503, "OptionGroupName", newJString(OptionGroupName))
  add(query_598503, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_598503, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_598503.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_598503.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_598503, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_598503.add "Tags", Tags
  add(query_598503, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_598503, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_598503, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_598503, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_598503, "Action", newJString(Action))
  add(query_598503, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_598503, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_598503, "Port", newJInt(Port))
  add(query_598503, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_598503, "Version", newJString(Version))
  result = call_598502.call(nil, query_598503, nil, nil, nil)

var getRestoreDBInstanceFromS3* = Call_GetRestoreDBInstanceFromS3_598446(
    name: "getRestoreDBInstanceFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_GetRestoreDBInstanceFromS3_598447, base: "/",
    url: url_GetRestoreDBInstanceFromS3_598448,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceToPointInTime_598609 = ref object of OpenApiRestCall_593421
proc url_PostRestoreDBInstanceToPointInTime_598611(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBInstanceToPointInTime_598610(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598612 = query.getOrDefault("Action")
  valid_598612 = validateParameter(valid_598612, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_598612 != nil:
    section.add "Action", valid_598612
  var valid_598613 = query.getOrDefault("Version")
  valid_598613 = validateParameter(valid_598613, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598613 != nil:
    section.add "Version", valid_598613
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598614 = header.getOrDefault("X-Amz-Date")
  valid_598614 = validateParameter(valid_598614, JString, required = false,
                                 default = nil)
  if valid_598614 != nil:
    section.add "X-Amz-Date", valid_598614
  var valid_598615 = header.getOrDefault("X-Amz-Security-Token")
  valid_598615 = validateParameter(valid_598615, JString, required = false,
                                 default = nil)
  if valid_598615 != nil:
    section.add "X-Amz-Security-Token", valid_598615
  var valid_598616 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598616 = validateParameter(valid_598616, JString, required = false,
                                 default = nil)
  if valid_598616 != nil:
    section.add "X-Amz-Content-Sha256", valid_598616
  var valid_598617 = header.getOrDefault("X-Amz-Algorithm")
  valid_598617 = validateParameter(valid_598617, JString, required = false,
                                 default = nil)
  if valid_598617 != nil:
    section.add "X-Amz-Algorithm", valid_598617
  var valid_598618 = header.getOrDefault("X-Amz-Signature")
  valid_598618 = validateParameter(valid_598618, JString, required = false,
                                 default = nil)
  if valid_598618 != nil:
    section.add "X-Amz-Signature", valid_598618
  var valid_598619 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598619 = validateParameter(valid_598619, JString, required = false,
                                 default = nil)
  if valid_598619 != nil:
    section.add "X-Amz-SignedHeaders", valid_598619
  var valid_598620 = header.getOrDefault("X-Amz-Credential")
  valid_598620 = validateParameter(valid_598620, JString, required = false,
                                 default = nil)
  if valid_598620 != nil:
    section.add "X-Amz-Credential", valid_598620
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  section = newJObject()
  var valid_598621 = formData.getOrDefault("ProcessorFeatures")
  valid_598621 = validateParameter(valid_598621, JArray, required = false,
                                 default = nil)
  if valid_598621 != nil:
    section.add "ProcessorFeatures", valid_598621
  var valid_598622 = formData.getOrDefault("UseLatestRestorableTime")
  valid_598622 = validateParameter(valid_598622, JBool, required = false, default = nil)
  if valid_598622 != nil:
    section.add "UseLatestRestorableTime", valid_598622
  var valid_598623 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_598623 = validateParameter(valid_598623, JBool, required = false, default = nil)
  if valid_598623 != nil:
    section.add "CopyTagsToSnapshot", valid_598623
  var valid_598624 = formData.getOrDefault("Port")
  valid_598624 = validateParameter(valid_598624, JInt, required = false, default = nil)
  if valid_598624 != nil:
    section.add "Port", valid_598624
  var valid_598625 = formData.getOrDefault("Engine")
  valid_598625 = validateParameter(valid_598625, JString, required = false,
                                 default = nil)
  if valid_598625 != nil:
    section.add "Engine", valid_598625
  var valid_598626 = formData.getOrDefault("Iops")
  valid_598626 = validateParameter(valid_598626, JInt, required = false, default = nil)
  if valid_598626 != nil:
    section.add "Iops", valid_598626
  var valid_598627 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_598627 = validateParameter(valid_598627, JArray, required = false,
                                 default = nil)
  if valid_598627 != nil:
    section.add "VpcSecurityGroupIds", valid_598627
  var valid_598628 = formData.getOrDefault("DBName")
  valid_598628 = validateParameter(valid_598628, JString, required = false,
                                 default = nil)
  if valid_598628 != nil:
    section.add "DBName", valid_598628
  var valid_598629 = formData.getOrDefault("OptionGroupName")
  valid_598629 = validateParameter(valid_598629, JString, required = false,
                                 default = nil)
  if valid_598629 != nil:
    section.add "OptionGroupName", valid_598629
  var valid_598630 = formData.getOrDefault("DBParameterGroupName")
  valid_598630 = validateParameter(valid_598630, JString, required = false,
                                 default = nil)
  if valid_598630 != nil:
    section.add "DBParameterGroupName", valid_598630
  var valid_598631 = formData.getOrDefault("Tags")
  valid_598631 = validateParameter(valid_598631, JArray, required = false,
                                 default = nil)
  if valid_598631 != nil:
    section.add "Tags", valid_598631
  var valid_598632 = formData.getOrDefault("TdeCredentialArn")
  valid_598632 = validateParameter(valid_598632, JString, required = false,
                                 default = nil)
  if valid_598632 != nil:
    section.add "TdeCredentialArn", valid_598632
  var valid_598633 = formData.getOrDefault("DeletionProtection")
  valid_598633 = validateParameter(valid_598633, JBool, required = false, default = nil)
  if valid_598633 != nil:
    section.add "DeletionProtection", valid_598633
  var valid_598634 = formData.getOrDefault("DBSubnetGroupName")
  valid_598634 = validateParameter(valid_598634, JString, required = false,
                                 default = nil)
  if valid_598634 != nil:
    section.add "DBSubnetGroupName", valid_598634
  var valid_598635 = formData.getOrDefault("TdeCredentialPassword")
  valid_598635 = validateParameter(valid_598635, JString, required = false,
                                 default = nil)
  if valid_598635 != nil:
    section.add "TdeCredentialPassword", valid_598635
  var valid_598636 = formData.getOrDefault("AvailabilityZone")
  valid_598636 = validateParameter(valid_598636, JString, required = false,
                                 default = nil)
  if valid_598636 != nil:
    section.add "AvailabilityZone", valid_598636
  var valid_598637 = formData.getOrDefault("MultiAZ")
  valid_598637 = validateParameter(valid_598637, JBool, required = false, default = nil)
  if valid_598637 != nil:
    section.add "MultiAZ", valid_598637
  var valid_598638 = formData.getOrDefault("DomainIAMRoleName")
  valid_598638 = validateParameter(valid_598638, JString, required = false,
                                 default = nil)
  if valid_598638 != nil:
    section.add "DomainIAMRoleName", valid_598638
  var valid_598639 = formData.getOrDefault("RestoreTime")
  valid_598639 = validateParameter(valid_598639, JString, required = false,
                                 default = nil)
  if valid_598639 != nil:
    section.add "RestoreTime", valid_598639
  var valid_598640 = formData.getOrDefault("PubliclyAccessible")
  valid_598640 = validateParameter(valid_598640, JBool, required = false, default = nil)
  if valid_598640 != nil:
    section.add "PubliclyAccessible", valid_598640
  var valid_598641 = formData.getOrDefault("StorageType")
  valid_598641 = validateParameter(valid_598641, JString, required = false,
                                 default = nil)
  if valid_598641 != nil:
    section.add "StorageType", valid_598641
  var valid_598642 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_598642 = validateParameter(valid_598642, JArray, required = false,
                                 default = nil)
  if valid_598642 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598642
  assert formData != nil, "formData argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_598643 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_598643 = validateParameter(valid_598643, JString, required = true,
                                 default = nil)
  if valid_598643 != nil:
    section.add "TargetDBInstanceIdentifier", valid_598643
  var valid_598644 = formData.getOrDefault("DBInstanceClass")
  valid_598644 = validateParameter(valid_598644, JString, required = false,
                                 default = nil)
  if valid_598644 != nil:
    section.add "DBInstanceClass", valid_598644
  var valid_598645 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_598645 = validateParameter(valid_598645, JString, required = false,
                                 default = nil)
  if valid_598645 != nil:
    section.add "SourceDBInstanceIdentifier", valid_598645
  var valid_598646 = formData.getOrDefault("Domain")
  valid_598646 = validateParameter(valid_598646, JString, required = false,
                                 default = nil)
  if valid_598646 != nil:
    section.add "Domain", valid_598646
  var valid_598647 = formData.getOrDefault("LicenseModel")
  valid_598647 = validateParameter(valid_598647, JString, required = false,
                                 default = nil)
  if valid_598647 != nil:
    section.add "LicenseModel", valid_598647
  var valid_598648 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598648 = validateParameter(valid_598648, JBool, required = false, default = nil)
  if valid_598648 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598648
  var valid_598649 = formData.getOrDefault("SourceDbiResourceId")
  valid_598649 = validateParameter(valid_598649, JString, required = false,
                                 default = nil)
  if valid_598649 != nil:
    section.add "SourceDbiResourceId", valid_598649
  var valid_598650 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_598650 = validateParameter(valid_598650, JBool, required = false, default = nil)
  if valid_598650 != nil:
    section.add "AutoMinorVersionUpgrade", valid_598650
  var valid_598651 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_598651 = validateParameter(valid_598651, JBool, required = false, default = nil)
  if valid_598651 != nil:
    section.add "UseDefaultProcessorFeatures", valid_598651
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598652: Call_PostRestoreDBInstanceToPointInTime_598609;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_598652.validator(path, query, header, formData, body)
  let scheme = call_598652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598652.url(scheme.get, call_598652.host, call_598652.base,
                         call_598652.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598652, url, valid)

proc call*(call_598653: Call_PostRestoreDBInstanceToPointInTime_598609;
          TargetDBInstanceIdentifier: string; ProcessorFeatures: JsonNode = nil;
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Port: int = 0; Engine: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; DBName: string = "";
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; TdeCredentialArn: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MultiAZ: bool = false; DomainIAMRoleName: string = "";
          Action: string = "RestoreDBInstanceToPointInTime";
          RestoreTime: string = ""; PubliclyAccessible: bool = false;
          StorageType: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          DBInstanceClass: string = ""; SourceDBInstanceIdentifier: string = "";
          Domain: string = ""; LicenseModel: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          SourceDbiResourceId: string = ""; AutoMinorVersionUpgrade: bool = false;
          Version: string = "2014-10-31"; UseDefaultProcessorFeatures: bool = false): Recallable =
  ## postRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Version: string (required)
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  var query_598654 = newJObject()
  var formData_598655 = newJObject()
  if ProcessorFeatures != nil:
    formData_598655.add "ProcessorFeatures", ProcessorFeatures
  add(formData_598655, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_598655, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_598655, "Port", newJInt(Port))
  add(formData_598655, "Engine", newJString(Engine))
  add(formData_598655, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    formData_598655.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_598655, "DBName", newJString(DBName))
  add(formData_598655, "OptionGroupName", newJString(OptionGroupName))
  add(formData_598655, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_598655.add "Tags", Tags
  add(formData_598655, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_598655, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_598655, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_598655, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_598655, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_598655, "MultiAZ", newJBool(MultiAZ))
  add(formData_598655, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_598654, "Action", newJString(Action))
  add(formData_598655, "RestoreTime", newJString(RestoreTime))
  add(formData_598655, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_598655, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_598655.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_598655, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(formData_598655, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_598655, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_598655, "Domain", newJString(Domain))
  add(formData_598655, "LicenseModel", newJString(LicenseModel))
  add(formData_598655, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_598655, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(formData_598655, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(query_598654, "Version", newJString(Version))
  add(formData_598655, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  result = call_598653.call(nil, query_598654, nil, formData_598655, nil)

var postRestoreDBInstanceToPointInTime* = Call_PostRestoreDBInstanceToPointInTime_598609(
    name: "postRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_PostRestoreDBInstanceToPointInTime_598610, base: "/",
    url: url_PostRestoreDBInstanceToPointInTime_598611,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceToPointInTime_598563 = ref object of OpenApiRestCall_593421
proc url_GetRestoreDBInstanceToPointInTime_598565(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBInstanceToPointInTime_598564(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Version: JString (required)
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  section = newJObject()
  var valid_598566 = query.getOrDefault("Engine")
  valid_598566 = validateParameter(valid_598566, JString, required = false,
                                 default = nil)
  if valid_598566 != nil:
    section.add "Engine", valid_598566
  var valid_598567 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_598567 = validateParameter(valid_598567, JBool, required = false, default = nil)
  if valid_598567 != nil:
    section.add "UseDefaultProcessorFeatures", valid_598567
  var valid_598568 = query.getOrDefault("ProcessorFeatures")
  valid_598568 = validateParameter(valid_598568, JArray, required = false,
                                 default = nil)
  if valid_598568 != nil:
    section.add "ProcessorFeatures", valid_598568
  var valid_598569 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_598569 = validateParameter(valid_598569, JString, required = false,
                                 default = nil)
  if valid_598569 != nil:
    section.add "SourceDBInstanceIdentifier", valid_598569
  var valid_598570 = query.getOrDefault("StorageType")
  valid_598570 = validateParameter(valid_598570, JString, required = false,
                                 default = nil)
  if valid_598570 != nil:
    section.add "StorageType", valid_598570
  var valid_598571 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_598571 = validateParameter(valid_598571, JBool, required = false, default = nil)
  if valid_598571 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_598571
  assert query != nil, "query argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_598572 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_598572 = validateParameter(valid_598572, JString, required = true,
                                 default = nil)
  if valid_598572 != nil:
    section.add "TargetDBInstanceIdentifier", valid_598572
  var valid_598573 = query.getOrDefault("AvailabilityZone")
  valid_598573 = validateParameter(valid_598573, JString, required = false,
                                 default = nil)
  if valid_598573 != nil:
    section.add "AvailabilityZone", valid_598573
  var valid_598574 = query.getOrDefault("Iops")
  valid_598574 = validateParameter(valid_598574, JInt, required = false, default = nil)
  if valid_598574 != nil:
    section.add "Iops", valid_598574
  var valid_598575 = query.getOrDefault("OptionGroupName")
  valid_598575 = validateParameter(valid_598575, JString, required = false,
                                 default = nil)
  if valid_598575 != nil:
    section.add "OptionGroupName", valid_598575
  var valid_598576 = query.getOrDefault("VpcSecurityGroupIds")
  valid_598576 = validateParameter(valid_598576, JArray, required = false,
                                 default = nil)
  if valid_598576 != nil:
    section.add "VpcSecurityGroupIds", valid_598576
  var valid_598577 = query.getOrDefault("RestoreTime")
  valid_598577 = validateParameter(valid_598577, JString, required = false,
                                 default = nil)
  if valid_598577 != nil:
    section.add "RestoreTime", valid_598577
  var valid_598578 = query.getOrDefault("MultiAZ")
  valid_598578 = validateParameter(valid_598578, JBool, required = false, default = nil)
  if valid_598578 != nil:
    section.add "MultiAZ", valid_598578
  var valid_598579 = query.getOrDefault("TdeCredentialPassword")
  valid_598579 = validateParameter(valid_598579, JString, required = false,
                                 default = nil)
  if valid_598579 != nil:
    section.add "TdeCredentialPassword", valid_598579
  var valid_598580 = query.getOrDefault("LicenseModel")
  valid_598580 = validateParameter(valid_598580, JString, required = false,
                                 default = nil)
  if valid_598580 != nil:
    section.add "LicenseModel", valid_598580
  var valid_598581 = query.getOrDefault("CopyTagsToSnapshot")
  valid_598581 = validateParameter(valid_598581, JBool, required = false, default = nil)
  if valid_598581 != nil:
    section.add "CopyTagsToSnapshot", valid_598581
  var valid_598582 = query.getOrDefault("DBName")
  valid_598582 = validateParameter(valid_598582, JString, required = false,
                                 default = nil)
  if valid_598582 != nil:
    section.add "DBName", valid_598582
  var valid_598583 = query.getOrDefault("Tags")
  valid_598583 = validateParameter(valid_598583, JArray, required = false,
                                 default = nil)
  if valid_598583 != nil:
    section.add "Tags", valid_598583
  var valid_598584 = query.getOrDefault("DomainIAMRoleName")
  valid_598584 = validateParameter(valid_598584, JString, required = false,
                                 default = nil)
  if valid_598584 != nil:
    section.add "DomainIAMRoleName", valid_598584
  var valid_598585 = query.getOrDefault("DBInstanceClass")
  valid_598585 = validateParameter(valid_598585, JString, required = false,
                                 default = nil)
  if valid_598585 != nil:
    section.add "DBInstanceClass", valid_598585
  var valid_598586 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_598586 = validateParameter(valid_598586, JArray, required = false,
                                 default = nil)
  if valid_598586 != nil:
    section.add "EnableCloudwatchLogsExports", valid_598586
  var valid_598587 = query.getOrDefault("UseLatestRestorableTime")
  valid_598587 = validateParameter(valid_598587, JBool, required = false, default = nil)
  if valid_598587 != nil:
    section.add "UseLatestRestorableTime", valid_598587
  var valid_598588 = query.getOrDefault("DBParameterGroupName")
  valid_598588 = validateParameter(valid_598588, JString, required = false,
                                 default = nil)
  if valid_598588 != nil:
    section.add "DBParameterGroupName", valid_598588
  var valid_598589 = query.getOrDefault("DeletionProtection")
  valid_598589 = validateParameter(valid_598589, JBool, required = false, default = nil)
  if valid_598589 != nil:
    section.add "DeletionProtection", valid_598589
  var valid_598590 = query.getOrDefault("Action")
  valid_598590 = validateParameter(valid_598590, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_598590 != nil:
    section.add "Action", valid_598590
  var valid_598591 = query.getOrDefault("DBSubnetGroupName")
  valid_598591 = validateParameter(valid_598591, JString, required = false,
                                 default = nil)
  if valid_598591 != nil:
    section.add "DBSubnetGroupName", valid_598591
  var valid_598592 = query.getOrDefault("Domain")
  valid_598592 = validateParameter(valid_598592, JString, required = false,
                                 default = nil)
  if valid_598592 != nil:
    section.add "Domain", valid_598592
  var valid_598593 = query.getOrDefault("TdeCredentialArn")
  valid_598593 = validateParameter(valid_598593, JString, required = false,
                                 default = nil)
  if valid_598593 != nil:
    section.add "TdeCredentialArn", valid_598593
  var valid_598594 = query.getOrDefault("PubliclyAccessible")
  valid_598594 = validateParameter(valid_598594, JBool, required = false, default = nil)
  if valid_598594 != nil:
    section.add "PubliclyAccessible", valid_598594
  var valid_598595 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_598595 = validateParameter(valid_598595, JBool, required = false, default = nil)
  if valid_598595 != nil:
    section.add "AutoMinorVersionUpgrade", valid_598595
  var valid_598596 = query.getOrDefault("Port")
  valid_598596 = validateParameter(valid_598596, JInt, required = false, default = nil)
  if valid_598596 != nil:
    section.add "Port", valid_598596
  var valid_598597 = query.getOrDefault("Version")
  valid_598597 = validateParameter(valid_598597, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598597 != nil:
    section.add "Version", valid_598597
  var valid_598598 = query.getOrDefault("SourceDbiResourceId")
  valid_598598 = validateParameter(valid_598598, JString, required = false,
                                 default = nil)
  if valid_598598 != nil:
    section.add "SourceDbiResourceId", valid_598598
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598599 = header.getOrDefault("X-Amz-Date")
  valid_598599 = validateParameter(valid_598599, JString, required = false,
                                 default = nil)
  if valid_598599 != nil:
    section.add "X-Amz-Date", valid_598599
  var valid_598600 = header.getOrDefault("X-Amz-Security-Token")
  valid_598600 = validateParameter(valid_598600, JString, required = false,
                                 default = nil)
  if valid_598600 != nil:
    section.add "X-Amz-Security-Token", valid_598600
  var valid_598601 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598601 = validateParameter(valid_598601, JString, required = false,
                                 default = nil)
  if valid_598601 != nil:
    section.add "X-Amz-Content-Sha256", valid_598601
  var valid_598602 = header.getOrDefault("X-Amz-Algorithm")
  valid_598602 = validateParameter(valid_598602, JString, required = false,
                                 default = nil)
  if valid_598602 != nil:
    section.add "X-Amz-Algorithm", valid_598602
  var valid_598603 = header.getOrDefault("X-Amz-Signature")
  valid_598603 = validateParameter(valid_598603, JString, required = false,
                                 default = nil)
  if valid_598603 != nil:
    section.add "X-Amz-Signature", valid_598603
  var valid_598604 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598604 = validateParameter(valid_598604, JString, required = false,
                                 default = nil)
  if valid_598604 != nil:
    section.add "X-Amz-SignedHeaders", valid_598604
  var valid_598605 = header.getOrDefault("X-Amz-Credential")
  valid_598605 = validateParameter(valid_598605, JString, required = false,
                                 default = nil)
  if valid_598605 != nil:
    section.add "X-Amz-Credential", valid_598605
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598606: Call_GetRestoreDBInstanceToPointInTime_598563;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_598606.validator(path, query, header, formData, body)
  let scheme = call_598606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598606.url(scheme.get, call_598606.host, call_598606.base,
                         call_598606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598606, url, valid)

proc call*(call_598607: Call_GetRestoreDBInstanceToPointInTime_598563;
          TargetDBInstanceIdentifier: string; Engine: string = "";
          UseDefaultProcessorFeatures: bool = false;
          ProcessorFeatures: JsonNode = nil;
          SourceDBInstanceIdentifier: string = ""; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZone: string = ""; Iops: int = 0; OptionGroupName: string = "";
          VpcSecurityGroupIds: JsonNode = nil; RestoreTime: string = "";
          MultiAZ: bool = false; TdeCredentialPassword: string = "";
          LicenseModel: string = ""; CopyTagsToSnapshot: bool = false;
          DBName: string = ""; Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          DBInstanceClass: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          UseLatestRestorableTime: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false;
          Action: string = "RestoreDBInstanceToPointInTime";
          DBSubnetGroupName: string = ""; Domain: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          Version: string = "2014-10-31"; SourceDbiResourceId: string = ""): Recallable =
  ## getRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Version: string (required)
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  var query_598608 = newJObject()
  add(query_598608, "Engine", newJString(Engine))
  add(query_598608, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  if ProcessorFeatures != nil:
    query_598608.add "ProcessorFeatures", ProcessorFeatures
  add(query_598608, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_598608, "StorageType", newJString(StorageType))
  add(query_598608, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_598608, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_598608, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_598608, "Iops", newJInt(Iops))
  add(query_598608, "OptionGroupName", newJString(OptionGroupName))
  if VpcSecurityGroupIds != nil:
    query_598608.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_598608, "RestoreTime", newJString(RestoreTime))
  add(query_598608, "MultiAZ", newJBool(MultiAZ))
  add(query_598608, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_598608, "LicenseModel", newJString(LicenseModel))
  add(query_598608, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_598608, "DBName", newJString(DBName))
  if Tags != nil:
    query_598608.add "Tags", Tags
  add(query_598608, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_598608, "DBInstanceClass", newJString(DBInstanceClass))
  if EnableCloudwatchLogsExports != nil:
    query_598608.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_598608, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_598608, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_598608, "DeletionProtection", newJBool(DeletionProtection))
  add(query_598608, "Action", newJString(Action))
  add(query_598608, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_598608, "Domain", newJString(Domain))
  add(query_598608, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_598608, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_598608, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_598608, "Port", newJInt(Port))
  add(query_598608, "Version", newJString(Version))
  add(query_598608, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  result = call_598607.call(nil, query_598608, nil, nil, nil)

var getRestoreDBInstanceToPointInTime* = Call_GetRestoreDBInstanceToPointInTime_598563(
    name: "getRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_GetRestoreDBInstanceToPointInTime_598564, base: "/",
    url: url_GetRestoreDBInstanceToPointInTime_598565,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeDBSecurityGroupIngress_598676 = ref object of OpenApiRestCall_593421
proc url_PostRevokeDBSecurityGroupIngress_598678(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRevokeDBSecurityGroupIngress_598677(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598679 = query.getOrDefault("Action")
  valid_598679 = validateParameter(valid_598679, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_598679 != nil:
    section.add "Action", valid_598679
  var valid_598680 = query.getOrDefault("Version")
  valid_598680 = validateParameter(valid_598680, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598680 != nil:
    section.add "Version", valid_598680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598681 = header.getOrDefault("X-Amz-Date")
  valid_598681 = validateParameter(valid_598681, JString, required = false,
                                 default = nil)
  if valid_598681 != nil:
    section.add "X-Amz-Date", valid_598681
  var valid_598682 = header.getOrDefault("X-Amz-Security-Token")
  valid_598682 = validateParameter(valid_598682, JString, required = false,
                                 default = nil)
  if valid_598682 != nil:
    section.add "X-Amz-Security-Token", valid_598682
  var valid_598683 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598683 = validateParameter(valid_598683, JString, required = false,
                                 default = nil)
  if valid_598683 != nil:
    section.add "X-Amz-Content-Sha256", valid_598683
  var valid_598684 = header.getOrDefault("X-Amz-Algorithm")
  valid_598684 = validateParameter(valid_598684, JString, required = false,
                                 default = nil)
  if valid_598684 != nil:
    section.add "X-Amz-Algorithm", valid_598684
  var valid_598685 = header.getOrDefault("X-Amz-Signature")
  valid_598685 = validateParameter(valid_598685, JString, required = false,
                                 default = nil)
  if valid_598685 != nil:
    section.add "X-Amz-Signature", valid_598685
  var valid_598686 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598686 = validateParameter(valid_598686, JString, required = false,
                                 default = nil)
  if valid_598686 != nil:
    section.add "X-Amz-SignedHeaders", valid_598686
  var valid_598687 = header.getOrDefault("X-Amz-Credential")
  valid_598687 = validateParameter(valid_598687, JString, required = false,
                                 default = nil)
  if valid_598687 != nil:
    section.add "X-Amz-Credential", valid_598687
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_598688 = formData.getOrDefault("DBSecurityGroupName")
  valid_598688 = validateParameter(valid_598688, JString, required = true,
                                 default = nil)
  if valid_598688 != nil:
    section.add "DBSecurityGroupName", valid_598688
  var valid_598689 = formData.getOrDefault("EC2SecurityGroupName")
  valid_598689 = validateParameter(valid_598689, JString, required = false,
                                 default = nil)
  if valid_598689 != nil:
    section.add "EC2SecurityGroupName", valid_598689
  var valid_598690 = formData.getOrDefault("EC2SecurityGroupId")
  valid_598690 = validateParameter(valid_598690, JString, required = false,
                                 default = nil)
  if valid_598690 != nil:
    section.add "EC2SecurityGroupId", valid_598690
  var valid_598691 = formData.getOrDefault("CIDRIP")
  valid_598691 = validateParameter(valid_598691, JString, required = false,
                                 default = nil)
  if valid_598691 != nil:
    section.add "CIDRIP", valid_598691
  var valid_598692 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_598692 = validateParameter(valid_598692, JString, required = false,
                                 default = nil)
  if valid_598692 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_598692
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598693: Call_PostRevokeDBSecurityGroupIngress_598676;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_598693.validator(path, query, header, formData, body)
  let scheme = call_598693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598693.url(scheme.get, call_598693.host, call_598693.base,
                         call_598693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598693, url, valid)

proc call*(call_598694: Call_PostRevokeDBSecurityGroupIngress_598676;
          DBSecurityGroupName: string;
          Action: string = "RevokeDBSecurityGroupIngress";
          EC2SecurityGroupName: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Version: string = "2014-10-31";
          EC2SecurityGroupOwnerId: string = ""): Recallable =
  ## postRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  var query_598695 = newJObject()
  var formData_598696 = newJObject()
  add(formData_598696, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_598695, "Action", newJString(Action))
  add(formData_598696, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_598696, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_598696, "CIDRIP", newJString(CIDRIP))
  add(query_598695, "Version", newJString(Version))
  add(formData_598696, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  result = call_598694.call(nil, query_598695, nil, formData_598696, nil)

var postRevokeDBSecurityGroupIngress* = Call_PostRevokeDBSecurityGroupIngress_598676(
    name: "postRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_PostRevokeDBSecurityGroupIngress_598677, base: "/",
    url: url_PostRevokeDBSecurityGroupIngress_598678,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeDBSecurityGroupIngress_598656 = ref object of OpenApiRestCall_593421
proc url_GetRevokeDBSecurityGroupIngress_598658(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRevokeDBSecurityGroupIngress_598657(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   Action: JString (required)
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_598659 = query.getOrDefault("EC2SecurityGroupId")
  valid_598659 = validateParameter(valid_598659, JString, required = false,
                                 default = nil)
  if valid_598659 != nil:
    section.add "EC2SecurityGroupId", valid_598659
  var valid_598660 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_598660 = validateParameter(valid_598660, JString, required = false,
                                 default = nil)
  if valid_598660 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_598660
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_598661 = query.getOrDefault("DBSecurityGroupName")
  valid_598661 = validateParameter(valid_598661, JString, required = true,
                                 default = nil)
  if valid_598661 != nil:
    section.add "DBSecurityGroupName", valid_598661
  var valid_598662 = query.getOrDefault("Action")
  valid_598662 = validateParameter(valid_598662, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_598662 != nil:
    section.add "Action", valid_598662
  var valid_598663 = query.getOrDefault("CIDRIP")
  valid_598663 = validateParameter(valid_598663, JString, required = false,
                                 default = nil)
  if valid_598663 != nil:
    section.add "CIDRIP", valid_598663
  var valid_598664 = query.getOrDefault("EC2SecurityGroupName")
  valid_598664 = validateParameter(valid_598664, JString, required = false,
                                 default = nil)
  if valid_598664 != nil:
    section.add "EC2SecurityGroupName", valid_598664
  var valid_598665 = query.getOrDefault("Version")
  valid_598665 = validateParameter(valid_598665, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598665 != nil:
    section.add "Version", valid_598665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598666 = header.getOrDefault("X-Amz-Date")
  valid_598666 = validateParameter(valid_598666, JString, required = false,
                                 default = nil)
  if valid_598666 != nil:
    section.add "X-Amz-Date", valid_598666
  var valid_598667 = header.getOrDefault("X-Amz-Security-Token")
  valid_598667 = validateParameter(valid_598667, JString, required = false,
                                 default = nil)
  if valid_598667 != nil:
    section.add "X-Amz-Security-Token", valid_598667
  var valid_598668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598668 = validateParameter(valid_598668, JString, required = false,
                                 default = nil)
  if valid_598668 != nil:
    section.add "X-Amz-Content-Sha256", valid_598668
  var valid_598669 = header.getOrDefault("X-Amz-Algorithm")
  valid_598669 = validateParameter(valid_598669, JString, required = false,
                                 default = nil)
  if valid_598669 != nil:
    section.add "X-Amz-Algorithm", valid_598669
  var valid_598670 = header.getOrDefault("X-Amz-Signature")
  valid_598670 = validateParameter(valid_598670, JString, required = false,
                                 default = nil)
  if valid_598670 != nil:
    section.add "X-Amz-Signature", valid_598670
  var valid_598671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598671 = validateParameter(valid_598671, JString, required = false,
                                 default = nil)
  if valid_598671 != nil:
    section.add "X-Amz-SignedHeaders", valid_598671
  var valid_598672 = header.getOrDefault("X-Amz-Credential")
  valid_598672 = validateParameter(valid_598672, JString, required = false,
                                 default = nil)
  if valid_598672 != nil:
    section.add "X-Amz-Credential", valid_598672
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598673: Call_GetRevokeDBSecurityGroupIngress_598656;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_598673.validator(path, query, header, formData, body)
  let scheme = call_598673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598673.url(scheme.get, call_598673.host, call_598673.base,
                         call_598673.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598673, url, valid)

proc call*(call_598674: Call_GetRevokeDBSecurityGroupIngress_598656;
          DBSecurityGroupName: string; EC2SecurityGroupId: string = "";
          EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeDBSecurityGroupIngress"; CIDRIP: string = "";
          EC2SecurityGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   Action: string (required)
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: string (required)
  var query_598675 = newJObject()
  add(query_598675, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_598675, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_598675, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_598675, "Action", newJString(Action))
  add(query_598675, "CIDRIP", newJString(CIDRIP))
  add(query_598675, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_598675, "Version", newJString(Version))
  result = call_598674.call(nil, query_598675, nil, nil, nil)

var getRevokeDBSecurityGroupIngress* = Call_GetRevokeDBSecurityGroupIngress_598656(
    name: "getRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_GetRevokeDBSecurityGroupIngress_598657, base: "/",
    url: url_GetRevokeDBSecurityGroupIngress_598658,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartActivityStream_598716 = ref object of OpenApiRestCall_593421
proc url_PostStartActivityStream_598718(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStartActivityStream_598717(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598719 = query.getOrDefault("Action")
  valid_598719 = validateParameter(valid_598719, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_598719 != nil:
    section.add "Action", valid_598719
  var valid_598720 = query.getOrDefault("Version")
  valid_598720 = validateParameter(valid_598720, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598720 != nil:
    section.add "Version", valid_598720
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598721 = header.getOrDefault("X-Amz-Date")
  valid_598721 = validateParameter(valid_598721, JString, required = false,
                                 default = nil)
  if valid_598721 != nil:
    section.add "X-Amz-Date", valid_598721
  var valid_598722 = header.getOrDefault("X-Amz-Security-Token")
  valid_598722 = validateParameter(valid_598722, JString, required = false,
                                 default = nil)
  if valid_598722 != nil:
    section.add "X-Amz-Security-Token", valid_598722
  var valid_598723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598723 = validateParameter(valid_598723, JString, required = false,
                                 default = nil)
  if valid_598723 != nil:
    section.add "X-Amz-Content-Sha256", valid_598723
  var valid_598724 = header.getOrDefault("X-Amz-Algorithm")
  valid_598724 = validateParameter(valid_598724, JString, required = false,
                                 default = nil)
  if valid_598724 != nil:
    section.add "X-Amz-Algorithm", valid_598724
  var valid_598725 = header.getOrDefault("X-Amz-Signature")
  valid_598725 = validateParameter(valid_598725, JString, required = false,
                                 default = nil)
  if valid_598725 != nil:
    section.add "X-Amz-Signature", valid_598725
  var valid_598726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598726 = validateParameter(valid_598726, JString, required = false,
                                 default = nil)
  if valid_598726 != nil:
    section.add "X-Amz-SignedHeaders", valid_598726
  var valid_598727 = header.getOrDefault("X-Amz-Credential")
  valid_598727 = validateParameter(valid_598727, JString, required = false,
                                 default = nil)
  if valid_598727 != nil:
    section.add "X-Amz-Credential", valid_598727
  result.add "header", section
  ## parameters in `formData` object:
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Mode` field"
  var valid_598728 = formData.getOrDefault("Mode")
  valid_598728 = validateParameter(valid_598728, JString, required = true,
                                 default = newJString("sync"))
  if valid_598728 != nil:
    section.add "Mode", valid_598728
  var valid_598729 = formData.getOrDefault("ApplyImmediately")
  valid_598729 = validateParameter(valid_598729, JBool, required = false, default = nil)
  if valid_598729 != nil:
    section.add "ApplyImmediately", valid_598729
  var valid_598730 = formData.getOrDefault("ResourceArn")
  valid_598730 = validateParameter(valid_598730, JString, required = true,
                                 default = nil)
  if valid_598730 != nil:
    section.add "ResourceArn", valid_598730
  var valid_598731 = formData.getOrDefault("KmsKeyId")
  valid_598731 = validateParameter(valid_598731, JString, required = true,
                                 default = nil)
  if valid_598731 != nil:
    section.add "KmsKeyId", valid_598731
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598732: Call_PostStartActivityStream_598716; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_598732.validator(path, query, header, formData, body)
  let scheme = call_598732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598732.url(scheme.get, call_598732.host, call_598732.base,
                         call_598732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598732, url, valid)

proc call*(call_598733: Call_PostStartActivityStream_598716; ResourceArn: string;
          KmsKeyId: string; Mode: string = "sync"; ApplyImmediately: bool = false;
          Action: string = "StartActivityStream"; Version: string = "2014-10-31"): Recallable =
  ## postStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   Version: string (required)
  var query_598734 = newJObject()
  var formData_598735 = newJObject()
  add(formData_598735, "Mode", newJString(Mode))
  add(formData_598735, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_598734, "Action", newJString(Action))
  add(formData_598735, "ResourceArn", newJString(ResourceArn))
  add(formData_598735, "KmsKeyId", newJString(KmsKeyId))
  add(query_598734, "Version", newJString(Version))
  result = call_598733.call(nil, query_598734, nil, formData_598735, nil)

var postStartActivityStream* = Call_PostStartActivityStream_598716(
    name: "postStartActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_PostStartActivityStream_598717, base: "/",
    url: url_PostStartActivityStream_598718, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartActivityStream_598697 = ref object of OpenApiRestCall_593421
proc url_GetStartActivityStream_598699(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStartActivityStream_598698(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Action: JString (required)
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_598700 = query.getOrDefault("ResourceArn")
  valid_598700 = validateParameter(valid_598700, JString, required = true,
                                 default = nil)
  if valid_598700 != nil:
    section.add "ResourceArn", valid_598700
  var valid_598701 = query.getOrDefault("Action")
  valid_598701 = validateParameter(valid_598701, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_598701 != nil:
    section.add "Action", valid_598701
  var valid_598702 = query.getOrDefault("KmsKeyId")
  valid_598702 = validateParameter(valid_598702, JString, required = true,
                                 default = nil)
  if valid_598702 != nil:
    section.add "KmsKeyId", valid_598702
  var valid_598703 = query.getOrDefault("Mode")
  valid_598703 = validateParameter(valid_598703, JString, required = true,
                                 default = newJString("sync"))
  if valid_598703 != nil:
    section.add "Mode", valid_598703
  var valid_598704 = query.getOrDefault("Version")
  valid_598704 = validateParameter(valid_598704, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598704 != nil:
    section.add "Version", valid_598704
  var valid_598705 = query.getOrDefault("ApplyImmediately")
  valid_598705 = validateParameter(valid_598705, JBool, required = false, default = nil)
  if valid_598705 != nil:
    section.add "ApplyImmediately", valid_598705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598706 = header.getOrDefault("X-Amz-Date")
  valid_598706 = validateParameter(valid_598706, JString, required = false,
                                 default = nil)
  if valid_598706 != nil:
    section.add "X-Amz-Date", valid_598706
  var valid_598707 = header.getOrDefault("X-Amz-Security-Token")
  valid_598707 = validateParameter(valid_598707, JString, required = false,
                                 default = nil)
  if valid_598707 != nil:
    section.add "X-Amz-Security-Token", valid_598707
  var valid_598708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598708 = validateParameter(valid_598708, JString, required = false,
                                 default = nil)
  if valid_598708 != nil:
    section.add "X-Amz-Content-Sha256", valid_598708
  var valid_598709 = header.getOrDefault("X-Amz-Algorithm")
  valid_598709 = validateParameter(valid_598709, JString, required = false,
                                 default = nil)
  if valid_598709 != nil:
    section.add "X-Amz-Algorithm", valid_598709
  var valid_598710 = header.getOrDefault("X-Amz-Signature")
  valid_598710 = validateParameter(valid_598710, JString, required = false,
                                 default = nil)
  if valid_598710 != nil:
    section.add "X-Amz-Signature", valid_598710
  var valid_598711 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598711 = validateParameter(valid_598711, JString, required = false,
                                 default = nil)
  if valid_598711 != nil:
    section.add "X-Amz-SignedHeaders", valid_598711
  var valid_598712 = header.getOrDefault("X-Amz-Credential")
  valid_598712 = validateParameter(valid_598712, JString, required = false,
                                 default = nil)
  if valid_598712 != nil:
    section.add "X-Amz-Credential", valid_598712
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598713: Call_GetStartActivityStream_598697; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_598713.validator(path, query, header, formData, body)
  let scheme = call_598713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598713.url(scheme.get, call_598713.host, call_598713.base,
                         call_598713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598713, url, valid)

proc call*(call_598714: Call_GetStartActivityStream_598697; ResourceArn: string;
          KmsKeyId: string; Action: string = "StartActivityStream";
          Mode: string = "sync"; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Action: string (required)
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  var query_598715 = newJObject()
  add(query_598715, "ResourceArn", newJString(ResourceArn))
  add(query_598715, "Action", newJString(Action))
  add(query_598715, "KmsKeyId", newJString(KmsKeyId))
  add(query_598715, "Mode", newJString(Mode))
  add(query_598715, "Version", newJString(Version))
  add(query_598715, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_598714.call(nil, query_598715, nil, nil, nil)

var getStartActivityStream* = Call_GetStartActivityStream_598697(
    name: "getStartActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_GetStartActivityStream_598698, base: "/",
    url: url_GetStartActivityStream_598699, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_598752 = ref object of OpenApiRestCall_593421
proc url_PostStartDBCluster_598754(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStartDBCluster_598753(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598755 = query.getOrDefault("Action")
  valid_598755 = validateParameter(valid_598755, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_598755 != nil:
    section.add "Action", valid_598755
  var valid_598756 = query.getOrDefault("Version")
  valid_598756 = validateParameter(valid_598756, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598756 != nil:
    section.add "Version", valid_598756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598757 = header.getOrDefault("X-Amz-Date")
  valid_598757 = validateParameter(valid_598757, JString, required = false,
                                 default = nil)
  if valid_598757 != nil:
    section.add "X-Amz-Date", valid_598757
  var valid_598758 = header.getOrDefault("X-Amz-Security-Token")
  valid_598758 = validateParameter(valid_598758, JString, required = false,
                                 default = nil)
  if valid_598758 != nil:
    section.add "X-Amz-Security-Token", valid_598758
  var valid_598759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598759 = validateParameter(valid_598759, JString, required = false,
                                 default = nil)
  if valid_598759 != nil:
    section.add "X-Amz-Content-Sha256", valid_598759
  var valid_598760 = header.getOrDefault("X-Amz-Algorithm")
  valid_598760 = validateParameter(valid_598760, JString, required = false,
                                 default = nil)
  if valid_598760 != nil:
    section.add "X-Amz-Algorithm", valid_598760
  var valid_598761 = header.getOrDefault("X-Amz-Signature")
  valid_598761 = validateParameter(valid_598761, JString, required = false,
                                 default = nil)
  if valid_598761 != nil:
    section.add "X-Amz-Signature", valid_598761
  var valid_598762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598762 = validateParameter(valid_598762, JString, required = false,
                                 default = nil)
  if valid_598762 != nil:
    section.add "X-Amz-SignedHeaders", valid_598762
  var valid_598763 = header.getOrDefault("X-Amz-Credential")
  valid_598763 = validateParameter(valid_598763, JString, required = false,
                                 default = nil)
  if valid_598763 != nil:
    section.add "X-Amz-Credential", valid_598763
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_598764 = formData.getOrDefault("DBClusterIdentifier")
  valid_598764 = validateParameter(valid_598764, JString, required = true,
                                 default = nil)
  if valid_598764 != nil:
    section.add "DBClusterIdentifier", valid_598764
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598765: Call_PostStartDBCluster_598752; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598765.validator(path, query, header, formData, body)
  let scheme = call_598765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598765.url(scheme.get, call_598765.host, call_598765.base,
                         call_598765.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598765, url, valid)

proc call*(call_598766: Call_PostStartDBCluster_598752;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_598767 = newJObject()
  var formData_598768 = newJObject()
  add(query_598767, "Action", newJString(Action))
  add(formData_598768, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_598767, "Version", newJString(Version))
  result = call_598766.call(nil, query_598767, nil, formData_598768, nil)

var postStartDBCluster* = Call_PostStartDBCluster_598752(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_598753, base: "/",
    url: url_PostStartDBCluster_598754, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_598736 = ref object of OpenApiRestCall_593421
proc url_GetStartDBCluster_598738(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStartDBCluster_598737(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_598739 = query.getOrDefault("DBClusterIdentifier")
  valid_598739 = validateParameter(valid_598739, JString, required = true,
                                 default = nil)
  if valid_598739 != nil:
    section.add "DBClusterIdentifier", valid_598739
  var valid_598740 = query.getOrDefault("Action")
  valid_598740 = validateParameter(valid_598740, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_598740 != nil:
    section.add "Action", valid_598740
  var valid_598741 = query.getOrDefault("Version")
  valid_598741 = validateParameter(valid_598741, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598741 != nil:
    section.add "Version", valid_598741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598742 = header.getOrDefault("X-Amz-Date")
  valid_598742 = validateParameter(valid_598742, JString, required = false,
                                 default = nil)
  if valid_598742 != nil:
    section.add "X-Amz-Date", valid_598742
  var valid_598743 = header.getOrDefault("X-Amz-Security-Token")
  valid_598743 = validateParameter(valid_598743, JString, required = false,
                                 default = nil)
  if valid_598743 != nil:
    section.add "X-Amz-Security-Token", valid_598743
  var valid_598744 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598744 = validateParameter(valid_598744, JString, required = false,
                                 default = nil)
  if valid_598744 != nil:
    section.add "X-Amz-Content-Sha256", valid_598744
  var valid_598745 = header.getOrDefault("X-Amz-Algorithm")
  valid_598745 = validateParameter(valid_598745, JString, required = false,
                                 default = nil)
  if valid_598745 != nil:
    section.add "X-Amz-Algorithm", valid_598745
  var valid_598746 = header.getOrDefault("X-Amz-Signature")
  valid_598746 = validateParameter(valid_598746, JString, required = false,
                                 default = nil)
  if valid_598746 != nil:
    section.add "X-Amz-Signature", valid_598746
  var valid_598747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598747 = validateParameter(valid_598747, JString, required = false,
                                 default = nil)
  if valid_598747 != nil:
    section.add "X-Amz-SignedHeaders", valid_598747
  var valid_598748 = header.getOrDefault("X-Amz-Credential")
  valid_598748 = validateParameter(valid_598748, JString, required = false,
                                 default = nil)
  if valid_598748 != nil:
    section.add "X-Amz-Credential", valid_598748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598749: Call_GetStartDBCluster_598736; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598749.validator(path, query, header, formData, body)
  let scheme = call_598749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598749.url(scheme.get, call_598749.host, call_598749.base,
                         call_598749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598749, url, valid)

proc call*(call_598750: Call_GetStartDBCluster_598736; DBClusterIdentifier: string;
          Action: string = "StartDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598751 = newJObject()
  add(query_598751, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_598751, "Action", newJString(Action))
  add(query_598751, "Version", newJString(Version))
  result = call_598750.call(nil, query_598751, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_598736(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_598737,
    base: "/", url: url_GetStartDBCluster_598738,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBInstance_598785 = ref object of OpenApiRestCall_593421
proc url_PostStartDBInstance_598787(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStartDBInstance_598786(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598788 = query.getOrDefault("Action")
  valid_598788 = validateParameter(valid_598788, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_598788 != nil:
    section.add "Action", valid_598788
  var valid_598789 = query.getOrDefault("Version")
  valid_598789 = validateParameter(valid_598789, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598789 != nil:
    section.add "Version", valid_598789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598790 = header.getOrDefault("X-Amz-Date")
  valid_598790 = validateParameter(valid_598790, JString, required = false,
                                 default = nil)
  if valid_598790 != nil:
    section.add "X-Amz-Date", valid_598790
  var valid_598791 = header.getOrDefault("X-Amz-Security-Token")
  valid_598791 = validateParameter(valid_598791, JString, required = false,
                                 default = nil)
  if valid_598791 != nil:
    section.add "X-Amz-Security-Token", valid_598791
  var valid_598792 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598792 = validateParameter(valid_598792, JString, required = false,
                                 default = nil)
  if valid_598792 != nil:
    section.add "X-Amz-Content-Sha256", valid_598792
  var valid_598793 = header.getOrDefault("X-Amz-Algorithm")
  valid_598793 = validateParameter(valid_598793, JString, required = false,
                                 default = nil)
  if valid_598793 != nil:
    section.add "X-Amz-Algorithm", valid_598793
  var valid_598794 = header.getOrDefault("X-Amz-Signature")
  valid_598794 = validateParameter(valid_598794, JString, required = false,
                                 default = nil)
  if valid_598794 != nil:
    section.add "X-Amz-Signature", valid_598794
  var valid_598795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598795 = validateParameter(valid_598795, JString, required = false,
                                 default = nil)
  if valid_598795 != nil:
    section.add "X-Amz-SignedHeaders", valid_598795
  var valid_598796 = header.getOrDefault("X-Amz-Credential")
  valid_598796 = validateParameter(valid_598796, JString, required = false,
                                 default = nil)
  if valid_598796 != nil:
    section.add "X-Amz-Credential", valid_598796
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_598797 = formData.getOrDefault("DBInstanceIdentifier")
  valid_598797 = validateParameter(valid_598797, JString, required = true,
                                 default = nil)
  if valid_598797 != nil:
    section.add "DBInstanceIdentifier", valid_598797
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598798: Call_PostStartDBInstance_598785; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_598798.validator(path, query, header, formData, body)
  let scheme = call_598798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598798.url(scheme.get, call_598798.host, call_598798.base,
                         call_598798.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598798, url, valid)

proc call*(call_598799: Call_PostStartDBInstance_598785;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598800 = newJObject()
  var formData_598801 = newJObject()
  add(formData_598801, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_598800, "Action", newJString(Action))
  add(query_598800, "Version", newJString(Version))
  result = call_598799.call(nil, query_598800, nil, formData_598801, nil)

var postStartDBInstance* = Call_PostStartDBInstance_598785(
    name: "postStartDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBInstance",
    validator: validate_PostStartDBInstance_598786, base: "/",
    url: url_PostStartDBInstance_598787, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBInstance_598769 = ref object of OpenApiRestCall_593421
proc url_GetStartDBInstance_598771(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStartDBInstance_598770(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598772 = query.getOrDefault("Action")
  valid_598772 = validateParameter(valid_598772, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_598772 != nil:
    section.add "Action", valid_598772
  var valid_598773 = query.getOrDefault("Version")
  valid_598773 = validateParameter(valid_598773, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598773 != nil:
    section.add "Version", valid_598773
  var valid_598774 = query.getOrDefault("DBInstanceIdentifier")
  valid_598774 = validateParameter(valid_598774, JString, required = true,
                                 default = nil)
  if valid_598774 != nil:
    section.add "DBInstanceIdentifier", valid_598774
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598775 = header.getOrDefault("X-Amz-Date")
  valid_598775 = validateParameter(valid_598775, JString, required = false,
                                 default = nil)
  if valid_598775 != nil:
    section.add "X-Amz-Date", valid_598775
  var valid_598776 = header.getOrDefault("X-Amz-Security-Token")
  valid_598776 = validateParameter(valid_598776, JString, required = false,
                                 default = nil)
  if valid_598776 != nil:
    section.add "X-Amz-Security-Token", valid_598776
  var valid_598777 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598777 = validateParameter(valid_598777, JString, required = false,
                                 default = nil)
  if valid_598777 != nil:
    section.add "X-Amz-Content-Sha256", valid_598777
  var valid_598778 = header.getOrDefault("X-Amz-Algorithm")
  valid_598778 = validateParameter(valid_598778, JString, required = false,
                                 default = nil)
  if valid_598778 != nil:
    section.add "X-Amz-Algorithm", valid_598778
  var valid_598779 = header.getOrDefault("X-Amz-Signature")
  valid_598779 = validateParameter(valid_598779, JString, required = false,
                                 default = nil)
  if valid_598779 != nil:
    section.add "X-Amz-Signature", valid_598779
  var valid_598780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598780 = validateParameter(valid_598780, JString, required = false,
                                 default = nil)
  if valid_598780 != nil:
    section.add "X-Amz-SignedHeaders", valid_598780
  var valid_598781 = header.getOrDefault("X-Amz-Credential")
  valid_598781 = validateParameter(valid_598781, JString, required = false,
                                 default = nil)
  if valid_598781 != nil:
    section.add "X-Amz-Credential", valid_598781
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598782: Call_GetStartDBInstance_598769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_598782.validator(path, query, header, formData, body)
  let scheme = call_598782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598782.url(scheme.get, call_598782.host, call_598782.base,
                         call_598782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598782, url, valid)

proc call*(call_598783: Call_GetStartDBInstance_598769;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  var query_598784 = newJObject()
  add(query_598784, "Action", newJString(Action))
  add(query_598784, "Version", newJString(Version))
  add(query_598784, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_598783.call(nil, query_598784, nil, nil, nil)

var getStartDBInstance* = Call_GetStartDBInstance_598769(
    name: "getStartDBInstance", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBInstance", validator: validate_GetStartDBInstance_598770,
    base: "/", url: url_GetStartDBInstance_598771,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopActivityStream_598819 = ref object of OpenApiRestCall_593421
proc url_PostStopActivityStream_598821(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStopActivityStream_598820(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598822 = query.getOrDefault("Action")
  valid_598822 = validateParameter(valid_598822, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_598822 != nil:
    section.add "Action", valid_598822
  var valid_598823 = query.getOrDefault("Version")
  valid_598823 = validateParameter(valid_598823, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598823 != nil:
    section.add "Version", valid_598823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598824 = header.getOrDefault("X-Amz-Date")
  valid_598824 = validateParameter(valid_598824, JString, required = false,
                                 default = nil)
  if valid_598824 != nil:
    section.add "X-Amz-Date", valid_598824
  var valid_598825 = header.getOrDefault("X-Amz-Security-Token")
  valid_598825 = validateParameter(valid_598825, JString, required = false,
                                 default = nil)
  if valid_598825 != nil:
    section.add "X-Amz-Security-Token", valid_598825
  var valid_598826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598826 = validateParameter(valid_598826, JString, required = false,
                                 default = nil)
  if valid_598826 != nil:
    section.add "X-Amz-Content-Sha256", valid_598826
  var valid_598827 = header.getOrDefault("X-Amz-Algorithm")
  valid_598827 = validateParameter(valid_598827, JString, required = false,
                                 default = nil)
  if valid_598827 != nil:
    section.add "X-Amz-Algorithm", valid_598827
  var valid_598828 = header.getOrDefault("X-Amz-Signature")
  valid_598828 = validateParameter(valid_598828, JString, required = false,
                                 default = nil)
  if valid_598828 != nil:
    section.add "X-Amz-Signature", valid_598828
  var valid_598829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598829 = validateParameter(valid_598829, JString, required = false,
                                 default = nil)
  if valid_598829 != nil:
    section.add "X-Amz-SignedHeaders", valid_598829
  var valid_598830 = header.getOrDefault("X-Amz-Credential")
  valid_598830 = validateParameter(valid_598830, JString, required = false,
                                 default = nil)
  if valid_598830 != nil:
    section.add "X-Amz-Credential", valid_598830
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  section = newJObject()
  var valid_598831 = formData.getOrDefault("ApplyImmediately")
  valid_598831 = validateParameter(valid_598831, JBool, required = false, default = nil)
  if valid_598831 != nil:
    section.add "ApplyImmediately", valid_598831
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_598832 = formData.getOrDefault("ResourceArn")
  valid_598832 = validateParameter(valid_598832, JString, required = true,
                                 default = nil)
  if valid_598832 != nil:
    section.add "ResourceArn", valid_598832
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598833: Call_PostStopActivityStream_598819; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_598833.validator(path, query, header, formData, body)
  let scheme = call_598833.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598833.url(scheme.get, call_598833.host, call_598833.base,
                         call_598833.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598833, url, valid)

proc call*(call_598834: Call_PostStopActivityStream_598819; ResourceArn: string;
          ApplyImmediately: bool = false; Action: string = "StopActivityStream";
          Version: string = "2014-10-31"): Recallable =
  ## postStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Version: string (required)
  var query_598835 = newJObject()
  var formData_598836 = newJObject()
  add(formData_598836, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_598835, "Action", newJString(Action))
  add(formData_598836, "ResourceArn", newJString(ResourceArn))
  add(query_598835, "Version", newJString(Version))
  result = call_598834.call(nil, query_598835, nil, formData_598836, nil)

var postStopActivityStream* = Call_PostStopActivityStream_598819(
    name: "postStopActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_PostStopActivityStream_598820, base: "/",
    url: url_PostStopActivityStream_598821, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopActivityStream_598802 = ref object of OpenApiRestCall_593421
proc url_GetStopActivityStream_598804(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStopActivityStream_598803(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_598805 = query.getOrDefault("ResourceArn")
  valid_598805 = validateParameter(valid_598805, JString, required = true,
                                 default = nil)
  if valid_598805 != nil:
    section.add "ResourceArn", valid_598805
  var valid_598806 = query.getOrDefault("Action")
  valid_598806 = validateParameter(valid_598806, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_598806 != nil:
    section.add "Action", valid_598806
  var valid_598807 = query.getOrDefault("Version")
  valid_598807 = validateParameter(valid_598807, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598807 != nil:
    section.add "Version", valid_598807
  var valid_598808 = query.getOrDefault("ApplyImmediately")
  valid_598808 = validateParameter(valid_598808, JBool, required = false, default = nil)
  if valid_598808 != nil:
    section.add "ApplyImmediately", valid_598808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598809 = header.getOrDefault("X-Amz-Date")
  valid_598809 = validateParameter(valid_598809, JString, required = false,
                                 default = nil)
  if valid_598809 != nil:
    section.add "X-Amz-Date", valid_598809
  var valid_598810 = header.getOrDefault("X-Amz-Security-Token")
  valid_598810 = validateParameter(valid_598810, JString, required = false,
                                 default = nil)
  if valid_598810 != nil:
    section.add "X-Amz-Security-Token", valid_598810
  var valid_598811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598811 = validateParameter(valid_598811, JString, required = false,
                                 default = nil)
  if valid_598811 != nil:
    section.add "X-Amz-Content-Sha256", valid_598811
  var valid_598812 = header.getOrDefault("X-Amz-Algorithm")
  valid_598812 = validateParameter(valid_598812, JString, required = false,
                                 default = nil)
  if valid_598812 != nil:
    section.add "X-Amz-Algorithm", valid_598812
  var valid_598813 = header.getOrDefault("X-Amz-Signature")
  valid_598813 = validateParameter(valid_598813, JString, required = false,
                                 default = nil)
  if valid_598813 != nil:
    section.add "X-Amz-Signature", valid_598813
  var valid_598814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598814 = validateParameter(valid_598814, JString, required = false,
                                 default = nil)
  if valid_598814 != nil:
    section.add "X-Amz-SignedHeaders", valid_598814
  var valid_598815 = header.getOrDefault("X-Amz-Credential")
  valid_598815 = validateParameter(valid_598815, JString, required = false,
                                 default = nil)
  if valid_598815 != nil:
    section.add "X-Amz-Credential", valid_598815
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598816: Call_GetStopActivityStream_598802; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_598816.validator(path, query, header, formData, body)
  let scheme = call_598816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598816.url(scheme.get, call_598816.host, call_598816.base,
                         call_598816.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598816, url, valid)

proc call*(call_598817: Call_GetStopActivityStream_598802; ResourceArn: string;
          Action: string = "StopActivityStream"; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  var query_598818 = newJObject()
  add(query_598818, "ResourceArn", newJString(ResourceArn))
  add(query_598818, "Action", newJString(Action))
  add(query_598818, "Version", newJString(Version))
  add(query_598818, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_598817.call(nil, query_598818, nil, nil, nil)

var getStopActivityStream* = Call_GetStopActivityStream_598802(
    name: "getStopActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_GetStopActivityStream_598803, base: "/",
    url: url_GetStopActivityStream_598804, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_598853 = ref object of OpenApiRestCall_593421
proc url_PostStopDBCluster_598855(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStopDBCluster_598854(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598856 = query.getOrDefault("Action")
  valid_598856 = validateParameter(valid_598856, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_598856 != nil:
    section.add "Action", valid_598856
  var valid_598857 = query.getOrDefault("Version")
  valid_598857 = validateParameter(valid_598857, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598857 != nil:
    section.add "Version", valid_598857
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598858 = header.getOrDefault("X-Amz-Date")
  valid_598858 = validateParameter(valid_598858, JString, required = false,
                                 default = nil)
  if valid_598858 != nil:
    section.add "X-Amz-Date", valid_598858
  var valid_598859 = header.getOrDefault("X-Amz-Security-Token")
  valid_598859 = validateParameter(valid_598859, JString, required = false,
                                 default = nil)
  if valid_598859 != nil:
    section.add "X-Amz-Security-Token", valid_598859
  var valid_598860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598860 = validateParameter(valid_598860, JString, required = false,
                                 default = nil)
  if valid_598860 != nil:
    section.add "X-Amz-Content-Sha256", valid_598860
  var valid_598861 = header.getOrDefault("X-Amz-Algorithm")
  valid_598861 = validateParameter(valid_598861, JString, required = false,
                                 default = nil)
  if valid_598861 != nil:
    section.add "X-Amz-Algorithm", valid_598861
  var valid_598862 = header.getOrDefault("X-Amz-Signature")
  valid_598862 = validateParameter(valid_598862, JString, required = false,
                                 default = nil)
  if valid_598862 != nil:
    section.add "X-Amz-Signature", valid_598862
  var valid_598863 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598863 = validateParameter(valid_598863, JString, required = false,
                                 default = nil)
  if valid_598863 != nil:
    section.add "X-Amz-SignedHeaders", valid_598863
  var valid_598864 = header.getOrDefault("X-Amz-Credential")
  valid_598864 = validateParameter(valid_598864, JString, required = false,
                                 default = nil)
  if valid_598864 != nil:
    section.add "X-Amz-Credential", valid_598864
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_598865 = formData.getOrDefault("DBClusterIdentifier")
  valid_598865 = validateParameter(valid_598865, JString, required = true,
                                 default = nil)
  if valid_598865 != nil:
    section.add "DBClusterIdentifier", valid_598865
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598866: Call_PostStopDBCluster_598853; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598866.validator(path, query, header, formData, body)
  let scheme = call_598866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598866.url(scheme.get, call_598866.host, call_598866.base,
                         call_598866.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598866, url, valid)

proc call*(call_598867: Call_PostStopDBCluster_598853; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_598868 = newJObject()
  var formData_598869 = newJObject()
  add(query_598868, "Action", newJString(Action))
  add(formData_598869, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_598868, "Version", newJString(Version))
  result = call_598867.call(nil, query_598868, nil, formData_598869, nil)

var postStopDBCluster* = Call_PostStopDBCluster_598853(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_598854,
    base: "/", url: url_PostStopDBCluster_598855,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_598837 = ref object of OpenApiRestCall_593421
proc url_GetStopDBCluster_598839(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStopDBCluster_598838(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_598840 = query.getOrDefault("DBClusterIdentifier")
  valid_598840 = validateParameter(valid_598840, JString, required = true,
                                 default = nil)
  if valid_598840 != nil:
    section.add "DBClusterIdentifier", valid_598840
  var valid_598841 = query.getOrDefault("Action")
  valid_598841 = validateParameter(valid_598841, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_598841 != nil:
    section.add "Action", valid_598841
  var valid_598842 = query.getOrDefault("Version")
  valid_598842 = validateParameter(valid_598842, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598842 != nil:
    section.add "Version", valid_598842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598843 = header.getOrDefault("X-Amz-Date")
  valid_598843 = validateParameter(valid_598843, JString, required = false,
                                 default = nil)
  if valid_598843 != nil:
    section.add "X-Amz-Date", valid_598843
  var valid_598844 = header.getOrDefault("X-Amz-Security-Token")
  valid_598844 = validateParameter(valid_598844, JString, required = false,
                                 default = nil)
  if valid_598844 != nil:
    section.add "X-Amz-Security-Token", valid_598844
  var valid_598845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598845 = validateParameter(valid_598845, JString, required = false,
                                 default = nil)
  if valid_598845 != nil:
    section.add "X-Amz-Content-Sha256", valid_598845
  var valid_598846 = header.getOrDefault("X-Amz-Algorithm")
  valid_598846 = validateParameter(valid_598846, JString, required = false,
                                 default = nil)
  if valid_598846 != nil:
    section.add "X-Amz-Algorithm", valid_598846
  var valid_598847 = header.getOrDefault("X-Amz-Signature")
  valid_598847 = validateParameter(valid_598847, JString, required = false,
                                 default = nil)
  if valid_598847 != nil:
    section.add "X-Amz-Signature", valid_598847
  var valid_598848 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598848 = validateParameter(valid_598848, JString, required = false,
                                 default = nil)
  if valid_598848 != nil:
    section.add "X-Amz-SignedHeaders", valid_598848
  var valid_598849 = header.getOrDefault("X-Amz-Credential")
  valid_598849 = validateParameter(valid_598849, JString, required = false,
                                 default = nil)
  if valid_598849 != nil:
    section.add "X-Amz-Credential", valid_598849
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598850: Call_GetStopDBCluster_598837; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_598850.validator(path, query, header, formData, body)
  let scheme = call_598850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598850.url(scheme.get, call_598850.host, call_598850.base,
                         call_598850.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598850, url, valid)

proc call*(call_598851: Call_GetStopDBCluster_598837; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598852 = newJObject()
  add(query_598852, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_598852, "Action", newJString(Action))
  add(query_598852, "Version", newJString(Version))
  result = call_598851.call(nil, query_598852, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_598837(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_598838,
    base: "/", url: url_GetStopDBCluster_598839,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBInstance_598887 = ref object of OpenApiRestCall_593421
proc url_PostStopDBInstance_598889(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStopDBInstance_598888(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598890 = query.getOrDefault("Action")
  valid_598890 = validateParameter(valid_598890, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_598890 != nil:
    section.add "Action", valid_598890
  var valid_598891 = query.getOrDefault("Version")
  valid_598891 = validateParameter(valid_598891, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598891 != nil:
    section.add "Version", valid_598891
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598892 = header.getOrDefault("X-Amz-Date")
  valid_598892 = validateParameter(valid_598892, JString, required = false,
                                 default = nil)
  if valid_598892 != nil:
    section.add "X-Amz-Date", valid_598892
  var valid_598893 = header.getOrDefault("X-Amz-Security-Token")
  valid_598893 = validateParameter(valid_598893, JString, required = false,
                                 default = nil)
  if valid_598893 != nil:
    section.add "X-Amz-Security-Token", valid_598893
  var valid_598894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598894 = validateParameter(valid_598894, JString, required = false,
                                 default = nil)
  if valid_598894 != nil:
    section.add "X-Amz-Content-Sha256", valid_598894
  var valid_598895 = header.getOrDefault("X-Amz-Algorithm")
  valid_598895 = validateParameter(valid_598895, JString, required = false,
                                 default = nil)
  if valid_598895 != nil:
    section.add "X-Amz-Algorithm", valid_598895
  var valid_598896 = header.getOrDefault("X-Amz-Signature")
  valid_598896 = validateParameter(valid_598896, JString, required = false,
                                 default = nil)
  if valid_598896 != nil:
    section.add "X-Amz-Signature", valid_598896
  var valid_598897 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598897 = validateParameter(valid_598897, JString, required = false,
                                 default = nil)
  if valid_598897 != nil:
    section.add "X-Amz-SignedHeaders", valid_598897
  var valid_598898 = header.getOrDefault("X-Amz-Credential")
  valid_598898 = validateParameter(valid_598898, JString, required = false,
                                 default = nil)
  if valid_598898 != nil:
    section.add "X-Amz-Credential", valid_598898
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_598899 = formData.getOrDefault("DBInstanceIdentifier")
  valid_598899 = validateParameter(valid_598899, JString, required = true,
                                 default = nil)
  if valid_598899 != nil:
    section.add "DBInstanceIdentifier", valid_598899
  var valid_598900 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_598900 = validateParameter(valid_598900, JString, required = false,
                                 default = nil)
  if valid_598900 != nil:
    section.add "DBSnapshotIdentifier", valid_598900
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598901: Call_PostStopDBInstance_598887; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_598901.validator(path, query, header, formData, body)
  let scheme = call_598901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598901.url(scheme.get, call_598901.host, call_598901.base,
                         call_598901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598901, url, valid)

proc call*(call_598902: Call_PostStopDBInstance_598887;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598903 = newJObject()
  var formData_598904 = newJObject()
  add(formData_598904, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_598904, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_598903, "Action", newJString(Action))
  add(query_598903, "Version", newJString(Version))
  result = call_598902.call(nil, query_598903, nil, formData_598904, nil)

var postStopDBInstance* = Call_PostStopDBInstance_598887(
    name: "postStopDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopDBInstance",
    validator: validate_PostStopDBInstance_598888, base: "/",
    url: url_PostStopDBInstance_598889, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBInstance_598870 = ref object of OpenApiRestCall_593421
proc url_GetStopDBInstance_598872(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStopDBInstance_598871(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598873 = query.getOrDefault("Action")
  valid_598873 = validateParameter(valid_598873, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_598873 != nil:
    section.add "Action", valid_598873
  var valid_598874 = query.getOrDefault("Version")
  valid_598874 = validateParameter(valid_598874, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_598874 != nil:
    section.add "Version", valid_598874
  var valid_598875 = query.getOrDefault("DBInstanceIdentifier")
  valid_598875 = validateParameter(valid_598875, JString, required = true,
                                 default = nil)
  if valid_598875 != nil:
    section.add "DBInstanceIdentifier", valid_598875
  var valid_598876 = query.getOrDefault("DBSnapshotIdentifier")
  valid_598876 = validateParameter(valid_598876, JString, required = false,
                                 default = nil)
  if valid_598876 != nil:
    section.add "DBSnapshotIdentifier", valid_598876
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598877 = header.getOrDefault("X-Amz-Date")
  valid_598877 = validateParameter(valid_598877, JString, required = false,
                                 default = nil)
  if valid_598877 != nil:
    section.add "X-Amz-Date", valid_598877
  var valid_598878 = header.getOrDefault("X-Amz-Security-Token")
  valid_598878 = validateParameter(valid_598878, JString, required = false,
                                 default = nil)
  if valid_598878 != nil:
    section.add "X-Amz-Security-Token", valid_598878
  var valid_598879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598879 = validateParameter(valid_598879, JString, required = false,
                                 default = nil)
  if valid_598879 != nil:
    section.add "X-Amz-Content-Sha256", valid_598879
  var valid_598880 = header.getOrDefault("X-Amz-Algorithm")
  valid_598880 = validateParameter(valid_598880, JString, required = false,
                                 default = nil)
  if valid_598880 != nil:
    section.add "X-Amz-Algorithm", valid_598880
  var valid_598881 = header.getOrDefault("X-Amz-Signature")
  valid_598881 = validateParameter(valid_598881, JString, required = false,
                                 default = nil)
  if valid_598881 != nil:
    section.add "X-Amz-Signature", valid_598881
  var valid_598882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598882 = validateParameter(valid_598882, JString, required = false,
                                 default = nil)
  if valid_598882 != nil:
    section.add "X-Amz-SignedHeaders", valid_598882
  var valid_598883 = header.getOrDefault("X-Amz-Credential")
  valid_598883 = validateParameter(valid_598883, JString, required = false,
                                 default = nil)
  if valid_598883 != nil:
    section.add "X-Amz-Credential", valid_598883
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598884: Call_GetStopDBInstance_598870; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_598884.validator(path, query, header, formData, body)
  let scheme = call_598884.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598884.url(scheme.get, call_598884.host, call_598884.base,
                         call_598884.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598884, url, valid)

proc call*(call_598885: Call_GetStopDBInstance_598870;
          DBInstanceIdentifier: string; Action: string = "StopDBInstance";
          Version: string = "2014-10-31"; DBSnapshotIdentifier: string = ""): Recallable =
  ## getStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  var query_598886 = newJObject()
  add(query_598886, "Action", newJString(Action))
  add(query_598886, "Version", newJString(Version))
  add(query_598886, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_598886, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_598885.call(nil, query_598886, nil, nil, nil)

var getStopDBInstance* = Call_GetStopDBInstance_598870(name: "getStopDBInstance",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBInstance", validator: validate_GetStopDBInstance_598871,
    base: "/", url: url_GetStopDBInstance_598872,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
