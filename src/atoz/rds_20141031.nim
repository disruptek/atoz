
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Relational Database Service
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Relational Database Service</fullname> <p> </p> <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the cloud. It provides cost-efficient, resizable capacity for an industry-standard relational database and manages common database administration tasks, freeing up developers to focus on what makes their applications and businesses unique.</p> <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS is flexible: you can scale your DB instance's compute resources and storage capacity to meet your application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for the resources you use.</p> <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface you can use to manage Amazon RDS. Note that Amazon RDS is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p> <p> <b>Amazon RDS API Reference</b> </p> <ul> <li> <p>For the alphabetical list of API actions, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p> </li> <li> <p>For the alphabetical list of data types, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p> </li> <li> <p>For a list of common query parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p> </li> <li> <p>For descriptions of the error codes, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p> </li> </ul> <p> <b>Amazon RDS User Guide</b> </p> <ul> <li> <p>For a summary of the Amazon RDS interfaces, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p> </li> <li> <p>For more information about how to use the Query API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_592348 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_592348](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_592348): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "rds"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_592960 = ref object of OpenApiRestCall_592348
proc url_PostAddRoleToDBCluster_592962(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddRoleToDBCluster_592961(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592963 = query.getOrDefault("Action")
  valid_592963 = validateParameter(valid_592963, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_592963 != nil:
    section.add "Action", valid_592963
  var valid_592964 = query.getOrDefault("Version")
  valid_592964 = validateParameter(valid_592964, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592964 != nil:
    section.add "Version", valid_592964
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592965 = header.getOrDefault("X-Amz-Signature")
  valid_592965 = validateParameter(valid_592965, JString, required = false,
                                 default = nil)
  if valid_592965 != nil:
    section.add "X-Amz-Signature", valid_592965
  var valid_592966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592966 = validateParameter(valid_592966, JString, required = false,
                                 default = nil)
  if valid_592966 != nil:
    section.add "X-Amz-Content-Sha256", valid_592966
  var valid_592967 = header.getOrDefault("X-Amz-Date")
  valid_592967 = validateParameter(valid_592967, JString, required = false,
                                 default = nil)
  if valid_592967 != nil:
    section.add "X-Amz-Date", valid_592967
  var valid_592968 = header.getOrDefault("X-Amz-Credential")
  valid_592968 = validateParameter(valid_592968, JString, required = false,
                                 default = nil)
  if valid_592968 != nil:
    section.add "X-Amz-Credential", valid_592968
  var valid_592969 = header.getOrDefault("X-Amz-Security-Token")
  valid_592969 = validateParameter(valid_592969, JString, required = false,
                                 default = nil)
  if valid_592969 != nil:
    section.add "X-Amz-Security-Token", valid_592969
  var valid_592970 = header.getOrDefault("X-Amz-Algorithm")
  valid_592970 = validateParameter(valid_592970, JString, required = false,
                                 default = nil)
  if valid_592970 != nil:
    section.add "X-Amz-Algorithm", valid_592970
  var valid_592971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592971 = validateParameter(valid_592971, JString, required = false,
                                 default = nil)
  if valid_592971 != nil:
    section.add "X-Amz-SignedHeaders", valid_592971
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  var valid_592972 = formData.getOrDefault("FeatureName")
  valid_592972 = validateParameter(valid_592972, JString, required = false,
                                 default = nil)
  if valid_592972 != nil:
    section.add "FeatureName", valid_592972
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_592973 = formData.getOrDefault("RoleArn")
  valid_592973 = validateParameter(valid_592973, JString, required = true,
                                 default = nil)
  if valid_592973 != nil:
    section.add "RoleArn", valid_592973
  var valid_592974 = formData.getOrDefault("DBClusterIdentifier")
  valid_592974 = validateParameter(valid_592974, JString, required = true,
                                 default = nil)
  if valid_592974 != nil:
    section.add "DBClusterIdentifier", valid_592974
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592975: Call_PostAddRoleToDBCluster_592960; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592975.validator(path, query, header, formData, body)
  let scheme = call_592975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592975.url(scheme.get, call_592975.host, call_592975.base,
                         call_592975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592975, url, valid)

proc call*(call_592976: Call_PostAddRoleToDBCluster_592960; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  var query_592977 = newJObject()
  var formData_592978 = newJObject()
  add(formData_592978, "FeatureName", newJString(FeatureName))
  add(formData_592978, "RoleArn", newJString(RoleArn))
  add(query_592977, "Action", newJString(Action))
  add(query_592977, "Version", newJString(Version))
  add(formData_592978, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_592976.call(nil, query_592977, nil, formData_592978, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_592960(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_592961, base: "/",
    url: url_PostAddRoleToDBCluster_592962, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_592687 = ref object of OpenApiRestCall_592348
proc url_GetAddRoleToDBCluster_592689(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddRoleToDBCluster_592688(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_592801 = query.getOrDefault("RoleArn")
  valid_592801 = validateParameter(valid_592801, JString, required = true,
                                 default = nil)
  if valid_592801 != nil:
    section.add "RoleArn", valid_592801
  var valid_592802 = query.getOrDefault("DBClusterIdentifier")
  valid_592802 = validateParameter(valid_592802, JString, required = true,
                                 default = nil)
  if valid_592802 != nil:
    section.add "DBClusterIdentifier", valid_592802
  var valid_592803 = query.getOrDefault("FeatureName")
  valid_592803 = validateParameter(valid_592803, JString, required = false,
                                 default = nil)
  if valid_592803 != nil:
    section.add "FeatureName", valid_592803
  var valid_592817 = query.getOrDefault("Action")
  valid_592817 = validateParameter(valid_592817, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_592817 != nil:
    section.add "Action", valid_592817
  var valid_592818 = query.getOrDefault("Version")
  valid_592818 = validateParameter(valid_592818, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592818 != nil:
    section.add "Version", valid_592818
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592819 = header.getOrDefault("X-Amz-Signature")
  valid_592819 = validateParameter(valid_592819, JString, required = false,
                                 default = nil)
  if valid_592819 != nil:
    section.add "X-Amz-Signature", valid_592819
  var valid_592820 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592820 = validateParameter(valid_592820, JString, required = false,
                                 default = nil)
  if valid_592820 != nil:
    section.add "X-Amz-Content-Sha256", valid_592820
  var valid_592821 = header.getOrDefault("X-Amz-Date")
  valid_592821 = validateParameter(valid_592821, JString, required = false,
                                 default = nil)
  if valid_592821 != nil:
    section.add "X-Amz-Date", valid_592821
  var valid_592822 = header.getOrDefault("X-Amz-Credential")
  valid_592822 = validateParameter(valid_592822, JString, required = false,
                                 default = nil)
  if valid_592822 != nil:
    section.add "X-Amz-Credential", valid_592822
  var valid_592823 = header.getOrDefault("X-Amz-Security-Token")
  valid_592823 = validateParameter(valid_592823, JString, required = false,
                                 default = nil)
  if valid_592823 != nil:
    section.add "X-Amz-Security-Token", valid_592823
  var valid_592824 = header.getOrDefault("X-Amz-Algorithm")
  valid_592824 = validateParameter(valid_592824, JString, required = false,
                                 default = nil)
  if valid_592824 != nil:
    section.add "X-Amz-Algorithm", valid_592824
  var valid_592825 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592825 = validateParameter(valid_592825, JString, required = false,
                                 default = nil)
  if valid_592825 != nil:
    section.add "X-Amz-SignedHeaders", valid_592825
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592848: Call_GetAddRoleToDBCluster_592687; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592848.validator(path, query, header, formData, body)
  let scheme = call_592848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592848.url(scheme.get, call_592848.host, call_592848.base,
                         call_592848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592848, url, valid)

proc call*(call_592919: Call_GetAddRoleToDBCluster_592687; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592920 = newJObject()
  add(query_592920, "RoleArn", newJString(RoleArn))
  add(query_592920, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_592920, "FeatureName", newJString(FeatureName))
  add(query_592920, "Action", newJString(Action))
  add(query_592920, "Version", newJString(Version))
  result = call_592919.call(nil, query_592920, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_592687(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_592688, base: "/",
    url: url_GetAddRoleToDBCluster_592689, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToDBInstance_592997 = ref object of OpenApiRestCall_592348
proc url_PostAddRoleToDBInstance_592999(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddRoleToDBInstance_592998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593000 = query.getOrDefault("Action")
  valid_593000 = validateParameter(valid_593000, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_593000 != nil:
    section.add "Action", valid_593000
  var valid_593001 = query.getOrDefault("Version")
  valid_593001 = validateParameter(valid_593001, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593001 != nil:
    section.add "Version", valid_593001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593002 = header.getOrDefault("X-Amz-Signature")
  valid_593002 = validateParameter(valid_593002, JString, required = false,
                                 default = nil)
  if valid_593002 != nil:
    section.add "X-Amz-Signature", valid_593002
  var valid_593003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593003 = validateParameter(valid_593003, JString, required = false,
                                 default = nil)
  if valid_593003 != nil:
    section.add "X-Amz-Content-Sha256", valid_593003
  var valid_593004 = header.getOrDefault("X-Amz-Date")
  valid_593004 = validateParameter(valid_593004, JString, required = false,
                                 default = nil)
  if valid_593004 != nil:
    section.add "X-Amz-Date", valid_593004
  var valid_593005 = header.getOrDefault("X-Amz-Credential")
  valid_593005 = validateParameter(valid_593005, JString, required = false,
                                 default = nil)
  if valid_593005 != nil:
    section.add "X-Amz-Credential", valid_593005
  var valid_593006 = header.getOrDefault("X-Amz-Security-Token")
  valid_593006 = validateParameter(valid_593006, JString, required = false,
                                 default = nil)
  if valid_593006 != nil:
    section.add "X-Amz-Security-Token", valid_593006
  var valid_593007 = header.getOrDefault("X-Amz-Algorithm")
  valid_593007 = validateParameter(valid_593007, JString, required = false,
                                 default = nil)
  if valid_593007 != nil:
    section.add "X-Amz-Algorithm", valid_593007
  var valid_593008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593008 = validateParameter(valid_593008, JString, required = false,
                                 default = nil)
  if valid_593008 != nil:
    section.add "X-Amz-SignedHeaders", valid_593008
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_593009 = formData.getOrDefault("FeatureName")
  valid_593009 = validateParameter(valid_593009, JString, required = true,
                                 default = nil)
  if valid_593009 != nil:
    section.add "FeatureName", valid_593009
  var valid_593010 = formData.getOrDefault("RoleArn")
  valid_593010 = validateParameter(valid_593010, JString, required = true,
                                 default = nil)
  if valid_593010 != nil:
    section.add "RoleArn", valid_593010
  var valid_593011 = formData.getOrDefault("DBInstanceIdentifier")
  valid_593011 = validateParameter(valid_593011, JString, required = true,
                                 default = nil)
  if valid_593011 != nil:
    section.add "DBInstanceIdentifier", valid_593011
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593012: Call_PostAddRoleToDBInstance_592997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_593012.validator(path, query, header, formData, body)
  let scheme = call_593012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593012.url(scheme.get, call_593012.host, call_593012.base,
                         call_593012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593012, url, valid)

proc call*(call_593013: Call_PostAddRoleToDBInstance_592997; FeatureName: string;
          RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593014 = newJObject()
  var formData_593015 = newJObject()
  add(formData_593015, "FeatureName", newJString(FeatureName))
  add(formData_593015, "RoleArn", newJString(RoleArn))
  add(formData_593015, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_593014, "Action", newJString(Action))
  add(query_593014, "Version", newJString(Version))
  result = call_593013.call(nil, query_593014, nil, formData_593015, nil)

var postAddRoleToDBInstance* = Call_PostAddRoleToDBInstance_592997(
    name: "postAddRoleToDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_PostAddRoleToDBInstance_592998, base: "/",
    url: url_PostAddRoleToDBInstance_592999, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBInstance_592979 = ref object of OpenApiRestCall_592348
proc url_GetAddRoleToDBInstance_592981(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddRoleToDBInstance_592980(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_592982 = query.getOrDefault("RoleArn")
  valid_592982 = validateParameter(valid_592982, JString, required = true,
                                 default = nil)
  if valid_592982 != nil:
    section.add "RoleArn", valid_592982
  var valid_592983 = query.getOrDefault("FeatureName")
  valid_592983 = validateParameter(valid_592983, JString, required = true,
                                 default = nil)
  if valid_592983 != nil:
    section.add "FeatureName", valid_592983
  var valid_592984 = query.getOrDefault("DBInstanceIdentifier")
  valid_592984 = validateParameter(valid_592984, JString, required = true,
                                 default = nil)
  if valid_592984 != nil:
    section.add "DBInstanceIdentifier", valid_592984
  var valid_592985 = query.getOrDefault("Action")
  valid_592985 = validateParameter(valid_592985, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_592985 != nil:
    section.add "Action", valid_592985
  var valid_592986 = query.getOrDefault("Version")
  valid_592986 = validateParameter(valid_592986, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592986 != nil:
    section.add "Version", valid_592986
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592987 = header.getOrDefault("X-Amz-Signature")
  valid_592987 = validateParameter(valid_592987, JString, required = false,
                                 default = nil)
  if valid_592987 != nil:
    section.add "X-Amz-Signature", valid_592987
  var valid_592988 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592988 = validateParameter(valid_592988, JString, required = false,
                                 default = nil)
  if valid_592988 != nil:
    section.add "X-Amz-Content-Sha256", valid_592988
  var valid_592989 = header.getOrDefault("X-Amz-Date")
  valid_592989 = validateParameter(valid_592989, JString, required = false,
                                 default = nil)
  if valid_592989 != nil:
    section.add "X-Amz-Date", valid_592989
  var valid_592990 = header.getOrDefault("X-Amz-Credential")
  valid_592990 = validateParameter(valid_592990, JString, required = false,
                                 default = nil)
  if valid_592990 != nil:
    section.add "X-Amz-Credential", valid_592990
  var valid_592991 = header.getOrDefault("X-Amz-Security-Token")
  valid_592991 = validateParameter(valid_592991, JString, required = false,
                                 default = nil)
  if valid_592991 != nil:
    section.add "X-Amz-Security-Token", valid_592991
  var valid_592992 = header.getOrDefault("X-Amz-Algorithm")
  valid_592992 = validateParameter(valid_592992, JString, required = false,
                                 default = nil)
  if valid_592992 != nil:
    section.add "X-Amz-Algorithm", valid_592992
  var valid_592993 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592993 = validateParameter(valid_592993, JString, required = false,
                                 default = nil)
  if valid_592993 != nil:
    section.add "X-Amz-SignedHeaders", valid_592993
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592994: Call_GetAddRoleToDBInstance_592979; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_592994.validator(path, query, header, formData, body)
  let scheme = call_592994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592994.url(scheme.get, call_592994.host, call_592994.base,
                         call_592994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592994, url, valid)

proc call*(call_592995: Call_GetAddRoleToDBInstance_592979; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592996 = newJObject()
  add(query_592996, "RoleArn", newJString(RoleArn))
  add(query_592996, "FeatureName", newJString(FeatureName))
  add(query_592996, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_592996, "Action", newJString(Action))
  add(query_592996, "Version", newJString(Version))
  result = call_592995.call(nil, query_592996, nil, nil, nil)

var getAddRoleToDBInstance* = Call_GetAddRoleToDBInstance_592979(
    name: "getAddRoleToDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_GetAddRoleToDBInstance_592980, base: "/",
    url: url_GetAddRoleToDBInstance_592981, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_593033 = ref object of OpenApiRestCall_592348
proc url_PostAddSourceIdentifierToSubscription_593035(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_593034(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593036 = query.getOrDefault("Action")
  valid_593036 = validateParameter(valid_593036, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_593036 != nil:
    section.add "Action", valid_593036
  var valid_593037 = query.getOrDefault("Version")
  valid_593037 = validateParameter(valid_593037, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593037 != nil:
    section.add "Version", valid_593037
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593038 = header.getOrDefault("X-Amz-Signature")
  valid_593038 = validateParameter(valid_593038, JString, required = false,
                                 default = nil)
  if valid_593038 != nil:
    section.add "X-Amz-Signature", valid_593038
  var valid_593039 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593039 = validateParameter(valid_593039, JString, required = false,
                                 default = nil)
  if valid_593039 != nil:
    section.add "X-Amz-Content-Sha256", valid_593039
  var valid_593040 = header.getOrDefault("X-Amz-Date")
  valid_593040 = validateParameter(valid_593040, JString, required = false,
                                 default = nil)
  if valid_593040 != nil:
    section.add "X-Amz-Date", valid_593040
  var valid_593041 = header.getOrDefault("X-Amz-Credential")
  valid_593041 = validateParameter(valid_593041, JString, required = false,
                                 default = nil)
  if valid_593041 != nil:
    section.add "X-Amz-Credential", valid_593041
  var valid_593042 = header.getOrDefault("X-Amz-Security-Token")
  valid_593042 = validateParameter(valid_593042, JString, required = false,
                                 default = nil)
  if valid_593042 != nil:
    section.add "X-Amz-Security-Token", valid_593042
  var valid_593043 = header.getOrDefault("X-Amz-Algorithm")
  valid_593043 = validateParameter(valid_593043, JString, required = false,
                                 default = nil)
  if valid_593043 != nil:
    section.add "X-Amz-Algorithm", valid_593043
  var valid_593044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593044 = validateParameter(valid_593044, JString, required = false,
                                 default = nil)
  if valid_593044 != nil:
    section.add "X-Amz-SignedHeaders", valid_593044
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_593045 = formData.getOrDefault("SubscriptionName")
  valid_593045 = validateParameter(valid_593045, JString, required = true,
                                 default = nil)
  if valid_593045 != nil:
    section.add "SubscriptionName", valid_593045
  var valid_593046 = formData.getOrDefault("SourceIdentifier")
  valid_593046 = validateParameter(valid_593046, JString, required = true,
                                 default = nil)
  if valid_593046 != nil:
    section.add "SourceIdentifier", valid_593046
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593047: Call_PostAddSourceIdentifierToSubscription_593033;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_593047.validator(path, query, header, formData, body)
  let scheme = call_593047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593047.url(scheme.get, call_593047.host, call_593047.base,
                         call_593047.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593047, url, valid)

proc call*(call_593048: Call_PostAddSourceIdentifierToSubscription_593033;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593049 = newJObject()
  var formData_593050 = newJObject()
  add(formData_593050, "SubscriptionName", newJString(SubscriptionName))
  add(formData_593050, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_593049, "Action", newJString(Action))
  add(query_593049, "Version", newJString(Version))
  result = call_593048.call(nil, query_593049, nil, formData_593050, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_593033(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_593034, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_593035,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_593016 = ref object of OpenApiRestCall_592348
proc url_GetAddSourceIdentifierToSubscription_593018(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_593017(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_593019 = query.getOrDefault("SourceIdentifier")
  valid_593019 = validateParameter(valid_593019, JString, required = true,
                                 default = nil)
  if valid_593019 != nil:
    section.add "SourceIdentifier", valid_593019
  var valid_593020 = query.getOrDefault("SubscriptionName")
  valid_593020 = validateParameter(valid_593020, JString, required = true,
                                 default = nil)
  if valid_593020 != nil:
    section.add "SubscriptionName", valid_593020
  var valid_593021 = query.getOrDefault("Action")
  valid_593021 = validateParameter(valid_593021, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_593021 != nil:
    section.add "Action", valid_593021
  var valid_593022 = query.getOrDefault("Version")
  valid_593022 = validateParameter(valid_593022, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593022 != nil:
    section.add "Version", valid_593022
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593023 = header.getOrDefault("X-Amz-Signature")
  valid_593023 = validateParameter(valid_593023, JString, required = false,
                                 default = nil)
  if valid_593023 != nil:
    section.add "X-Amz-Signature", valid_593023
  var valid_593024 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593024 = validateParameter(valid_593024, JString, required = false,
                                 default = nil)
  if valid_593024 != nil:
    section.add "X-Amz-Content-Sha256", valid_593024
  var valid_593025 = header.getOrDefault("X-Amz-Date")
  valid_593025 = validateParameter(valid_593025, JString, required = false,
                                 default = nil)
  if valid_593025 != nil:
    section.add "X-Amz-Date", valid_593025
  var valid_593026 = header.getOrDefault("X-Amz-Credential")
  valid_593026 = validateParameter(valid_593026, JString, required = false,
                                 default = nil)
  if valid_593026 != nil:
    section.add "X-Amz-Credential", valid_593026
  var valid_593027 = header.getOrDefault("X-Amz-Security-Token")
  valid_593027 = validateParameter(valid_593027, JString, required = false,
                                 default = nil)
  if valid_593027 != nil:
    section.add "X-Amz-Security-Token", valid_593027
  var valid_593028 = header.getOrDefault("X-Amz-Algorithm")
  valid_593028 = validateParameter(valid_593028, JString, required = false,
                                 default = nil)
  if valid_593028 != nil:
    section.add "X-Amz-Algorithm", valid_593028
  var valid_593029 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593029 = validateParameter(valid_593029, JString, required = false,
                                 default = nil)
  if valid_593029 != nil:
    section.add "X-Amz-SignedHeaders", valid_593029
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593030: Call_GetAddSourceIdentifierToSubscription_593016;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_593030.validator(path, query, header, formData, body)
  let scheme = call_593030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593030.url(scheme.get, call_593030.host, call_593030.base,
                         call_593030.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593030, url, valid)

proc call*(call_593031: Call_GetAddSourceIdentifierToSubscription_593016;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593032 = newJObject()
  add(query_593032, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_593032, "SubscriptionName", newJString(SubscriptionName))
  add(query_593032, "Action", newJString(Action))
  add(query_593032, "Version", newJString(Version))
  result = call_593031.call(nil, query_593032, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_593016(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_593017, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_593018,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_593068 = ref object of OpenApiRestCall_592348
proc url_PostAddTagsToResource_593070(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddTagsToResource_593069(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593071 = query.getOrDefault("Action")
  valid_593071 = validateParameter(valid_593071, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_593071 != nil:
    section.add "Action", valid_593071
  var valid_593072 = query.getOrDefault("Version")
  valid_593072 = validateParameter(valid_593072, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593072 != nil:
    section.add "Version", valid_593072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593073 = header.getOrDefault("X-Amz-Signature")
  valid_593073 = validateParameter(valid_593073, JString, required = false,
                                 default = nil)
  if valid_593073 != nil:
    section.add "X-Amz-Signature", valid_593073
  var valid_593074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593074 = validateParameter(valid_593074, JString, required = false,
                                 default = nil)
  if valid_593074 != nil:
    section.add "X-Amz-Content-Sha256", valid_593074
  var valid_593075 = header.getOrDefault("X-Amz-Date")
  valid_593075 = validateParameter(valid_593075, JString, required = false,
                                 default = nil)
  if valid_593075 != nil:
    section.add "X-Amz-Date", valid_593075
  var valid_593076 = header.getOrDefault("X-Amz-Credential")
  valid_593076 = validateParameter(valid_593076, JString, required = false,
                                 default = nil)
  if valid_593076 != nil:
    section.add "X-Amz-Credential", valid_593076
  var valid_593077 = header.getOrDefault("X-Amz-Security-Token")
  valid_593077 = validateParameter(valid_593077, JString, required = false,
                                 default = nil)
  if valid_593077 != nil:
    section.add "X-Amz-Security-Token", valid_593077
  var valid_593078 = header.getOrDefault("X-Amz-Algorithm")
  valid_593078 = validateParameter(valid_593078, JString, required = false,
                                 default = nil)
  if valid_593078 != nil:
    section.add "X-Amz-Algorithm", valid_593078
  var valid_593079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593079 = validateParameter(valid_593079, JString, required = false,
                                 default = nil)
  if valid_593079 != nil:
    section.add "X-Amz-SignedHeaders", valid_593079
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_593080 = formData.getOrDefault("Tags")
  valid_593080 = validateParameter(valid_593080, JArray, required = true, default = nil)
  if valid_593080 != nil:
    section.add "Tags", valid_593080
  var valid_593081 = formData.getOrDefault("ResourceName")
  valid_593081 = validateParameter(valid_593081, JString, required = true,
                                 default = nil)
  if valid_593081 != nil:
    section.add "ResourceName", valid_593081
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593082: Call_PostAddTagsToResource_593068; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_593082.validator(path, query, header, formData, body)
  let scheme = call_593082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593082.url(scheme.get, call_593082.host, call_593082.base,
                         call_593082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593082, url, valid)

proc call*(call_593083: Call_PostAddTagsToResource_593068; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  var query_593084 = newJObject()
  var formData_593085 = newJObject()
  add(query_593084, "Action", newJString(Action))
  if Tags != nil:
    formData_593085.add "Tags", Tags
  add(query_593084, "Version", newJString(Version))
  add(formData_593085, "ResourceName", newJString(ResourceName))
  result = call_593083.call(nil, query_593084, nil, formData_593085, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_593068(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_593069, base: "/",
    url: url_PostAddTagsToResource_593070, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_593051 = ref object of OpenApiRestCall_592348
proc url_GetAddTagsToResource_593053(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddTagsToResource_593052(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_593054 = query.getOrDefault("Tags")
  valid_593054 = validateParameter(valid_593054, JArray, required = true, default = nil)
  if valid_593054 != nil:
    section.add "Tags", valid_593054
  var valid_593055 = query.getOrDefault("ResourceName")
  valid_593055 = validateParameter(valid_593055, JString, required = true,
                                 default = nil)
  if valid_593055 != nil:
    section.add "ResourceName", valid_593055
  var valid_593056 = query.getOrDefault("Action")
  valid_593056 = validateParameter(valid_593056, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_593056 != nil:
    section.add "Action", valid_593056
  var valid_593057 = query.getOrDefault("Version")
  valid_593057 = validateParameter(valid_593057, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593057 != nil:
    section.add "Version", valid_593057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593058 = header.getOrDefault("X-Amz-Signature")
  valid_593058 = validateParameter(valid_593058, JString, required = false,
                                 default = nil)
  if valid_593058 != nil:
    section.add "X-Amz-Signature", valid_593058
  var valid_593059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593059 = validateParameter(valid_593059, JString, required = false,
                                 default = nil)
  if valid_593059 != nil:
    section.add "X-Amz-Content-Sha256", valid_593059
  var valid_593060 = header.getOrDefault("X-Amz-Date")
  valid_593060 = validateParameter(valid_593060, JString, required = false,
                                 default = nil)
  if valid_593060 != nil:
    section.add "X-Amz-Date", valid_593060
  var valid_593061 = header.getOrDefault("X-Amz-Credential")
  valid_593061 = validateParameter(valid_593061, JString, required = false,
                                 default = nil)
  if valid_593061 != nil:
    section.add "X-Amz-Credential", valid_593061
  var valid_593062 = header.getOrDefault("X-Amz-Security-Token")
  valid_593062 = validateParameter(valid_593062, JString, required = false,
                                 default = nil)
  if valid_593062 != nil:
    section.add "X-Amz-Security-Token", valid_593062
  var valid_593063 = header.getOrDefault("X-Amz-Algorithm")
  valid_593063 = validateParameter(valid_593063, JString, required = false,
                                 default = nil)
  if valid_593063 != nil:
    section.add "X-Amz-Algorithm", valid_593063
  var valid_593064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593064 = validateParameter(valid_593064, JString, required = false,
                                 default = nil)
  if valid_593064 != nil:
    section.add "X-Amz-SignedHeaders", valid_593064
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593065: Call_GetAddTagsToResource_593051; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_593065.validator(path, query, header, formData, body)
  let scheme = call_593065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593065.url(scheme.get, call_593065.host, call_593065.base,
                         call_593065.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593065, url, valid)

proc call*(call_593066: Call_GetAddTagsToResource_593051; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593067 = newJObject()
  if Tags != nil:
    query_593067.add "Tags", Tags
  add(query_593067, "ResourceName", newJString(ResourceName))
  add(query_593067, "Action", newJString(Action))
  add(query_593067, "Version", newJString(Version))
  result = call_593066.call(nil, query_593067, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_593051(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_593052, base: "/",
    url: url_GetAddTagsToResource_593053, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_593104 = ref object of OpenApiRestCall_592348
proc url_PostApplyPendingMaintenanceAction_593106(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_593105(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593107 = query.getOrDefault("Action")
  valid_593107 = validateParameter(valid_593107, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_593107 != nil:
    section.add "Action", valid_593107
  var valid_593108 = query.getOrDefault("Version")
  valid_593108 = validateParameter(valid_593108, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593108 != nil:
    section.add "Version", valid_593108
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593109 = header.getOrDefault("X-Amz-Signature")
  valid_593109 = validateParameter(valid_593109, JString, required = false,
                                 default = nil)
  if valid_593109 != nil:
    section.add "X-Amz-Signature", valid_593109
  var valid_593110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593110 = validateParameter(valid_593110, JString, required = false,
                                 default = nil)
  if valid_593110 != nil:
    section.add "X-Amz-Content-Sha256", valid_593110
  var valid_593111 = header.getOrDefault("X-Amz-Date")
  valid_593111 = validateParameter(valid_593111, JString, required = false,
                                 default = nil)
  if valid_593111 != nil:
    section.add "X-Amz-Date", valid_593111
  var valid_593112 = header.getOrDefault("X-Amz-Credential")
  valid_593112 = validateParameter(valid_593112, JString, required = false,
                                 default = nil)
  if valid_593112 != nil:
    section.add "X-Amz-Credential", valid_593112
  var valid_593113 = header.getOrDefault("X-Amz-Security-Token")
  valid_593113 = validateParameter(valid_593113, JString, required = false,
                                 default = nil)
  if valid_593113 != nil:
    section.add "X-Amz-Security-Token", valid_593113
  var valid_593114 = header.getOrDefault("X-Amz-Algorithm")
  valid_593114 = validateParameter(valid_593114, JString, required = false,
                                 default = nil)
  if valid_593114 != nil:
    section.add "X-Amz-Algorithm", valid_593114
  var valid_593115 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593115 = validateParameter(valid_593115, JString, required = false,
                                 default = nil)
  if valid_593115 != nil:
    section.add "X-Amz-SignedHeaders", valid_593115
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ResourceIdentifier` field"
  var valid_593116 = formData.getOrDefault("ResourceIdentifier")
  valid_593116 = validateParameter(valid_593116, JString, required = true,
                                 default = nil)
  if valid_593116 != nil:
    section.add "ResourceIdentifier", valid_593116
  var valid_593117 = formData.getOrDefault("ApplyAction")
  valid_593117 = validateParameter(valid_593117, JString, required = true,
                                 default = nil)
  if valid_593117 != nil:
    section.add "ApplyAction", valid_593117
  var valid_593118 = formData.getOrDefault("OptInType")
  valid_593118 = validateParameter(valid_593118, JString, required = true,
                                 default = nil)
  if valid_593118 != nil:
    section.add "OptInType", valid_593118
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593119: Call_PostApplyPendingMaintenanceAction_593104;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_593119.validator(path, query, header, formData, body)
  let scheme = call_593119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593119.url(scheme.get, call_593119.host, call_593119.base,
                         call_593119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593119, url, valid)

proc call*(call_593120: Call_PostApplyPendingMaintenanceAction_593104;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_593121 = newJObject()
  var formData_593122 = newJObject()
  add(formData_593122, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_593122, "ApplyAction", newJString(ApplyAction))
  add(query_593121, "Action", newJString(Action))
  add(formData_593122, "OptInType", newJString(OptInType))
  add(query_593121, "Version", newJString(Version))
  result = call_593120.call(nil, query_593121, nil, formData_593122, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_593104(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_593105, base: "/",
    url: url_PostApplyPendingMaintenanceAction_593106,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_593086 = ref object of OpenApiRestCall_592348
proc url_GetApplyPendingMaintenanceAction_593088(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_593087(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ResourceIdentifier` field"
  var valid_593089 = query.getOrDefault("ResourceIdentifier")
  valid_593089 = validateParameter(valid_593089, JString, required = true,
                                 default = nil)
  if valid_593089 != nil:
    section.add "ResourceIdentifier", valid_593089
  var valid_593090 = query.getOrDefault("ApplyAction")
  valid_593090 = validateParameter(valid_593090, JString, required = true,
                                 default = nil)
  if valid_593090 != nil:
    section.add "ApplyAction", valid_593090
  var valid_593091 = query.getOrDefault("Action")
  valid_593091 = validateParameter(valid_593091, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_593091 != nil:
    section.add "Action", valid_593091
  var valid_593092 = query.getOrDefault("OptInType")
  valid_593092 = validateParameter(valid_593092, JString, required = true,
                                 default = nil)
  if valid_593092 != nil:
    section.add "OptInType", valid_593092
  var valid_593093 = query.getOrDefault("Version")
  valid_593093 = validateParameter(valid_593093, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593093 != nil:
    section.add "Version", valid_593093
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593094 = header.getOrDefault("X-Amz-Signature")
  valid_593094 = validateParameter(valid_593094, JString, required = false,
                                 default = nil)
  if valid_593094 != nil:
    section.add "X-Amz-Signature", valid_593094
  var valid_593095 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593095 = validateParameter(valid_593095, JString, required = false,
                                 default = nil)
  if valid_593095 != nil:
    section.add "X-Amz-Content-Sha256", valid_593095
  var valid_593096 = header.getOrDefault("X-Amz-Date")
  valid_593096 = validateParameter(valid_593096, JString, required = false,
                                 default = nil)
  if valid_593096 != nil:
    section.add "X-Amz-Date", valid_593096
  var valid_593097 = header.getOrDefault("X-Amz-Credential")
  valid_593097 = validateParameter(valid_593097, JString, required = false,
                                 default = nil)
  if valid_593097 != nil:
    section.add "X-Amz-Credential", valid_593097
  var valid_593098 = header.getOrDefault("X-Amz-Security-Token")
  valid_593098 = validateParameter(valid_593098, JString, required = false,
                                 default = nil)
  if valid_593098 != nil:
    section.add "X-Amz-Security-Token", valid_593098
  var valid_593099 = header.getOrDefault("X-Amz-Algorithm")
  valid_593099 = validateParameter(valid_593099, JString, required = false,
                                 default = nil)
  if valid_593099 != nil:
    section.add "X-Amz-Algorithm", valid_593099
  var valid_593100 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593100 = validateParameter(valid_593100, JString, required = false,
                                 default = nil)
  if valid_593100 != nil:
    section.add "X-Amz-SignedHeaders", valid_593100
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593101: Call_GetApplyPendingMaintenanceAction_593086;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_593101.validator(path, query, header, formData, body)
  let scheme = call_593101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593101.url(scheme.get, call_593101.host, call_593101.base,
                         call_593101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593101, url, valid)

proc call*(call_593102: Call_GetApplyPendingMaintenanceAction_593086;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_593103 = newJObject()
  add(query_593103, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_593103, "ApplyAction", newJString(ApplyAction))
  add(query_593103, "Action", newJString(Action))
  add(query_593103, "OptInType", newJString(OptInType))
  add(query_593103, "Version", newJString(Version))
  result = call_593102.call(nil, query_593103, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_593086(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_593087, base: "/",
    url: url_GetApplyPendingMaintenanceAction_593088,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeDBSecurityGroupIngress_593143 = ref object of OpenApiRestCall_592348
proc url_PostAuthorizeDBSecurityGroupIngress_593145(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAuthorizeDBSecurityGroupIngress_593144(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593146 = query.getOrDefault("Action")
  valid_593146 = validateParameter(valid_593146, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_593146 != nil:
    section.add "Action", valid_593146
  var valid_593147 = query.getOrDefault("Version")
  valid_593147 = validateParameter(valid_593147, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593147 != nil:
    section.add "Version", valid_593147
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593148 = header.getOrDefault("X-Amz-Signature")
  valid_593148 = validateParameter(valid_593148, JString, required = false,
                                 default = nil)
  if valid_593148 != nil:
    section.add "X-Amz-Signature", valid_593148
  var valid_593149 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593149 = validateParameter(valid_593149, JString, required = false,
                                 default = nil)
  if valid_593149 != nil:
    section.add "X-Amz-Content-Sha256", valid_593149
  var valid_593150 = header.getOrDefault("X-Amz-Date")
  valid_593150 = validateParameter(valid_593150, JString, required = false,
                                 default = nil)
  if valid_593150 != nil:
    section.add "X-Amz-Date", valid_593150
  var valid_593151 = header.getOrDefault("X-Amz-Credential")
  valid_593151 = validateParameter(valid_593151, JString, required = false,
                                 default = nil)
  if valid_593151 != nil:
    section.add "X-Amz-Credential", valid_593151
  var valid_593152 = header.getOrDefault("X-Amz-Security-Token")
  valid_593152 = validateParameter(valid_593152, JString, required = false,
                                 default = nil)
  if valid_593152 != nil:
    section.add "X-Amz-Security-Token", valid_593152
  var valid_593153 = header.getOrDefault("X-Amz-Algorithm")
  valid_593153 = validateParameter(valid_593153, JString, required = false,
                                 default = nil)
  if valid_593153 != nil:
    section.add "X-Amz-Algorithm", valid_593153
  var valid_593154 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593154 = validateParameter(valid_593154, JString, required = false,
                                 default = nil)
  if valid_593154 != nil:
    section.add "X-Amz-SignedHeaders", valid_593154
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_593155 = formData.getOrDefault("DBSecurityGroupName")
  valid_593155 = validateParameter(valid_593155, JString, required = true,
                                 default = nil)
  if valid_593155 != nil:
    section.add "DBSecurityGroupName", valid_593155
  var valid_593156 = formData.getOrDefault("EC2SecurityGroupName")
  valid_593156 = validateParameter(valid_593156, JString, required = false,
                                 default = nil)
  if valid_593156 != nil:
    section.add "EC2SecurityGroupName", valid_593156
  var valid_593157 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_593157 = validateParameter(valid_593157, JString, required = false,
                                 default = nil)
  if valid_593157 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_593157
  var valid_593158 = formData.getOrDefault("EC2SecurityGroupId")
  valid_593158 = validateParameter(valid_593158, JString, required = false,
                                 default = nil)
  if valid_593158 != nil:
    section.add "EC2SecurityGroupId", valid_593158
  var valid_593159 = formData.getOrDefault("CIDRIP")
  valid_593159 = validateParameter(valid_593159, JString, required = false,
                                 default = nil)
  if valid_593159 != nil:
    section.add "CIDRIP", valid_593159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593160: Call_PostAuthorizeDBSecurityGroupIngress_593143;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_593160.validator(path, query, header, formData, body)
  let scheme = call_593160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593160.url(scheme.get, call_593160.host, call_593160.base,
                         call_593160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593160, url, valid)

proc call*(call_593161: Call_PostAuthorizeDBSecurityGroupIngress_593143;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593162 = newJObject()
  var formData_593163 = newJObject()
  add(formData_593163, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_593163, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_593163, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_593163, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_593163, "CIDRIP", newJString(CIDRIP))
  add(query_593162, "Action", newJString(Action))
  add(query_593162, "Version", newJString(Version))
  result = call_593161.call(nil, query_593162, nil, formData_593163, nil)

var postAuthorizeDBSecurityGroupIngress* = Call_PostAuthorizeDBSecurityGroupIngress_593143(
    name: "postAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_PostAuthorizeDBSecurityGroupIngress_593144, base: "/",
    url: url_PostAuthorizeDBSecurityGroupIngress_593145,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeDBSecurityGroupIngress_593123 = ref object of OpenApiRestCall_592348
proc url_GetAuthorizeDBSecurityGroupIngress_593125(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAuthorizeDBSecurityGroupIngress_593124(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  var valid_593126 = query.getOrDefault("EC2SecurityGroupName")
  valid_593126 = validateParameter(valid_593126, JString, required = false,
                                 default = nil)
  if valid_593126 != nil:
    section.add "EC2SecurityGroupName", valid_593126
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_593127 = query.getOrDefault("DBSecurityGroupName")
  valid_593127 = validateParameter(valid_593127, JString, required = true,
                                 default = nil)
  if valid_593127 != nil:
    section.add "DBSecurityGroupName", valid_593127
  var valid_593128 = query.getOrDefault("EC2SecurityGroupId")
  valid_593128 = validateParameter(valid_593128, JString, required = false,
                                 default = nil)
  if valid_593128 != nil:
    section.add "EC2SecurityGroupId", valid_593128
  var valid_593129 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_593129 = validateParameter(valid_593129, JString, required = false,
                                 default = nil)
  if valid_593129 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_593129
  var valid_593130 = query.getOrDefault("Action")
  valid_593130 = validateParameter(valid_593130, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_593130 != nil:
    section.add "Action", valid_593130
  var valid_593131 = query.getOrDefault("Version")
  valid_593131 = validateParameter(valid_593131, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593131 != nil:
    section.add "Version", valid_593131
  var valid_593132 = query.getOrDefault("CIDRIP")
  valid_593132 = validateParameter(valid_593132, JString, required = false,
                                 default = nil)
  if valid_593132 != nil:
    section.add "CIDRIP", valid_593132
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593133 = header.getOrDefault("X-Amz-Signature")
  valid_593133 = validateParameter(valid_593133, JString, required = false,
                                 default = nil)
  if valid_593133 != nil:
    section.add "X-Amz-Signature", valid_593133
  var valid_593134 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593134 = validateParameter(valid_593134, JString, required = false,
                                 default = nil)
  if valid_593134 != nil:
    section.add "X-Amz-Content-Sha256", valid_593134
  var valid_593135 = header.getOrDefault("X-Amz-Date")
  valid_593135 = validateParameter(valid_593135, JString, required = false,
                                 default = nil)
  if valid_593135 != nil:
    section.add "X-Amz-Date", valid_593135
  var valid_593136 = header.getOrDefault("X-Amz-Credential")
  valid_593136 = validateParameter(valid_593136, JString, required = false,
                                 default = nil)
  if valid_593136 != nil:
    section.add "X-Amz-Credential", valid_593136
  var valid_593137 = header.getOrDefault("X-Amz-Security-Token")
  valid_593137 = validateParameter(valid_593137, JString, required = false,
                                 default = nil)
  if valid_593137 != nil:
    section.add "X-Amz-Security-Token", valid_593137
  var valid_593138 = header.getOrDefault("X-Amz-Algorithm")
  valid_593138 = validateParameter(valid_593138, JString, required = false,
                                 default = nil)
  if valid_593138 != nil:
    section.add "X-Amz-Algorithm", valid_593138
  var valid_593139 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593139 = validateParameter(valid_593139, JString, required = false,
                                 default = nil)
  if valid_593139 != nil:
    section.add "X-Amz-SignedHeaders", valid_593139
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593140: Call_GetAuthorizeDBSecurityGroupIngress_593123;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_593140.validator(path, query, header, formData, body)
  let scheme = call_593140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593140.url(scheme.get, call_593140.host, call_593140.base,
                         call_593140.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593140, url, valid)

proc call*(call_593141: Call_GetAuthorizeDBSecurityGroupIngress_593123;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  var query_593142 = newJObject()
  add(query_593142, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_593142, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_593142, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_593142, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_593142, "Action", newJString(Action))
  add(query_593142, "Version", newJString(Version))
  add(query_593142, "CIDRIP", newJString(CIDRIP))
  result = call_593141.call(nil, query_593142, nil, nil, nil)

var getAuthorizeDBSecurityGroupIngress* = Call_GetAuthorizeDBSecurityGroupIngress_593123(
    name: "getAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_GetAuthorizeDBSecurityGroupIngress_593124, base: "/",
    url: url_GetAuthorizeDBSecurityGroupIngress_593125,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBacktrackDBCluster_593183 = ref object of OpenApiRestCall_592348
proc url_PostBacktrackDBCluster_593185(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBacktrackDBCluster_593184(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593186 = query.getOrDefault("Action")
  valid_593186 = validateParameter(valid_593186, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_593186 != nil:
    section.add "Action", valid_593186
  var valid_593187 = query.getOrDefault("Version")
  valid_593187 = validateParameter(valid_593187, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593187 != nil:
    section.add "Version", valid_593187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593188 = header.getOrDefault("X-Amz-Signature")
  valid_593188 = validateParameter(valid_593188, JString, required = false,
                                 default = nil)
  if valid_593188 != nil:
    section.add "X-Amz-Signature", valid_593188
  var valid_593189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593189 = validateParameter(valid_593189, JString, required = false,
                                 default = nil)
  if valid_593189 != nil:
    section.add "X-Amz-Content-Sha256", valid_593189
  var valid_593190 = header.getOrDefault("X-Amz-Date")
  valid_593190 = validateParameter(valid_593190, JString, required = false,
                                 default = nil)
  if valid_593190 != nil:
    section.add "X-Amz-Date", valid_593190
  var valid_593191 = header.getOrDefault("X-Amz-Credential")
  valid_593191 = validateParameter(valid_593191, JString, required = false,
                                 default = nil)
  if valid_593191 != nil:
    section.add "X-Amz-Credential", valid_593191
  var valid_593192 = header.getOrDefault("X-Amz-Security-Token")
  valid_593192 = validateParameter(valid_593192, JString, required = false,
                                 default = nil)
  if valid_593192 != nil:
    section.add "X-Amz-Security-Token", valid_593192
  var valid_593193 = header.getOrDefault("X-Amz-Algorithm")
  valid_593193 = validateParameter(valid_593193, JString, required = false,
                                 default = nil)
  if valid_593193 != nil:
    section.add "X-Amz-Algorithm", valid_593193
  var valid_593194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593194 = validateParameter(valid_593194, JString, required = false,
                                 default = nil)
  if valid_593194 != nil:
    section.add "X-Amz-SignedHeaders", valid_593194
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  section = newJObject()
  var valid_593195 = formData.getOrDefault("Force")
  valid_593195 = validateParameter(valid_593195, JBool, required = false, default = nil)
  if valid_593195 != nil:
    section.add "Force", valid_593195
  var valid_593196 = formData.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_593196 = validateParameter(valid_593196, JBool, required = false, default = nil)
  if valid_593196 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_593196
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_593197 = formData.getOrDefault("DBClusterIdentifier")
  valid_593197 = validateParameter(valid_593197, JString, required = true,
                                 default = nil)
  if valid_593197 != nil:
    section.add "DBClusterIdentifier", valid_593197
  var valid_593198 = formData.getOrDefault("BacktrackTo")
  valid_593198 = validateParameter(valid_593198, JString, required = true,
                                 default = nil)
  if valid_593198 != nil:
    section.add "BacktrackTo", valid_593198
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593199: Call_PostBacktrackDBCluster_593183; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593199.validator(path, query, header, formData, body)
  let scheme = call_593199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593199.url(scheme.get, call_593199.host, call_593199.base,
                         call_593199.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593199, url, valid)

proc call*(call_593200: Call_PostBacktrackDBCluster_593183;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  var query_593201 = newJObject()
  var formData_593202 = newJObject()
  add(formData_593202, "Force", newJBool(Force))
  add(formData_593202, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_593201, "Action", newJString(Action))
  add(query_593201, "Version", newJString(Version))
  add(formData_593202, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_593202, "BacktrackTo", newJString(BacktrackTo))
  result = call_593200.call(nil, query_593201, nil, formData_593202, nil)

var postBacktrackDBCluster* = Call_PostBacktrackDBCluster_593183(
    name: "postBacktrackDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_PostBacktrackDBCluster_593184, base: "/",
    url: url_PostBacktrackDBCluster_593185, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBacktrackDBCluster_593164 = ref object of OpenApiRestCall_592348
proc url_GetBacktrackDBCluster_593166(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBacktrackDBCluster_593165(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: JString (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_593167 = query.getOrDefault("DBClusterIdentifier")
  valid_593167 = validateParameter(valid_593167, JString, required = true,
                                 default = nil)
  if valid_593167 != nil:
    section.add "DBClusterIdentifier", valid_593167
  var valid_593168 = query.getOrDefault("BacktrackTo")
  valid_593168 = validateParameter(valid_593168, JString, required = true,
                                 default = nil)
  if valid_593168 != nil:
    section.add "BacktrackTo", valid_593168
  var valid_593169 = query.getOrDefault("Force")
  valid_593169 = validateParameter(valid_593169, JBool, required = false, default = nil)
  if valid_593169 != nil:
    section.add "Force", valid_593169
  var valid_593170 = query.getOrDefault("Action")
  valid_593170 = validateParameter(valid_593170, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_593170 != nil:
    section.add "Action", valid_593170
  var valid_593171 = query.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_593171 = validateParameter(valid_593171, JBool, required = false, default = nil)
  if valid_593171 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_593171
  var valid_593172 = query.getOrDefault("Version")
  valid_593172 = validateParameter(valid_593172, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593172 != nil:
    section.add "Version", valid_593172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593173 = header.getOrDefault("X-Amz-Signature")
  valid_593173 = validateParameter(valid_593173, JString, required = false,
                                 default = nil)
  if valid_593173 != nil:
    section.add "X-Amz-Signature", valid_593173
  var valid_593174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593174 = validateParameter(valid_593174, JString, required = false,
                                 default = nil)
  if valid_593174 != nil:
    section.add "X-Amz-Content-Sha256", valid_593174
  var valid_593175 = header.getOrDefault("X-Amz-Date")
  valid_593175 = validateParameter(valid_593175, JString, required = false,
                                 default = nil)
  if valid_593175 != nil:
    section.add "X-Amz-Date", valid_593175
  var valid_593176 = header.getOrDefault("X-Amz-Credential")
  valid_593176 = validateParameter(valid_593176, JString, required = false,
                                 default = nil)
  if valid_593176 != nil:
    section.add "X-Amz-Credential", valid_593176
  var valid_593177 = header.getOrDefault("X-Amz-Security-Token")
  valid_593177 = validateParameter(valid_593177, JString, required = false,
                                 default = nil)
  if valid_593177 != nil:
    section.add "X-Amz-Security-Token", valid_593177
  var valid_593178 = header.getOrDefault("X-Amz-Algorithm")
  valid_593178 = validateParameter(valid_593178, JString, required = false,
                                 default = nil)
  if valid_593178 != nil:
    section.add "X-Amz-Algorithm", valid_593178
  var valid_593179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593179 = validateParameter(valid_593179, JString, required = false,
                                 default = nil)
  if valid_593179 != nil:
    section.add "X-Amz-SignedHeaders", valid_593179
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593180: Call_GetBacktrackDBCluster_593164; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593180.validator(path, query, header, formData, body)
  let scheme = call_593180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593180.url(scheme.get, call_593180.host, call_593180.base,
                         call_593180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593180, url, valid)

proc call*(call_593181: Call_GetBacktrackDBCluster_593164;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          Action: string = "BacktrackDBCluster";
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: string (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: string (required)
  var query_593182 = newJObject()
  add(query_593182, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_593182, "BacktrackTo", newJString(BacktrackTo))
  add(query_593182, "Force", newJBool(Force))
  add(query_593182, "Action", newJString(Action))
  add(query_593182, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_593182, "Version", newJString(Version))
  result = call_593181.call(nil, query_593182, nil, nil, nil)

var getBacktrackDBCluster* = Call_GetBacktrackDBCluster_593164(
    name: "getBacktrackDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_GetBacktrackDBCluster_593165, base: "/",
    url: url_GetBacktrackDBCluster_593166, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_593222 = ref object of OpenApiRestCall_592348
proc url_PostCopyDBClusterParameterGroup_593224(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_593223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593225 = query.getOrDefault("Action")
  valid_593225 = validateParameter(valid_593225, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_593225 != nil:
    section.add "Action", valid_593225
  var valid_593226 = query.getOrDefault("Version")
  valid_593226 = validateParameter(valid_593226, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593226 != nil:
    section.add "Version", valid_593226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593227 = header.getOrDefault("X-Amz-Signature")
  valid_593227 = validateParameter(valid_593227, JString, required = false,
                                 default = nil)
  if valid_593227 != nil:
    section.add "X-Amz-Signature", valid_593227
  var valid_593228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593228 = validateParameter(valid_593228, JString, required = false,
                                 default = nil)
  if valid_593228 != nil:
    section.add "X-Amz-Content-Sha256", valid_593228
  var valid_593229 = header.getOrDefault("X-Amz-Date")
  valid_593229 = validateParameter(valid_593229, JString, required = false,
                                 default = nil)
  if valid_593229 != nil:
    section.add "X-Amz-Date", valid_593229
  var valid_593230 = header.getOrDefault("X-Amz-Credential")
  valid_593230 = validateParameter(valid_593230, JString, required = false,
                                 default = nil)
  if valid_593230 != nil:
    section.add "X-Amz-Credential", valid_593230
  var valid_593231 = header.getOrDefault("X-Amz-Security-Token")
  valid_593231 = validateParameter(valid_593231, JString, required = false,
                                 default = nil)
  if valid_593231 != nil:
    section.add "X-Amz-Security-Token", valid_593231
  var valid_593232 = header.getOrDefault("X-Amz-Algorithm")
  valid_593232 = validateParameter(valid_593232, JString, required = false,
                                 default = nil)
  if valid_593232 != nil:
    section.add "X-Amz-Algorithm", valid_593232
  var valid_593233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593233 = validateParameter(valid_593233, JString, required = false,
                                 default = nil)
  if valid_593233 != nil:
    section.add "X-Amz-SignedHeaders", valid_593233
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupIdentifier` field"
  var valid_593234 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_593234 = validateParameter(valid_593234, JString, required = true,
                                 default = nil)
  if valid_593234 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_593234
  var valid_593235 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_593235 = validateParameter(valid_593235, JString, required = true,
                                 default = nil)
  if valid_593235 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_593235
  var valid_593236 = formData.getOrDefault("Tags")
  valid_593236 = validateParameter(valid_593236, JArray, required = false,
                                 default = nil)
  if valid_593236 != nil:
    section.add "Tags", valid_593236
  var valid_593237 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_593237 = validateParameter(valid_593237, JString, required = true,
                                 default = nil)
  if valid_593237 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_593237
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593238: Call_PostCopyDBClusterParameterGroup_593222;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593238.validator(path, query, header, formData, body)
  let scheme = call_593238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593238.url(scheme.get, call_593238.host, call_593238.base,
                         call_593238.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593238, url, valid)

proc call*(call_593239: Call_PostCopyDBClusterParameterGroup_593222;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          Action: string = "CopyDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  var query_593240 = newJObject()
  var formData_593241 = newJObject()
  add(formData_593241, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(formData_593241, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_593240, "Action", newJString(Action))
  if Tags != nil:
    formData_593241.add "Tags", Tags
  add(query_593240, "Version", newJString(Version))
  add(formData_593241, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  result = call_593239.call(nil, query_593240, nil, formData_593241, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_593222(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_593223, base: "/",
    url: url_PostCopyDBClusterParameterGroup_593224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_593203 = ref object of OpenApiRestCall_592348
proc url_GetCopyDBClusterParameterGroup_593205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_593204(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: JString (required)
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_593206 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_593206 = validateParameter(valid_593206, JString, required = true,
                                 default = nil)
  if valid_593206 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_593206
  var valid_593207 = query.getOrDefault("Tags")
  valid_593207 = validateParameter(valid_593207, JArray, required = false,
                                 default = nil)
  if valid_593207 != nil:
    section.add "Tags", valid_593207
  var valid_593208 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_593208 = validateParameter(valid_593208, JString, required = true,
                                 default = nil)
  if valid_593208 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_593208
  var valid_593209 = query.getOrDefault("Action")
  valid_593209 = validateParameter(valid_593209, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_593209 != nil:
    section.add "Action", valid_593209
  var valid_593210 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_593210 = validateParameter(valid_593210, JString, required = true,
                                 default = nil)
  if valid_593210 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_593210
  var valid_593211 = query.getOrDefault("Version")
  valid_593211 = validateParameter(valid_593211, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593211 != nil:
    section.add "Version", valid_593211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593212 = header.getOrDefault("X-Amz-Signature")
  valid_593212 = validateParameter(valid_593212, JString, required = false,
                                 default = nil)
  if valid_593212 != nil:
    section.add "X-Amz-Signature", valid_593212
  var valid_593213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593213 = validateParameter(valid_593213, JString, required = false,
                                 default = nil)
  if valid_593213 != nil:
    section.add "X-Amz-Content-Sha256", valid_593213
  var valid_593214 = header.getOrDefault("X-Amz-Date")
  valid_593214 = validateParameter(valid_593214, JString, required = false,
                                 default = nil)
  if valid_593214 != nil:
    section.add "X-Amz-Date", valid_593214
  var valid_593215 = header.getOrDefault("X-Amz-Credential")
  valid_593215 = validateParameter(valid_593215, JString, required = false,
                                 default = nil)
  if valid_593215 != nil:
    section.add "X-Amz-Credential", valid_593215
  var valid_593216 = header.getOrDefault("X-Amz-Security-Token")
  valid_593216 = validateParameter(valid_593216, JString, required = false,
                                 default = nil)
  if valid_593216 != nil:
    section.add "X-Amz-Security-Token", valid_593216
  var valid_593217 = header.getOrDefault("X-Amz-Algorithm")
  valid_593217 = validateParameter(valid_593217, JString, required = false,
                                 default = nil)
  if valid_593217 != nil:
    section.add "X-Amz-Algorithm", valid_593217
  var valid_593218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593218 = validateParameter(valid_593218, JString, required = false,
                                 default = nil)
  if valid_593218 != nil:
    section.add "X-Amz-SignedHeaders", valid_593218
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593219: Call_GetCopyDBClusterParameterGroup_593203; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593219.validator(path, query, header, formData, body)
  let scheme = call_593219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593219.url(scheme.get, call_593219.host, call_593219.base,
                         call_593219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593219, url, valid)

proc call*(call_593220: Call_GetCopyDBClusterParameterGroup_593203;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_593221 = newJObject()
  add(query_593221, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    query_593221.add "Tags", Tags
  add(query_593221, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_593221, "Action", newJString(Action))
  add(query_593221, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_593221, "Version", newJString(Version))
  result = call_593220.call(nil, query_593221, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_593203(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_593204, base: "/",
    url: url_GetCopyDBClusterParameterGroup_593205,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_593264 = ref object of OpenApiRestCall_592348
proc url_PostCopyDBClusterSnapshot_593266(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBClusterSnapshot_593265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593267 = query.getOrDefault("Action")
  valid_593267 = validateParameter(valid_593267, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_593267 != nil:
    section.add "Action", valid_593267
  var valid_593268 = query.getOrDefault("Version")
  valid_593268 = validateParameter(valid_593268, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593268 != nil:
    section.add "Version", valid_593268
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593269 = header.getOrDefault("X-Amz-Signature")
  valid_593269 = validateParameter(valid_593269, JString, required = false,
                                 default = nil)
  if valid_593269 != nil:
    section.add "X-Amz-Signature", valid_593269
  var valid_593270 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593270 = validateParameter(valid_593270, JString, required = false,
                                 default = nil)
  if valid_593270 != nil:
    section.add "X-Amz-Content-Sha256", valid_593270
  var valid_593271 = header.getOrDefault("X-Amz-Date")
  valid_593271 = validateParameter(valid_593271, JString, required = false,
                                 default = nil)
  if valid_593271 != nil:
    section.add "X-Amz-Date", valid_593271
  var valid_593272 = header.getOrDefault("X-Amz-Credential")
  valid_593272 = validateParameter(valid_593272, JString, required = false,
                                 default = nil)
  if valid_593272 != nil:
    section.add "X-Amz-Credential", valid_593272
  var valid_593273 = header.getOrDefault("X-Amz-Security-Token")
  valid_593273 = validateParameter(valid_593273, JString, required = false,
                                 default = nil)
  if valid_593273 != nil:
    section.add "X-Amz-Security-Token", valid_593273
  var valid_593274 = header.getOrDefault("X-Amz-Algorithm")
  valid_593274 = validateParameter(valid_593274, JString, required = false,
                                 default = nil)
  if valid_593274 != nil:
    section.add "X-Amz-Algorithm", valid_593274
  var valid_593275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593275 = validateParameter(valid_593275, JString, required = false,
                                 default = nil)
  if valid_593275 != nil:
    section.add "X-Amz-SignedHeaders", valid_593275
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_593276 = formData.getOrDefault("SourceRegion")
  valid_593276 = validateParameter(valid_593276, JString, required = false,
                                 default = nil)
  if valid_593276 != nil:
    section.add "SourceRegion", valid_593276
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_593277 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_593277 = validateParameter(valid_593277, JString, required = true,
                                 default = nil)
  if valid_593277 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_593277
  var valid_593278 = formData.getOrDefault("KmsKeyId")
  valid_593278 = validateParameter(valid_593278, JString, required = false,
                                 default = nil)
  if valid_593278 != nil:
    section.add "KmsKeyId", valid_593278
  var valid_593279 = formData.getOrDefault("PreSignedUrl")
  valid_593279 = validateParameter(valid_593279, JString, required = false,
                                 default = nil)
  if valid_593279 != nil:
    section.add "PreSignedUrl", valid_593279
  var valid_593280 = formData.getOrDefault("CopyTags")
  valid_593280 = validateParameter(valid_593280, JBool, required = false, default = nil)
  if valid_593280 != nil:
    section.add "CopyTags", valid_593280
  var valid_593281 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_593281 = validateParameter(valid_593281, JString, required = true,
                                 default = nil)
  if valid_593281 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_593281
  var valid_593282 = formData.getOrDefault("Tags")
  valid_593282 = validateParameter(valid_593282, JArray, required = false,
                                 default = nil)
  if valid_593282 != nil:
    section.add "Tags", valid_593282
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593283: Call_PostCopyDBClusterSnapshot_593264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593283.validator(path, query, header, formData, body)
  let scheme = call_593283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593283.url(scheme.get, call_593283.host, call_593283.base,
                         call_593283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593283, url, valid)

proc call*(call_593284: Call_PostCopyDBClusterSnapshot_593264;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; SourceRegion: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_593285 = newJObject()
  var formData_593286 = newJObject()
  add(formData_593286, "SourceRegion", newJString(SourceRegion))
  add(formData_593286, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_593286, "KmsKeyId", newJString(KmsKeyId))
  add(formData_593286, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_593286, "CopyTags", newJBool(CopyTags))
  add(formData_593286, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_593285, "Action", newJString(Action))
  if Tags != nil:
    formData_593286.add "Tags", Tags
  add(query_593285, "Version", newJString(Version))
  result = call_593284.call(nil, query_593285, nil, formData_593286, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_593264(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_593265, base: "/",
    url: url_PostCopyDBClusterSnapshot_593266,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_593242 = ref object of OpenApiRestCall_592348
proc url_GetCopyDBClusterSnapshot_593244(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBClusterSnapshot_593243(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: JString (required)
  section = newJObject()
  var valid_593245 = query.getOrDefault("Tags")
  valid_593245 = validateParameter(valid_593245, JArray, required = false,
                                 default = nil)
  if valid_593245 != nil:
    section.add "Tags", valid_593245
  var valid_593246 = query.getOrDefault("KmsKeyId")
  valid_593246 = validateParameter(valid_593246, JString, required = false,
                                 default = nil)
  if valid_593246 != nil:
    section.add "KmsKeyId", valid_593246
  var valid_593247 = query.getOrDefault("PreSignedUrl")
  valid_593247 = validateParameter(valid_593247, JString, required = false,
                                 default = nil)
  if valid_593247 != nil:
    section.add "PreSignedUrl", valid_593247
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_593248 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_593248 = validateParameter(valid_593248, JString, required = true,
                                 default = nil)
  if valid_593248 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_593248
  var valid_593249 = query.getOrDefault("SourceRegion")
  valid_593249 = validateParameter(valid_593249, JString, required = false,
                                 default = nil)
  if valid_593249 != nil:
    section.add "SourceRegion", valid_593249
  var valid_593250 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_593250 = validateParameter(valid_593250, JString, required = true,
                                 default = nil)
  if valid_593250 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_593250
  var valid_593251 = query.getOrDefault("Action")
  valid_593251 = validateParameter(valid_593251, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_593251 != nil:
    section.add "Action", valid_593251
  var valid_593252 = query.getOrDefault("CopyTags")
  valid_593252 = validateParameter(valid_593252, JBool, required = false, default = nil)
  if valid_593252 != nil:
    section.add "CopyTags", valid_593252
  var valid_593253 = query.getOrDefault("Version")
  valid_593253 = validateParameter(valid_593253, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593253 != nil:
    section.add "Version", valid_593253
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593254 = header.getOrDefault("X-Amz-Signature")
  valid_593254 = validateParameter(valid_593254, JString, required = false,
                                 default = nil)
  if valid_593254 != nil:
    section.add "X-Amz-Signature", valid_593254
  var valid_593255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593255 = validateParameter(valid_593255, JString, required = false,
                                 default = nil)
  if valid_593255 != nil:
    section.add "X-Amz-Content-Sha256", valid_593255
  var valid_593256 = header.getOrDefault("X-Amz-Date")
  valid_593256 = validateParameter(valid_593256, JString, required = false,
                                 default = nil)
  if valid_593256 != nil:
    section.add "X-Amz-Date", valid_593256
  var valid_593257 = header.getOrDefault("X-Amz-Credential")
  valid_593257 = validateParameter(valid_593257, JString, required = false,
                                 default = nil)
  if valid_593257 != nil:
    section.add "X-Amz-Credential", valid_593257
  var valid_593258 = header.getOrDefault("X-Amz-Security-Token")
  valid_593258 = validateParameter(valid_593258, JString, required = false,
                                 default = nil)
  if valid_593258 != nil:
    section.add "X-Amz-Security-Token", valid_593258
  var valid_593259 = header.getOrDefault("X-Amz-Algorithm")
  valid_593259 = validateParameter(valid_593259, JString, required = false,
                                 default = nil)
  if valid_593259 != nil:
    section.add "X-Amz-Algorithm", valid_593259
  var valid_593260 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593260 = validateParameter(valid_593260, JString, required = false,
                                 default = nil)
  if valid_593260 != nil:
    section.add "X-Amz-SignedHeaders", valid_593260
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593261: Call_GetCopyDBClusterSnapshot_593242; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593261.validator(path, query, header, formData, body)
  let scheme = call_593261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593261.url(scheme.get, call_593261.host, call_593261.base,
                         call_593261.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593261, url, valid)

proc call*(call_593262: Call_GetCopyDBClusterSnapshot_593242;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; Tags: JsonNode = nil;
          KmsKeyId: string = ""; PreSignedUrl: string = ""; SourceRegion: string = "";
          Action: string = "CopyDBClusterSnapshot"; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: string (required)
  var query_593263 = newJObject()
  if Tags != nil:
    query_593263.add "Tags", Tags
  add(query_593263, "KmsKeyId", newJString(KmsKeyId))
  add(query_593263, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_593263, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_593263, "SourceRegion", newJString(SourceRegion))
  add(query_593263, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_593263, "Action", newJString(Action))
  add(query_593263, "CopyTags", newJBool(CopyTags))
  add(query_593263, "Version", newJString(Version))
  result = call_593262.call(nil, query_593263, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_593242(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_593243, base: "/",
    url: url_GetCopyDBClusterSnapshot_593244, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_593306 = ref object of OpenApiRestCall_592348
proc url_PostCopyDBParameterGroup_593308(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBParameterGroup_593307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593309 = query.getOrDefault("Action")
  valid_593309 = validateParameter(valid_593309, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_593309 != nil:
    section.add "Action", valid_593309
  var valid_593310 = query.getOrDefault("Version")
  valid_593310 = validateParameter(valid_593310, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593310 != nil:
    section.add "Version", valid_593310
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593311 = header.getOrDefault("X-Amz-Signature")
  valid_593311 = validateParameter(valid_593311, JString, required = false,
                                 default = nil)
  if valid_593311 != nil:
    section.add "X-Amz-Signature", valid_593311
  var valid_593312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593312 = validateParameter(valid_593312, JString, required = false,
                                 default = nil)
  if valid_593312 != nil:
    section.add "X-Amz-Content-Sha256", valid_593312
  var valid_593313 = header.getOrDefault("X-Amz-Date")
  valid_593313 = validateParameter(valid_593313, JString, required = false,
                                 default = nil)
  if valid_593313 != nil:
    section.add "X-Amz-Date", valid_593313
  var valid_593314 = header.getOrDefault("X-Amz-Credential")
  valid_593314 = validateParameter(valid_593314, JString, required = false,
                                 default = nil)
  if valid_593314 != nil:
    section.add "X-Amz-Credential", valid_593314
  var valid_593315 = header.getOrDefault("X-Amz-Security-Token")
  valid_593315 = validateParameter(valid_593315, JString, required = false,
                                 default = nil)
  if valid_593315 != nil:
    section.add "X-Amz-Security-Token", valid_593315
  var valid_593316 = header.getOrDefault("X-Amz-Algorithm")
  valid_593316 = validateParameter(valid_593316, JString, required = false,
                                 default = nil)
  if valid_593316 != nil:
    section.add "X-Amz-Algorithm", valid_593316
  var valid_593317 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593317 = validateParameter(valid_593317, JString, required = false,
                                 default = nil)
  if valid_593317 != nil:
    section.add "X-Amz-SignedHeaders", valid_593317
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_593318 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_593318 = validateParameter(valid_593318, JString, required = true,
                                 default = nil)
  if valid_593318 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_593318
  var valid_593319 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_593319 = validateParameter(valid_593319, JString, required = true,
                                 default = nil)
  if valid_593319 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_593319
  var valid_593320 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_593320 = validateParameter(valid_593320, JString, required = true,
                                 default = nil)
  if valid_593320 != nil:
    section.add "TargetDBParameterGroupDescription", valid_593320
  var valid_593321 = formData.getOrDefault("Tags")
  valid_593321 = validateParameter(valid_593321, JArray, required = false,
                                 default = nil)
  if valid_593321 != nil:
    section.add "Tags", valid_593321
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593322: Call_PostCopyDBParameterGroup_593306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_593322.validator(path, query, header, formData, body)
  let scheme = call_593322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593322.url(scheme.get, call_593322.host, call_593322.base,
                         call_593322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593322, url, valid)

proc call*(call_593323: Call_PostCopyDBParameterGroup_593306;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          Action: string = "CopyDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_593324 = newJObject()
  var formData_593325 = newJObject()
  add(formData_593325, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(formData_593325, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(formData_593325, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_593324, "Action", newJString(Action))
  if Tags != nil:
    formData_593325.add "Tags", Tags
  add(query_593324, "Version", newJString(Version))
  result = call_593323.call(nil, query_593324, nil, formData_593325, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_593306(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_593307, base: "/",
    url: url_PostCopyDBParameterGroup_593308, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_593287 = ref object of OpenApiRestCall_592348
proc url_GetCopyDBParameterGroup_593289(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBParameterGroup_593288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_593290 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_593290 = validateParameter(valid_593290, JString, required = true,
                                 default = nil)
  if valid_593290 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_593290
  var valid_593291 = query.getOrDefault("Tags")
  valid_593291 = validateParameter(valid_593291, JArray, required = false,
                                 default = nil)
  if valid_593291 != nil:
    section.add "Tags", valid_593291
  var valid_593292 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_593292 = validateParameter(valid_593292, JString, required = true,
                                 default = nil)
  if valid_593292 != nil:
    section.add "TargetDBParameterGroupDescription", valid_593292
  var valid_593293 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_593293 = validateParameter(valid_593293, JString, required = true,
                                 default = nil)
  if valid_593293 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_593293
  var valid_593294 = query.getOrDefault("Action")
  valid_593294 = validateParameter(valid_593294, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_593294 != nil:
    section.add "Action", valid_593294
  var valid_593295 = query.getOrDefault("Version")
  valid_593295 = validateParameter(valid_593295, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593295 != nil:
    section.add "Version", valid_593295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593296 = header.getOrDefault("X-Amz-Signature")
  valid_593296 = validateParameter(valid_593296, JString, required = false,
                                 default = nil)
  if valid_593296 != nil:
    section.add "X-Amz-Signature", valid_593296
  var valid_593297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593297 = validateParameter(valid_593297, JString, required = false,
                                 default = nil)
  if valid_593297 != nil:
    section.add "X-Amz-Content-Sha256", valid_593297
  var valid_593298 = header.getOrDefault("X-Amz-Date")
  valid_593298 = validateParameter(valid_593298, JString, required = false,
                                 default = nil)
  if valid_593298 != nil:
    section.add "X-Amz-Date", valid_593298
  var valid_593299 = header.getOrDefault("X-Amz-Credential")
  valid_593299 = validateParameter(valid_593299, JString, required = false,
                                 default = nil)
  if valid_593299 != nil:
    section.add "X-Amz-Credential", valid_593299
  var valid_593300 = header.getOrDefault("X-Amz-Security-Token")
  valid_593300 = validateParameter(valid_593300, JString, required = false,
                                 default = nil)
  if valid_593300 != nil:
    section.add "X-Amz-Security-Token", valid_593300
  var valid_593301 = header.getOrDefault("X-Amz-Algorithm")
  valid_593301 = validateParameter(valid_593301, JString, required = false,
                                 default = nil)
  if valid_593301 != nil:
    section.add "X-Amz-Algorithm", valid_593301
  var valid_593302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593302 = validateParameter(valid_593302, JString, required = false,
                                 default = nil)
  if valid_593302 != nil:
    section.add "X-Amz-SignedHeaders", valid_593302
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593303: Call_GetCopyDBParameterGroup_593287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_593303.validator(path, query, header, formData, body)
  let scheme = call_593303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593303.url(scheme.get, call_593303.host, call_593303.base,
                         call_593303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593303, url, valid)

proc call*(call_593304: Call_GetCopyDBParameterGroup_593287;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593305 = newJObject()
  add(query_593305, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  if Tags != nil:
    query_593305.add "Tags", Tags
  add(query_593305, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_593305, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(query_593305, "Action", newJString(Action))
  add(query_593305, "Version", newJString(Version))
  result = call_593304.call(nil, query_593305, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_593287(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_593288, base: "/",
    url: url_GetCopyDBParameterGroup_593289, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBSnapshot_593349 = ref object of OpenApiRestCall_592348
proc url_PostCopyDBSnapshot_593351(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBSnapshot_593350(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593352 = query.getOrDefault("Action")
  valid_593352 = validateParameter(valid_593352, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_593352 != nil:
    section.add "Action", valid_593352
  var valid_593353 = query.getOrDefault("Version")
  valid_593353 = validateParameter(valid_593353, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593353 != nil:
    section.add "Version", valid_593353
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593354 = header.getOrDefault("X-Amz-Signature")
  valid_593354 = validateParameter(valid_593354, JString, required = false,
                                 default = nil)
  if valid_593354 != nil:
    section.add "X-Amz-Signature", valid_593354
  var valid_593355 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593355 = validateParameter(valid_593355, JString, required = false,
                                 default = nil)
  if valid_593355 != nil:
    section.add "X-Amz-Content-Sha256", valid_593355
  var valid_593356 = header.getOrDefault("X-Amz-Date")
  valid_593356 = validateParameter(valid_593356, JString, required = false,
                                 default = nil)
  if valid_593356 != nil:
    section.add "X-Amz-Date", valid_593356
  var valid_593357 = header.getOrDefault("X-Amz-Credential")
  valid_593357 = validateParameter(valid_593357, JString, required = false,
                                 default = nil)
  if valid_593357 != nil:
    section.add "X-Amz-Credential", valid_593357
  var valid_593358 = header.getOrDefault("X-Amz-Security-Token")
  valid_593358 = validateParameter(valid_593358, JString, required = false,
                                 default = nil)
  if valid_593358 != nil:
    section.add "X-Amz-Security-Token", valid_593358
  var valid_593359 = header.getOrDefault("X-Amz-Algorithm")
  valid_593359 = validateParameter(valid_593359, JString, required = false,
                                 default = nil)
  if valid_593359 != nil:
    section.add "X-Amz-Algorithm", valid_593359
  var valid_593360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593360 = validateParameter(valid_593360, JString, required = false,
                                 default = nil)
  if valid_593360 != nil:
    section.add "X-Amz-SignedHeaders", valid_593360
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_593361 = formData.getOrDefault("SourceRegion")
  valid_593361 = validateParameter(valid_593361, JString, required = false,
                                 default = nil)
  if valid_593361 != nil:
    section.add "SourceRegion", valid_593361
  var valid_593362 = formData.getOrDefault("KmsKeyId")
  valid_593362 = validateParameter(valid_593362, JString, required = false,
                                 default = nil)
  if valid_593362 != nil:
    section.add "KmsKeyId", valid_593362
  assert formData != nil, "formData argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_593363 = formData.getOrDefault("SourceDBSnapshotIdentifier")
  valid_593363 = validateParameter(valid_593363, JString, required = true,
                                 default = nil)
  if valid_593363 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_593363
  var valid_593364 = formData.getOrDefault("CopyTags")
  valid_593364 = validateParameter(valid_593364, JBool, required = false, default = nil)
  if valid_593364 != nil:
    section.add "CopyTags", valid_593364
  var valid_593365 = formData.getOrDefault("PreSignedUrl")
  valid_593365 = validateParameter(valid_593365, JString, required = false,
                                 default = nil)
  if valid_593365 != nil:
    section.add "PreSignedUrl", valid_593365
  var valid_593366 = formData.getOrDefault("Tags")
  valid_593366 = validateParameter(valid_593366, JArray, required = false,
                                 default = nil)
  if valid_593366 != nil:
    section.add "Tags", valid_593366
  var valid_593367 = formData.getOrDefault("TargetDBSnapshotIdentifier")
  valid_593367 = validateParameter(valid_593367, JString, required = true,
                                 default = nil)
  if valid_593367 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_593367
  var valid_593368 = formData.getOrDefault("OptionGroupName")
  valid_593368 = validateParameter(valid_593368, JString, required = false,
                                 default = nil)
  if valid_593368 != nil:
    section.add "OptionGroupName", valid_593368
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593369: Call_PostCopyDBSnapshot_593349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_593369.validator(path, query, header, formData, body)
  let scheme = call_593369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593369.url(scheme.get, call_593369.host, call_593369.base,
                         call_593369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593369, url, valid)

proc call*(call_593370: Call_PostCopyDBSnapshot_593349;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          SourceRegion: string = ""; KmsKeyId: string = ""; CopyTags: bool = false;
          PreSignedUrl: string = ""; Action: string = "CopyDBSnapshot";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_593371 = newJObject()
  var formData_593372 = newJObject()
  add(formData_593372, "SourceRegion", newJString(SourceRegion))
  add(formData_593372, "KmsKeyId", newJString(KmsKeyId))
  add(formData_593372, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(formData_593372, "CopyTags", newJBool(CopyTags))
  add(formData_593372, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_593371, "Action", newJString(Action))
  if Tags != nil:
    formData_593372.add "Tags", Tags
  add(formData_593372, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(formData_593372, "OptionGroupName", newJString(OptionGroupName))
  add(query_593371, "Version", newJString(Version))
  result = call_593370.call(nil, query_593371, nil, formData_593372, nil)

var postCopyDBSnapshot* = Call_PostCopyDBSnapshot_593349(
    name: "postCopyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBSnapshot",
    validator: validate_PostCopyDBSnapshot_593350, base: "/",
    url: url_PostCopyDBSnapshot_593351, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBSnapshot_593326 = ref object of OpenApiRestCall_592348
proc url_GetCopyDBSnapshot_593328(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBSnapshot_593327(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_593329 = query.getOrDefault("SourceDBSnapshotIdentifier")
  valid_593329 = validateParameter(valid_593329, JString, required = true,
                                 default = nil)
  if valid_593329 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_593329
  var valid_593330 = query.getOrDefault("Tags")
  valid_593330 = validateParameter(valid_593330, JArray, required = false,
                                 default = nil)
  if valid_593330 != nil:
    section.add "Tags", valid_593330
  var valid_593331 = query.getOrDefault("KmsKeyId")
  valid_593331 = validateParameter(valid_593331, JString, required = false,
                                 default = nil)
  if valid_593331 != nil:
    section.add "KmsKeyId", valid_593331
  var valid_593332 = query.getOrDefault("PreSignedUrl")
  valid_593332 = validateParameter(valid_593332, JString, required = false,
                                 default = nil)
  if valid_593332 != nil:
    section.add "PreSignedUrl", valid_593332
  var valid_593333 = query.getOrDefault("SourceRegion")
  valid_593333 = validateParameter(valid_593333, JString, required = false,
                                 default = nil)
  if valid_593333 != nil:
    section.add "SourceRegion", valid_593333
  var valid_593334 = query.getOrDefault("Action")
  valid_593334 = validateParameter(valid_593334, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_593334 != nil:
    section.add "Action", valid_593334
  var valid_593335 = query.getOrDefault("OptionGroupName")
  valid_593335 = validateParameter(valid_593335, JString, required = false,
                                 default = nil)
  if valid_593335 != nil:
    section.add "OptionGroupName", valid_593335
  var valid_593336 = query.getOrDefault("CopyTags")
  valid_593336 = validateParameter(valid_593336, JBool, required = false, default = nil)
  if valid_593336 != nil:
    section.add "CopyTags", valid_593336
  var valid_593337 = query.getOrDefault("TargetDBSnapshotIdentifier")
  valid_593337 = validateParameter(valid_593337, JString, required = true,
                                 default = nil)
  if valid_593337 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_593337
  var valid_593338 = query.getOrDefault("Version")
  valid_593338 = validateParameter(valid_593338, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593338 != nil:
    section.add "Version", valid_593338
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593339 = header.getOrDefault("X-Amz-Signature")
  valid_593339 = validateParameter(valid_593339, JString, required = false,
                                 default = nil)
  if valid_593339 != nil:
    section.add "X-Amz-Signature", valid_593339
  var valid_593340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593340 = validateParameter(valid_593340, JString, required = false,
                                 default = nil)
  if valid_593340 != nil:
    section.add "X-Amz-Content-Sha256", valid_593340
  var valid_593341 = header.getOrDefault("X-Amz-Date")
  valid_593341 = validateParameter(valid_593341, JString, required = false,
                                 default = nil)
  if valid_593341 != nil:
    section.add "X-Amz-Date", valid_593341
  var valid_593342 = header.getOrDefault("X-Amz-Credential")
  valid_593342 = validateParameter(valid_593342, JString, required = false,
                                 default = nil)
  if valid_593342 != nil:
    section.add "X-Amz-Credential", valid_593342
  var valid_593343 = header.getOrDefault("X-Amz-Security-Token")
  valid_593343 = validateParameter(valid_593343, JString, required = false,
                                 default = nil)
  if valid_593343 != nil:
    section.add "X-Amz-Security-Token", valid_593343
  var valid_593344 = header.getOrDefault("X-Amz-Algorithm")
  valid_593344 = validateParameter(valid_593344, JString, required = false,
                                 default = nil)
  if valid_593344 != nil:
    section.add "X-Amz-Algorithm", valid_593344
  var valid_593345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593345 = validateParameter(valid_593345, JString, required = false,
                                 default = nil)
  if valid_593345 != nil:
    section.add "X-Amz-SignedHeaders", valid_593345
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593346: Call_GetCopyDBSnapshot_593326; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_593346.validator(path, query, header, formData, body)
  let scheme = call_593346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593346.url(scheme.get, call_593346.host, call_593346.base,
                         call_593346.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593346, url, valid)

proc call*(call_593347: Call_GetCopyDBSnapshot_593326;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          Tags: JsonNode = nil; KmsKeyId: string = ""; PreSignedUrl: string = "";
          SourceRegion: string = ""; Action: string = "CopyDBSnapshot";
          OptionGroupName: string = ""; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: string (required)
  var query_593348 = newJObject()
  add(query_593348, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  if Tags != nil:
    query_593348.add "Tags", Tags
  add(query_593348, "KmsKeyId", newJString(KmsKeyId))
  add(query_593348, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_593348, "SourceRegion", newJString(SourceRegion))
  add(query_593348, "Action", newJString(Action))
  add(query_593348, "OptionGroupName", newJString(OptionGroupName))
  add(query_593348, "CopyTags", newJBool(CopyTags))
  add(query_593348, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(query_593348, "Version", newJString(Version))
  result = call_593347.call(nil, query_593348, nil, nil, nil)

var getCopyDBSnapshot* = Call_GetCopyDBSnapshot_593326(name: "getCopyDBSnapshot",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyDBSnapshot", validator: validate_GetCopyDBSnapshot_593327,
    base: "/", url: url_GetCopyDBSnapshot_593328,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyOptionGroup_593392 = ref object of OpenApiRestCall_592348
proc url_PostCopyOptionGroup_593394(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyOptionGroup_593393(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593395 = query.getOrDefault("Action")
  valid_593395 = validateParameter(valid_593395, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_593395 != nil:
    section.add "Action", valid_593395
  var valid_593396 = query.getOrDefault("Version")
  valid_593396 = validateParameter(valid_593396, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593396 != nil:
    section.add "Version", valid_593396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593397 = header.getOrDefault("X-Amz-Signature")
  valid_593397 = validateParameter(valid_593397, JString, required = false,
                                 default = nil)
  if valid_593397 != nil:
    section.add "X-Amz-Signature", valid_593397
  var valid_593398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593398 = validateParameter(valid_593398, JString, required = false,
                                 default = nil)
  if valid_593398 != nil:
    section.add "X-Amz-Content-Sha256", valid_593398
  var valid_593399 = header.getOrDefault("X-Amz-Date")
  valid_593399 = validateParameter(valid_593399, JString, required = false,
                                 default = nil)
  if valid_593399 != nil:
    section.add "X-Amz-Date", valid_593399
  var valid_593400 = header.getOrDefault("X-Amz-Credential")
  valid_593400 = validateParameter(valid_593400, JString, required = false,
                                 default = nil)
  if valid_593400 != nil:
    section.add "X-Amz-Credential", valid_593400
  var valid_593401 = header.getOrDefault("X-Amz-Security-Token")
  valid_593401 = validateParameter(valid_593401, JString, required = false,
                                 default = nil)
  if valid_593401 != nil:
    section.add "X-Amz-Security-Token", valid_593401
  var valid_593402 = header.getOrDefault("X-Amz-Algorithm")
  valid_593402 = validateParameter(valid_593402, JString, required = false,
                                 default = nil)
  if valid_593402 != nil:
    section.add "X-Amz-Algorithm", valid_593402
  var valid_593403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593403 = validateParameter(valid_593403, JString, required = false,
                                 default = nil)
  if valid_593403 != nil:
    section.add "X-Amz-SignedHeaders", valid_593403
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetOptionGroupIdentifier` field"
  var valid_593404 = formData.getOrDefault("TargetOptionGroupIdentifier")
  valid_593404 = validateParameter(valid_593404, JString, required = true,
                                 default = nil)
  if valid_593404 != nil:
    section.add "TargetOptionGroupIdentifier", valid_593404
  var valid_593405 = formData.getOrDefault("TargetOptionGroupDescription")
  valid_593405 = validateParameter(valid_593405, JString, required = true,
                                 default = nil)
  if valid_593405 != nil:
    section.add "TargetOptionGroupDescription", valid_593405
  var valid_593406 = formData.getOrDefault("SourceOptionGroupIdentifier")
  valid_593406 = validateParameter(valid_593406, JString, required = true,
                                 default = nil)
  if valid_593406 != nil:
    section.add "SourceOptionGroupIdentifier", valid_593406
  var valid_593407 = formData.getOrDefault("Tags")
  valid_593407 = validateParameter(valid_593407, JArray, required = false,
                                 default = nil)
  if valid_593407 != nil:
    section.add "Tags", valid_593407
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593408: Call_PostCopyOptionGroup_593392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_593408.validator(path, query, header, formData, body)
  let scheme = call_593408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593408.url(scheme.get, call_593408.host, call_593408.base,
                         call_593408.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593408, url, valid)

proc call*(call_593409: Call_PostCopyOptionGroup_593392;
          TargetOptionGroupIdentifier: string;
          TargetOptionGroupDescription: string;
          SourceOptionGroupIdentifier: string; Action: string = "CopyOptionGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCopyOptionGroup
  ## Copies the specified option group.
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_593410 = newJObject()
  var formData_593411 = newJObject()
  add(formData_593411, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(formData_593411, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(formData_593411, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  add(query_593410, "Action", newJString(Action))
  if Tags != nil:
    formData_593411.add "Tags", Tags
  add(query_593410, "Version", newJString(Version))
  result = call_593409.call(nil, query_593410, nil, formData_593411, nil)

var postCopyOptionGroup* = Call_PostCopyOptionGroup_593392(
    name: "postCopyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyOptionGroup",
    validator: validate_PostCopyOptionGroup_593393, base: "/",
    url: url_PostCopyOptionGroup_593394, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyOptionGroup_593373 = ref object of OpenApiRestCall_592348
proc url_GetCopyOptionGroup_593375(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyOptionGroup_593374(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Action: JString (required)
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: JString (required)
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  section = newJObject()
  var valid_593376 = query.getOrDefault("Tags")
  valid_593376 = validateParameter(valid_593376, JArray, required = false,
                                 default = nil)
  if valid_593376 != nil:
    section.add "Tags", valid_593376
  assert query != nil, "query argument is necessary due to required `TargetOptionGroupDescription` field"
  var valid_593377 = query.getOrDefault("TargetOptionGroupDescription")
  valid_593377 = validateParameter(valid_593377, JString, required = true,
                                 default = nil)
  if valid_593377 != nil:
    section.add "TargetOptionGroupDescription", valid_593377
  var valid_593378 = query.getOrDefault("Action")
  valid_593378 = validateParameter(valid_593378, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_593378 != nil:
    section.add "Action", valid_593378
  var valid_593379 = query.getOrDefault("TargetOptionGroupIdentifier")
  valid_593379 = validateParameter(valid_593379, JString, required = true,
                                 default = nil)
  if valid_593379 != nil:
    section.add "TargetOptionGroupIdentifier", valid_593379
  var valid_593380 = query.getOrDefault("Version")
  valid_593380 = validateParameter(valid_593380, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593380 != nil:
    section.add "Version", valid_593380
  var valid_593381 = query.getOrDefault("SourceOptionGroupIdentifier")
  valid_593381 = validateParameter(valid_593381, JString, required = true,
                                 default = nil)
  if valid_593381 != nil:
    section.add "SourceOptionGroupIdentifier", valid_593381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593382 = header.getOrDefault("X-Amz-Signature")
  valid_593382 = validateParameter(valid_593382, JString, required = false,
                                 default = nil)
  if valid_593382 != nil:
    section.add "X-Amz-Signature", valid_593382
  var valid_593383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593383 = validateParameter(valid_593383, JString, required = false,
                                 default = nil)
  if valid_593383 != nil:
    section.add "X-Amz-Content-Sha256", valid_593383
  var valid_593384 = header.getOrDefault("X-Amz-Date")
  valid_593384 = validateParameter(valid_593384, JString, required = false,
                                 default = nil)
  if valid_593384 != nil:
    section.add "X-Amz-Date", valid_593384
  var valid_593385 = header.getOrDefault("X-Amz-Credential")
  valid_593385 = validateParameter(valid_593385, JString, required = false,
                                 default = nil)
  if valid_593385 != nil:
    section.add "X-Amz-Credential", valid_593385
  var valid_593386 = header.getOrDefault("X-Amz-Security-Token")
  valid_593386 = validateParameter(valid_593386, JString, required = false,
                                 default = nil)
  if valid_593386 != nil:
    section.add "X-Amz-Security-Token", valid_593386
  var valid_593387 = header.getOrDefault("X-Amz-Algorithm")
  valid_593387 = validateParameter(valid_593387, JString, required = false,
                                 default = nil)
  if valid_593387 != nil:
    section.add "X-Amz-Algorithm", valid_593387
  var valid_593388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593388 = validateParameter(valid_593388, JString, required = false,
                                 default = nil)
  if valid_593388 != nil:
    section.add "X-Amz-SignedHeaders", valid_593388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593389: Call_GetCopyOptionGroup_593373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_593389.validator(path, query, header, formData, body)
  let scheme = call_593389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593389.url(scheme.get, call_593389.host, call_593389.base,
                         call_593389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593389, url, valid)

proc call*(call_593390: Call_GetCopyOptionGroup_593373;
          TargetOptionGroupDescription: string;
          TargetOptionGroupIdentifier: string;
          SourceOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyOptionGroup
  ## Copies the specified option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Action: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: string (required)
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  var query_593391 = newJObject()
  if Tags != nil:
    query_593391.add "Tags", Tags
  add(query_593391, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(query_593391, "Action", newJString(Action))
  add(query_593391, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(query_593391, "Version", newJString(Version))
  add(query_593391, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  result = call_593390.call(nil, query_593391, nil, nil, nil)

var getCopyOptionGroup* = Call_GetCopyOptionGroup_593373(
    name: "getCopyOptionGroup", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyOptionGroup", validator: validate_GetCopyOptionGroup_593374,
    base: "/", url: url_GetCopyOptionGroup_593375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_593480 = ref object of OpenApiRestCall_592348
proc url_PostCreateDBCluster_593482(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBCluster_593481(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593483 = query.getOrDefault("Action")
  valid_593483 = validateParameter(valid_593483, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_593483 != nil:
    section.add "Action", valid_593483
  var valid_593484 = query.getOrDefault("Version")
  valid_593484 = validateParameter(valid_593484, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593484 != nil:
    section.add "Version", valid_593484
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_593485 = header.getOrDefault("X-Amz-Security-Token")
  valid_593485 = validateParameter(valid_593485, JString, required = false,
                                 default = nil)
  if valid_593485 != nil:
    section.add "X-Amz-Security-Token", valid_593485
  var valid_593486 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593486 = validateParameter(valid_593486, JString, required = false,
                                 default = nil)
  if valid_593486 != nil:
    section.add "X-Amz-SignedHeaders", valid_593486
  var valid_593487 = header.getOrDefault("X-Amz-Signature")
  valid_593487 = validateParameter(valid_593487, JString, required = false,
                                 default = nil)
  if valid_593487 != nil:
    section.add "X-Amz-Signature", valid_593487
  var valid_593488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593488 = validateParameter(valid_593488, JString, required = false,
                                 default = nil)
  if valid_593488 != nil:
    section.add "X-Amz-Content-Sha256", valid_593488
  var valid_593489 = header.getOrDefault("X-Amz-Date")
  valid_593489 = validateParameter(valid_593489, JString, required = false,
                                 default = nil)
  if valid_593489 != nil:
    section.add "X-Amz-Date", valid_593489
  var valid_593490 = header.getOrDefault("X-Amz-Credential")
  valid_593490 = validateParameter(valid_593490, JString, required = false,
                                 default = nil)
  if valid_593490 != nil:
    section.add "X-Amz-Credential", valid_593490
  var valid_593491 = header.getOrDefault("X-Amz-Algorithm")
  valid_593491 = validateParameter(valid_593491, JString, required = false,
                                 default = nil)
  if valid_593491 != nil:
    section.add "X-Amz-Algorithm", valid_593491
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  section = newJObject()
  var valid_593492 = formData.getOrDefault("Port")
  valid_593492 = validateParameter(valid_593492, JInt, required = false, default = nil)
  if valid_593492 != nil:
    section.add "Port", valid_593492
  var valid_593493 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_593493 = validateParameter(valid_593493, JString, required = false,
                                 default = nil)
  if valid_593493 != nil:
    section.add "GlobalClusterIdentifier", valid_593493
  var valid_593494 = formData.getOrDefault("MasterUsername")
  valid_593494 = validateParameter(valid_593494, JString, required = false,
                                 default = nil)
  if valid_593494 != nil:
    section.add "MasterUsername", valid_593494
  var valid_593495 = formData.getOrDefault("DatabaseName")
  valid_593495 = validateParameter(valid_593495, JString, required = false,
                                 default = nil)
  if valid_593495 != nil:
    section.add "DatabaseName", valid_593495
  var valid_593496 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_593496 = validateParameter(valid_593496, JArray, required = false,
                                 default = nil)
  if valid_593496 != nil:
    section.add "VpcSecurityGroupIds", valid_593496
  var valid_593497 = formData.getOrDefault("AvailabilityZones")
  valid_593497 = validateParameter(valid_593497, JArray, required = false,
                                 default = nil)
  if valid_593497 != nil:
    section.add "AvailabilityZones", valid_593497
  var valid_593498 = formData.getOrDefault("EngineMode")
  valid_593498 = validateParameter(valid_593498, JString, required = false,
                                 default = nil)
  if valid_593498 != nil:
    section.add "EngineMode", valid_593498
  var valid_593499 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_593499 = validateParameter(valid_593499, JArray, required = false,
                                 default = nil)
  if valid_593499 != nil:
    section.add "EnableCloudwatchLogsExports", valid_593499
  var valid_593500 = formData.getOrDefault("DBSubnetGroupName")
  valid_593500 = validateParameter(valid_593500, JString, required = false,
                                 default = nil)
  if valid_593500 != nil:
    section.add "DBSubnetGroupName", valid_593500
  var valid_593501 = formData.getOrDefault("CharacterSetName")
  valid_593501 = validateParameter(valid_593501, JString, required = false,
                                 default = nil)
  if valid_593501 != nil:
    section.add "CharacterSetName", valid_593501
  var valid_593502 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_593502 = validateParameter(valid_593502, JString, required = false,
                                 default = nil)
  if valid_593502 != nil:
    section.add "DBClusterParameterGroupName", valid_593502
  var valid_593503 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_593503 = validateParameter(valid_593503, JBool, required = false, default = nil)
  if valid_593503 != nil:
    section.add "CopyTagsToSnapshot", valid_593503
  var valid_593504 = formData.getOrDefault("DeletionProtection")
  valid_593504 = validateParameter(valid_593504, JBool, required = false, default = nil)
  if valid_593504 != nil:
    section.add "DeletionProtection", valid_593504
  var valid_593505 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_593505 = validateParameter(valid_593505, JString, required = false,
                                 default = nil)
  if valid_593505 != nil:
    section.add "PreferredMaintenanceWindow", valid_593505
  var valid_593506 = formData.getOrDefault("PreferredBackupWindow")
  valid_593506 = validateParameter(valid_593506, JString, required = false,
                                 default = nil)
  if valid_593506 != nil:
    section.add "PreferredBackupWindow", valid_593506
  var valid_593507 = formData.getOrDefault("MasterUserPassword")
  valid_593507 = validateParameter(valid_593507, JString, required = false,
                                 default = nil)
  if valid_593507 != nil:
    section.add "MasterUserPassword", valid_593507
  var valid_593508 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_593508 = validateParameter(valid_593508, JString, required = false,
                                 default = nil)
  if valid_593508 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_593508
  var valid_593509 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_593509 = validateParameter(valid_593509, JString, required = false,
                                 default = nil)
  if valid_593509 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_593509
  var valid_593510 = formData.getOrDefault("SourceRegion")
  valid_593510 = validateParameter(valid_593510, JString, required = false,
                                 default = nil)
  if valid_593510 != nil:
    section.add "SourceRegion", valid_593510
  var valid_593511 = formData.getOrDefault("EngineVersion")
  valid_593511 = validateParameter(valid_593511, JString, required = false,
                                 default = nil)
  if valid_593511 != nil:
    section.add "EngineVersion", valid_593511
  var valid_593512 = formData.getOrDefault("BacktrackWindow")
  valid_593512 = validateParameter(valid_593512, JInt, required = false, default = nil)
  if valid_593512 != nil:
    section.add "BacktrackWindow", valid_593512
  var valid_593513 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_593513 = validateParameter(valid_593513, JBool, required = false, default = nil)
  if valid_593513 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_593513
  var valid_593514 = formData.getOrDefault("BackupRetentionPeriod")
  valid_593514 = validateParameter(valid_593514, JInt, required = false, default = nil)
  if valid_593514 != nil:
    section.add "BackupRetentionPeriod", valid_593514
  var valid_593515 = formData.getOrDefault("KmsKeyId")
  valid_593515 = validateParameter(valid_593515, JString, required = false,
                                 default = nil)
  if valid_593515 != nil:
    section.add "KmsKeyId", valid_593515
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_593516 = formData.getOrDefault("Engine")
  valid_593516 = validateParameter(valid_593516, JString, required = true,
                                 default = nil)
  if valid_593516 != nil:
    section.add "Engine", valid_593516
  var valid_593517 = formData.getOrDefault("PreSignedUrl")
  valid_593517 = validateParameter(valid_593517, JString, required = false,
                                 default = nil)
  if valid_593517 != nil:
    section.add "PreSignedUrl", valid_593517
  var valid_593518 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_593518 = validateParameter(valid_593518, JString, required = false,
                                 default = nil)
  if valid_593518 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_593518
  var valid_593519 = formData.getOrDefault("Tags")
  valid_593519 = validateParameter(valid_593519, JArray, required = false,
                                 default = nil)
  if valid_593519 != nil:
    section.add "Tags", valid_593519
  var valid_593520 = formData.getOrDefault("EnableHttpEndpoint")
  valid_593520 = validateParameter(valid_593520, JBool, required = false, default = nil)
  if valid_593520 != nil:
    section.add "EnableHttpEndpoint", valid_593520
  var valid_593521 = formData.getOrDefault("OptionGroupName")
  valid_593521 = validateParameter(valid_593521, JString, required = false,
                                 default = nil)
  if valid_593521 != nil:
    section.add "OptionGroupName", valid_593521
  var valid_593522 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_593522 = validateParameter(valid_593522, JString, required = false,
                                 default = nil)
  if valid_593522 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_593522
  var valid_593523 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_593523 = validateParameter(valid_593523, JString, required = false,
                                 default = nil)
  if valid_593523 != nil:
    section.add "ReplicationSourceIdentifier", valid_593523
  var valid_593524 = formData.getOrDefault("StorageEncrypted")
  valid_593524 = validateParameter(valid_593524, JBool, required = false, default = nil)
  if valid_593524 != nil:
    section.add "StorageEncrypted", valid_593524
  var valid_593525 = formData.getOrDefault("DBClusterIdentifier")
  valid_593525 = validateParameter(valid_593525, JString, required = true,
                                 default = nil)
  if valid_593525 != nil:
    section.add "DBClusterIdentifier", valid_593525
  var valid_593526 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_593526 = validateParameter(valid_593526, JString, required = false,
                                 default = nil)
  if valid_593526 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_593526
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593527: Call_PostCreateDBCluster_593480; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593527.validator(path, query, header, formData, body)
  let scheme = call_593527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593527.url(scheme.get, call_593527.host, call_593527.base,
                         call_593527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593527, url, valid)

proc call*(call_593528: Call_PostCreateDBCluster_593480; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          GlobalClusterIdentifier: string = ""; MasterUsername: string = "";
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; EngineMode: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBCluster"; DBSubnetGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = ""; SourceRegion: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          PreSignedUrl: string = ""; ScalingConfigurationMaxCapacity: string = "";
          Tags: JsonNode = nil; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          ReplicationSourceIdentifier: string = ""; Version: string = "2014-10-31";
          StorageEncrypted: bool = false; ScalingConfigurationAutoPause: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  var query_593529 = newJObject()
  var formData_593530 = newJObject()
  add(formData_593530, "Port", newJInt(Port))
  add(formData_593530, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_593530, "MasterUsername", newJString(MasterUsername))
  add(formData_593530, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_593530.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if AvailabilityZones != nil:
    formData_593530.add "AvailabilityZones", AvailabilityZones
  add(formData_593530, "EngineMode", newJString(EngineMode))
  if EnableCloudwatchLogsExports != nil:
    formData_593530.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_593529, "Action", newJString(Action))
  add(formData_593530, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_593530, "CharacterSetName", newJString(CharacterSetName))
  add(formData_593530, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_593530, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_593530, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_593530, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_593530, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_593530, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_593530, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_593530, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_593530, "SourceRegion", newJString(SourceRegion))
  add(formData_593530, "EngineVersion", newJString(EngineVersion))
  add(formData_593530, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_593530, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_593530, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_593530, "KmsKeyId", newJString(KmsKeyId))
  add(formData_593530, "Engine", newJString(Engine))
  add(formData_593530, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_593530, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  if Tags != nil:
    formData_593530.add "Tags", Tags
  add(formData_593530, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_593530, "OptionGroupName", newJString(OptionGroupName))
  add(formData_593530, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_593530, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_593529, "Version", newJString(Version))
  add(formData_593530, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_593530, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_593530, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  result = call_593528.call(nil, query_593529, nil, formData_593530, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_593480(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_593481, base: "/",
    url: url_PostCreateDBCluster_593482, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_593412 = ref object of OpenApiRestCall_592348
proc url_GetCreateDBCluster_593414(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBCluster_593413(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_593433 = query.getOrDefault("GlobalClusterIdentifier")
  valid_593433 = validateParameter(valid_593433, JString, required = false,
                                 default = nil)
  if valid_593433 != nil:
    section.add "GlobalClusterIdentifier", valid_593433
  var valid_593434 = query.getOrDefault("DatabaseName")
  valid_593434 = validateParameter(valid_593434, JString, required = false,
                                 default = nil)
  if valid_593434 != nil:
    section.add "DatabaseName", valid_593434
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_593435 = query.getOrDefault("Engine")
  valid_593435 = validateParameter(valid_593435, JString, required = true,
                                 default = nil)
  if valid_593435 != nil:
    section.add "Engine", valid_593435
  var valid_593436 = query.getOrDefault("CopyTagsToSnapshot")
  valid_593436 = validateParameter(valid_593436, JBool, required = false, default = nil)
  if valid_593436 != nil:
    section.add "CopyTagsToSnapshot", valid_593436
  var valid_593437 = query.getOrDefault("EnableHttpEndpoint")
  valid_593437 = validateParameter(valid_593437, JBool, required = false, default = nil)
  if valid_593437 != nil:
    section.add "EnableHttpEndpoint", valid_593437
  var valid_593438 = query.getOrDefault("KmsKeyId")
  valid_593438 = validateParameter(valid_593438, JString, required = false,
                                 default = nil)
  if valid_593438 != nil:
    section.add "KmsKeyId", valid_593438
  var valid_593439 = query.getOrDefault("PreSignedUrl")
  valid_593439 = validateParameter(valid_593439, JString, required = false,
                                 default = nil)
  if valid_593439 != nil:
    section.add "PreSignedUrl", valid_593439
  var valid_593440 = query.getOrDefault("EngineMode")
  valid_593440 = validateParameter(valid_593440, JString, required = false,
                                 default = nil)
  if valid_593440 != nil:
    section.add "EngineMode", valid_593440
  var valid_593441 = query.getOrDefault("MasterUsername")
  valid_593441 = validateParameter(valid_593441, JString, required = false,
                                 default = nil)
  if valid_593441 != nil:
    section.add "MasterUsername", valid_593441
  var valid_593442 = query.getOrDefault("BackupRetentionPeriod")
  valid_593442 = validateParameter(valid_593442, JInt, required = false, default = nil)
  if valid_593442 != nil:
    section.add "BackupRetentionPeriod", valid_593442
  var valid_593443 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_593443 = validateParameter(valid_593443, JString, required = false,
                                 default = nil)
  if valid_593443 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_593443
  var valid_593444 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_593444 = validateParameter(valid_593444, JArray, required = false,
                                 default = nil)
  if valid_593444 != nil:
    section.add "EnableCloudwatchLogsExports", valid_593444
  var valid_593445 = query.getOrDefault("EngineVersion")
  valid_593445 = validateParameter(valid_593445, JString, required = false,
                                 default = nil)
  if valid_593445 != nil:
    section.add "EngineVersion", valid_593445
  var valid_593446 = query.getOrDefault("Action")
  valid_593446 = validateParameter(valid_593446, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_593446 != nil:
    section.add "Action", valid_593446
  var valid_593447 = query.getOrDefault("VpcSecurityGroupIds")
  valid_593447 = validateParameter(valid_593447, JArray, required = false,
                                 default = nil)
  if valid_593447 != nil:
    section.add "VpcSecurityGroupIds", valid_593447
  var valid_593448 = query.getOrDefault("StorageEncrypted")
  valid_593448 = validateParameter(valid_593448, JBool, required = false, default = nil)
  if valid_593448 != nil:
    section.add "StorageEncrypted", valid_593448
  var valid_593449 = query.getOrDefault("DeletionProtection")
  valid_593449 = validateParameter(valid_593449, JBool, required = false, default = nil)
  if valid_593449 != nil:
    section.add "DeletionProtection", valid_593449
  var valid_593450 = query.getOrDefault("CharacterSetName")
  valid_593450 = validateParameter(valid_593450, JString, required = false,
                                 default = nil)
  if valid_593450 != nil:
    section.add "CharacterSetName", valid_593450
  var valid_593451 = query.getOrDefault("Tags")
  valid_593451 = validateParameter(valid_593451, JArray, required = false,
                                 default = nil)
  if valid_593451 != nil:
    section.add "Tags", valid_593451
  var valid_593452 = query.getOrDefault("DBClusterIdentifier")
  valid_593452 = validateParameter(valid_593452, JString, required = true,
                                 default = nil)
  if valid_593452 != nil:
    section.add "DBClusterIdentifier", valid_593452
  var valid_593453 = query.getOrDefault("BacktrackWindow")
  valid_593453 = validateParameter(valid_593453, JInt, required = false, default = nil)
  if valid_593453 != nil:
    section.add "BacktrackWindow", valid_593453
  var valid_593454 = query.getOrDefault("DBClusterParameterGroupName")
  valid_593454 = validateParameter(valid_593454, JString, required = false,
                                 default = nil)
  if valid_593454 != nil:
    section.add "DBClusterParameterGroupName", valid_593454
  var valid_593455 = query.getOrDefault("AvailabilityZones")
  valid_593455 = validateParameter(valid_593455, JArray, required = false,
                                 default = nil)
  if valid_593455 != nil:
    section.add "AvailabilityZones", valid_593455
  var valid_593456 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_593456 = validateParameter(valid_593456, JString, required = false,
                                 default = nil)
  if valid_593456 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_593456
  var valid_593457 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_593457 = validateParameter(valid_593457, JString, required = false,
                                 default = nil)
  if valid_593457 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_593457
  var valid_593458 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_593458 = validateParameter(valid_593458, JBool, required = false, default = nil)
  if valid_593458 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_593458
  var valid_593459 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_593459 = validateParameter(valid_593459, JString, required = false,
                                 default = nil)
  if valid_593459 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_593459
  var valid_593460 = query.getOrDefault("SourceRegion")
  valid_593460 = validateParameter(valid_593460, JString, required = false,
                                 default = nil)
  if valid_593460 != nil:
    section.add "SourceRegion", valid_593460
  var valid_593461 = query.getOrDefault("Port")
  valid_593461 = validateParameter(valid_593461, JInt, required = false, default = nil)
  if valid_593461 != nil:
    section.add "Port", valid_593461
  var valid_593462 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_593462 = validateParameter(valid_593462, JString, required = false,
                                 default = nil)
  if valid_593462 != nil:
    section.add "ReplicationSourceIdentifier", valid_593462
  var valid_593463 = query.getOrDefault("MasterUserPassword")
  valid_593463 = validateParameter(valid_593463, JString, required = false,
                                 default = nil)
  if valid_593463 != nil:
    section.add "MasterUserPassword", valid_593463
  var valid_593464 = query.getOrDefault("OptionGroupName")
  valid_593464 = validateParameter(valid_593464, JString, required = false,
                                 default = nil)
  if valid_593464 != nil:
    section.add "OptionGroupName", valid_593464
  var valid_593465 = query.getOrDefault("DBSubnetGroupName")
  valid_593465 = validateParameter(valid_593465, JString, required = false,
                                 default = nil)
  if valid_593465 != nil:
    section.add "DBSubnetGroupName", valid_593465
  var valid_593466 = query.getOrDefault("PreferredBackupWindow")
  valid_593466 = validateParameter(valid_593466, JString, required = false,
                                 default = nil)
  if valid_593466 != nil:
    section.add "PreferredBackupWindow", valid_593466
  var valid_593467 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_593467 = validateParameter(valid_593467, JString, required = false,
                                 default = nil)
  if valid_593467 != nil:
    section.add "PreferredMaintenanceWindow", valid_593467
  var valid_593468 = query.getOrDefault("Version")
  valid_593468 = validateParameter(valid_593468, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593468 != nil:
    section.add "Version", valid_593468
  var valid_593469 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_593469 = validateParameter(valid_593469, JString, required = false,
                                 default = nil)
  if valid_593469 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_593469
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_593470 = header.getOrDefault("X-Amz-Security-Token")
  valid_593470 = validateParameter(valid_593470, JString, required = false,
                                 default = nil)
  if valid_593470 != nil:
    section.add "X-Amz-Security-Token", valid_593470
  var valid_593471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593471 = validateParameter(valid_593471, JString, required = false,
                                 default = nil)
  if valid_593471 != nil:
    section.add "X-Amz-SignedHeaders", valid_593471
  var valid_593472 = header.getOrDefault("X-Amz-Signature")
  valid_593472 = validateParameter(valid_593472, JString, required = false,
                                 default = nil)
  if valid_593472 != nil:
    section.add "X-Amz-Signature", valid_593472
  var valid_593473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593473 = validateParameter(valid_593473, JString, required = false,
                                 default = nil)
  if valid_593473 != nil:
    section.add "X-Amz-Content-Sha256", valid_593473
  var valid_593474 = header.getOrDefault("X-Amz-Date")
  valid_593474 = validateParameter(valid_593474, JString, required = false,
                                 default = nil)
  if valid_593474 != nil:
    section.add "X-Amz-Date", valid_593474
  var valid_593475 = header.getOrDefault("X-Amz-Credential")
  valid_593475 = validateParameter(valid_593475, JString, required = false,
                                 default = nil)
  if valid_593475 != nil:
    section.add "X-Amz-Credential", valid_593475
  var valid_593476 = header.getOrDefault("X-Amz-Algorithm")
  valid_593476 = validateParameter(valid_593476, JString, required = false,
                                 default = nil)
  if valid_593476 != nil:
    section.add "X-Amz-Algorithm", valid_593476
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593477: Call_GetCreateDBCluster_593412; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593477.validator(path, query, header, formData, body)
  let scheme = call_593477.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593477.url(scheme.get, call_593477.host, call_593477.base,
                         call_593477.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593477, url, valid)

proc call*(call_593478: Call_GetCreateDBCluster_593412; Engine: string;
          DBClusterIdentifier: string; GlobalClusterIdentifier: string = "";
          DatabaseName: string = ""; CopyTagsToSnapshot: bool = false;
          EnableHttpEndpoint: bool = false; KmsKeyId: string = "";
          PreSignedUrl: string = ""; EngineMode: string = "";
          MasterUsername: string = ""; BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBCluster"; VpcSecurityGroupIds: JsonNode = nil;
          StorageEncrypted: bool = false; DeletionProtection: bool = false;
          CharacterSetName: string = ""; Tags: JsonNode = nil; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          SourceRegion: string = ""; Port: int = 0;
          ReplicationSourceIdentifier: string = ""; MasterUserPassword: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_593479 = newJObject()
  add(query_593479, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_593479, "DatabaseName", newJString(DatabaseName))
  add(query_593479, "Engine", newJString(Engine))
  add(query_593479, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_593479, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_593479, "KmsKeyId", newJString(KmsKeyId))
  add(query_593479, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_593479, "EngineMode", newJString(EngineMode))
  add(query_593479, "MasterUsername", newJString(MasterUsername))
  add(query_593479, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_593479, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  if EnableCloudwatchLogsExports != nil:
    query_593479.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_593479, "EngineVersion", newJString(EngineVersion))
  add(query_593479, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_593479.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_593479, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_593479, "DeletionProtection", newJBool(DeletionProtection))
  add(query_593479, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_593479.add "Tags", Tags
  add(query_593479, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_593479, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_593479, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_593479.add "AvailabilityZones", AvailabilityZones
  add(query_593479, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_593479, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_593479, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_593479, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_593479, "SourceRegion", newJString(SourceRegion))
  add(query_593479, "Port", newJInt(Port))
  add(query_593479, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_593479, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_593479, "OptionGroupName", newJString(OptionGroupName))
  add(query_593479, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_593479, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_593479, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_593479, "Version", newJString(Version))
  add(query_593479, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_593478.call(nil, query_593479, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_593412(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_593413,
    base: "/", url: url_GetCreateDBCluster_593414,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterEndpoint_593551 = ref object of OpenApiRestCall_592348
proc url_PostCreateDBClusterEndpoint_593553(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterEndpoint_593552(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593554 = query.getOrDefault("Action")
  valid_593554 = validateParameter(valid_593554, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_593554 != nil:
    section.add "Action", valid_593554
  var valid_593555 = query.getOrDefault("Version")
  valid_593555 = validateParameter(valid_593555, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593555 != nil:
    section.add "Version", valid_593555
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593556 = header.getOrDefault("X-Amz-Signature")
  valid_593556 = validateParameter(valid_593556, JString, required = false,
                                 default = nil)
  if valid_593556 != nil:
    section.add "X-Amz-Signature", valid_593556
  var valid_593557 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593557 = validateParameter(valid_593557, JString, required = false,
                                 default = nil)
  if valid_593557 != nil:
    section.add "X-Amz-Content-Sha256", valid_593557
  var valid_593558 = header.getOrDefault("X-Amz-Date")
  valid_593558 = validateParameter(valid_593558, JString, required = false,
                                 default = nil)
  if valid_593558 != nil:
    section.add "X-Amz-Date", valid_593558
  var valid_593559 = header.getOrDefault("X-Amz-Credential")
  valid_593559 = validateParameter(valid_593559, JString, required = false,
                                 default = nil)
  if valid_593559 != nil:
    section.add "X-Amz-Credential", valid_593559
  var valid_593560 = header.getOrDefault("X-Amz-Security-Token")
  valid_593560 = validateParameter(valid_593560, JString, required = false,
                                 default = nil)
  if valid_593560 != nil:
    section.add "X-Amz-Security-Token", valid_593560
  var valid_593561 = header.getOrDefault("X-Amz-Algorithm")
  valid_593561 = validateParameter(valid_593561, JString, required = false,
                                 default = nil)
  if valid_593561 != nil:
    section.add "X-Amz-Algorithm", valid_593561
  var valid_593562 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593562 = validateParameter(valid_593562, JString, required = false,
                                 default = nil)
  if valid_593562 != nil:
    section.add "X-Amz-SignedHeaders", valid_593562
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_593563 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_593563 = validateParameter(valid_593563, JString, required = true,
                                 default = nil)
  if valid_593563 != nil:
    section.add "DBClusterEndpointIdentifier", valid_593563
  var valid_593564 = formData.getOrDefault("StaticMembers")
  valid_593564 = validateParameter(valid_593564, JArray, required = false,
                                 default = nil)
  if valid_593564 != nil:
    section.add "StaticMembers", valid_593564
  var valid_593565 = formData.getOrDefault("EndpointType")
  valid_593565 = validateParameter(valid_593565, JString, required = true,
                                 default = nil)
  if valid_593565 != nil:
    section.add "EndpointType", valid_593565
  var valid_593566 = formData.getOrDefault("ExcludedMembers")
  valid_593566 = validateParameter(valid_593566, JArray, required = false,
                                 default = nil)
  if valid_593566 != nil:
    section.add "ExcludedMembers", valid_593566
  var valid_593567 = formData.getOrDefault("DBClusterIdentifier")
  valid_593567 = validateParameter(valid_593567, JString, required = true,
                                 default = nil)
  if valid_593567 != nil:
    section.add "DBClusterIdentifier", valid_593567
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593568: Call_PostCreateDBClusterEndpoint_593551; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593568.validator(path, query, header, formData, body)
  let scheme = call_593568.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593568.url(scheme.get, call_593568.host, call_593568.base,
                         call_593568.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593568, url, valid)

proc call*(call_593569: Call_PostCreateDBClusterEndpoint_593551;
          DBClusterEndpointIdentifier: string; EndpointType: string;
          DBClusterIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_593570 = newJObject()
  var formData_593571 = newJObject()
  add(formData_593571, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_593571.add "StaticMembers", StaticMembers
  add(query_593570, "Action", newJString(Action))
  add(formData_593571, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_593571.add "ExcludedMembers", ExcludedMembers
  add(query_593570, "Version", newJString(Version))
  add(formData_593571, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_593569.call(nil, query_593570, nil, formData_593571, nil)

var postCreateDBClusterEndpoint* = Call_PostCreateDBClusterEndpoint_593551(
    name: "postCreateDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_PostCreateDBClusterEndpoint_593552, base: "/",
    url: url_PostCreateDBClusterEndpoint_593553,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterEndpoint_593531 = ref object of OpenApiRestCall_592348
proc url_GetCreateDBClusterEndpoint_593533(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterEndpoint_593532(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_593534 = query.getOrDefault("ExcludedMembers")
  valid_593534 = validateParameter(valid_593534, JArray, required = false,
                                 default = nil)
  if valid_593534 != nil:
    section.add "ExcludedMembers", valid_593534
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_593535 = query.getOrDefault("DBClusterIdentifier")
  valid_593535 = validateParameter(valid_593535, JString, required = true,
                                 default = nil)
  if valid_593535 != nil:
    section.add "DBClusterIdentifier", valid_593535
  var valid_593536 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_593536 = validateParameter(valid_593536, JString, required = true,
                                 default = nil)
  if valid_593536 != nil:
    section.add "DBClusterEndpointIdentifier", valid_593536
  var valid_593537 = query.getOrDefault("StaticMembers")
  valid_593537 = validateParameter(valid_593537, JArray, required = false,
                                 default = nil)
  if valid_593537 != nil:
    section.add "StaticMembers", valid_593537
  var valid_593538 = query.getOrDefault("EndpointType")
  valid_593538 = validateParameter(valid_593538, JString, required = true,
                                 default = nil)
  if valid_593538 != nil:
    section.add "EndpointType", valid_593538
  var valid_593539 = query.getOrDefault("Action")
  valid_593539 = validateParameter(valid_593539, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_593539 != nil:
    section.add "Action", valid_593539
  var valid_593540 = query.getOrDefault("Version")
  valid_593540 = validateParameter(valid_593540, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593540 != nil:
    section.add "Version", valid_593540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593541 = header.getOrDefault("X-Amz-Signature")
  valid_593541 = validateParameter(valid_593541, JString, required = false,
                                 default = nil)
  if valid_593541 != nil:
    section.add "X-Amz-Signature", valid_593541
  var valid_593542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593542 = validateParameter(valid_593542, JString, required = false,
                                 default = nil)
  if valid_593542 != nil:
    section.add "X-Amz-Content-Sha256", valid_593542
  var valid_593543 = header.getOrDefault("X-Amz-Date")
  valid_593543 = validateParameter(valid_593543, JString, required = false,
                                 default = nil)
  if valid_593543 != nil:
    section.add "X-Amz-Date", valid_593543
  var valid_593544 = header.getOrDefault("X-Amz-Credential")
  valid_593544 = validateParameter(valid_593544, JString, required = false,
                                 default = nil)
  if valid_593544 != nil:
    section.add "X-Amz-Credential", valid_593544
  var valid_593545 = header.getOrDefault("X-Amz-Security-Token")
  valid_593545 = validateParameter(valid_593545, JString, required = false,
                                 default = nil)
  if valid_593545 != nil:
    section.add "X-Amz-Security-Token", valid_593545
  var valid_593546 = header.getOrDefault("X-Amz-Algorithm")
  valid_593546 = validateParameter(valid_593546, JString, required = false,
                                 default = nil)
  if valid_593546 != nil:
    section.add "X-Amz-Algorithm", valid_593546
  var valid_593547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593547 = validateParameter(valid_593547, JString, required = false,
                                 default = nil)
  if valid_593547 != nil:
    section.add "X-Amz-SignedHeaders", valid_593547
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593548: Call_GetCreateDBClusterEndpoint_593531; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593548.validator(path, query, header, formData, body)
  let scheme = call_593548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593548.url(scheme.get, call_593548.host, call_593548.base,
                         call_593548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593548, url, valid)

proc call*(call_593549: Call_GetCreateDBClusterEndpoint_593531;
          DBClusterIdentifier: string; DBClusterEndpointIdentifier: string;
          EndpointType: string; ExcludedMembers: JsonNode = nil;
          StaticMembers: JsonNode = nil; Action: string = "CreateDBClusterEndpoint";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593550 = newJObject()
  if ExcludedMembers != nil:
    query_593550.add "ExcludedMembers", ExcludedMembers
  add(query_593550, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_593550, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_593550.add "StaticMembers", StaticMembers
  add(query_593550, "EndpointType", newJString(EndpointType))
  add(query_593550, "Action", newJString(Action))
  add(query_593550, "Version", newJString(Version))
  result = call_593549.call(nil, query_593550, nil, nil, nil)

var getCreateDBClusterEndpoint* = Call_GetCreateDBClusterEndpoint_593531(
    name: "getCreateDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_GetCreateDBClusterEndpoint_593532, base: "/",
    url: url_GetCreateDBClusterEndpoint_593533,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_593591 = ref object of OpenApiRestCall_592348
proc url_PostCreateDBClusterParameterGroup_593593(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_593592(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593594 = query.getOrDefault("Action")
  valid_593594 = validateParameter(valid_593594, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_593594 != nil:
    section.add "Action", valid_593594
  var valid_593595 = query.getOrDefault("Version")
  valid_593595 = validateParameter(valid_593595, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593595 != nil:
    section.add "Version", valid_593595
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593596 = header.getOrDefault("X-Amz-Signature")
  valid_593596 = validateParameter(valid_593596, JString, required = false,
                                 default = nil)
  if valid_593596 != nil:
    section.add "X-Amz-Signature", valid_593596
  var valid_593597 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593597 = validateParameter(valid_593597, JString, required = false,
                                 default = nil)
  if valid_593597 != nil:
    section.add "X-Amz-Content-Sha256", valid_593597
  var valid_593598 = header.getOrDefault("X-Amz-Date")
  valid_593598 = validateParameter(valid_593598, JString, required = false,
                                 default = nil)
  if valid_593598 != nil:
    section.add "X-Amz-Date", valid_593598
  var valid_593599 = header.getOrDefault("X-Amz-Credential")
  valid_593599 = validateParameter(valid_593599, JString, required = false,
                                 default = nil)
  if valid_593599 != nil:
    section.add "X-Amz-Credential", valid_593599
  var valid_593600 = header.getOrDefault("X-Amz-Security-Token")
  valid_593600 = validateParameter(valid_593600, JString, required = false,
                                 default = nil)
  if valid_593600 != nil:
    section.add "X-Amz-Security-Token", valid_593600
  var valid_593601 = header.getOrDefault("X-Amz-Algorithm")
  valid_593601 = validateParameter(valid_593601, JString, required = false,
                                 default = nil)
  if valid_593601 != nil:
    section.add "X-Amz-Algorithm", valid_593601
  var valid_593602 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593602 = validateParameter(valid_593602, JString, required = false,
                                 default = nil)
  if valid_593602 != nil:
    section.add "X-Amz-SignedHeaders", valid_593602
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_593603 = formData.getOrDefault("Description")
  valid_593603 = validateParameter(valid_593603, JString, required = true,
                                 default = nil)
  if valid_593603 != nil:
    section.add "Description", valid_593603
  var valid_593604 = formData.getOrDefault("Tags")
  valid_593604 = validateParameter(valid_593604, JArray, required = false,
                                 default = nil)
  if valid_593604 != nil:
    section.add "Tags", valid_593604
  var valid_593605 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_593605 = validateParameter(valid_593605, JString, required = true,
                                 default = nil)
  if valid_593605 != nil:
    section.add "DBClusterParameterGroupName", valid_593605
  var valid_593606 = formData.getOrDefault("DBParameterGroupFamily")
  valid_593606 = validateParameter(valid_593606, JString, required = true,
                                 default = nil)
  if valid_593606 != nil:
    section.add "DBParameterGroupFamily", valid_593606
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593607: Call_PostCreateDBClusterParameterGroup_593591;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593607.validator(path, query, header, formData, body)
  let scheme = call_593607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593607.url(scheme.get, call_593607.host, call_593607.base,
                         call_593607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593607, url, valid)

proc call*(call_593608: Call_PostCreateDBClusterParameterGroup_593591;
          Description: string; DBClusterParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  var query_593609 = newJObject()
  var formData_593610 = newJObject()
  add(formData_593610, "Description", newJString(Description))
  add(query_593609, "Action", newJString(Action))
  if Tags != nil:
    formData_593610.add "Tags", Tags
  add(formData_593610, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_593609, "Version", newJString(Version))
  add(formData_593610, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_593608.call(nil, query_593609, nil, formData_593610, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_593591(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_593592, base: "/",
    url: url_PostCreateDBClusterParameterGroup_593593,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_593572 = ref object of OpenApiRestCall_592348
proc url_GetCreateDBClusterParameterGroup_593574(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_593573(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_593575 = query.getOrDefault("DBParameterGroupFamily")
  valid_593575 = validateParameter(valid_593575, JString, required = true,
                                 default = nil)
  if valid_593575 != nil:
    section.add "DBParameterGroupFamily", valid_593575
  var valid_593576 = query.getOrDefault("Tags")
  valid_593576 = validateParameter(valid_593576, JArray, required = false,
                                 default = nil)
  if valid_593576 != nil:
    section.add "Tags", valid_593576
  var valid_593577 = query.getOrDefault("DBClusterParameterGroupName")
  valid_593577 = validateParameter(valid_593577, JString, required = true,
                                 default = nil)
  if valid_593577 != nil:
    section.add "DBClusterParameterGroupName", valid_593577
  var valid_593578 = query.getOrDefault("Action")
  valid_593578 = validateParameter(valid_593578, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_593578 != nil:
    section.add "Action", valid_593578
  var valid_593579 = query.getOrDefault("Description")
  valid_593579 = validateParameter(valid_593579, JString, required = true,
                                 default = nil)
  if valid_593579 != nil:
    section.add "Description", valid_593579
  var valid_593580 = query.getOrDefault("Version")
  valid_593580 = validateParameter(valid_593580, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593580 != nil:
    section.add "Version", valid_593580
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593581 = header.getOrDefault("X-Amz-Signature")
  valid_593581 = validateParameter(valid_593581, JString, required = false,
                                 default = nil)
  if valid_593581 != nil:
    section.add "X-Amz-Signature", valid_593581
  var valid_593582 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593582 = validateParameter(valid_593582, JString, required = false,
                                 default = nil)
  if valid_593582 != nil:
    section.add "X-Amz-Content-Sha256", valid_593582
  var valid_593583 = header.getOrDefault("X-Amz-Date")
  valid_593583 = validateParameter(valid_593583, JString, required = false,
                                 default = nil)
  if valid_593583 != nil:
    section.add "X-Amz-Date", valid_593583
  var valid_593584 = header.getOrDefault("X-Amz-Credential")
  valid_593584 = validateParameter(valid_593584, JString, required = false,
                                 default = nil)
  if valid_593584 != nil:
    section.add "X-Amz-Credential", valid_593584
  var valid_593585 = header.getOrDefault("X-Amz-Security-Token")
  valid_593585 = validateParameter(valid_593585, JString, required = false,
                                 default = nil)
  if valid_593585 != nil:
    section.add "X-Amz-Security-Token", valid_593585
  var valid_593586 = header.getOrDefault("X-Amz-Algorithm")
  valid_593586 = validateParameter(valid_593586, JString, required = false,
                                 default = nil)
  if valid_593586 != nil:
    section.add "X-Amz-Algorithm", valid_593586
  var valid_593587 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593587 = validateParameter(valid_593587, JString, required = false,
                                 default = nil)
  if valid_593587 != nil:
    section.add "X-Amz-SignedHeaders", valid_593587
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593588: Call_GetCreateDBClusterParameterGroup_593572;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593588.validator(path, query, header, formData, body)
  let scheme = call_593588.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593588.url(scheme.get, call_593588.host, call_593588.base,
                         call_593588.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593588, url, valid)

proc call*(call_593589: Call_GetCreateDBClusterParameterGroup_593572;
          DBParameterGroupFamily: string; DBClusterParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: string (required)
  var query_593590 = newJObject()
  add(query_593590, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_593590.add "Tags", Tags
  add(query_593590, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_593590, "Action", newJString(Action))
  add(query_593590, "Description", newJString(Description))
  add(query_593590, "Version", newJString(Version))
  result = call_593589.call(nil, query_593590, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_593572(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_593573, base: "/",
    url: url_GetCreateDBClusterParameterGroup_593574,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_593629 = ref object of OpenApiRestCall_592348
proc url_PostCreateDBClusterSnapshot_593631(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterSnapshot_593630(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593632 = query.getOrDefault("Action")
  valid_593632 = validateParameter(valid_593632, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_593632 != nil:
    section.add "Action", valid_593632
  var valid_593633 = query.getOrDefault("Version")
  valid_593633 = validateParameter(valid_593633, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593633 != nil:
    section.add "Version", valid_593633
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593634 = header.getOrDefault("X-Amz-Signature")
  valid_593634 = validateParameter(valid_593634, JString, required = false,
                                 default = nil)
  if valid_593634 != nil:
    section.add "X-Amz-Signature", valid_593634
  var valid_593635 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593635 = validateParameter(valid_593635, JString, required = false,
                                 default = nil)
  if valid_593635 != nil:
    section.add "X-Amz-Content-Sha256", valid_593635
  var valid_593636 = header.getOrDefault("X-Amz-Date")
  valid_593636 = validateParameter(valid_593636, JString, required = false,
                                 default = nil)
  if valid_593636 != nil:
    section.add "X-Amz-Date", valid_593636
  var valid_593637 = header.getOrDefault("X-Amz-Credential")
  valid_593637 = validateParameter(valid_593637, JString, required = false,
                                 default = nil)
  if valid_593637 != nil:
    section.add "X-Amz-Credential", valid_593637
  var valid_593638 = header.getOrDefault("X-Amz-Security-Token")
  valid_593638 = validateParameter(valid_593638, JString, required = false,
                                 default = nil)
  if valid_593638 != nil:
    section.add "X-Amz-Security-Token", valid_593638
  var valid_593639 = header.getOrDefault("X-Amz-Algorithm")
  valid_593639 = validateParameter(valid_593639, JString, required = false,
                                 default = nil)
  if valid_593639 != nil:
    section.add "X-Amz-Algorithm", valid_593639
  var valid_593640 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593640 = validateParameter(valid_593640, JString, required = false,
                                 default = nil)
  if valid_593640 != nil:
    section.add "X-Amz-SignedHeaders", valid_593640
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_593641 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_593641 = validateParameter(valid_593641, JString, required = true,
                                 default = nil)
  if valid_593641 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_593641
  var valid_593642 = formData.getOrDefault("Tags")
  valid_593642 = validateParameter(valid_593642, JArray, required = false,
                                 default = nil)
  if valid_593642 != nil:
    section.add "Tags", valid_593642
  var valid_593643 = formData.getOrDefault("DBClusterIdentifier")
  valid_593643 = validateParameter(valid_593643, JString, required = true,
                                 default = nil)
  if valid_593643 != nil:
    section.add "DBClusterIdentifier", valid_593643
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593644: Call_PostCreateDBClusterSnapshot_593629; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593644.validator(path, query, header, formData, body)
  let scheme = call_593644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593644.url(scheme.get, call_593644.host, call_593644.base,
                         call_593644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593644, url, valid)

proc call*(call_593645: Call_PostCreateDBClusterSnapshot_593629;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Action: string = "CreateDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_593646 = newJObject()
  var formData_593647 = newJObject()
  add(formData_593647, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_593646, "Action", newJString(Action))
  if Tags != nil:
    formData_593647.add "Tags", Tags
  add(query_593646, "Version", newJString(Version))
  add(formData_593647, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_593645.call(nil, query_593646, nil, formData_593647, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_593629(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_593630, base: "/",
    url: url_PostCreateDBClusterSnapshot_593631,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_593611 = ref object of OpenApiRestCall_592348
proc url_GetCreateDBClusterSnapshot_593613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterSnapshot_593612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_593614 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_593614 = validateParameter(valid_593614, JString, required = true,
                                 default = nil)
  if valid_593614 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_593614
  var valid_593615 = query.getOrDefault("Tags")
  valid_593615 = validateParameter(valid_593615, JArray, required = false,
                                 default = nil)
  if valid_593615 != nil:
    section.add "Tags", valid_593615
  var valid_593616 = query.getOrDefault("DBClusterIdentifier")
  valid_593616 = validateParameter(valid_593616, JString, required = true,
                                 default = nil)
  if valid_593616 != nil:
    section.add "DBClusterIdentifier", valid_593616
  var valid_593617 = query.getOrDefault("Action")
  valid_593617 = validateParameter(valid_593617, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_593617 != nil:
    section.add "Action", valid_593617
  var valid_593618 = query.getOrDefault("Version")
  valid_593618 = validateParameter(valid_593618, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593618 != nil:
    section.add "Version", valid_593618
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593619 = header.getOrDefault("X-Amz-Signature")
  valid_593619 = validateParameter(valid_593619, JString, required = false,
                                 default = nil)
  if valid_593619 != nil:
    section.add "X-Amz-Signature", valid_593619
  var valid_593620 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593620 = validateParameter(valid_593620, JString, required = false,
                                 default = nil)
  if valid_593620 != nil:
    section.add "X-Amz-Content-Sha256", valid_593620
  var valid_593621 = header.getOrDefault("X-Amz-Date")
  valid_593621 = validateParameter(valid_593621, JString, required = false,
                                 default = nil)
  if valid_593621 != nil:
    section.add "X-Amz-Date", valid_593621
  var valid_593622 = header.getOrDefault("X-Amz-Credential")
  valid_593622 = validateParameter(valid_593622, JString, required = false,
                                 default = nil)
  if valid_593622 != nil:
    section.add "X-Amz-Credential", valid_593622
  var valid_593623 = header.getOrDefault("X-Amz-Security-Token")
  valid_593623 = validateParameter(valid_593623, JString, required = false,
                                 default = nil)
  if valid_593623 != nil:
    section.add "X-Amz-Security-Token", valid_593623
  var valid_593624 = header.getOrDefault("X-Amz-Algorithm")
  valid_593624 = validateParameter(valid_593624, JString, required = false,
                                 default = nil)
  if valid_593624 != nil:
    section.add "X-Amz-Algorithm", valid_593624
  var valid_593625 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593625 = validateParameter(valid_593625, JString, required = false,
                                 default = nil)
  if valid_593625 != nil:
    section.add "X-Amz-SignedHeaders", valid_593625
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593626: Call_GetCreateDBClusterSnapshot_593611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593626.validator(path, query, header, formData, body)
  let scheme = call_593626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593626.url(scheme.get, call_593626.host, call_593626.base,
                         call_593626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593626, url, valid)

proc call*(call_593627: Call_GetCreateDBClusterSnapshot_593611;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593628 = newJObject()
  add(query_593628, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_593628.add "Tags", Tags
  add(query_593628, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_593628, "Action", newJString(Action))
  add(query_593628, "Version", newJString(Version))
  result = call_593627.call(nil, query_593628, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_593611(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_593612, base: "/",
    url: url_GetCreateDBClusterSnapshot_593613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_593709 = ref object of OpenApiRestCall_592348
proc url_PostCreateDBInstance_593711(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBInstance_593710(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593712 = query.getOrDefault("Action")
  valid_593712 = validateParameter(valid_593712, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_593712 != nil:
    section.add "Action", valid_593712
  var valid_593713 = query.getOrDefault("Version")
  valid_593713 = validateParameter(valid_593713, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593713 != nil:
    section.add "Version", valid_593713
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_593714 = header.getOrDefault("X-Amz-Security-Token")
  valid_593714 = validateParameter(valid_593714, JString, required = false,
                                 default = nil)
  if valid_593714 != nil:
    section.add "X-Amz-Security-Token", valid_593714
  var valid_593715 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593715 = validateParameter(valid_593715, JString, required = false,
                                 default = nil)
  if valid_593715 != nil:
    section.add "X-Amz-SignedHeaders", valid_593715
  var valid_593716 = header.getOrDefault("X-Amz-Signature")
  valid_593716 = validateParameter(valid_593716, JString, required = false,
                                 default = nil)
  if valid_593716 != nil:
    section.add "X-Amz-Signature", valid_593716
  var valid_593717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593717 = validateParameter(valid_593717, JString, required = false,
                                 default = nil)
  if valid_593717 != nil:
    section.add "X-Amz-Content-Sha256", valid_593717
  var valid_593718 = header.getOrDefault("X-Amz-Date")
  valid_593718 = validateParameter(valid_593718, JString, required = false,
                                 default = nil)
  if valid_593718 != nil:
    section.add "X-Amz-Date", valid_593718
  var valid_593719 = header.getOrDefault("X-Amz-Credential")
  valid_593719 = validateParameter(valid_593719, JString, required = false,
                                 default = nil)
  if valid_593719 != nil:
    section.add "X-Amz-Credential", valid_593719
  var valid_593720 = header.getOrDefault("X-Amz-Algorithm")
  valid_593720 = validateParameter(valid_593720, JString, required = false,
                                 default = nil)
  if valid_593720 != nil:
    section.add "X-Amz-Algorithm", valid_593720
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  section = newJObject()
  var valid_593721 = formData.getOrDefault("PromotionTier")
  valid_593721 = validateParameter(valid_593721, JInt, required = false, default = nil)
  if valid_593721 != nil:
    section.add "PromotionTier", valid_593721
  var valid_593722 = formData.getOrDefault("Port")
  valid_593722 = validateParameter(valid_593722, JInt, required = false, default = nil)
  if valid_593722 != nil:
    section.add "Port", valid_593722
  var valid_593723 = formData.getOrDefault("MultiAZ")
  valid_593723 = validateParameter(valid_593723, JBool, required = false, default = nil)
  if valid_593723 != nil:
    section.add "MultiAZ", valid_593723
  var valid_593724 = formData.getOrDefault("MasterUsername")
  valid_593724 = validateParameter(valid_593724, JString, required = false,
                                 default = nil)
  if valid_593724 != nil:
    section.add "MasterUsername", valid_593724
  var valid_593725 = formData.getOrDefault("MonitoringRoleArn")
  valid_593725 = validateParameter(valid_593725, JString, required = false,
                                 default = nil)
  if valid_593725 != nil:
    section.add "MonitoringRoleArn", valid_593725
  var valid_593726 = formData.getOrDefault("MonitoringInterval")
  valid_593726 = validateParameter(valid_593726, JInt, required = false, default = nil)
  if valid_593726 != nil:
    section.add "MonitoringInterval", valid_593726
  var valid_593727 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_593727 = validateParameter(valid_593727, JArray, required = false,
                                 default = nil)
  if valid_593727 != nil:
    section.add "VpcSecurityGroupIds", valid_593727
  var valid_593728 = formData.getOrDefault("AvailabilityZone")
  valid_593728 = validateParameter(valid_593728, JString, required = false,
                                 default = nil)
  if valid_593728 != nil:
    section.add "AvailabilityZone", valid_593728
  var valid_593729 = formData.getOrDefault("EnablePerformanceInsights")
  valid_593729 = validateParameter(valid_593729, JBool, required = false, default = nil)
  if valid_593729 != nil:
    section.add "EnablePerformanceInsights", valid_593729
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_593730 = formData.getOrDefault("DBInstanceIdentifier")
  valid_593730 = validateParameter(valid_593730, JString, required = true,
                                 default = nil)
  if valid_593730 != nil:
    section.add "DBInstanceIdentifier", valid_593730
  var valid_593731 = formData.getOrDefault("TdeCredentialArn")
  valid_593731 = validateParameter(valid_593731, JString, required = false,
                                 default = nil)
  if valid_593731 != nil:
    section.add "TdeCredentialArn", valid_593731
  var valid_593732 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_593732 = validateParameter(valid_593732, JArray, required = false,
                                 default = nil)
  if valid_593732 != nil:
    section.add "EnableCloudwatchLogsExports", valid_593732
  var valid_593733 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_593733 = validateParameter(valid_593733, JInt, required = false, default = nil)
  if valid_593733 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_593733
  var valid_593734 = formData.getOrDefault("DBSubnetGroupName")
  valid_593734 = validateParameter(valid_593734, JString, required = false,
                                 default = nil)
  if valid_593734 != nil:
    section.add "DBSubnetGroupName", valid_593734
  var valid_593735 = formData.getOrDefault("CharacterSetName")
  valid_593735 = validateParameter(valid_593735, JString, required = false,
                                 default = nil)
  if valid_593735 != nil:
    section.add "CharacterSetName", valid_593735
  var valid_593736 = formData.getOrDefault("StorageType")
  valid_593736 = validateParameter(valid_593736, JString, required = false,
                                 default = nil)
  if valid_593736 != nil:
    section.add "StorageType", valid_593736
  var valid_593737 = formData.getOrDefault("MaxAllocatedStorage")
  valid_593737 = validateParameter(valid_593737, JInt, required = false, default = nil)
  if valid_593737 != nil:
    section.add "MaxAllocatedStorage", valid_593737
  var valid_593738 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_593738 = validateParameter(valid_593738, JBool, required = false, default = nil)
  if valid_593738 != nil:
    section.add "CopyTagsToSnapshot", valid_593738
  var valid_593739 = formData.getOrDefault("DeletionProtection")
  valid_593739 = validateParameter(valid_593739, JBool, required = false, default = nil)
  if valid_593739 != nil:
    section.add "DeletionProtection", valid_593739
  var valid_593740 = formData.getOrDefault("ProcessorFeatures")
  valid_593740 = validateParameter(valid_593740, JArray, required = false,
                                 default = nil)
  if valid_593740 != nil:
    section.add "ProcessorFeatures", valid_593740
  var valid_593741 = formData.getOrDefault("AllocatedStorage")
  valid_593741 = validateParameter(valid_593741, JInt, required = false, default = nil)
  if valid_593741 != nil:
    section.add "AllocatedStorage", valid_593741
  var valid_593742 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_593742 = validateParameter(valid_593742, JString, required = false,
                                 default = nil)
  if valid_593742 != nil:
    section.add "PreferredMaintenanceWindow", valid_593742
  var valid_593743 = formData.getOrDefault("DBInstanceClass")
  valid_593743 = validateParameter(valid_593743, JString, required = true,
                                 default = nil)
  if valid_593743 != nil:
    section.add "DBInstanceClass", valid_593743
  var valid_593744 = formData.getOrDefault("PreferredBackupWindow")
  valid_593744 = validateParameter(valid_593744, JString, required = false,
                                 default = nil)
  if valid_593744 != nil:
    section.add "PreferredBackupWindow", valid_593744
  var valid_593745 = formData.getOrDefault("MasterUserPassword")
  valid_593745 = validateParameter(valid_593745, JString, required = false,
                                 default = nil)
  if valid_593745 != nil:
    section.add "MasterUserPassword", valid_593745
  var valid_593746 = formData.getOrDefault("Domain")
  valid_593746 = validateParameter(valid_593746, JString, required = false,
                                 default = nil)
  if valid_593746 != nil:
    section.add "Domain", valid_593746
  var valid_593747 = formData.getOrDefault("Timezone")
  valid_593747 = validateParameter(valid_593747, JString, required = false,
                                 default = nil)
  if valid_593747 != nil:
    section.add "Timezone", valid_593747
  var valid_593748 = formData.getOrDefault("DBParameterGroupName")
  valid_593748 = validateParameter(valid_593748, JString, required = false,
                                 default = nil)
  if valid_593748 != nil:
    section.add "DBParameterGroupName", valid_593748
  var valid_593749 = formData.getOrDefault("EngineVersion")
  valid_593749 = validateParameter(valid_593749, JString, required = false,
                                 default = nil)
  if valid_593749 != nil:
    section.add "EngineVersion", valid_593749
  var valid_593750 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_593750 = validateParameter(valid_593750, JBool, required = false, default = nil)
  if valid_593750 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_593750
  var valid_593751 = formData.getOrDefault("BackupRetentionPeriod")
  valid_593751 = validateParameter(valid_593751, JInt, required = false, default = nil)
  if valid_593751 != nil:
    section.add "BackupRetentionPeriod", valid_593751
  var valid_593752 = formData.getOrDefault("KmsKeyId")
  valid_593752 = validateParameter(valid_593752, JString, required = false,
                                 default = nil)
  if valid_593752 != nil:
    section.add "KmsKeyId", valid_593752
  var valid_593753 = formData.getOrDefault("Engine")
  valid_593753 = validateParameter(valid_593753, JString, required = true,
                                 default = nil)
  if valid_593753 != nil:
    section.add "Engine", valid_593753
  var valid_593754 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_593754 = validateParameter(valid_593754, JBool, required = false, default = nil)
  if valid_593754 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593754
  var valid_593755 = formData.getOrDefault("TdeCredentialPassword")
  valid_593755 = validateParameter(valid_593755, JString, required = false,
                                 default = nil)
  if valid_593755 != nil:
    section.add "TdeCredentialPassword", valid_593755
  var valid_593756 = formData.getOrDefault("DBName")
  valid_593756 = validateParameter(valid_593756, JString, required = false,
                                 default = nil)
  if valid_593756 != nil:
    section.add "DBName", valid_593756
  var valid_593757 = formData.getOrDefault("Iops")
  valid_593757 = validateParameter(valid_593757, JInt, required = false, default = nil)
  if valid_593757 != nil:
    section.add "Iops", valid_593757
  var valid_593758 = formData.getOrDefault("PubliclyAccessible")
  valid_593758 = validateParameter(valid_593758, JBool, required = false, default = nil)
  if valid_593758 != nil:
    section.add "PubliclyAccessible", valid_593758
  var valid_593759 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_593759 = validateParameter(valid_593759, JString, required = false,
                                 default = nil)
  if valid_593759 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_593759
  var valid_593760 = formData.getOrDefault("LicenseModel")
  valid_593760 = validateParameter(valid_593760, JString, required = false,
                                 default = nil)
  if valid_593760 != nil:
    section.add "LicenseModel", valid_593760
  var valid_593761 = formData.getOrDefault("Tags")
  valid_593761 = validateParameter(valid_593761, JArray, required = false,
                                 default = nil)
  if valid_593761 != nil:
    section.add "Tags", valid_593761
  var valid_593762 = formData.getOrDefault("DomainIAMRoleName")
  valid_593762 = validateParameter(valid_593762, JString, required = false,
                                 default = nil)
  if valid_593762 != nil:
    section.add "DomainIAMRoleName", valid_593762
  var valid_593763 = formData.getOrDefault("OptionGroupName")
  valid_593763 = validateParameter(valid_593763, JString, required = false,
                                 default = nil)
  if valid_593763 != nil:
    section.add "OptionGroupName", valid_593763
  var valid_593764 = formData.getOrDefault("DBSecurityGroups")
  valid_593764 = validateParameter(valid_593764, JArray, required = false,
                                 default = nil)
  if valid_593764 != nil:
    section.add "DBSecurityGroups", valid_593764
  var valid_593765 = formData.getOrDefault("StorageEncrypted")
  valid_593765 = validateParameter(valid_593765, JBool, required = false, default = nil)
  if valid_593765 != nil:
    section.add "StorageEncrypted", valid_593765
  var valid_593766 = formData.getOrDefault("DBClusterIdentifier")
  valid_593766 = validateParameter(valid_593766, JString, required = false,
                                 default = nil)
  if valid_593766 != nil:
    section.add "DBClusterIdentifier", valid_593766
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593767: Call_PostCreateDBInstance_593709; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_593767.validator(path, query, header, formData, body)
  let scheme = call_593767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593767.url(scheme.get, call_593767.host, call_593767.base,
                         call_593767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593767, url, valid)

proc call*(call_593768: Call_PostCreateDBInstance_593709;
          DBInstanceIdentifier: string; DBInstanceClass: string; Engine: string;
          PromotionTier: int = 0; Port: int = 0; MultiAZ: bool = false;
          MasterUsername: string = ""; MonitoringRoleArn: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; EnablePerformanceInsights: bool = false;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; CharacterSetName: string = "";
          StorageType: string = ""; MaxAllocatedStorage: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          Domain: string = ""; Timezone: string = ""; DBParameterGroupName: string = "";
          EngineVersion: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  var query_593769 = newJObject()
  var formData_593770 = newJObject()
  add(formData_593770, "PromotionTier", newJInt(PromotionTier))
  add(formData_593770, "Port", newJInt(Port))
  add(formData_593770, "MultiAZ", newJBool(MultiAZ))
  add(formData_593770, "MasterUsername", newJString(MasterUsername))
  add(formData_593770, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_593770, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_593770.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_593770, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_593770, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_593770, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_593770, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_593770.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_593769, "Action", newJString(Action))
  add(formData_593770, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_593770, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_593770, "CharacterSetName", newJString(CharacterSetName))
  add(formData_593770, "StorageType", newJString(StorageType))
  add(formData_593770, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_593770, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_593770, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_593770.add "ProcessorFeatures", ProcessorFeatures
  add(formData_593770, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_593770, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_593770, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_593770, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_593770, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_593770, "Domain", newJString(Domain))
  add(formData_593770, "Timezone", newJString(Timezone))
  add(formData_593770, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_593770, "EngineVersion", newJString(EngineVersion))
  add(formData_593770, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_593770, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_593770, "KmsKeyId", newJString(KmsKeyId))
  add(formData_593770, "Engine", newJString(Engine))
  add(formData_593770, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_593770, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_593770, "DBName", newJString(DBName))
  add(formData_593770, "Iops", newJInt(Iops))
  add(formData_593770, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_593770, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_593770, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_593770.add "Tags", Tags
  add(formData_593770, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_593770, "OptionGroupName", newJString(OptionGroupName))
  add(query_593769, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_593770.add "DBSecurityGroups", DBSecurityGroups
  add(formData_593770, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_593770, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_593768.call(nil, query_593769, nil, formData_593770, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_593709(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_593710, base: "/",
    url: url_PostCreateDBInstance_593711, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_593648 = ref object of OpenApiRestCall_592348
proc url_GetCreateDBInstance_593650(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBInstance_593649(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: JString (required)
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_593651 = query.getOrDefault("Engine")
  valid_593651 = validateParameter(valid_593651, JString, required = true,
                                 default = nil)
  if valid_593651 != nil:
    section.add "Engine", valid_593651
  var valid_593652 = query.getOrDefault("CopyTagsToSnapshot")
  valid_593652 = validateParameter(valid_593652, JBool, required = false, default = nil)
  if valid_593652 != nil:
    section.add "CopyTagsToSnapshot", valid_593652
  var valid_593653 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_593653 = validateParameter(valid_593653, JInt, required = false, default = nil)
  if valid_593653 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_593653
  var valid_593654 = query.getOrDefault("MonitoringInterval")
  valid_593654 = validateParameter(valid_593654, JInt, required = false, default = nil)
  if valid_593654 != nil:
    section.add "MonitoringInterval", valid_593654
  var valid_593655 = query.getOrDefault("KmsKeyId")
  valid_593655 = validateParameter(valid_593655, JString, required = false,
                                 default = nil)
  if valid_593655 != nil:
    section.add "KmsKeyId", valid_593655
  var valid_593656 = query.getOrDefault("MonitoringRoleArn")
  valid_593656 = validateParameter(valid_593656, JString, required = false,
                                 default = nil)
  if valid_593656 != nil:
    section.add "MonitoringRoleArn", valid_593656
  var valid_593657 = query.getOrDefault("ProcessorFeatures")
  valid_593657 = validateParameter(valid_593657, JArray, required = false,
                                 default = nil)
  if valid_593657 != nil:
    section.add "ProcessorFeatures", valid_593657
  var valid_593658 = query.getOrDefault("MasterUsername")
  valid_593658 = validateParameter(valid_593658, JString, required = false,
                                 default = nil)
  if valid_593658 != nil:
    section.add "MasterUsername", valid_593658
  var valid_593659 = query.getOrDefault("BackupRetentionPeriod")
  valid_593659 = validateParameter(valid_593659, JInt, required = false, default = nil)
  if valid_593659 != nil:
    section.add "BackupRetentionPeriod", valid_593659
  var valid_593660 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_593660 = validateParameter(valid_593660, JArray, required = false,
                                 default = nil)
  if valid_593660 != nil:
    section.add "EnableCloudwatchLogsExports", valid_593660
  var valid_593661 = query.getOrDefault("EngineVersion")
  valid_593661 = validateParameter(valid_593661, JString, required = false,
                                 default = nil)
  if valid_593661 != nil:
    section.add "EngineVersion", valid_593661
  var valid_593662 = query.getOrDefault("Action")
  valid_593662 = validateParameter(valid_593662, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_593662 != nil:
    section.add "Action", valid_593662
  var valid_593663 = query.getOrDefault("Domain")
  valid_593663 = validateParameter(valid_593663, JString, required = false,
                                 default = nil)
  if valid_593663 != nil:
    section.add "Domain", valid_593663
  var valid_593664 = query.getOrDefault("VpcSecurityGroupIds")
  valid_593664 = validateParameter(valid_593664, JArray, required = false,
                                 default = nil)
  if valid_593664 != nil:
    section.add "VpcSecurityGroupIds", valid_593664
  var valid_593665 = query.getOrDefault("AllocatedStorage")
  valid_593665 = validateParameter(valid_593665, JInt, required = false, default = nil)
  if valid_593665 != nil:
    section.add "AllocatedStorage", valid_593665
  var valid_593666 = query.getOrDefault("EnablePerformanceInsights")
  valid_593666 = validateParameter(valid_593666, JBool, required = false, default = nil)
  if valid_593666 != nil:
    section.add "EnablePerformanceInsights", valid_593666
  var valid_593667 = query.getOrDefault("PubliclyAccessible")
  valid_593667 = validateParameter(valid_593667, JBool, required = false, default = nil)
  if valid_593667 != nil:
    section.add "PubliclyAccessible", valid_593667
  var valid_593668 = query.getOrDefault("DBName")
  valid_593668 = validateParameter(valid_593668, JString, required = false,
                                 default = nil)
  if valid_593668 != nil:
    section.add "DBName", valid_593668
  var valid_593669 = query.getOrDefault("TdeCredentialPassword")
  valid_593669 = validateParameter(valid_593669, JString, required = false,
                                 default = nil)
  if valid_593669 != nil:
    section.add "TdeCredentialPassword", valid_593669
  var valid_593670 = query.getOrDefault("StorageEncrypted")
  valid_593670 = validateParameter(valid_593670, JBool, required = false, default = nil)
  if valid_593670 != nil:
    section.add "StorageEncrypted", valid_593670
  var valid_593671 = query.getOrDefault("DBParameterGroupName")
  valid_593671 = validateParameter(valid_593671, JString, required = false,
                                 default = nil)
  if valid_593671 != nil:
    section.add "DBParameterGroupName", valid_593671
  var valid_593672 = query.getOrDefault("DeletionProtection")
  valid_593672 = validateParameter(valid_593672, JBool, required = false, default = nil)
  if valid_593672 != nil:
    section.add "DeletionProtection", valid_593672
  var valid_593673 = query.getOrDefault("CharacterSetName")
  valid_593673 = validateParameter(valid_593673, JString, required = false,
                                 default = nil)
  if valid_593673 != nil:
    section.add "CharacterSetName", valid_593673
  var valid_593674 = query.getOrDefault("Tags")
  valid_593674 = validateParameter(valid_593674, JArray, required = false,
                                 default = nil)
  if valid_593674 != nil:
    section.add "Tags", valid_593674
  var valid_593675 = query.getOrDefault("MaxAllocatedStorage")
  valid_593675 = validateParameter(valid_593675, JInt, required = false, default = nil)
  if valid_593675 != nil:
    section.add "MaxAllocatedStorage", valid_593675
  var valid_593676 = query.getOrDefault("DBClusterIdentifier")
  valid_593676 = validateParameter(valid_593676, JString, required = false,
                                 default = nil)
  if valid_593676 != nil:
    section.add "DBClusterIdentifier", valid_593676
  var valid_593677 = query.getOrDefault("LicenseModel")
  valid_593677 = validateParameter(valid_593677, JString, required = false,
                                 default = nil)
  if valid_593677 != nil:
    section.add "LicenseModel", valid_593677
  var valid_593678 = query.getOrDefault("DBInstanceIdentifier")
  valid_593678 = validateParameter(valid_593678, JString, required = true,
                                 default = nil)
  if valid_593678 != nil:
    section.add "DBInstanceIdentifier", valid_593678
  var valid_593679 = query.getOrDefault("TdeCredentialArn")
  valid_593679 = validateParameter(valid_593679, JString, required = false,
                                 default = nil)
  if valid_593679 != nil:
    section.add "TdeCredentialArn", valid_593679
  var valid_593680 = query.getOrDefault("PromotionTier")
  valid_593680 = validateParameter(valid_593680, JInt, required = false, default = nil)
  if valid_593680 != nil:
    section.add "PromotionTier", valid_593680
  var valid_593681 = query.getOrDefault("StorageType")
  valid_593681 = validateParameter(valid_593681, JString, required = false,
                                 default = nil)
  if valid_593681 != nil:
    section.add "StorageType", valid_593681
  var valid_593682 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_593682 = validateParameter(valid_593682, JBool, required = false, default = nil)
  if valid_593682 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_593682
  var valid_593683 = query.getOrDefault("MultiAZ")
  valid_593683 = validateParameter(valid_593683, JBool, required = false, default = nil)
  if valid_593683 != nil:
    section.add "MultiAZ", valid_593683
  var valid_593684 = query.getOrDefault("DBSecurityGroups")
  valid_593684 = validateParameter(valid_593684, JArray, required = false,
                                 default = nil)
  if valid_593684 != nil:
    section.add "DBSecurityGroups", valid_593684
  var valid_593685 = query.getOrDefault("Port")
  valid_593685 = validateParameter(valid_593685, JInt, required = false, default = nil)
  if valid_593685 != nil:
    section.add "Port", valid_593685
  var valid_593686 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_593686 = validateParameter(valid_593686, JString, required = false,
                                 default = nil)
  if valid_593686 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_593686
  var valid_593687 = query.getOrDefault("MasterUserPassword")
  valid_593687 = validateParameter(valid_593687, JString, required = false,
                                 default = nil)
  if valid_593687 != nil:
    section.add "MasterUserPassword", valid_593687
  var valid_593688 = query.getOrDefault("AvailabilityZone")
  valid_593688 = validateParameter(valid_593688, JString, required = false,
                                 default = nil)
  if valid_593688 != nil:
    section.add "AvailabilityZone", valid_593688
  var valid_593689 = query.getOrDefault("OptionGroupName")
  valid_593689 = validateParameter(valid_593689, JString, required = false,
                                 default = nil)
  if valid_593689 != nil:
    section.add "OptionGroupName", valid_593689
  var valid_593690 = query.getOrDefault("DBSubnetGroupName")
  valid_593690 = validateParameter(valid_593690, JString, required = false,
                                 default = nil)
  if valid_593690 != nil:
    section.add "DBSubnetGroupName", valid_593690
  var valid_593691 = query.getOrDefault("PreferredBackupWindow")
  valid_593691 = validateParameter(valid_593691, JString, required = false,
                                 default = nil)
  if valid_593691 != nil:
    section.add "PreferredBackupWindow", valid_593691
  var valid_593692 = query.getOrDefault("DBInstanceClass")
  valid_593692 = validateParameter(valid_593692, JString, required = true,
                                 default = nil)
  if valid_593692 != nil:
    section.add "DBInstanceClass", valid_593692
  var valid_593693 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_593693 = validateParameter(valid_593693, JString, required = false,
                                 default = nil)
  if valid_593693 != nil:
    section.add "PreferredMaintenanceWindow", valid_593693
  var valid_593694 = query.getOrDefault("Timezone")
  valid_593694 = validateParameter(valid_593694, JString, required = false,
                                 default = nil)
  if valid_593694 != nil:
    section.add "Timezone", valid_593694
  var valid_593695 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_593695 = validateParameter(valid_593695, JBool, required = false, default = nil)
  if valid_593695 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593695
  var valid_593696 = query.getOrDefault("Iops")
  valid_593696 = validateParameter(valid_593696, JInt, required = false, default = nil)
  if valid_593696 != nil:
    section.add "Iops", valid_593696
  var valid_593697 = query.getOrDefault("Version")
  valid_593697 = validateParameter(valid_593697, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593697 != nil:
    section.add "Version", valid_593697
  var valid_593698 = query.getOrDefault("DomainIAMRoleName")
  valid_593698 = validateParameter(valid_593698, JString, required = false,
                                 default = nil)
  if valid_593698 != nil:
    section.add "DomainIAMRoleName", valid_593698
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_593699 = header.getOrDefault("X-Amz-Security-Token")
  valid_593699 = validateParameter(valid_593699, JString, required = false,
                                 default = nil)
  if valid_593699 != nil:
    section.add "X-Amz-Security-Token", valid_593699
  var valid_593700 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593700 = validateParameter(valid_593700, JString, required = false,
                                 default = nil)
  if valid_593700 != nil:
    section.add "X-Amz-SignedHeaders", valid_593700
  var valid_593701 = header.getOrDefault("X-Amz-Signature")
  valid_593701 = validateParameter(valid_593701, JString, required = false,
                                 default = nil)
  if valid_593701 != nil:
    section.add "X-Amz-Signature", valid_593701
  var valid_593702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593702 = validateParameter(valid_593702, JString, required = false,
                                 default = nil)
  if valid_593702 != nil:
    section.add "X-Amz-Content-Sha256", valid_593702
  var valid_593703 = header.getOrDefault("X-Amz-Date")
  valid_593703 = validateParameter(valid_593703, JString, required = false,
                                 default = nil)
  if valid_593703 != nil:
    section.add "X-Amz-Date", valid_593703
  var valid_593704 = header.getOrDefault("X-Amz-Credential")
  valid_593704 = validateParameter(valid_593704, JString, required = false,
                                 default = nil)
  if valid_593704 != nil:
    section.add "X-Amz-Credential", valid_593704
  var valid_593705 = header.getOrDefault("X-Amz-Algorithm")
  valid_593705 = validateParameter(valid_593705, JString, required = false,
                                 default = nil)
  if valid_593705 != nil:
    section.add "X-Amz-Algorithm", valid_593705
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593706: Call_GetCreateDBInstance_593648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_593706.validator(path, query, header, formData, body)
  let scheme = call_593706.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593706.url(scheme.get, call_593706.host, call_593706.base,
                         call_593706.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593706, url, valid)

proc call*(call_593707: Call_GetCreateDBInstance_593648; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; TdeCredentialPassword: string = "";
          StorageEncrypted: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false; CharacterSetName: string = "";
          Tags: JsonNode = nil; MaxAllocatedStorage: int = 0;
          DBClusterIdentifier: string = ""; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Timezone: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          Version: string = "2014-10-31"; DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: string (required)
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_593708 = newJObject()
  add(query_593708, "Engine", newJString(Engine))
  add(query_593708, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_593708, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_593708, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_593708, "KmsKeyId", newJString(KmsKeyId))
  add(query_593708, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  if ProcessorFeatures != nil:
    query_593708.add "ProcessorFeatures", ProcessorFeatures
  add(query_593708, "MasterUsername", newJString(MasterUsername))
  add(query_593708, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_593708.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_593708, "EngineVersion", newJString(EngineVersion))
  add(query_593708, "Action", newJString(Action))
  add(query_593708, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_593708.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_593708, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_593708, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_593708, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_593708, "DBName", newJString(DBName))
  add(query_593708, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_593708, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_593708, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_593708, "DeletionProtection", newJBool(DeletionProtection))
  add(query_593708, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_593708.add "Tags", Tags
  add(query_593708, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_593708, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_593708, "LicenseModel", newJString(LicenseModel))
  add(query_593708, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_593708, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_593708, "PromotionTier", newJInt(PromotionTier))
  add(query_593708, "StorageType", newJString(StorageType))
  add(query_593708, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_593708, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_593708.add "DBSecurityGroups", DBSecurityGroups
  add(query_593708, "Port", newJInt(Port))
  add(query_593708, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_593708, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_593708, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_593708, "OptionGroupName", newJString(OptionGroupName))
  add(query_593708, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_593708, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_593708, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_593708, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_593708, "Timezone", newJString(Timezone))
  add(query_593708, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_593708, "Iops", newJInt(Iops))
  add(query_593708, "Version", newJString(Version))
  add(query_593708, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_593707.call(nil, query_593708, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_593648(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_593649, base: "/",
    url: url_GetCreateDBInstance_593650, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstanceReadReplica_593817 = ref object of OpenApiRestCall_592348
proc url_PostCreateDBInstanceReadReplica_593819(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBInstanceReadReplica_593818(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593820 = query.getOrDefault("Action")
  valid_593820 = validateParameter(valid_593820, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_593820 != nil:
    section.add "Action", valid_593820
  var valid_593821 = query.getOrDefault("Version")
  valid_593821 = validateParameter(valid_593821, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593821 != nil:
    section.add "Version", valid_593821
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593822 = header.getOrDefault("X-Amz-Signature")
  valid_593822 = validateParameter(valid_593822, JString, required = false,
                                 default = nil)
  if valid_593822 != nil:
    section.add "X-Amz-Signature", valid_593822
  var valid_593823 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593823 = validateParameter(valid_593823, JString, required = false,
                                 default = nil)
  if valid_593823 != nil:
    section.add "X-Amz-Content-Sha256", valid_593823
  var valid_593824 = header.getOrDefault("X-Amz-Date")
  valid_593824 = validateParameter(valid_593824, JString, required = false,
                                 default = nil)
  if valid_593824 != nil:
    section.add "X-Amz-Date", valid_593824
  var valid_593825 = header.getOrDefault("X-Amz-Credential")
  valid_593825 = validateParameter(valid_593825, JString, required = false,
                                 default = nil)
  if valid_593825 != nil:
    section.add "X-Amz-Credential", valid_593825
  var valid_593826 = header.getOrDefault("X-Amz-Security-Token")
  valid_593826 = validateParameter(valid_593826, JString, required = false,
                                 default = nil)
  if valid_593826 != nil:
    section.add "X-Amz-Security-Token", valid_593826
  var valid_593827 = header.getOrDefault("X-Amz-Algorithm")
  valid_593827 = validateParameter(valid_593827, JString, required = false,
                                 default = nil)
  if valid_593827 != nil:
    section.add "X-Amz-Algorithm", valid_593827
  var valid_593828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593828 = validateParameter(valid_593828, JString, required = false,
                                 default = nil)
  if valid_593828 != nil:
    section.add "X-Amz-SignedHeaders", valid_593828
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_593829 = formData.getOrDefault("Port")
  valid_593829 = validateParameter(valid_593829, JInt, required = false, default = nil)
  if valid_593829 != nil:
    section.add "Port", valid_593829
  var valid_593830 = formData.getOrDefault("DBInstanceClass")
  valid_593830 = validateParameter(valid_593830, JString, required = false,
                                 default = nil)
  if valid_593830 != nil:
    section.add "DBInstanceClass", valid_593830
  var valid_593831 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_593831 = validateParameter(valid_593831, JBool, required = false, default = nil)
  if valid_593831 != nil:
    section.add "UseDefaultProcessorFeatures", valid_593831
  var valid_593832 = formData.getOrDefault("MultiAZ")
  valid_593832 = validateParameter(valid_593832, JBool, required = false, default = nil)
  if valid_593832 != nil:
    section.add "MultiAZ", valid_593832
  var valid_593833 = formData.getOrDefault("Domain")
  valid_593833 = validateParameter(valid_593833, JString, required = false,
                                 default = nil)
  if valid_593833 != nil:
    section.add "Domain", valid_593833
  var valid_593834 = formData.getOrDefault("MonitoringRoleArn")
  valid_593834 = validateParameter(valid_593834, JString, required = false,
                                 default = nil)
  if valid_593834 != nil:
    section.add "MonitoringRoleArn", valid_593834
  assert formData != nil, "formData argument is necessary due to required `SourceDBInstanceIdentifier` field"
  var valid_593835 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_593835 = validateParameter(valid_593835, JString, required = true,
                                 default = nil)
  if valid_593835 != nil:
    section.add "SourceDBInstanceIdentifier", valid_593835
  var valid_593836 = formData.getOrDefault("DBParameterGroupName")
  valid_593836 = validateParameter(valid_593836, JString, required = false,
                                 default = nil)
  if valid_593836 != nil:
    section.add "DBParameterGroupName", valid_593836
  var valid_593837 = formData.getOrDefault("SourceRegion")
  valid_593837 = validateParameter(valid_593837, JString, required = false,
                                 default = nil)
  if valid_593837 != nil:
    section.add "SourceRegion", valid_593837
  var valid_593838 = formData.getOrDefault("MonitoringInterval")
  valid_593838 = validateParameter(valid_593838, JInt, required = false, default = nil)
  if valid_593838 != nil:
    section.add "MonitoringInterval", valid_593838
  var valid_593839 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_593839 = validateParameter(valid_593839, JArray, required = false,
                                 default = nil)
  if valid_593839 != nil:
    section.add "VpcSecurityGroupIds", valid_593839
  var valid_593840 = formData.getOrDefault("AvailabilityZone")
  valid_593840 = validateParameter(valid_593840, JString, required = false,
                                 default = nil)
  if valid_593840 != nil:
    section.add "AvailabilityZone", valid_593840
  var valid_593841 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_593841 = validateParameter(valid_593841, JBool, required = false, default = nil)
  if valid_593841 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_593841
  var valid_593842 = formData.getOrDefault("KmsKeyId")
  valid_593842 = validateParameter(valid_593842, JString, required = false,
                                 default = nil)
  if valid_593842 != nil:
    section.add "KmsKeyId", valid_593842
  var valid_593843 = formData.getOrDefault("EnablePerformanceInsights")
  valid_593843 = validateParameter(valid_593843, JBool, required = false, default = nil)
  if valid_593843 != nil:
    section.add "EnablePerformanceInsights", valid_593843
  var valid_593844 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_593844 = validateParameter(valid_593844, JBool, required = false, default = nil)
  if valid_593844 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593844
  var valid_593845 = formData.getOrDefault("PreSignedUrl")
  valid_593845 = validateParameter(valid_593845, JString, required = false,
                                 default = nil)
  if valid_593845 != nil:
    section.add "PreSignedUrl", valid_593845
  var valid_593846 = formData.getOrDefault("DBInstanceIdentifier")
  valid_593846 = validateParameter(valid_593846, JString, required = true,
                                 default = nil)
  if valid_593846 != nil:
    section.add "DBInstanceIdentifier", valid_593846
  var valid_593847 = formData.getOrDefault("Iops")
  valid_593847 = validateParameter(valid_593847, JInt, required = false, default = nil)
  if valid_593847 != nil:
    section.add "Iops", valid_593847
  var valid_593848 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_593848 = validateParameter(valid_593848, JArray, required = false,
                                 default = nil)
  if valid_593848 != nil:
    section.add "EnableCloudwatchLogsExports", valid_593848
  var valid_593849 = formData.getOrDefault("PubliclyAccessible")
  valid_593849 = validateParameter(valid_593849, JBool, required = false, default = nil)
  if valid_593849 != nil:
    section.add "PubliclyAccessible", valid_593849
  var valid_593850 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_593850 = validateParameter(valid_593850, JString, required = false,
                                 default = nil)
  if valid_593850 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_593850
  var valid_593851 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_593851 = validateParameter(valid_593851, JInt, required = false, default = nil)
  if valid_593851 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_593851
  var valid_593852 = formData.getOrDefault("Tags")
  valid_593852 = validateParameter(valid_593852, JArray, required = false,
                                 default = nil)
  if valid_593852 != nil:
    section.add "Tags", valid_593852
  var valid_593853 = formData.getOrDefault("DBSubnetGroupName")
  valid_593853 = validateParameter(valid_593853, JString, required = false,
                                 default = nil)
  if valid_593853 != nil:
    section.add "DBSubnetGroupName", valid_593853
  var valid_593854 = formData.getOrDefault("DomainIAMRoleName")
  valid_593854 = validateParameter(valid_593854, JString, required = false,
                                 default = nil)
  if valid_593854 != nil:
    section.add "DomainIAMRoleName", valid_593854
  var valid_593855 = formData.getOrDefault("OptionGroupName")
  valid_593855 = validateParameter(valid_593855, JString, required = false,
                                 default = nil)
  if valid_593855 != nil:
    section.add "OptionGroupName", valid_593855
  var valid_593856 = formData.getOrDefault("StorageType")
  valid_593856 = validateParameter(valid_593856, JString, required = false,
                                 default = nil)
  if valid_593856 != nil:
    section.add "StorageType", valid_593856
  var valid_593857 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_593857 = validateParameter(valid_593857, JBool, required = false, default = nil)
  if valid_593857 != nil:
    section.add "CopyTagsToSnapshot", valid_593857
  var valid_593858 = formData.getOrDefault("DeletionProtection")
  valid_593858 = validateParameter(valid_593858, JBool, required = false, default = nil)
  if valid_593858 != nil:
    section.add "DeletionProtection", valid_593858
  var valid_593859 = formData.getOrDefault("ProcessorFeatures")
  valid_593859 = validateParameter(valid_593859, JArray, required = false,
                                 default = nil)
  if valid_593859 != nil:
    section.add "ProcessorFeatures", valid_593859
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593860: Call_PostCreateDBInstanceReadReplica_593817;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_593860.validator(path, query, header, formData, body)
  let scheme = call_593860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593860.url(scheme.get, call_593860.host, call_593860.base,
                         call_593860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593860, url, valid)

proc call*(call_593861: Call_PostCreateDBInstanceReadReplica_593817;
          SourceDBInstanceIdentifier: string; DBInstanceIdentifier: string;
          Port: int = 0; DBInstanceClass: string = "";
          UseDefaultProcessorFeatures: bool = false; MultiAZ: bool = false;
          Domain: string = ""; MonitoringRoleArn: string = "";
          DBParameterGroupName: string = ""; SourceRegion: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; PreSignedUrl: string = "";
          Iops: int = 0; EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "CreateDBInstanceReadReplica";
          PerformanceInsightsKMSKeyId: string = "";
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_593862 = newJObject()
  var formData_593863 = newJObject()
  add(formData_593863, "Port", newJInt(Port))
  add(formData_593863, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_593863, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_593863, "MultiAZ", newJBool(MultiAZ))
  add(formData_593863, "Domain", newJString(Domain))
  add(formData_593863, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_593863, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_593863, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_593863, "SourceRegion", newJString(SourceRegion))
  add(formData_593863, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_593863.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_593863, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_593863, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_593863, "KmsKeyId", newJString(KmsKeyId))
  add(formData_593863, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_593863, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_593863, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_593863, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_593863, "Iops", newJInt(Iops))
  if EnableCloudwatchLogsExports != nil:
    formData_593863.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_593863, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_593862, "Action", newJString(Action))
  add(formData_593863, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_593863, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    formData_593863.add "Tags", Tags
  add(formData_593863, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_593863, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_593863, "OptionGroupName", newJString(OptionGroupName))
  add(query_593862, "Version", newJString(Version))
  add(formData_593863, "StorageType", newJString(StorageType))
  add(formData_593863, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_593863, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_593863.add "ProcessorFeatures", ProcessorFeatures
  result = call_593861.call(nil, query_593862, nil, formData_593863, nil)

var postCreateDBInstanceReadReplica* = Call_PostCreateDBInstanceReadReplica_593817(
    name: "postCreateDBInstanceReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_PostCreateDBInstanceReadReplica_593818, base: "/",
    url: url_PostCreateDBInstanceReadReplica_593819,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstanceReadReplica_593771 = ref object of OpenApiRestCall_592348
proc url_GetCreateDBInstanceReadReplica_593773(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBInstanceReadReplica_593772(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_593774 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_593774 = validateParameter(valid_593774, JBool, required = false, default = nil)
  if valid_593774 != nil:
    section.add "UseDefaultProcessorFeatures", valid_593774
  var valid_593775 = query.getOrDefault("DeletionProtection")
  valid_593775 = validateParameter(valid_593775, JBool, required = false, default = nil)
  if valid_593775 != nil:
    section.add "DeletionProtection", valid_593775
  var valid_593776 = query.getOrDefault("DBParameterGroupName")
  valid_593776 = validateParameter(valid_593776, JString, required = false,
                                 default = nil)
  if valid_593776 != nil:
    section.add "DBParameterGroupName", valid_593776
  var valid_593777 = query.getOrDefault("CopyTagsToSnapshot")
  valid_593777 = validateParameter(valid_593777, JBool, required = false, default = nil)
  if valid_593777 != nil:
    section.add "CopyTagsToSnapshot", valid_593777
  var valid_593778 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_593778 = validateParameter(valid_593778, JInt, required = false, default = nil)
  if valid_593778 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_593778
  var valid_593779 = query.getOrDefault("Tags")
  valid_593779 = validateParameter(valid_593779, JArray, required = false,
                                 default = nil)
  if valid_593779 != nil:
    section.add "Tags", valid_593779
  var valid_593780 = query.getOrDefault("MonitoringInterval")
  valid_593780 = validateParameter(valid_593780, JInt, required = false, default = nil)
  if valid_593780 != nil:
    section.add "MonitoringInterval", valid_593780
  var valid_593781 = query.getOrDefault("MonitoringRoleArn")
  valid_593781 = validateParameter(valid_593781, JString, required = false,
                                 default = nil)
  if valid_593781 != nil:
    section.add "MonitoringRoleArn", valid_593781
  var valid_593782 = query.getOrDefault("KmsKeyId")
  valid_593782 = validateParameter(valid_593782, JString, required = false,
                                 default = nil)
  if valid_593782 != nil:
    section.add "KmsKeyId", valid_593782
  var valid_593783 = query.getOrDefault("PreSignedUrl")
  valid_593783 = validateParameter(valid_593783, JString, required = false,
                                 default = nil)
  if valid_593783 != nil:
    section.add "PreSignedUrl", valid_593783
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_593784 = query.getOrDefault("DBInstanceIdentifier")
  valid_593784 = validateParameter(valid_593784, JString, required = true,
                                 default = nil)
  if valid_593784 != nil:
    section.add "DBInstanceIdentifier", valid_593784
  var valid_593785 = query.getOrDefault("ProcessorFeatures")
  valid_593785 = validateParameter(valid_593785, JArray, required = false,
                                 default = nil)
  if valid_593785 != nil:
    section.add "ProcessorFeatures", valid_593785
  var valid_593786 = query.getOrDefault("StorageType")
  valid_593786 = validateParameter(valid_593786, JString, required = false,
                                 default = nil)
  if valid_593786 != nil:
    section.add "StorageType", valid_593786
  var valid_593787 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_593787 = validateParameter(valid_593787, JBool, required = false, default = nil)
  if valid_593787 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_593787
  var valid_593788 = query.getOrDefault("SourceRegion")
  valid_593788 = validateParameter(valid_593788, JString, required = false,
                                 default = nil)
  if valid_593788 != nil:
    section.add "SourceRegion", valid_593788
  var valid_593789 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_593789 = validateParameter(valid_593789, JArray, required = false,
                                 default = nil)
  if valid_593789 != nil:
    section.add "EnableCloudwatchLogsExports", valid_593789
  var valid_593790 = query.getOrDefault("Action")
  valid_593790 = validateParameter(valid_593790, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_593790 != nil:
    section.add "Action", valid_593790
  var valid_593791 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_593791 = validateParameter(valid_593791, JString, required = true,
                                 default = nil)
  if valid_593791 != nil:
    section.add "SourceDBInstanceIdentifier", valid_593791
  var valid_593792 = query.getOrDefault("MultiAZ")
  valid_593792 = validateParameter(valid_593792, JBool, required = false, default = nil)
  if valid_593792 != nil:
    section.add "MultiAZ", valid_593792
  var valid_593793 = query.getOrDefault("Port")
  valid_593793 = validateParameter(valid_593793, JInt, required = false, default = nil)
  if valid_593793 != nil:
    section.add "Port", valid_593793
  var valid_593794 = query.getOrDefault("Domain")
  valid_593794 = validateParameter(valid_593794, JString, required = false,
                                 default = nil)
  if valid_593794 != nil:
    section.add "Domain", valid_593794
  var valid_593795 = query.getOrDefault("VpcSecurityGroupIds")
  valid_593795 = validateParameter(valid_593795, JArray, required = false,
                                 default = nil)
  if valid_593795 != nil:
    section.add "VpcSecurityGroupIds", valid_593795
  var valid_593796 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_593796 = validateParameter(valid_593796, JString, required = false,
                                 default = nil)
  if valid_593796 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_593796
  var valid_593797 = query.getOrDefault("AvailabilityZone")
  valid_593797 = validateParameter(valid_593797, JString, required = false,
                                 default = nil)
  if valid_593797 != nil:
    section.add "AvailabilityZone", valid_593797
  var valid_593798 = query.getOrDefault("OptionGroupName")
  valid_593798 = validateParameter(valid_593798, JString, required = false,
                                 default = nil)
  if valid_593798 != nil:
    section.add "OptionGroupName", valid_593798
  var valid_593799 = query.getOrDefault("DBSubnetGroupName")
  valid_593799 = validateParameter(valid_593799, JString, required = false,
                                 default = nil)
  if valid_593799 != nil:
    section.add "DBSubnetGroupName", valid_593799
  var valid_593800 = query.getOrDefault("Version")
  valid_593800 = validateParameter(valid_593800, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593800 != nil:
    section.add "Version", valid_593800
  var valid_593801 = query.getOrDefault("DBInstanceClass")
  valid_593801 = validateParameter(valid_593801, JString, required = false,
                                 default = nil)
  if valid_593801 != nil:
    section.add "DBInstanceClass", valid_593801
  var valid_593802 = query.getOrDefault("PubliclyAccessible")
  valid_593802 = validateParameter(valid_593802, JBool, required = false, default = nil)
  if valid_593802 != nil:
    section.add "PubliclyAccessible", valid_593802
  var valid_593803 = query.getOrDefault("EnablePerformanceInsights")
  valid_593803 = validateParameter(valid_593803, JBool, required = false, default = nil)
  if valid_593803 != nil:
    section.add "EnablePerformanceInsights", valid_593803
  var valid_593804 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_593804 = validateParameter(valid_593804, JBool, required = false, default = nil)
  if valid_593804 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593804
  var valid_593805 = query.getOrDefault("Iops")
  valid_593805 = validateParameter(valid_593805, JInt, required = false, default = nil)
  if valid_593805 != nil:
    section.add "Iops", valid_593805
  var valid_593806 = query.getOrDefault("DomainIAMRoleName")
  valid_593806 = validateParameter(valid_593806, JString, required = false,
                                 default = nil)
  if valid_593806 != nil:
    section.add "DomainIAMRoleName", valid_593806
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593807 = header.getOrDefault("X-Amz-Signature")
  valid_593807 = validateParameter(valid_593807, JString, required = false,
                                 default = nil)
  if valid_593807 != nil:
    section.add "X-Amz-Signature", valid_593807
  var valid_593808 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593808 = validateParameter(valid_593808, JString, required = false,
                                 default = nil)
  if valid_593808 != nil:
    section.add "X-Amz-Content-Sha256", valid_593808
  var valid_593809 = header.getOrDefault("X-Amz-Date")
  valid_593809 = validateParameter(valid_593809, JString, required = false,
                                 default = nil)
  if valid_593809 != nil:
    section.add "X-Amz-Date", valid_593809
  var valid_593810 = header.getOrDefault("X-Amz-Credential")
  valid_593810 = validateParameter(valid_593810, JString, required = false,
                                 default = nil)
  if valid_593810 != nil:
    section.add "X-Amz-Credential", valid_593810
  var valid_593811 = header.getOrDefault("X-Amz-Security-Token")
  valid_593811 = validateParameter(valid_593811, JString, required = false,
                                 default = nil)
  if valid_593811 != nil:
    section.add "X-Amz-Security-Token", valid_593811
  var valid_593812 = header.getOrDefault("X-Amz-Algorithm")
  valid_593812 = validateParameter(valid_593812, JString, required = false,
                                 default = nil)
  if valid_593812 != nil:
    section.add "X-Amz-Algorithm", valid_593812
  var valid_593813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593813 = validateParameter(valid_593813, JString, required = false,
                                 default = nil)
  if valid_593813 != nil:
    section.add "X-Amz-SignedHeaders", valid_593813
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593814: Call_GetCreateDBInstanceReadReplica_593771; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_593814.validator(path, query, header, formData, body)
  let scheme = call_593814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593814.url(scheme.get, call_593814.host, call_593814.base,
                         call_593814.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593814, url, valid)

proc call*(call_593815: Call_GetCreateDBInstanceReadReplica_593771;
          DBInstanceIdentifier: string; SourceDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false;
          DeletionProtection: bool = false; DBParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          MonitoringInterval: int = 0; MonitoringRoleArn: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; SourceRegion: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstanceReadReplica"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          PerformanceInsightsKMSKeyId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_593816 = newJObject()
  add(query_593816, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_593816, "DeletionProtection", newJBool(DeletionProtection))
  add(query_593816, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_593816, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_593816, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    query_593816.add "Tags", Tags
  add(query_593816, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_593816, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_593816, "KmsKeyId", newJString(KmsKeyId))
  add(query_593816, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_593816, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if ProcessorFeatures != nil:
    query_593816.add "ProcessorFeatures", ProcessorFeatures
  add(query_593816, "StorageType", newJString(StorageType))
  add(query_593816, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_593816, "SourceRegion", newJString(SourceRegion))
  if EnableCloudwatchLogsExports != nil:
    query_593816.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_593816, "Action", newJString(Action))
  add(query_593816, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_593816, "MultiAZ", newJBool(MultiAZ))
  add(query_593816, "Port", newJInt(Port))
  add(query_593816, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_593816.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_593816, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_593816, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_593816, "OptionGroupName", newJString(OptionGroupName))
  add(query_593816, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_593816, "Version", newJString(Version))
  add(query_593816, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_593816, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_593816, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_593816, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_593816, "Iops", newJInt(Iops))
  add(query_593816, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_593815.call(nil, query_593816, nil, nil, nil)

var getCreateDBInstanceReadReplica* = Call_GetCreateDBInstanceReadReplica_593771(
    name: "getCreateDBInstanceReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_GetCreateDBInstanceReadReplica_593772, base: "/",
    url: url_GetCreateDBInstanceReadReplica_593773,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_593883 = ref object of OpenApiRestCall_592348
proc url_PostCreateDBParameterGroup_593885(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBParameterGroup_593884(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593886 = query.getOrDefault("Action")
  valid_593886 = validateParameter(valid_593886, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_593886 != nil:
    section.add "Action", valid_593886
  var valid_593887 = query.getOrDefault("Version")
  valid_593887 = validateParameter(valid_593887, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593887 != nil:
    section.add "Version", valid_593887
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593888 = header.getOrDefault("X-Amz-Signature")
  valid_593888 = validateParameter(valid_593888, JString, required = false,
                                 default = nil)
  if valid_593888 != nil:
    section.add "X-Amz-Signature", valid_593888
  var valid_593889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593889 = validateParameter(valid_593889, JString, required = false,
                                 default = nil)
  if valid_593889 != nil:
    section.add "X-Amz-Content-Sha256", valid_593889
  var valid_593890 = header.getOrDefault("X-Amz-Date")
  valid_593890 = validateParameter(valid_593890, JString, required = false,
                                 default = nil)
  if valid_593890 != nil:
    section.add "X-Amz-Date", valid_593890
  var valid_593891 = header.getOrDefault("X-Amz-Credential")
  valid_593891 = validateParameter(valid_593891, JString, required = false,
                                 default = nil)
  if valid_593891 != nil:
    section.add "X-Amz-Credential", valid_593891
  var valid_593892 = header.getOrDefault("X-Amz-Security-Token")
  valid_593892 = validateParameter(valid_593892, JString, required = false,
                                 default = nil)
  if valid_593892 != nil:
    section.add "X-Amz-Security-Token", valid_593892
  var valid_593893 = header.getOrDefault("X-Amz-Algorithm")
  valid_593893 = validateParameter(valid_593893, JString, required = false,
                                 default = nil)
  if valid_593893 != nil:
    section.add "X-Amz-Algorithm", valid_593893
  var valid_593894 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593894 = validateParameter(valid_593894, JString, required = false,
                                 default = nil)
  if valid_593894 != nil:
    section.add "X-Amz-SignedHeaders", valid_593894
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_593895 = formData.getOrDefault("Description")
  valid_593895 = validateParameter(valid_593895, JString, required = true,
                                 default = nil)
  if valid_593895 != nil:
    section.add "Description", valid_593895
  var valid_593896 = formData.getOrDefault("DBParameterGroupName")
  valid_593896 = validateParameter(valid_593896, JString, required = true,
                                 default = nil)
  if valid_593896 != nil:
    section.add "DBParameterGroupName", valid_593896
  var valid_593897 = formData.getOrDefault("Tags")
  valid_593897 = validateParameter(valid_593897, JArray, required = false,
                                 default = nil)
  if valid_593897 != nil:
    section.add "Tags", valid_593897
  var valid_593898 = formData.getOrDefault("DBParameterGroupFamily")
  valid_593898 = validateParameter(valid_593898, JString, required = true,
                                 default = nil)
  if valid_593898 != nil:
    section.add "DBParameterGroupFamily", valid_593898
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593899: Call_PostCreateDBParameterGroup_593883; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_593899.validator(path, query, header, formData, body)
  let scheme = call_593899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593899.url(scheme.get, call_593899.host, call_593899.base,
                         call_593899.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593899, url, valid)

proc call*(call_593900: Call_PostCreateDBParameterGroup_593883;
          Description: string; DBParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  var query_593901 = newJObject()
  var formData_593902 = newJObject()
  add(formData_593902, "Description", newJString(Description))
  add(formData_593902, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_593901, "Action", newJString(Action))
  if Tags != nil:
    formData_593902.add "Tags", Tags
  add(query_593901, "Version", newJString(Version))
  add(formData_593902, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_593900.call(nil, query_593901, nil, formData_593902, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_593883(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_593884, base: "/",
    url: url_PostCreateDBParameterGroup_593885,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_593864 = ref object of OpenApiRestCall_592348
proc url_GetCreateDBParameterGroup_593866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBParameterGroup_593865(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_593867 = query.getOrDefault("DBParameterGroupFamily")
  valid_593867 = validateParameter(valid_593867, JString, required = true,
                                 default = nil)
  if valid_593867 != nil:
    section.add "DBParameterGroupFamily", valid_593867
  var valid_593868 = query.getOrDefault("DBParameterGroupName")
  valid_593868 = validateParameter(valid_593868, JString, required = true,
                                 default = nil)
  if valid_593868 != nil:
    section.add "DBParameterGroupName", valid_593868
  var valid_593869 = query.getOrDefault("Tags")
  valid_593869 = validateParameter(valid_593869, JArray, required = false,
                                 default = nil)
  if valid_593869 != nil:
    section.add "Tags", valid_593869
  var valid_593870 = query.getOrDefault("Action")
  valid_593870 = validateParameter(valid_593870, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_593870 != nil:
    section.add "Action", valid_593870
  var valid_593871 = query.getOrDefault("Description")
  valid_593871 = validateParameter(valid_593871, JString, required = true,
                                 default = nil)
  if valid_593871 != nil:
    section.add "Description", valid_593871
  var valid_593872 = query.getOrDefault("Version")
  valid_593872 = validateParameter(valid_593872, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593872 != nil:
    section.add "Version", valid_593872
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593873 = header.getOrDefault("X-Amz-Signature")
  valid_593873 = validateParameter(valid_593873, JString, required = false,
                                 default = nil)
  if valid_593873 != nil:
    section.add "X-Amz-Signature", valid_593873
  var valid_593874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593874 = validateParameter(valid_593874, JString, required = false,
                                 default = nil)
  if valid_593874 != nil:
    section.add "X-Amz-Content-Sha256", valid_593874
  var valid_593875 = header.getOrDefault("X-Amz-Date")
  valid_593875 = validateParameter(valid_593875, JString, required = false,
                                 default = nil)
  if valid_593875 != nil:
    section.add "X-Amz-Date", valid_593875
  var valid_593876 = header.getOrDefault("X-Amz-Credential")
  valid_593876 = validateParameter(valid_593876, JString, required = false,
                                 default = nil)
  if valid_593876 != nil:
    section.add "X-Amz-Credential", valid_593876
  var valid_593877 = header.getOrDefault("X-Amz-Security-Token")
  valid_593877 = validateParameter(valid_593877, JString, required = false,
                                 default = nil)
  if valid_593877 != nil:
    section.add "X-Amz-Security-Token", valid_593877
  var valid_593878 = header.getOrDefault("X-Amz-Algorithm")
  valid_593878 = validateParameter(valid_593878, JString, required = false,
                                 default = nil)
  if valid_593878 != nil:
    section.add "X-Amz-Algorithm", valid_593878
  var valid_593879 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593879 = validateParameter(valid_593879, JString, required = false,
                                 default = nil)
  if valid_593879 != nil:
    section.add "X-Amz-SignedHeaders", valid_593879
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593880: Call_GetCreateDBParameterGroup_593864; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_593880.validator(path, query, header, formData, body)
  let scheme = call_593880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593880.url(scheme.get, call_593880.host, call_593880.base,
                         call_593880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593880, url, valid)

proc call*(call_593881: Call_GetCreateDBParameterGroup_593864;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   Version: string (required)
  var query_593882 = newJObject()
  add(query_593882, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_593882, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_593882.add "Tags", Tags
  add(query_593882, "Action", newJString(Action))
  add(query_593882, "Description", newJString(Description))
  add(query_593882, "Version", newJString(Version))
  result = call_593881.call(nil, query_593882, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_593864(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_593865, base: "/",
    url: url_GetCreateDBParameterGroup_593866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSecurityGroup_593921 = ref object of OpenApiRestCall_592348
proc url_PostCreateDBSecurityGroup_593923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBSecurityGroup_593922(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593924 = query.getOrDefault("Action")
  valid_593924 = validateParameter(valid_593924, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_593924 != nil:
    section.add "Action", valid_593924
  var valid_593925 = query.getOrDefault("Version")
  valid_593925 = validateParameter(valid_593925, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593925 != nil:
    section.add "Version", valid_593925
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593926 = header.getOrDefault("X-Amz-Signature")
  valid_593926 = validateParameter(valid_593926, JString, required = false,
                                 default = nil)
  if valid_593926 != nil:
    section.add "X-Amz-Signature", valid_593926
  var valid_593927 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593927 = validateParameter(valid_593927, JString, required = false,
                                 default = nil)
  if valid_593927 != nil:
    section.add "X-Amz-Content-Sha256", valid_593927
  var valid_593928 = header.getOrDefault("X-Amz-Date")
  valid_593928 = validateParameter(valid_593928, JString, required = false,
                                 default = nil)
  if valid_593928 != nil:
    section.add "X-Amz-Date", valid_593928
  var valid_593929 = header.getOrDefault("X-Amz-Credential")
  valid_593929 = validateParameter(valid_593929, JString, required = false,
                                 default = nil)
  if valid_593929 != nil:
    section.add "X-Amz-Credential", valid_593929
  var valid_593930 = header.getOrDefault("X-Amz-Security-Token")
  valid_593930 = validateParameter(valid_593930, JString, required = false,
                                 default = nil)
  if valid_593930 != nil:
    section.add "X-Amz-Security-Token", valid_593930
  var valid_593931 = header.getOrDefault("X-Amz-Algorithm")
  valid_593931 = validateParameter(valid_593931, JString, required = false,
                                 default = nil)
  if valid_593931 != nil:
    section.add "X-Amz-Algorithm", valid_593931
  var valid_593932 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593932 = validateParameter(valid_593932, JString, required = false,
                                 default = nil)
  if valid_593932 != nil:
    section.add "X-Amz-SignedHeaders", valid_593932
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupDescription` field"
  var valid_593933 = formData.getOrDefault("DBSecurityGroupDescription")
  valid_593933 = validateParameter(valid_593933, JString, required = true,
                                 default = nil)
  if valid_593933 != nil:
    section.add "DBSecurityGroupDescription", valid_593933
  var valid_593934 = formData.getOrDefault("DBSecurityGroupName")
  valid_593934 = validateParameter(valid_593934, JString, required = true,
                                 default = nil)
  if valid_593934 != nil:
    section.add "DBSecurityGroupName", valid_593934
  var valid_593935 = formData.getOrDefault("Tags")
  valid_593935 = validateParameter(valid_593935, JArray, required = false,
                                 default = nil)
  if valid_593935 != nil:
    section.add "Tags", valid_593935
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593936: Call_PostCreateDBSecurityGroup_593921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_593936.validator(path, query, header, formData, body)
  let scheme = call_593936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593936.url(scheme.get, call_593936.host, call_593936.base,
                         call_593936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593936, url, valid)

proc call*(call_593937: Call_PostCreateDBSecurityGroup_593921;
          DBSecurityGroupDescription: string; DBSecurityGroupName: string;
          Action: string = "CreateDBSecurityGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_593938 = newJObject()
  var formData_593939 = newJObject()
  add(formData_593939, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(formData_593939, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_593938, "Action", newJString(Action))
  if Tags != nil:
    formData_593939.add "Tags", Tags
  add(query_593938, "Version", newJString(Version))
  result = call_593937.call(nil, query_593938, nil, formData_593939, nil)

var postCreateDBSecurityGroup* = Call_PostCreateDBSecurityGroup_593921(
    name: "postCreateDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_PostCreateDBSecurityGroup_593922, base: "/",
    url: url_PostCreateDBSecurityGroup_593923,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSecurityGroup_593903 = ref object of OpenApiRestCall_592348
proc url_GetCreateDBSecurityGroup_593905(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBSecurityGroup_593904(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_593906 = query.getOrDefault("DBSecurityGroupName")
  valid_593906 = validateParameter(valid_593906, JString, required = true,
                                 default = nil)
  if valid_593906 != nil:
    section.add "DBSecurityGroupName", valid_593906
  var valid_593907 = query.getOrDefault("Tags")
  valid_593907 = validateParameter(valid_593907, JArray, required = false,
                                 default = nil)
  if valid_593907 != nil:
    section.add "Tags", valid_593907
  var valid_593908 = query.getOrDefault("DBSecurityGroupDescription")
  valid_593908 = validateParameter(valid_593908, JString, required = true,
                                 default = nil)
  if valid_593908 != nil:
    section.add "DBSecurityGroupDescription", valid_593908
  var valid_593909 = query.getOrDefault("Action")
  valid_593909 = validateParameter(valid_593909, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_593909 != nil:
    section.add "Action", valid_593909
  var valid_593910 = query.getOrDefault("Version")
  valid_593910 = validateParameter(valid_593910, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593910 != nil:
    section.add "Version", valid_593910
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593911 = header.getOrDefault("X-Amz-Signature")
  valid_593911 = validateParameter(valid_593911, JString, required = false,
                                 default = nil)
  if valid_593911 != nil:
    section.add "X-Amz-Signature", valid_593911
  var valid_593912 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593912 = validateParameter(valid_593912, JString, required = false,
                                 default = nil)
  if valid_593912 != nil:
    section.add "X-Amz-Content-Sha256", valid_593912
  var valid_593913 = header.getOrDefault("X-Amz-Date")
  valid_593913 = validateParameter(valid_593913, JString, required = false,
                                 default = nil)
  if valid_593913 != nil:
    section.add "X-Amz-Date", valid_593913
  var valid_593914 = header.getOrDefault("X-Amz-Credential")
  valid_593914 = validateParameter(valid_593914, JString, required = false,
                                 default = nil)
  if valid_593914 != nil:
    section.add "X-Amz-Credential", valid_593914
  var valid_593915 = header.getOrDefault("X-Amz-Security-Token")
  valid_593915 = validateParameter(valid_593915, JString, required = false,
                                 default = nil)
  if valid_593915 != nil:
    section.add "X-Amz-Security-Token", valid_593915
  var valid_593916 = header.getOrDefault("X-Amz-Algorithm")
  valid_593916 = validateParameter(valid_593916, JString, required = false,
                                 default = nil)
  if valid_593916 != nil:
    section.add "X-Amz-Algorithm", valid_593916
  var valid_593917 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593917 = validateParameter(valid_593917, JString, required = false,
                                 default = nil)
  if valid_593917 != nil:
    section.add "X-Amz-SignedHeaders", valid_593917
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593918: Call_GetCreateDBSecurityGroup_593903; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_593918.validator(path, query, header, formData, body)
  let scheme = call_593918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593918.url(scheme.get, call_593918.host, call_593918.base,
                         call_593918.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593918, url, valid)

proc call*(call_593919: Call_GetCreateDBSecurityGroup_593903;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593920 = newJObject()
  add(query_593920, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Tags != nil:
    query_593920.add "Tags", Tags
  add(query_593920, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(query_593920, "Action", newJString(Action))
  add(query_593920, "Version", newJString(Version))
  result = call_593919.call(nil, query_593920, nil, nil, nil)

var getCreateDBSecurityGroup* = Call_GetCreateDBSecurityGroup_593903(
    name: "getCreateDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_GetCreateDBSecurityGroup_593904, base: "/",
    url: url_GetCreateDBSecurityGroup_593905, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSnapshot_593958 = ref object of OpenApiRestCall_592348
proc url_PostCreateDBSnapshot_593960(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBSnapshot_593959(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593961 = query.getOrDefault("Action")
  valid_593961 = validateParameter(valid_593961, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_593961 != nil:
    section.add "Action", valid_593961
  var valid_593962 = query.getOrDefault("Version")
  valid_593962 = validateParameter(valid_593962, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593962 != nil:
    section.add "Version", valid_593962
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593963 = header.getOrDefault("X-Amz-Signature")
  valid_593963 = validateParameter(valid_593963, JString, required = false,
                                 default = nil)
  if valid_593963 != nil:
    section.add "X-Amz-Signature", valid_593963
  var valid_593964 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593964 = validateParameter(valid_593964, JString, required = false,
                                 default = nil)
  if valid_593964 != nil:
    section.add "X-Amz-Content-Sha256", valid_593964
  var valid_593965 = header.getOrDefault("X-Amz-Date")
  valid_593965 = validateParameter(valid_593965, JString, required = false,
                                 default = nil)
  if valid_593965 != nil:
    section.add "X-Amz-Date", valid_593965
  var valid_593966 = header.getOrDefault("X-Amz-Credential")
  valid_593966 = validateParameter(valid_593966, JString, required = false,
                                 default = nil)
  if valid_593966 != nil:
    section.add "X-Amz-Credential", valid_593966
  var valid_593967 = header.getOrDefault("X-Amz-Security-Token")
  valid_593967 = validateParameter(valid_593967, JString, required = false,
                                 default = nil)
  if valid_593967 != nil:
    section.add "X-Amz-Security-Token", valid_593967
  var valid_593968 = header.getOrDefault("X-Amz-Algorithm")
  valid_593968 = validateParameter(valid_593968, JString, required = false,
                                 default = nil)
  if valid_593968 != nil:
    section.add "X-Amz-Algorithm", valid_593968
  var valid_593969 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593969 = validateParameter(valid_593969, JString, required = false,
                                 default = nil)
  if valid_593969 != nil:
    section.add "X-Amz-SignedHeaders", valid_593969
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_593970 = formData.getOrDefault("DBInstanceIdentifier")
  valid_593970 = validateParameter(valid_593970, JString, required = true,
                                 default = nil)
  if valid_593970 != nil:
    section.add "DBInstanceIdentifier", valid_593970
  var valid_593971 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_593971 = validateParameter(valid_593971, JString, required = true,
                                 default = nil)
  if valid_593971 != nil:
    section.add "DBSnapshotIdentifier", valid_593971
  var valid_593972 = formData.getOrDefault("Tags")
  valid_593972 = validateParameter(valid_593972, JArray, required = false,
                                 default = nil)
  if valid_593972 != nil:
    section.add "Tags", valid_593972
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593973: Call_PostCreateDBSnapshot_593958; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_593973.validator(path, query, header, formData, body)
  let scheme = call_593973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593973.url(scheme.get, call_593973.host, call_593973.base,
                         call_593973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593973, url, valid)

proc call*(call_593974: Call_PostCreateDBSnapshot_593958;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Action: string = "CreateDBSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_593975 = newJObject()
  var formData_593976 = newJObject()
  add(formData_593976, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_593976, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_593975, "Action", newJString(Action))
  if Tags != nil:
    formData_593976.add "Tags", Tags
  add(query_593975, "Version", newJString(Version))
  result = call_593974.call(nil, query_593975, nil, formData_593976, nil)

var postCreateDBSnapshot* = Call_PostCreateDBSnapshot_593958(
    name: "postCreateDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_PostCreateDBSnapshot_593959, base: "/",
    url: url_PostCreateDBSnapshot_593960, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSnapshot_593940 = ref object of OpenApiRestCall_592348
proc url_GetCreateDBSnapshot_593942(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBSnapshot_593941(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_593943 = query.getOrDefault("Tags")
  valid_593943 = validateParameter(valid_593943, JArray, required = false,
                                 default = nil)
  if valid_593943 != nil:
    section.add "Tags", valid_593943
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_593944 = query.getOrDefault("DBInstanceIdentifier")
  valid_593944 = validateParameter(valid_593944, JString, required = true,
                                 default = nil)
  if valid_593944 != nil:
    section.add "DBInstanceIdentifier", valid_593944
  var valid_593945 = query.getOrDefault("DBSnapshotIdentifier")
  valid_593945 = validateParameter(valid_593945, JString, required = true,
                                 default = nil)
  if valid_593945 != nil:
    section.add "DBSnapshotIdentifier", valid_593945
  var valid_593946 = query.getOrDefault("Action")
  valid_593946 = validateParameter(valid_593946, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_593946 != nil:
    section.add "Action", valid_593946
  var valid_593947 = query.getOrDefault("Version")
  valid_593947 = validateParameter(valid_593947, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593947 != nil:
    section.add "Version", valid_593947
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593948 = header.getOrDefault("X-Amz-Signature")
  valid_593948 = validateParameter(valid_593948, JString, required = false,
                                 default = nil)
  if valid_593948 != nil:
    section.add "X-Amz-Signature", valid_593948
  var valid_593949 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593949 = validateParameter(valid_593949, JString, required = false,
                                 default = nil)
  if valid_593949 != nil:
    section.add "X-Amz-Content-Sha256", valid_593949
  var valid_593950 = header.getOrDefault("X-Amz-Date")
  valid_593950 = validateParameter(valid_593950, JString, required = false,
                                 default = nil)
  if valid_593950 != nil:
    section.add "X-Amz-Date", valid_593950
  var valid_593951 = header.getOrDefault("X-Amz-Credential")
  valid_593951 = validateParameter(valid_593951, JString, required = false,
                                 default = nil)
  if valid_593951 != nil:
    section.add "X-Amz-Credential", valid_593951
  var valid_593952 = header.getOrDefault("X-Amz-Security-Token")
  valid_593952 = validateParameter(valid_593952, JString, required = false,
                                 default = nil)
  if valid_593952 != nil:
    section.add "X-Amz-Security-Token", valid_593952
  var valid_593953 = header.getOrDefault("X-Amz-Algorithm")
  valid_593953 = validateParameter(valid_593953, JString, required = false,
                                 default = nil)
  if valid_593953 != nil:
    section.add "X-Amz-Algorithm", valid_593953
  var valid_593954 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593954 = validateParameter(valid_593954, JString, required = false,
                                 default = nil)
  if valid_593954 != nil:
    section.add "X-Amz-SignedHeaders", valid_593954
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593955: Call_GetCreateDBSnapshot_593940; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_593955.validator(path, query, header, formData, body)
  let scheme = call_593955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593955.url(scheme.get, call_593955.host, call_593955.base,
                         call_593955.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593955, url, valid)

proc call*(call_593956: Call_GetCreateDBSnapshot_593940;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593957 = newJObject()
  if Tags != nil:
    query_593957.add "Tags", Tags
  add(query_593957, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_593957, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_593957, "Action", newJString(Action))
  add(query_593957, "Version", newJString(Version))
  result = call_593956.call(nil, query_593957, nil, nil, nil)

var getCreateDBSnapshot* = Call_GetCreateDBSnapshot_593940(
    name: "getCreateDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_GetCreateDBSnapshot_593941, base: "/",
    url: url_GetCreateDBSnapshot_593942, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_593996 = ref object of OpenApiRestCall_592348
proc url_PostCreateDBSubnetGroup_593998(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBSubnetGroup_593997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593999 = query.getOrDefault("Action")
  valid_593999 = validateParameter(valid_593999, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_593999 != nil:
    section.add "Action", valid_593999
  var valid_594000 = query.getOrDefault("Version")
  valid_594000 = validateParameter(valid_594000, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594000 != nil:
    section.add "Version", valid_594000
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594001 = header.getOrDefault("X-Amz-Signature")
  valid_594001 = validateParameter(valid_594001, JString, required = false,
                                 default = nil)
  if valid_594001 != nil:
    section.add "X-Amz-Signature", valid_594001
  var valid_594002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594002 = validateParameter(valid_594002, JString, required = false,
                                 default = nil)
  if valid_594002 != nil:
    section.add "X-Amz-Content-Sha256", valid_594002
  var valid_594003 = header.getOrDefault("X-Amz-Date")
  valid_594003 = validateParameter(valid_594003, JString, required = false,
                                 default = nil)
  if valid_594003 != nil:
    section.add "X-Amz-Date", valid_594003
  var valid_594004 = header.getOrDefault("X-Amz-Credential")
  valid_594004 = validateParameter(valid_594004, JString, required = false,
                                 default = nil)
  if valid_594004 != nil:
    section.add "X-Amz-Credential", valid_594004
  var valid_594005 = header.getOrDefault("X-Amz-Security-Token")
  valid_594005 = validateParameter(valid_594005, JString, required = false,
                                 default = nil)
  if valid_594005 != nil:
    section.add "X-Amz-Security-Token", valid_594005
  var valid_594006 = header.getOrDefault("X-Amz-Algorithm")
  valid_594006 = validateParameter(valid_594006, JString, required = false,
                                 default = nil)
  if valid_594006 != nil:
    section.add "X-Amz-Algorithm", valid_594006
  var valid_594007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594007 = validateParameter(valid_594007, JString, required = false,
                                 default = nil)
  if valid_594007 != nil:
    section.add "X-Amz-SignedHeaders", valid_594007
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupDescription` field"
  var valid_594008 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_594008 = validateParameter(valid_594008, JString, required = true,
                                 default = nil)
  if valid_594008 != nil:
    section.add "DBSubnetGroupDescription", valid_594008
  var valid_594009 = formData.getOrDefault("Tags")
  valid_594009 = validateParameter(valid_594009, JArray, required = false,
                                 default = nil)
  if valid_594009 != nil:
    section.add "Tags", valid_594009
  var valid_594010 = formData.getOrDefault("DBSubnetGroupName")
  valid_594010 = validateParameter(valid_594010, JString, required = true,
                                 default = nil)
  if valid_594010 != nil:
    section.add "DBSubnetGroupName", valid_594010
  var valid_594011 = formData.getOrDefault("SubnetIds")
  valid_594011 = validateParameter(valid_594011, JArray, required = true, default = nil)
  if valid_594011 != nil:
    section.add "SubnetIds", valid_594011
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594012: Call_PostCreateDBSubnetGroup_593996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_594012.validator(path, query, header, formData, body)
  let scheme = call_594012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594012.url(scheme.get, call_594012.host, call_594012.base,
                         call_594012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594012, url, valid)

proc call*(call_594013: Call_PostCreateDBSubnetGroup_593996;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateDBSubnetGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  var query_594014 = newJObject()
  var formData_594015 = newJObject()
  add(formData_594015, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_594014, "Action", newJString(Action))
  if Tags != nil:
    formData_594015.add "Tags", Tags
  add(formData_594015, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_594014, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_594015.add "SubnetIds", SubnetIds
  result = call_594013.call(nil, query_594014, nil, formData_594015, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_593996(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_593997, base: "/",
    url: url_PostCreateDBSubnetGroup_593998, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_593977 = ref object of OpenApiRestCall_592348
proc url_GetCreateDBSubnetGroup_593979(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBSubnetGroup_593978(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_593980 = query.getOrDefault("Tags")
  valid_593980 = validateParameter(valid_593980, JArray, required = false,
                                 default = nil)
  if valid_593980 != nil:
    section.add "Tags", valid_593980
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_593981 = query.getOrDefault("SubnetIds")
  valid_593981 = validateParameter(valid_593981, JArray, required = true, default = nil)
  if valid_593981 != nil:
    section.add "SubnetIds", valid_593981
  var valid_593982 = query.getOrDefault("Action")
  valid_593982 = validateParameter(valid_593982, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_593982 != nil:
    section.add "Action", valid_593982
  var valid_593983 = query.getOrDefault("DBSubnetGroupDescription")
  valid_593983 = validateParameter(valid_593983, JString, required = true,
                                 default = nil)
  if valid_593983 != nil:
    section.add "DBSubnetGroupDescription", valid_593983
  var valid_593984 = query.getOrDefault("DBSubnetGroupName")
  valid_593984 = validateParameter(valid_593984, JString, required = true,
                                 default = nil)
  if valid_593984 != nil:
    section.add "DBSubnetGroupName", valid_593984
  var valid_593985 = query.getOrDefault("Version")
  valid_593985 = validateParameter(valid_593985, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593985 != nil:
    section.add "Version", valid_593985
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593986 = header.getOrDefault("X-Amz-Signature")
  valid_593986 = validateParameter(valid_593986, JString, required = false,
                                 default = nil)
  if valid_593986 != nil:
    section.add "X-Amz-Signature", valid_593986
  var valid_593987 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593987 = validateParameter(valid_593987, JString, required = false,
                                 default = nil)
  if valid_593987 != nil:
    section.add "X-Amz-Content-Sha256", valid_593987
  var valid_593988 = header.getOrDefault("X-Amz-Date")
  valid_593988 = validateParameter(valid_593988, JString, required = false,
                                 default = nil)
  if valid_593988 != nil:
    section.add "X-Amz-Date", valid_593988
  var valid_593989 = header.getOrDefault("X-Amz-Credential")
  valid_593989 = validateParameter(valid_593989, JString, required = false,
                                 default = nil)
  if valid_593989 != nil:
    section.add "X-Amz-Credential", valid_593989
  var valid_593990 = header.getOrDefault("X-Amz-Security-Token")
  valid_593990 = validateParameter(valid_593990, JString, required = false,
                                 default = nil)
  if valid_593990 != nil:
    section.add "X-Amz-Security-Token", valid_593990
  var valid_593991 = header.getOrDefault("X-Amz-Algorithm")
  valid_593991 = validateParameter(valid_593991, JString, required = false,
                                 default = nil)
  if valid_593991 != nil:
    section.add "X-Amz-Algorithm", valid_593991
  var valid_593992 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593992 = validateParameter(valid_593992, JString, required = false,
                                 default = nil)
  if valid_593992 != nil:
    section.add "X-Amz-SignedHeaders", valid_593992
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593993: Call_GetCreateDBSubnetGroup_593977; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_593993.validator(path, query, header, formData, body)
  let scheme = call_593993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593993.url(scheme.get, call_593993.host, call_593993.base,
                         call_593993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593993, url, valid)

proc call*(call_593994: Call_GetCreateDBSubnetGroup_593977; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_593995 = newJObject()
  if Tags != nil:
    query_593995.add "Tags", Tags
  if SubnetIds != nil:
    query_593995.add "SubnetIds", SubnetIds
  add(query_593995, "Action", newJString(Action))
  add(query_593995, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_593995, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_593995, "Version", newJString(Version))
  result = call_593994.call(nil, query_593995, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_593977(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_593978, base: "/",
    url: url_GetCreateDBSubnetGroup_593979, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_594038 = ref object of OpenApiRestCall_592348
proc url_PostCreateEventSubscription_594040(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateEventSubscription_594039(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594041 = query.getOrDefault("Action")
  valid_594041 = validateParameter(valid_594041, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_594041 != nil:
    section.add "Action", valid_594041
  var valid_594042 = query.getOrDefault("Version")
  valid_594042 = validateParameter(valid_594042, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594042 != nil:
    section.add "Version", valid_594042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594043 = header.getOrDefault("X-Amz-Signature")
  valid_594043 = validateParameter(valid_594043, JString, required = false,
                                 default = nil)
  if valid_594043 != nil:
    section.add "X-Amz-Signature", valid_594043
  var valid_594044 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594044 = validateParameter(valid_594044, JString, required = false,
                                 default = nil)
  if valid_594044 != nil:
    section.add "X-Amz-Content-Sha256", valid_594044
  var valid_594045 = header.getOrDefault("X-Amz-Date")
  valid_594045 = validateParameter(valid_594045, JString, required = false,
                                 default = nil)
  if valid_594045 != nil:
    section.add "X-Amz-Date", valid_594045
  var valid_594046 = header.getOrDefault("X-Amz-Credential")
  valid_594046 = validateParameter(valid_594046, JString, required = false,
                                 default = nil)
  if valid_594046 != nil:
    section.add "X-Amz-Credential", valid_594046
  var valid_594047 = header.getOrDefault("X-Amz-Security-Token")
  valid_594047 = validateParameter(valid_594047, JString, required = false,
                                 default = nil)
  if valid_594047 != nil:
    section.add "X-Amz-Security-Token", valid_594047
  var valid_594048 = header.getOrDefault("X-Amz-Algorithm")
  valid_594048 = validateParameter(valid_594048, JString, required = false,
                                 default = nil)
  if valid_594048 != nil:
    section.add "X-Amz-Algorithm", valid_594048
  var valid_594049 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594049 = validateParameter(valid_594049, JString, required = false,
                                 default = nil)
  if valid_594049 != nil:
    section.add "X-Amz-SignedHeaders", valid_594049
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_594050 = formData.getOrDefault("SourceIds")
  valid_594050 = validateParameter(valid_594050, JArray, required = false,
                                 default = nil)
  if valid_594050 != nil:
    section.add "SourceIds", valid_594050
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_594051 = formData.getOrDefault("SnsTopicArn")
  valid_594051 = validateParameter(valid_594051, JString, required = true,
                                 default = nil)
  if valid_594051 != nil:
    section.add "SnsTopicArn", valid_594051
  var valid_594052 = formData.getOrDefault("Enabled")
  valid_594052 = validateParameter(valid_594052, JBool, required = false, default = nil)
  if valid_594052 != nil:
    section.add "Enabled", valid_594052
  var valid_594053 = formData.getOrDefault("SubscriptionName")
  valid_594053 = validateParameter(valid_594053, JString, required = true,
                                 default = nil)
  if valid_594053 != nil:
    section.add "SubscriptionName", valid_594053
  var valid_594054 = formData.getOrDefault("SourceType")
  valid_594054 = validateParameter(valid_594054, JString, required = false,
                                 default = nil)
  if valid_594054 != nil:
    section.add "SourceType", valid_594054
  var valid_594055 = formData.getOrDefault("EventCategories")
  valid_594055 = validateParameter(valid_594055, JArray, required = false,
                                 default = nil)
  if valid_594055 != nil:
    section.add "EventCategories", valid_594055
  var valid_594056 = formData.getOrDefault("Tags")
  valid_594056 = validateParameter(valid_594056, JArray, required = false,
                                 default = nil)
  if valid_594056 != nil:
    section.add "Tags", valid_594056
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594057: Call_PostCreateEventSubscription_594038; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  let valid = call_594057.validator(path, query, header, formData, body)
  let scheme = call_594057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594057.url(scheme.get, call_594057.host, call_594057.base,
                         call_594057.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594057, url, valid)

proc call*(call_594058: Call_PostCreateEventSubscription_594038;
          SnsTopicArn: string; SubscriptionName: string; SourceIds: JsonNode = nil;
          Enabled: bool = false; SourceType: string = "";
          EventCategories: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_594059 = newJObject()
  var formData_594060 = newJObject()
  if SourceIds != nil:
    formData_594060.add "SourceIds", SourceIds
  add(formData_594060, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_594060, "Enabled", newJBool(Enabled))
  add(formData_594060, "SubscriptionName", newJString(SubscriptionName))
  add(formData_594060, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_594060.add "EventCategories", EventCategories
  add(query_594059, "Action", newJString(Action))
  if Tags != nil:
    formData_594060.add "Tags", Tags
  add(query_594059, "Version", newJString(Version))
  result = call_594058.call(nil, query_594059, nil, formData_594060, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_594038(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_594039, base: "/",
    url: url_PostCreateEventSubscription_594040,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_594016 = ref object of OpenApiRestCall_592348
proc url_GetCreateEventSubscription_594018(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateEventSubscription_594017(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_594019 = query.getOrDefault("Tags")
  valid_594019 = validateParameter(valid_594019, JArray, required = false,
                                 default = nil)
  if valid_594019 != nil:
    section.add "Tags", valid_594019
  var valid_594020 = query.getOrDefault("SourceType")
  valid_594020 = validateParameter(valid_594020, JString, required = false,
                                 default = nil)
  if valid_594020 != nil:
    section.add "SourceType", valid_594020
  var valid_594021 = query.getOrDefault("Enabled")
  valid_594021 = validateParameter(valid_594021, JBool, required = false, default = nil)
  if valid_594021 != nil:
    section.add "Enabled", valid_594021
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_594022 = query.getOrDefault("SubscriptionName")
  valid_594022 = validateParameter(valid_594022, JString, required = true,
                                 default = nil)
  if valid_594022 != nil:
    section.add "SubscriptionName", valid_594022
  var valid_594023 = query.getOrDefault("EventCategories")
  valid_594023 = validateParameter(valid_594023, JArray, required = false,
                                 default = nil)
  if valid_594023 != nil:
    section.add "EventCategories", valid_594023
  var valid_594024 = query.getOrDefault("SourceIds")
  valid_594024 = validateParameter(valid_594024, JArray, required = false,
                                 default = nil)
  if valid_594024 != nil:
    section.add "SourceIds", valid_594024
  var valid_594025 = query.getOrDefault("Action")
  valid_594025 = validateParameter(valid_594025, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_594025 != nil:
    section.add "Action", valid_594025
  var valid_594026 = query.getOrDefault("SnsTopicArn")
  valid_594026 = validateParameter(valid_594026, JString, required = true,
                                 default = nil)
  if valid_594026 != nil:
    section.add "SnsTopicArn", valid_594026
  var valid_594027 = query.getOrDefault("Version")
  valid_594027 = validateParameter(valid_594027, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594027 != nil:
    section.add "Version", valid_594027
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594028 = header.getOrDefault("X-Amz-Signature")
  valid_594028 = validateParameter(valid_594028, JString, required = false,
                                 default = nil)
  if valid_594028 != nil:
    section.add "X-Amz-Signature", valid_594028
  var valid_594029 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594029 = validateParameter(valid_594029, JString, required = false,
                                 default = nil)
  if valid_594029 != nil:
    section.add "X-Amz-Content-Sha256", valid_594029
  var valid_594030 = header.getOrDefault("X-Amz-Date")
  valid_594030 = validateParameter(valid_594030, JString, required = false,
                                 default = nil)
  if valid_594030 != nil:
    section.add "X-Amz-Date", valid_594030
  var valid_594031 = header.getOrDefault("X-Amz-Credential")
  valid_594031 = validateParameter(valid_594031, JString, required = false,
                                 default = nil)
  if valid_594031 != nil:
    section.add "X-Amz-Credential", valid_594031
  var valid_594032 = header.getOrDefault("X-Amz-Security-Token")
  valid_594032 = validateParameter(valid_594032, JString, required = false,
                                 default = nil)
  if valid_594032 != nil:
    section.add "X-Amz-Security-Token", valid_594032
  var valid_594033 = header.getOrDefault("X-Amz-Algorithm")
  valid_594033 = validateParameter(valid_594033, JString, required = false,
                                 default = nil)
  if valid_594033 != nil:
    section.add "X-Amz-Algorithm", valid_594033
  var valid_594034 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594034 = validateParameter(valid_594034, JString, required = false,
                                 default = nil)
  if valid_594034 != nil:
    section.add "X-Amz-SignedHeaders", valid_594034
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594035: Call_GetCreateEventSubscription_594016; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  let valid = call_594035.validator(path, query, header, formData, body)
  let scheme = call_594035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594035.url(scheme.get, call_594035.host, call_594035.base,
                         call_594035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594035, url, valid)

proc call*(call_594036: Call_GetCreateEventSubscription_594016;
          SubscriptionName: string; SnsTopicArn: string; Tags: JsonNode = nil;
          SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_594037 = newJObject()
  if Tags != nil:
    query_594037.add "Tags", Tags
  add(query_594037, "SourceType", newJString(SourceType))
  add(query_594037, "Enabled", newJBool(Enabled))
  add(query_594037, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_594037.add "EventCategories", EventCategories
  if SourceIds != nil:
    query_594037.add "SourceIds", SourceIds
  add(query_594037, "Action", newJString(Action))
  add(query_594037, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_594037, "Version", newJString(Version))
  result = call_594036.call(nil, query_594037, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_594016(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_594017, base: "/",
    url: url_GetCreateEventSubscription_594018,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGlobalCluster_594083 = ref object of OpenApiRestCall_592348
proc url_PostCreateGlobalCluster_594085(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateGlobalCluster_594084(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594086 = query.getOrDefault("Action")
  valid_594086 = validateParameter(valid_594086, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_594086 != nil:
    section.add "Action", valid_594086
  var valid_594087 = query.getOrDefault("Version")
  valid_594087 = validateParameter(valid_594087, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594087 != nil:
    section.add "Version", valid_594087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594088 = header.getOrDefault("X-Amz-Signature")
  valid_594088 = validateParameter(valid_594088, JString, required = false,
                                 default = nil)
  if valid_594088 != nil:
    section.add "X-Amz-Signature", valid_594088
  var valid_594089 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594089 = validateParameter(valid_594089, JString, required = false,
                                 default = nil)
  if valid_594089 != nil:
    section.add "X-Amz-Content-Sha256", valid_594089
  var valid_594090 = header.getOrDefault("X-Amz-Date")
  valid_594090 = validateParameter(valid_594090, JString, required = false,
                                 default = nil)
  if valid_594090 != nil:
    section.add "X-Amz-Date", valid_594090
  var valid_594091 = header.getOrDefault("X-Amz-Credential")
  valid_594091 = validateParameter(valid_594091, JString, required = false,
                                 default = nil)
  if valid_594091 != nil:
    section.add "X-Amz-Credential", valid_594091
  var valid_594092 = header.getOrDefault("X-Amz-Security-Token")
  valid_594092 = validateParameter(valid_594092, JString, required = false,
                                 default = nil)
  if valid_594092 != nil:
    section.add "X-Amz-Security-Token", valid_594092
  var valid_594093 = header.getOrDefault("X-Amz-Algorithm")
  valid_594093 = validateParameter(valid_594093, JString, required = false,
                                 default = nil)
  if valid_594093 != nil:
    section.add "X-Amz-Algorithm", valid_594093
  var valid_594094 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594094 = validateParameter(valid_594094, JString, required = false,
                                 default = nil)
  if valid_594094 != nil:
    section.add "X-Amz-SignedHeaders", valid_594094
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  section = newJObject()
  var valid_594095 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_594095 = validateParameter(valid_594095, JString, required = false,
                                 default = nil)
  if valid_594095 != nil:
    section.add "GlobalClusterIdentifier", valid_594095
  var valid_594096 = formData.getOrDefault("EngineVersion")
  valid_594096 = validateParameter(valid_594096, JString, required = false,
                                 default = nil)
  if valid_594096 != nil:
    section.add "EngineVersion", valid_594096
  var valid_594097 = formData.getOrDefault("DatabaseName")
  valid_594097 = validateParameter(valid_594097, JString, required = false,
                                 default = nil)
  if valid_594097 != nil:
    section.add "DatabaseName", valid_594097
  var valid_594098 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_594098 = validateParameter(valid_594098, JString, required = false,
                                 default = nil)
  if valid_594098 != nil:
    section.add "SourceDBClusterIdentifier", valid_594098
  var valid_594099 = formData.getOrDefault("Engine")
  valid_594099 = validateParameter(valid_594099, JString, required = false,
                                 default = nil)
  if valid_594099 != nil:
    section.add "Engine", valid_594099
  var valid_594100 = formData.getOrDefault("StorageEncrypted")
  valid_594100 = validateParameter(valid_594100, JBool, required = false, default = nil)
  if valid_594100 != nil:
    section.add "StorageEncrypted", valid_594100
  var valid_594101 = formData.getOrDefault("DeletionProtection")
  valid_594101 = validateParameter(valid_594101, JBool, required = false, default = nil)
  if valid_594101 != nil:
    section.add "DeletionProtection", valid_594101
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594102: Call_PostCreateGlobalCluster_594083; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594102.validator(path, query, header, formData, body)
  let scheme = call_594102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594102.url(scheme.get, call_594102.host, call_594102.base,
                         call_594102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594102, url, valid)

proc call*(call_594103: Call_PostCreateGlobalCluster_594083;
          GlobalClusterIdentifier: string = ""; EngineVersion: string = "";
          DatabaseName: string = ""; SourceDBClusterIdentifier: string = "";
          Engine: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false): Recallable =
  ## postCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  var query_594104 = newJObject()
  var formData_594105 = newJObject()
  add(formData_594105, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_594105, "EngineVersion", newJString(EngineVersion))
  add(formData_594105, "DatabaseName", newJString(DatabaseName))
  add(formData_594105, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_594105, "Engine", newJString(Engine))
  add(query_594104, "Action", newJString(Action))
  add(query_594104, "Version", newJString(Version))
  add(formData_594105, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_594105, "DeletionProtection", newJBool(DeletionProtection))
  result = call_594103.call(nil, query_594104, nil, formData_594105, nil)

var postCreateGlobalCluster* = Call_PostCreateGlobalCluster_594083(
    name: "postCreateGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_PostCreateGlobalCluster_594084, base: "/",
    url: url_PostCreateGlobalCluster_594085, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGlobalCluster_594061 = ref object of OpenApiRestCall_592348
proc url_GetCreateGlobalCluster_594063(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateGlobalCluster_594062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_594064 = query.getOrDefault("GlobalClusterIdentifier")
  valid_594064 = validateParameter(valid_594064, JString, required = false,
                                 default = nil)
  if valid_594064 != nil:
    section.add "GlobalClusterIdentifier", valid_594064
  var valid_594065 = query.getOrDefault("DatabaseName")
  valid_594065 = validateParameter(valid_594065, JString, required = false,
                                 default = nil)
  if valid_594065 != nil:
    section.add "DatabaseName", valid_594065
  var valid_594066 = query.getOrDefault("DeletionProtection")
  valid_594066 = validateParameter(valid_594066, JBool, required = false, default = nil)
  if valid_594066 != nil:
    section.add "DeletionProtection", valid_594066
  var valid_594067 = query.getOrDefault("Engine")
  valid_594067 = validateParameter(valid_594067, JString, required = false,
                                 default = nil)
  if valid_594067 != nil:
    section.add "Engine", valid_594067
  var valid_594068 = query.getOrDefault("StorageEncrypted")
  valid_594068 = validateParameter(valid_594068, JBool, required = false, default = nil)
  if valid_594068 != nil:
    section.add "StorageEncrypted", valid_594068
  var valid_594069 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_594069 = validateParameter(valid_594069, JString, required = false,
                                 default = nil)
  if valid_594069 != nil:
    section.add "SourceDBClusterIdentifier", valid_594069
  var valid_594070 = query.getOrDefault("EngineVersion")
  valid_594070 = validateParameter(valid_594070, JString, required = false,
                                 default = nil)
  if valid_594070 != nil:
    section.add "EngineVersion", valid_594070
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594071 = query.getOrDefault("Action")
  valid_594071 = validateParameter(valid_594071, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_594071 != nil:
    section.add "Action", valid_594071
  var valid_594072 = query.getOrDefault("Version")
  valid_594072 = validateParameter(valid_594072, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594072 != nil:
    section.add "Version", valid_594072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594073 = header.getOrDefault("X-Amz-Signature")
  valid_594073 = validateParameter(valid_594073, JString, required = false,
                                 default = nil)
  if valid_594073 != nil:
    section.add "X-Amz-Signature", valid_594073
  var valid_594074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594074 = validateParameter(valid_594074, JString, required = false,
                                 default = nil)
  if valid_594074 != nil:
    section.add "X-Amz-Content-Sha256", valid_594074
  var valid_594075 = header.getOrDefault("X-Amz-Date")
  valid_594075 = validateParameter(valid_594075, JString, required = false,
                                 default = nil)
  if valid_594075 != nil:
    section.add "X-Amz-Date", valid_594075
  var valid_594076 = header.getOrDefault("X-Amz-Credential")
  valid_594076 = validateParameter(valid_594076, JString, required = false,
                                 default = nil)
  if valid_594076 != nil:
    section.add "X-Amz-Credential", valid_594076
  var valid_594077 = header.getOrDefault("X-Amz-Security-Token")
  valid_594077 = validateParameter(valid_594077, JString, required = false,
                                 default = nil)
  if valid_594077 != nil:
    section.add "X-Amz-Security-Token", valid_594077
  var valid_594078 = header.getOrDefault("X-Amz-Algorithm")
  valid_594078 = validateParameter(valid_594078, JString, required = false,
                                 default = nil)
  if valid_594078 != nil:
    section.add "X-Amz-Algorithm", valid_594078
  var valid_594079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594079 = validateParameter(valid_594079, JString, required = false,
                                 default = nil)
  if valid_594079 != nil:
    section.add "X-Amz-SignedHeaders", valid_594079
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594080: Call_GetCreateGlobalCluster_594061; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594080.validator(path, query, header, formData, body)
  let scheme = call_594080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594080.url(scheme.get, call_594080.host, call_594080.base,
                         call_594080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594080, url, valid)

proc call*(call_594081: Call_GetCreateGlobalCluster_594061;
          GlobalClusterIdentifier: string = ""; DatabaseName: string = "";
          DeletionProtection: bool = false; Engine: string = "";
          StorageEncrypted: bool = false; SourceDBClusterIdentifier: string = "";
          EngineVersion: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594082 = newJObject()
  add(query_594082, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_594082, "DatabaseName", newJString(DatabaseName))
  add(query_594082, "DeletionProtection", newJBool(DeletionProtection))
  add(query_594082, "Engine", newJString(Engine))
  add(query_594082, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_594082, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_594082, "EngineVersion", newJString(EngineVersion))
  add(query_594082, "Action", newJString(Action))
  add(query_594082, "Version", newJString(Version))
  result = call_594081.call(nil, query_594082, nil, nil, nil)

var getCreateGlobalCluster* = Call_GetCreateGlobalCluster_594061(
    name: "getCreateGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_GetCreateGlobalCluster_594062, base: "/",
    url: url_GetCreateGlobalCluster_594063, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOptionGroup_594126 = ref object of OpenApiRestCall_592348
proc url_PostCreateOptionGroup_594128(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateOptionGroup_594127(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594129 = query.getOrDefault("Action")
  valid_594129 = validateParameter(valid_594129, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_594129 != nil:
    section.add "Action", valid_594129
  var valid_594130 = query.getOrDefault("Version")
  valid_594130 = validateParameter(valid_594130, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594130 != nil:
    section.add "Version", valid_594130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594131 = header.getOrDefault("X-Amz-Signature")
  valid_594131 = validateParameter(valid_594131, JString, required = false,
                                 default = nil)
  if valid_594131 != nil:
    section.add "X-Amz-Signature", valid_594131
  var valid_594132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594132 = validateParameter(valid_594132, JString, required = false,
                                 default = nil)
  if valid_594132 != nil:
    section.add "X-Amz-Content-Sha256", valid_594132
  var valid_594133 = header.getOrDefault("X-Amz-Date")
  valid_594133 = validateParameter(valid_594133, JString, required = false,
                                 default = nil)
  if valid_594133 != nil:
    section.add "X-Amz-Date", valid_594133
  var valid_594134 = header.getOrDefault("X-Amz-Credential")
  valid_594134 = validateParameter(valid_594134, JString, required = false,
                                 default = nil)
  if valid_594134 != nil:
    section.add "X-Amz-Credential", valid_594134
  var valid_594135 = header.getOrDefault("X-Amz-Security-Token")
  valid_594135 = validateParameter(valid_594135, JString, required = false,
                                 default = nil)
  if valid_594135 != nil:
    section.add "X-Amz-Security-Token", valid_594135
  var valid_594136 = header.getOrDefault("X-Amz-Algorithm")
  valid_594136 = validateParameter(valid_594136, JString, required = false,
                                 default = nil)
  if valid_594136 != nil:
    section.add "X-Amz-Algorithm", valid_594136
  var valid_594137 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594137 = validateParameter(valid_594137, JString, required = false,
                                 default = nil)
  if valid_594137 != nil:
    section.add "X-Amz-SignedHeaders", valid_594137
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupDescription` field"
  var valid_594138 = formData.getOrDefault("OptionGroupDescription")
  valid_594138 = validateParameter(valid_594138, JString, required = true,
                                 default = nil)
  if valid_594138 != nil:
    section.add "OptionGroupDescription", valid_594138
  var valid_594139 = formData.getOrDefault("EngineName")
  valid_594139 = validateParameter(valid_594139, JString, required = true,
                                 default = nil)
  if valid_594139 != nil:
    section.add "EngineName", valid_594139
  var valid_594140 = formData.getOrDefault("MajorEngineVersion")
  valid_594140 = validateParameter(valid_594140, JString, required = true,
                                 default = nil)
  if valid_594140 != nil:
    section.add "MajorEngineVersion", valid_594140
  var valid_594141 = formData.getOrDefault("Tags")
  valid_594141 = validateParameter(valid_594141, JArray, required = false,
                                 default = nil)
  if valid_594141 != nil:
    section.add "Tags", valid_594141
  var valid_594142 = formData.getOrDefault("OptionGroupName")
  valid_594142 = validateParameter(valid_594142, JString, required = true,
                                 default = nil)
  if valid_594142 != nil:
    section.add "OptionGroupName", valid_594142
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594143: Call_PostCreateOptionGroup_594126; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_594143.validator(path, query, header, formData, body)
  let scheme = call_594143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594143.url(scheme.get, call_594143.host, call_594143.base,
                         call_594143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594143, url, valid)

proc call*(call_594144: Call_PostCreateOptionGroup_594126;
          OptionGroupDescription: string; EngineName: string;
          MajorEngineVersion: string; OptionGroupName: string;
          Action: string = "CreateOptionGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  var query_594145 = newJObject()
  var formData_594146 = newJObject()
  add(formData_594146, "OptionGroupDescription",
      newJString(OptionGroupDescription))
  add(formData_594146, "EngineName", newJString(EngineName))
  add(formData_594146, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_594145, "Action", newJString(Action))
  if Tags != nil:
    formData_594146.add "Tags", Tags
  add(formData_594146, "OptionGroupName", newJString(OptionGroupName))
  add(query_594145, "Version", newJString(Version))
  result = call_594144.call(nil, query_594145, nil, formData_594146, nil)

var postCreateOptionGroup* = Call_PostCreateOptionGroup_594126(
    name: "postCreateOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_PostCreateOptionGroup_594127, base: "/",
    url: url_PostCreateOptionGroup_594128, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOptionGroup_594106 = ref object of OpenApiRestCall_592348
proc url_GetCreateOptionGroup_594108(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateOptionGroup_594107(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: JString (required)
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_594109 = query.getOrDefault("EngineName")
  valid_594109 = validateParameter(valid_594109, JString, required = true,
                                 default = nil)
  if valid_594109 != nil:
    section.add "EngineName", valid_594109
  var valid_594110 = query.getOrDefault("OptionGroupDescription")
  valid_594110 = validateParameter(valid_594110, JString, required = true,
                                 default = nil)
  if valid_594110 != nil:
    section.add "OptionGroupDescription", valid_594110
  var valid_594111 = query.getOrDefault("Tags")
  valid_594111 = validateParameter(valid_594111, JArray, required = false,
                                 default = nil)
  if valid_594111 != nil:
    section.add "Tags", valid_594111
  var valid_594112 = query.getOrDefault("Action")
  valid_594112 = validateParameter(valid_594112, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_594112 != nil:
    section.add "Action", valid_594112
  var valid_594113 = query.getOrDefault("OptionGroupName")
  valid_594113 = validateParameter(valid_594113, JString, required = true,
                                 default = nil)
  if valid_594113 != nil:
    section.add "OptionGroupName", valid_594113
  var valid_594114 = query.getOrDefault("Version")
  valid_594114 = validateParameter(valid_594114, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594114 != nil:
    section.add "Version", valid_594114
  var valid_594115 = query.getOrDefault("MajorEngineVersion")
  valid_594115 = validateParameter(valid_594115, JString, required = true,
                                 default = nil)
  if valid_594115 != nil:
    section.add "MajorEngineVersion", valid_594115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594116 = header.getOrDefault("X-Amz-Signature")
  valid_594116 = validateParameter(valid_594116, JString, required = false,
                                 default = nil)
  if valid_594116 != nil:
    section.add "X-Amz-Signature", valid_594116
  var valid_594117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594117 = validateParameter(valid_594117, JString, required = false,
                                 default = nil)
  if valid_594117 != nil:
    section.add "X-Amz-Content-Sha256", valid_594117
  var valid_594118 = header.getOrDefault("X-Amz-Date")
  valid_594118 = validateParameter(valid_594118, JString, required = false,
                                 default = nil)
  if valid_594118 != nil:
    section.add "X-Amz-Date", valid_594118
  var valid_594119 = header.getOrDefault("X-Amz-Credential")
  valid_594119 = validateParameter(valid_594119, JString, required = false,
                                 default = nil)
  if valid_594119 != nil:
    section.add "X-Amz-Credential", valid_594119
  var valid_594120 = header.getOrDefault("X-Amz-Security-Token")
  valid_594120 = validateParameter(valid_594120, JString, required = false,
                                 default = nil)
  if valid_594120 != nil:
    section.add "X-Amz-Security-Token", valid_594120
  var valid_594121 = header.getOrDefault("X-Amz-Algorithm")
  valid_594121 = validateParameter(valid_594121, JString, required = false,
                                 default = nil)
  if valid_594121 != nil:
    section.add "X-Amz-Algorithm", valid_594121
  var valid_594122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594122 = validateParameter(valid_594122, JString, required = false,
                                 default = nil)
  if valid_594122 != nil:
    section.add "X-Amz-SignedHeaders", valid_594122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594123: Call_GetCreateOptionGroup_594106; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_594123.validator(path, query, header, formData, body)
  let scheme = call_594123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594123.url(scheme.get, call_594123.host, call_594123.base,
                         call_594123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594123, url, valid)

proc call*(call_594124: Call_GetCreateOptionGroup_594106; EngineName: string;
          OptionGroupDescription: string; OptionGroupName: string;
          MajorEngineVersion: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  var query_594125 = newJObject()
  add(query_594125, "EngineName", newJString(EngineName))
  add(query_594125, "OptionGroupDescription", newJString(OptionGroupDescription))
  if Tags != nil:
    query_594125.add "Tags", Tags
  add(query_594125, "Action", newJString(Action))
  add(query_594125, "OptionGroupName", newJString(OptionGroupName))
  add(query_594125, "Version", newJString(Version))
  add(query_594125, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_594124.call(nil, query_594125, nil, nil, nil)

var getCreateOptionGroup* = Call_GetCreateOptionGroup_594106(
    name: "getCreateOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_GetCreateOptionGroup_594107, base: "/",
    url: url_GetCreateOptionGroup_594108, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_594165 = ref object of OpenApiRestCall_592348
proc url_PostDeleteDBCluster_594167(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBCluster_594166(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594168 = query.getOrDefault("Action")
  valid_594168 = validateParameter(valid_594168, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_594168 != nil:
    section.add "Action", valid_594168
  var valid_594169 = query.getOrDefault("Version")
  valid_594169 = validateParameter(valid_594169, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594169 != nil:
    section.add "Version", valid_594169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594170 = header.getOrDefault("X-Amz-Signature")
  valid_594170 = validateParameter(valid_594170, JString, required = false,
                                 default = nil)
  if valid_594170 != nil:
    section.add "X-Amz-Signature", valid_594170
  var valid_594171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594171 = validateParameter(valid_594171, JString, required = false,
                                 default = nil)
  if valid_594171 != nil:
    section.add "X-Amz-Content-Sha256", valid_594171
  var valid_594172 = header.getOrDefault("X-Amz-Date")
  valid_594172 = validateParameter(valid_594172, JString, required = false,
                                 default = nil)
  if valid_594172 != nil:
    section.add "X-Amz-Date", valid_594172
  var valid_594173 = header.getOrDefault("X-Amz-Credential")
  valid_594173 = validateParameter(valid_594173, JString, required = false,
                                 default = nil)
  if valid_594173 != nil:
    section.add "X-Amz-Credential", valid_594173
  var valid_594174 = header.getOrDefault("X-Amz-Security-Token")
  valid_594174 = validateParameter(valid_594174, JString, required = false,
                                 default = nil)
  if valid_594174 != nil:
    section.add "X-Amz-Security-Token", valid_594174
  var valid_594175 = header.getOrDefault("X-Amz-Algorithm")
  valid_594175 = validateParameter(valid_594175, JString, required = false,
                                 default = nil)
  if valid_594175 != nil:
    section.add "X-Amz-Algorithm", valid_594175
  var valid_594176 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594176 = validateParameter(valid_594176, JString, required = false,
                                 default = nil)
  if valid_594176 != nil:
    section.add "X-Amz-SignedHeaders", valid_594176
  result.add "header", section
  ## parameters in `formData` object:
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_594177 = formData.getOrDefault("SkipFinalSnapshot")
  valid_594177 = validateParameter(valid_594177, JBool, required = false, default = nil)
  if valid_594177 != nil:
    section.add "SkipFinalSnapshot", valid_594177
  var valid_594178 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_594178 = validateParameter(valid_594178, JString, required = false,
                                 default = nil)
  if valid_594178 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_594178
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594179 = formData.getOrDefault("DBClusterIdentifier")
  valid_594179 = validateParameter(valid_594179, JString, required = true,
                                 default = nil)
  if valid_594179 != nil:
    section.add "DBClusterIdentifier", valid_594179
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594180: Call_PostDeleteDBCluster_594165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594180.validator(path, query, header, formData, body)
  let scheme = call_594180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594180.url(scheme.get, call_594180.host, call_594180.base,
                         call_594180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594180, url, valid)

proc call*(call_594181: Call_PostDeleteDBCluster_594165;
          DBClusterIdentifier: string; Action: string = "DeleteDBCluster";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_594182 = newJObject()
  var formData_594183 = newJObject()
  add(query_594182, "Action", newJString(Action))
  add(formData_594183, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_594183, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_594182, "Version", newJString(Version))
  add(formData_594183, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_594181.call(nil, query_594182, nil, formData_594183, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_594165(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_594166, base: "/",
    url: url_PostDeleteDBCluster_594167, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_594147 = ref object of OpenApiRestCall_592348
proc url_GetDeleteDBCluster_594149(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBCluster_594148(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594150 = query.getOrDefault("DBClusterIdentifier")
  valid_594150 = validateParameter(valid_594150, JString, required = true,
                                 default = nil)
  if valid_594150 != nil:
    section.add "DBClusterIdentifier", valid_594150
  var valid_594151 = query.getOrDefault("SkipFinalSnapshot")
  valid_594151 = validateParameter(valid_594151, JBool, required = false, default = nil)
  if valid_594151 != nil:
    section.add "SkipFinalSnapshot", valid_594151
  var valid_594152 = query.getOrDefault("Action")
  valid_594152 = validateParameter(valid_594152, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_594152 != nil:
    section.add "Action", valid_594152
  var valid_594153 = query.getOrDefault("Version")
  valid_594153 = validateParameter(valid_594153, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594153 != nil:
    section.add "Version", valid_594153
  var valid_594154 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_594154 = validateParameter(valid_594154, JString, required = false,
                                 default = nil)
  if valid_594154 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_594154
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594155 = header.getOrDefault("X-Amz-Signature")
  valid_594155 = validateParameter(valid_594155, JString, required = false,
                                 default = nil)
  if valid_594155 != nil:
    section.add "X-Amz-Signature", valid_594155
  var valid_594156 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594156 = validateParameter(valid_594156, JString, required = false,
                                 default = nil)
  if valid_594156 != nil:
    section.add "X-Amz-Content-Sha256", valid_594156
  var valid_594157 = header.getOrDefault("X-Amz-Date")
  valid_594157 = validateParameter(valid_594157, JString, required = false,
                                 default = nil)
  if valid_594157 != nil:
    section.add "X-Amz-Date", valid_594157
  var valid_594158 = header.getOrDefault("X-Amz-Credential")
  valid_594158 = validateParameter(valid_594158, JString, required = false,
                                 default = nil)
  if valid_594158 != nil:
    section.add "X-Amz-Credential", valid_594158
  var valid_594159 = header.getOrDefault("X-Amz-Security-Token")
  valid_594159 = validateParameter(valid_594159, JString, required = false,
                                 default = nil)
  if valid_594159 != nil:
    section.add "X-Amz-Security-Token", valid_594159
  var valid_594160 = header.getOrDefault("X-Amz-Algorithm")
  valid_594160 = validateParameter(valid_594160, JString, required = false,
                                 default = nil)
  if valid_594160 != nil:
    section.add "X-Amz-Algorithm", valid_594160
  var valid_594161 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594161 = validateParameter(valid_594161, JString, required = false,
                                 default = nil)
  if valid_594161 != nil:
    section.add "X-Amz-SignedHeaders", valid_594161
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594162: Call_GetDeleteDBCluster_594147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594162.validator(path, query, header, formData, body)
  let scheme = call_594162.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594162.url(scheme.get, call_594162.host, call_594162.base,
                         call_594162.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594162, url, valid)

proc call*(call_594163: Call_GetDeleteDBCluster_594147;
          DBClusterIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_594164 = newJObject()
  add(query_594164, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594164, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_594164, "Action", newJString(Action))
  add(query_594164, "Version", newJString(Version))
  add(query_594164, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_594163.call(nil, query_594164, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_594147(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_594148,
    base: "/", url: url_GetDeleteDBCluster_594149,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterEndpoint_594200 = ref object of OpenApiRestCall_592348
proc url_PostDeleteDBClusterEndpoint_594202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterEndpoint_594201(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594203 = query.getOrDefault("Action")
  valid_594203 = validateParameter(valid_594203, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_594203 != nil:
    section.add "Action", valid_594203
  var valid_594204 = query.getOrDefault("Version")
  valid_594204 = validateParameter(valid_594204, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594204 != nil:
    section.add "Version", valid_594204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594205 = header.getOrDefault("X-Amz-Signature")
  valid_594205 = validateParameter(valid_594205, JString, required = false,
                                 default = nil)
  if valid_594205 != nil:
    section.add "X-Amz-Signature", valid_594205
  var valid_594206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594206 = validateParameter(valid_594206, JString, required = false,
                                 default = nil)
  if valid_594206 != nil:
    section.add "X-Amz-Content-Sha256", valid_594206
  var valid_594207 = header.getOrDefault("X-Amz-Date")
  valid_594207 = validateParameter(valid_594207, JString, required = false,
                                 default = nil)
  if valid_594207 != nil:
    section.add "X-Amz-Date", valid_594207
  var valid_594208 = header.getOrDefault("X-Amz-Credential")
  valid_594208 = validateParameter(valid_594208, JString, required = false,
                                 default = nil)
  if valid_594208 != nil:
    section.add "X-Amz-Credential", valid_594208
  var valid_594209 = header.getOrDefault("X-Amz-Security-Token")
  valid_594209 = validateParameter(valid_594209, JString, required = false,
                                 default = nil)
  if valid_594209 != nil:
    section.add "X-Amz-Security-Token", valid_594209
  var valid_594210 = header.getOrDefault("X-Amz-Algorithm")
  valid_594210 = validateParameter(valid_594210, JString, required = false,
                                 default = nil)
  if valid_594210 != nil:
    section.add "X-Amz-Algorithm", valid_594210
  var valid_594211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594211 = validateParameter(valid_594211, JString, required = false,
                                 default = nil)
  if valid_594211 != nil:
    section.add "X-Amz-SignedHeaders", valid_594211
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_594212 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_594212 = validateParameter(valid_594212, JString, required = true,
                                 default = nil)
  if valid_594212 != nil:
    section.add "DBClusterEndpointIdentifier", valid_594212
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594213: Call_PostDeleteDBClusterEndpoint_594200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594213.validator(path, query, header, formData, body)
  let scheme = call_594213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594213.url(scheme.get, call_594213.host, call_594213.base,
                         call_594213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594213, url, valid)

proc call*(call_594214: Call_PostDeleteDBClusterEndpoint_594200;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594215 = newJObject()
  var formData_594216 = newJObject()
  add(formData_594216, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_594215, "Action", newJString(Action))
  add(query_594215, "Version", newJString(Version))
  result = call_594214.call(nil, query_594215, nil, formData_594216, nil)

var postDeleteDBClusterEndpoint* = Call_PostDeleteDBClusterEndpoint_594200(
    name: "postDeleteDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_PostDeleteDBClusterEndpoint_594201, base: "/",
    url: url_PostDeleteDBClusterEndpoint_594202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterEndpoint_594184 = ref object of OpenApiRestCall_592348
proc url_GetDeleteDBClusterEndpoint_594186(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterEndpoint_594185(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_594187 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_594187 = validateParameter(valid_594187, JString, required = true,
                                 default = nil)
  if valid_594187 != nil:
    section.add "DBClusterEndpointIdentifier", valid_594187
  var valid_594188 = query.getOrDefault("Action")
  valid_594188 = validateParameter(valid_594188, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_594188 != nil:
    section.add "Action", valid_594188
  var valid_594189 = query.getOrDefault("Version")
  valid_594189 = validateParameter(valid_594189, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594189 != nil:
    section.add "Version", valid_594189
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594190 = header.getOrDefault("X-Amz-Signature")
  valid_594190 = validateParameter(valid_594190, JString, required = false,
                                 default = nil)
  if valid_594190 != nil:
    section.add "X-Amz-Signature", valid_594190
  var valid_594191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594191 = validateParameter(valid_594191, JString, required = false,
                                 default = nil)
  if valid_594191 != nil:
    section.add "X-Amz-Content-Sha256", valid_594191
  var valid_594192 = header.getOrDefault("X-Amz-Date")
  valid_594192 = validateParameter(valid_594192, JString, required = false,
                                 default = nil)
  if valid_594192 != nil:
    section.add "X-Amz-Date", valid_594192
  var valid_594193 = header.getOrDefault("X-Amz-Credential")
  valid_594193 = validateParameter(valid_594193, JString, required = false,
                                 default = nil)
  if valid_594193 != nil:
    section.add "X-Amz-Credential", valid_594193
  var valid_594194 = header.getOrDefault("X-Amz-Security-Token")
  valid_594194 = validateParameter(valid_594194, JString, required = false,
                                 default = nil)
  if valid_594194 != nil:
    section.add "X-Amz-Security-Token", valid_594194
  var valid_594195 = header.getOrDefault("X-Amz-Algorithm")
  valid_594195 = validateParameter(valid_594195, JString, required = false,
                                 default = nil)
  if valid_594195 != nil:
    section.add "X-Amz-Algorithm", valid_594195
  var valid_594196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594196 = validateParameter(valid_594196, JString, required = false,
                                 default = nil)
  if valid_594196 != nil:
    section.add "X-Amz-SignedHeaders", valid_594196
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594197: Call_GetDeleteDBClusterEndpoint_594184; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594197.validator(path, query, header, formData, body)
  let scheme = call_594197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594197.url(scheme.get, call_594197.host, call_594197.base,
                         call_594197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594197, url, valid)

proc call*(call_594198: Call_GetDeleteDBClusterEndpoint_594184;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594199 = newJObject()
  add(query_594199, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_594199, "Action", newJString(Action))
  add(query_594199, "Version", newJString(Version))
  result = call_594198.call(nil, query_594199, nil, nil, nil)

var getDeleteDBClusterEndpoint* = Call_GetDeleteDBClusterEndpoint_594184(
    name: "getDeleteDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_GetDeleteDBClusterEndpoint_594185, base: "/",
    url: url_GetDeleteDBClusterEndpoint_594186,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_594233 = ref object of OpenApiRestCall_592348
proc url_PostDeleteDBClusterParameterGroup_594235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_594234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594236 = query.getOrDefault("Action")
  valid_594236 = validateParameter(valid_594236, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_594236 != nil:
    section.add "Action", valid_594236
  var valid_594237 = query.getOrDefault("Version")
  valid_594237 = validateParameter(valid_594237, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594237 != nil:
    section.add "Version", valid_594237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594238 = header.getOrDefault("X-Amz-Signature")
  valid_594238 = validateParameter(valid_594238, JString, required = false,
                                 default = nil)
  if valid_594238 != nil:
    section.add "X-Amz-Signature", valid_594238
  var valid_594239 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594239 = validateParameter(valid_594239, JString, required = false,
                                 default = nil)
  if valid_594239 != nil:
    section.add "X-Amz-Content-Sha256", valid_594239
  var valid_594240 = header.getOrDefault("X-Amz-Date")
  valid_594240 = validateParameter(valid_594240, JString, required = false,
                                 default = nil)
  if valid_594240 != nil:
    section.add "X-Amz-Date", valid_594240
  var valid_594241 = header.getOrDefault("X-Amz-Credential")
  valid_594241 = validateParameter(valid_594241, JString, required = false,
                                 default = nil)
  if valid_594241 != nil:
    section.add "X-Amz-Credential", valid_594241
  var valid_594242 = header.getOrDefault("X-Amz-Security-Token")
  valid_594242 = validateParameter(valid_594242, JString, required = false,
                                 default = nil)
  if valid_594242 != nil:
    section.add "X-Amz-Security-Token", valid_594242
  var valid_594243 = header.getOrDefault("X-Amz-Algorithm")
  valid_594243 = validateParameter(valid_594243, JString, required = false,
                                 default = nil)
  if valid_594243 != nil:
    section.add "X-Amz-Algorithm", valid_594243
  var valid_594244 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594244 = validateParameter(valid_594244, JString, required = false,
                                 default = nil)
  if valid_594244 != nil:
    section.add "X-Amz-SignedHeaders", valid_594244
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_594245 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_594245 = validateParameter(valid_594245, JString, required = true,
                                 default = nil)
  if valid_594245 != nil:
    section.add "DBClusterParameterGroupName", valid_594245
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594246: Call_PostDeleteDBClusterParameterGroup_594233;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594246.validator(path, query, header, formData, body)
  let scheme = call_594246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594246.url(scheme.get, call_594246.host, call_594246.base,
                         call_594246.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594246, url, valid)

proc call*(call_594247: Call_PostDeleteDBClusterParameterGroup_594233;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_594248 = newJObject()
  var formData_594249 = newJObject()
  add(query_594248, "Action", newJString(Action))
  add(formData_594249, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_594248, "Version", newJString(Version))
  result = call_594247.call(nil, query_594248, nil, formData_594249, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_594233(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_594234, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_594235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_594217 = ref object of OpenApiRestCall_592348
proc url_GetDeleteDBClusterParameterGroup_594219(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_594218(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_594220 = query.getOrDefault("DBClusterParameterGroupName")
  valid_594220 = validateParameter(valid_594220, JString, required = true,
                                 default = nil)
  if valid_594220 != nil:
    section.add "DBClusterParameterGroupName", valid_594220
  var valid_594221 = query.getOrDefault("Action")
  valid_594221 = validateParameter(valid_594221, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_594221 != nil:
    section.add "Action", valid_594221
  var valid_594222 = query.getOrDefault("Version")
  valid_594222 = validateParameter(valid_594222, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594222 != nil:
    section.add "Version", valid_594222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594223 = header.getOrDefault("X-Amz-Signature")
  valid_594223 = validateParameter(valid_594223, JString, required = false,
                                 default = nil)
  if valid_594223 != nil:
    section.add "X-Amz-Signature", valid_594223
  var valid_594224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594224 = validateParameter(valid_594224, JString, required = false,
                                 default = nil)
  if valid_594224 != nil:
    section.add "X-Amz-Content-Sha256", valid_594224
  var valid_594225 = header.getOrDefault("X-Amz-Date")
  valid_594225 = validateParameter(valid_594225, JString, required = false,
                                 default = nil)
  if valid_594225 != nil:
    section.add "X-Amz-Date", valid_594225
  var valid_594226 = header.getOrDefault("X-Amz-Credential")
  valid_594226 = validateParameter(valid_594226, JString, required = false,
                                 default = nil)
  if valid_594226 != nil:
    section.add "X-Amz-Credential", valid_594226
  var valid_594227 = header.getOrDefault("X-Amz-Security-Token")
  valid_594227 = validateParameter(valid_594227, JString, required = false,
                                 default = nil)
  if valid_594227 != nil:
    section.add "X-Amz-Security-Token", valid_594227
  var valid_594228 = header.getOrDefault("X-Amz-Algorithm")
  valid_594228 = validateParameter(valid_594228, JString, required = false,
                                 default = nil)
  if valid_594228 != nil:
    section.add "X-Amz-Algorithm", valid_594228
  var valid_594229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594229 = validateParameter(valid_594229, JString, required = false,
                                 default = nil)
  if valid_594229 != nil:
    section.add "X-Amz-SignedHeaders", valid_594229
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594230: Call_GetDeleteDBClusterParameterGroup_594217;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594230.validator(path, query, header, formData, body)
  let scheme = call_594230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594230.url(scheme.get, call_594230.host, call_594230.base,
                         call_594230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594230, url, valid)

proc call*(call_594231: Call_GetDeleteDBClusterParameterGroup_594217;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594232 = newJObject()
  add(query_594232, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_594232, "Action", newJString(Action))
  add(query_594232, "Version", newJString(Version))
  result = call_594231.call(nil, query_594232, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_594217(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_594218, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_594219,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_594266 = ref object of OpenApiRestCall_592348
proc url_PostDeleteDBClusterSnapshot_594268(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_594267(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594269 = query.getOrDefault("Action")
  valid_594269 = validateParameter(valid_594269, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_594269 != nil:
    section.add "Action", valid_594269
  var valid_594270 = query.getOrDefault("Version")
  valid_594270 = validateParameter(valid_594270, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594270 != nil:
    section.add "Version", valid_594270
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594271 = header.getOrDefault("X-Amz-Signature")
  valid_594271 = validateParameter(valid_594271, JString, required = false,
                                 default = nil)
  if valid_594271 != nil:
    section.add "X-Amz-Signature", valid_594271
  var valid_594272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594272 = validateParameter(valid_594272, JString, required = false,
                                 default = nil)
  if valid_594272 != nil:
    section.add "X-Amz-Content-Sha256", valid_594272
  var valid_594273 = header.getOrDefault("X-Amz-Date")
  valid_594273 = validateParameter(valid_594273, JString, required = false,
                                 default = nil)
  if valid_594273 != nil:
    section.add "X-Amz-Date", valid_594273
  var valid_594274 = header.getOrDefault("X-Amz-Credential")
  valid_594274 = validateParameter(valid_594274, JString, required = false,
                                 default = nil)
  if valid_594274 != nil:
    section.add "X-Amz-Credential", valid_594274
  var valid_594275 = header.getOrDefault("X-Amz-Security-Token")
  valid_594275 = validateParameter(valid_594275, JString, required = false,
                                 default = nil)
  if valid_594275 != nil:
    section.add "X-Amz-Security-Token", valid_594275
  var valid_594276 = header.getOrDefault("X-Amz-Algorithm")
  valid_594276 = validateParameter(valid_594276, JString, required = false,
                                 default = nil)
  if valid_594276 != nil:
    section.add "X-Amz-Algorithm", valid_594276
  var valid_594277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594277 = validateParameter(valid_594277, JString, required = false,
                                 default = nil)
  if valid_594277 != nil:
    section.add "X-Amz-SignedHeaders", valid_594277
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_594278 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_594278 = validateParameter(valid_594278, JString, required = true,
                                 default = nil)
  if valid_594278 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_594278
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594279: Call_PostDeleteDBClusterSnapshot_594266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594279.validator(path, query, header, formData, body)
  let scheme = call_594279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594279.url(scheme.get, call_594279.host, call_594279.base,
                         call_594279.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594279, url, valid)

proc call*(call_594280: Call_PostDeleteDBClusterSnapshot_594266;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594281 = newJObject()
  var formData_594282 = newJObject()
  add(formData_594282, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_594281, "Action", newJString(Action))
  add(query_594281, "Version", newJString(Version))
  result = call_594280.call(nil, query_594281, nil, formData_594282, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_594266(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_594267, base: "/",
    url: url_PostDeleteDBClusterSnapshot_594268,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_594250 = ref object of OpenApiRestCall_592348
proc url_GetDeleteDBClusterSnapshot_594252(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_594251(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_594253 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_594253 = validateParameter(valid_594253, JString, required = true,
                                 default = nil)
  if valid_594253 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_594253
  var valid_594254 = query.getOrDefault("Action")
  valid_594254 = validateParameter(valid_594254, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_594254 != nil:
    section.add "Action", valid_594254
  var valid_594255 = query.getOrDefault("Version")
  valid_594255 = validateParameter(valid_594255, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594255 != nil:
    section.add "Version", valid_594255
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594256 = header.getOrDefault("X-Amz-Signature")
  valid_594256 = validateParameter(valid_594256, JString, required = false,
                                 default = nil)
  if valid_594256 != nil:
    section.add "X-Amz-Signature", valid_594256
  var valid_594257 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594257 = validateParameter(valid_594257, JString, required = false,
                                 default = nil)
  if valid_594257 != nil:
    section.add "X-Amz-Content-Sha256", valid_594257
  var valid_594258 = header.getOrDefault("X-Amz-Date")
  valid_594258 = validateParameter(valid_594258, JString, required = false,
                                 default = nil)
  if valid_594258 != nil:
    section.add "X-Amz-Date", valid_594258
  var valid_594259 = header.getOrDefault("X-Amz-Credential")
  valid_594259 = validateParameter(valid_594259, JString, required = false,
                                 default = nil)
  if valid_594259 != nil:
    section.add "X-Amz-Credential", valid_594259
  var valid_594260 = header.getOrDefault("X-Amz-Security-Token")
  valid_594260 = validateParameter(valid_594260, JString, required = false,
                                 default = nil)
  if valid_594260 != nil:
    section.add "X-Amz-Security-Token", valid_594260
  var valid_594261 = header.getOrDefault("X-Amz-Algorithm")
  valid_594261 = validateParameter(valid_594261, JString, required = false,
                                 default = nil)
  if valid_594261 != nil:
    section.add "X-Amz-Algorithm", valid_594261
  var valid_594262 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594262 = validateParameter(valid_594262, JString, required = false,
                                 default = nil)
  if valid_594262 != nil:
    section.add "X-Amz-SignedHeaders", valid_594262
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594263: Call_GetDeleteDBClusterSnapshot_594250; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594263.validator(path, query, header, formData, body)
  let scheme = call_594263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594263.url(scheme.get, call_594263.host, call_594263.base,
                         call_594263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594263, url, valid)

proc call*(call_594264: Call_GetDeleteDBClusterSnapshot_594250;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594265 = newJObject()
  add(query_594265, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_594265, "Action", newJString(Action))
  add(query_594265, "Version", newJString(Version))
  result = call_594264.call(nil, query_594265, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_594250(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_594251, base: "/",
    url: url_GetDeleteDBClusterSnapshot_594252,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_594302 = ref object of OpenApiRestCall_592348
proc url_PostDeleteDBInstance_594304(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBInstance_594303(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594305 = query.getOrDefault("Action")
  valid_594305 = validateParameter(valid_594305, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_594305 != nil:
    section.add "Action", valid_594305
  var valid_594306 = query.getOrDefault("Version")
  valid_594306 = validateParameter(valid_594306, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594306 != nil:
    section.add "Version", valid_594306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594307 = header.getOrDefault("X-Amz-Signature")
  valid_594307 = validateParameter(valid_594307, JString, required = false,
                                 default = nil)
  if valid_594307 != nil:
    section.add "X-Amz-Signature", valid_594307
  var valid_594308 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594308 = validateParameter(valid_594308, JString, required = false,
                                 default = nil)
  if valid_594308 != nil:
    section.add "X-Amz-Content-Sha256", valid_594308
  var valid_594309 = header.getOrDefault("X-Amz-Date")
  valid_594309 = validateParameter(valid_594309, JString, required = false,
                                 default = nil)
  if valid_594309 != nil:
    section.add "X-Amz-Date", valid_594309
  var valid_594310 = header.getOrDefault("X-Amz-Credential")
  valid_594310 = validateParameter(valid_594310, JString, required = false,
                                 default = nil)
  if valid_594310 != nil:
    section.add "X-Amz-Credential", valid_594310
  var valid_594311 = header.getOrDefault("X-Amz-Security-Token")
  valid_594311 = validateParameter(valid_594311, JString, required = false,
                                 default = nil)
  if valid_594311 != nil:
    section.add "X-Amz-Security-Token", valid_594311
  var valid_594312 = header.getOrDefault("X-Amz-Algorithm")
  valid_594312 = validateParameter(valid_594312, JString, required = false,
                                 default = nil)
  if valid_594312 != nil:
    section.add "X-Amz-Algorithm", valid_594312
  var valid_594313 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594313 = validateParameter(valid_594313, JString, required = false,
                                 default = nil)
  if valid_594313 != nil:
    section.add "X-Amz-SignedHeaders", valid_594313
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594314 = formData.getOrDefault("DBInstanceIdentifier")
  valid_594314 = validateParameter(valid_594314, JString, required = true,
                                 default = nil)
  if valid_594314 != nil:
    section.add "DBInstanceIdentifier", valid_594314
  var valid_594315 = formData.getOrDefault("SkipFinalSnapshot")
  valid_594315 = validateParameter(valid_594315, JBool, required = false, default = nil)
  if valid_594315 != nil:
    section.add "SkipFinalSnapshot", valid_594315
  var valid_594316 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_594316 = validateParameter(valid_594316, JString, required = false,
                                 default = nil)
  if valid_594316 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_594316
  var valid_594317 = formData.getOrDefault("DeleteAutomatedBackups")
  valid_594317 = validateParameter(valid_594317, JBool, required = false, default = nil)
  if valid_594317 != nil:
    section.add "DeleteAutomatedBackups", valid_594317
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594318: Call_PostDeleteDBInstance_594302; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_594318.validator(path, query, header, formData, body)
  let scheme = call_594318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594318.url(scheme.get, call_594318.host, call_594318.base,
                         call_594318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594318, url, valid)

proc call*(call_594319: Call_PostDeleteDBInstance_594302;
          DBInstanceIdentifier: string; Action: string = "DeleteDBInstance";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"; DeleteAutomatedBackups: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Version: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  var query_594320 = newJObject()
  var formData_594321 = newJObject()
  add(formData_594321, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_594320, "Action", newJString(Action))
  add(formData_594321, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_594321, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_594320, "Version", newJString(Version))
  add(formData_594321, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  result = call_594319.call(nil, query_594320, nil, formData_594321, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_594302(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_594303, base: "/",
    url: url_PostDeleteDBInstance_594304, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_594283 = ref object of OpenApiRestCall_592348
proc url_GetDeleteDBInstance_594285(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBInstance_594284(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  var valid_594286 = query.getOrDefault("DeleteAutomatedBackups")
  valid_594286 = validateParameter(valid_594286, JBool, required = false, default = nil)
  if valid_594286 != nil:
    section.add "DeleteAutomatedBackups", valid_594286
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594287 = query.getOrDefault("DBInstanceIdentifier")
  valid_594287 = validateParameter(valid_594287, JString, required = true,
                                 default = nil)
  if valid_594287 != nil:
    section.add "DBInstanceIdentifier", valid_594287
  var valid_594288 = query.getOrDefault("SkipFinalSnapshot")
  valid_594288 = validateParameter(valid_594288, JBool, required = false, default = nil)
  if valid_594288 != nil:
    section.add "SkipFinalSnapshot", valid_594288
  var valid_594289 = query.getOrDefault("Action")
  valid_594289 = validateParameter(valid_594289, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_594289 != nil:
    section.add "Action", valid_594289
  var valid_594290 = query.getOrDefault("Version")
  valid_594290 = validateParameter(valid_594290, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594290 != nil:
    section.add "Version", valid_594290
  var valid_594291 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_594291 = validateParameter(valid_594291, JString, required = false,
                                 default = nil)
  if valid_594291 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_594291
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594292 = header.getOrDefault("X-Amz-Signature")
  valid_594292 = validateParameter(valid_594292, JString, required = false,
                                 default = nil)
  if valid_594292 != nil:
    section.add "X-Amz-Signature", valid_594292
  var valid_594293 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594293 = validateParameter(valid_594293, JString, required = false,
                                 default = nil)
  if valid_594293 != nil:
    section.add "X-Amz-Content-Sha256", valid_594293
  var valid_594294 = header.getOrDefault("X-Amz-Date")
  valid_594294 = validateParameter(valid_594294, JString, required = false,
                                 default = nil)
  if valid_594294 != nil:
    section.add "X-Amz-Date", valid_594294
  var valid_594295 = header.getOrDefault("X-Amz-Credential")
  valid_594295 = validateParameter(valid_594295, JString, required = false,
                                 default = nil)
  if valid_594295 != nil:
    section.add "X-Amz-Credential", valid_594295
  var valid_594296 = header.getOrDefault("X-Amz-Security-Token")
  valid_594296 = validateParameter(valid_594296, JString, required = false,
                                 default = nil)
  if valid_594296 != nil:
    section.add "X-Amz-Security-Token", valid_594296
  var valid_594297 = header.getOrDefault("X-Amz-Algorithm")
  valid_594297 = validateParameter(valid_594297, JString, required = false,
                                 default = nil)
  if valid_594297 != nil:
    section.add "X-Amz-Algorithm", valid_594297
  var valid_594298 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594298 = validateParameter(valid_594298, JString, required = false,
                                 default = nil)
  if valid_594298 != nil:
    section.add "X-Amz-SignedHeaders", valid_594298
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594299: Call_GetDeleteDBInstance_594283; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_594299.validator(path, query, header, formData, body)
  let scheme = call_594299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594299.url(scheme.get, call_594299.host, call_594299.base,
                         call_594299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594299, url, valid)

proc call*(call_594300: Call_GetDeleteDBInstance_594283;
          DBInstanceIdentifier: string; DeleteAutomatedBackups: bool = false;
          SkipFinalSnapshot: bool = false; Action: string = "DeleteDBInstance";
          Version: string = "2014-10-31"; FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  var query_594301 = newJObject()
  add(query_594301, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_594301, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_594301, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_594301, "Action", newJString(Action))
  add(query_594301, "Version", newJString(Version))
  add(query_594301, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_594300.call(nil, query_594301, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_594283(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_594284, base: "/",
    url: url_GetDeleteDBInstance_594285, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstanceAutomatedBackup_594338 = ref object of OpenApiRestCall_592348
proc url_PostDeleteDBInstanceAutomatedBackup_594340(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBInstanceAutomatedBackup_594339(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594341 = query.getOrDefault("Action")
  valid_594341 = validateParameter(valid_594341, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_594341 != nil:
    section.add "Action", valid_594341
  var valid_594342 = query.getOrDefault("Version")
  valid_594342 = validateParameter(valid_594342, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594342 != nil:
    section.add "Version", valid_594342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594343 = header.getOrDefault("X-Amz-Signature")
  valid_594343 = validateParameter(valid_594343, JString, required = false,
                                 default = nil)
  if valid_594343 != nil:
    section.add "X-Amz-Signature", valid_594343
  var valid_594344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594344 = validateParameter(valid_594344, JString, required = false,
                                 default = nil)
  if valid_594344 != nil:
    section.add "X-Amz-Content-Sha256", valid_594344
  var valid_594345 = header.getOrDefault("X-Amz-Date")
  valid_594345 = validateParameter(valid_594345, JString, required = false,
                                 default = nil)
  if valid_594345 != nil:
    section.add "X-Amz-Date", valid_594345
  var valid_594346 = header.getOrDefault("X-Amz-Credential")
  valid_594346 = validateParameter(valid_594346, JString, required = false,
                                 default = nil)
  if valid_594346 != nil:
    section.add "X-Amz-Credential", valid_594346
  var valid_594347 = header.getOrDefault("X-Amz-Security-Token")
  valid_594347 = validateParameter(valid_594347, JString, required = false,
                                 default = nil)
  if valid_594347 != nil:
    section.add "X-Amz-Security-Token", valid_594347
  var valid_594348 = header.getOrDefault("X-Amz-Algorithm")
  valid_594348 = validateParameter(valid_594348, JString, required = false,
                                 default = nil)
  if valid_594348 != nil:
    section.add "X-Amz-Algorithm", valid_594348
  var valid_594349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594349 = validateParameter(valid_594349, JString, required = false,
                                 default = nil)
  if valid_594349 != nil:
    section.add "X-Amz-SignedHeaders", valid_594349
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbiResourceId` field"
  var valid_594350 = formData.getOrDefault("DbiResourceId")
  valid_594350 = validateParameter(valid_594350, JString, required = true,
                                 default = nil)
  if valid_594350 != nil:
    section.add "DbiResourceId", valid_594350
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594351: Call_PostDeleteDBInstanceAutomatedBackup_594338;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_594351.validator(path, query, header, formData, body)
  let scheme = call_594351.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594351.url(scheme.get, call_594351.host, call_594351.base,
                         call_594351.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594351, url, valid)

proc call*(call_594352: Call_PostDeleteDBInstanceAutomatedBackup_594338;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594353 = newJObject()
  var formData_594354 = newJObject()
  add(formData_594354, "DbiResourceId", newJString(DbiResourceId))
  add(query_594353, "Action", newJString(Action))
  add(query_594353, "Version", newJString(Version))
  result = call_594352.call(nil, query_594353, nil, formData_594354, nil)

var postDeleteDBInstanceAutomatedBackup* = Call_PostDeleteDBInstanceAutomatedBackup_594338(
    name: "postDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_PostDeleteDBInstanceAutomatedBackup_594339, base: "/",
    url: url_PostDeleteDBInstanceAutomatedBackup_594340,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstanceAutomatedBackup_594322 = ref object of OpenApiRestCall_592348
proc url_GetDeleteDBInstanceAutomatedBackup_594324(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBInstanceAutomatedBackup_594323(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DbiResourceId` field"
  var valid_594325 = query.getOrDefault("DbiResourceId")
  valid_594325 = validateParameter(valid_594325, JString, required = true,
                                 default = nil)
  if valid_594325 != nil:
    section.add "DbiResourceId", valid_594325
  var valid_594326 = query.getOrDefault("Action")
  valid_594326 = validateParameter(valid_594326, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_594326 != nil:
    section.add "Action", valid_594326
  var valid_594327 = query.getOrDefault("Version")
  valid_594327 = validateParameter(valid_594327, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594327 != nil:
    section.add "Version", valid_594327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594328 = header.getOrDefault("X-Amz-Signature")
  valid_594328 = validateParameter(valid_594328, JString, required = false,
                                 default = nil)
  if valid_594328 != nil:
    section.add "X-Amz-Signature", valid_594328
  var valid_594329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594329 = validateParameter(valid_594329, JString, required = false,
                                 default = nil)
  if valid_594329 != nil:
    section.add "X-Amz-Content-Sha256", valid_594329
  var valid_594330 = header.getOrDefault("X-Amz-Date")
  valid_594330 = validateParameter(valid_594330, JString, required = false,
                                 default = nil)
  if valid_594330 != nil:
    section.add "X-Amz-Date", valid_594330
  var valid_594331 = header.getOrDefault("X-Amz-Credential")
  valid_594331 = validateParameter(valid_594331, JString, required = false,
                                 default = nil)
  if valid_594331 != nil:
    section.add "X-Amz-Credential", valid_594331
  var valid_594332 = header.getOrDefault("X-Amz-Security-Token")
  valid_594332 = validateParameter(valid_594332, JString, required = false,
                                 default = nil)
  if valid_594332 != nil:
    section.add "X-Amz-Security-Token", valid_594332
  var valid_594333 = header.getOrDefault("X-Amz-Algorithm")
  valid_594333 = validateParameter(valid_594333, JString, required = false,
                                 default = nil)
  if valid_594333 != nil:
    section.add "X-Amz-Algorithm", valid_594333
  var valid_594334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594334 = validateParameter(valid_594334, JString, required = false,
                                 default = nil)
  if valid_594334 != nil:
    section.add "X-Amz-SignedHeaders", valid_594334
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594335: Call_GetDeleteDBInstanceAutomatedBackup_594322;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_594335.validator(path, query, header, formData, body)
  let scheme = call_594335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594335.url(scheme.get, call_594335.host, call_594335.base,
                         call_594335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594335, url, valid)

proc call*(call_594336: Call_GetDeleteDBInstanceAutomatedBackup_594322;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594337 = newJObject()
  add(query_594337, "DbiResourceId", newJString(DbiResourceId))
  add(query_594337, "Action", newJString(Action))
  add(query_594337, "Version", newJString(Version))
  result = call_594336.call(nil, query_594337, nil, nil, nil)

var getDeleteDBInstanceAutomatedBackup* = Call_GetDeleteDBInstanceAutomatedBackup_594322(
    name: "getDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_GetDeleteDBInstanceAutomatedBackup_594323, base: "/",
    url: url_GetDeleteDBInstanceAutomatedBackup_594324,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_594371 = ref object of OpenApiRestCall_592348
proc url_PostDeleteDBParameterGroup_594373(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBParameterGroup_594372(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594374 = query.getOrDefault("Action")
  valid_594374 = validateParameter(valid_594374, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_594374 != nil:
    section.add "Action", valid_594374
  var valid_594375 = query.getOrDefault("Version")
  valid_594375 = validateParameter(valid_594375, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594375 != nil:
    section.add "Version", valid_594375
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594376 = header.getOrDefault("X-Amz-Signature")
  valid_594376 = validateParameter(valid_594376, JString, required = false,
                                 default = nil)
  if valid_594376 != nil:
    section.add "X-Amz-Signature", valid_594376
  var valid_594377 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594377 = validateParameter(valid_594377, JString, required = false,
                                 default = nil)
  if valid_594377 != nil:
    section.add "X-Amz-Content-Sha256", valid_594377
  var valid_594378 = header.getOrDefault("X-Amz-Date")
  valid_594378 = validateParameter(valid_594378, JString, required = false,
                                 default = nil)
  if valid_594378 != nil:
    section.add "X-Amz-Date", valid_594378
  var valid_594379 = header.getOrDefault("X-Amz-Credential")
  valid_594379 = validateParameter(valid_594379, JString, required = false,
                                 default = nil)
  if valid_594379 != nil:
    section.add "X-Amz-Credential", valid_594379
  var valid_594380 = header.getOrDefault("X-Amz-Security-Token")
  valid_594380 = validateParameter(valid_594380, JString, required = false,
                                 default = nil)
  if valid_594380 != nil:
    section.add "X-Amz-Security-Token", valid_594380
  var valid_594381 = header.getOrDefault("X-Amz-Algorithm")
  valid_594381 = validateParameter(valid_594381, JString, required = false,
                                 default = nil)
  if valid_594381 != nil:
    section.add "X-Amz-Algorithm", valid_594381
  var valid_594382 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594382 = validateParameter(valid_594382, JString, required = false,
                                 default = nil)
  if valid_594382 != nil:
    section.add "X-Amz-SignedHeaders", valid_594382
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_594383 = formData.getOrDefault("DBParameterGroupName")
  valid_594383 = validateParameter(valid_594383, JString, required = true,
                                 default = nil)
  if valid_594383 != nil:
    section.add "DBParameterGroupName", valid_594383
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594384: Call_PostDeleteDBParameterGroup_594371; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_594384.validator(path, query, header, formData, body)
  let scheme = call_594384.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594384.url(scheme.get, call_594384.host, call_594384.base,
                         call_594384.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594384, url, valid)

proc call*(call_594385: Call_PostDeleteDBParameterGroup_594371;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594386 = newJObject()
  var formData_594387 = newJObject()
  add(formData_594387, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_594386, "Action", newJString(Action))
  add(query_594386, "Version", newJString(Version))
  result = call_594385.call(nil, query_594386, nil, formData_594387, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_594371(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_594372, base: "/",
    url: url_PostDeleteDBParameterGroup_594373,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_594355 = ref object of OpenApiRestCall_592348
proc url_GetDeleteDBParameterGroup_594357(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBParameterGroup_594356(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_594358 = query.getOrDefault("DBParameterGroupName")
  valid_594358 = validateParameter(valid_594358, JString, required = true,
                                 default = nil)
  if valid_594358 != nil:
    section.add "DBParameterGroupName", valid_594358
  var valid_594359 = query.getOrDefault("Action")
  valid_594359 = validateParameter(valid_594359, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_594359 != nil:
    section.add "Action", valid_594359
  var valid_594360 = query.getOrDefault("Version")
  valid_594360 = validateParameter(valid_594360, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594360 != nil:
    section.add "Version", valid_594360
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594361 = header.getOrDefault("X-Amz-Signature")
  valid_594361 = validateParameter(valid_594361, JString, required = false,
                                 default = nil)
  if valid_594361 != nil:
    section.add "X-Amz-Signature", valid_594361
  var valid_594362 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594362 = validateParameter(valid_594362, JString, required = false,
                                 default = nil)
  if valid_594362 != nil:
    section.add "X-Amz-Content-Sha256", valid_594362
  var valid_594363 = header.getOrDefault("X-Amz-Date")
  valid_594363 = validateParameter(valid_594363, JString, required = false,
                                 default = nil)
  if valid_594363 != nil:
    section.add "X-Amz-Date", valid_594363
  var valid_594364 = header.getOrDefault("X-Amz-Credential")
  valid_594364 = validateParameter(valid_594364, JString, required = false,
                                 default = nil)
  if valid_594364 != nil:
    section.add "X-Amz-Credential", valid_594364
  var valid_594365 = header.getOrDefault("X-Amz-Security-Token")
  valid_594365 = validateParameter(valid_594365, JString, required = false,
                                 default = nil)
  if valid_594365 != nil:
    section.add "X-Amz-Security-Token", valid_594365
  var valid_594366 = header.getOrDefault("X-Amz-Algorithm")
  valid_594366 = validateParameter(valid_594366, JString, required = false,
                                 default = nil)
  if valid_594366 != nil:
    section.add "X-Amz-Algorithm", valid_594366
  var valid_594367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594367 = validateParameter(valid_594367, JString, required = false,
                                 default = nil)
  if valid_594367 != nil:
    section.add "X-Amz-SignedHeaders", valid_594367
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594368: Call_GetDeleteDBParameterGroup_594355; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_594368.validator(path, query, header, formData, body)
  let scheme = call_594368.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594368.url(scheme.get, call_594368.host, call_594368.base,
                         call_594368.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594368, url, valid)

proc call*(call_594369: Call_GetDeleteDBParameterGroup_594355;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594370 = newJObject()
  add(query_594370, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_594370, "Action", newJString(Action))
  add(query_594370, "Version", newJString(Version))
  result = call_594369.call(nil, query_594370, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_594355(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_594356, base: "/",
    url: url_GetDeleteDBParameterGroup_594357,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSecurityGroup_594404 = ref object of OpenApiRestCall_592348
proc url_PostDeleteDBSecurityGroup_594406(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBSecurityGroup_594405(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594407 = query.getOrDefault("Action")
  valid_594407 = validateParameter(valid_594407, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_594407 != nil:
    section.add "Action", valid_594407
  var valid_594408 = query.getOrDefault("Version")
  valid_594408 = validateParameter(valid_594408, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594408 != nil:
    section.add "Version", valid_594408
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594409 = header.getOrDefault("X-Amz-Signature")
  valid_594409 = validateParameter(valid_594409, JString, required = false,
                                 default = nil)
  if valid_594409 != nil:
    section.add "X-Amz-Signature", valid_594409
  var valid_594410 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594410 = validateParameter(valid_594410, JString, required = false,
                                 default = nil)
  if valid_594410 != nil:
    section.add "X-Amz-Content-Sha256", valid_594410
  var valid_594411 = header.getOrDefault("X-Amz-Date")
  valid_594411 = validateParameter(valid_594411, JString, required = false,
                                 default = nil)
  if valid_594411 != nil:
    section.add "X-Amz-Date", valid_594411
  var valid_594412 = header.getOrDefault("X-Amz-Credential")
  valid_594412 = validateParameter(valid_594412, JString, required = false,
                                 default = nil)
  if valid_594412 != nil:
    section.add "X-Amz-Credential", valid_594412
  var valid_594413 = header.getOrDefault("X-Amz-Security-Token")
  valid_594413 = validateParameter(valid_594413, JString, required = false,
                                 default = nil)
  if valid_594413 != nil:
    section.add "X-Amz-Security-Token", valid_594413
  var valid_594414 = header.getOrDefault("X-Amz-Algorithm")
  valid_594414 = validateParameter(valid_594414, JString, required = false,
                                 default = nil)
  if valid_594414 != nil:
    section.add "X-Amz-Algorithm", valid_594414
  var valid_594415 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594415 = validateParameter(valid_594415, JString, required = false,
                                 default = nil)
  if valid_594415 != nil:
    section.add "X-Amz-SignedHeaders", valid_594415
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_594416 = formData.getOrDefault("DBSecurityGroupName")
  valid_594416 = validateParameter(valid_594416, JString, required = true,
                                 default = nil)
  if valid_594416 != nil:
    section.add "DBSecurityGroupName", valid_594416
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594417: Call_PostDeleteDBSecurityGroup_594404; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_594417.validator(path, query, header, formData, body)
  let scheme = call_594417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594417.url(scheme.get, call_594417.host, call_594417.base,
                         call_594417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594417, url, valid)

proc call*(call_594418: Call_PostDeleteDBSecurityGroup_594404;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594419 = newJObject()
  var formData_594420 = newJObject()
  add(formData_594420, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_594419, "Action", newJString(Action))
  add(query_594419, "Version", newJString(Version))
  result = call_594418.call(nil, query_594419, nil, formData_594420, nil)

var postDeleteDBSecurityGroup* = Call_PostDeleteDBSecurityGroup_594404(
    name: "postDeleteDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_PostDeleteDBSecurityGroup_594405, base: "/",
    url: url_PostDeleteDBSecurityGroup_594406,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSecurityGroup_594388 = ref object of OpenApiRestCall_592348
proc url_GetDeleteDBSecurityGroup_594390(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBSecurityGroup_594389(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_594391 = query.getOrDefault("DBSecurityGroupName")
  valid_594391 = validateParameter(valid_594391, JString, required = true,
                                 default = nil)
  if valid_594391 != nil:
    section.add "DBSecurityGroupName", valid_594391
  var valid_594392 = query.getOrDefault("Action")
  valid_594392 = validateParameter(valid_594392, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_594392 != nil:
    section.add "Action", valid_594392
  var valid_594393 = query.getOrDefault("Version")
  valid_594393 = validateParameter(valid_594393, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594393 != nil:
    section.add "Version", valid_594393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594394 = header.getOrDefault("X-Amz-Signature")
  valid_594394 = validateParameter(valid_594394, JString, required = false,
                                 default = nil)
  if valid_594394 != nil:
    section.add "X-Amz-Signature", valid_594394
  var valid_594395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594395 = validateParameter(valid_594395, JString, required = false,
                                 default = nil)
  if valid_594395 != nil:
    section.add "X-Amz-Content-Sha256", valid_594395
  var valid_594396 = header.getOrDefault("X-Amz-Date")
  valid_594396 = validateParameter(valid_594396, JString, required = false,
                                 default = nil)
  if valid_594396 != nil:
    section.add "X-Amz-Date", valid_594396
  var valid_594397 = header.getOrDefault("X-Amz-Credential")
  valid_594397 = validateParameter(valid_594397, JString, required = false,
                                 default = nil)
  if valid_594397 != nil:
    section.add "X-Amz-Credential", valid_594397
  var valid_594398 = header.getOrDefault("X-Amz-Security-Token")
  valid_594398 = validateParameter(valid_594398, JString, required = false,
                                 default = nil)
  if valid_594398 != nil:
    section.add "X-Amz-Security-Token", valid_594398
  var valid_594399 = header.getOrDefault("X-Amz-Algorithm")
  valid_594399 = validateParameter(valid_594399, JString, required = false,
                                 default = nil)
  if valid_594399 != nil:
    section.add "X-Amz-Algorithm", valid_594399
  var valid_594400 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594400 = validateParameter(valid_594400, JString, required = false,
                                 default = nil)
  if valid_594400 != nil:
    section.add "X-Amz-SignedHeaders", valid_594400
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594401: Call_GetDeleteDBSecurityGroup_594388; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_594401.validator(path, query, header, formData, body)
  let scheme = call_594401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594401.url(scheme.get, call_594401.host, call_594401.base,
                         call_594401.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594401, url, valid)

proc call*(call_594402: Call_GetDeleteDBSecurityGroup_594388;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594403 = newJObject()
  add(query_594403, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_594403, "Action", newJString(Action))
  add(query_594403, "Version", newJString(Version))
  result = call_594402.call(nil, query_594403, nil, nil, nil)

var getDeleteDBSecurityGroup* = Call_GetDeleteDBSecurityGroup_594388(
    name: "getDeleteDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_GetDeleteDBSecurityGroup_594389, base: "/",
    url: url_GetDeleteDBSecurityGroup_594390, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSnapshot_594437 = ref object of OpenApiRestCall_592348
proc url_PostDeleteDBSnapshot_594439(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBSnapshot_594438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594440 = query.getOrDefault("Action")
  valid_594440 = validateParameter(valid_594440, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_594440 != nil:
    section.add "Action", valid_594440
  var valid_594441 = query.getOrDefault("Version")
  valid_594441 = validateParameter(valid_594441, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594441 != nil:
    section.add "Version", valid_594441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594442 = header.getOrDefault("X-Amz-Signature")
  valid_594442 = validateParameter(valid_594442, JString, required = false,
                                 default = nil)
  if valid_594442 != nil:
    section.add "X-Amz-Signature", valid_594442
  var valid_594443 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594443 = validateParameter(valid_594443, JString, required = false,
                                 default = nil)
  if valid_594443 != nil:
    section.add "X-Amz-Content-Sha256", valid_594443
  var valid_594444 = header.getOrDefault("X-Amz-Date")
  valid_594444 = validateParameter(valid_594444, JString, required = false,
                                 default = nil)
  if valid_594444 != nil:
    section.add "X-Amz-Date", valid_594444
  var valid_594445 = header.getOrDefault("X-Amz-Credential")
  valid_594445 = validateParameter(valid_594445, JString, required = false,
                                 default = nil)
  if valid_594445 != nil:
    section.add "X-Amz-Credential", valid_594445
  var valid_594446 = header.getOrDefault("X-Amz-Security-Token")
  valid_594446 = validateParameter(valid_594446, JString, required = false,
                                 default = nil)
  if valid_594446 != nil:
    section.add "X-Amz-Security-Token", valid_594446
  var valid_594447 = header.getOrDefault("X-Amz-Algorithm")
  valid_594447 = validateParameter(valid_594447, JString, required = false,
                                 default = nil)
  if valid_594447 != nil:
    section.add "X-Amz-Algorithm", valid_594447
  var valid_594448 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594448 = validateParameter(valid_594448, JString, required = false,
                                 default = nil)
  if valid_594448 != nil:
    section.add "X-Amz-SignedHeaders", valid_594448
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_594449 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_594449 = validateParameter(valid_594449, JString, required = true,
                                 default = nil)
  if valid_594449 != nil:
    section.add "DBSnapshotIdentifier", valid_594449
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594450: Call_PostDeleteDBSnapshot_594437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_594450.validator(path, query, header, formData, body)
  let scheme = call_594450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594450.url(scheme.get, call_594450.host, call_594450.base,
                         call_594450.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594450, url, valid)

proc call*(call_594451: Call_PostDeleteDBSnapshot_594437;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594452 = newJObject()
  var formData_594453 = newJObject()
  add(formData_594453, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_594452, "Action", newJString(Action))
  add(query_594452, "Version", newJString(Version))
  result = call_594451.call(nil, query_594452, nil, formData_594453, nil)

var postDeleteDBSnapshot* = Call_PostDeleteDBSnapshot_594437(
    name: "postDeleteDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_PostDeleteDBSnapshot_594438, base: "/",
    url: url_PostDeleteDBSnapshot_594439, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSnapshot_594421 = ref object of OpenApiRestCall_592348
proc url_GetDeleteDBSnapshot_594423(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBSnapshot_594422(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_594424 = query.getOrDefault("DBSnapshotIdentifier")
  valid_594424 = validateParameter(valid_594424, JString, required = true,
                                 default = nil)
  if valid_594424 != nil:
    section.add "DBSnapshotIdentifier", valid_594424
  var valid_594425 = query.getOrDefault("Action")
  valid_594425 = validateParameter(valid_594425, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_594425 != nil:
    section.add "Action", valid_594425
  var valid_594426 = query.getOrDefault("Version")
  valid_594426 = validateParameter(valid_594426, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594426 != nil:
    section.add "Version", valid_594426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594427 = header.getOrDefault("X-Amz-Signature")
  valid_594427 = validateParameter(valid_594427, JString, required = false,
                                 default = nil)
  if valid_594427 != nil:
    section.add "X-Amz-Signature", valid_594427
  var valid_594428 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594428 = validateParameter(valid_594428, JString, required = false,
                                 default = nil)
  if valid_594428 != nil:
    section.add "X-Amz-Content-Sha256", valid_594428
  var valid_594429 = header.getOrDefault("X-Amz-Date")
  valid_594429 = validateParameter(valid_594429, JString, required = false,
                                 default = nil)
  if valid_594429 != nil:
    section.add "X-Amz-Date", valid_594429
  var valid_594430 = header.getOrDefault("X-Amz-Credential")
  valid_594430 = validateParameter(valid_594430, JString, required = false,
                                 default = nil)
  if valid_594430 != nil:
    section.add "X-Amz-Credential", valid_594430
  var valid_594431 = header.getOrDefault("X-Amz-Security-Token")
  valid_594431 = validateParameter(valid_594431, JString, required = false,
                                 default = nil)
  if valid_594431 != nil:
    section.add "X-Amz-Security-Token", valid_594431
  var valid_594432 = header.getOrDefault("X-Amz-Algorithm")
  valid_594432 = validateParameter(valid_594432, JString, required = false,
                                 default = nil)
  if valid_594432 != nil:
    section.add "X-Amz-Algorithm", valid_594432
  var valid_594433 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594433 = validateParameter(valid_594433, JString, required = false,
                                 default = nil)
  if valid_594433 != nil:
    section.add "X-Amz-SignedHeaders", valid_594433
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594434: Call_GetDeleteDBSnapshot_594421; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_594434.validator(path, query, header, formData, body)
  let scheme = call_594434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594434.url(scheme.get, call_594434.host, call_594434.base,
                         call_594434.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594434, url, valid)

proc call*(call_594435: Call_GetDeleteDBSnapshot_594421;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594436 = newJObject()
  add(query_594436, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_594436, "Action", newJString(Action))
  add(query_594436, "Version", newJString(Version))
  result = call_594435.call(nil, query_594436, nil, nil, nil)

var getDeleteDBSnapshot* = Call_GetDeleteDBSnapshot_594421(
    name: "getDeleteDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_GetDeleteDBSnapshot_594422, base: "/",
    url: url_GetDeleteDBSnapshot_594423, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_594470 = ref object of OpenApiRestCall_592348
proc url_PostDeleteDBSubnetGroup_594472(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBSubnetGroup_594471(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594473 = query.getOrDefault("Action")
  valid_594473 = validateParameter(valid_594473, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_594473 != nil:
    section.add "Action", valid_594473
  var valid_594474 = query.getOrDefault("Version")
  valid_594474 = validateParameter(valid_594474, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594474 != nil:
    section.add "Version", valid_594474
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594475 = header.getOrDefault("X-Amz-Signature")
  valid_594475 = validateParameter(valid_594475, JString, required = false,
                                 default = nil)
  if valid_594475 != nil:
    section.add "X-Amz-Signature", valid_594475
  var valid_594476 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594476 = validateParameter(valid_594476, JString, required = false,
                                 default = nil)
  if valid_594476 != nil:
    section.add "X-Amz-Content-Sha256", valid_594476
  var valid_594477 = header.getOrDefault("X-Amz-Date")
  valid_594477 = validateParameter(valid_594477, JString, required = false,
                                 default = nil)
  if valid_594477 != nil:
    section.add "X-Amz-Date", valid_594477
  var valid_594478 = header.getOrDefault("X-Amz-Credential")
  valid_594478 = validateParameter(valid_594478, JString, required = false,
                                 default = nil)
  if valid_594478 != nil:
    section.add "X-Amz-Credential", valid_594478
  var valid_594479 = header.getOrDefault("X-Amz-Security-Token")
  valid_594479 = validateParameter(valid_594479, JString, required = false,
                                 default = nil)
  if valid_594479 != nil:
    section.add "X-Amz-Security-Token", valid_594479
  var valid_594480 = header.getOrDefault("X-Amz-Algorithm")
  valid_594480 = validateParameter(valid_594480, JString, required = false,
                                 default = nil)
  if valid_594480 != nil:
    section.add "X-Amz-Algorithm", valid_594480
  var valid_594481 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594481 = validateParameter(valid_594481, JString, required = false,
                                 default = nil)
  if valid_594481 != nil:
    section.add "X-Amz-SignedHeaders", valid_594481
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_594482 = formData.getOrDefault("DBSubnetGroupName")
  valid_594482 = validateParameter(valid_594482, JString, required = true,
                                 default = nil)
  if valid_594482 != nil:
    section.add "DBSubnetGroupName", valid_594482
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594483: Call_PostDeleteDBSubnetGroup_594470; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_594483.validator(path, query, header, formData, body)
  let scheme = call_594483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594483.url(scheme.get, call_594483.host, call_594483.base,
                         call_594483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594483, url, valid)

proc call*(call_594484: Call_PostDeleteDBSubnetGroup_594470;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_594485 = newJObject()
  var formData_594486 = newJObject()
  add(query_594485, "Action", newJString(Action))
  add(formData_594486, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_594485, "Version", newJString(Version))
  result = call_594484.call(nil, query_594485, nil, formData_594486, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_594470(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_594471, base: "/",
    url: url_PostDeleteDBSubnetGroup_594472, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_594454 = ref object of OpenApiRestCall_592348
proc url_GetDeleteDBSubnetGroup_594456(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBSubnetGroup_594455(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594457 = query.getOrDefault("Action")
  valid_594457 = validateParameter(valid_594457, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_594457 != nil:
    section.add "Action", valid_594457
  var valid_594458 = query.getOrDefault("DBSubnetGroupName")
  valid_594458 = validateParameter(valid_594458, JString, required = true,
                                 default = nil)
  if valid_594458 != nil:
    section.add "DBSubnetGroupName", valid_594458
  var valid_594459 = query.getOrDefault("Version")
  valid_594459 = validateParameter(valid_594459, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594459 != nil:
    section.add "Version", valid_594459
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594460 = header.getOrDefault("X-Amz-Signature")
  valid_594460 = validateParameter(valid_594460, JString, required = false,
                                 default = nil)
  if valid_594460 != nil:
    section.add "X-Amz-Signature", valid_594460
  var valid_594461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594461 = validateParameter(valid_594461, JString, required = false,
                                 default = nil)
  if valid_594461 != nil:
    section.add "X-Amz-Content-Sha256", valid_594461
  var valid_594462 = header.getOrDefault("X-Amz-Date")
  valid_594462 = validateParameter(valid_594462, JString, required = false,
                                 default = nil)
  if valid_594462 != nil:
    section.add "X-Amz-Date", valid_594462
  var valid_594463 = header.getOrDefault("X-Amz-Credential")
  valid_594463 = validateParameter(valid_594463, JString, required = false,
                                 default = nil)
  if valid_594463 != nil:
    section.add "X-Amz-Credential", valid_594463
  var valid_594464 = header.getOrDefault("X-Amz-Security-Token")
  valid_594464 = validateParameter(valid_594464, JString, required = false,
                                 default = nil)
  if valid_594464 != nil:
    section.add "X-Amz-Security-Token", valid_594464
  var valid_594465 = header.getOrDefault("X-Amz-Algorithm")
  valid_594465 = validateParameter(valid_594465, JString, required = false,
                                 default = nil)
  if valid_594465 != nil:
    section.add "X-Amz-Algorithm", valid_594465
  var valid_594466 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594466 = validateParameter(valid_594466, JString, required = false,
                                 default = nil)
  if valid_594466 != nil:
    section.add "X-Amz-SignedHeaders", valid_594466
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594467: Call_GetDeleteDBSubnetGroup_594454; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_594467.validator(path, query, header, formData, body)
  let scheme = call_594467.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594467.url(scheme.get, call_594467.host, call_594467.base,
                         call_594467.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594467, url, valid)

proc call*(call_594468: Call_GetDeleteDBSubnetGroup_594454;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_594469 = newJObject()
  add(query_594469, "Action", newJString(Action))
  add(query_594469, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_594469, "Version", newJString(Version))
  result = call_594468.call(nil, query_594469, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_594454(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_594455, base: "/",
    url: url_GetDeleteDBSubnetGroup_594456, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_594503 = ref object of OpenApiRestCall_592348
proc url_PostDeleteEventSubscription_594505(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteEventSubscription_594504(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594506 = query.getOrDefault("Action")
  valid_594506 = validateParameter(valid_594506, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_594506 != nil:
    section.add "Action", valid_594506
  var valid_594507 = query.getOrDefault("Version")
  valid_594507 = validateParameter(valid_594507, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594507 != nil:
    section.add "Version", valid_594507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594508 = header.getOrDefault("X-Amz-Signature")
  valid_594508 = validateParameter(valid_594508, JString, required = false,
                                 default = nil)
  if valid_594508 != nil:
    section.add "X-Amz-Signature", valid_594508
  var valid_594509 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594509 = validateParameter(valid_594509, JString, required = false,
                                 default = nil)
  if valid_594509 != nil:
    section.add "X-Amz-Content-Sha256", valid_594509
  var valid_594510 = header.getOrDefault("X-Amz-Date")
  valid_594510 = validateParameter(valid_594510, JString, required = false,
                                 default = nil)
  if valid_594510 != nil:
    section.add "X-Amz-Date", valid_594510
  var valid_594511 = header.getOrDefault("X-Amz-Credential")
  valid_594511 = validateParameter(valid_594511, JString, required = false,
                                 default = nil)
  if valid_594511 != nil:
    section.add "X-Amz-Credential", valid_594511
  var valid_594512 = header.getOrDefault("X-Amz-Security-Token")
  valid_594512 = validateParameter(valid_594512, JString, required = false,
                                 default = nil)
  if valid_594512 != nil:
    section.add "X-Amz-Security-Token", valid_594512
  var valid_594513 = header.getOrDefault("X-Amz-Algorithm")
  valid_594513 = validateParameter(valid_594513, JString, required = false,
                                 default = nil)
  if valid_594513 != nil:
    section.add "X-Amz-Algorithm", valid_594513
  var valid_594514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594514 = validateParameter(valid_594514, JString, required = false,
                                 default = nil)
  if valid_594514 != nil:
    section.add "X-Amz-SignedHeaders", valid_594514
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_594515 = formData.getOrDefault("SubscriptionName")
  valid_594515 = validateParameter(valid_594515, JString, required = true,
                                 default = nil)
  if valid_594515 != nil:
    section.add "SubscriptionName", valid_594515
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594516: Call_PostDeleteEventSubscription_594503; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_594516.validator(path, query, header, formData, body)
  let scheme = call_594516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594516.url(scheme.get, call_594516.host, call_594516.base,
                         call_594516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594516, url, valid)

proc call*(call_594517: Call_PostDeleteEventSubscription_594503;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594518 = newJObject()
  var formData_594519 = newJObject()
  add(formData_594519, "SubscriptionName", newJString(SubscriptionName))
  add(query_594518, "Action", newJString(Action))
  add(query_594518, "Version", newJString(Version))
  result = call_594517.call(nil, query_594518, nil, formData_594519, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_594503(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_594504, base: "/",
    url: url_PostDeleteEventSubscription_594505,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_594487 = ref object of OpenApiRestCall_592348
proc url_GetDeleteEventSubscription_594489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteEventSubscription_594488(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_594490 = query.getOrDefault("SubscriptionName")
  valid_594490 = validateParameter(valid_594490, JString, required = true,
                                 default = nil)
  if valid_594490 != nil:
    section.add "SubscriptionName", valid_594490
  var valid_594491 = query.getOrDefault("Action")
  valid_594491 = validateParameter(valid_594491, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_594491 != nil:
    section.add "Action", valid_594491
  var valid_594492 = query.getOrDefault("Version")
  valid_594492 = validateParameter(valid_594492, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594492 != nil:
    section.add "Version", valid_594492
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594493 = header.getOrDefault("X-Amz-Signature")
  valid_594493 = validateParameter(valid_594493, JString, required = false,
                                 default = nil)
  if valid_594493 != nil:
    section.add "X-Amz-Signature", valid_594493
  var valid_594494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594494 = validateParameter(valid_594494, JString, required = false,
                                 default = nil)
  if valid_594494 != nil:
    section.add "X-Amz-Content-Sha256", valid_594494
  var valid_594495 = header.getOrDefault("X-Amz-Date")
  valid_594495 = validateParameter(valid_594495, JString, required = false,
                                 default = nil)
  if valid_594495 != nil:
    section.add "X-Amz-Date", valid_594495
  var valid_594496 = header.getOrDefault("X-Amz-Credential")
  valid_594496 = validateParameter(valid_594496, JString, required = false,
                                 default = nil)
  if valid_594496 != nil:
    section.add "X-Amz-Credential", valid_594496
  var valid_594497 = header.getOrDefault("X-Amz-Security-Token")
  valid_594497 = validateParameter(valid_594497, JString, required = false,
                                 default = nil)
  if valid_594497 != nil:
    section.add "X-Amz-Security-Token", valid_594497
  var valid_594498 = header.getOrDefault("X-Amz-Algorithm")
  valid_594498 = validateParameter(valid_594498, JString, required = false,
                                 default = nil)
  if valid_594498 != nil:
    section.add "X-Amz-Algorithm", valid_594498
  var valid_594499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594499 = validateParameter(valid_594499, JString, required = false,
                                 default = nil)
  if valid_594499 != nil:
    section.add "X-Amz-SignedHeaders", valid_594499
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594500: Call_GetDeleteEventSubscription_594487; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_594500.validator(path, query, header, formData, body)
  let scheme = call_594500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594500.url(scheme.get, call_594500.host, call_594500.base,
                         call_594500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594500, url, valid)

proc call*(call_594501: Call_GetDeleteEventSubscription_594487;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594502 = newJObject()
  add(query_594502, "SubscriptionName", newJString(SubscriptionName))
  add(query_594502, "Action", newJString(Action))
  add(query_594502, "Version", newJString(Version))
  result = call_594501.call(nil, query_594502, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_594487(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_594488, base: "/",
    url: url_GetDeleteEventSubscription_594489,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGlobalCluster_594536 = ref object of OpenApiRestCall_592348
proc url_PostDeleteGlobalCluster_594538(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteGlobalCluster_594537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594539 = query.getOrDefault("Action")
  valid_594539 = validateParameter(valid_594539, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_594539 != nil:
    section.add "Action", valid_594539
  var valid_594540 = query.getOrDefault("Version")
  valid_594540 = validateParameter(valid_594540, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594540 != nil:
    section.add "Version", valid_594540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594541 = header.getOrDefault("X-Amz-Signature")
  valid_594541 = validateParameter(valid_594541, JString, required = false,
                                 default = nil)
  if valid_594541 != nil:
    section.add "X-Amz-Signature", valid_594541
  var valid_594542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594542 = validateParameter(valid_594542, JString, required = false,
                                 default = nil)
  if valid_594542 != nil:
    section.add "X-Amz-Content-Sha256", valid_594542
  var valid_594543 = header.getOrDefault("X-Amz-Date")
  valid_594543 = validateParameter(valid_594543, JString, required = false,
                                 default = nil)
  if valid_594543 != nil:
    section.add "X-Amz-Date", valid_594543
  var valid_594544 = header.getOrDefault("X-Amz-Credential")
  valid_594544 = validateParameter(valid_594544, JString, required = false,
                                 default = nil)
  if valid_594544 != nil:
    section.add "X-Amz-Credential", valid_594544
  var valid_594545 = header.getOrDefault("X-Amz-Security-Token")
  valid_594545 = validateParameter(valid_594545, JString, required = false,
                                 default = nil)
  if valid_594545 != nil:
    section.add "X-Amz-Security-Token", valid_594545
  var valid_594546 = header.getOrDefault("X-Amz-Algorithm")
  valid_594546 = validateParameter(valid_594546, JString, required = false,
                                 default = nil)
  if valid_594546 != nil:
    section.add "X-Amz-Algorithm", valid_594546
  var valid_594547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594547 = validateParameter(valid_594547, JString, required = false,
                                 default = nil)
  if valid_594547 != nil:
    section.add "X-Amz-SignedHeaders", valid_594547
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_594548 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_594548 = validateParameter(valid_594548, JString, required = true,
                                 default = nil)
  if valid_594548 != nil:
    section.add "GlobalClusterIdentifier", valid_594548
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594549: Call_PostDeleteGlobalCluster_594536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594549.validator(path, query, header, formData, body)
  let scheme = call_594549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594549.url(scheme.get, call_594549.host, call_594549.base,
                         call_594549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594549, url, valid)

proc call*(call_594550: Call_PostDeleteGlobalCluster_594536;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594551 = newJObject()
  var formData_594552 = newJObject()
  add(formData_594552, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_594551, "Action", newJString(Action))
  add(query_594551, "Version", newJString(Version))
  result = call_594550.call(nil, query_594551, nil, formData_594552, nil)

var postDeleteGlobalCluster* = Call_PostDeleteGlobalCluster_594536(
    name: "postDeleteGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_PostDeleteGlobalCluster_594537, base: "/",
    url: url_PostDeleteGlobalCluster_594538, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGlobalCluster_594520 = ref object of OpenApiRestCall_592348
proc url_GetDeleteGlobalCluster_594522(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteGlobalCluster_594521(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_594523 = query.getOrDefault("GlobalClusterIdentifier")
  valid_594523 = validateParameter(valid_594523, JString, required = true,
                                 default = nil)
  if valid_594523 != nil:
    section.add "GlobalClusterIdentifier", valid_594523
  var valid_594524 = query.getOrDefault("Action")
  valid_594524 = validateParameter(valid_594524, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_594524 != nil:
    section.add "Action", valid_594524
  var valid_594525 = query.getOrDefault("Version")
  valid_594525 = validateParameter(valid_594525, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594525 != nil:
    section.add "Version", valid_594525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594526 = header.getOrDefault("X-Amz-Signature")
  valid_594526 = validateParameter(valid_594526, JString, required = false,
                                 default = nil)
  if valid_594526 != nil:
    section.add "X-Amz-Signature", valid_594526
  var valid_594527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594527 = validateParameter(valid_594527, JString, required = false,
                                 default = nil)
  if valid_594527 != nil:
    section.add "X-Amz-Content-Sha256", valid_594527
  var valid_594528 = header.getOrDefault("X-Amz-Date")
  valid_594528 = validateParameter(valid_594528, JString, required = false,
                                 default = nil)
  if valid_594528 != nil:
    section.add "X-Amz-Date", valid_594528
  var valid_594529 = header.getOrDefault("X-Amz-Credential")
  valid_594529 = validateParameter(valid_594529, JString, required = false,
                                 default = nil)
  if valid_594529 != nil:
    section.add "X-Amz-Credential", valid_594529
  var valid_594530 = header.getOrDefault("X-Amz-Security-Token")
  valid_594530 = validateParameter(valid_594530, JString, required = false,
                                 default = nil)
  if valid_594530 != nil:
    section.add "X-Amz-Security-Token", valid_594530
  var valid_594531 = header.getOrDefault("X-Amz-Algorithm")
  valid_594531 = validateParameter(valid_594531, JString, required = false,
                                 default = nil)
  if valid_594531 != nil:
    section.add "X-Amz-Algorithm", valid_594531
  var valid_594532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594532 = validateParameter(valid_594532, JString, required = false,
                                 default = nil)
  if valid_594532 != nil:
    section.add "X-Amz-SignedHeaders", valid_594532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594533: Call_GetDeleteGlobalCluster_594520; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594533.validator(path, query, header, formData, body)
  let scheme = call_594533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594533.url(scheme.get, call_594533.host, call_594533.base,
                         call_594533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594533, url, valid)

proc call*(call_594534: Call_GetDeleteGlobalCluster_594520;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594535 = newJObject()
  add(query_594535, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_594535, "Action", newJString(Action))
  add(query_594535, "Version", newJString(Version))
  result = call_594534.call(nil, query_594535, nil, nil, nil)

var getDeleteGlobalCluster* = Call_GetDeleteGlobalCluster_594520(
    name: "getDeleteGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_GetDeleteGlobalCluster_594521, base: "/",
    url: url_GetDeleteGlobalCluster_594522, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOptionGroup_594569 = ref object of OpenApiRestCall_592348
proc url_PostDeleteOptionGroup_594571(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteOptionGroup_594570(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594572 = query.getOrDefault("Action")
  valid_594572 = validateParameter(valid_594572, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_594572 != nil:
    section.add "Action", valid_594572
  var valid_594573 = query.getOrDefault("Version")
  valid_594573 = validateParameter(valid_594573, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594573 != nil:
    section.add "Version", valid_594573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594574 = header.getOrDefault("X-Amz-Signature")
  valid_594574 = validateParameter(valid_594574, JString, required = false,
                                 default = nil)
  if valid_594574 != nil:
    section.add "X-Amz-Signature", valid_594574
  var valid_594575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594575 = validateParameter(valid_594575, JString, required = false,
                                 default = nil)
  if valid_594575 != nil:
    section.add "X-Amz-Content-Sha256", valid_594575
  var valid_594576 = header.getOrDefault("X-Amz-Date")
  valid_594576 = validateParameter(valid_594576, JString, required = false,
                                 default = nil)
  if valid_594576 != nil:
    section.add "X-Amz-Date", valid_594576
  var valid_594577 = header.getOrDefault("X-Amz-Credential")
  valid_594577 = validateParameter(valid_594577, JString, required = false,
                                 default = nil)
  if valid_594577 != nil:
    section.add "X-Amz-Credential", valid_594577
  var valid_594578 = header.getOrDefault("X-Amz-Security-Token")
  valid_594578 = validateParameter(valid_594578, JString, required = false,
                                 default = nil)
  if valid_594578 != nil:
    section.add "X-Amz-Security-Token", valid_594578
  var valid_594579 = header.getOrDefault("X-Amz-Algorithm")
  valid_594579 = validateParameter(valid_594579, JString, required = false,
                                 default = nil)
  if valid_594579 != nil:
    section.add "X-Amz-Algorithm", valid_594579
  var valid_594580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594580 = validateParameter(valid_594580, JString, required = false,
                                 default = nil)
  if valid_594580 != nil:
    section.add "X-Amz-SignedHeaders", valid_594580
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_594581 = formData.getOrDefault("OptionGroupName")
  valid_594581 = validateParameter(valid_594581, JString, required = true,
                                 default = nil)
  if valid_594581 != nil:
    section.add "OptionGroupName", valid_594581
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594582: Call_PostDeleteOptionGroup_594569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_594582.validator(path, query, header, formData, body)
  let scheme = call_594582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594582.url(scheme.get, call_594582.host, call_594582.base,
                         call_594582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594582, url, valid)

proc call*(call_594583: Call_PostDeleteOptionGroup_594569; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_594584 = newJObject()
  var formData_594585 = newJObject()
  add(query_594584, "Action", newJString(Action))
  add(formData_594585, "OptionGroupName", newJString(OptionGroupName))
  add(query_594584, "Version", newJString(Version))
  result = call_594583.call(nil, query_594584, nil, formData_594585, nil)

var postDeleteOptionGroup* = Call_PostDeleteOptionGroup_594569(
    name: "postDeleteOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_PostDeleteOptionGroup_594570, base: "/",
    url: url_PostDeleteOptionGroup_594571, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOptionGroup_594553 = ref object of OpenApiRestCall_592348
proc url_GetDeleteOptionGroup_594555(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteOptionGroup_594554(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594556 = query.getOrDefault("Action")
  valid_594556 = validateParameter(valid_594556, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_594556 != nil:
    section.add "Action", valid_594556
  var valid_594557 = query.getOrDefault("OptionGroupName")
  valid_594557 = validateParameter(valid_594557, JString, required = true,
                                 default = nil)
  if valid_594557 != nil:
    section.add "OptionGroupName", valid_594557
  var valid_594558 = query.getOrDefault("Version")
  valid_594558 = validateParameter(valid_594558, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594558 != nil:
    section.add "Version", valid_594558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594559 = header.getOrDefault("X-Amz-Signature")
  valid_594559 = validateParameter(valid_594559, JString, required = false,
                                 default = nil)
  if valid_594559 != nil:
    section.add "X-Amz-Signature", valid_594559
  var valid_594560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594560 = validateParameter(valid_594560, JString, required = false,
                                 default = nil)
  if valid_594560 != nil:
    section.add "X-Amz-Content-Sha256", valid_594560
  var valid_594561 = header.getOrDefault("X-Amz-Date")
  valid_594561 = validateParameter(valid_594561, JString, required = false,
                                 default = nil)
  if valid_594561 != nil:
    section.add "X-Amz-Date", valid_594561
  var valid_594562 = header.getOrDefault("X-Amz-Credential")
  valid_594562 = validateParameter(valid_594562, JString, required = false,
                                 default = nil)
  if valid_594562 != nil:
    section.add "X-Amz-Credential", valid_594562
  var valid_594563 = header.getOrDefault("X-Amz-Security-Token")
  valid_594563 = validateParameter(valid_594563, JString, required = false,
                                 default = nil)
  if valid_594563 != nil:
    section.add "X-Amz-Security-Token", valid_594563
  var valid_594564 = header.getOrDefault("X-Amz-Algorithm")
  valid_594564 = validateParameter(valid_594564, JString, required = false,
                                 default = nil)
  if valid_594564 != nil:
    section.add "X-Amz-Algorithm", valid_594564
  var valid_594565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594565 = validateParameter(valid_594565, JString, required = false,
                                 default = nil)
  if valid_594565 != nil:
    section.add "X-Amz-SignedHeaders", valid_594565
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594566: Call_GetDeleteOptionGroup_594553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_594566.validator(path, query, header, formData, body)
  let scheme = call_594566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594566.url(scheme.get, call_594566.host, call_594566.base,
                         call_594566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594566, url, valid)

proc call*(call_594567: Call_GetDeleteOptionGroup_594553; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_594568 = newJObject()
  add(query_594568, "Action", newJString(Action))
  add(query_594568, "OptionGroupName", newJString(OptionGroupName))
  add(query_594568, "Version", newJString(Version))
  result = call_594567.call(nil, query_594568, nil, nil, nil)

var getDeleteOptionGroup* = Call_GetDeleteOptionGroup_594553(
    name: "getDeleteOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_GetDeleteOptionGroup_594554, base: "/",
    url: url_GetDeleteOptionGroup_594555, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_594601 = ref object of OpenApiRestCall_592348
proc url_PostDescribeAccountAttributes_594603(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAccountAttributes_594602(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594604 = query.getOrDefault("Action")
  valid_594604 = validateParameter(valid_594604, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_594604 != nil:
    section.add "Action", valid_594604
  var valid_594605 = query.getOrDefault("Version")
  valid_594605 = validateParameter(valid_594605, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594605 != nil:
    section.add "Version", valid_594605
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594606 = header.getOrDefault("X-Amz-Signature")
  valid_594606 = validateParameter(valid_594606, JString, required = false,
                                 default = nil)
  if valid_594606 != nil:
    section.add "X-Amz-Signature", valid_594606
  var valid_594607 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594607 = validateParameter(valid_594607, JString, required = false,
                                 default = nil)
  if valid_594607 != nil:
    section.add "X-Amz-Content-Sha256", valid_594607
  var valid_594608 = header.getOrDefault("X-Amz-Date")
  valid_594608 = validateParameter(valid_594608, JString, required = false,
                                 default = nil)
  if valid_594608 != nil:
    section.add "X-Amz-Date", valid_594608
  var valid_594609 = header.getOrDefault("X-Amz-Credential")
  valid_594609 = validateParameter(valid_594609, JString, required = false,
                                 default = nil)
  if valid_594609 != nil:
    section.add "X-Amz-Credential", valid_594609
  var valid_594610 = header.getOrDefault("X-Amz-Security-Token")
  valid_594610 = validateParameter(valid_594610, JString, required = false,
                                 default = nil)
  if valid_594610 != nil:
    section.add "X-Amz-Security-Token", valid_594610
  var valid_594611 = header.getOrDefault("X-Amz-Algorithm")
  valid_594611 = validateParameter(valid_594611, JString, required = false,
                                 default = nil)
  if valid_594611 != nil:
    section.add "X-Amz-Algorithm", valid_594611
  var valid_594612 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594612 = validateParameter(valid_594612, JString, required = false,
                                 default = nil)
  if valid_594612 != nil:
    section.add "X-Amz-SignedHeaders", valid_594612
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594613: Call_PostDescribeAccountAttributes_594601; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_594613.validator(path, query, header, formData, body)
  let scheme = call_594613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594613.url(scheme.get, call_594613.host, call_594613.base,
                         call_594613.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594613, url, valid)

proc call*(call_594614: Call_PostDescribeAccountAttributes_594601;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594615 = newJObject()
  add(query_594615, "Action", newJString(Action))
  add(query_594615, "Version", newJString(Version))
  result = call_594614.call(nil, query_594615, nil, nil, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_594601(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_594602, base: "/",
    url: url_PostDescribeAccountAttributes_594603,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_594586 = ref object of OpenApiRestCall_592348
proc url_GetDescribeAccountAttributes_594588(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAccountAttributes_594587(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594589 = query.getOrDefault("Action")
  valid_594589 = validateParameter(valid_594589, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_594589 != nil:
    section.add "Action", valid_594589
  var valid_594590 = query.getOrDefault("Version")
  valid_594590 = validateParameter(valid_594590, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594590 != nil:
    section.add "Version", valid_594590
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594591 = header.getOrDefault("X-Amz-Signature")
  valid_594591 = validateParameter(valid_594591, JString, required = false,
                                 default = nil)
  if valid_594591 != nil:
    section.add "X-Amz-Signature", valid_594591
  var valid_594592 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594592 = validateParameter(valid_594592, JString, required = false,
                                 default = nil)
  if valid_594592 != nil:
    section.add "X-Amz-Content-Sha256", valid_594592
  var valid_594593 = header.getOrDefault("X-Amz-Date")
  valid_594593 = validateParameter(valid_594593, JString, required = false,
                                 default = nil)
  if valid_594593 != nil:
    section.add "X-Amz-Date", valid_594593
  var valid_594594 = header.getOrDefault("X-Amz-Credential")
  valid_594594 = validateParameter(valid_594594, JString, required = false,
                                 default = nil)
  if valid_594594 != nil:
    section.add "X-Amz-Credential", valid_594594
  var valid_594595 = header.getOrDefault("X-Amz-Security-Token")
  valid_594595 = validateParameter(valid_594595, JString, required = false,
                                 default = nil)
  if valid_594595 != nil:
    section.add "X-Amz-Security-Token", valid_594595
  var valid_594596 = header.getOrDefault("X-Amz-Algorithm")
  valid_594596 = validateParameter(valid_594596, JString, required = false,
                                 default = nil)
  if valid_594596 != nil:
    section.add "X-Amz-Algorithm", valid_594596
  var valid_594597 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594597 = validateParameter(valid_594597, JString, required = false,
                                 default = nil)
  if valid_594597 != nil:
    section.add "X-Amz-SignedHeaders", valid_594597
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594598: Call_GetDescribeAccountAttributes_594586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_594598.validator(path, query, header, formData, body)
  let scheme = call_594598.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594598.url(scheme.get, call_594598.host, call_594598.base,
                         call_594598.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594598, url, valid)

proc call*(call_594599: Call_GetDescribeAccountAttributes_594586;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594600 = newJObject()
  add(query_594600, "Action", newJString(Action))
  add(query_594600, "Version", newJString(Version))
  result = call_594599.call(nil, query_594600, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_594586(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_594587, base: "/",
    url: url_GetDescribeAccountAttributes_594588,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCertificates_594635 = ref object of OpenApiRestCall_592348
proc url_PostDescribeCertificates_594637(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCertificates_594636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594638 = query.getOrDefault("Action")
  valid_594638 = validateParameter(valid_594638, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_594638 != nil:
    section.add "Action", valid_594638
  var valid_594639 = query.getOrDefault("Version")
  valid_594639 = validateParameter(valid_594639, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594639 != nil:
    section.add "Version", valid_594639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594640 = header.getOrDefault("X-Amz-Signature")
  valid_594640 = validateParameter(valid_594640, JString, required = false,
                                 default = nil)
  if valid_594640 != nil:
    section.add "X-Amz-Signature", valid_594640
  var valid_594641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594641 = validateParameter(valid_594641, JString, required = false,
                                 default = nil)
  if valid_594641 != nil:
    section.add "X-Amz-Content-Sha256", valid_594641
  var valid_594642 = header.getOrDefault("X-Amz-Date")
  valid_594642 = validateParameter(valid_594642, JString, required = false,
                                 default = nil)
  if valid_594642 != nil:
    section.add "X-Amz-Date", valid_594642
  var valid_594643 = header.getOrDefault("X-Amz-Credential")
  valid_594643 = validateParameter(valid_594643, JString, required = false,
                                 default = nil)
  if valid_594643 != nil:
    section.add "X-Amz-Credential", valid_594643
  var valid_594644 = header.getOrDefault("X-Amz-Security-Token")
  valid_594644 = validateParameter(valid_594644, JString, required = false,
                                 default = nil)
  if valid_594644 != nil:
    section.add "X-Amz-Security-Token", valid_594644
  var valid_594645 = header.getOrDefault("X-Amz-Algorithm")
  valid_594645 = validateParameter(valid_594645, JString, required = false,
                                 default = nil)
  if valid_594645 != nil:
    section.add "X-Amz-Algorithm", valid_594645
  var valid_594646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594646 = validateParameter(valid_594646, JString, required = false,
                                 default = nil)
  if valid_594646 != nil:
    section.add "X-Amz-SignedHeaders", valid_594646
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_594647 = formData.getOrDefault("MaxRecords")
  valid_594647 = validateParameter(valid_594647, JInt, required = false, default = nil)
  if valid_594647 != nil:
    section.add "MaxRecords", valid_594647
  var valid_594648 = formData.getOrDefault("Marker")
  valid_594648 = validateParameter(valid_594648, JString, required = false,
                                 default = nil)
  if valid_594648 != nil:
    section.add "Marker", valid_594648
  var valid_594649 = formData.getOrDefault("CertificateIdentifier")
  valid_594649 = validateParameter(valid_594649, JString, required = false,
                                 default = nil)
  if valid_594649 != nil:
    section.add "CertificateIdentifier", valid_594649
  var valid_594650 = formData.getOrDefault("Filters")
  valid_594650 = validateParameter(valid_594650, JArray, required = false,
                                 default = nil)
  if valid_594650 != nil:
    section.add "Filters", valid_594650
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594651: Call_PostDescribeCertificates_594635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_594651.validator(path, query, header, formData, body)
  let scheme = call_594651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594651.url(scheme.get, call_594651.host, call_594651.base,
                         call_594651.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594651, url, valid)

proc call*(call_594652: Call_PostDescribeCertificates_594635; MaxRecords: int = 0;
          Marker: string = ""; CertificateIdentifier: string = "";
          Action: string = "DescribeCertificates"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_594653 = newJObject()
  var formData_594654 = newJObject()
  add(formData_594654, "MaxRecords", newJInt(MaxRecords))
  add(formData_594654, "Marker", newJString(Marker))
  add(formData_594654, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_594653, "Action", newJString(Action))
  if Filters != nil:
    formData_594654.add "Filters", Filters
  add(query_594653, "Version", newJString(Version))
  result = call_594652.call(nil, query_594653, nil, formData_594654, nil)

var postDescribeCertificates* = Call_PostDescribeCertificates_594635(
    name: "postDescribeCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_PostDescribeCertificates_594636, base: "/",
    url: url_PostDescribeCertificates_594637, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCertificates_594616 = ref object of OpenApiRestCall_592348
proc url_GetDescribeCertificates_594618(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCertificates_594617(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_594619 = query.getOrDefault("Marker")
  valid_594619 = validateParameter(valid_594619, JString, required = false,
                                 default = nil)
  if valid_594619 != nil:
    section.add "Marker", valid_594619
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594620 = query.getOrDefault("Action")
  valid_594620 = validateParameter(valid_594620, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_594620 != nil:
    section.add "Action", valid_594620
  var valid_594621 = query.getOrDefault("Version")
  valid_594621 = validateParameter(valid_594621, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594621 != nil:
    section.add "Version", valid_594621
  var valid_594622 = query.getOrDefault("CertificateIdentifier")
  valid_594622 = validateParameter(valid_594622, JString, required = false,
                                 default = nil)
  if valid_594622 != nil:
    section.add "CertificateIdentifier", valid_594622
  var valid_594623 = query.getOrDefault("Filters")
  valid_594623 = validateParameter(valid_594623, JArray, required = false,
                                 default = nil)
  if valid_594623 != nil:
    section.add "Filters", valid_594623
  var valid_594624 = query.getOrDefault("MaxRecords")
  valid_594624 = validateParameter(valid_594624, JInt, required = false, default = nil)
  if valid_594624 != nil:
    section.add "MaxRecords", valid_594624
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594625 = header.getOrDefault("X-Amz-Signature")
  valid_594625 = validateParameter(valid_594625, JString, required = false,
                                 default = nil)
  if valid_594625 != nil:
    section.add "X-Amz-Signature", valid_594625
  var valid_594626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594626 = validateParameter(valid_594626, JString, required = false,
                                 default = nil)
  if valid_594626 != nil:
    section.add "X-Amz-Content-Sha256", valid_594626
  var valid_594627 = header.getOrDefault("X-Amz-Date")
  valid_594627 = validateParameter(valid_594627, JString, required = false,
                                 default = nil)
  if valid_594627 != nil:
    section.add "X-Amz-Date", valid_594627
  var valid_594628 = header.getOrDefault("X-Amz-Credential")
  valid_594628 = validateParameter(valid_594628, JString, required = false,
                                 default = nil)
  if valid_594628 != nil:
    section.add "X-Amz-Credential", valid_594628
  var valid_594629 = header.getOrDefault("X-Amz-Security-Token")
  valid_594629 = validateParameter(valid_594629, JString, required = false,
                                 default = nil)
  if valid_594629 != nil:
    section.add "X-Amz-Security-Token", valid_594629
  var valid_594630 = header.getOrDefault("X-Amz-Algorithm")
  valid_594630 = validateParameter(valid_594630, JString, required = false,
                                 default = nil)
  if valid_594630 != nil:
    section.add "X-Amz-Algorithm", valid_594630
  var valid_594631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594631 = validateParameter(valid_594631, JString, required = false,
                                 default = nil)
  if valid_594631 != nil:
    section.add "X-Amz-SignedHeaders", valid_594631
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594632: Call_GetDescribeCertificates_594616; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_594632.validator(path, query, header, formData, body)
  let scheme = call_594632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594632.url(scheme.get, call_594632.host, call_594632.base,
                         call_594632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594632, url, valid)

proc call*(call_594633: Call_GetDescribeCertificates_594616; Marker: string = "";
          Action: string = "DescribeCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0): Recallable =
  ## getDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_594634 = newJObject()
  add(query_594634, "Marker", newJString(Marker))
  add(query_594634, "Action", newJString(Action))
  add(query_594634, "Version", newJString(Version))
  add(query_594634, "CertificateIdentifier", newJString(CertificateIdentifier))
  if Filters != nil:
    query_594634.add "Filters", Filters
  add(query_594634, "MaxRecords", newJInt(MaxRecords))
  result = call_594633.call(nil, query_594634, nil, nil, nil)

var getDescribeCertificates* = Call_GetDescribeCertificates_594616(
    name: "getDescribeCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_GetDescribeCertificates_594617, base: "/",
    url: url_GetDescribeCertificates_594618, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterBacktracks_594675 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBClusterBacktracks_594677(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterBacktracks_594676(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594678 = query.getOrDefault("Action")
  valid_594678 = validateParameter(valid_594678, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_594678 != nil:
    section.add "Action", valid_594678
  var valid_594679 = query.getOrDefault("Version")
  valid_594679 = validateParameter(valid_594679, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594679 != nil:
    section.add "Version", valid_594679
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594680 = header.getOrDefault("X-Amz-Signature")
  valid_594680 = validateParameter(valid_594680, JString, required = false,
                                 default = nil)
  if valid_594680 != nil:
    section.add "X-Amz-Signature", valid_594680
  var valid_594681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594681 = validateParameter(valid_594681, JString, required = false,
                                 default = nil)
  if valid_594681 != nil:
    section.add "X-Amz-Content-Sha256", valid_594681
  var valid_594682 = header.getOrDefault("X-Amz-Date")
  valid_594682 = validateParameter(valid_594682, JString, required = false,
                                 default = nil)
  if valid_594682 != nil:
    section.add "X-Amz-Date", valid_594682
  var valid_594683 = header.getOrDefault("X-Amz-Credential")
  valid_594683 = validateParameter(valid_594683, JString, required = false,
                                 default = nil)
  if valid_594683 != nil:
    section.add "X-Amz-Credential", valid_594683
  var valid_594684 = header.getOrDefault("X-Amz-Security-Token")
  valid_594684 = validateParameter(valid_594684, JString, required = false,
                                 default = nil)
  if valid_594684 != nil:
    section.add "X-Amz-Security-Token", valid_594684
  var valid_594685 = header.getOrDefault("X-Amz-Algorithm")
  valid_594685 = validateParameter(valid_594685, JString, required = false,
                                 default = nil)
  if valid_594685 != nil:
    section.add "X-Amz-Algorithm", valid_594685
  var valid_594686 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594686 = validateParameter(valid_594686, JString, required = false,
                                 default = nil)
  if valid_594686 != nil:
    section.add "X-Amz-SignedHeaders", valid_594686
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_594687 = formData.getOrDefault("MaxRecords")
  valid_594687 = validateParameter(valid_594687, JInt, required = false, default = nil)
  if valid_594687 != nil:
    section.add "MaxRecords", valid_594687
  var valid_594688 = formData.getOrDefault("Marker")
  valid_594688 = validateParameter(valid_594688, JString, required = false,
                                 default = nil)
  if valid_594688 != nil:
    section.add "Marker", valid_594688
  var valid_594689 = formData.getOrDefault("BacktrackIdentifier")
  valid_594689 = validateParameter(valid_594689, JString, required = false,
                                 default = nil)
  if valid_594689 != nil:
    section.add "BacktrackIdentifier", valid_594689
  var valid_594690 = formData.getOrDefault("Filters")
  valid_594690 = validateParameter(valid_594690, JArray, required = false,
                                 default = nil)
  if valid_594690 != nil:
    section.add "Filters", valid_594690
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594691 = formData.getOrDefault("DBClusterIdentifier")
  valid_594691 = validateParameter(valid_594691, JString, required = true,
                                 default = nil)
  if valid_594691 != nil:
    section.add "DBClusterIdentifier", valid_594691
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594692: Call_PostDescribeDBClusterBacktracks_594675;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594692.validator(path, query, header, formData, body)
  let scheme = call_594692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594692.url(scheme.get, call_594692.host, call_594692.base,
                         call_594692.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594692, url, valid)

proc call*(call_594693: Call_PostDescribeDBClusterBacktracks_594675;
          DBClusterIdentifier: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_594694 = newJObject()
  var formData_594695 = newJObject()
  add(formData_594695, "MaxRecords", newJInt(MaxRecords))
  add(formData_594695, "Marker", newJString(Marker))
  add(query_594694, "Action", newJString(Action))
  add(formData_594695, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  if Filters != nil:
    formData_594695.add "Filters", Filters
  add(query_594694, "Version", newJString(Version))
  add(formData_594695, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_594693.call(nil, query_594694, nil, formData_594695, nil)

var postDescribeDBClusterBacktracks* = Call_PostDescribeDBClusterBacktracks_594675(
    name: "postDescribeDBClusterBacktracks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_PostDescribeDBClusterBacktracks_594676, base: "/",
    url: url_PostDescribeDBClusterBacktracks_594677,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterBacktracks_594655 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBClusterBacktracks_594657(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterBacktracks_594656(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_594658 = query.getOrDefault("Marker")
  valid_594658 = validateParameter(valid_594658, JString, required = false,
                                 default = nil)
  if valid_594658 != nil:
    section.add "Marker", valid_594658
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594659 = query.getOrDefault("DBClusterIdentifier")
  valid_594659 = validateParameter(valid_594659, JString, required = true,
                                 default = nil)
  if valid_594659 != nil:
    section.add "DBClusterIdentifier", valid_594659
  var valid_594660 = query.getOrDefault("BacktrackIdentifier")
  valid_594660 = validateParameter(valid_594660, JString, required = false,
                                 default = nil)
  if valid_594660 != nil:
    section.add "BacktrackIdentifier", valid_594660
  var valid_594661 = query.getOrDefault("Action")
  valid_594661 = validateParameter(valid_594661, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_594661 != nil:
    section.add "Action", valid_594661
  var valid_594662 = query.getOrDefault("Version")
  valid_594662 = validateParameter(valid_594662, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594662 != nil:
    section.add "Version", valid_594662
  var valid_594663 = query.getOrDefault("Filters")
  valid_594663 = validateParameter(valid_594663, JArray, required = false,
                                 default = nil)
  if valid_594663 != nil:
    section.add "Filters", valid_594663
  var valid_594664 = query.getOrDefault("MaxRecords")
  valid_594664 = validateParameter(valid_594664, JInt, required = false, default = nil)
  if valid_594664 != nil:
    section.add "MaxRecords", valid_594664
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594665 = header.getOrDefault("X-Amz-Signature")
  valid_594665 = validateParameter(valid_594665, JString, required = false,
                                 default = nil)
  if valid_594665 != nil:
    section.add "X-Amz-Signature", valid_594665
  var valid_594666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594666 = validateParameter(valid_594666, JString, required = false,
                                 default = nil)
  if valid_594666 != nil:
    section.add "X-Amz-Content-Sha256", valid_594666
  var valid_594667 = header.getOrDefault("X-Amz-Date")
  valid_594667 = validateParameter(valid_594667, JString, required = false,
                                 default = nil)
  if valid_594667 != nil:
    section.add "X-Amz-Date", valid_594667
  var valid_594668 = header.getOrDefault("X-Amz-Credential")
  valid_594668 = validateParameter(valid_594668, JString, required = false,
                                 default = nil)
  if valid_594668 != nil:
    section.add "X-Amz-Credential", valid_594668
  var valid_594669 = header.getOrDefault("X-Amz-Security-Token")
  valid_594669 = validateParameter(valid_594669, JString, required = false,
                                 default = nil)
  if valid_594669 != nil:
    section.add "X-Amz-Security-Token", valid_594669
  var valid_594670 = header.getOrDefault("X-Amz-Algorithm")
  valid_594670 = validateParameter(valid_594670, JString, required = false,
                                 default = nil)
  if valid_594670 != nil:
    section.add "X-Amz-Algorithm", valid_594670
  var valid_594671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594671 = validateParameter(valid_594671, JString, required = false,
                                 default = nil)
  if valid_594671 != nil:
    section.add "X-Amz-SignedHeaders", valid_594671
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594672: Call_GetDescribeDBClusterBacktracks_594655; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594672.validator(path, query, header, formData, body)
  let scheme = call_594672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594672.url(scheme.get, call_594672.host, call_594672.base,
                         call_594672.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594672, url, valid)

proc call*(call_594673: Call_GetDescribeDBClusterBacktracks_594655;
          DBClusterIdentifier: string; Marker: string = "";
          BacktrackIdentifier: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_594674 = newJObject()
  add(query_594674, "Marker", newJString(Marker))
  add(query_594674, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594674, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  add(query_594674, "Action", newJString(Action))
  add(query_594674, "Version", newJString(Version))
  if Filters != nil:
    query_594674.add "Filters", Filters
  add(query_594674, "MaxRecords", newJInt(MaxRecords))
  result = call_594673.call(nil, query_594674, nil, nil, nil)

var getDescribeDBClusterBacktracks* = Call_GetDescribeDBClusterBacktracks_594655(
    name: "getDescribeDBClusterBacktracks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_GetDescribeDBClusterBacktracks_594656, base: "/",
    url: url_GetDescribeDBClusterBacktracks_594657,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterEndpoints_594716 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBClusterEndpoints_594718(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterEndpoints_594717(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594719 = query.getOrDefault("Action")
  valid_594719 = validateParameter(valid_594719, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_594719 != nil:
    section.add "Action", valid_594719
  var valid_594720 = query.getOrDefault("Version")
  valid_594720 = validateParameter(valid_594720, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594720 != nil:
    section.add "Version", valid_594720
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594721 = header.getOrDefault("X-Amz-Signature")
  valid_594721 = validateParameter(valid_594721, JString, required = false,
                                 default = nil)
  if valid_594721 != nil:
    section.add "X-Amz-Signature", valid_594721
  var valid_594722 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594722 = validateParameter(valid_594722, JString, required = false,
                                 default = nil)
  if valid_594722 != nil:
    section.add "X-Amz-Content-Sha256", valid_594722
  var valid_594723 = header.getOrDefault("X-Amz-Date")
  valid_594723 = validateParameter(valid_594723, JString, required = false,
                                 default = nil)
  if valid_594723 != nil:
    section.add "X-Amz-Date", valid_594723
  var valid_594724 = header.getOrDefault("X-Amz-Credential")
  valid_594724 = validateParameter(valid_594724, JString, required = false,
                                 default = nil)
  if valid_594724 != nil:
    section.add "X-Amz-Credential", valid_594724
  var valid_594725 = header.getOrDefault("X-Amz-Security-Token")
  valid_594725 = validateParameter(valid_594725, JString, required = false,
                                 default = nil)
  if valid_594725 != nil:
    section.add "X-Amz-Security-Token", valid_594725
  var valid_594726 = header.getOrDefault("X-Amz-Algorithm")
  valid_594726 = validateParameter(valid_594726, JString, required = false,
                                 default = nil)
  if valid_594726 != nil:
    section.add "X-Amz-Algorithm", valid_594726
  var valid_594727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594727 = validateParameter(valid_594727, JString, required = false,
                                 default = nil)
  if valid_594727 != nil:
    section.add "X-Amz-SignedHeaders", valid_594727
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_594728 = formData.getOrDefault("MaxRecords")
  valid_594728 = validateParameter(valid_594728, JInt, required = false, default = nil)
  if valid_594728 != nil:
    section.add "MaxRecords", valid_594728
  var valid_594729 = formData.getOrDefault("Marker")
  valid_594729 = validateParameter(valid_594729, JString, required = false,
                                 default = nil)
  if valid_594729 != nil:
    section.add "Marker", valid_594729
  var valid_594730 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_594730 = validateParameter(valid_594730, JString, required = false,
                                 default = nil)
  if valid_594730 != nil:
    section.add "DBClusterEndpointIdentifier", valid_594730
  var valid_594731 = formData.getOrDefault("Filters")
  valid_594731 = validateParameter(valid_594731, JArray, required = false,
                                 default = nil)
  if valid_594731 != nil:
    section.add "Filters", valid_594731
  var valid_594732 = formData.getOrDefault("DBClusterIdentifier")
  valid_594732 = validateParameter(valid_594732, JString, required = false,
                                 default = nil)
  if valid_594732 != nil:
    section.add "DBClusterIdentifier", valid_594732
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594733: Call_PostDescribeDBClusterEndpoints_594716; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594733.validator(path, query, header, formData, body)
  let scheme = call_594733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594733.url(scheme.get, call_594733.host, call_594733.base,
                         call_594733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594733, url, valid)

proc call*(call_594734: Call_PostDescribeDBClusterEndpoints_594716;
          MaxRecords: int = 0; Marker: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_594735 = newJObject()
  var formData_594736 = newJObject()
  add(formData_594736, "MaxRecords", newJInt(MaxRecords))
  add(formData_594736, "Marker", newJString(Marker))
  add(formData_594736, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_594735, "Action", newJString(Action))
  if Filters != nil:
    formData_594736.add "Filters", Filters
  add(query_594735, "Version", newJString(Version))
  add(formData_594736, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_594734.call(nil, query_594735, nil, formData_594736, nil)

var postDescribeDBClusterEndpoints* = Call_PostDescribeDBClusterEndpoints_594716(
    name: "postDescribeDBClusterEndpoints", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_PostDescribeDBClusterEndpoints_594717, base: "/",
    url: url_PostDescribeDBClusterEndpoints_594718,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterEndpoints_594696 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBClusterEndpoints_594698(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterEndpoints_594697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_594699 = query.getOrDefault("Marker")
  valid_594699 = validateParameter(valid_594699, JString, required = false,
                                 default = nil)
  if valid_594699 != nil:
    section.add "Marker", valid_594699
  var valid_594700 = query.getOrDefault("DBClusterIdentifier")
  valid_594700 = validateParameter(valid_594700, JString, required = false,
                                 default = nil)
  if valid_594700 != nil:
    section.add "DBClusterIdentifier", valid_594700
  var valid_594701 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_594701 = validateParameter(valid_594701, JString, required = false,
                                 default = nil)
  if valid_594701 != nil:
    section.add "DBClusterEndpointIdentifier", valid_594701
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594702 = query.getOrDefault("Action")
  valid_594702 = validateParameter(valid_594702, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_594702 != nil:
    section.add "Action", valid_594702
  var valid_594703 = query.getOrDefault("Version")
  valid_594703 = validateParameter(valid_594703, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594703 != nil:
    section.add "Version", valid_594703
  var valid_594704 = query.getOrDefault("Filters")
  valid_594704 = validateParameter(valid_594704, JArray, required = false,
                                 default = nil)
  if valid_594704 != nil:
    section.add "Filters", valid_594704
  var valid_594705 = query.getOrDefault("MaxRecords")
  valid_594705 = validateParameter(valid_594705, JInt, required = false, default = nil)
  if valid_594705 != nil:
    section.add "MaxRecords", valid_594705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594706 = header.getOrDefault("X-Amz-Signature")
  valid_594706 = validateParameter(valid_594706, JString, required = false,
                                 default = nil)
  if valid_594706 != nil:
    section.add "X-Amz-Signature", valid_594706
  var valid_594707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594707 = validateParameter(valid_594707, JString, required = false,
                                 default = nil)
  if valid_594707 != nil:
    section.add "X-Amz-Content-Sha256", valid_594707
  var valid_594708 = header.getOrDefault("X-Amz-Date")
  valid_594708 = validateParameter(valid_594708, JString, required = false,
                                 default = nil)
  if valid_594708 != nil:
    section.add "X-Amz-Date", valid_594708
  var valid_594709 = header.getOrDefault("X-Amz-Credential")
  valid_594709 = validateParameter(valid_594709, JString, required = false,
                                 default = nil)
  if valid_594709 != nil:
    section.add "X-Amz-Credential", valid_594709
  var valid_594710 = header.getOrDefault("X-Amz-Security-Token")
  valid_594710 = validateParameter(valid_594710, JString, required = false,
                                 default = nil)
  if valid_594710 != nil:
    section.add "X-Amz-Security-Token", valid_594710
  var valid_594711 = header.getOrDefault("X-Amz-Algorithm")
  valid_594711 = validateParameter(valid_594711, JString, required = false,
                                 default = nil)
  if valid_594711 != nil:
    section.add "X-Amz-Algorithm", valid_594711
  var valid_594712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594712 = validateParameter(valid_594712, JString, required = false,
                                 default = nil)
  if valid_594712 != nil:
    section.add "X-Amz-SignedHeaders", valid_594712
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594713: Call_GetDescribeDBClusterEndpoints_594696; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594713.validator(path, query, header, formData, body)
  let scheme = call_594713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594713.url(scheme.get, call_594713.host, call_594713.base,
                         call_594713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594713, url, valid)

proc call*(call_594714: Call_GetDescribeDBClusterEndpoints_594696;
          Marker: string = ""; DBClusterIdentifier: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_594715 = newJObject()
  add(query_594715, "Marker", newJString(Marker))
  add(query_594715, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594715, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_594715, "Action", newJString(Action))
  add(query_594715, "Version", newJString(Version))
  if Filters != nil:
    query_594715.add "Filters", Filters
  add(query_594715, "MaxRecords", newJInt(MaxRecords))
  result = call_594714.call(nil, query_594715, nil, nil, nil)

var getDescribeDBClusterEndpoints* = Call_GetDescribeDBClusterEndpoints_594696(
    name: "getDescribeDBClusterEndpoints", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_GetDescribeDBClusterEndpoints_594697, base: "/",
    url: url_GetDescribeDBClusterEndpoints_594698,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_594756 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBClusterParameterGroups_594758(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_594757(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594759 = query.getOrDefault("Action")
  valid_594759 = validateParameter(valid_594759, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_594759 != nil:
    section.add "Action", valid_594759
  var valid_594760 = query.getOrDefault("Version")
  valid_594760 = validateParameter(valid_594760, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594760 != nil:
    section.add "Version", valid_594760
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594761 = header.getOrDefault("X-Amz-Signature")
  valid_594761 = validateParameter(valid_594761, JString, required = false,
                                 default = nil)
  if valid_594761 != nil:
    section.add "X-Amz-Signature", valid_594761
  var valid_594762 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594762 = validateParameter(valid_594762, JString, required = false,
                                 default = nil)
  if valid_594762 != nil:
    section.add "X-Amz-Content-Sha256", valid_594762
  var valid_594763 = header.getOrDefault("X-Amz-Date")
  valid_594763 = validateParameter(valid_594763, JString, required = false,
                                 default = nil)
  if valid_594763 != nil:
    section.add "X-Amz-Date", valid_594763
  var valid_594764 = header.getOrDefault("X-Amz-Credential")
  valid_594764 = validateParameter(valid_594764, JString, required = false,
                                 default = nil)
  if valid_594764 != nil:
    section.add "X-Amz-Credential", valid_594764
  var valid_594765 = header.getOrDefault("X-Amz-Security-Token")
  valid_594765 = validateParameter(valid_594765, JString, required = false,
                                 default = nil)
  if valid_594765 != nil:
    section.add "X-Amz-Security-Token", valid_594765
  var valid_594766 = header.getOrDefault("X-Amz-Algorithm")
  valid_594766 = validateParameter(valid_594766, JString, required = false,
                                 default = nil)
  if valid_594766 != nil:
    section.add "X-Amz-Algorithm", valid_594766
  var valid_594767 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594767 = validateParameter(valid_594767, JString, required = false,
                                 default = nil)
  if valid_594767 != nil:
    section.add "X-Amz-SignedHeaders", valid_594767
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_594768 = formData.getOrDefault("MaxRecords")
  valid_594768 = validateParameter(valid_594768, JInt, required = false, default = nil)
  if valid_594768 != nil:
    section.add "MaxRecords", valid_594768
  var valid_594769 = formData.getOrDefault("Marker")
  valid_594769 = validateParameter(valid_594769, JString, required = false,
                                 default = nil)
  if valid_594769 != nil:
    section.add "Marker", valid_594769
  var valid_594770 = formData.getOrDefault("Filters")
  valid_594770 = validateParameter(valid_594770, JArray, required = false,
                                 default = nil)
  if valid_594770 != nil:
    section.add "Filters", valid_594770
  var valid_594771 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_594771 = validateParameter(valid_594771, JString, required = false,
                                 default = nil)
  if valid_594771 != nil:
    section.add "DBClusterParameterGroupName", valid_594771
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594772: Call_PostDescribeDBClusterParameterGroups_594756;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594772.validator(path, query, header, formData, body)
  let scheme = call_594772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594772.url(scheme.get, call_594772.host, call_594772.base,
                         call_594772.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594772, url, valid)

proc call*(call_594773: Call_PostDescribeDBClusterParameterGroups_594756;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Filters: JsonNode = nil; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_594774 = newJObject()
  var formData_594775 = newJObject()
  add(formData_594775, "MaxRecords", newJInt(MaxRecords))
  add(formData_594775, "Marker", newJString(Marker))
  add(query_594774, "Action", newJString(Action))
  if Filters != nil:
    formData_594775.add "Filters", Filters
  add(formData_594775, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_594774, "Version", newJString(Version))
  result = call_594773.call(nil, query_594774, nil, formData_594775, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_594756(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_594757, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_594758,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_594737 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBClusterParameterGroups_594739(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_594738(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_594740 = query.getOrDefault("Marker")
  valid_594740 = validateParameter(valid_594740, JString, required = false,
                                 default = nil)
  if valid_594740 != nil:
    section.add "Marker", valid_594740
  var valid_594741 = query.getOrDefault("DBClusterParameterGroupName")
  valid_594741 = validateParameter(valid_594741, JString, required = false,
                                 default = nil)
  if valid_594741 != nil:
    section.add "DBClusterParameterGroupName", valid_594741
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594742 = query.getOrDefault("Action")
  valid_594742 = validateParameter(valid_594742, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_594742 != nil:
    section.add "Action", valid_594742
  var valid_594743 = query.getOrDefault("Version")
  valid_594743 = validateParameter(valid_594743, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594743 != nil:
    section.add "Version", valid_594743
  var valid_594744 = query.getOrDefault("Filters")
  valid_594744 = validateParameter(valid_594744, JArray, required = false,
                                 default = nil)
  if valid_594744 != nil:
    section.add "Filters", valid_594744
  var valid_594745 = query.getOrDefault("MaxRecords")
  valid_594745 = validateParameter(valid_594745, JInt, required = false, default = nil)
  if valid_594745 != nil:
    section.add "MaxRecords", valid_594745
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594746 = header.getOrDefault("X-Amz-Signature")
  valid_594746 = validateParameter(valid_594746, JString, required = false,
                                 default = nil)
  if valid_594746 != nil:
    section.add "X-Amz-Signature", valid_594746
  var valid_594747 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594747 = validateParameter(valid_594747, JString, required = false,
                                 default = nil)
  if valid_594747 != nil:
    section.add "X-Amz-Content-Sha256", valid_594747
  var valid_594748 = header.getOrDefault("X-Amz-Date")
  valid_594748 = validateParameter(valid_594748, JString, required = false,
                                 default = nil)
  if valid_594748 != nil:
    section.add "X-Amz-Date", valid_594748
  var valid_594749 = header.getOrDefault("X-Amz-Credential")
  valid_594749 = validateParameter(valid_594749, JString, required = false,
                                 default = nil)
  if valid_594749 != nil:
    section.add "X-Amz-Credential", valid_594749
  var valid_594750 = header.getOrDefault("X-Amz-Security-Token")
  valid_594750 = validateParameter(valid_594750, JString, required = false,
                                 default = nil)
  if valid_594750 != nil:
    section.add "X-Amz-Security-Token", valid_594750
  var valid_594751 = header.getOrDefault("X-Amz-Algorithm")
  valid_594751 = validateParameter(valid_594751, JString, required = false,
                                 default = nil)
  if valid_594751 != nil:
    section.add "X-Amz-Algorithm", valid_594751
  var valid_594752 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594752 = validateParameter(valid_594752, JString, required = false,
                                 default = nil)
  if valid_594752 != nil:
    section.add "X-Amz-SignedHeaders", valid_594752
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594753: Call_GetDescribeDBClusterParameterGroups_594737;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594753.validator(path, query, header, formData, body)
  let scheme = call_594753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594753.url(scheme.get, call_594753.host, call_594753.base,
                         call_594753.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594753, url, valid)

proc call*(call_594754: Call_GetDescribeDBClusterParameterGroups_594737;
          Marker: string = ""; DBClusterParameterGroupName: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_594755 = newJObject()
  add(query_594755, "Marker", newJString(Marker))
  add(query_594755, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_594755, "Action", newJString(Action))
  add(query_594755, "Version", newJString(Version))
  if Filters != nil:
    query_594755.add "Filters", Filters
  add(query_594755, "MaxRecords", newJInt(MaxRecords))
  result = call_594754.call(nil, query_594755, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_594737(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_594738, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_594739,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_594796 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBClusterParameters_594798(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterParameters_594797(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594799 = query.getOrDefault("Action")
  valid_594799 = validateParameter(valid_594799, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_594799 != nil:
    section.add "Action", valid_594799
  var valid_594800 = query.getOrDefault("Version")
  valid_594800 = validateParameter(valid_594800, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594800 != nil:
    section.add "Version", valid_594800
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594801 = header.getOrDefault("X-Amz-Signature")
  valid_594801 = validateParameter(valid_594801, JString, required = false,
                                 default = nil)
  if valid_594801 != nil:
    section.add "X-Amz-Signature", valid_594801
  var valid_594802 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594802 = validateParameter(valid_594802, JString, required = false,
                                 default = nil)
  if valid_594802 != nil:
    section.add "X-Amz-Content-Sha256", valid_594802
  var valid_594803 = header.getOrDefault("X-Amz-Date")
  valid_594803 = validateParameter(valid_594803, JString, required = false,
                                 default = nil)
  if valid_594803 != nil:
    section.add "X-Amz-Date", valid_594803
  var valid_594804 = header.getOrDefault("X-Amz-Credential")
  valid_594804 = validateParameter(valid_594804, JString, required = false,
                                 default = nil)
  if valid_594804 != nil:
    section.add "X-Amz-Credential", valid_594804
  var valid_594805 = header.getOrDefault("X-Amz-Security-Token")
  valid_594805 = validateParameter(valid_594805, JString, required = false,
                                 default = nil)
  if valid_594805 != nil:
    section.add "X-Amz-Security-Token", valid_594805
  var valid_594806 = header.getOrDefault("X-Amz-Algorithm")
  valid_594806 = validateParameter(valid_594806, JString, required = false,
                                 default = nil)
  if valid_594806 != nil:
    section.add "X-Amz-Algorithm", valid_594806
  var valid_594807 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594807 = validateParameter(valid_594807, JString, required = false,
                                 default = nil)
  if valid_594807 != nil:
    section.add "X-Amz-SignedHeaders", valid_594807
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_594808 = formData.getOrDefault("Source")
  valid_594808 = validateParameter(valid_594808, JString, required = false,
                                 default = nil)
  if valid_594808 != nil:
    section.add "Source", valid_594808
  var valid_594809 = formData.getOrDefault("MaxRecords")
  valid_594809 = validateParameter(valid_594809, JInt, required = false, default = nil)
  if valid_594809 != nil:
    section.add "MaxRecords", valid_594809
  var valid_594810 = formData.getOrDefault("Marker")
  valid_594810 = validateParameter(valid_594810, JString, required = false,
                                 default = nil)
  if valid_594810 != nil:
    section.add "Marker", valid_594810
  var valid_594811 = formData.getOrDefault("Filters")
  valid_594811 = validateParameter(valid_594811, JArray, required = false,
                                 default = nil)
  if valid_594811 != nil:
    section.add "Filters", valid_594811
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_594812 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_594812 = validateParameter(valid_594812, JString, required = true,
                                 default = nil)
  if valid_594812 != nil:
    section.add "DBClusterParameterGroupName", valid_594812
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594813: Call_PostDescribeDBClusterParameters_594796;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594813.validator(path, query, header, formData, body)
  let scheme = call_594813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594813.url(scheme.get, call_594813.host, call_594813.base,
                         call_594813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594813, url, valid)

proc call*(call_594814: Call_PostDescribeDBClusterParameters_594796;
          DBClusterParameterGroupName: string; Source: string = "";
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_594815 = newJObject()
  var formData_594816 = newJObject()
  add(formData_594816, "Source", newJString(Source))
  add(formData_594816, "MaxRecords", newJInt(MaxRecords))
  add(formData_594816, "Marker", newJString(Marker))
  add(query_594815, "Action", newJString(Action))
  if Filters != nil:
    formData_594816.add "Filters", Filters
  add(formData_594816, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_594815, "Version", newJString(Version))
  result = call_594814.call(nil, query_594815, nil, formData_594816, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_594796(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_594797, base: "/",
    url: url_PostDescribeDBClusterParameters_594798,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_594776 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBClusterParameters_594778(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterParameters_594777(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_594779 = query.getOrDefault("Marker")
  valid_594779 = validateParameter(valid_594779, JString, required = false,
                                 default = nil)
  if valid_594779 != nil:
    section.add "Marker", valid_594779
  var valid_594780 = query.getOrDefault("Source")
  valid_594780 = validateParameter(valid_594780, JString, required = false,
                                 default = nil)
  if valid_594780 != nil:
    section.add "Source", valid_594780
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_594781 = query.getOrDefault("DBClusterParameterGroupName")
  valid_594781 = validateParameter(valid_594781, JString, required = true,
                                 default = nil)
  if valid_594781 != nil:
    section.add "DBClusterParameterGroupName", valid_594781
  var valid_594782 = query.getOrDefault("Action")
  valid_594782 = validateParameter(valid_594782, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_594782 != nil:
    section.add "Action", valid_594782
  var valid_594783 = query.getOrDefault("Version")
  valid_594783 = validateParameter(valid_594783, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594783 != nil:
    section.add "Version", valid_594783
  var valid_594784 = query.getOrDefault("Filters")
  valid_594784 = validateParameter(valid_594784, JArray, required = false,
                                 default = nil)
  if valid_594784 != nil:
    section.add "Filters", valid_594784
  var valid_594785 = query.getOrDefault("MaxRecords")
  valid_594785 = validateParameter(valid_594785, JInt, required = false, default = nil)
  if valid_594785 != nil:
    section.add "MaxRecords", valid_594785
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594786 = header.getOrDefault("X-Amz-Signature")
  valid_594786 = validateParameter(valid_594786, JString, required = false,
                                 default = nil)
  if valid_594786 != nil:
    section.add "X-Amz-Signature", valid_594786
  var valid_594787 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594787 = validateParameter(valid_594787, JString, required = false,
                                 default = nil)
  if valid_594787 != nil:
    section.add "X-Amz-Content-Sha256", valid_594787
  var valid_594788 = header.getOrDefault("X-Amz-Date")
  valid_594788 = validateParameter(valid_594788, JString, required = false,
                                 default = nil)
  if valid_594788 != nil:
    section.add "X-Amz-Date", valid_594788
  var valid_594789 = header.getOrDefault("X-Amz-Credential")
  valid_594789 = validateParameter(valid_594789, JString, required = false,
                                 default = nil)
  if valid_594789 != nil:
    section.add "X-Amz-Credential", valid_594789
  var valid_594790 = header.getOrDefault("X-Amz-Security-Token")
  valid_594790 = validateParameter(valid_594790, JString, required = false,
                                 default = nil)
  if valid_594790 != nil:
    section.add "X-Amz-Security-Token", valid_594790
  var valid_594791 = header.getOrDefault("X-Amz-Algorithm")
  valid_594791 = validateParameter(valid_594791, JString, required = false,
                                 default = nil)
  if valid_594791 != nil:
    section.add "X-Amz-Algorithm", valid_594791
  var valid_594792 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594792 = validateParameter(valid_594792, JString, required = false,
                                 default = nil)
  if valid_594792 != nil:
    section.add "X-Amz-SignedHeaders", valid_594792
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594793: Call_GetDescribeDBClusterParameters_594776; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594793.validator(path, query, header, formData, body)
  let scheme = call_594793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594793.url(scheme.get, call_594793.host, call_594793.base,
                         call_594793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594793, url, valid)

proc call*(call_594794: Call_GetDescribeDBClusterParameters_594776;
          DBClusterParameterGroupName: string; Marker: string = "";
          Source: string = ""; Action: string = "DescribeDBClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_594795 = newJObject()
  add(query_594795, "Marker", newJString(Marker))
  add(query_594795, "Source", newJString(Source))
  add(query_594795, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_594795, "Action", newJString(Action))
  add(query_594795, "Version", newJString(Version))
  if Filters != nil:
    query_594795.add "Filters", Filters
  add(query_594795, "MaxRecords", newJInt(MaxRecords))
  result = call_594794.call(nil, query_594795, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_594776(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_594777, base: "/",
    url: url_GetDescribeDBClusterParameters_594778,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_594833 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBClusterSnapshotAttributes_594835(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_594834(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594836 = query.getOrDefault("Action")
  valid_594836 = validateParameter(valid_594836, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_594836 != nil:
    section.add "Action", valid_594836
  var valid_594837 = query.getOrDefault("Version")
  valid_594837 = validateParameter(valid_594837, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594837 != nil:
    section.add "Version", valid_594837
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594838 = header.getOrDefault("X-Amz-Signature")
  valid_594838 = validateParameter(valid_594838, JString, required = false,
                                 default = nil)
  if valid_594838 != nil:
    section.add "X-Amz-Signature", valid_594838
  var valid_594839 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594839 = validateParameter(valid_594839, JString, required = false,
                                 default = nil)
  if valid_594839 != nil:
    section.add "X-Amz-Content-Sha256", valid_594839
  var valid_594840 = header.getOrDefault("X-Amz-Date")
  valid_594840 = validateParameter(valid_594840, JString, required = false,
                                 default = nil)
  if valid_594840 != nil:
    section.add "X-Amz-Date", valid_594840
  var valid_594841 = header.getOrDefault("X-Amz-Credential")
  valid_594841 = validateParameter(valid_594841, JString, required = false,
                                 default = nil)
  if valid_594841 != nil:
    section.add "X-Amz-Credential", valid_594841
  var valid_594842 = header.getOrDefault("X-Amz-Security-Token")
  valid_594842 = validateParameter(valid_594842, JString, required = false,
                                 default = nil)
  if valid_594842 != nil:
    section.add "X-Amz-Security-Token", valid_594842
  var valid_594843 = header.getOrDefault("X-Amz-Algorithm")
  valid_594843 = validateParameter(valid_594843, JString, required = false,
                                 default = nil)
  if valid_594843 != nil:
    section.add "X-Amz-Algorithm", valid_594843
  var valid_594844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594844 = validateParameter(valid_594844, JString, required = false,
                                 default = nil)
  if valid_594844 != nil:
    section.add "X-Amz-SignedHeaders", valid_594844
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_594845 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_594845 = validateParameter(valid_594845, JString, required = true,
                                 default = nil)
  if valid_594845 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_594845
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594846: Call_PostDescribeDBClusterSnapshotAttributes_594833;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594846.validator(path, query, header, formData, body)
  let scheme = call_594846.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594846.url(scheme.get, call_594846.host, call_594846.base,
                         call_594846.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594846, url, valid)

proc call*(call_594847: Call_PostDescribeDBClusterSnapshotAttributes_594833;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594848 = newJObject()
  var formData_594849 = newJObject()
  add(formData_594849, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_594848, "Action", newJString(Action))
  add(query_594848, "Version", newJString(Version))
  result = call_594847.call(nil, query_594848, nil, formData_594849, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_594833(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_594834, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_594835,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_594817 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBClusterSnapshotAttributes_594819(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_594818(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_594820 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_594820 = validateParameter(valid_594820, JString, required = true,
                                 default = nil)
  if valid_594820 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_594820
  var valid_594821 = query.getOrDefault("Action")
  valid_594821 = validateParameter(valid_594821, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_594821 != nil:
    section.add "Action", valid_594821
  var valid_594822 = query.getOrDefault("Version")
  valid_594822 = validateParameter(valid_594822, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594822 != nil:
    section.add "Version", valid_594822
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594823 = header.getOrDefault("X-Amz-Signature")
  valid_594823 = validateParameter(valid_594823, JString, required = false,
                                 default = nil)
  if valid_594823 != nil:
    section.add "X-Amz-Signature", valid_594823
  var valid_594824 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594824 = validateParameter(valid_594824, JString, required = false,
                                 default = nil)
  if valid_594824 != nil:
    section.add "X-Amz-Content-Sha256", valid_594824
  var valid_594825 = header.getOrDefault("X-Amz-Date")
  valid_594825 = validateParameter(valid_594825, JString, required = false,
                                 default = nil)
  if valid_594825 != nil:
    section.add "X-Amz-Date", valid_594825
  var valid_594826 = header.getOrDefault("X-Amz-Credential")
  valid_594826 = validateParameter(valid_594826, JString, required = false,
                                 default = nil)
  if valid_594826 != nil:
    section.add "X-Amz-Credential", valid_594826
  var valid_594827 = header.getOrDefault("X-Amz-Security-Token")
  valid_594827 = validateParameter(valid_594827, JString, required = false,
                                 default = nil)
  if valid_594827 != nil:
    section.add "X-Amz-Security-Token", valid_594827
  var valid_594828 = header.getOrDefault("X-Amz-Algorithm")
  valid_594828 = validateParameter(valid_594828, JString, required = false,
                                 default = nil)
  if valid_594828 != nil:
    section.add "X-Amz-Algorithm", valid_594828
  var valid_594829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594829 = validateParameter(valid_594829, JString, required = false,
                                 default = nil)
  if valid_594829 != nil:
    section.add "X-Amz-SignedHeaders", valid_594829
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594830: Call_GetDescribeDBClusterSnapshotAttributes_594817;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594830.validator(path, query, header, formData, body)
  let scheme = call_594830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594830.url(scheme.get, call_594830.host, call_594830.base,
                         call_594830.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594830, url, valid)

proc call*(call_594831: Call_GetDescribeDBClusterSnapshotAttributes_594817;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594832 = newJObject()
  add(query_594832, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_594832, "Action", newJString(Action))
  add(query_594832, "Version", newJString(Version))
  result = call_594831.call(nil, query_594832, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_594817(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_594818, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_594819,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_594873 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBClusterSnapshots_594875(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_594874(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594876 = query.getOrDefault("Action")
  valid_594876 = validateParameter(valid_594876, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_594876 != nil:
    section.add "Action", valid_594876
  var valid_594877 = query.getOrDefault("Version")
  valid_594877 = validateParameter(valid_594877, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594877 != nil:
    section.add "Version", valid_594877
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594878 = header.getOrDefault("X-Amz-Signature")
  valid_594878 = validateParameter(valid_594878, JString, required = false,
                                 default = nil)
  if valid_594878 != nil:
    section.add "X-Amz-Signature", valid_594878
  var valid_594879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594879 = validateParameter(valid_594879, JString, required = false,
                                 default = nil)
  if valid_594879 != nil:
    section.add "X-Amz-Content-Sha256", valid_594879
  var valid_594880 = header.getOrDefault("X-Amz-Date")
  valid_594880 = validateParameter(valid_594880, JString, required = false,
                                 default = nil)
  if valid_594880 != nil:
    section.add "X-Amz-Date", valid_594880
  var valid_594881 = header.getOrDefault("X-Amz-Credential")
  valid_594881 = validateParameter(valid_594881, JString, required = false,
                                 default = nil)
  if valid_594881 != nil:
    section.add "X-Amz-Credential", valid_594881
  var valid_594882 = header.getOrDefault("X-Amz-Security-Token")
  valid_594882 = validateParameter(valid_594882, JString, required = false,
                                 default = nil)
  if valid_594882 != nil:
    section.add "X-Amz-Security-Token", valid_594882
  var valid_594883 = header.getOrDefault("X-Amz-Algorithm")
  valid_594883 = validateParameter(valid_594883, JString, required = false,
                                 default = nil)
  if valid_594883 != nil:
    section.add "X-Amz-Algorithm", valid_594883
  var valid_594884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594884 = validateParameter(valid_594884, JString, required = false,
                                 default = nil)
  if valid_594884 != nil:
    section.add "X-Amz-SignedHeaders", valid_594884
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_594885 = formData.getOrDefault("SnapshotType")
  valid_594885 = validateParameter(valid_594885, JString, required = false,
                                 default = nil)
  if valid_594885 != nil:
    section.add "SnapshotType", valid_594885
  var valid_594886 = formData.getOrDefault("MaxRecords")
  valid_594886 = validateParameter(valid_594886, JInt, required = false, default = nil)
  if valid_594886 != nil:
    section.add "MaxRecords", valid_594886
  var valid_594887 = formData.getOrDefault("IncludePublic")
  valid_594887 = validateParameter(valid_594887, JBool, required = false, default = nil)
  if valid_594887 != nil:
    section.add "IncludePublic", valid_594887
  var valid_594888 = formData.getOrDefault("Marker")
  valid_594888 = validateParameter(valid_594888, JString, required = false,
                                 default = nil)
  if valid_594888 != nil:
    section.add "Marker", valid_594888
  var valid_594889 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_594889 = validateParameter(valid_594889, JString, required = false,
                                 default = nil)
  if valid_594889 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_594889
  var valid_594890 = formData.getOrDefault("IncludeShared")
  valid_594890 = validateParameter(valid_594890, JBool, required = false, default = nil)
  if valid_594890 != nil:
    section.add "IncludeShared", valid_594890
  var valid_594891 = formData.getOrDefault("Filters")
  valid_594891 = validateParameter(valid_594891, JArray, required = false,
                                 default = nil)
  if valid_594891 != nil:
    section.add "Filters", valid_594891
  var valid_594892 = formData.getOrDefault("DBClusterIdentifier")
  valid_594892 = validateParameter(valid_594892, JString, required = false,
                                 default = nil)
  if valid_594892 != nil:
    section.add "DBClusterIdentifier", valid_594892
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594893: Call_PostDescribeDBClusterSnapshots_594873; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594893.validator(path, query, header, formData, body)
  let scheme = call_594893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594893.url(scheme.get, call_594893.host, call_594893.base,
                         call_594893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594893, url, valid)

proc call*(call_594894: Call_PostDescribeDBClusterSnapshots_594873;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_594895 = newJObject()
  var formData_594896 = newJObject()
  add(formData_594896, "SnapshotType", newJString(SnapshotType))
  add(formData_594896, "MaxRecords", newJInt(MaxRecords))
  add(formData_594896, "IncludePublic", newJBool(IncludePublic))
  add(formData_594896, "Marker", newJString(Marker))
  add(formData_594896, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_594896, "IncludeShared", newJBool(IncludeShared))
  add(query_594895, "Action", newJString(Action))
  if Filters != nil:
    formData_594896.add "Filters", Filters
  add(query_594895, "Version", newJString(Version))
  add(formData_594896, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_594894.call(nil, query_594895, nil, formData_594896, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_594873(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_594874, base: "/",
    url: url_PostDescribeDBClusterSnapshots_594875,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_594850 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBClusterSnapshots_594852(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_594851(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_594853 = query.getOrDefault("Marker")
  valid_594853 = validateParameter(valid_594853, JString, required = false,
                                 default = nil)
  if valid_594853 != nil:
    section.add "Marker", valid_594853
  var valid_594854 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_594854 = validateParameter(valid_594854, JString, required = false,
                                 default = nil)
  if valid_594854 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_594854
  var valid_594855 = query.getOrDefault("DBClusterIdentifier")
  valid_594855 = validateParameter(valid_594855, JString, required = false,
                                 default = nil)
  if valid_594855 != nil:
    section.add "DBClusterIdentifier", valid_594855
  var valid_594856 = query.getOrDefault("SnapshotType")
  valid_594856 = validateParameter(valid_594856, JString, required = false,
                                 default = nil)
  if valid_594856 != nil:
    section.add "SnapshotType", valid_594856
  var valid_594857 = query.getOrDefault("IncludePublic")
  valid_594857 = validateParameter(valid_594857, JBool, required = false, default = nil)
  if valid_594857 != nil:
    section.add "IncludePublic", valid_594857
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594858 = query.getOrDefault("Action")
  valid_594858 = validateParameter(valid_594858, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_594858 != nil:
    section.add "Action", valid_594858
  var valid_594859 = query.getOrDefault("IncludeShared")
  valid_594859 = validateParameter(valid_594859, JBool, required = false, default = nil)
  if valid_594859 != nil:
    section.add "IncludeShared", valid_594859
  var valid_594860 = query.getOrDefault("Version")
  valid_594860 = validateParameter(valid_594860, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594860 != nil:
    section.add "Version", valid_594860
  var valid_594861 = query.getOrDefault("Filters")
  valid_594861 = validateParameter(valid_594861, JArray, required = false,
                                 default = nil)
  if valid_594861 != nil:
    section.add "Filters", valid_594861
  var valid_594862 = query.getOrDefault("MaxRecords")
  valid_594862 = validateParameter(valid_594862, JInt, required = false, default = nil)
  if valid_594862 != nil:
    section.add "MaxRecords", valid_594862
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594863 = header.getOrDefault("X-Amz-Signature")
  valid_594863 = validateParameter(valid_594863, JString, required = false,
                                 default = nil)
  if valid_594863 != nil:
    section.add "X-Amz-Signature", valid_594863
  var valid_594864 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594864 = validateParameter(valid_594864, JString, required = false,
                                 default = nil)
  if valid_594864 != nil:
    section.add "X-Amz-Content-Sha256", valid_594864
  var valid_594865 = header.getOrDefault("X-Amz-Date")
  valid_594865 = validateParameter(valid_594865, JString, required = false,
                                 default = nil)
  if valid_594865 != nil:
    section.add "X-Amz-Date", valid_594865
  var valid_594866 = header.getOrDefault("X-Amz-Credential")
  valid_594866 = validateParameter(valid_594866, JString, required = false,
                                 default = nil)
  if valid_594866 != nil:
    section.add "X-Amz-Credential", valid_594866
  var valid_594867 = header.getOrDefault("X-Amz-Security-Token")
  valid_594867 = validateParameter(valid_594867, JString, required = false,
                                 default = nil)
  if valid_594867 != nil:
    section.add "X-Amz-Security-Token", valid_594867
  var valid_594868 = header.getOrDefault("X-Amz-Algorithm")
  valid_594868 = validateParameter(valid_594868, JString, required = false,
                                 default = nil)
  if valid_594868 != nil:
    section.add "X-Amz-Algorithm", valid_594868
  var valid_594869 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594869 = validateParameter(valid_594869, JString, required = false,
                                 default = nil)
  if valid_594869 != nil:
    section.add "X-Amz-SignedHeaders", valid_594869
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594870: Call_GetDescribeDBClusterSnapshots_594850; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594870.validator(path, query, header, formData, body)
  let scheme = call_594870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594870.url(scheme.get, call_594870.host, call_594870.base,
                         call_594870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594870, url, valid)

proc call*(call_594871: Call_GetDescribeDBClusterSnapshots_594850;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          DBClusterIdentifier: string = ""; SnapshotType: string = "";
          IncludePublic: bool = false;
          Action: string = "DescribeDBClusterSnapshots";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_594872 = newJObject()
  add(query_594872, "Marker", newJString(Marker))
  add(query_594872, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_594872, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594872, "SnapshotType", newJString(SnapshotType))
  add(query_594872, "IncludePublic", newJBool(IncludePublic))
  add(query_594872, "Action", newJString(Action))
  add(query_594872, "IncludeShared", newJBool(IncludeShared))
  add(query_594872, "Version", newJString(Version))
  if Filters != nil:
    query_594872.add "Filters", Filters
  add(query_594872, "MaxRecords", newJInt(MaxRecords))
  result = call_594871.call(nil, query_594872, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_594850(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_594851, base: "/",
    url: url_GetDescribeDBClusterSnapshots_594852,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_594917 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBClusters_594919(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusters_594918(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594920 = query.getOrDefault("Action")
  valid_594920 = validateParameter(valid_594920, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_594920 != nil:
    section.add "Action", valid_594920
  var valid_594921 = query.getOrDefault("Version")
  valid_594921 = validateParameter(valid_594921, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594921 != nil:
    section.add "Version", valid_594921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594922 = header.getOrDefault("X-Amz-Signature")
  valid_594922 = validateParameter(valid_594922, JString, required = false,
                                 default = nil)
  if valid_594922 != nil:
    section.add "X-Amz-Signature", valid_594922
  var valid_594923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594923 = validateParameter(valid_594923, JString, required = false,
                                 default = nil)
  if valid_594923 != nil:
    section.add "X-Amz-Content-Sha256", valid_594923
  var valid_594924 = header.getOrDefault("X-Amz-Date")
  valid_594924 = validateParameter(valid_594924, JString, required = false,
                                 default = nil)
  if valid_594924 != nil:
    section.add "X-Amz-Date", valid_594924
  var valid_594925 = header.getOrDefault("X-Amz-Credential")
  valid_594925 = validateParameter(valid_594925, JString, required = false,
                                 default = nil)
  if valid_594925 != nil:
    section.add "X-Amz-Credential", valid_594925
  var valid_594926 = header.getOrDefault("X-Amz-Security-Token")
  valid_594926 = validateParameter(valid_594926, JString, required = false,
                                 default = nil)
  if valid_594926 != nil:
    section.add "X-Amz-Security-Token", valid_594926
  var valid_594927 = header.getOrDefault("X-Amz-Algorithm")
  valid_594927 = validateParameter(valid_594927, JString, required = false,
                                 default = nil)
  if valid_594927 != nil:
    section.add "X-Amz-Algorithm", valid_594927
  var valid_594928 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594928 = validateParameter(valid_594928, JString, required = false,
                                 default = nil)
  if valid_594928 != nil:
    section.add "X-Amz-SignedHeaders", valid_594928
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_594929 = formData.getOrDefault("MaxRecords")
  valid_594929 = validateParameter(valid_594929, JInt, required = false, default = nil)
  if valid_594929 != nil:
    section.add "MaxRecords", valid_594929
  var valid_594930 = formData.getOrDefault("Marker")
  valid_594930 = validateParameter(valid_594930, JString, required = false,
                                 default = nil)
  if valid_594930 != nil:
    section.add "Marker", valid_594930
  var valid_594931 = formData.getOrDefault("IncludeShared")
  valid_594931 = validateParameter(valid_594931, JBool, required = false, default = nil)
  if valid_594931 != nil:
    section.add "IncludeShared", valid_594931
  var valid_594932 = formData.getOrDefault("Filters")
  valid_594932 = validateParameter(valid_594932, JArray, required = false,
                                 default = nil)
  if valid_594932 != nil:
    section.add "Filters", valid_594932
  var valid_594933 = formData.getOrDefault("DBClusterIdentifier")
  valid_594933 = validateParameter(valid_594933, JString, required = false,
                                 default = nil)
  if valid_594933 != nil:
    section.add "DBClusterIdentifier", valid_594933
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594934: Call_PostDescribeDBClusters_594917; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594934.validator(path, query, header, formData, body)
  let scheme = call_594934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594934.url(scheme.get, call_594934.host, call_594934.base,
                         call_594934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594934, url, valid)

proc call*(call_594935: Call_PostDescribeDBClusters_594917; MaxRecords: int = 0;
          Marker: string = ""; IncludeShared: bool = false;
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_594936 = newJObject()
  var formData_594937 = newJObject()
  add(formData_594937, "MaxRecords", newJInt(MaxRecords))
  add(formData_594937, "Marker", newJString(Marker))
  add(formData_594937, "IncludeShared", newJBool(IncludeShared))
  add(query_594936, "Action", newJString(Action))
  if Filters != nil:
    formData_594937.add "Filters", Filters
  add(query_594936, "Version", newJString(Version))
  add(formData_594937, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_594935.call(nil, query_594936, nil, formData_594937, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_594917(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_594918, base: "/",
    url: url_PostDescribeDBClusters_594919, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_594897 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBClusters_594899(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusters_594898(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_594900 = query.getOrDefault("Marker")
  valid_594900 = validateParameter(valid_594900, JString, required = false,
                                 default = nil)
  if valid_594900 != nil:
    section.add "Marker", valid_594900
  var valid_594901 = query.getOrDefault("DBClusterIdentifier")
  valid_594901 = validateParameter(valid_594901, JString, required = false,
                                 default = nil)
  if valid_594901 != nil:
    section.add "DBClusterIdentifier", valid_594901
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594902 = query.getOrDefault("Action")
  valid_594902 = validateParameter(valid_594902, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_594902 != nil:
    section.add "Action", valid_594902
  var valid_594903 = query.getOrDefault("IncludeShared")
  valid_594903 = validateParameter(valid_594903, JBool, required = false, default = nil)
  if valid_594903 != nil:
    section.add "IncludeShared", valid_594903
  var valid_594904 = query.getOrDefault("Version")
  valid_594904 = validateParameter(valid_594904, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594904 != nil:
    section.add "Version", valid_594904
  var valid_594905 = query.getOrDefault("Filters")
  valid_594905 = validateParameter(valid_594905, JArray, required = false,
                                 default = nil)
  if valid_594905 != nil:
    section.add "Filters", valid_594905
  var valid_594906 = query.getOrDefault("MaxRecords")
  valid_594906 = validateParameter(valid_594906, JInt, required = false, default = nil)
  if valid_594906 != nil:
    section.add "MaxRecords", valid_594906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594907 = header.getOrDefault("X-Amz-Signature")
  valid_594907 = validateParameter(valid_594907, JString, required = false,
                                 default = nil)
  if valid_594907 != nil:
    section.add "X-Amz-Signature", valid_594907
  var valid_594908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594908 = validateParameter(valid_594908, JString, required = false,
                                 default = nil)
  if valid_594908 != nil:
    section.add "X-Amz-Content-Sha256", valid_594908
  var valid_594909 = header.getOrDefault("X-Amz-Date")
  valid_594909 = validateParameter(valid_594909, JString, required = false,
                                 default = nil)
  if valid_594909 != nil:
    section.add "X-Amz-Date", valid_594909
  var valid_594910 = header.getOrDefault("X-Amz-Credential")
  valid_594910 = validateParameter(valid_594910, JString, required = false,
                                 default = nil)
  if valid_594910 != nil:
    section.add "X-Amz-Credential", valid_594910
  var valid_594911 = header.getOrDefault("X-Amz-Security-Token")
  valid_594911 = validateParameter(valid_594911, JString, required = false,
                                 default = nil)
  if valid_594911 != nil:
    section.add "X-Amz-Security-Token", valid_594911
  var valid_594912 = header.getOrDefault("X-Amz-Algorithm")
  valid_594912 = validateParameter(valid_594912, JString, required = false,
                                 default = nil)
  if valid_594912 != nil:
    section.add "X-Amz-Algorithm", valid_594912
  var valid_594913 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594913 = validateParameter(valid_594913, JString, required = false,
                                 default = nil)
  if valid_594913 != nil:
    section.add "X-Amz-SignedHeaders", valid_594913
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594914: Call_GetDescribeDBClusters_594897; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594914.validator(path, query, header, formData, body)
  let scheme = call_594914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594914.url(scheme.get, call_594914.host, call_594914.base,
                         call_594914.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594914, url, valid)

proc call*(call_594915: Call_GetDescribeDBClusters_594897; Marker: string = "";
          DBClusterIdentifier: string = ""; Action: string = "DescribeDBClusters";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_594916 = newJObject()
  add(query_594916, "Marker", newJString(Marker))
  add(query_594916, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594916, "Action", newJString(Action))
  add(query_594916, "IncludeShared", newJBool(IncludeShared))
  add(query_594916, "Version", newJString(Version))
  if Filters != nil:
    query_594916.add "Filters", Filters
  add(query_594916, "MaxRecords", newJInt(MaxRecords))
  result = call_594915.call(nil, query_594916, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_594897(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_594898, base: "/",
    url: url_GetDescribeDBClusters_594899, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_594963 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBEngineVersions_594965(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBEngineVersions_594964(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594966 = query.getOrDefault("Action")
  valid_594966 = validateParameter(valid_594966, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_594966 != nil:
    section.add "Action", valid_594966
  var valid_594967 = query.getOrDefault("Version")
  valid_594967 = validateParameter(valid_594967, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594967 != nil:
    section.add "Version", valid_594967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594968 = header.getOrDefault("X-Amz-Signature")
  valid_594968 = validateParameter(valid_594968, JString, required = false,
                                 default = nil)
  if valid_594968 != nil:
    section.add "X-Amz-Signature", valid_594968
  var valid_594969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594969 = validateParameter(valid_594969, JString, required = false,
                                 default = nil)
  if valid_594969 != nil:
    section.add "X-Amz-Content-Sha256", valid_594969
  var valid_594970 = header.getOrDefault("X-Amz-Date")
  valid_594970 = validateParameter(valid_594970, JString, required = false,
                                 default = nil)
  if valid_594970 != nil:
    section.add "X-Amz-Date", valid_594970
  var valid_594971 = header.getOrDefault("X-Amz-Credential")
  valid_594971 = validateParameter(valid_594971, JString, required = false,
                                 default = nil)
  if valid_594971 != nil:
    section.add "X-Amz-Credential", valid_594971
  var valid_594972 = header.getOrDefault("X-Amz-Security-Token")
  valid_594972 = validateParameter(valid_594972, JString, required = false,
                                 default = nil)
  if valid_594972 != nil:
    section.add "X-Amz-Security-Token", valid_594972
  var valid_594973 = header.getOrDefault("X-Amz-Algorithm")
  valid_594973 = validateParameter(valid_594973, JString, required = false,
                                 default = nil)
  if valid_594973 != nil:
    section.add "X-Amz-Algorithm", valid_594973
  var valid_594974 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594974 = validateParameter(valid_594974, JString, required = false,
                                 default = nil)
  if valid_594974 != nil:
    section.add "X-Amz-SignedHeaders", valid_594974
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  section = newJObject()
  var valid_594975 = formData.getOrDefault("DefaultOnly")
  valid_594975 = validateParameter(valid_594975, JBool, required = false, default = nil)
  if valid_594975 != nil:
    section.add "DefaultOnly", valid_594975
  var valid_594976 = formData.getOrDefault("MaxRecords")
  valid_594976 = validateParameter(valid_594976, JInt, required = false, default = nil)
  if valid_594976 != nil:
    section.add "MaxRecords", valid_594976
  var valid_594977 = formData.getOrDefault("EngineVersion")
  valid_594977 = validateParameter(valid_594977, JString, required = false,
                                 default = nil)
  if valid_594977 != nil:
    section.add "EngineVersion", valid_594977
  var valid_594978 = formData.getOrDefault("Marker")
  valid_594978 = validateParameter(valid_594978, JString, required = false,
                                 default = nil)
  if valid_594978 != nil:
    section.add "Marker", valid_594978
  var valid_594979 = formData.getOrDefault("IncludeAll")
  valid_594979 = validateParameter(valid_594979, JBool, required = false, default = nil)
  if valid_594979 != nil:
    section.add "IncludeAll", valid_594979
  var valid_594980 = formData.getOrDefault("Engine")
  valid_594980 = validateParameter(valid_594980, JString, required = false,
                                 default = nil)
  if valid_594980 != nil:
    section.add "Engine", valid_594980
  var valid_594981 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_594981 = validateParameter(valid_594981, JBool, required = false, default = nil)
  if valid_594981 != nil:
    section.add "ListSupportedCharacterSets", valid_594981
  var valid_594982 = formData.getOrDefault("ListSupportedTimezones")
  valid_594982 = validateParameter(valid_594982, JBool, required = false, default = nil)
  if valid_594982 != nil:
    section.add "ListSupportedTimezones", valid_594982
  var valid_594983 = formData.getOrDefault("Filters")
  valid_594983 = validateParameter(valid_594983, JArray, required = false,
                                 default = nil)
  if valid_594983 != nil:
    section.add "Filters", valid_594983
  var valid_594984 = formData.getOrDefault("DBParameterGroupFamily")
  valid_594984 = validateParameter(valid_594984, JString, required = false,
                                 default = nil)
  if valid_594984 != nil:
    section.add "DBParameterGroupFamily", valid_594984
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594985: Call_PostDescribeDBEngineVersions_594963; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_594985.validator(path, query, header, formData, body)
  let scheme = call_594985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594985.url(scheme.get, call_594985.host, call_594985.base,
                         call_594985.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594985, url, valid)

proc call*(call_594986: Call_PostDescribeDBEngineVersions_594963;
          DefaultOnly: bool = false; MaxRecords: int = 0; EngineVersion: string = "";
          Marker: string = ""; IncludeAll: bool = false; Engine: string = "";
          ListSupportedCharacterSets: bool = false;
          Action: string = "DescribeDBEngineVersions";
          ListSupportedTimezones: bool = false; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBParameterGroupFamily: string = ""): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Action: string (required)
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  var query_594987 = newJObject()
  var formData_594988 = newJObject()
  add(formData_594988, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_594988, "MaxRecords", newJInt(MaxRecords))
  add(formData_594988, "EngineVersion", newJString(EngineVersion))
  add(formData_594988, "Marker", newJString(Marker))
  add(formData_594988, "IncludeAll", newJBool(IncludeAll))
  add(formData_594988, "Engine", newJString(Engine))
  add(formData_594988, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_594987, "Action", newJString(Action))
  add(formData_594988, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  if Filters != nil:
    formData_594988.add "Filters", Filters
  add(query_594987, "Version", newJString(Version))
  add(formData_594988, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_594986.call(nil, query_594987, nil, formData_594988, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_594963(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_594964, base: "/",
    url: url_PostDescribeDBEngineVersions_594965,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_594938 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBEngineVersions_594940(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBEngineVersions_594939(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: JString (required)
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_594941 = query.getOrDefault("Marker")
  valid_594941 = validateParameter(valid_594941, JString, required = false,
                                 default = nil)
  if valid_594941 != nil:
    section.add "Marker", valid_594941
  var valid_594942 = query.getOrDefault("ListSupportedTimezones")
  valid_594942 = validateParameter(valid_594942, JBool, required = false, default = nil)
  if valid_594942 != nil:
    section.add "ListSupportedTimezones", valid_594942
  var valid_594943 = query.getOrDefault("DBParameterGroupFamily")
  valid_594943 = validateParameter(valid_594943, JString, required = false,
                                 default = nil)
  if valid_594943 != nil:
    section.add "DBParameterGroupFamily", valid_594943
  var valid_594944 = query.getOrDefault("Engine")
  valid_594944 = validateParameter(valid_594944, JString, required = false,
                                 default = nil)
  if valid_594944 != nil:
    section.add "Engine", valid_594944
  var valid_594945 = query.getOrDefault("IncludeAll")
  valid_594945 = validateParameter(valid_594945, JBool, required = false, default = nil)
  if valid_594945 != nil:
    section.add "IncludeAll", valid_594945
  var valid_594946 = query.getOrDefault("EngineVersion")
  valid_594946 = validateParameter(valid_594946, JString, required = false,
                                 default = nil)
  if valid_594946 != nil:
    section.add "EngineVersion", valid_594946
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594947 = query.getOrDefault("Action")
  valid_594947 = validateParameter(valid_594947, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_594947 != nil:
    section.add "Action", valid_594947
  var valid_594948 = query.getOrDefault("ListSupportedCharacterSets")
  valid_594948 = validateParameter(valid_594948, JBool, required = false, default = nil)
  if valid_594948 != nil:
    section.add "ListSupportedCharacterSets", valid_594948
  var valid_594949 = query.getOrDefault("Version")
  valid_594949 = validateParameter(valid_594949, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594949 != nil:
    section.add "Version", valid_594949
  var valid_594950 = query.getOrDefault("Filters")
  valid_594950 = validateParameter(valid_594950, JArray, required = false,
                                 default = nil)
  if valid_594950 != nil:
    section.add "Filters", valid_594950
  var valid_594951 = query.getOrDefault("MaxRecords")
  valid_594951 = validateParameter(valid_594951, JInt, required = false, default = nil)
  if valid_594951 != nil:
    section.add "MaxRecords", valid_594951
  var valid_594952 = query.getOrDefault("DefaultOnly")
  valid_594952 = validateParameter(valid_594952, JBool, required = false, default = nil)
  if valid_594952 != nil:
    section.add "DefaultOnly", valid_594952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594953 = header.getOrDefault("X-Amz-Signature")
  valid_594953 = validateParameter(valid_594953, JString, required = false,
                                 default = nil)
  if valid_594953 != nil:
    section.add "X-Amz-Signature", valid_594953
  var valid_594954 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594954 = validateParameter(valid_594954, JString, required = false,
                                 default = nil)
  if valid_594954 != nil:
    section.add "X-Amz-Content-Sha256", valid_594954
  var valid_594955 = header.getOrDefault("X-Amz-Date")
  valid_594955 = validateParameter(valid_594955, JString, required = false,
                                 default = nil)
  if valid_594955 != nil:
    section.add "X-Amz-Date", valid_594955
  var valid_594956 = header.getOrDefault("X-Amz-Credential")
  valid_594956 = validateParameter(valid_594956, JString, required = false,
                                 default = nil)
  if valid_594956 != nil:
    section.add "X-Amz-Credential", valid_594956
  var valid_594957 = header.getOrDefault("X-Amz-Security-Token")
  valid_594957 = validateParameter(valid_594957, JString, required = false,
                                 default = nil)
  if valid_594957 != nil:
    section.add "X-Amz-Security-Token", valid_594957
  var valid_594958 = header.getOrDefault("X-Amz-Algorithm")
  valid_594958 = validateParameter(valid_594958, JString, required = false,
                                 default = nil)
  if valid_594958 != nil:
    section.add "X-Amz-Algorithm", valid_594958
  var valid_594959 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594959 = validateParameter(valid_594959, JString, required = false,
                                 default = nil)
  if valid_594959 != nil:
    section.add "X-Amz-SignedHeaders", valid_594959
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594960: Call_GetDescribeDBEngineVersions_594938; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_594960.validator(path, query, header, formData, body)
  let scheme = call_594960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594960.url(scheme.get, call_594960.host, call_594960.base,
                         call_594960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594960, url, valid)

proc call*(call_594961: Call_GetDescribeDBEngineVersions_594938;
          Marker: string = ""; ListSupportedTimezones: bool = false;
          DBParameterGroupFamily: string = ""; Engine: string = "";
          IncludeAll: bool = false; EngineVersion: string = "";
          Action: string = "DescribeDBEngineVersions";
          ListSupportedCharacterSets: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: string
  ##         : The database engine to return.
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: string (required)
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  var query_594962 = newJObject()
  add(query_594962, "Marker", newJString(Marker))
  add(query_594962, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_594962, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_594962, "Engine", newJString(Engine))
  add(query_594962, "IncludeAll", newJBool(IncludeAll))
  add(query_594962, "EngineVersion", newJString(EngineVersion))
  add(query_594962, "Action", newJString(Action))
  add(query_594962, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_594962, "Version", newJString(Version))
  if Filters != nil:
    query_594962.add "Filters", Filters
  add(query_594962, "MaxRecords", newJInt(MaxRecords))
  add(query_594962, "DefaultOnly", newJBool(DefaultOnly))
  result = call_594961.call(nil, query_594962, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_594938(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_594939, base: "/",
    url: url_GetDescribeDBEngineVersions_594940,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstanceAutomatedBackups_595009 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBInstanceAutomatedBackups_595011(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBInstanceAutomatedBackups_595010(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595012 = query.getOrDefault("Action")
  valid_595012 = validateParameter(valid_595012, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_595012 != nil:
    section.add "Action", valid_595012
  var valid_595013 = query.getOrDefault("Version")
  valid_595013 = validateParameter(valid_595013, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595013 != nil:
    section.add "Version", valid_595013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595014 = header.getOrDefault("X-Amz-Signature")
  valid_595014 = validateParameter(valid_595014, JString, required = false,
                                 default = nil)
  if valid_595014 != nil:
    section.add "X-Amz-Signature", valid_595014
  var valid_595015 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595015 = validateParameter(valid_595015, JString, required = false,
                                 default = nil)
  if valid_595015 != nil:
    section.add "X-Amz-Content-Sha256", valid_595015
  var valid_595016 = header.getOrDefault("X-Amz-Date")
  valid_595016 = validateParameter(valid_595016, JString, required = false,
                                 default = nil)
  if valid_595016 != nil:
    section.add "X-Amz-Date", valid_595016
  var valid_595017 = header.getOrDefault("X-Amz-Credential")
  valid_595017 = validateParameter(valid_595017, JString, required = false,
                                 default = nil)
  if valid_595017 != nil:
    section.add "X-Amz-Credential", valid_595017
  var valid_595018 = header.getOrDefault("X-Amz-Security-Token")
  valid_595018 = validateParameter(valid_595018, JString, required = false,
                                 default = nil)
  if valid_595018 != nil:
    section.add "X-Amz-Security-Token", valid_595018
  var valid_595019 = header.getOrDefault("X-Amz-Algorithm")
  valid_595019 = validateParameter(valid_595019, JString, required = false,
                                 default = nil)
  if valid_595019 != nil:
    section.add "X-Amz-Algorithm", valid_595019
  var valid_595020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595020 = validateParameter(valid_595020, JString, required = false,
                                 default = nil)
  if valid_595020 != nil:
    section.add "X-Amz-SignedHeaders", valid_595020
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  section = newJObject()
  var valid_595021 = formData.getOrDefault("MaxRecords")
  valid_595021 = validateParameter(valid_595021, JInt, required = false, default = nil)
  if valid_595021 != nil:
    section.add "MaxRecords", valid_595021
  var valid_595022 = formData.getOrDefault("Marker")
  valid_595022 = validateParameter(valid_595022, JString, required = false,
                                 default = nil)
  if valid_595022 != nil:
    section.add "Marker", valid_595022
  var valid_595023 = formData.getOrDefault("DbiResourceId")
  valid_595023 = validateParameter(valid_595023, JString, required = false,
                                 default = nil)
  if valid_595023 != nil:
    section.add "DbiResourceId", valid_595023
  var valid_595024 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595024 = validateParameter(valid_595024, JString, required = false,
                                 default = nil)
  if valid_595024 != nil:
    section.add "DBInstanceIdentifier", valid_595024
  var valid_595025 = formData.getOrDefault("Filters")
  valid_595025 = validateParameter(valid_595025, JArray, required = false,
                                 default = nil)
  if valid_595025 != nil:
    section.add "Filters", valid_595025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595026: Call_PostDescribeDBInstanceAutomatedBackups_595009;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_595026.validator(path, query, header, formData, body)
  let scheme = call_595026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595026.url(scheme.get, call_595026.host, call_595026.base,
                         call_595026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595026, url, valid)

proc call*(call_595027: Call_PostDescribeDBInstanceAutomatedBackups_595009;
          MaxRecords: int = 0; Marker: string = ""; DbiResourceId: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   Version: string (required)
  var query_595028 = newJObject()
  var formData_595029 = newJObject()
  add(formData_595029, "MaxRecords", newJInt(MaxRecords))
  add(formData_595029, "Marker", newJString(Marker))
  add(formData_595029, "DbiResourceId", newJString(DbiResourceId))
  add(formData_595029, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595028, "Action", newJString(Action))
  if Filters != nil:
    formData_595029.add "Filters", Filters
  add(query_595028, "Version", newJString(Version))
  result = call_595027.call(nil, query_595028, nil, formData_595029, nil)

var postDescribeDBInstanceAutomatedBackups* = Call_PostDescribeDBInstanceAutomatedBackups_595009(
    name: "postDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_PostDescribeDBInstanceAutomatedBackups_595010, base: "/",
    url: url_PostDescribeDBInstanceAutomatedBackups_595011,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstanceAutomatedBackups_594989 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBInstanceAutomatedBackups_594991(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBInstanceAutomatedBackups_594990(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  section = newJObject()
  var valid_594992 = query.getOrDefault("DbiResourceId")
  valid_594992 = validateParameter(valid_594992, JString, required = false,
                                 default = nil)
  if valid_594992 != nil:
    section.add "DbiResourceId", valid_594992
  var valid_594993 = query.getOrDefault("Marker")
  valid_594993 = validateParameter(valid_594993, JString, required = false,
                                 default = nil)
  if valid_594993 != nil:
    section.add "Marker", valid_594993
  var valid_594994 = query.getOrDefault("DBInstanceIdentifier")
  valid_594994 = validateParameter(valid_594994, JString, required = false,
                                 default = nil)
  if valid_594994 != nil:
    section.add "DBInstanceIdentifier", valid_594994
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594995 = query.getOrDefault("Action")
  valid_594995 = validateParameter(valid_594995, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_594995 != nil:
    section.add "Action", valid_594995
  var valid_594996 = query.getOrDefault("Version")
  valid_594996 = validateParameter(valid_594996, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594996 != nil:
    section.add "Version", valid_594996
  var valid_594997 = query.getOrDefault("Filters")
  valid_594997 = validateParameter(valid_594997, JArray, required = false,
                                 default = nil)
  if valid_594997 != nil:
    section.add "Filters", valid_594997
  var valid_594998 = query.getOrDefault("MaxRecords")
  valid_594998 = validateParameter(valid_594998, JInt, required = false, default = nil)
  if valid_594998 != nil:
    section.add "MaxRecords", valid_594998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594999 = header.getOrDefault("X-Amz-Signature")
  valid_594999 = validateParameter(valid_594999, JString, required = false,
                                 default = nil)
  if valid_594999 != nil:
    section.add "X-Amz-Signature", valid_594999
  var valid_595000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595000 = validateParameter(valid_595000, JString, required = false,
                                 default = nil)
  if valid_595000 != nil:
    section.add "X-Amz-Content-Sha256", valid_595000
  var valid_595001 = header.getOrDefault("X-Amz-Date")
  valid_595001 = validateParameter(valid_595001, JString, required = false,
                                 default = nil)
  if valid_595001 != nil:
    section.add "X-Amz-Date", valid_595001
  var valid_595002 = header.getOrDefault("X-Amz-Credential")
  valid_595002 = validateParameter(valid_595002, JString, required = false,
                                 default = nil)
  if valid_595002 != nil:
    section.add "X-Amz-Credential", valid_595002
  var valid_595003 = header.getOrDefault("X-Amz-Security-Token")
  valid_595003 = validateParameter(valid_595003, JString, required = false,
                                 default = nil)
  if valid_595003 != nil:
    section.add "X-Amz-Security-Token", valid_595003
  var valid_595004 = header.getOrDefault("X-Amz-Algorithm")
  valid_595004 = validateParameter(valid_595004, JString, required = false,
                                 default = nil)
  if valid_595004 != nil:
    section.add "X-Amz-Algorithm", valid_595004
  var valid_595005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595005 = validateParameter(valid_595005, JString, required = false,
                                 default = nil)
  if valid_595005 != nil:
    section.add "X-Amz-SignedHeaders", valid_595005
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595006: Call_GetDescribeDBInstanceAutomatedBackups_594989;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_595006.validator(path, query, header, formData, body)
  let scheme = call_595006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595006.url(scheme.get, call_595006.host, call_595006.base,
                         call_595006.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595006, url, valid)

proc call*(call_595007: Call_GetDescribeDBInstanceAutomatedBackups_594989;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  var query_595008 = newJObject()
  add(query_595008, "DbiResourceId", newJString(DbiResourceId))
  add(query_595008, "Marker", newJString(Marker))
  add(query_595008, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595008, "Action", newJString(Action))
  add(query_595008, "Version", newJString(Version))
  if Filters != nil:
    query_595008.add "Filters", Filters
  add(query_595008, "MaxRecords", newJInt(MaxRecords))
  result = call_595007.call(nil, query_595008, nil, nil, nil)

var getDescribeDBInstanceAutomatedBackups* = Call_GetDescribeDBInstanceAutomatedBackups_594989(
    name: "getDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_GetDescribeDBInstanceAutomatedBackups_594990, base: "/",
    url: url_GetDescribeDBInstanceAutomatedBackups_594991,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_595049 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBInstances_595051(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBInstances_595050(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595052 = query.getOrDefault("Action")
  valid_595052 = validateParameter(valid_595052, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_595052 != nil:
    section.add "Action", valid_595052
  var valid_595053 = query.getOrDefault("Version")
  valid_595053 = validateParameter(valid_595053, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595053 != nil:
    section.add "Version", valid_595053
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595054 = header.getOrDefault("X-Amz-Signature")
  valid_595054 = validateParameter(valid_595054, JString, required = false,
                                 default = nil)
  if valid_595054 != nil:
    section.add "X-Amz-Signature", valid_595054
  var valid_595055 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595055 = validateParameter(valid_595055, JString, required = false,
                                 default = nil)
  if valid_595055 != nil:
    section.add "X-Amz-Content-Sha256", valid_595055
  var valid_595056 = header.getOrDefault("X-Amz-Date")
  valid_595056 = validateParameter(valid_595056, JString, required = false,
                                 default = nil)
  if valid_595056 != nil:
    section.add "X-Amz-Date", valid_595056
  var valid_595057 = header.getOrDefault("X-Amz-Credential")
  valid_595057 = validateParameter(valid_595057, JString, required = false,
                                 default = nil)
  if valid_595057 != nil:
    section.add "X-Amz-Credential", valid_595057
  var valid_595058 = header.getOrDefault("X-Amz-Security-Token")
  valid_595058 = validateParameter(valid_595058, JString, required = false,
                                 default = nil)
  if valid_595058 != nil:
    section.add "X-Amz-Security-Token", valid_595058
  var valid_595059 = header.getOrDefault("X-Amz-Algorithm")
  valid_595059 = validateParameter(valid_595059, JString, required = false,
                                 default = nil)
  if valid_595059 != nil:
    section.add "X-Amz-Algorithm", valid_595059
  var valid_595060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595060 = validateParameter(valid_595060, JString, required = false,
                                 default = nil)
  if valid_595060 != nil:
    section.add "X-Amz-SignedHeaders", valid_595060
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  section = newJObject()
  var valid_595061 = formData.getOrDefault("MaxRecords")
  valid_595061 = validateParameter(valid_595061, JInt, required = false, default = nil)
  if valid_595061 != nil:
    section.add "MaxRecords", valid_595061
  var valid_595062 = formData.getOrDefault("Marker")
  valid_595062 = validateParameter(valid_595062, JString, required = false,
                                 default = nil)
  if valid_595062 != nil:
    section.add "Marker", valid_595062
  var valid_595063 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595063 = validateParameter(valid_595063, JString, required = false,
                                 default = nil)
  if valid_595063 != nil:
    section.add "DBInstanceIdentifier", valid_595063
  var valid_595064 = formData.getOrDefault("Filters")
  valid_595064 = validateParameter(valid_595064, JArray, required = false,
                                 default = nil)
  if valid_595064 != nil:
    section.add "Filters", valid_595064
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595065: Call_PostDescribeDBInstances_595049; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  let valid = call_595065.validator(path, query, header, formData, body)
  let scheme = call_595065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595065.url(scheme.get, call_595065.host, call_595065.base,
                         call_595065.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595065, url, valid)

proc call*(call_595066: Call_PostDescribeDBInstances_595049; MaxRecords: int = 0;
          Marker: string = ""; DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_595067 = newJObject()
  var formData_595068 = newJObject()
  add(formData_595068, "MaxRecords", newJInt(MaxRecords))
  add(formData_595068, "Marker", newJString(Marker))
  add(formData_595068, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595067, "Action", newJString(Action))
  if Filters != nil:
    formData_595068.add "Filters", Filters
  add(query_595067, "Version", newJString(Version))
  result = call_595066.call(nil, query_595067, nil, formData_595068, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_595049(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_595050, base: "/",
    url: url_PostDescribeDBInstances_595051, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_595030 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBInstances_595032(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBInstances_595031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595033 = query.getOrDefault("Marker")
  valid_595033 = validateParameter(valid_595033, JString, required = false,
                                 default = nil)
  if valid_595033 != nil:
    section.add "Marker", valid_595033
  var valid_595034 = query.getOrDefault("DBInstanceIdentifier")
  valid_595034 = validateParameter(valid_595034, JString, required = false,
                                 default = nil)
  if valid_595034 != nil:
    section.add "DBInstanceIdentifier", valid_595034
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595035 = query.getOrDefault("Action")
  valid_595035 = validateParameter(valid_595035, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_595035 != nil:
    section.add "Action", valid_595035
  var valid_595036 = query.getOrDefault("Version")
  valid_595036 = validateParameter(valid_595036, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595036 != nil:
    section.add "Version", valid_595036
  var valid_595037 = query.getOrDefault("Filters")
  valid_595037 = validateParameter(valid_595037, JArray, required = false,
                                 default = nil)
  if valid_595037 != nil:
    section.add "Filters", valid_595037
  var valid_595038 = query.getOrDefault("MaxRecords")
  valid_595038 = validateParameter(valid_595038, JInt, required = false, default = nil)
  if valid_595038 != nil:
    section.add "MaxRecords", valid_595038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595039 = header.getOrDefault("X-Amz-Signature")
  valid_595039 = validateParameter(valid_595039, JString, required = false,
                                 default = nil)
  if valid_595039 != nil:
    section.add "X-Amz-Signature", valid_595039
  var valid_595040 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595040 = validateParameter(valid_595040, JString, required = false,
                                 default = nil)
  if valid_595040 != nil:
    section.add "X-Amz-Content-Sha256", valid_595040
  var valid_595041 = header.getOrDefault("X-Amz-Date")
  valid_595041 = validateParameter(valid_595041, JString, required = false,
                                 default = nil)
  if valid_595041 != nil:
    section.add "X-Amz-Date", valid_595041
  var valid_595042 = header.getOrDefault("X-Amz-Credential")
  valid_595042 = validateParameter(valid_595042, JString, required = false,
                                 default = nil)
  if valid_595042 != nil:
    section.add "X-Amz-Credential", valid_595042
  var valid_595043 = header.getOrDefault("X-Amz-Security-Token")
  valid_595043 = validateParameter(valid_595043, JString, required = false,
                                 default = nil)
  if valid_595043 != nil:
    section.add "X-Amz-Security-Token", valid_595043
  var valid_595044 = header.getOrDefault("X-Amz-Algorithm")
  valid_595044 = validateParameter(valid_595044, JString, required = false,
                                 default = nil)
  if valid_595044 != nil:
    section.add "X-Amz-Algorithm", valid_595044
  var valid_595045 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595045 = validateParameter(valid_595045, JString, required = false,
                                 default = nil)
  if valid_595045 != nil:
    section.add "X-Amz-SignedHeaders", valid_595045
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595046: Call_GetDescribeDBInstances_595030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  let valid = call_595046.validator(path, query, header, formData, body)
  let scheme = call_595046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595046.url(scheme.get, call_595046.host, call_595046.base,
                         call_595046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595046, url, valid)

proc call*(call_595047: Call_GetDescribeDBInstances_595030; Marker: string = "";
          DBInstanceIdentifier: string = ""; Action: string = "DescribeDBInstances";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstances
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595048 = newJObject()
  add(query_595048, "Marker", newJString(Marker))
  add(query_595048, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595048, "Action", newJString(Action))
  add(query_595048, "Version", newJString(Version))
  if Filters != nil:
    query_595048.add "Filters", Filters
  add(query_595048, "MaxRecords", newJInt(MaxRecords))
  result = call_595047.call(nil, query_595048, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_595030(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_595031, base: "/",
    url: url_GetDescribeDBInstances_595032, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBLogFiles_595091 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBLogFiles_595093(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBLogFiles_595092(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595094 = query.getOrDefault("Action")
  valid_595094 = validateParameter(valid_595094, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_595094 != nil:
    section.add "Action", valid_595094
  var valid_595095 = query.getOrDefault("Version")
  valid_595095 = validateParameter(valid_595095, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595095 != nil:
    section.add "Version", valid_595095
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595096 = header.getOrDefault("X-Amz-Signature")
  valid_595096 = validateParameter(valid_595096, JString, required = false,
                                 default = nil)
  if valid_595096 != nil:
    section.add "X-Amz-Signature", valid_595096
  var valid_595097 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595097 = validateParameter(valid_595097, JString, required = false,
                                 default = nil)
  if valid_595097 != nil:
    section.add "X-Amz-Content-Sha256", valid_595097
  var valid_595098 = header.getOrDefault("X-Amz-Date")
  valid_595098 = validateParameter(valid_595098, JString, required = false,
                                 default = nil)
  if valid_595098 != nil:
    section.add "X-Amz-Date", valid_595098
  var valid_595099 = header.getOrDefault("X-Amz-Credential")
  valid_595099 = validateParameter(valid_595099, JString, required = false,
                                 default = nil)
  if valid_595099 != nil:
    section.add "X-Amz-Credential", valid_595099
  var valid_595100 = header.getOrDefault("X-Amz-Security-Token")
  valid_595100 = validateParameter(valid_595100, JString, required = false,
                                 default = nil)
  if valid_595100 != nil:
    section.add "X-Amz-Security-Token", valid_595100
  var valid_595101 = header.getOrDefault("X-Amz-Algorithm")
  valid_595101 = validateParameter(valid_595101, JString, required = false,
                                 default = nil)
  if valid_595101 != nil:
    section.add "X-Amz-Algorithm", valid_595101
  var valid_595102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595102 = validateParameter(valid_595102, JString, required = false,
                                 default = nil)
  if valid_595102 != nil:
    section.add "X-Amz-SignedHeaders", valid_595102
  result.add "header", section
  ## parameters in `formData` object:
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  section = newJObject()
  var valid_595103 = formData.getOrDefault("FileSize")
  valid_595103 = validateParameter(valid_595103, JInt, required = false, default = nil)
  if valid_595103 != nil:
    section.add "FileSize", valid_595103
  var valid_595104 = formData.getOrDefault("MaxRecords")
  valid_595104 = validateParameter(valid_595104, JInt, required = false, default = nil)
  if valid_595104 != nil:
    section.add "MaxRecords", valid_595104
  var valid_595105 = formData.getOrDefault("Marker")
  valid_595105 = validateParameter(valid_595105, JString, required = false,
                                 default = nil)
  if valid_595105 != nil:
    section.add "Marker", valid_595105
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595106 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595106 = validateParameter(valid_595106, JString, required = true,
                                 default = nil)
  if valid_595106 != nil:
    section.add "DBInstanceIdentifier", valid_595106
  var valid_595107 = formData.getOrDefault("FilenameContains")
  valid_595107 = validateParameter(valid_595107, JString, required = false,
                                 default = nil)
  if valid_595107 != nil:
    section.add "FilenameContains", valid_595107
  var valid_595108 = formData.getOrDefault("Filters")
  valid_595108 = validateParameter(valid_595108, JArray, required = false,
                                 default = nil)
  if valid_595108 != nil:
    section.add "Filters", valid_595108
  var valid_595109 = formData.getOrDefault("FileLastWritten")
  valid_595109 = validateParameter(valid_595109, JInt, required = false, default = nil)
  if valid_595109 != nil:
    section.add "FileLastWritten", valid_595109
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595110: Call_PostDescribeDBLogFiles_595091; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_595110.validator(path, query, header, formData, body)
  let scheme = call_595110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595110.url(scheme.get, call_595110.host, call_595110.base,
                         call_595110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595110, url, valid)

proc call*(call_595111: Call_PostDescribeDBLogFiles_595091;
          DBInstanceIdentifier: string; FileSize: int = 0; MaxRecords: int = 0;
          Marker: string = ""; FilenameContains: string = "";
          Action: string = "DescribeDBLogFiles"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; FileLastWritten: int = 0): Recallable =
  ## postDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  var query_595112 = newJObject()
  var formData_595113 = newJObject()
  add(formData_595113, "FileSize", newJInt(FileSize))
  add(formData_595113, "MaxRecords", newJInt(MaxRecords))
  add(formData_595113, "Marker", newJString(Marker))
  add(formData_595113, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_595113, "FilenameContains", newJString(FilenameContains))
  add(query_595112, "Action", newJString(Action))
  if Filters != nil:
    formData_595113.add "Filters", Filters
  add(query_595112, "Version", newJString(Version))
  add(formData_595113, "FileLastWritten", newJInt(FileLastWritten))
  result = call_595111.call(nil, query_595112, nil, formData_595113, nil)

var postDescribeDBLogFiles* = Call_PostDescribeDBLogFiles_595091(
    name: "postDescribeDBLogFiles", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_PostDescribeDBLogFiles_595092, base: "/",
    url: url_PostDescribeDBLogFiles_595093, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBLogFiles_595069 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBLogFiles_595071(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBLogFiles_595070(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: JString (required)
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  section = newJObject()
  var valid_595072 = query.getOrDefault("Marker")
  valid_595072 = validateParameter(valid_595072, JString, required = false,
                                 default = nil)
  if valid_595072 != nil:
    section.add "Marker", valid_595072
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595073 = query.getOrDefault("DBInstanceIdentifier")
  valid_595073 = validateParameter(valid_595073, JString, required = true,
                                 default = nil)
  if valid_595073 != nil:
    section.add "DBInstanceIdentifier", valid_595073
  var valid_595074 = query.getOrDefault("FileLastWritten")
  valid_595074 = validateParameter(valid_595074, JInt, required = false, default = nil)
  if valid_595074 != nil:
    section.add "FileLastWritten", valid_595074
  var valid_595075 = query.getOrDefault("Action")
  valid_595075 = validateParameter(valid_595075, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_595075 != nil:
    section.add "Action", valid_595075
  var valid_595076 = query.getOrDefault("FilenameContains")
  valid_595076 = validateParameter(valid_595076, JString, required = false,
                                 default = nil)
  if valid_595076 != nil:
    section.add "FilenameContains", valid_595076
  var valid_595077 = query.getOrDefault("Version")
  valid_595077 = validateParameter(valid_595077, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595077 != nil:
    section.add "Version", valid_595077
  var valid_595078 = query.getOrDefault("Filters")
  valid_595078 = validateParameter(valid_595078, JArray, required = false,
                                 default = nil)
  if valid_595078 != nil:
    section.add "Filters", valid_595078
  var valid_595079 = query.getOrDefault("MaxRecords")
  valid_595079 = validateParameter(valid_595079, JInt, required = false, default = nil)
  if valid_595079 != nil:
    section.add "MaxRecords", valid_595079
  var valid_595080 = query.getOrDefault("FileSize")
  valid_595080 = validateParameter(valid_595080, JInt, required = false, default = nil)
  if valid_595080 != nil:
    section.add "FileSize", valid_595080
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595081 = header.getOrDefault("X-Amz-Signature")
  valid_595081 = validateParameter(valid_595081, JString, required = false,
                                 default = nil)
  if valid_595081 != nil:
    section.add "X-Amz-Signature", valid_595081
  var valid_595082 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595082 = validateParameter(valid_595082, JString, required = false,
                                 default = nil)
  if valid_595082 != nil:
    section.add "X-Amz-Content-Sha256", valid_595082
  var valid_595083 = header.getOrDefault("X-Amz-Date")
  valid_595083 = validateParameter(valid_595083, JString, required = false,
                                 default = nil)
  if valid_595083 != nil:
    section.add "X-Amz-Date", valid_595083
  var valid_595084 = header.getOrDefault("X-Amz-Credential")
  valid_595084 = validateParameter(valid_595084, JString, required = false,
                                 default = nil)
  if valid_595084 != nil:
    section.add "X-Amz-Credential", valid_595084
  var valid_595085 = header.getOrDefault("X-Amz-Security-Token")
  valid_595085 = validateParameter(valid_595085, JString, required = false,
                                 default = nil)
  if valid_595085 != nil:
    section.add "X-Amz-Security-Token", valid_595085
  var valid_595086 = header.getOrDefault("X-Amz-Algorithm")
  valid_595086 = validateParameter(valid_595086, JString, required = false,
                                 default = nil)
  if valid_595086 != nil:
    section.add "X-Amz-Algorithm", valid_595086
  var valid_595087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595087 = validateParameter(valid_595087, JString, required = false,
                                 default = nil)
  if valid_595087 != nil:
    section.add "X-Amz-SignedHeaders", valid_595087
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595088: Call_GetDescribeDBLogFiles_595069; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_595088.validator(path, query, header, formData, body)
  let scheme = call_595088.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595088.url(scheme.get, call_595088.host, call_595088.base,
                         call_595088.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595088, url, valid)

proc call*(call_595089: Call_GetDescribeDBLogFiles_595069;
          DBInstanceIdentifier: string; Marker: string = ""; FileLastWritten: int = 0;
          Action: string = "DescribeDBLogFiles"; FilenameContains: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          FileSize: int = 0): Recallable =
  ## getDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: string (required)
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  var query_595090 = newJObject()
  add(query_595090, "Marker", newJString(Marker))
  add(query_595090, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595090, "FileLastWritten", newJInt(FileLastWritten))
  add(query_595090, "Action", newJString(Action))
  add(query_595090, "FilenameContains", newJString(FilenameContains))
  add(query_595090, "Version", newJString(Version))
  if Filters != nil:
    query_595090.add "Filters", Filters
  add(query_595090, "MaxRecords", newJInt(MaxRecords))
  add(query_595090, "FileSize", newJInt(FileSize))
  result = call_595089.call(nil, query_595090, nil, nil, nil)

var getDescribeDBLogFiles* = Call_GetDescribeDBLogFiles_595069(
    name: "getDescribeDBLogFiles", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_GetDescribeDBLogFiles_595070, base: "/",
    url: url_GetDescribeDBLogFiles_595071, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_595133 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBParameterGroups_595135(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBParameterGroups_595134(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595136 = query.getOrDefault("Action")
  valid_595136 = validateParameter(valid_595136, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_595136 != nil:
    section.add "Action", valid_595136
  var valid_595137 = query.getOrDefault("Version")
  valid_595137 = validateParameter(valid_595137, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595137 != nil:
    section.add "Version", valid_595137
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595138 = header.getOrDefault("X-Amz-Signature")
  valid_595138 = validateParameter(valid_595138, JString, required = false,
                                 default = nil)
  if valid_595138 != nil:
    section.add "X-Amz-Signature", valid_595138
  var valid_595139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595139 = validateParameter(valid_595139, JString, required = false,
                                 default = nil)
  if valid_595139 != nil:
    section.add "X-Amz-Content-Sha256", valid_595139
  var valid_595140 = header.getOrDefault("X-Amz-Date")
  valid_595140 = validateParameter(valid_595140, JString, required = false,
                                 default = nil)
  if valid_595140 != nil:
    section.add "X-Amz-Date", valid_595140
  var valid_595141 = header.getOrDefault("X-Amz-Credential")
  valid_595141 = validateParameter(valid_595141, JString, required = false,
                                 default = nil)
  if valid_595141 != nil:
    section.add "X-Amz-Credential", valid_595141
  var valid_595142 = header.getOrDefault("X-Amz-Security-Token")
  valid_595142 = validateParameter(valid_595142, JString, required = false,
                                 default = nil)
  if valid_595142 != nil:
    section.add "X-Amz-Security-Token", valid_595142
  var valid_595143 = header.getOrDefault("X-Amz-Algorithm")
  valid_595143 = validateParameter(valid_595143, JString, required = false,
                                 default = nil)
  if valid_595143 != nil:
    section.add "X-Amz-Algorithm", valid_595143
  var valid_595144 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595144 = validateParameter(valid_595144, JString, required = false,
                                 default = nil)
  if valid_595144 != nil:
    section.add "X-Amz-SignedHeaders", valid_595144
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595145 = formData.getOrDefault("MaxRecords")
  valid_595145 = validateParameter(valid_595145, JInt, required = false, default = nil)
  if valid_595145 != nil:
    section.add "MaxRecords", valid_595145
  var valid_595146 = formData.getOrDefault("DBParameterGroupName")
  valid_595146 = validateParameter(valid_595146, JString, required = false,
                                 default = nil)
  if valid_595146 != nil:
    section.add "DBParameterGroupName", valid_595146
  var valid_595147 = formData.getOrDefault("Marker")
  valid_595147 = validateParameter(valid_595147, JString, required = false,
                                 default = nil)
  if valid_595147 != nil:
    section.add "Marker", valid_595147
  var valid_595148 = formData.getOrDefault("Filters")
  valid_595148 = validateParameter(valid_595148, JArray, required = false,
                                 default = nil)
  if valid_595148 != nil:
    section.add "Filters", valid_595148
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595149: Call_PostDescribeDBParameterGroups_595133; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_595149.validator(path, query, header, formData, body)
  let scheme = call_595149.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595149.url(scheme.get, call_595149.host, call_595149.base,
                         call_595149.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595149, url, valid)

proc call*(call_595150: Call_PostDescribeDBParameterGroups_595133;
          MaxRecords: int = 0; DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_595151 = newJObject()
  var formData_595152 = newJObject()
  add(formData_595152, "MaxRecords", newJInt(MaxRecords))
  add(formData_595152, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_595152, "Marker", newJString(Marker))
  add(query_595151, "Action", newJString(Action))
  if Filters != nil:
    formData_595152.add "Filters", Filters
  add(query_595151, "Version", newJString(Version))
  result = call_595150.call(nil, query_595151, nil, formData_595152, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_595133(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_595134, base: "/",
    url: url_PostDescribeDBParameterGroups_595135,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_595114 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBParameterGroups_595116(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBParameterGroups_595115(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595117 = query.getOrDefault("Marker")
  valid_595117 = validateParameter(valid_595117, JString, required = false,
                                 default = nil)
  if valid_595117 != nil:
    section.add "Marker", valid_595117
  var valid_595118 = query.getOrDefault("DBParameterGroupName")
  valid_595118 = validateParameter(valid_595118, JString, required = false,
                                 default = nil)
  if valid_595118 != nil:
    section.add "DBParameterGroupName", valid_595118
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595119 = query.getOrDefault("Action")
  valid_595119 = validateParameter(valid_595119, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_595119 != nil:
    section.add "Action", valid_595119
  var valid_595120 = query.getOrDefault("Version")
  valid_595120 = validateParameter(valid_595120, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595120 != nil:
    section.add "Version", valid_595120
  var valid_595121 = query.getOrDefault("Filters")
  valid_595121 = validateParameter(valid_595121, JArray, required = false,
                                 default = nil)
  if valid_595121 != nil:
    section.add "Filters", valid_595121
  var valid_595122 = query.getOrDefault("MaxRecords")
  valid_595122 = validateParameter(valid_595122, JInt, required = false, default = nil)
  if valid_595122 != nil:
    section.add "MaxRecords", valid_595122
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595123 = header.getOrDefault("X-Amz-Signature")
  valid_595123 = validateParameter(valid_595123, JString, required = false,
                                 default = nil)
  if valid_595123 != nil:
    section.add "X-Amz-Signature", valid_595123
  var valid_595124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595124 = validateParameter(valid_595124, JString, required = false,
                                 default = nil)
  if valid_595124 != nil:
    section.add "X-Amz-Content-Sha256", valid_595124
  var valid_595125 = header.getOrDefault("X-Amz-Date")
  valid_595125 = validateParameter(valid_595125, JString, required = false,
                                 default = nil)
  if valid_595125 != nil:
    section.add "X-Amz-Date", valid_595125
  var valid_595126 = header.getOrDefault("X-Amz-Credential")
  valid_595126 = validateParameter(valid_595126, JString, required = false,
                                 default = nil)
  if valid_595126 != nil:
    section.add "X-Amz-Credential", valid_595126
  var valid_595127 = header.getOrDefault("X-Amz-Security-Token")
  valid_595127 = validateParameter(valid_595127, JString, required = false,
                                 default = nil)
  if valid_595127 != nil:
    section.add "X-Amz-Security-Token", valid_595127
  var valid_595128 = header.getOrDefault("X-Amz-Algorithm")
  valid_595128 = validateParameter(valid_595128, JString, required = false,
                                 default = nil)
  if valid_595128 != nil:
    section.add "X-Amz-Algorithm", valid_595128
  var valid_595129 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595129 = validateParameter(valid_595129, JString, required = false,
                                 default = nil)
  if valid_595129 != nil:
    section.add "X-Amz-SignedHeaders", valid_595129
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595130: Call_GetDescribeDBParameterGroups_595114; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_595130.validator(path, query, header, formData, body)
  let scheme = call_595130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595130.url(scheme.get, call_595130.host, call_595130.base,
                         call_595130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595130, url, valid)

proc call*(call_595131: Call_GetDescribeDBParameterGroups_595114;
          Marker: string = ""; DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595132 = newJObject()
  add(query_595132, "Marker", newJString(Marker))
  add(query_595132, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_595132, "Action", newJString(Action))
  add(query_595132, "Version", newJString(Version))
  if Filters != nil:
    query_595132.add "Filters", Filters
  add(query_595132, "MaxRecords", newJInt(MaxRecords))
  result = call_595131.call(nil, query_595132, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_595114(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_595115, base: "/",
    url: url_GetDescribeDBParameterGroups_595116,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_595173 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBParameters_595175(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBParameters_595174(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595176 = query.getOrDefault("Action")
  valid_595176 = validateParameter(valid_595176, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_595176 != nil:
    section.add "Action", valid_595176
  var valid_595177 = query.getOrDefault("Version")
  valid_595177 = validateParameter(valid_595177, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595177 != nil:
    section.add "Version", valid_595177
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595178 = header.getOrDefault("X-Amz-Signature")
  valid_595178 = validateParameter(valid_595178, JString, required = false,
                                 default = nil)
  if valid_595178 != nil:
    section.add "X-Amz-Signature", valid_595178
  var valid_595179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595179 = validateParameter(valid_595179, JString, required = false,
                                 default = nil)
  if valid_595179 != nil:
    section.add "X-Amz-Content-Sha256", valid_595179
  var valid_595180 = header.getOrDefault("X-Amz-Date")
  valid_595180 = validateParameter(valid_595180, JString, required = false,
                                 default = nil)
  if valid_595180 != nil:
    section.add "X-Amz-Date", valid_595180
  var valid_595181 = header.getOrDefault("X-Amz-Credential")
  valid_595181 = validateParameter(valid_595181, JString, required = false,
                                 default = nil)
  if valid_595181 != nil:
    section.add "X-Amz-Credential", valid_595181
  var valid_595182 = header.getOrDefault("X-Amz-Security-Token")
  valid_595182 = validateParameter(valid_595182, JString, required = false,
                                 default = nil)
  if valid_595182 != nil:
    section.add "X-Amz-Security-Token", valid_595182
  var valid_595183 = header.getOrDefault("X-Amz-Algorithm")
  valid_595183 = validateParameter(valid_595183, JString, required = false,
                                 default = nil)
  if valid_595183 != nil:
    section.add "X-Amz-Algorithm", valid_595183
  var valid_595184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595184 = validateParameter(valid_595184, JString, required = false,
                                 default = nil)
  if valid_595184 != nil:
    section.add "X-Amz-SignedHeaders", valid_595184
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595185 = formData.getOrDefault("Source")
  valid_595185 = validateParameter(valid_595185, JString, required = false,
                                 default = nil)
  if valid_595185 != nil:
    section.add "Source", valid_595185
  var valid_595186 = formData.getOrDefault("MaxRecords")
  valid_595186 = validateParameter(valid_595186, JInt, required = false, default = nil)
  if valid_595186 != nil:
    section.add "MaxRecords", valid_595186
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_595187 = formData.getOrDefault("DBParameterGroupName")
  valid_595187 = validateParameter(valid_595187, JString, required = true,
                                 default = nil)
  if valid_595187 != nil:
    section.add "DBParameterGroupName", valid_595187
  var valid_595188 = formData.getOrDefault("Marker")
  valid_595188 = validateParameter(valid_595188, JString, required = false,
                                 default = nil)
  if valid_595188 != nil:
    section.add "Marker", valid_595188
  var valid_595189 = formData.getOrDefault("Filters")
  valid_595189 = validateParameter(valid_595189, JArray, required = false,
                                 default = nil)
  if valid_595189 != nil:
    section.add "Filters", valid_595189
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595190: Call_PostDescribeDBParameters_595173; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_595190.validator(path, query, header, formData, body)
  let scheme = call_595190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595190.url(scheme.get, call_595190.host, call_595190.base,
                         call_595190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595190, url, valid)

proc call*(call_595191: Call_PostDescribeDBParameters_595173;
          DBParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_595192 = newJObject()
  var formData_595193 = newJObject()
  add(formData_595193, "Source", newJString(Source))
  add(formData_595193, "MaxRecords", newJInt(MaxRecords))
  add(formData_595193, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_595193, "Marker", newJString(Marker))
  add(query_595192, "Action", newJString(Action))
  if Filters != nil:
    formData_595193.add "Filters", Filters
  add(query_595192, "Version", newJString(Version))
  result = call_595191.call(nil, query_595192, nil, formData_595193, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_595173(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_595174, base: "/",
    url: url_PostDescribeDBParameters_595175, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_595153 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBParameters_595155(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBParameters_595154(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595156 = query.getOrDefault("Marker")
  valid_595156 = validateParameter(valid_595156, JString, required = false,
                                 default = nil)
  if valid_595156 != nil:
    section.add "Marker", valid_595156
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_595157 = query.getOrDefault("DBParameterGroupName")
  valid_595157 = validateParameter(valid_595157, JString, required = true,
                                 default = nil)
  if valid_595157 != nil:
    section.add "DBParameterGroupName", valid_595157
  var valid_595158 = query.getOrDefault("Source")
  valid_595158 = validateParameter(valid_595158, JString, required = false,
                                 default = nil)
  if valid_595158 != nil:
    section.add "Source", valid_595158
  var valid_595159 = query.getOrDefault("Action")
  valid_595159 = validateParameter(valid_595159, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_595159 != nil:
    section.add "Action", valid_595159
  var valid_595160 = query.getOrDefault("Version")
  valid_595160 = validateParameter(valid_595160, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595160 != nil:
    section.add "Version", valid_595160
  var valid_595161 = query.getOrDefault("Filters")
  valid_595161 = validateParameter(valid_595161, JArray, required = false,
                                 default = nil)
  if valid_595161 != nil:
    section.add "Filters", valid_595161
  var valid_595162 = query.getOrDefault("MaxRecords")
  valid_595162 = validateParameter(valid_595162, JInt, required = false, default = nil)
  if valid_595162 != nil:
    section.add "MaxRecords", valid_595162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595163 = header.getOrDefault("X-Amz-Signature")
  valid_595163 = validateParameter(valid_595163, JString, required = false,
                                 default = nil)
  if valid_595163 != nil:
    section.add "X-Amz-Signature", valid_595163
  var valid_595164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595164 = validateParameter(valid_595164, JString, required = false,
                                 default = nil)
  if valid_595164 != nil:
    section.add "X-Amz-Content-Sha256", valid_595164
  var valid_595165 = header.getOrDefault("X-Amz-Date")
  valid_595165 = validateParameter(valid_595165, JString, required = false,
                                 default = nil)
  if valid_595165 != nil:
    section.add "X-Amz-Date", valid_595165
  var valid_595166 = header.getOrDefault("X-Amz-Credential")
  valid_595166 = validateParameter(valid_595166, JString, required = false,
                                 default = nil)
  if valid_595166 != nil:
    section.add "X-Amz-Credential", valid_595166
  var valid_595167 = header.getOrDefault("X-Amz-Security-Token")
  valid_595167 = validateParameter(valid_595167, JString, required = false,
                                 default = nil)
  if valid_595167 != nil:
    section.add "X-Amz-Security-Token", valid_595167
  var valid_595168 = header.getOrDefault("X-Amz-Algorithm")
  valid_595168 = validateParameter(valid_595168, JString, required = false,
                                 default = nil)
  if valid_595168 != nil:
    section.add "X-Amz-Algorithm", valid_595168
  var valid_595169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595169 = validateParameter(valid_595169, JString, required = false,
                                 default = nil)
  if valid_595169 != nil:
    section.add "X-Amz-SignedHeaders", valid_595169
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595170: Call_GetDescribeDBParameters_595153; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_595170.validator(path, query, header, formData, body)
  let scheme = call_595170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595170.url(scheme.get, call_595170.host, call_595170.base,
                         call_595170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595170, url, valid)

proc call*(call_595171: Call_GetDescribeDBParameters_595153;
          DBParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeDBParameters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595172 = newJObject()
  add(query_595172, "Marker", newJString(Marker))
  add(query_595172, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_595172, "Source", newJString(Source))
  add(query_595172, "Action", newJString(Action))
  add(query_595172, "Version", newJString(Version))
  if Filters != nil:
    query_595172.add "Filters", Filters
  add(query_595172, "MaxRecords", newJInt(MaxRecords))
  result = call_595171.call(nil, query_595172, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_595153(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_595154, base: "/",
    url: url_GetDescribeDBParameters_595155, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSecurityGroups_595213 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBSecurityGroups_595215(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSecurityGroups_595214(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595216 = query.getOrDefault("Action")
  valid_595216 = validateParameter(valid_595216, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_595216 != nil:
    section.add "Action", valid_595216
  var valid_595217 = query.getOrDefault("Version")
  valid_595217 = validateParameter(valid_595217, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595217 != nil:
    section.add "Version", valid_595217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595218 = header.getOrDefault("X-Amz-Signature")
  valid_595218 = validateParameter(valid_595218, JString, required = false,
                                 default = nil)
  if valid_595218 != nil:
    section.add "X-Amz-Signature", valid_595218
  var valid_595219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595219 = validateParameter(valid_595219, JString, required = false,
                                 default = nil)
  if valid_595219 != nil:
    section.add "X-Amz-Content-Sha256", valid_595219
  var valid_595220 = header.getOrDefault("X-Amz-Date")
  valid_595220 = validateParameter(valid_595220, JString, required = false,
                                 default = nil)
  if valid_595220 != nil:
    section.add "X-Amz-Date", valid_595220
  var valid_595221 = header.getOrDefault("X-Amz-Credential")
  valid_595221 = validateParameter(valid_595221, JString, required = false,
                                 default = nil)
  if valid_595221 != nil:
    section.add "X-Amz-Credential", valid_595221
  var valid_595222 = header.getOrDefault("X-Amz-Security-Token")
  valid_595222 = validateParameter(valid_595222, JString, required = false,
                                 default = nil)
  if valid_595222 != nil:
    section.add "X-Amz-Security-Token", valid_595222
  var valid_595223 = header.getOrDefault("X-Amz-Algorithm")
  valid_595223 = validateParameter(valid_595223, JString, required = false,
                                 default = nil)
  if valid_595223 != nil:
    section.add "X-Amz-Algorithm", valid_595223
  var valid_595224 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595224 = validateParameter(valid_595224, JString, required = false,
                                 default = nil)
  if valid_595224 != nil:
    section.add "X-Amz-SignedHeaders", valid_595224
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595225 = formData.getOrDefault("DBSecurityGroupName")
  valid_595225 = validateParameter(valid_595225, JString, required = false,
                                 default = nil)
  if valid_595225 != nil:
    section.add "DBSecurityGroupName", valid_595225
  var valid_595226 = formData.getOrDefault("MaxRecords")
  valid_595226 = validateParameter(valid_595226, JInt, required = false, default = nil)
  if valid_595226 != nil:
    section.add "MaxRecords", valid_595226
  var valid_595227 = formData.getOrDefault("Marker")
  valid_595227 = validateParameter(valid_595227, JString, required = false,
                                 default = nil)
  if valid_595227 != nil:
    section.add "Marker", valid_595227
  var valid_595228 = formData.getOrDefault("Filters")
  valid_595228 = validateParameter(valid_595228, JArray, required = false,
                                 default = nil)
  if valid_595228 != nil:
    section.add "Filters", valid_595228
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595229: Call_PostDescribeDBSecurityGroups_595213; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_595229.validator(path, query, header, formData, body)
  let scheme = call_595229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595229.url(scheme.get, call_595229.host, call_595229.base,
                         call_595229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595229, url, valid)

proc call*(call_595230: Call_PostDescribeDBSecurityGroups_595213;
          DBSecurityGroupName: string = ""; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSecurityGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_595231 = newJObject()
  var formData_595232 = newJObject()
  add(formData_595232, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_595232, "MaxRecords", newJInt(MaxRecords))
  add(formData_595232, "Marker", newJString(Marker))
  add(query_595231, "Action", newJString(Action))
  if Filters != nil:
    formData_595232.add "Filters", Filters
  add(query_595231, "Version", newJString(Version))
  result = call_595230.call(nil, query_595231, nil, formData_595232, nil)

var postDescribeDBSecurityGroups* = Call_PostDescribeDBSecurityGroups_595213(
    name: "postDescribeDBSecurityGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_PostDescribeDBSecurityGroups_595214, base: "/",
    url: url_PostDescribeDBSecurityGroups_595215,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSecurityGroups_595194 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBSecurityGroups_595196(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSecurityGroups_595195(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595197 = query.getOrDefault("Marker")
  valid_595197 = validateParameter(valid_595197, JString, required = false,
                                 default = nil)
  if valid_595197 != nil:
    section.add "Marker", valid_595197
  var valid_595198 = query.getOrDefault("DBSecurityGroupName")
  valid_595198 = validateParameter(valid_595198, JString, required = false,
                                 default = nil)
  if valid_595198 != nil:
    section.add "DBSecurityGroupName", valid_595198
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595199 = query.getOrDefault("Action")
  valid_595199 = validateParameter(valid_595199, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_595199 != nil:
    section.add "Action", valid_595199
  var valid_595200 = query.getOrDefault("Version")
  valid_595200 = validateParameter(valid_595200, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595200 != nil:
    section.add "Version", valid_595200
  var valid_595201 = query.getOrDefault("Filters")
  valid_595201 = validateParameter(valid_595201, JArray, required = false,
                                 default = nil)
  if valid_595201 != nil:
    section.add "Filters", valid_595201
  var valid_595202 = query.getOrDefault("MaxRecords")
  valid_595202 = validateParameter(valid_595202, JInt, required = false, default = nil)
  if valid_595202 != nil:
    section.add "MaxRecords", valid_595202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595203 = header.getOrDefault("X-Amz-Signature")
  valid_595203 = validateParameter(valid_595203, JString, required = false,
                                 default = nil)
  if valid_595203 != nil:
    section.add "X-Amz-Signature", valid_595203
  var valid_595204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595204 = validateParameter(valid_595204, JString, required = false,
                                 default = nil)
  if valid_595204 != nil:
    section.add "X-Amz-Content-Sha256", valid_595204
  var valid_595205 = header.getOrDefault("X-Amz-Date")
  valid_595205 = validateParameter(valid_595205, JString, required = false,
                                 default = nil)
  if valid_595205 != nil:
    section.add "X-Amz-Date", valid_595205
  var valid_595206 = header.getOrDefault("X-Amz-Credential")
  valid_595206 = validateParameter(valid_595206, JString, required = false,
                                 default = nil)
  if valid_595206 != nil:
    section.add "X-Amz-Credential", valid_595206
  var valid_595207 = header.getOrDefault("X-Amz-Security-Token")
  valid_595207 = validateParameter(valid_595207, JString, required = false,
                                 default = nil)
  if valid_595207 != nil:
    section.add "X-Amz-Security-Token", valid_595207
  var valid_595208 = header.getOrDefault("X-Amz-Algorithm")
  valid_595208 = validateParameter(valid_595208, JString, required = false,
                                 default = nil)
  if valid_595208 != nil:
    section.add "X-Amz-Algorithm", valid_595208
  var valid_595209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595209 = validateParameter(valid_595209, JString, required = false,
                                 default = nil)
  if valid_595209 != nil:
    section.add "X-Amz-SignedHeaders", valid_595209
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595210: Call_GetDescribeDBSecurityGroups_595194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_595210.validator(path, query, header, formData, body)
  let scheme = call_595210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595210.url(scheme.get, call_595210.host, call_595210.base,
                         call_595210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595210, url, valid)

proc call*(call_595211: Call_GetDescribeDBSecurityGroups_595194;
          Marker: string = ""; DBSecurityGroupName: string = "";
          Action: string = "DescribeDBSecurityGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595212 = newJObject()
  add(query_595212, "Marker", newJString(Marker))
  add(query_595212, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_595212, "Action", newJString(Action))
  add(query_595212, "Version", newJString(Version))
  if Filters != nil:
    query_595212.add "Filters", Filters
  add(query_595212, "MaxRecords", newJInt(MaxRecords))
  result = call_595211.call(nil, query_595212, nil, nil, nil)

var getDescribeDBSecurityGroups* = Call_GetDescribeDBSecurityGroups_595194(
    name: "getDescribeDBSecurityGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_GetDescribeDBSecurityGroups_595195, base: "/",
    url: url_GetDescribeDBSecurityGroups_595196,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshotAttributes_595249 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBSnapshotAttributes_595251(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSnapshotAttributes_595250(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595252 = query.getOrDefault("Action")
  valid_595252 = validateParameter(valid_595252, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_595252 != nil:
    section.add "Action", valid_595252
  var valid_595253 = query.getOrDefault("Version")
  valid_595253 = validateParameter(valid_595253, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595253 != nil:
    section.add "Version", valid_595253
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595254 = header.getOrDefault("X-Amz-Signature")
  valid_595254 = validateParameter(valid_595254, JString, required = false,
                                 default = nil)
  if valid_595254 != nil:
    section.add "X-Amz-Signature", valid_595254
  var valid_595255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595255 = validateParameter(valid_595255, JString, required = false,
                                 default = nil)
  if valid_595255 != nil:
    section.add "X-Amz-Content-Sha256", valid_595255
  var valid_595256 = header.getOrDefault("X-Amz-Date")
  valid_595256 = validateParameter(valid_595256, JString, required = false,
                                 default = nil)
  if valid_595256 != nil:
    section.add "X-Amz-Date", valid_595256
  var valid_595257 = header.getOrDefault("X-Amz-Credential")
  valid_595257 = validateParameter(valid_595257, JString, required = false,
                                 default = nil)
  if valid_595257 != nil:
    section.add "X-Amz-Credential", valid_595257
  var valid_595258 = header.getOrDefault("X-Amz-Security-Token")
  valid_595258 = validateParameter(valid_595258, JString, required = false,
                                 default = nil)
  if valid_595258 != nil:
    section.add "X-Amz-Security-Token", valid_595258
  var valid_595259 = header.getOrDefault("X-Amz-Algorithm")
  valid_595259 = validateParameter(valid_595259, JString, required = false,
                                 default = nil)
  if valid_595259 != nil:
    section.add "X-Amz-Algorithm", valid_595259
  var valid_595260 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595260 = validateParameter(valid_595260, JString, required = false,
                                 default = nil)
  if valid_595260 != nil:
    section.add "X-Amz-SignedHeaders", valid_595260
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_595261 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_595261 = validateParameter(valid_595261, JString, required = true,
                                 default = nil)
  if valid_595261 != nil:
    section.add "DBSnapshotIdentifier", valid_595261
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595262: Call_PostDescribeDBSnapshotAttributes_595249;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_595262.validator(path, query, header, formData, body)
  let scheme = call_595262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595262.url(scheme.get, call_595262.host, call_595262.base,
                         call_595262.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595262, url, valid)

proc call*(call_595263: Call_PostDescribeDBSnapshotAttributes_595249;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595264 = newJObject()
  var formData_595265 = newJObject()
  add(formData_595265, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_595264, "Action", newJString(Action))
  add(query_595264, "Version", newJString(Version))
  result = call_595263.call(nil, query_595264, nil, formData_595265, nil)

var postDescribeDBSnapshotAttributes* = Call_PostDescribeDBSnapshotAttributes_595249(
    name: "postDescribeDBSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_PostDescribeDBSnapshotAttributes_595250, base: "/",
    url: url_PostDescribeDBSnapshotAttributes_595251,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshotAttributes_595233 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBSnapshotAttributes_595235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSnapshotAttributes_595234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_595236 = query.getOrDefault("DBSnapshotIdentifier")
  valid_595236 = validateParameter(valid_595236, JString, required = true,
                                 default = nil)
  if valid_595236 != nil:
    section.add "DBSnapshotIdentifier", valid_595236
  var valid_595237 = query.getOrDefault("Action")
  valid_595237 = validateParameter(valid_595237, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_595237 != nil:
    section.add "Action", valid_595237
  var valid_595238 = query.getOrDefault("Version")
  valid_595238 = validateParameter(valid_595238, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595238 != nil:
    section.add "Version", valid_595238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595239 = header.getOrDefault("X-Amz-Signature")
  valid_595239 = validateParameter(valid_595239, JString, required = false,
                                 default = nil)
  if valid_595239 != nil:
    section.add "X-Amz-Signature", valid_595239
  var valid_595240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595240 = validateParameter(valid_595240, JString, required = false,
                                 default = nil)
  if valid_595240 != nil:
    section.add "X-Amz-Content-Sha256", valid_595240
  var valid_595241 = header.getOrDefault("X-Amz-Date")
  valid_595241 = validateParameter(valid_595241, JString, required = false,
                                 default = nil)
  if valid_595241 != nil:
    section.add "X-Amz-Date", valid_595241
  var valid_595242 = header.getOrDefault("X-Amz-Credential")
  valid_595242 = validateParameter(valid_595242, JString, required = false,
                                 default = nil)
  if valid_595242 != nil:
    section.add "X-Amz-Credential", valid_595242
  var valid_595243 = header.getOrDefault("X-Amz-Security-Token")
  valid_595243 = validateParameter(valid_595243, JString, required = false,
                                 default = nil)
  if valid_595243 != nil:
    section.add "X-Amz-Security-Token", valid_595243
  var valid_595244 = header.getOrDefault("X-Amz-Algorithm")
  valid_595244 = validateParameter(valid_595244, JString, required = false,
                                 default = nil)
  if valid_595244 != nil:
    section.add "X-Amz-Algorithm", valid_595244
  var valid_595245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595245 = validateParameter(valid_595245, JString, required = false,
                                 default = nil)
  if valid_595245 != nil:
    section.add "X-Amz-SignedHeaders", valid_595245
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595246: Call_GetDescribeDBSnapshotAttributes_595233;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_595246.validator(path, query, header, formData, body)
  let scheme = call_595246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595246.url(scheme.get, call_595246.host, call_595246.base,
                         call_595246.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595246, url, valid)

proc call*(call_595247: Call_GetDescribeDBSnapshotAttributes_595233;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595248 = newJObject()
  add(query_595248, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_595248, "Action", newJString(Action))
  add(query_595248, "Version", newJString(Version))
  result = call_595247.call(nil, query_595248, nil, nil, nil)

var getDescribeDBSnapshotAttributes* = Call_GetDescribeDBSnapshotAttributes_595233(
    name: "getDescribeDBSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_GetDescribeDBSnapshotAttributes_595234, base: "/",
    url: url_GetDescribeDBSnapshotAttributes_595235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshots_595290 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBSnapshots_595292(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSnapshots_595291(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595293 = query.getOrDefault("Action")
  valid_595293 = validateParameter(valid_595293, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_595293 != nil:
    section.add "Action", valid_595293
  var valid_595294 = query.getOrDefault("Version")
  valid_595294 = validateParameter(valid_595294, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595294 != nil:
    section.add "Version", valid_595294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595295 = header.getOrDefault("X-Amz-Signature")
  valid_595295 = validateParameter(valid_595295, JString, required = false,
                                 default = nil)
  if valid_595295 != nil:
    section.add "X-Amz-Signature", valid_595295
  var valid_595296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595296 = validateParameter(valid_595296, JString, required = false,
                                 default = nil)
  if valid_595296 != nil:
    section.add "X-Amz-Content-Sha256", valid_595296
  var valid_595297 = header.getOrDefault("X-Amz-Date")
  valid_595297 = validateParameter(valid_595297, JString, required = false,
                                 default = nil)
  if valid_595297 != nil:
    section.add "X-Amz-Date", valid_595297
  var valid_595298 = header.getOrDefault("X-Amz-Credential")
  valid_595298 = validateParameter(valid_595298, JString, required = false,
                                 default = nil)
  if valid_595298 != nil:
    section.add "X-Amz-Credential", valid_595298
  var valid_595299 = header.getOrDefault("X-Amz-Security-Token")
  valid_595299 = validateParameter(valid_595299, JString, required = false,
                                 default = nil)
  if valid_595299 != nil:
    section.add "X-Amz-Security-Token", valid_595299
  var valid_595300 = header.getOrDefault("X-Amz-Algorithm")
  valid_595300 = validateParameter(valid_595300, JString, required = false,
                                 default = nil)
  if valid_595300 != nil:
    section.add "X-Amz-Algorithm", valid_595300
  var valid_595301 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595301 = validateParameter(valid_595301, JString, required = false,
                                 default = nil)
  if valid_595301 != nil:
    section.add "X-Amz-SignedHeaders", valid_595301
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  section = newJObject()
  var valid_595302 = formData.getOrDefault("SnapshotType")
  valid_595302 = validateParameter(valid_595302, JString, required = false,
                                 default = nil)
  if valid_595302 != nil:
    section.add "SnapshotType", valid_595302
  var valid_595303 = formData.getOrDefault("MaxRecords")
  valid_595303 = validateParameter(valid_595303, JInt, required = false, default = nil)
  if valid_595303 != nil:
    section.add "MaxRecords", valid_595303
  var valid_595304 = formData.getOrDefault("IncludePublic")
  valid_595304 = validateParameter(valid_595304, JBool, required = false, default = nil)
  if valid_595304 != nil:
    section.add "IncludePublic", valid_595304
  var valid_595305 = formData.getOrDefault("Marker")
  valid_595305 = validateParameter(valid_595305, JString, required = false,
                                 default = nil)
  if valid_595305 != nil:
    section.add "Marker", valid_595305
  var valid_595306 = formData.getOrDefault("DbiResourceId")
  valid_595306 = validateParameter(valid_595306, JString, required = false,
                                 default = nil)
  if valid_595306 != nil:
    section.add "DbiResourceId", valid_595306
  var valid_595307 = formData.getOrDefault("IncludeShared")
  valid_595307 = validateParameter(valid_595307, JBool, required = false, default = nil)
  if valid_595307 != nil:
    section.add "IncludeShared", valid_595307
  var valid_595308 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595308 = validateParameter(valid_595308, JString, required = false,
                                 default = nil)
  if valid_595308 != nil:
    section.add "DBInstanceIdentifier", valid_595308
  var valid_595309 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_595309 = validateParameter(valid_595309, JString, required = false,
                                 default = nil)
  if valid_595309 != nil:
    section.add "DBSnapshotIdentifier", valid_595309
  var valid_595310 = formData.getOrDefault("Filters")
  valid_595310 = validateParameter(valid_595310, JArray, required = false,
                                 default = nil)
  if valid_595310 != nil:
    section.add "Filters", valid_595310
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595311: Call_PostDescribeDBSnapshots_595290; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_595311.validator(path, query, header, formData, body)
  let scheme = call_595311.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595311.url(scheme.get, call_595311.host, call_595311.base,
                         call_595311.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595311, url, valid)

proc call*(call_595312: Call_PostDescribeDBSnapshots_595290;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DbiResourceId: string = ""; IncludeShared: bool = false;
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          Action: string = "DescribeDBSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_595313 = newJObject()
  var formData_595314 = newJObject()
  add(formData_595314, "SnapshotType", newJString(SnapshotType))
  add(formData_595314, "MaxRecords", newJInt(MaxRecords))
  add(formData_595314, "IncludePublic", newJBool(IncludePublic))
  add(formData_595314, "Marker", newJString(Marker))
  add(formData_595314, "DbiResourceId", newJString(DbiResourceId))
  add(formData_595314, "IncludeShared", newJBool(IncludeShared))
  add(formData_595314, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_595314, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_595313, "Action", newJString(Action))
  if Filters != nil:
    formData_595314.add "Filters", Filters
  add(query_595313, "Version", newJString(Version))
  result = call_595312.call(nil, query_595313, nil, formData_595314, nil)

var postDescribeDBSnapshots* = Call_PostDescribeDBSnapshots_595290(
    name: "postDescribeDBSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_PostDescribeDBSnapshots_595291, base: "/",
    url: url_PostDescribeDBSnapshots_595292, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshots_595266 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBSnapshots_595268(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSnapshots_595267(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595269 = query.getOrDefault("DbiResourceId")
  valid_595269 = validateParameter(valid_595269, JString, required = false,
                                 default = nil)
  if valid_595269 != nil:
    section.add "DbiResourceId", valid_595269
  var valid_595270 = query.getOrDefault("Marker")
  valid_595270 = validateParameter(valid_595270, JString, required = false,
                                 default = nil)
  if valid_595270 != nil:
    section.add "Marker", valid_595270
  var valid_595271 = query.getOrDefault("DBInstanceIdentifier")
  valid_595271 = validateParameter(valid_595271, JString, required = false,
                                 default = nil)
  if valid_595271 != nil:
    section.add "DBInstanceIdentifier", valid_595271
  var valid_595272 = query.getOrDefault("DBSnapshotIdentifier")
  valid_595272 = validateParameter(valid_595272, JString, required = false,
                                 default = nil)
  if valid_595272 != nil:
    section.add "DBSnapshotIdentifier", valid_595272
  var valid_595273 = query.getOrDefault("SnapshotType")
  valid_595273 = validateParameter(valid_595273, JString, required = false,
                                 default = nil)
  if valid_595273 != nil:
    section.add "SnapshotType", valid_595273
  var valid_595274 = query.getOrDefault("IncludePublic")
  valid_595274 = validateParameter(valid_595274, JBool, required = false, default = nil)
  if valid_595274 != nil:
    section.add "IncludePublic", valid_595274
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595275 = query.getOrDefault("Action")
  valid_595275 = validateParameter(valid_595275, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_595275 != nil:
    section.add "Action", valid_595275
  var valid_595276 = query.getOrDefault("IncludeShared")
  valid_595276 = validateParameter(valid_595276, JBool, required = false, default = nil)
  if valid_595276 != nil:
    section.add "IncludeShared", valid_595276
  var valid_595277 = query.getOrDefault("Version")
  valid_595277 = validateParameter(valid_595277, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595277 != nil:
    section.add "Version", valid_595277
  var valid_595278 = query.getOrDefault("Filters")
  valid_595278 = validateParameter(valid_595278, JArray, required = false,
                                 default = nil)
  if valid_595278 != nil:
    section.add "Filters", valid_595278
  var valid_595279 = query.getOrDefault("MaxRecords")
  valid_595279 = validateParameter(valid_595279, JInt, required = false, default = nil)
  if valid_595279 != nil:
    section.add "MaxRecords", valid_595279
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595280 = header.getOrDefault("X-Amz-Signature")
  valid_595280 = validateParameter(valid_595280, JString, required = false,
                                 default = nil)
  if valid_595280 != nil:
    section.add "X-Amz-Signature", valid_595280
  var valid_595281 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595281 = validateParameter(valid_595281, JString, required = false,
                                 default = nil)
  if valid_595281 != nil:
    section.add "X-Amz-Content-Sha256", valid_595281
  var valid_595282 = header.getOrDefault("X-Amz-Date")
  valid_595282 = validateParameter(valid_595282, JString, required = false,
                                 default = nil)
  if valid_595282 != nil:
    section.add "X-Amz-Date", valid_595282
  var valid_595283 = header.getOrDefault("X-Amz-Credential")
  valid_595283 = validateParameter(valid_595283, JString, required = false,
                                 default = nil)
  if valid_595283 != nil:
    section.add "X-Amz-Credential", valid_595283
  var valid_595284 = header.getOrDefault("X-Amz-Security-Token")
  valid_595284 = validateParameter(valid_595284, JString, required = false,
                                 default = nil)
  if valid_595284 != nil:
    section.add "X-Amz-Security-Token", valid_595284
  var valid_595285 = header.getOrDefault("X-Amz-Algorithm")
  valid_595285 = validateParameter(valid_595285, JString, required = false,
                                 default = nil)
  if valid_595285 != nil:
    section.add "X-Amz-Algorithm", valid_595285
  var valid_595286 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595286 = validateParameter(valid_595286, JString, required = false,
                                 default = nil)
  if valid_595286 != nil:
    section.add "X-Amz-SignedHeaders", valid_595286
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595287: Call_GetDescribeDBSnapshots_595266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_595287.validator(path, query, header, formData, body)
  let scheme = call_595287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595287.url(scheme.get, call_595287.host, call_595287.base,
                         call_595287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595287, url, valid)

proc call*(call_595288: Call_GetDescribeDBSnapshots_595266;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          SnapshotType: string = ""; IncludePublic: bool = false;
          Action: string = "DescribeDBSnapshots"; IncludeShared: bool = false;
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595289 = newJObject()
  add(query_595289, "DbiResourceId", newJString(DbiResourceId))
  add(query_595289, "Marker", newJString(Marker))
  add(query_595289, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595289, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_595289, "SnapshotType", newJString(SnapshotType))
  add(query_595289, "IncludePublic", newJBool(IncludePublic))
  add(query_595289, "Action", newJString(Action))
  add(query_595289, "IncludeShared", newJBool(IncludeShared))
  add(query_595289, "Version", newJString(Version))
  if Filters != nil:
    query_595289.add "Filters", Filters
  add(query_595289, "MaxRecords", newJInt(MaxRecords))
  result = call_595288.call(nil, query_595289, nil, nil, nil)

var getDescribeDBSnapshots* = Call_GetDescribeDBSnapshots_595266(
    name: "getDescribeDBSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_GetDescribeDBSnapshots_595267, base: "/",
    url: url_GetDescribeDBSnapshots_595268, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_595334 = ref object of OpenApiRestCall_592348
proc url_PostDescribeDBSubnetGroups_595336(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSubnetGroups_595335(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595337 = query.getOrDefault("Action")
  valid_595337 = validateParameter(valid_595337, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_595337 != nil:
    section.add "Action", valid_595337
  var valid_595338 = query.getOrDefault("Version")
  valid_595338 = validateParameter(valid_595338, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595338 != nil:
    section.add "Version", valid_595338
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595339 = header.getOrDefault("X-Amz-Signature")
  valid_595339 = validateParameter(valid_595339, JString, required = false,
                                 default = nil)
  if valid_595339 != nil:
    section.add "X-Amz-Signature", valid_595339
  var valid_595340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595340 = validateParameter(valid_595340, JString, required = false,
                                 default = nil)
  if valid_595340 != nil:
    section.add "X-Amz-Content-Sha256", valid_595340
  var valid_595341 = header.getOrDefault("X-Amz-Date")
  valid_595341 = validateParameter(valid_595341, JString, required = false,
                                 default = nil)
  if valid_595341 != nil:
    section.add "X-Amz-Date", valid_595341
  var valid_595342 = header.getOrDefault("X-Amz-Credential")
  valid_595342 = validateParameter(valid_595342, JString, required = false,
                                 default = nil)
  if valid_595342 != nil:
    section.add "X-Amz-Credential", valid_595342
  var valid_595343 = header.getOrDefault("X-Amz-Security-Token")
  valid_595343 = validateParameter(valid_595343, JString, required = false,
                                 default = nil)
  if valid_595343 != nil:
    section.add "X-Amz-Security-Token", valid_595343
  var valid_595344 = header.getOrDefault("X-Amz-Algorithm")
  valid_595344 = validateParameter(valid_595344, JString, required = false,
                                 default = nil)
  if valid_595344 != nil:
    section.add "X-Amz-Algorithm", valid_595344
  var valid_595345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595345 = validateParameter(valid_595345, JString, required = false,
                                 default = nil)
  if valid_595345 != nil:
    section.add "X-Amz-SignedHeaders", valid_595345
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595346 = formData.getOrDefault("MaxRecords")
  valid_595346 = validateParameter(valid_595346, JInt, required = false, default = nil)
  if valid_595346 != nil:
    section.add "MaxRecords", valid_595346
  var valid_595347 = formData.getOrDefault("Marker")
  valid_595347 = validateParameter(valid_595347, JString, required = false,
                                 default = nil)
  if valid_595347 != nil:
    section.add "Marker", valid_595347
  var valid_595348 = formData.getOrDefault("DBSubnetGroupName")
  valid_595348 = validateParameter(valid_595348, JString, required = false,
                                 default = nil)
  if valid_595348 != nil:
    section.add "DBSubnetGroupName", valid_595348
  var valid_595349 = formData.getOrDefault("Filters")
  valid_595349 = validateParameter(valid_595349, JArray, required = false,
                                 default = nil)
  if valid_595349 != nil:
    section.add "Filters", valid_595349
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595350: Call_PostDescribeDBSubnetGroups_595334; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_595350.validator(path, query, header, formData, body)
  let scheme = call_595350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595350.url(scheme.get, call_595350.host, call_595350.base,
                         call_595350.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595350, url, valid)

proc call*(call_595351: Call_PostDescribeDBSubnetGroups_595334;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_595352 = newJObject()
  var formData_595353 = newJObject()
  add(formData_595353, "MaxRecords", newJInt(MaxRecords))
  add(formData_595353, "Marker", newJString(Marker))
  add(query_595352, "Action", newJString(Action))
  add(formData_595353, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if Filters != nil:
    formData_595353.add "Filters", Filters
  add(query_595352, "Version", newJString(Version))
  result = call_595351.call(nil, query_595352, nil, formData_595353, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_595334(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_595335, base: "/",
    url: url_PostDescribeDBSubnetGroups_595336,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_595315 = ref object of OpenApiRestCall_592348
proc url_GetDescribeDBSubnetGroups_595317(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSubnetGroups_595316(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595318 = query.getOrDefault("Marker")
  valid_595318 = validateParameter(valid_595318, JString, required = false,
                                 default = nil)
  if valid_595318 != nil:
    section.add "Marker", valid_595318
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595319 = query.getOrDefault("Action")
  valid_595319 = validateParameter(valid_595319, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_595319 != nil:
    section.add "Action", valid_595319
  var valid_595320 = query.getOrDefault("DBSubnetGroupName")
  valid_595320 = validateParameter(valid_595320, JString, required = false,
                                 default = nil)
  if valid_595320 != nil:
    section.add "DBSubnetGroupName", valid_595320
  var valid_595321 = query.getOrDefault("Version")
  valid_595321 = validateParameter(valid_595321, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595321 != nil:
    section.add "Version", valid_595321
  var valid_595322 = query.getOrDefault("Filters")
  valid_595322 = validateParameter(valid_595322, JArray, required = false,
                                 default = nil)
  if valid_595322 != nil:
    section.add "Filters", valid_595322
  var valid_595323 = query.getOrDefault("MaxRecords")
  valid_595323 = validateParameter(valid_595323, JInt, required = false, default = nil)
  if valid_595323 != nil:
    section.add "MaxRecords", valid_595323
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595324 = header.getOrDefault("X-Amz-Signature")
  valid_595324 = validateParameter(valid_595324, JString, required = false,
                                 default = nil)
  if valid_595324 != nil:
    section.add "X-Amz-Signature", valid_595324
  var valid_595325 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595325 = validateParameter(valid_595325, JString, required = false,
                                 default = nil)
  if valid_595325 != nil:
    section.add "X-Amz-Content-Sha256", valid_595325
  var valid_595326 = header.getOrDefault("X-Amz-Date")
  valid_595326 = validateParameter(valid_595326, JString, required = false,
                                 default = nil)
  if valid_595326 != nil:
    section.add "X-Amz-Date", valid_595326
  var valid_595327 = header.getOrDefault("X-Amz-Credential")
  valid_595327 = validateParameter(valid_595327, JString, required = false,
                                 default = nil)
  if valid_595327 != nil:
    section.add "X-Amz-Credential", valid_595327
  var valid_595328 = header.getOrDefault("X-Amz-Security-Token")
  valid_595328 = validateParameter(valid_595328, JString, required = false,
                                 default = nil)
  if valid_595328 != nil:
    section.add "X-Amz-Security-Token", valid_595328
  var valid_595329 = header.getOrDefault("X-Amz-Algorithm")
  valid_595329 = validateParameter(valid_595329, JString, required = false,
                                 default = nil)
  if valid_595329 != nil:
    section.add "X-Amz-Algorithm", valid_595329
  var valid_595330 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595330 = validateParameter(valid_595330, JString, required = false,
                                 default = nil)
  if valid_595330 != nil:
    section.add "X-Amz-SignedHeaders", valid_595330
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595331: Call_GetDescribeDBSubnetGroups_595315; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_595331.validator(path, query, header, formData, body)
  let scheme = call_595331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595331.url(scheme.get, call_595331.host, call_595331.base,
                         call_595331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595331, url, valid)

proc call*(call_595332: Call_GetDescribeDBSubnetGroups_595315; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595333 = newJObject()
  add(query_595333, "Marker", newJString(Marker))
  add(query_595333, "Action", newJString(Action))
  add(query_595333, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_595333, "Version", newJString(Version))
  if Filters != nil:
    query_595333.add "Filters", Filters
  add(query_595333, "MaxRecords", newJInt(MaxRecords))
  result = call_595332.call(nil, query_595333, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_595315(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_595316, base: "/",
    url: url_GetDescribeDBSubnetGroups_595317,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_595373 = ref object of OpenApiRestCall_592348
proc url_PostDescribeEngineDefaultClusterParameters_595375(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_595374(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595376 = query.getOrDefault("Action")
  valid_595376 = validateParameter(valid_595376, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_595376 != nil:
    section.add "Action", valid_595376
  var valid_595377 = query.getOrDefault("Version")
  valid_595377 = validateParameter(valid_595377, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595377 != nil:
    section.add "Version", valid_595377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595378 = header.getOrDefault("X-Amz-Signature")
  valid_595378 = validateParameter(valid_595378, JString, required = false,
                                 default = nil)
  if valid_595378 != nil:
    section.add "X-Amz-Signature", valid_595378
  var valid_595379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595379 = validateParameter(valid_595379, JString, required = false,
                                 default = nil)
  if valid_595379 != nil:
    section.add "X-Amz-Content-Sha256", valid_595379
  var valid_595380 = header.getOrDefault("X-Amz-Date")
  valid_595380 = validateParameter(valid_595380, JString, required = false,
                                 default = nil)
  if valid_595380 != nil:
    section.add "X-Amz-Date", valid_595380
  var valid_595381 = header.getOrDefault("X-Amz-Credential")
  valid_595381 = validateParameter(valid_595381, JString, required = false,
                                 default = nil)
  if valid_595381 != nil:
    section.add "X-Amz-Credential", valid_595381
  var valid_595382 = header.getOrDefault("X-Amz-Security-Token")
  valid_595382 = validateParameter(valid_595382, JString, required = false,
                                 default = nil)
  if valid_595382 != nil:
    section.add "X-Amz-Security-Token", valid_595382
  var valid_595383 = header.getOrDefault("X-Amz-Algorithm")
  valid_595383 = validateParameter(valid_595383, JString, required = false,
                                 default = nil)
  if valid_595383 != nil:
    section.add "X-Amz-Algorithm", valid_595383
  var valid_595384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595384 = validateParameter(valid_595384, JString, required = false,
                                 default = nil)
  if valid_595384 != nil:
    section.add "X-Amz-SignedHeaders", valid_595384
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  section = newJObject()
  var valid_595385 = formData.getOrDefault("MaxRecords")
  valid_595385 = validateParameter(valid_595385, JInt, required = false, default = nil)
  if valid_595385 != nil:
    section.add "MaxRecords", valid_595385
  var valid_595386 = formData.getOrDefault("Marker")
  valid_595386 = validateParameter(valid_595386, JString, required = false,
                                 default = nil)
  if valid_595386 != nil:
    section.add "Marker", valid_595386
  var valid_595387 = formData.getOrDefault("Filters")
  valid_595387 = validateParameter(valid_595387, JArray, required = false,
                                 default = nil)
  if valid_595387 != nil:
    section.add "Filters", valid_595387
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_595388 = formData.getOrDefault("DBParameterGroupFamily")
  valid_595388 = validateParameter(valid_595388, JString, required = true,
                                 default = nil)
  if valid_595388 != nil:
    section.add "DBParameterGroupFamily", valid_595388
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595389: Call_PostDescribeEngineDefaultClusterParameters_595373;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_595389.validator(path, query, header, formData, body)
  let scheme = call_595389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595389.url(scheme.get, call_595389.host, call_595389.base,
                         call_595389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595389, url, valid)

proc call*(call_595390: Call_PostDescribeEngineDefaultClusterParameters_595373;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  var query_595391 = newJObject()
  var formData_595392 = newJObject()
  add(formData_595392, "MaxRecords", newJInt(MaxRecords))
  add(formData_595392, "Marker", newJString(Marker))
  add(query_595391, "Action", newJString(Action))
  if Filters != nil:
    formData_595392.add "Filters", Filters
  add(query_595391, "Version", newJString(Version))
  add(formData_595392, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_595390.call(nil, query_595391, nil, formData_595392, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_595373(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_595374,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_595375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_595354 = ref object of OpenApiRestCall_592348
proc url_GetDescribeEngineDefaultClusterParameters_595356(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_595355(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595357 = query.getOrDefault("Marker")
  valid_595357 = validateParameter(valid_595357, JString, required = false,
                                 default = nil)
  if valid_595357 != nil:
    section.add "Marker", valid_595357
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_595358 = query.getOrDefault("DBParameterGroupFamily")
  valid_595358 = validateParameter(valid_595358, JString, required = true,
                                 default = nil)
  if valid_595358 != nil:
    section.add "DBParameterGroupFamily", valid_595358
  var valid_595359 = query.getOrDefault("Action")
  valid_595359 = validateParameter(valid_595359, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_595359 != nil:
    section.add "Action", valid_595359
  var valid_595360 = query.getOrDefault("Version")
  valid_595360 = validateParameter(valid_595360, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595360 != nil:
    section.add "Version", valid_595360
  var valid_595361 = query.getOrDefault("Filters")
  valid_595361 = validateParameter(valid_595361, JArray, required = false,
                                 default = nil)
  if valid_595361 != nil:
    section.add "Filters", valid_595361
  var valid_595362 = query.getOrDefault("MaxRecords")
  valid_595362 = validateParameter(valid_595362, JInt, required = false, default = nil)
  if valid_595362 != nil:
    section.add "MaxRecords", valid_595362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595363 = header.getOrDefault("X-Amz-Signature")
  valid_595363 = validateParameter(valid_595363, JString, required = false,
                                 default = nil)
  if valid_595363 != nil:
    section.add "X-Amz-Signature", valid_595363
  var valid_595364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595364 = validateParameter(valid_595364, JString, required = false,
                                 default = nil)
  if valid_595364 != nil:
    section.add "X-Amz-Content-Sha256", valid_595364
  var valid_595365 = header.getOrDefault("X-Amz-Date")
  valid_595365 = validateParameter(valid_595365, JString, required = false,
                                 default = nil)
  if valid_595365 != nil:
    section.add "X-Amz-Date", valid_595365
  var valid_595366 = header.getOrDefault("X-Amz-Credential")
  valid_595366 = validateParameter(valid_595366, JString, required = false,
                                 default = nil)
  if valid_595366 != nil:
    section.add "X-Amz-Credential", valid_595366
  var valid_595367 = header.getOrDefault("X-Amz-Security-Token")
  valid_595367 = validateParameter(valid_595367, JString, required = false,
                                 default = nil)
  if valid_595367 != nil:
    section.add "X-Amz-Security-Token", valid_595367
  var valid_595368 = header.getOrDefault("X-Amz-Algorithm")
  valid_595368 = validateParameter(valid_595368, JString, required = false,
                                 default = nil)
  if valid_595368 != nil:
    section.add "X-Amz-Algorithm", valid_595368
  var valid_595369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595369 = validateParameter(valid_595369, JString, required = false,
                                 default = nil)
  if valid_595369 != nil:
    section.add "X-Amz-SignedHeaders", valid_595369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595370: Call_GetDescribeEngineDefaultClusterParameters_595354;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_595370.validator(path, query, header, formData, body)
  let scheme = call_595370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595370.url(scheme.get, call_595370.host, call_595370.base,
                         call_595370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595370, url, valid)

proc call*(call_595371: Call_GetDescribeEngineDefaultClusterParameters_595354;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595372 = newJObject()
  add(query_595372, "Marker", newJString(Marker))
  add(query_595372, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_595372, "Action", newJString(Action))
  add(query_595372, "Version", newJString(Version))
  if Filters != nil:
    query_595372.add "Filters", Filters
  add(query_595372, "MaxRecords", newJInt(MaxRecords))
  result = call_595371.call(nil, query_595372, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_595354(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_595355,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_595356,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_595412 = ref object of OpenApiRestCall_592348
proc url_PostDescribeEngineDefaultParameters_595414(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_595413(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595415 = query.getOrDefault("Action")
  valid_595415 = validateParameter(valid_595415, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_595415 != nil:
    section.add "Action", valid_595415
  var valid_595416 = query.getOrDefault("Version")
  valid_595416 = validateParameter(valid_595416, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595416 != nil:
    section.add "Version", valid_595416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595417 = header.getOrDefault("X-Amz-Signature")
  valid_595417 = validateParameter(valid_595417, JString, required = false,
                                 default = nil)
  if valid_595417 != nil:
    section.add "X-Amz-Signature", valid_595417
  var valid_595418 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595418 = validateParameter(valid_595418, JString, required = false,
                                 default = nil)
  if valid_595418 != nil:
    section.add "X-Amz-Content-Sha256", valid_595418
  var valid_595419 = header.getOrDefault("X-Amz-Date")
  valid_595419 = validateParameter(valid_595419, JString, required = false,
                                 default = nil)
  if valid_595419 != nil:
    section.add "X-Amz-Date", valid_595419
  var valid_595420 = header.getOrDefault("X-Amz-Credential")
  valid_595420 = validateParameter(valid_595420, JString, required = false,
                                 default = nil)
  if valid_595420 != nil:
    section.add "X-Amz-Credential", valid_595420
  var valid_595421 = header.getOrDefault("X-Amz-Security-Token")
  valid_595421 = validateParameter(valid_595421, JString, required = false,
                                 default = nil)
  if valid_595421 != nil:
    section.add "X-Amz-Security-Token", valid_595421
  var valid_595422 = header.getOrDefault("X-Amz-Algorithm")
  valid_595422 = validateParameter(valid_595422, JString, required = false,
                                 default = nil)
  if valid_595422 != nil:
    section.add "X-Amz-Algorithm", valid_595422
  var valid_595423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595423 = validateParameter(valid_595423, JString, required = false,
                                 default = nil)
  if valid_595423 != nil:
    section.add "X-Amz-SignedHeaders", valid_595423
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  section = newJObject()
  var valid_595424 = formData.getOrDefault("MaxRecords")
  valid_595424 = validateParameter(valid_595424, JInt, required = false, default = nil)
  if valid_595424 != nil:
    section.add "MaxRecords", valid_595424
  var valid_595425 = formData.getOrDefault("Marker")
  valid_595425 = validateParameter(valid_595425, JString, required = false,
                                 default = nil)
  if valid_595425 != nil:
    section.add "Marker", valid_595425
  var valid_595426 = formData.getOrDefault("Filters")
  valid_595426 = validateParameter(valid_595426, JArray, required = false,
                                 default = nil)
  if valid_595426 != nil:
    section.add "Filters", valid_595426
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_595427 = formData.getOrDefault("DBParameterGroupFamily")
  valid_595427 = validateParameter(valid_595427, JString, required = true,
                                 default = nil)
  if valid_595427 != nil:
    section.add "DBParameterGroupFamily", valid_595427
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595428: Call_PostDescribeEngineDefaultParameters_595412;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_595428.validator(path, query, header, formData, body)
  let scheme = call_595428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595428.url(scheme.get, call_595428.host, call_595428.base,
                         call_595428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595428, url, valid)

proc call*(call_595429: Call_PostDescribeEngineDefaultParameters_595412;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  var query_595430 = newJObject()
  var formData_595431 = newJObject()
  add(formData_595431, "MaxRecords", newJInt(MaxRecords))
  add(formData_595431, "Marker", newJString(Marker))
  add(query_595430, "Action", newJString(Action))
  if Filters != nil:
    formData_595431.add "Filters", Filters
  add(query_595430, "Version", newJString(Version))
  add(formData_595431, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_595429.call(nil, query_595430, nil, formData_595431, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_595412(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_595413, base: "/",
    url: url_PostDescribeEngineDefaultParameters_595414,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_595393 = ref object of OpenApiRestCall_592348
proc url_GetDescribeEngineDefaultParameters_595395(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_595394(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595396 = query.getOrDefault("Marker")
  valid_595396 = validateParameter(valid_595396, JString, required = false,
                                 default = nil)
  if valid_595396 != nil:
    section.add "Marker", valid_595396
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_595397 = query.getOrDefault("DBParameterGroupFamily")
  valid_595397 = validateParameter(valid_595397, JString, required = true,
                                 default = nil)
  if valid_595397 != nil:
    section.add "DBParameterGroupFamily", valid_595397
  var valid_595398 = query.getOrDefault("Action")
  valid_595398 = validateParameter(valid_595398, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_595398 != nil:
    section.add "Action", valid_595398
  var valid_595399 = query.getOrDefault("Version")
  valid_595399 = validateParameter(valid_595399, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595399 != nil:
    section.add "Version", valid_595399
  var valid_595400 = query.getOrDefault("Filters")
  valid_595400 = validateParameter(valid_595400, JArray, required = false,
                                 default = nil)
  if valid_595400 != nil:
    section.add "Filters", valid_595400
  var valid_595401 = query.getOrDefault("MaxRecords")
  valid_595401 = validateParameter(valid_595401, JInt, required = false, default = nil)
  if valid_595401 != nil:
    section.add "MaxRecords", valid_595401
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595402 = header.getOrDefault("X-Amz-Signature")
  valid_595402 = validateParameter(valid_595402, JString, required = false,
                                 default = nil)
  if valid_595402 != nil:
    section.add "X-Amz-Signature", valid_595402
  var valid_595403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595403 = validateParameter(valid_595403, JString, required = false,
                                 default = nil)
  if valid_595403 != nil:
    section.add "X-Amz-Content-Sha256", valid_595403
  var valid_595404 = header.getOrDefault("X-Amz-Date")
  valid_595404 = validateParameter(valid_595404, JString, required = false,
                                 default = nil)
  if valid_595404 != nil:
    section.add "X-Amz-Date", valid_595404
  var valid_595405 = header.getOrDefault("X-Amz-Credential")
  valid_595405 = validateParameter(valid_595405, JString, required = false,
                                 default = nil)
  if valid_595405 != nil:
    section.add "X-Amz-Credential", valid_595405
  var valid_595406 = header.getOrDefault("X-Amz-Security-Token")
  valid_595406 = validateParameter(valid_595406, JString, required = false,
                                 default = nil)
  if valid_595406 != nil:
    section.add "X-Amz-Security-Token", valid_595406
  var valid_595407 = header.getOrDefault("X-Amz-Algorithm")
  valid_595407 = validateParameter(valid_595407, JString, required = false,
                                 default = nil)
  if valid_595407 != nil:
    section.add "X-Amz-Algorithm", valid_595407
  var valid_595408 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595408 = validateParameter(valid_595408, JString, required = false,
                                 default = nil)
  if valid_595408 != nil:
    section.add "X-Amz-SignedHeaders", valid_595408
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595409: Call_GetDescribeEngineDefaultParameters_595393;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_595409.validator(path, query, header, formData, body)
  let scheme = call_595409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595409.url(scheme.get, call_595409.host, call_595409.base,
                         call_595409.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595409, url, valid)

proc call*(call_595410: Call_GetDescribeEngineDefaultParameters_595393;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595411 = newJObject()
  add(query_595411, "Marker", newJString(Marker))
  add(query_595411, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_595411, "Action", newJString(Action))
  add(query_595411, "Version", newJString(Version))
  if Filters != nil:
    query_595411.add "Filters", Filters
  add(query_595411, "MaxRecords", newJInt(MaxRecords))
  result = call_595410.call(nil, query_595411, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_595393(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_595394, base: "/",
    url: url_GetDescribeEngineDefaultParameters_595395,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_595449 = ref object of OpenApiRestCall_592348
proc url_PostDescribeEventCategories_595451(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEventCategories_595450(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595452 = query.getOrDefault("Action")
  valid_595452 = validateParameter(valid_595452, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_595452 != nil:
    section.add "Action", valid_595452
  var valid_595453 = query.getOrDefault("Version")
  valid_595453 = validateParameter(valid_595453, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595453 != nil:
    section.add "Version", valid_595453
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595454 = header.getOrDefault("X-Amz-Signature")
  valid_595454 = validateParameter(valid_595454, JString, required = false,
                                 default = nil)
  if valid_595454 != nil:
    section.add "X-Amz-Signature", valid_595454
  var valid_595455 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595455 = validateParameter(valid_595455, JString, required = false,
                                 default = nil)
  if valid_595455 != nil:
    section.add "X-Amz-Content-Sha256", valid_595455
  var valid_595456 = header.getOrDefault("X-Amz-Date")
  valid_595456 = validateParameter(valid_595456, JString, required = false,
                                 default = nil)
  if valid_595456 != nil:
    section.add "X-Amz-Date", valid_595456
  var valid_595457 = header.getOrDefault("X-Amz-Credential")
  valid_595457 = validateParameter(valid_595457, JString, required = false,
                                 default = nil)
  if valid_595457 != nil:
    section.add "X-Amz-Credential", valid_595457
  var valid_595458 = header.getOrDefault("X-Amz-Security-Token")
  valid_595458 = validateParameter(valid_595458, JString, required = false,
                                 default = nil)
  if valid_595458 != nil:
    section.add "X-Amz-Security-Token", valid_595458
  var valid_595459 = header.getOrDefault("X-Amz-Algorithm")
  valid_595459 = validateParameter(valid_595459, JString, required = false,
                                 default = nil)
  if valid_595459 != nil:
    section.add "X-Amz-Algorithm", valid_595459
  var valid_595460 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595460 = validateParameter(valid_595460, JString, required = false,
                                 default = nil)
  if valid_595460 != nil:
    section.add "X-Amz-SignedHeaders", valid_595460
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595461 = formData.getOrDefault("SourceType")
  valid_595461 = validateParameter(valid_595461, JString, required = false,
                                 default = nil)
  if valid_595461 != nil:
    section.add "SourceType", valid_595461
  var valid_595462 = formData.getOrDefault("Filters")
  valid_595462 = validateParameter(valid_595462, JArray, required = false,
                                 default = nil)
  if valid_595462 != nil:
    section.add "Filters", valid_595462
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595463: Call_PostDescribeEventCategories_595449; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_595463.validator(path, query, header, formData, body)
  let scheme = call_595463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595463.url(scheme.get, call_595463.host, call_595463.base,
                         call_595463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595463, url, valid)

proc call*(call_595464: Call_PostDescribeEventCategories_595449;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_595465 = newJObject()
  var formData_595466 = newJObject()
  add(formData_595466, "SourceType", newJString(SourceType))
  add(query_595465, "Action", newJString(Action))
  if Filters != nil:
    formData_595466.add "Filters", Filters
  add(query_595465, "Version", newJString(Version))
  result = call_595464.call(nil, query_595465, nil, formData_595466, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_595449(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_595450, base: "/",
    url: url_PostDescribeEventCategories_595451,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_595432 = ref object of OpenApiRestCall_592348
proc url_GetDescribeEventCategories_595434(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEventCategories_595433(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595435 = query.getOrDefault("SourceType")
  valid_595435 = validateParameter(valid_595435, JString, required = false,
                                 default = nil)
  if valid_595435 != nil:
    section.add "SourceType", valid_595435
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595436 = query.getOrDefault("Action")
  valid_595436 = validateParameter(valid_595436, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_595436 != nil:
    section.add "Action", valid_595436
  var valid_595437 = query.getOrDefault("Version")
  valid_595437 = validateParameter(valid_595437, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595437 != nil:
    section.add "Version", valid_595437
  var valid_595438 = query.getOrDefault("Filters")
  valid_595438 = validateParameter(valid_595438, JArray, required = false,
                                 default = nil)
  if valid_595438 != nil:
    section.add "Filters", valid_595438
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595439 = header.getOrDefault("X-Amz-Signature")
  valid_595439 = validateParameter(valid_595439, JString, required = false,
                                 default = nil)
  if valid_595439 != nil:
    section.add "X-Amz-Signature", valid_595439
  var valid_595440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595440 = validateParameter(valid_595440, JString, required = false,
                                 default = nil)
  if valid_595440 != nil:
    section.add "X-Amz-Content-Sha256", valid_595440
  var valid_595441 = header.getOrDefault("X-Amz-Date")
  valid_595441 = validateParameter(valid_595441, JString, required = false,
                                 default = nil)
  if valid_595441 != nil:
    section.add "X-Amz-Date", valid_595441
  var valid_595442 = header.getOrDefault("X-Amz-Credential")
  valid_595442 = validateParameter(valid_595442, JString, required = false,
                                 default = nil)
  if valid_595442 != nil:
    section.add "X-Amz-Credential", valid_595442
  var valid_595443 = header.getOrDefault("X-Amz-Security-Token")
  valid_595443 = validateParameter(valid_595443, JString, required = false,
                                 default = nil)
  if valid_595443 != nil:
    section.add "X-Amz-Security-Token", valid_595443
  var valid_595444 = header.getOrDefault("X-Amz-Algorithm")
  valid_595444 = validateParameter(valid_595444, JString, required = false,
                                 default = nil)
  if valid_595444 != nil:
    section.add "X-Amz-Algorithm", valid_595444
  var valid_595445 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595445 = validateParameter(valid_595445, JString, required = false,
                                 default = nil)
  if valid_595445 != nil:
    section.add "X-Amz-SignedHeaders", valid_595445
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595446: Call_GetDescribeEventCategories_595432; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_595446.validator(path, query, header, formData, body)
  let scheme = call_595446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595446.url(scheme.get, call_595446.host, call_595446.base,
                         call_595446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595446, url, valid)

proc call*(call_595447: Call_GetDescribeEventCategories_595432;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2014-10-31"; Filters: JsonNode = nil): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  var query_595448 = newJObject()
  add(query_595448, "SourceType", newJString(SourceType))
  add(query_595448, "Action", newJString(Action))
  add(query_595448, "Version", newJString(Version))
  if Filters != nil:
    query_595448.add "Filters", Filters
  result = call_595447.call(nil, query_595448, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_595432(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_595433, base: "/",
    url: url_GetDescribeEventCategories_595434,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_595486 = ref object of OpenApiRestCall_592348
proc url_PostDescribeEventSubscriptions_595488(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEventSubscriptions_595487(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595489 = query.getOrDefault("Action")
  valid_595489 = validateParameter(valid_595489, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_595489 != nil:
    section.add "Action", valid_595489
  var valid_595490 = query.getOrDefault("Version")
  valid_595490 = validateParameter(valid_595490, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595490 != nil:
    section.add "Version", valid_595490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595491 = header.getOrDefault("X-Amz-Signature")
  valid_595491 = validateParameter(valid_595491, JString, required = false,
                                 default = nil)
  if valid_595491 != nil:
    section.add "X-Amz-Signature", valid_595491
  var valid_595492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595492 = validateParameter(valid_595492, JString, required = false,
                                 default = nil)
  if valid_595492 != nil:
    section.add "X-Amz-Content-Sha256", valid_595492
  var valid_595493 = header.getOrDefault("X-Amz-Date")
  valid_595493 = validateParameter(valid_595493, JString, required = false,
                                 default = nil)
  if valid_595493 != nil:
    section.add "X-Amz-Date", valid_595493
  var valid_595494 = header.getOrDefault("X-Amz-Credential")
  valid_595494 = validateParameter(valid_595494, JString, required = false,
                                 default = nil)
  if valid_595494 != nil:
    section.add "X-Amz-Credential", valid_595494
  var valid_595495 = header.getOrDefault("X-Amz-Security-Token")
  valid_595495 = validateParameter(valid_595495, JString, required = false,
                                 default = nil)
  if valid_595495 != nil:
    section.add "X-Amz-Security-Token", valid_595495
  var valid_595496 = header.getOrDefault("X-Amz-Algorithm")
  valid_595496 = validateParameter(valid_595496, JString, required = false,
                                 default = nil)
  if valid_595496 != nil:
    section.add "X-Amz-Algorithm", valid_595496
  var valid_595497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595497 = validateParameter(valid_595497, JString, required = false,
                                 default = nil)
  if valid_595497 != nil:
    section.add "X-Amz-SignedHeaders", valid_595497
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595498 = formData.getOrDefault("MaxRecords")
  valid_595498 = validateParameter(valid_595498, JInt, required = false, default = nil)
  if valid_595498 != nil:
    section.add "MaxRecords", valid_595498
  var valid_595499 = formData.getOrDefault("Marker")
  valid_595499 = validateParameter(valid_595499, JString, required = false,
                                 default = nil)
  if valid_595499 != nil:
    section.add "Marker", valid_595499
  var valid_595500 = formData.getOrDefault("SubscriptionName")
  valid_595500 = validateParameter(valid_595500, JString, required = false,
                                 default = nil)
  if valid_595500 != nil:
    section.add "SubscriptionName", valid_595500
  var valid_595501 = formData.getOrDefault("Filters")
  valid_595501 = validateParameter(valid_595501, JArray, required = false,
                                 default = nil)
  if valid_595501 != nil:
    section.add "Filters", valid_595501
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595502: Call_PostDescribeEventSubscriptions_595486; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_595502.validator(path, query, header, formData, body)
  let scheme = call_595502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595502.url(scheme.get, call_595502.host, call_595502.base,
                         call_595502.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595502, url, valid)

proc call*(call_595503: Call_PostDescribeEventSubscriptions_595486;
          MaxRecords: int = 0; Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_595504 = newJObject()
  var formData_595505 = newJObject()
  add(formData_595505, "MaxRecords", newJInt(MaxRecords))
  add(formData_595505, "Marker", newJString(Marker))
  add(formData_595505, "SubscriptionName", newJString(SubscriptionName))
  add(query_595504, "Action", newJString(Action))
  if Filters != nil:
    formData_595505.add "Filters", Filters
  add(query_595504, "Version", newJString(Version))
  result = call_595503.call(nil, query_595504, nil, formData_595505, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_595486(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_595487, base: "/",
    url: url_PostDescribeEventSubscriptions_595488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_595467 = ref object of OpenApiRestCall_592348
proc url_GetDescribeEventSubscriptions_595469(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEventSubscriptions_595468(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595470 = query.getOrDefault("Marker")
  valid_595470 = validateParameter(valid_595470, JString, required = false,
                                 default = nil)
  if valid_595470 != nil:
    section.add "Marker", valid_595470
  var valid_595471 = query.getOrDefault("SubscriptionName")
  valid_595471 = validateParameter(valid_595471, JString, required = false,
                                 default = nil)
  if valid_595471 != nil:
    section.add "SubscriptionName", valid_595471
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595472 = query.getOrDefault("Action")
  valid_595472 = validateParameter(valid_595472, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_595472 != nil:
    section.add "Action", valid_595472
  var valid_595473 = query.getOrDefault("Version")
  valid_595473 = validateParameter(valid_595473, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595473 != nil:
    section.add "Version", valid_595473
  var valid_595474 = query.getOrDefault("Filters")
  valid_595474 = validateParameter(valid_595474, JArray, required = false,
                                 default = nil)
  if valid_595474 != nil:
    section.add "Filters", valid_595474
  var valid_595475 = query.getOrDefault("MaxRecords")
  valid_595475 = validateParameter(valid_595475, JInt, required = false, default = nil)
  if valid_595475 != nil:
    section.add "MaxRecords", valid_595475
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595476 = header.getOrDefault("X-Amz-Signature")
  valid_595476 = validateParameter(valid_595476, JString, required = false,
                                 default = nil)
  if valid_595476 != nil:
    section.add "X-Amz-Signature", valid_595476
  var valid_595477 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595477 = validateParameter(valid_595477, JString, required = false,
                                 default = nil)
  if valid_595477 != nil:
    section.add "X-Amz-Content-Sha256", valid_595477
  var valid_595478 = header.getOrDefault("X-Amz-Date")
  valid_595478 = validateParameter(valid_595478, JString, required = false,
                                 default = nil)
  if valid_595478 != nil:
    section.add "X-Amz-Date", valid_595478
  var valid_595479 = header.getOrDefault("X-Amz-Credential")
  valid_595479 = validateParameter(valid_595479, JString, required = false,
                                 default = nil)
  if valid_595479 != nil:
    section.add "X-Amz-Credential", valid_595479
  var valid_595480 = header.getOrDefault("X-Amz-Security-Token")
  valid_595480 = validateParameter(valid_595480, JString, required = false,
                                 default = nil)
  if valid_595480 != nil:
    section.add "X-Amz-Security-Token", valid_595480
  var valid_595481 = header.getOrDefault("X-Amz-Algorithm")
  valid_595481 = validateParameter(valid_595481, JString, required = false,
                                 default = nil)
  if valid_595481 != nil:
    section.add "X-Amz-Algorithm", valid_595481
  var valid_595482 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595482 = validateParameter(valid_595482, JString, required = false,
                                 default = nil)
  if valid_595482 != nil:
    section.add "X-Amz-SignedHeaders", valid_595482
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595483: Call_GetDescribeEventSubscriptions_595467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_595483.validator(path, query, header, formData, body)
  let scheme = call_595483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595483.url(scheme.get, call_595483.host, call_595483.base,
                         call_595483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595483, url, valid)

proc call*(call_595484: Call_GetDescribeEventSubscriptions_595467;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595485 = newJObject()
  add(query_595485, "Marker", newJString(Marker))
  add(query_595485, "SubscriptionName", newJString(SubscriptionName))
  add(query_595485, "Action", newJString(Action))
  add(query_595485, "Version", newJString(Version))
  if Filters != nil:
    query_595485.add "Filters", Filters
  add(query_595485, "MaxRecords", newJInt(MaxRecords))
  result = call_595484.call(nil, query_595485, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_595467(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_595468, base: "/",
    url: url_GetDescribeEventSubscriptions_595469,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_595530 = ref object of OpenApiRestCall_592348
proc url_PostDescribeEvents_595532(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEvents_595531(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595533 = query.getOrDefault("Action")
  valid_595533 = validateParameter(valid_595533, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_595533 != nil:
    section.add "Action", valid_595533
  var valid_595534 = query.getOrDefault("Version")
  valid_595534 = validateParameter(valid_595534, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595534 != nil:
    section.add "Version", valid_595534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595535 = header.getOrDefault("X-Amz-Signature")
  valid_595535 = validateParameter(valid_595535, JString, required = false,
                                 default = nil)
  if valid_595535 != nil:
    section.add "X-Amz-Signature", valid_595535
  var valid_595536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595536 = validateParameter(valid_595536, JString, required = false,
                                 default = nil)
  if valid_595536 != nil:
    section.add "X-Amz-Content-Sha256", valid_595536
  var valid_595537 = header.getOrDefault("X-Amz-Date")
  valid_595537 = validateParameter(valid_595537, JString, required = false,
                                 default = nil)
  if valid_595537 != nil:
    section.add "X-Amz-Date", valid_595537
  var valid_595538 = header.getOrDefault("X-Amz-Credential")
  valid_595538 = validateParameter(valid_595538, JString, required = false,
                                 default = nil)
  if valid_595538 != nil:
    section.add "X-Amz-Credential", valid_595538
  var valid_595539 = header.getOrDefault("X-Amz-Security-Token")
  valid_595539 = validateParameter(valid_595539, JString, required = false,
                                 default = nil)
  if valid_595539 != nil:
    section.add "X-Amz-Security-Token", valid_595539
  var valid_595540 = header.getOrDefault("X-Amz-Algorithm")
  valid_595540 = validateParameter(valid_595540, JString, required = false,
                                 default = nil)
  if valid_595540 != nil:
    section.add "X-Amz-Algorithm", valid_595540
  var valid_595541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595541 = validateParameter(valid_595541, JString, required = false,
                                 default = nil)
  if valid_595541 != nil:
    section.add "X-Amz-SignedHeaders", valid_595541
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595542 = formData.getOrDefault("MaxRecords")
  valid_595542 = validateParameter(valid_595542, JInt, required = false, default = nil)
  if valid_595542 != nil:
    section.add "MaxRecords", valid_595542
  var valid_595543 = formData.getOrDefault("Marker")
  valid_595543 = validateParameter(valid_595543, JString, required = false,
                                 default = nil)
  if valid_595543 != nil:
    section.add "Marker", valid_595543
  var valid_595544 = formData.getOrDefault("SourceIdentifier")
  valid_595544 = validateParameter(valid_595544, JString, required = false,
                                 default = nil)
  if valid_595544 != nil:
    section.add "SourceIdentifier", valid_595544
  var valid_595545 = formData.getOrDefault("SourceType")
  valid_595545 = validateParameter(valid_595545, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_595545 != nil:
    section.add "SourceType", valid_595545
  var valid_595546 = formData.getOrDefault("Duration")
  valid_595546 = validateParameter(valid_595546, JInt, required = false, default = nil)
  if valid_595546 != nil:
    section.add "Duration", valid_595546
  var valid_595547 = formData.getOrDefault("EndTime")
  valid_595547 = validateParameter(valid_595547, JString, required = false,
                                 default = nil)
  if valid_595547 != nil:
    section.add "EndTime", valid_595547
  var valid_595548 = formData.getOrDefault("StartTime")
  valid_595548 = validateParameter(valid_595548, JString, required = false,
                                 default = nil)
  if valid_595548 != nil:
    section.add "StartTime", valid_595548
  var valid_595549 = formData.getOrDefault("EventCategories")
  valid_595549 = validateParameter(valid_595549, JArray, required = false,
                                 default = nil)
  if valid_595549 != nil:
    section.add "EventCategories", valid_595549
  var valid_595550 = formData.getOrDefault("Filters")
  valid_595550 = validateParameter(valid_595550, JArray, required = false,
                                 default = nil)
  if valid_595550 != nil:
    section.add "Filters", valid_595550
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595551: Call_PostDescribeEvents_595530; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_595551.validator(path, query, header, formData, body)
  let scheme = call_595551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595551.url(scheme.get, call_595551.host, call_595551.base,
                         call_595551.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595551, url, valid)

proc call*(call_595552: Call_PostDescribeEvents_595530; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "db-instance"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; EventCategories: JsonNode = nil;
          Action: string = "DescribeEvents"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_595553 = newJObject()
  var formData_595554 = newJObject()
  add(formData_595554, "MaxRecords", newJInt(MaxRecords))
  add(formData_595554, "Marker", newJString(Marker))
  add(formData_595554, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_595554, "SourceType", newJString(SourceType))
  add(formData_595554, "Duration", newJInt(Duration))
  add(formData_595554, "EndTime", newJString(EndTime))
  add(formData_595554, "StartTime", newJString(StartTime))
  if EventCategories != nil:
    formData_595554.add "EventCategories", EventCategories
  add(query_595553, "Action", newJString(Action))
  if Filters != nil:
    formData_595554.add "Filters", Filters
  add(query_595553, "Version", newJString(Version))
  result = call_595552.call(nil, query_595553, nil, formData_595554, nil)

var postDescribeEvents* = Call_PostDescribeEvents_595530(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_595531, base: "/",
    url: url_PostDescribeEvents_595532, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_595506 = ref object of OpenApiRestCall_592348
proc url_GetDescribeEvents_595508(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEvents_595507(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595509 = query.getOrDefault("Marker")
  valid_595509 = validateParameter(valid_595509, JString, required = false,
                                 default = nil)
  if valid_595509 != nil:
    section.add "Marker", valid_595509
  var valid_595510 = query.getOrDefault("SourceType")
  valid_595510 = validateParameter(valid_595510, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_595510 != nil:
    section.add "SourceType", valid_595510
  var valid_595511 = query.getOrDefault("SourceIdentifier")
  valid_595511 = validateParameter(valid_595511, JString, required = false,
                                 default = nil)
  if valid_595511 != nil:
    section.add "SourceIdentifier", valid_595511
  var valid_595512 = query.getOrDefault("EventCategories")
  valid_595512 = validateParameter(valid_595512, JArray, required = false,
                                 default = nil)
  if valid_595512 != nil:
    section.add "EventCategories", valid_595512
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595513 = query.getOrDefault("Action")
  valid_595513 = validateParameter(valid_595513, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_595513 != nil:
    section.add "Action", valid_595513
  var valid_595514 = query.getOrDefault("StartTime")
  valid_595514 = validateParameter(valid_595514, JString, required = false,
                                 default = nil)
  if valid_595514 != nil:
    section.add "StartTime", valid_595514
  var valid_595515 = query.getOrDefault("Duration")
  valid_595515 = validateParameter(valid_595515, JInt, required = false, default = nil)
  if valid_595515 != nil:
    section.add "Duration", valid_595515
  var valid_595516 = query.getOrDefault("EndTime")
  valid_595516 = validateParameter(valid_595516, JString, required = false,
                                 default = nil)
  if valid_595516 != nil:
    section.add "EndTime", valid_595516
  var valid_595517 = query.getOrDefault("Version")
  valid_595517 = validateParameter(valid_595517, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595517 != nil:
    section.add "Version", valid_595517
  var valid_595518 = query.getOrDefault("Filters")
  valid_595518 = validateParameter(valid_595518, JArray, required = false,
                                 default = nil)
  if valid_595518 != nil:
    section.add "Filters", valid_595518
  var valid_595519 = query.getOrDefault("MaxRecords")
  valid_595519 = validateParameter(valid_595519, JInt, required = false, default = nil)
  if valid_595519 != nil:
    section.add "MaxRecords", valid_595519
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595520 = header.getOrDefault("X-Amz-Signature")
  valid_595520 = validateParameter(valid_595520, JString, required = false,
                                 default = nil)
  if valid_595520 != nil:
    section.add "X-Amz-Signature", valid_595520
  var valid_595521 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595521 = validateParameter(valid_595521, JString, required = false,
                                 default = nil)
  if valid_595521 != nil:
    section.add "X-Amz-Content-Sha256", valid_595521
  var valid_595522 = header.getOrDefault("X-Amz-Date")
  valid_595522 = validateParameter(valid_595522, JString, required = false,
                                 default = nil)
  if valid_595522 != nil:
    section.add "X-Amz-Date", valid_595522
  var valid_595523 = header.getOrDefault("X-Amz-Credential")
  valid_595523 = validateParameter(valid_595523, JString, required = false,
                                 default = nil)
  if valid_595523 != nil:
    section.add "X-Amz-Credential", valid_595523
  var valid_595524 = header.getOrDefault("X-Amz-Security-Token")
  valid_595524 = validateParameter(valid_595524, JString, required = false,
                                 default = nil)
  if valid_595524 != nil:
    section.add "X-Amz-Security-Token", valid_595524
  var valid_595525 = header.getOrDefault("X-Amz-Algorithm")
  valid_595525 = validateParameter(valid_595525, JString, required = false,
                                 default = nil)
  if valid_595525 != nil:
    section.add "X-Amz-Algorithm", valid_595525
  var valid_595526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595526 = validateParameter(valid_595526, JString, required = false,
                                 default = nil)
  if valid_595526 != nil:
    section.add "X-Amz-SignedHeaders", valid_595526
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595527: Call_GetDescribeEvents_595506; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_595527.validator(path, query, header, formData, body)
  let scheme = call_595527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595527.url(scheme.get, call_595527.host, call_595527.base,
                         call_595527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595527, url, valid)

proc call*(call_595528: Call_GetDescribeEvents_595506; Marker: string = "";
          SourceType: string = "db-instance"; SourceIdentifier: string = "";
          EventCategories: JsonNode = nil; Action: string = "DescribeEvents";
          StartTime: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595529 = newJObject()
  add(query_595529, "Marker", newJString(Marker))
  add(query_595529, "SourceType", newJString(SourceType))
  add(query_595529, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    query_595529.add "EventCategories", EventCategories
  add(query_595529, "Action", newJString(Action))
  add(query_595529, "StartTime", newJString(StartTime))
  add(query_595529, "Duration", newJInt(Duration))
  add(query_595529, "EndTime", newJString(EndTime))
  add(query_595529, "Version", newJString(Version))
  if Filters != nil:
    query_595529.add "Filters", Filters
  add(query_595529, "MaxRecords", newJInt(MaxRecords))
  result = call_595528.call(nil, query_595529, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_595506(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_595507,
    base: "/", url: url_GetDescribeEvents_595508,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeGlobalClusters_595574 = ref object of OpenApiRestCall_592348
proc url_PostDescribeGlobalClusters_595576(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeGlobalClusters_595575(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595577 = query.getOrDefault("Action")
  valid_595577 = validateParameter(valid_595577, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_595577 != nil:
    section.add "Action", valid_595577
  var valid_595578 = query.getOrDefault("Version")
  valid_595578 = validateParameter(valid_595578, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595578 != nil:
    section.add "Version", valid_595578
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595579 = header.getOrDefault("X-Amz-Signature")
  valid_595579 = validateParameter(valid_595579, JString, required = false,
                                 default = nil)
  if valid_595579 != nil:
    section.add "X-Amz-Signature", valid_595579
  var valid_595580 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595580 = validateParameter(valid_595580, JString, required = false,
                                 default = nil)
  if valid_595580 != nil:
    section.add "X-Amz-Content-Sha256", valid_595580
  var valid_595581 = header.getOrDefault("X-Amz-Date")
  valid_595581 = validateParameter(valid_595581, JString, required = false,
                                 default = nil)
  if valid_595581 != nil:
    section.add "X-Amz-Date", valid_595581
  var valid_595582 = header.getOrDefault("X-Amz-Credential")
  valid_595582 = validateParameter(valid_595582, JString, required = false,
                                 default = nil)
  if valid_595582 != nil:
    section.add "X-Amz-Credential", valid_595582
  var valid_595583 = header.getOrDefault("X-Amz-Security-Token")
  valid_595583 = validateParameter(valid_595583, JString, required = false,
                                 default = nil)
  if valid_595583 != nil:
    section.add "X-Amz-Security-Token", valid_595583
  var valid_595584 = header.getOrDefault("X-Amz-Algorithm")
  valid_595584 = validateParameter(valid_595584, JString, required = false,
                                 default = nil)
  if valid_595584 != nil:
    section.add "X-Amz-Algorithm", valid_595584
  var valid_595585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595585 = validateParameter(valid_595585, JString, required = false,
                                 default = nil)
  if valid_595585 != nil:
    section.add "X-Amz-SignedHeaders", valid_595585
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_595586 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_595586 = validateParameter(valid_595586, JString, required = false,
                                 default = nil)
  if valid_595586 != nil:
    section.add "GlobalClusterIdentifier", valid_595586
  var valid_595587 = formData.getOrDefault("MaxRecords")
  valid_595587 = validateParameter(valid_595587, JInt, required = false, default = nil)
  if valid_595587 != nil:
    section.add "MaxRecords", valid_595587
  var valid_595588 = formData.getOrDefault("Marker")
  valid_595588 = validateParameter(valid_595588, JString, required = false,
                                 default = nil)
  if valid_595588 != nil:
    section.add "Marker", valid_595588
  var valid_595589 = formData.getOrDefault("Filters")
  valid_595589 = validateParameter(valid_595589, JArray, required = false,
                                 default = nil)
  if valid_595589 != nil:
    section.add "Filters", valid_595589
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595590: Call_PostDescribeGlobalClusters_595574; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595590.validator(path, query, header, formData, body)
  let scheme = call_595590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595590.url(scheme.get, call_595590.host, call_595590.base,
                         call_595590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595590, url, valid)

proc call*(call_595591: Call_PostDescribeGlobalClusters_595574;
          GlobalClusterIdentifier: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeGlobalClusters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_595592 = newJObject()
  var formData_595593 = newJObject()
  add(formData_595593, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_595593, "MaxRecords", newJInt(MaxRecords))
  add(formData_595593, "Marker", newJString(Marker))
  add(query_595592, "Action", newJString(Action))
  if Filters != nil:
    formData_595593.add "Filters", Filters
  add(query_595592, "Version", newJString(Version))
  result = call_595591.call(nil, query_595592, nil, formData_595593, nil)

var postDescribeGlobalClusters* = Call_PostDescribeGlobalClusters_595574(
    name: "postDescribeGlobalClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_PostDescribeGlobalClusters_595575, base: "/",
    url: url_PostDescribeGlobalClusters_595576,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeGlobalClusters_595555 = ref object of OpenApiRestCall_592348
proc url_GetDescribeGlobalClusters_595557(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeGlobalClusters_595556(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595558 = query.getOrDefault("Marker")
  valid_595558 = validateParameter(valid_595558, JString, required = false,
                                 default = nil)
  if valid_595558 != nil:
    section.add "Marker", valid_595558
  var valid_595559 = query.getOrDefault("GlobalClusterIdentifier")
  valid_595559 = validateParameter(valid_595559, JString, required = false,
                                 default = nil)
  if valid_595559 != nil:
    section.add "GlobalClusterIdentifier", valid_595559
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595560 = query.getOrDefault("Action")
  valid_595560 = validateParameter(valid_595560, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_595560 != nil:
    section.add "Action", valid_595560
  var valid_595561 = query.getOrDefault("Version")
  valid_595561 = validateParameter(valid_595561, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595561 != nil:
    section.add "Version", valid_595561
  var valid_595562 = query.getOrDefault("Filters")
  valid_595562 = validateParameter(valid_595562, JArray, required = false,
                                 default = nil)
  if valid_595562 != nil:
    section.add "Filters", valid_595562
  var valid_595563 = query.getOrDefault("MaxRecords")
  valid_595563 = validateParameter(valid_595563, JInt, required = false, default = nil)
  if valid_595563 != nil:
    section.add "MaxRecords", valid_595563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595564 = header.getOrDefault("X-Amz-Signature")
  valid_595564 = validateParameter(valid_595564, JString, required = false,
                                 default = nil)
  if valid_595564 != nil:
    section.add "X-Amz-Signature", valid_595564
  var valid_595565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595565 = validateParameter(valid_595565, JString, required = false,
                                 default = nil)
  if valid_595565 != nil:
    section.add "X-Amz-Content-Sha256", valid_595565
  var valid_595566 = header.getOrDefault("X-Amz-Date")
  valid_595566 = validateParameter(valid_595566, JString, required = false,
                                 default = nil)
  if valid_595566 != nil:
    section.add "X-Amz-Date", valid_595566
  var valid_595567 = header.getOrDefault("X-Amz-Credential")
  valid_595567 = validateParameter(valid_595567, JString, required = false,
                                 default = nil)
  if valid_595567 != nil:
    section.add "X-Amz-Credential", valid_595567
  var valid_595568 = header.getOrDefault("X-Amz-Security-Token")
  valid_595568 = validateParameter(valid_595568, JString, required = false,
                                 default = nil)
  if valid_595568 != nil:
    section.add "X-Amz-Security-Token", valid_595568
  var valid_595569 = header.getOrDefault("X-Amz-Algorithm")
  valid_595569 = validateParameter(valid_595569, JString, required = false,
                                 default = nil)
  if valid_595569 != nil:
    section.add "X-Amz-Algorithm", valid_595569
  var valid_595570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595570 = validateParameter(valid_595570, JString, required = false,
                                 default = nil)
  if valid_595570 != nil:
    section.add "X-Amz-SignedHeaders", valid_595570
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595571: Call_GetDescribeGlobalClusters_595555; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595571.validator(path, query, header, formData, body)
  let scheme = call_595571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595571.url(scheme.get, call_595571.host, call_595571.base,
                         call_595571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595571, url, valid)

proc call*(call_595572: Call_GetDescribeGlobalClusters_595555; Marker: string = "";
          GlobalClusterIdentifier: string = "";
          Action: string = "DescribeGlobalClusters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595573 = newJObject()
  add(query_595573, "Marker", newJString(Marker))
  add(query_595573, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_595573, "Action", newJString(Action))
  add(query_595573, "Version", newJString(Version))
  if Filters != nil:
    query_595573.add "Filters", Filters
  add(query_595573, "MaxRecords", newJInt(MaxRecords))
  result = call_595572.call(nil, query_595573, nil, nil, nil)

var getDescribeGlobalClusters* = Call_GetDescribeGlobalClusters_595555(
    name: "getDescribeGlobalClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_GetDescribeGlobalClusters_595556, base: "/",
    url: url_GetDescribeGlobalClusters_595557,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroupOptions_595614 = ref object of OpenApiRestCall_592348
proc url_PostDescribeOptionGroupOptions_595616(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeOptionGroupOptions_595615(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595617 = query.getOrDefault("Action")
  valid_595617 = validateParameter(valid_595617, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_595617 != nil:
    section.add "Action", valid_595617
  var valid_595618 = query.getOrDefault("Version")
  valid_595618 = validateParameter(valid_595618, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595618 != nil:
    section.add "Version", valid_595618
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595619 = header.getOrDefault("X-Amz-Signature")
  valid_595619 = validateParameter(valid_595619, JString, required = false,
                                 default = nil)
  if valid_595619 != nil:
    section.add "X-Amz-Signature", valid_595619
  var valid_595620 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595620 = validateParameter(valid_595620, JString, required = false,
                                 default = nil)
  if valid_595620 != nil:
    section.add "X-Amz-Content-Sha256", valid_595620
  var valid_595621 = header.getOrDefault("X-Amz-Date")
  valid_595621 = validateParameter(valid_595621, JString, required = false,
                                 default = nil)
  if valid_595621 != nil:
    section.add "X-Amz-Date", valid_595621
  var valid_595622 = header.getOrDefault("X-Amz-Credential")
  valid_595622 = validateParameter(valid_595622, JString, required = false,
                                 default = nil)
  if valid_595622 != nil:
    section.add "X-Amz-Credential", valid_595622
  var valid_595623 = header.getOrDefault("X-Amz-Security-Token")
  valid_595623 = validateParameter(valid_595623, JString, required = false,
                                 default = nil)
  if valid_595623 != nil:
    section.add "X-Amz-Security-Token", valid_595623
  var valid_595624 = header.getOrDefault("X-Amz-Algorithm")
  valid_595624 = validateParameter(valid_595624, JString, required = false,
                                 default = nil)
  if valid_595624 != nil:
    section.add "X-Amz-Algorithm", valid_595624
  var valid_595625 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595625 = validateParameter(valid_595625, JString, required = false,
                                 default = nil)
  if valid_595625 != nil:
    section.add "X-Amz-SignedHeaders", valid_595625
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595626 = formData.getOrDefault("MaxRecords")
  valid_595626 = validateParameter(valid_595626, JInt, required = false, default = nil)
  if valid_595626 != nil:
    section.add "MaxRecords", valid_595626
  var valid_595627 = formData.getOrDefault("Marker")
  valid_595627 = validateParameter(valid_595627, JString, required = false,
                                 default = nil)
  if valid_595627 != nil:
    section.add "Marker", valid_595627
  assert formData != nil,
        "formData argument is necessary due to required `EngineName` field"
  var valid_595628 = formData.getOrDefault("EngineName")
  valid_595628 = validateParameter(valid_595628, JString, required = true,
                                 default = nil)
  if valid_595628 != nil:
    section.add "EngineName", valid_595628
  var valid_595629 = formData.getOrDefault("MajorEngineVersion")
  valid_595629 = validateParameter(valid_595629, JString, required = false,
                                 default = nil)
  if valid_595629 != nil:
    section.add "MajorEngineVersion", valid_595629
  var valid_595630 = formData.getOrDefault("Filters")
  valid_595630 = validateParameter(valid_595630, JArray, required = false,
                                 default = nil)
  if valid_595630 != nil:
    section.add "Filters", valid_595630
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595631: Call_PostDescribeOptionGroupOptions_595614; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_595631.validator(path, query, header, formData, body)
  let scheme = call_595631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595631.url(scheme.get, call_595631.host, call_595631.base,
                         call_595631.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595631, url, valid)

proc call*(call_595632: Call_PostDescribeOptionGroupOptions_595614;
          EngineName: string; MaxRecords: int = 0; Marker: string = "";
          MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroupOptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_595633 = newJObject()
  var formData_595634 = newJObject()
  add(formData_595634, "MaxRecords", newJInt(MaxRecords))
  add(formData_595634, "Marker", newJString(Marker))
  add(formData_595634, "EngineName", newJString(EngineName))
  add(formData_595634, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_595633, "Action", newJString(Action))
  if Filters != nil:
    formData_595634.add "Filters", Filters
  add(query_595633, "Version", newJString(Version))
  result = call_595632.call(nil, query_595633, nil, formData_595634, nil)

var postDescribeOptionGroupOptions* = Call_PostDescribeOptionGroupOptions_595614(
    name: "postDescribeOptionGroupOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_PostDescribeOptionGroupOptions_595615, base: "/",
    url: url_PostDescribeOptionGroupOptions_595616,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroupOptions_595594 = ref object of OpenApiRestCall_592348
proc url_GetDescribeOptionGroupOptions_595596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeOptionGroupOptions_595595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_595597 = query.getOrDefault("EngineName")
  valid_595597 = validateParameter(valid_595597, JString, required = true,
                                 default = nil)
  if valid_595597 != nil:
    section.add "EngineName", valid_595597
  var valid_595598 = query.getOrDefault("Marker")
  valid_595598 = validateParameter(valid_595598, JString, required = false,
                                 default = nil)
  if valid_595598 != nil:
    section.add "Marker", valid_595598
  var valid_595599 = query.getOrDefault("Action")
  valid_595599 = validateParameter(valid_595599, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_595599 != nil:
    section.add "Action", valid_595599
  var valid_595600 = query.getOrDefault("Version")
  valid_595600 = validateParameter(valid_595600, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595600 != nil:
    section.add "Version", valid_595600
  var valid_595601 = query.getOrDefault("Filters")
  valid_595601 = validateParameter(valid_595601, JArray, required = false,
                                 default = nil)
  if valid_595601 != nil:
    section.add "Filters", valid_595601
  var valid_595602 = query.getOrDefault("MaxRecords")
  valid_595602 = validateParameter(valid_595602, JInt, required = false, default = nil)
  if valid_595602 != nil:
    section.add "MaxRecords", valid_595602
  var valid_595603 = query.getOrDefault("MajorEngineVersion")
  valid_595603 = validateParameter(valid_595603, JString, required = false,
                                 default = nil)
  if valid_595603 != nil:
    section.add "MajorEngineVersion", valid_595603
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595604 = header.getOrDefault("X-Amz-Signature")
  valid_595604 = validateParameter(valid_595604, JString, required = false,
                                 default = nil)
  if valid_595604 != nil:
    section.add "X-Amz-Signature", valid_595604
  var valid_595605 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595605 = validateParameter(valid_595605, JString, required = false,
                                 default = nil)
  if valid_595605 != nil:
    section.add "X-Amz-Content-Sha256", valid_595605
  var valid_595606 = header.getOrDefault("X-Amz-Date")
  valid_595606 = validateParameter(valid_595606, JString, required = false,
                                 default = nil)
  if valid_595606 != nil:
    section.add "X-Amz-Date", valid_595606
  var valid_595607 = header.getOrDefault("X-Amz-Credential")
  valid_595607 = validateParameter(valid_595607, JString, required = false,
                                 default = nil)
  if valid_595607 != nil:
    section.add "X-Amz-Credential", valid_595607
  var valid_595608 = header.getOrDefault("X-Amz-Security-Token")
  valid_595608 = validateParameter(valid_595608, JString, required = false,
                                 default = nil)
  if valid_595608 != nil:
    section.add "X-Amz-Security-Token", valid_595608
  var valid_595609 = header.getOrDefault("X-Amz-Algorithm")
  valid_595609 = validateParameter(valid_595609, JString, required = false,
                                 default = nil)
  if valid_595609 != nil:
    section.add "X-Amz-Algorithm", valid_595609
  var valid_595610 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595610 = validateParameter(valid_595610, JString, required = false,
                                 default = nil)
  if valid_595610 != nil:
    section.add "X-Amz-SignedHeaders", valid_595610
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595611: Call_GetDescribeOptionGroupOptions_595594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_595611.validator(path, query, header, formData, body)
  let scheme = call_595611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595611.url(scheme.get, call_595611.host, call_595611.base,
                         call_595611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595611, url, valid)

proc call*(call_595612: Call_GetDescribeOptionGroupOptions_595594;
          EngineName: string; Marker: string = "";
          Action: string = "DescribeOptionGroupOptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroupOptions
  ## Describes all available options.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  var query_595613 = newJObject()
  add(query_595613, "EngineName", newJString(EngineName))
  add(query_595613, "Marker", newJString(Marker))
  add(query_595613, "Action", newJString(Action))
  add(query_595613, "Version", newJString(Version))
  if Filters != nil:
    query_595613.add "Filters", Filters
  add(query_595613, "MaxRecords", newJInt(MaxRecords))
  add(query_595613, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_595612.call(nil, query_595613, nil, nil, nil)

var getDescribeOptionGroupOptions* = Call_GetDescribeOptionGroupOptions_595594(
    name: "getDescribeOptionGroupOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_GetDescribeOptionGroupOptions_595595, base: "/",
    url: url_GetDescribeOptionGroupOptions_595596,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroups_595656 = ref object of OpenApiRestCall_592348
proc url_PostDescribeOptionGroups_595658(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeOptionGroups_595657(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595659 = query.getOrDefault("Action")
  valid_595659 = validateParameter(valid_595659, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_595659 != nil:
    section.add "Action", valid_595659
  var valid_595660 = query.getOrDefault("Version")
  valid_595660 = validateParameter(valid_595660, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595660 != nil:
    section.add "Version", valid_595660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595661 = header.getOrDefault("X-Amz-Signature")
  valid_595661 = validateParameter(valid_595661, JString, required = false,
                                 default = nil)
  if valid_595661 != nil:
    section.add "X-Amz-Signature", valid_595661
  var valid_595662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595662 = validateParameter(valid_595662, JString, required = false,
                                 default = nil)
  if valid_595662 != nil:
    section.add "X-Amz-Content-Sha256", valid_595662
  var valid_595663 = header.getOrDefault("X-Amz-Date")
  valid_595663 = validateParameter(valid_595663, JString, required = false,
                                 default = nil)
  if valid_595663 != nil:
    section.add "X-Amz-Date", valid_595663
  var valid_595664 = header.getOrDefault("X-Amz-Credential")
  valid_595664 = validateParameter(valid_595664, JString, required = false,
                                 default = nil)
  if valid_595664 != nil:
    section.add "X-Amz-Credential", valid_595664
  var valid_595665 = header.getOrDefault("X-Amz-Security-Token")
  valid_595665 = validateParameter(valid_595665, JString, required = false,
                                 default = nil)
  if valid_595665 != nil:
    section.add "X-Amz-Security-Token", valid_595665
  var valid_595666 = header.getOrDefault("X-Amz-Algorithm")
  valid_595666 = validateParameter(valid_595666, JString, required = false,
                                 default = nil)
  if valid_595666 != nil:
    section.add "X-Amz-Algorithm", valid_595666
  var valid_595667 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595667 = validateParameter(valid_595667, JString, required = false,
                                 default = nil)
  if valid_595667 != nil:
    section.add "X-Amz-SignedHeaders", valid_595667
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595668 = formData.getOrDefault("MaxRecords")
  valid_595668 = validateParameter(valid_595668, JInt, required = false, default = nil)
  if valid_595668 != nil:
    section.add "MaxRecords", valid_595668
  var valid_595669 = formData.getOrDefault("Marker")
  valid_595669 = validateParameter(valid_595669, JString, required = false,
                                 default = nil)
  if valid_595669 != nil:
    section.add "Marker", valid_595669
  var valid_595670 = formData.getOrDefault("EngineName")
  valid_595670 = validateParameter(valid_595670, JString, required = false,
                                 default = nil)
  if valid_595670 != nil:
    section.add "EngineName", valid_595670
  var valid_595671 = formData.getOrDefault("MajorEngineVersion")
  valid_595671 = validateParameter(valid_595671, JString, required = false,
                                 default = nil)
  if valid_595671 != nil:
    section.add "MajorEngineVersion", valid_595671
  var valid_595672 = formData.getOrDefault("OptionGroupName")
  valid_595672 = validateParameter(valid_595672, JString, required = false,
                                 default = nil)
  if valid_595672 != nil:
    section.add "OptionGroupName", valid_595672
  var valid_595673 = formData.getOrDefault("Filters")
  valid_595673 = validateParameter(valid_595673, JArray, required = false,
                                 default = nil)
  if valid_595673 != nil:
    section.add "Filters", valid_595673
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595674: Call_PostDescribeOptionGroups_595656; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_595674.validator(path, query, header, formData, body)
  let scheme = call_595674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595674.url(scheme.get, call_595674.host, call_595674.base,
                         call_595674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595674, url, valid)

proc call*(call_595675: Call_PostDescribeOptionGroups_595656; MaxRecords: int = 0;
          Marker: string = ""; EngineName: string = ""; MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroups
  ## Describes the available option groups.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_595676 = newJObject()
  var formData_595677 = newJObject()
  add(formData_595677, "MaxRecords", newJInt(MaxRecords))
  add(formData_595677, "Marker", newJString(Marker))
  add(formData_595677, "EngineName", newJString(EngineName))
  add(formData_595677, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_595676, "Action", newJString(Action))
  add(formData_595677, "OptionGroupName", newJString(OptionGroupName))
  if Filters != nil:
    formData_595677.add "Filters", Filters
  add(query_595676, "Version", newJString(Version))
  result = call_595675.call(nil, query_595676, nil, formData_595677, nil)

var postDescribeOptionGroups* = Call_PostDescribeOptionGroups_595656(
    name: "postDescribeOptionGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_PostDescribeOptionGroups_595657, base: "/",
    url: url_PostDescribeOptionGroups_595658, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroups_595635 = ref object of OpenApiRestCall_592348
proc url_GetDescribeOptionGroups_595637(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeOptionGroups_595636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  section = newJObject()
  var valid_595638 = query.getOrDefault("EngineName")
  valid_595638 = validateParameter(valid_595638, JString, required = false,
                                 default = nil)
  if valid_595638 != nil:
    section.add "EngineName", valid_595638
  var valid_595639 = query.getOrDefault("Marker")
  valid_595639 = validateParameter(valid_595639, JString, required = false,
                                 default = nil)
  if valid_595639 != nil:
    section.add "Marker", valid_595639
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595640 = query.getOrDefault("Action")
  valid_595640 = validateParameter(valid_595640, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_595640 != nil:
    section.add "Action", valid_595640
  var valid_595641 = query.getOrDefault("OptionGroupName")
  valid_595641 = validateParameter(valid_595641, JString, required = false,
                                 default = nil)
  if valid_595641 != nil:
    section.add "OptionGroupName", valid_595641
  var valid_595642 = query.getOrDefault("Version")
  valid_595642 = validateParameter(valid_595642, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595642 != nil:
    section.add "Version", valid_595642
  var valid_595643 = query.getOrDefault("Filters")
  valid_595643 = validateParameter(valid_595643, JArray, required = false,
                                 default = nil)
  if valid_595643 != nil:
    section.add "Filters", valid_595643
  var valid_595644 = query.getOrDefault("MaxRecords")
  valid_595644 = validateParameter(valid_595644, JInt, required = false, default = nil)
  if valid_595644 != nil:
    section.add "MaxRecords", valid_595644
  var valid_595645 = query.getOrDefault("MajorEngineVersion")
  valid_595645 = validateParameter(valid_595645, JString, required = false,
                                 default = nil)
  if valid_595645 != nil:
    section.add "MajorEngineVersion", valid_595645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595646 = header.getOrDefault("X-Amz-Signature")
  valid_595646 = validateParameter(valid_595646, JString, required = false,
                                 default = nil)
  if valid_595646 != nil:
    section.add "X-Amz-Signature", valid_595646
  var valid_595647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595647 = validateParameter(valid_595647, JString, required = false,
                                 default = nil)
  if valid_595647 != nil:
    section.add "X-Amz-Content-Sha256", valid_595647
  var valid_595648 = header.getOrDefault("X-Amz-Date")
  valid_595648 = validateParameter(valid_595648, JString, required = false,
                                 default = nil)
  if valid_595648 != nil:
    section.add "X-Amz-Date", valid_595648
  var valid_595649 = header.getOrDefault("X-Amz-Credential")
  valid_595649 = validateParameter(valid_595649, JString, required = false,
                                 default = nil)
  if valid_595649 != nil:
    section.add "X-Amz-Credential", valid_595649
  var valid_595650 = header.getOrDefault("X-Amz-Security-Token")
  valid_595650 = validateParameter(valid_595650, JString, required = false,
                                 default = nil)
  if valid_595650 != nil:
    section.add "X-Amz-Security-Token", valid_595650
  var valid_595651 = header.getOrDefault("X-Amz-Algorithm")
  valid_595651 = validateParameter(valid_595651, JString, required = false,
                                 default = nil)
  if valid_595651 != nil:
    section.add "X-Amz-Algorithm", valid_595651
  var valid_595652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595652 = validateParameter(valid_595652, JString, required = false,
                                 default = nil)
  if valid_595652 != nil:
    section.add "X-Amz-SignedHeaders", valid_595652
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595653: Call_GetDescribeOptionGroups_595635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_595653.validator(path, query, header, formData, body)
  let scheme = call_595653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595653.url(scheme.get, call_595653.host, call_595653.base,
                         call_595653.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595653, url, valid)

proc call*(call_595654: Call_GetDescribeOptionGroups_595635;
          EngineName: string = ""; Marker: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroups
  ## Describes the available option groups.
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  var query_595655 = newJObject()
  add(query_595655, "EngineName", newJString(EngineName))
  add(query_595655, "Marker", newJString(Marker))
  add(query_595655, "Action", newJString(Action))
  add(query_595655, "OptionGroupName", newJString(OptionGroupName))
  add(query_595655, "Version", newJString(Version))
  if Filters != nil:
    query_595655.add "Filters", Filters
  add(query_595655, "MaxRecords", newJInt(MaxRecords))
  add(query_595655, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_595654.call(nil, query_595655, nil, nil, nil)

var getDescribeOptionGroups* = Call_GetDescribeOptionGroups_595635(
    name: "getDescribeOptionGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_GetDescribeOptionGroups_595636, base: "/",
    url: url_GetDescribeOptionGroups_595637, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_595701 = ref object of OpenApiRestCall_592348
proc url_PostDescribeOrderableDBInstanceOptions_595703(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_595702(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595704 = query.getOrDefault("Action")
  valid_595704 = validateParameter(valid_595704, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_595704 != nil:
    section.add "Action", valid_595704
  var valid_595705 = query.getOrDefault("Version")
  valid_595705 = validateParameter(valid_595705, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595705 != nil:
    section.add "Version", valid_595705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595706 = header.getOrDefault("X-Amz-Signature")
  valid_595706 = validateParameter(valid_595706, JString, required = false,
                                 default = nil)
  if valid_595706 != nil:
    section.add "X-Amz-Signature", valid_595706
  var valid_595707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595707 = validateParameter(valid_595707, JString, required = false,
                                 default = nil)
  if valid_595707 != nil:
    section.add "X-Amz-Content-Sha256", valid_595707
  var valid_595708 = header.getOrDefault("X-Amz-Date")
  valid_595708 = validateParameter(valid_595708, JString, required = false,
                                 default = nil)
  if valid_595708 != nil:
    section.add "X-Amz-Date", valid_595708
  var valid_595709 = header.getOrDefault("X-Amz-Credential")
  valid_595709 = validateParameter(valid_595709, JString, required = false,
                                 default = nil)
  if valid_595709 != nil:
    section.add "X-Amz-Credential", valid_595709
  var valid_595710 = header.getOrDefault("X-Amz-Security-Token")
  valid_595710 = validateParameter(valid_595710, JString, required = false,
                                 default = nil)
  if valid_595710 != nil:
    section.add "X-Amz-Security-Token", valid_595710
  var valid_595711 = header.getOrDefault("X-Amz-Algorithm")
  valid_595711 = validateParameter(valid_595711, JString, required = false,
                                 default = nil)
  if valid_595711 != nil:
    section.add "X-Amz-Algorithm", valid_595711
  var valid_595712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595712 = validateParameter(valid_595712, JString, required = false,
                                 default = nil)
  if valid_595712 != nil:
    section.add "X-Amz-SignedHeaders", valid_595712
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_595713 = formData.getOrDefault("DBInstanceClass")
  valid_595713 = validateParameter(valid_595713, JString, required = false,
                                 default = nil)
  if valid_595713 != nil:
    section.add "DBInstanceClass", valid_595713
  var valid_595714 = formData.getOrDefault("MaxRecords")
  valid_595714 = validateParameter(valid_595714, JInt, required = false, default = nil)
  if valid_595714 != nil:
    section.add "MaxRecords", valid_595714
  var valid_595715 = formData.getOrDefault("EngineVersion")
  valid_595715 = validateParameter(valid_595715, JString, required = false,
                                 default = nil)
  if valid_595715 != nil:
    section.add "EngineVersion", valid_595715
  var valid_595716 = formData.getOrDefault("Marker")
  valid_595716 = validateParameter(valid_595716, JString, required = false,
                                 default = nil)
  if valid_595716 != nil:
    section.add "Marker", valid_595716
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_595717 = formData.getOrDefault("Engine")
  valid_595717 = validateParameter(valid_595717, JString, required = true,
                                 default = nil)
  if valid_595717 != nil:
    section.add "Engine", valid_595717
  var valid_595718 = formData.getOrDefault("Vpc")
  valid_595718 = validateParameter(valid_595718, JBool, required = false, default = nil)
  if valid_595718 != nil:
    section.add "Vpc", valid_595718
  var valid_595719 = formData.getOrDefault("LicenseModel")
  valid_595719 = validateParameter(valid_595719, JString, required = false,
                                 default = nil)
  if valid_595719 != nil:
    section.add "LicenseModel", valid_595719
  var valid_595720 = formData.getOrDefault("Filters")
  valid_595720 = validateParameter(valid_595720, JArray, required = false,
                                 default = nil)
  if valid_595720 != nil:
    section.add "Filters", valid_595720
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595721: Call_PostDescribeOrderableDBInstanceOptions_595701;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_595721.validator(path, query, header, formData, body)
  let scheme = call_595721.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595721.url(scheme.get, call_595721.host, call_595721.base,
                         call_595721.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595721, url, valid)

proc call*(call_595722: Call_PostDescribeOrderableDBInstanceOptions_595701;
          Engine: string; DBInstanceClass: string = ""; MaxRecords: int = 0;
          EngineVersion: string = ""; Marker: string = ""; Vpc: bool = false;
          Action: string = "DescribeOrderableDBInstanceOptions";
          LicenseModel: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_595723 = newJObject()
  var formData_595724 = newJObject()
  add(formData_595724, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_595724, "MaxRecords", newJInt(MaxRecords))
  add(formData_595724, "EngineVersion", newJString(EngineVersion))
  add(formData_595724, "Marker", newJString(Marker))
  add(formData_595724, "Engine", newJString(Engine))
  add(formData_595724, "Vpc", newJBool(Vpc))
  add(query_595723, "Action", newJString(Action))
  add(formData_595724, "LicenseModel", newJString(LicenseModel))
  if Filters != nil:
    formData_595724.add "Filters", Filters
  add(query_595723, "Version", newJString(Version))
  result = call_595722.call(nil, query_595723, nil, formData_595724, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_595701(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_595702, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_595703,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_595678 = ref object of OpenApiRestCall_592348
proc url_GetDescribeOrderableDBInstanceOptions_595680(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_595679(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595681 = query.getOrDefault("Marker")
  valid_595681 = validateParameter(valid_595681, JString, required = false,
                                 default = nil)
  if valid_595681 != nil:
    section.add "Marker", valid_595681
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_595682 = query.getOrDefault("Engine")
  valid_595682 = validateParameter(valid_595682, JString, required = true,
                                 default = nil)
  if valid_595682 != nil:
    section.add "Engine", valid_595682
  var valid_595683 = query.getOrDefault("LicenseModel")
  valid_595683 = validateParameter(valid_595683, JString, required = false,
                                 default = nil)
  if valid_595683 != nil:
    section.add "LicenseModel", valid_595683
  var valid_595684 = query.getOrDefault("Vpc")
  valid_595684 = validateParameter(valid_595684, JBool, required = false, default = nil)
  if valid_595684 != nil:
    section.add "Vpc", valid_595684
  var valid_595685 = query.getOrDefault("EngineVersion")
  valid_595685 = validateParameter(valid_595685, JString, required = false,
                                 default = nil)
  if valid_595685 != nil:
    section.add "EngineVersion", valid_595685
  var valid_595686 = query.getOrDefault("Action")
  valid_595686 = validateParameter(valid_595686, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_595686 != nil:
    section.add "Action", valid_595686
  var valid_595687 = query.getOrDefault("Version")
  valid_595687 = validateParameter(valid_595687, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595687 != nil:
    section.add "Version", valid_595687
  var valid_595688 = query.getOrDefault("DBInstanceClass")
  valid_595688 = validateParameter(valid_595688, JString, required = false,
                                 default = nil)
  if valid_595688 != nil:
    section.add "DBInstanceClass", valid_595688
  var valid_595689 = query.getOrDefault("Filters")
  valid_595689 = validateParameter(valid_595689, JArray, required = false,
                                 default = nil)
  if valid_595689 != nil:
    section.add "Filters", valid_595689
  var valid_595690 = query.getOrDefault("MaxRecords")
  valid_595690 = validateParameter(valid_595690, JInt, required = false, default = nil)
  if valid_595690 != nil:
    section.add "MaxRecords", valid_595690
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595691 = header.getOrDefault("X-Amz-Signature")
  valid_595691 = validateParameter(valid_595691, JString, required = false,
                                 default = nil)
  if valid_595691 != nil:
    section.add "X-Amz-Signature", valid_595691
  var valid_595692 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595692 = validateParameter(valid_595692, JString, required = false,
                                 default = nil)
  if valid_595692 != nil:
    section.add "X-Amz-Content-Sha256", valid_595692
  var valid_595693 = header.getOrDefault("X-Amz-Date")
  valid_595693 = validateParameter(valid_595693, JString, required = false,
                                 default = nil)
  if valid_595693 != nil:
    section.add "X-Amz-Date", valid_595693
  var valid_595694 = header.getOrDefault("X-Amz-Credential")
  valid_595694 = validateParameter(valid_595694, JString, required = false,
                                 default = nil)
  if valid_595694 != nil:
    section.add "X-Amz-Credential", valid_595694
  var valid_595695 = header.getOrDefault("X-Amz-Security-Token")
  valid_595695 = validateParameter(valid_595695, JString, required = false,
                                 default = nil)
  if valid_595695 != nil:
    section.add "X-Amz-Security-Token", valid_595695
  var valid_595696 = header.getOrDefault("X-Amz-Algorithm")
  valid_595696 = validateParameter(valid_595696, JString, required = false,
                                 default = nil)
  if valid_595696 != nil:
    section.add "X-Amz-Algorithm", valid_595696
  var valid_595697 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595697 = validateParameter(valid_595697, JString, required = false,
                                 default = nil)
  if valid_595697 != nil:
    section.add "X-Amz-SignedHeaders", valid_595697
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595698: Call_GetDescribeOrderableDBInstanceOptions_595678;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_595698.validator(path, query, header, formData, body)
  let scheme = call_595698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595698.url(scheme.get, call_595698.host, call_595698.base,
                         call_595698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595698, url, valid)

proc call*(call_595699: Call_GetDescribeOrderableDBInstanceOptions_595678;
          Engine: string; Marker: string = ""; LicenseModel: string = "";
          Vpc: bool = false; EngineVersion: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595700 = newJObject()
  add(query_595700, "Marker", newJString(Marker))
  add(query_595700, "Engine", newJString(Engine))
  add(query_595700, "LicenseModel", newJString(LicenseModel))
  add(query_595700, "Vpc", newJBool(Vpc))
  add(query_595700, "EngineVersion", newJString(EngineVersion))
  add(query_595700, "Action", newJString(Action))
  add(query_595700, "Version", newJString(Version))
  add(query_595700, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_595700.add "Filters", Filters
  add(query_595700, "MaxRecords", newJInt(MaxRecords))
  result = call_595699.call(nil, query_595700, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_595678(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_595679, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_595680,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_595744 = ref object of OpenApiRestCall_592348
proc url_PostDescribePendingMaintenanceActions_595746(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_595745(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595747 = query.getOrDefault("Action")
  valid_595747 = validateParameter(valid_595747, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_595747 != nil:
    section.add "Action", valid_595747
  var valid_595748 = query.getOrDefault("Version")
  valid_595748 = validateParameter(valid_595748, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595748 != nil:
    section.add "Version", valid_595748
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595749 = header.getOrDefault("X-Amz-Signature")
  valid_595749 = validateParameter(valid_595749, JString, required = false,
                                 default = nil)
  if valid_595749 != nil:
    section.add "X-Amz-Signature", valid_595749
  var valid_595750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595750 = validateParameter(valid_595750, JString, required = false,
                                 default = nil)
  if valid_595750 != nil:
    section.add "X-Amz-Content-Sha256", valid_595750
  var valid_595751 = header.getOrDefault("X-Amz-Date")
  valid_595751 = validateParameter(valid_595751, JString, required = false,
                                 default = nil)
  if valid_595751 != nil:
    section.add "X-Amz-Date", valid_595751
  var valid_595752 = header.getOrDefault("X-Amz-Credential")
  valid_595752 = validateParameter(valid_595752, JString, required = false,
                                 default = nil)
  if valid_595752 != nil:
    section.add "X-Amz-Credential", valid_595752
  var valid_595753 = header.getOrDefault("X-Amz-Security-Token")
  valid_595753 = validateParameter(valid_595753, JString, required = false,
                                 default = nil)
  if valid_595753 != nil:
    section.add "X-Amz-Security-Token", valid_595753
  var valid_595754 = header.getOrDefault("X-Amz-Algorithm")
  valid_595754 = validateParameter(valid_595754, JString, required = false,
                                 default = nil)
  if valid_595754 != nil:
    section.add "X-Amz-Algorithm", valid_595754
  var valid_595755 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595755 = validateParameter(valid_595755, JString, required = false,
                                 default = nil)
  if valid_595755 != nil:
    section.add "X-Amz-SignedHeaders", valid_595755
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_595756 = formData.getOrDefault("MaxRecords")
  valid_595756 = validateParameter(valid_595756, JInt, required = false, default = nil)
  if valid_595756 != nil:
    section.add "MaxRecords", valid_595756
  var valid_595757 = formData.getOrDefault("Marker")
  valid_595757 = validateParameter(valid_595757, JString, required = false,
                                 default = nil)
  if valid_595757 != nil:
    section.add "Marker", valid_595757
  var valid_595758 = formData.getOrDefault("ResourceIdentifier")
  valid_595758 = validateParameter(valid_595758, JString, required = false,
                                 default = nil)
  if valid_595758 != nil:
    section.add "ResourceIdentifier", valid_595758
  var valid_595759 = formData.getOrDefault("Filters")
  valid_595759 = validateParameter(valid_595759, JArray, required = false,
                                 default = nil)
  if valid_595759 != nil:
    section.add "Filters", valid_595759
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595760: Call_PostDescribePendingMaintenanceActions_595744;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_595760.validator(path, query, header, formData, body)
  let scheme = call_595760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595760.url(scheme.get, call_595760.host, call_595760.base,
                         call_595760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595760, url, valid)

proc call*(call_595761: Call_PostDescribePendingMaintenanceActions_595744;
          MaxRecords: int = 0; Marker: string = ""; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_595762 = newJObject()
  var formData_595763 = newJObject()
  add(formData_595763, "MaxRecords", newJInt(MaxRecords))
  add(formData_595763, "Marker", newJString(Marker))
  add(formData_595763, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_595762, "Action", newJString(Action))
  if Filters != nil:
    formData_595763.add "Filters", Filters
  add(query_595762, "Version", newJString(Version))
  result = call_595761.call(nil, query_595762, nil, formData_595763, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_595744(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_595745, base: "/",
    url: url_PostDescribePendingMaintenanceActions_595746,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_595725 = ref object of OpenApiRestCall_592348
proc url_GetDescribePendingMaintenanceActions_595727(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_595726(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595728 = query.getOrDefault("ResourceIdentifier")
  valid_595728 = validateParameter(valid_595728, JString, required = false,
                                 default = nil)
  if valid_595728 != nil:
    section.add "ResourceIdentifier", valid_595728
  var valid_595729 = query.getOrDefault("Marker")
  valid_595729 = validateParameter(valid_595729, JString, required = false,
                                 default = nil)
  if valid_595729 != nil:
    section.add "Marker", valid_595729
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595730 = query.getOrDefault("Action")
  valid_595730 = validateParameter(valid_595730, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_595730 != nil:
    section.add "Action", valid_595730
  var valid_595731 = query.getOrDefault("Version")
  valid_595731 = validateParameter(valid_595731, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595731 != nil:
    section.add "Version", valid_595731
  var valid_595732 = query.getOrDefault("Filters")
  valid_595732 = validateParameter(valid_595732, JArray, required = false,
                                 default = nil)
  if valid_595732 != nil:
    section.add "Filters", valid_595732
  var valid_595733 = query.getOrDefault("MaxRecords")
  valid_595733 = validateParameter(valid_595733, JInt, required = false, default = nil)
  if valid_595733 != nil:
    section.add "MaxRecords", valid_595733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595734 = header.getOrDefault("X-Amz-Signature")
  valid_595734 = validateParameter(valid_595734, JString, required = false,
                                 default = nil)
  if valid_595734 != nil:
    section.add "X-Amz-Signature", valid_595734
  var valid_595735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595735 = validateParameter(valid_595735, JString, required = false,
                                 default = nil)
  if valid_595735 != nil:
    section.add "X-Amz-Content-Sha256", valid_595735
  var valid_595736 = header.getOrDefault("X-Amz-Date")
  valid_595736 = validateParameter(valid_595736, JString, required = false,
                                 default = nil)
  if valid_595736 != nil:
    section.add "X-Amz-Date", valid_595736
  var valid_595737 = header.getOrDefault("X-Amz-Credential")
  valid_595737 = validateParameter(valid_595737, JString, required = false,
                                 default = nil)
  if valid_595737 != nil:
    section.add "X-Amz-Credential", valid_595737
  var valid_595738 = header.getOrDefault("X-Amz-Security-Token")
  valid_595738 = validateParameter(valid_595738, JString, required = false,
                                 default = nil)
  if valid_595738 != nil:
    section.add "X-Amz-Security-Token", valid_595738
  var valid_595739 = header.getOrDefault("X-Amz-Algorithm")
  valid_595739 = validateParameter(valid_595739, JString, required = false,
                                 default = nil)
  if valid_595739 != nil:
    section.add "X-Amz-Algorithm", valid_595739
  var valid_595740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595740 = validateParameter(valid_595740, JString, required = false,
                                 default = nil)
  if valid_595740 != nil:
    section.add "X-Amz-SignedHeaders", valid_595740
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595741: Call_GetDescribePendingMaintenanceActions_595725;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_595741.validator(path, query, header, formData, body)
  let scheme = call_595741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595741.url(scheme.get, call_595741.host, call_595741.base,
                         call_595741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595741, url, valid)

proc call*(call_595742: Call_GetDescribePendingMaintenanceActions_595725;
          ResourceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595743 = newJObject()
  add(query_595743, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_595743, "Marker", newJString(Marker))
  add(query_595743, "Action", newJString(Action))
  add(query_595743, "Version", newJString(Version))
  if Filters != nil:
    query_595743.add "Filters", Filters
  add(query_595743, "MaxRecords", newJInt(MaxRecords))
  result = call_595742.call(nil, query_595743, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_595725(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_595726, base: "/",
    url: url_GetDescribePendingMaintenanceActions_595727,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstances_595790 = ref object of OpenApiRestCall_592348
proc url_PostDescribeReservedDBInstances_595792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedDBInstances_595791(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595793 = query.getOrDefault("Action")
  valid_595793 = validateParameter(valid_595793, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_595793 != nil:
    section.add "Action", valid_595793
  var valid_595794 = query.getOrDefault("Version")
  valid_595794 = validateParameter(valid_595794, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595794 != nil:
    section.add "Version", valid_595794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595795 = header.getOrDefault("X-Amz-Signature")
  valid_595795 = validateParameter(valid_595795, JString, required = false,
                                 default = nil)
  if valid_595795 != nil:
    section.add "X-Amz-Signature", valid_595795
  var valid_595796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595796 = validateParameter(valid_595796, JString, required = false,
                                 default = nil)
  if valid_595796 != nil:
    section.add "X-Amz-Content-Sha256", valid_595796
  var valid_595797 = header.getOrDefault("X-Amz-Date")
  valid_595797 = validateParameter(valid_595797, JString, required = false,
                                 default = nil)
  if valid_595797 != nil:
    section.add "X-Amz-Date", valid_595797
  var valid_595798 = header.getOrDefault("X-Amz-Credential")
  valid_595798 = validateParameter(valid_595798, JString, required = false,
                                 default = nil)
  if valid_595798 != nil:
    section.add "X-Amz-Credential", valid_595798
  var valid_595799 = header.getOrDefault("X-Amz-Security-Token")
  valid_595799 = validateParameter(valid_595799, JString, required = false,
                                 default = nil)
  if valid_595799 != nil:
    section.add "X-Amz-Security-Token", valid_595799
  var valid_595800 = header.getOrDefault("X-Amz-Algorithm")
  valid_595800 = validateParameter(valid_595800, JString, required = false,
                                 default = nil)
  if valid_595800 != nil:
    section.add "X-Amz-Algorithm", valid_595800
  var valid_595801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595801 = validateParameter(valid_595801, JString, required = false,
                                 default = nil)
  if valid_595801 != nil:
    section.add "X-Amz-SignedHeaders", valid_595801
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_595802 = formData.getOrDefault("DBInstanceClass")
  valid_595802 = validateParameter(valid_595802, JString, required = false,
                                 default = nil)
  if valid_595802 != nil:
    section.add "DBInstanceClass", valid_595802
  var valid_595803 = formData.getOrDefault("MultiAZ")
  valid_595803 = validateParameter(valid_595803, JBool, required = false, default = nil)
  if valid_595803 != nil:
    section.add "MultiAZ", valid_595803
  var valid_595804 = formData.getOrDefault("MaxRecords")
  valid_595804 = validateParameter(valid_595804, JInt, required = false, default = nil)
  if valid_595804 != nil:
    section.add "MaxRecords", valid_595804
  var valid_595805 = formData.getOrDefault("LeaseId")
  valid_595805 = validateParameter(valid_595805, JString, required = false,
                                 default = nil)
  if valid_595805 != nil:
    section.add "LeaseId", valid_595805
  var valid_595806 = formData.getOrDefault("ReservedDBInstanceId")
  valid_595806 = validateParameter(valid_595806, JString, required = false,
                                 default = nil)
  if valid_595806 != nil:
    section.add "ReservedDBInstanceId", valid_595806
  var valid_595807 = formData.getOrDefault("Marker")
  valid_595807 = validateParameter(valid_595807, JString, required = false,
                                 default = nil)
  if valid_595807 != nil:
    section.add "Marker", valid_595807
  var valid_595808 = formData.getOrDefault("Duration")
  valid_595808 = validateParameter(valid_595808, JString, required = false,
                                 default = nil)
  if valid_595808 != nil:
    section.add "Duration", valid_595808
  var valid_595809 = formData.getOrDefault("OfferingType")
  valid_595809 = validateParameter(valid_595809, JString, required = false,
                                 default = nil)
  if valid_595809 != nil:
    section.add "OfferingType", valid_595809
  var valid_595810 = formData.getOrDefault("ProductDescription")
  valid_595810 = validateParameter(valid_595810, JString, required = false,
                                 default = nil)
  if valid_595810 != nil:
    section.add "ProductDescription", valid_595810
  var valid_595811 = formData.getOrDefault("Filters")
  valid_595811 = validateParameter(valid_595811, JArray, required = false,
                                 default = nil)
  if valid_595811 != nil:
    section.add "Filters", valid_595811
  var valid_595812 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_595812 = validateParameter(valid_595812, JString, required = false,
                                 default = nil)
  if valid_595812 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_595812
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595813: Call_PostDescribeReservedDBInstances_595790;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_595813.validator(path, query, header, formData, body)
  let scheme = call_595813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595813.url(scheme.get, call_595813.host, call_595813.base,
                         call_595813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595813, url, valid)

proc call*(call_595814: Call_PostDescribeReservedDBInstances_595790;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          LeaseId: string = ""; ReservedDBInstanceId: string = ""; Marker: string = "";
          Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstances"; Filters: JsonNode = nil;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  var query_595815 = newJObject()
  var formData_595816 = newJObject()
  add(formData_595816, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_595816, "MultiAZ", newJBool(MultiAZ))
  add(formData_595816, "MaxRecords", newJInt(MaxRecords))
  add(formData_595816, "LeaseId", newJString(LeaseId))
  add(formData_595816, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(formData_595816, "Marker", newJString(Marker))
  add(formData_595816, "Duration", newJString(Duration))
  add(formData_595816, "OfferingType", newJString(OfferingType))
  add(formData_595816, "ProductDescription", newJString(ProductDescription))
  add(query_595815, "Action", newJString(Action))
  if Filters != nil:
    formData_595816.add "Filters", Filters
  add(formData_595816, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_595815, "Version", newJString(Version))
  result = call_595814.call(nil, query_595815, nil, formData_595816, nil)

var postDescribeReservedDBInstances* = Call_PostDescribeReservedDBInstances_595790(
    name: "postDescribeReservedDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_PostDescribeReservedDBInstances_595791, base: "/",
    url: url_PostDescribeReservedDBInstances_595792,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstances_595764 = ref object of OpenApiRestCall_592348
proc url_GetDescribeReservedDBInstances_595766(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedDBInstances_595765(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595767 = query.getOrDefault("Marker")
  valid_595767 = validateParameter(valid_595767, JString, required = false,
                                 default = nil)
  if valid_595767 != nil:
    section.add "Marker", valid_595767
  var valid_595768 = query.getOrDefault("ProductDescription")
  valid_595768 = validateParameter(valid_595768, JString, required = false,
                                 default = nil)
  if valid_595768 != nil:
    section.add "ProductDescription", valid_595768
  var valid_595769 = query.getOrDefault("OfferingType")
  valid_595769 = validateParameter(valid_595769, JString, required = false,
                                 default = nil)
  if valid_595769 != nil:
    section.add "OfferingType", valid_595769
  var valid_595770 = query.getOrDefault("ReservedDBInstanceId")
  valid_595770 = validateParameter(valid_595770, JString, required = false,
                                 default = nil)
  if valid_595770 != nil:
    section.add "ReservedDBInstanceId", valid_595770
  var valid_595771 = query.getOrDefault("LeaseId")
  valid_595771 = validateParameter(valid_595771, JString, required = false,
                                 default = nil)
  if valid_595771 != nil:
    section.add "LeaseId", valid_595771
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595772 = query.getOrDefault("Action")
  valid_595772 = validateParameter(valid_595772, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_595772 != nil:
    section.add "Action", valid_595772
  var valid_595773 = query.getOrDefault("MultiAZ")
  valid_595773 = validateParameter(valid_595773, JBool, required = false, default = nil)
  if valid_595773 != nil:
    section.add "MultiAZ", valid_595773
  var valid_595774 = query.getOrDefault("Duration")
  valid_595774 = validateParameter(valid_595774, JString, required = false,
                                 default = nil)
  if valid_595774 != nil:
    section.add "Duration", valid_595774
  var valid_595775 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_595775 = validateParameter(valid_595775, JString, required = false,
                                 default = nil)
  if valid_595775 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_595775
  var valid_595776 = query.getOrDefault("Version")
  valid_595776 = validateParameter(valid_595776, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595776 != nil:
    section.add "Version", valid_595776
  var valid_595777 = query.getOrDefault("DBInstanceClass")
  valid_595777 = validateParameter(valid_595777, JString, required = false,
                                 default = nil)
  if valid_595777 != nil:
    section.add "DBInstanceClass", valid_595777
  var valid_595778 = query.getOrDefault("Filters")
  valid_595778 = validateParameter(valid_595778, JArray, required = false,
                                 default = nil)
  if valid_595778 != nil:
    section.add "Filters", valid_595778
  var valid_595779 = query.getOrDefault("MaxRecords")
  valid_595779 = validateParameter(valid_595779, JInt, required = false, default = nil)
  if valid_595779 != nil:
    section.add "MaxRecords", valid_595779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595780 = header.getOrDefault("X-Amz-Signature")
  valid_595780 = validateParameter(valid_595780, JString, required = false,
                                 default = nil)
  if valid_595780 != nil:
    section.add "X-Amz-Signature", valid_595780
  var valid_595781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595781 = validateParameter(valid_595781, JString, required = false,
                                 default = nil)
  if valid_595781 != nil:
    section.add "X-Amz-Content-Sha256", valid_595781
  var valid_595782 = header.getOrDefault("X-Amz-Date")
  valid_595782 = validateParameter(valid_595782, JString, required = false,
                                 default = nil)
  if valid_595782 != nil:
    section.add "X-Amz-Date", valid_595782
  var valid_595783 = header.getOrDefault("X-Amz-Credential")
  valid_595783 = validateParameter(valid_595783, JString, required = false,
                                 default = nil)
  if valid_595783 != nil:
    section.add "X-Amz-Credential", valid_595783
  var valid_595784 = header.getOrDefault("X-Amz-Security-Token")
  valid_595784 = validateParameter(valid_595784, JString, required = false,
                                 default = nil)
  if valid_595784 != nil:
    section.add "X-Amz-Security-Token", valid_595784
  var valid_595785 = header.getOrDefault("X-Amz-Algorithm")
  valid_595785 = validateParameter(valid_595785, JString, required = false,
                                 default = nil)
  if valid_595785 != nil:
    section.add "X-Amz-Algorithm", valid_595785
  var valid_595786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595786 = validateParameter(valid_595786, JString, required = false,
                                 default = nil)
  if valid_595786 != nil:
    section.add "X-Amz-SignedHeaders", valid_595786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595787: Call_GetDescribeReservedDBInstances_595764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_595787.validator(path, query, header, formData, body)
  let scheme = call_595787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595787.url(scheme.get, call_595787.host, call_595787.base,
                         call_595787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595787, url, valid)

proc call*(call_595788: Call_GetDescribeReservedDBInstances_595764;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; ReservedDBInstanceId: string = "";
          LeaseId: string = ""; Action: string = "DescribeReservedDBInstances";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595789 = newJObject()
  add(query_595789, "Marker", newJString(Marker))
  add(query_595789, "ProductDescription", newJString(ProductDescription))
  add(query_595789, "OfferingType", newJString(OfferingType))
  add(query_595789, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_595789, "LeaseId", newJString(LeaseId))
  add(query_595789, "Action", newJString(Action))
  add(query_595789, "MultiAZ", newJBool(MultiAZ))
  add(query_595789, "Duration", newJString(Duration))
  add(query_595789, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_595789, "Version", newJString(Version))
  add(query_595789, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_595789.add "Filters", Filters
  add(query_595789, "MaxRecords", newJInt(MaxRecords))
  result = call_595788.call(nil, query_595789, nil, nil, nil)

var getDescribeReservedDBInstances* = Call_GetDescribeReservedDBInstances_595764(
    name: "getDescribeReservedDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_GetDescribeReservedDBInstances_595765, base: "/",
    url: url_GetDescribeReservedDBInstances_595766,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstancesOfferings_595841 = ref object of OpenApiRestCall_592348
proc url_PostDescribeReservedDBInstancesOfferings_595843(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedDBInstancesOfferings_595842(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595844 = query.getOrDefault("Action")
  valid_595844 = validateParameter(valid_595844, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_595844 != nil:
    section.add "Action", valid_595844
  var valid_595845 = query.getOrDefault("Version")
  valid_595845 = validateParameter(valid_595845, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595845 != nil:
    section.add "Version", valid_595845
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595846 = header.getOrDefault("X-Amz-Signature")
  valid_595846 = validateParameter(valid_595846, JString, required = false,
                                 default = nil)
  if valid_595846 != nil:
    section.add "X-Amz-Signature", valid_595846
  var valid_595847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595847 = validateParameter(valid_595847, JString, required = false,
                                 default = nil)
  if valid_595847 != nil:
    section.add "X-Amz-Content-Sha256", valid_595847
  var valid_595848 = header.getOrDefault("X-Amz-Date")
  valid_595848 = validateParameter(valid_595848, JString, required = false,
                                 default = nil)
  if valid_595848 != nil:
    section.add "X-Amz-Date", valid_595848
  var valid_595849 = header.getOrDefault("X-Amz-Credential")
  valid_595849 = validateParameter(valid_595849, JString, required = false,
                                 default = nil)
  if valid_595849 != nil:
    section.add "X-Amz-Credential", valid_595849
  var valid_595850 = header.getOrDefault("X-Amz-Security-Token")
  valid_595850 = validateParameter(valid_595850, JString, required = false,
                                 default = nil)
  if valid_595850 != nil:
    section.add "X-Amz-Security-Token", valid_595850
  var valid_595851 = header.getOrDefault("X-Amz-Algorithm")
  valid_595851 = validateParameter(valid_595851, JString, required = false,
                                 default = nil)
  if valid_595851 != nil:
    section.add "X-Amz-Algorithm", valid_595851
  var valid_595852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595852 = validateParameter(valid_595852, JString, required = false,
                                 default = nil)
  if valid_595852 != nil:
    section.add "X-Amz-SignedHeaders", valid_595852
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_595853 = formData.getOrDefault("DBInstanceClass")
  valid_595853 = validateParameter(valid_595853, JString, required = false,
                                 default = nil)
  if valid_595853 != nil:
    section.add "DBInstanceClass", valid_595853
  var valid_595854 = formData.getOrDefault("MultiAZ")
  valid_595854 = validateParameter(valid_595854, JBool, required = false, default = nil)
  if valid_595854 != nil:
    section.add "MultiAZ", valid_595854
  var valid_595855 = formData.getOrDefault("MaxRecords")
  valid_595855 = validateParameter(valid_595855, JInt, required = false, default = nil)
  if valid_595855 != nil:
    section.add "MaxRecords", valid_595855
  var valid_595856 = formData.getOrDefault("Marker")
  valid_595856 = validateParameter(valid_595856, JString, required = false,
                                 default = nil)
  if valid_595856 != nil:
    section.add "Marker", valid_595856
  var valid_595857 = formData.getOrDefault("Duration")
  valid_595857 = validateParameter(valid_595857, JString, required = false,
                                 default = nil)
  if valid_595857 != nil:
    section.add "Duration", valid_595857
  var valid_595858 = formData.getOrDefault("OfferingType")
  valid_595858 = validateParameter(valid_595858, JString, required = false,
                                 default = nil)
  if valid_595858 != nil:
    section.add "OfferingType", valid_595858
  var valid_595859 = formData.getOrDefault("ProductDescription")
  valid_595859 = validateParameter(valid_595859, JString, required = false,
                                 default = nil)
  if valid_595859 != nil:
    section.add "ProductDescription", valid_595859
  var valid_595860 = formData.getOrDefault("Filters")
  valid_595860 = validateParameter(valid_595860, JArray, required = false,
                                 default = nil)
  if valid_595860 != nil:
    section.add "Filters", valid_595860
  var valid_595861 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_595861 = validateParameter(valid_595861, JString, required = false,
                                 default = nil)
  if valid_595861 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_595861
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595862: Call_PostDescribeReservedDBInstancesOfferings_595841;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_595862.validator(path, query, header, formData, body)
  let scheme = call_595862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595862.url(scheme.get, call_595862.host, call_595862.base,
                         call_595862.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595862, url, valid)

proc call*(call_595863: Call_PostDescribeReservedDBInstancesOfferings_595841;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          Marker: string = ""; Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          Filters: JsonNode = nil; ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_595864 = newJObject()
  var formData_595865 = newJObject()
  add(formData_595865, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_595865, "MultiAZ", newJBool(MultiAZ))
  add(formData_595865, "MaxRecords", newJInt(MaxRecords))
  add(formData_595865, "Marker", newJString(Marker))
  add(formData_595865, "Duration", newJString(Duration))
  add(formData_595865, "OfferingType", newJString(OfferingType))
  add(formData_595865, "ProductDescription", newJString(ProductDescription))
  add(query_595864, "Action", newJString(Action))
  if Filters != nil:
    formData_595865.add "Filters", Filters
  add(formData_595865, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_595864, "Version", newJString(Version))
  result = call_595863.call(nil, query_595864, nil, formData_595865, nil)

var postDescribeReservedDBInstancesOfferings* = Call_PostDescribeReservedDBInstancesOfferings_595841(
    name: "postDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_PostDescribeReservedDBInstancesOfferings_595842,
    base: "/", url: url_PostDescribeReservedDBInstancesOfferings_595843,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstancesOfferings_595817 = ref object of OpenApiRestCall_592348
proc url_GetDescribeReservedDBInstancesOfferings_595819(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedDBInstancesOfferings_595818(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595820 = query.getOrDefault("Marker")
  valid_595820 = validateParameter(valid_595820, JString, required = false,
                                 default = nil)
  if valid_595820 != nil:
    section.add "Marker", valid_595820
  var valid_595821 = query.getOrDefault("ProductDescription")
  valid_595821 = validateParameter(valid_595821, JString, required = false,
                                 default = nil)
  if valid_595821 != nil:
    section.add "ProductDescription", valid_595821
  var valid_595822 = query.getOrDefault("OfferingType")
  valid_595822 = validateParameter(valid_595822, JString, required = false,
                                 default = nil)
  if valid_595822 != nil:
    section.add "OfferingType", valid_595822
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595823 = query.getOrDefault("Action")
  valid_595823 = validateParameter(valid_595823, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_595823 != nil:
    section.add "Action", valid_595823
  var valid_595824 = query.getOrDefault("MultiAZ")
  valid_595824 = validateParameter(valid_595824, JBool, required = false, default = nil)
  if valid_595824 != nil:
    section.add "MultiAZ", valid_595824
  var valid_595825 = query.getOrDefault("Duration")
  valid_595825 = validateParameter(valid_595825, JString, required = false,
                                 default = nil)
  if valid_595825 != nil:
    section.add "Duration", valid_595825
  var valid_595826 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_595826 = validateParameter(valid_595826, JString, required = false,
                                 default = nil)
  if valid_595826 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_595826
  var valid_595827 = query.getOrDefault("Version")
  valid_595827 = validateParameter(valid_595827, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595827 != nil:
    section.add "Version", valid_595827
  var valid_595828 = query.getOrDefault("DBInstanceClass")
  valid_595828 = validateParameter(valid_595828, JString, required = false,
                                 default = nil)
  if valid_595828 != nil:
    section.add "DBInstanceClass", valid_595828
  var valid_595829 = query.getOrDefault("Filters")
  valid_595829 = validateParameter(valid_595829, JArray, required = false,
                                 default = nil)
  if valid_595829 != nil:
    section.add "Filters", valid_595829
  var valid_595830 = query.getOrDefault("MaxRecords")
  valid_595830 = validateParameter(valid_595830, JInt, required = false, default = nil)
  if valid_595830 != nil:
    section.add "MaxRecords", valid_595830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595831 = header.getOrDefault("X-Amz-Signature")
  valid_595831 = validateParameter(valid_595831, JString, required = false,
                                 default = nil)
  if valid_595831 != nil:
    section.add "X-Amz-Signature", valid_595831
  var valid_595832 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595832 = validateParameter(valid_595832, JString, required = false,
                                 default = nil)
  if valid_595832 != nil:
    section.add "X-Amz-Content-Sha256", valid_595832
  var valid_595833 = header.getOrDefault("X-Amz-Date")
  valid_595833 = validateParameter(valid_595833, JString, required = false,
                                 default = nil)
  if valid_595833 != nil:
    section.add "X-Amz-Date", valid_595833
  var valid_595834 = header.getOrDefault("X-Amz-Credential")
  valid_595834 = validateParameter(valid_595834, JString, required = false,
                                 default = nil)
  if valid_595834 != nil:
    section.add "X-Amz-Credential", valid_595834
  var valid_595835 = header.getOrDefault("X-Amz-Security-Token")
  valid_595835 = validateParameter(valid_595835, JString, required = false,
                                 default = nil)
  if valid_595835 != nil:
    section.add "X-Amz-Security-Token", valid_595835
  var valid_595836 = header.getOrDefault("X-Amz-Algorithm")
  valid_595836 = validateParameter(valid_595836, JString, required = false,
                                 default = nil)
  if valid_595836 != nil:
    section.add "X-Amz-Algorithm", valid_595836
  var valid_595837 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595837 = validateParameter(valid_595837, JString, required = false,
                                 default = nil)
  if valid_595837 != nil:
    section.add "X-Amz-SignedHeaders", valid_595837
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595838: Call_GetDescribeReservedDBInstancesOfferings_595817;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_595838.validator(path, query, header, formData, body)
  let scheme = call_595838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595838.url(scheme.get, call_595838.host, call_595838.base,
                         call_595838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595838, url, valid)

proc call*(call_595839: Call_GetDescribeReservedDBInstancesOfferings_595817;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595840 = newJObject()
  add(query_595840, "Marker", newJString(Marker))
  add(query_595840, "ProductDescription", newJString(ProductDescription))
  add(query_595840, "OfferingType", newJString(OfferingType))
  add(query_595840, "Action", newJString(Action))
  add(query_595840, "MultiAZ", newJBool(MultiAZ))
  add(query_595840, "Duration", newJString(Duration))
  add(query_595840, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_595840, "Version", newJString(Version))
  add(query_595840, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_595840.add "Filters", Filters
  add(query_595840, "MaxRecords", newJInt(MaxRecords))
  result = call_595839.call(nil, query_595840, nil, nil, nil)

var getDescribeReservedDBInstancesOfferings* = Call_GetDescribeReservedDBInstancesOfferings_595817(
    name: "getDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_GetDescribeReservedDBInstancesOfferings_595818, base: "/",
    url: url_GetDescribeReservedDBInstancesOfferings_595819,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSourceRegions_595885 = ref object of OpenApiRestCall_592348
proc url_PostDescribeSourceRegions_595887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeSourceRegions_595886(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595888 = query.getOrDefault("Action")
  valid_595888 = validateParameter(valid_595888, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_595888 != nil:
    section.add "Action", valid_595888
  var valid_595889 = query.getOrDefault("Version")
  valid_595889 = validateParameter(valid_595889, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595889 != nil:
    section.add "Version", valid_595889
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595890 = header.getOrDefault("X-Amz-Signature")
  valid_595890 = validateParameter(valid_595890, JString, required = false,
                                 default = nil)
  if valid_595890 != nil:
    section.add "X-Amz-Signature", valid_595890
  var valid_595891 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595891 = validateParameter(valid_595891, JString, required = false,
                                 default = nil)
  if valid_595891 != nil:
    section.add "X-Amz-Content-Sha256", valid_595891
  var valid_595892 = header.getOrDefault("X-Amz-Date")
  valid_595892 = validateParameter(valid_595892, JString, required = false,
                                 default = nil)
  if valid_595892 != nil:
    section.add "X-Amz-Date", valid_595892
  var valid_595893 = header.getOrDefault("X-Amz-Credential")
  valid_595893 = validateParameter(valid_595893, JString, required = false,
                                 default = nil)
  if valid_595893 != nil:
    section.add "X-Amz-Credential", valid_595893
  var valid_595894 = header.getOrDefault("X-Amz-Security-Token")
  valid_595894 = validateParameter(valid_595894, JString, required = false,
                                 default = nil)
  if valid_595894 != nil:
    section.add "X-Amz-Security-Token", valid_595894
  var valid_595895 = header.getOrDefault("X-Amz-Algorithm")
  valid_595895 = validateParameter(valid_595895, JString, required = false,
                                 default = nil)
  if valid_595895 != nil:
    section.add "X-Amz-Algorithm", valid_595895
  var valid_595896 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595896 = validateParameter(valid_595896, JString, required = false,
                                 default = nil)
  if valid_595896 != nil:
    section.add "X-Amz-SignedHeaders", valid_595896
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  section = newJObject()
  var valid_595897 = formData.getOrDefault("MaxRecords")
  valid_595897 = validateParameter(valid_595897, JInt, required = false, default = nil)
  if valid_595897 != nil:
    section.add "MaxRecords", valid_595897
  var valid_595898 = formData.getOrDefault("Marker")
  valid_595898 = validateParameter(valid_595898, JString, required = false,
                                 default = nil)
  if valid_595898 != nil:
    section.add "Marker", valid_595898
  var valid_595899 = formData.getOrDefault("Filters")
  valid_595899 = validateParameter(valid_595899, JArray, required = false,
                                 default = nil)
  if valid_595899 != nil:
    section.add "Filters", valid_595899
  var valid_595900 = formData.getOrDefault("RegionName")
  valid_595900 = validateParameter(valid_595900, JString, required = false,
                                 default = nil)
  if valid_595900 != nil:
    section.add "RegionName", valid_595900
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595901: Call_PostDescribeSourceRegions_595885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_595901.validator(path, query, header, formData, body)
  let scheme = call_595901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595901.url(scheme.get, call_595901.host, call_595901.base,
                         call_595901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595901, url, valid)

proc call*(call_595902: Call_PostDescribeSourceRegions_595885; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeSourceRegions";
          Filters: JsonNode = nil; Version: string = "2014-10-31";
          RegionName: string = ""): Recallable =
  ## postDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  var query_595903 = newJObject()
  var formData_595904 = newJObject()
  add(formData_595904, "MaxRecords", newJInt(MaxRecords))
  add(formData_595904, "Marker", newJString(Marker))
  add(query_595903, "Action", newJString(Action))
  if Filters != nil:
    formData_595904.add "Filters", Filters
  add(query_595903, "Version", newJString(Version))
  add(formData_595904, "RegionName", newJString(RegionName))
  result = call_595902.call(nil, query_595903, nil, formData_595904, nil)

var postDescribeSourceRegions* = Call_PostDescribeSourceRegions_595885(
    name: "postDescribeSourceRegions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_PostDescribeSourceRegions_595886, base: "/",
    url: url_PostDescribeSourceRegions_595887,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSourceRegions_595866 = ref object of OpenApiRestCall_592348
proc url_GetDescribeSourceRegions_595868(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeSourceRegions_595867(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_595869 = query.getOrDefault("Marker")
  valid_595869 = validateParameter(valid_595869, JString, required = false,
                                 default = nil)
  if valid_595869 != nil:
    section.add "Marker", valid_595869
  var valid_595870 = query.getOrDefault("RegionName")
  valid_595870 = validateParameter(valid_595870, JString, required = false,
                                 default = nil)
  if valid_595870 != nil:
    section.add "RegionName", valid_595870
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595871 = query.getOrDefault("Action")
  valid_595871 = validateParameter(valid_595871, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_595871 != nil:
    section.add "Action", valid_595871
  var valid_595872 = query.getOrDefault("Version")
  valid_595872 = validateParameter(valid_595872, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595872 != nil:
    section.add "Version", valid_595872
  var valid_595873 = query.getOrDefault("Filters")
  valid_595873 = validateParameter(valid_595873, JArray, required = false,
                                 default = nil)
  if valid_595873 != nil:
    section.add "Filters", valid_595873
  var valid_595874 = query.getOrDefault("MaxRecords")
  valid_595874 = validateParameter(valid_595874, JInt, required = false, default = nil)
  if valid_595874 != nil:
    section.add "MaxRecords", valid_595874
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595875 = header.getOrDefault("X-Amz-Signature")
  valid_595875 = validateParameter(valid_595875, JString, required = false,
                                 default = nil)
  if valid_595875 != nil:
    section.add "X-Amz-Signature", valid_595875
  var valid_595876 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595876 = validateParameter(valid_595876, JString, required = false,
                                 default = nil)
  if valid_595876 != nil:
    section.add "X-Amz-Content-Sha256", valid_595876
  var valid_595877 = header.getOrDefault("X-Amz-Date")
  valid_595877 = validateParameter(valid_595877, JString, required = false,
                                 default = nil)
  if valid_595877 != nil:
    section.add "X-Amz-Date", valid_595877
  var valid_595878 = header.getOrDefault("X-Amz-Credential")
  valid_595878 = validateParameter(valid_595878, JString, required = false,
                                 default = nil)
  if valid_595878 != nil:
    section.add "X-Amz-Credential", valid_595878
  var valid_595879 = header.getOrDefault("X-Amz-Security-Token")
  valid_595879 = validateParameter(valid_595879, JString, required = false,
                                 default = nil)
  if valid_595879 != nil:
    section.add "X-Amz-Security-Token", valid_595879
  var valid_595880 = header.getOrDefault("X-Amz-Algorithm")
  valid_595880 = validateParameter(valid_595880, JString, required = false,
                                 default = nil)
  if valid_595880 != nil:
    section.add "X-Amz-Algorithm", valid_595880
  var valid_595881 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595881 = validateParameter(valid_595881, JString, required = false,
                                 default = nil)
  if valid_595881 != nil:
    section.add "X-Amz-SignedHeaders", valid_595881
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595882: Call_GetDescribeSourceRegions_595866; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_595882.validator(path, query, header, formData, body)
  let scheme = call_595882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595882.url(scheme.get, call_595882.host, call_595882.base,
                         call_595882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595882, url, valid)

proc call*(call_595883: Call_GetDescribeSourceRegions_595866; Marker: string = "";
          RegionName: string = ""; Action: string = "DescribeSourceRegions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_595884 = newJObject()
  add(query_595884, "Marker", newJString(Marker))
  add(query_595884, "RegionName", newJString(RegionName))
  add(query_595884, "Action", newJString(Action))
  add(query_595884, "Version", newJString(Version))
  if Filters != nil:
    query_595884.add "Filters", Filters
  add(query_595884, "MaxRecords", newJInt(MaxRecords))
  result = call_595883.call(nil, query_595884, nil, nil, nil)

var getDescribeSourceRegions* = Call_GetDescribeSourceRegions_595866(
    name: "getDescribeSourceRegions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_GetDescribeSourceRegions_595867, base: "/",
    url: url_GetDescribeSourceRegions_595868, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_595921 = ref object of OpenApiRestCall_592348
proc url_PostDescribeValidDBInstanceModifications_595923(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_595922(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595924 = query.getOrDefault("Action")
  valid_595924 = validateParameter(valid_595924, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_595924 != nil:
    section.add "Action", valid_595924
  var valid_595925 = query.getOrDefault("Version")
  valid_595925 = validateParameter(valid_595925, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595925 != nil:
    section.add "Version", valid_595925
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595926 = header.getOrDefault("X-Amz-Signature")
  valid_595926 = validateParameter(valid_595926, JString, required = false,
                                 default = nil)
  if valid_595926 != nil:
    section.add "X-Amz-Signature", valid_595926
  var valid_595927 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595927 = validateParameter(valid_595927, JString, required = false,
                                 default = nil)
  if valid_595927 != nil:
    section.add "X-Amz-Content-Sha256", valid_595927
  var valid_595928 = header.getOrDefault("X-Amz-Date")
  valid_595928 = validateParameter(valid_595928, JString, required = false,
                                 default = nil)
  if valid_595928 != nil:
    section.add "X-Amz-Date", valid_595928
  var valid_595929 = header.getOrDefault("X-Amz-Credential")
  valid_595929 = validateParameter(valid_595929, JString, required = false,
                                 default = nil)
  if valid_595929 != nil:
    section.add "X-Amz-Credential", valid_595929
  var valid_595930 = header.getOrDefault("X-Amz-Security-Token")
  valid_595930 = validateParameter(valid_595930, JString, required = false,
                                 default = nil)
  if valid_595930 != nil:
    section.add "X-Amz-Security-Token", valid_595930
  var valid_595931 = header.getOrDefault("X-Amz-Algorithm")
  valid_595931 = validateParameter(valid_595931, JString, required = false,
                                 default = nil)
  if valid_595931 != nil:
    section.add "X-Amz-Algorithm", valid_595931
  var valid_595932 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595932 = validateParameter(valid_595932, JString, required = false,
                                 default = nil)
  if valid_595932 != nil:
    section.add "X-Amz-SignedHeaders", valid_595932
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595933 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595933 = validateParameter(valid_595933, JString, required = true,
                                 default = nil)
  if valid_595933 != nil:
    section.add "DBInstanceIdentifier", valid_595933
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595934: Call_PostDescribeValidDBInstanceModifications_595921;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_595934.validator(path, query, header, formData, body)
  let scheme = call_595934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595934.url(scheme.get, call_595934.host, call_595934.base,
                         call_595934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595934, url, valid)

proc call*(call_595935: Call_PostDescribeValidDBInstanceModifications_595921;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595936 = newJObject()
  var formData_595937 = newJObject()
  add(formData_595937, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595936, "Action", newJString(Action))
  add(query_595936, "Version", newJString(Version))
  result = call_595935.call(nil, query_595936, nil, formData_595937, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_595921(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_595922,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_595923,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_595905 = ref object of OpenApiRestCall_592348
proc url_GetDescribeValidDBInstanceModifications_595907(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_595906(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595908 = query.getOrDefault("DBInstanceIdentifier")
  valid_595908 = validateParameter(valid_595908, JString, required = true,
                                 default = nil)
  if valid_595908 != nil:
    section.add "DBInstanceIdentifier", valid_595908
  var valid_595909 = query.getOrDefault("Action")
  valid_595909 = validateParameter(valid_595909, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_595909 != nil:
    section.add "Action", valid_595909
  var valid_595910 = query.getOrDefault("Version")
  valid_595910 = validateParameter(valid_595910, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595910 != nil:
    section.add "Version", valid_595910
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595911 = header.getOrDefault("X-Amz-Signature")
  valid_595911 = validateParameter(valid_595911, JString, required = false,
                                 default = nil)
  if valid_595911 != nil:
    section.add "X-Amz-Signature", valid_595911
  var valid_595912 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595912 = validateParameter(valid_595912, JString, required = false,
                                 default = nil)
  if valid_595912 != nil:
    section.add "X-Amz-Content-Sha256", valid_595912
  var valid_595913 = header.getOrDefault("X-Amz-Date")
  valid_595913 = validateParameter(valid_595913, JString, required = false,
                                 default = nil)
  if valid_595913 != nil:
    section.add "X-Amz-Date", valid_595913
  var valid_595914 = header.getOrDefault("X-Amz-Credential")
  valid_595914 = validateParameter(valid_595914, JString, required = false,
                                 default = nil)
  if valid_595914 != nil:
    section.add "X-Amz-Credential", valid_595914
  var valid_595915 = header.getOrDefault("X-Amz-Security-Token")
  valid_595915 = validateParameter(valid_595915, JString, required = false,
                                 default = nil)
  if valid_595915 != nil:
    section.add "X-Amz-Security-Token", valid_595915
  var valid_595916 = header.getOrDefault("X-Amz-Algorithm")
  valid_595916 = validateParameter(valid_595916, JString, required = false,
                                 default = nil)
  if valid_595916 != nil:
    section.add "X-Amz-Algorithm", valid_595916
  var valid_595917 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595917 = validateParameter(valid_595917, JString, required = false,
                                 default = nil)
  if valid_595917 != nil:
    section.add "X-Amz-SignedHeaders", valid_595917
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595918: Call_GetDescribeValidDBInstanceModifications_595905;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_595918.validator(path, query, header, formData, body)
  let scheme = call_595918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595918.url(scheme.get, call_595918.host, call_595918.base,
                         call_595918.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595918, url, valid)

proc call*(call_595919: Call_GetDescribeValidDBInstanceModifications_595905;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595920 = newJObject()
  add(query_595920, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595920, "Action", newJString(Action))
  add(query_595920, "Version", newJString(Version))
  result = call_595919.call(nil, query_595920, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_595905(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_595906, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_595907,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDownloadDBLogFilePortion_595957 = ref object of OpenApiRestCall_592348
proc url_PostDownloadDBLogFilePortion_595959(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDownloadDBLogFilePortion_595958(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595960 = query.getOrDefault("Action")
  valid_595960 = validateParameter(valid_595960, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_595960 != nil:
    section.add "Action", valid_595960
  var valid_595961 = query.getOrDefault("Version")
  valid_595961 = validateParameter(valid_595961, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595961 != nil:
    section.add "Version", valid_595961
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595962 = header.getOrDefault("X-Amz-Signature")
  valid_595962 = validateParameter(valid_595962, JString, required = false,
                                 default = nil)
  if valid_595962 != nil:
    section.add "X-Amz-Signature", valid_595962
  var valid_595963 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595963 = validateParameter(valid_595963, JString, required = false,
                                 default = nil)
  if valid_595963 != nil:
    section.add "X-Amz-Content-Sha256", valid_595963
  var valid_595964 = header.getOrDefault("X-Amz-Date")
  valid_595964 = validateParameter(valid_595964, JString, required = false,
                                 default = nil)
  if valid_595964 != nil:
    section.add "X-Amz-Date", valid_595964
  var valid_595965 = header.getOrDefault("X-Amz-Credential")
  valid_595965 = validateParameter(valid_595965, JString, required = false,
                                 default = nil)
  if valid_595965 != nil:
    section.add "X-Amz-Credential", valid_595965
  var valid_595966 = header.getOrDefault("X-Amz-Security-Token")
  valid_595966 = validateParameter(valid_595966, JString, required = false,
                                 default = nil)
  if valid_595966 != nil:
    section.add "X-Amz-Security-Token", valid_595966
  var valid_595967 = header.getOrDefault("X-Amz-Algorithm")
  valid_595967 = validateParameter(valid_595967, JString, required = false,
                                 default = nil)
  if valid_595967 != nil:
    section.add "X-Amz-Algorithm", valid_595967
  var valid_595968 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595968 = validateParameter(valid_595968, JString, required = false,
                                 default = nil)
  if valid_595968 != nil:
    section.add "X-Amz-SignedHeaders", valid_595968
  result.add "header", section
  ## parameters in `formData` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_595969 = formData.getOrDefault("NumberOfLines")
  valid_595969 = validateParameter(valid_595969, JInt, required = false, default = nil)
  if valid_595969 != nil:
    section.add "NumberOfLines", valid_595969
  var valid_595970 = formData.getOrDefault("Marker")
  valid_595970 = validateParameter(valid_595970, JString, required = false,
                                 default = nil)
  if valid_595970 != nil:
    section.add "Marker", valid_595970
  assert formData != nil,
        "formData argument is necessary due to required `LogFileName` field"
  var valid_595971 = formData.getOrDefault("LogFileName")
  valid_595971 = validateParameter(valid_595971, JString, required = true,
                                 default = nil)
  if valid_595971 != nil:
    section.add "LogFileName", valid_595971
  var valid_595972 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595972 = validateParameter(valid_595972, JString, required = true,
                                 default = nil)
  if valid_595972 != nil:
    section.add "DBInstanceIdentifier", valid_595972
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595973: Call_PostDownloadDBLogFilePortion_595957; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_595973.validator(path, query, header, formData, body)
  let scheme = call_595973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595973.url(scheme.get, call_595973.host, call_595973.base,
                         call_595973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595973, url, valid)

proc call*(call_595974: Call_PostDownloadDBLogFilePortion_595957;
          LogFileName: string; DBInstanceIdentifier: string; NumberOfLines: int = 0;
          Marker: string = ""; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## postDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595975 = newJObject()
  var formData_595976 = newJObject()
  add(formData_595976, "NumberOfLines", newJInt(NumberOfLines))
  add(formData_595976, "Marker", newJString(Marker))
  add(formData_595976, "LogFileName", newJString(LogFileName))
  add(formData_595976, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595975, "Action", newJString(Action))
  add(query_595975, "Version", newJString(Version))
  result = call_595974.call(nil, query_595975, nil, formData_595976, nil)

var postDownloadDBLogFilePortion* = Call_PostDownloadDBLogFilePortion_595957(
    name: "postDownloadDBLogFilePortion", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_PostDownloadDBLogFilePortion_595958, base: "/",
    url: url_PostDownloadDBLogFilePortion_595959,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDownloadDBLogFilePortion_595938 = ref object of OpenApiRestCall_592348
proc url_GetDownloadDBLogFilePortion_595940(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDownloadDBLogFilePortion_595939(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: JString (required)
  section = newJObject()
  var valid_595941 = query.getOrDefault("Marker")
  valid_595941 = validateParameter(valid_595941, JString, required = false,
                                 default = nil)
  if valid_595941 != nil:
    section.add "Marker", valid_595941
  var valid_595942 = query.getOrDefault("NumberOfLines")
  valid_595942 = validateParameter(valid_595942, JInt, required = false, default = nil)
  if valid_595942 != nil:
    section.add "NumberOfLines", valid_595942
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595943 = query.getOrDefault("DBInstanceIdentifier")
  valid_595943 = validateParameter(valid_595943, JString, required = true,
                                 default = nil)
  if valid_595943 != nil:
    section.add "DBInstanceIdentifier", valid_595943
  var valid_595944 = query.getOrDefault("Action")
  valid_595944 = validateParameter(valid_595944, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_595944 != nil:
    section.add "Action", valid_595944
  var valid_595945 = query.getOrDefault("LogFileName")
  valid_595945 = validateParameter(valid_595945, JString, required = true,
                                 default = nil)
  if valid_595945 != nil:
    section.add "LogFileName", valid_595945
  var valid_595946 = query.getOrDefault("Version")
  valid_595946 = validateParameter(valid_595946, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595946 != nil:
    section.add "Version", valid_595946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595947 = header.getOrDefault("X-Amz-Signature")
  valid_595947 = validateParameter(valid_595947, JString, required = false,
                                 default = nil)
  if valid_595947 != nil:
    section.add "X-Amz-Signature", valid_595947
  var valid_595948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595948 = validateParameter(valid_595948, JString, required = false,
                                 default = nil)
  if valid_595948 != nil:
    section.add "X-Amz-Content-Sha256", valid_595948
  var valid_595949 = header.getOrDefault("X-Amz-Date")
  valid_595949 = validateParameter(valid_595949, JString, required = false,
                                 default = nil)
  if valid_595949 != nil:
    section.add "X-Amz-Date", valid_595949
  var valid_595950 = header.getOrDefault("X-Amz-Credential")
  valid_595950 = validateParameter(valid_595950, JString, required = false,
                                 default = nil)
  if valid_595950 != nil:
    section.add "X-Amz-Credential", valid_595950
  var valid_595951 = header.getOrDefault("X-Amz-Security-Token")
  valid_595951 = validateParameter(valid_595951, JString, required = false,
                                 default = nil)
  if valid_595951 != nil:
    section.add "X-Amz-Security-Token", valid_595951
  var valid_595952 = header.getOrDefault("X-Amz-Algorithm")
  valid_595952 = validateParameter(valid_595952, JString, required = false,
                                 default = nil)
  if valid_595952 != nil:
    section.add "X-Amz-Algorithm", valid_595952
  var valid_595953 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595953 = validateParameter(valid_595953, JString, required = false,
                                 default = nil)
  if valid_595953 != nil:
    section.add "X-Amz-SignedHeaders", valid_595953
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595954: Call_GetDownloadDBLogFilePortion_595938; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_595954.validator(path, query, header, formData, body)
  let scheme = call_595954.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595954.url(scheme.get, call_595954.host, call_595954.base,
                         call_595954.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595954, url, valid)

proc call*(call_595955: Call_GetDownloadDBLogFilePortion_595938;
          DBInstanceIdentifier: string; LogFileName: string; Marker: string = "";
          NumberOfLines: int = 0; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## getDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: string (required)
  var query_595956 = newJObject()
  add(query_595956, "Marker", newJString(Marker))
  add(query_595956, "NumberOfLines", newJInt(NumberOfLines))
  add(query_595956, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595956, "Action", newJString(Action))
  add(query_595956, "LogFileName", newJString(LogFileName))
  add(query_595956, "Version", newJString(Version))
  result = call_595955.call(nil, query_595956, nil, nil, nil)

var getDownloadDBLogFilePortion* = Call_GetDownloadDBLogFilePortion_595938(
    name: "getDownloadDBLogFilePortion", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_GetDownloadDBLogFilePortion_595939, base: "/",
    url: url_GetDownloadDBLogFilePortion_595940,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_595994 = ref object of OpenApiRestCall_592348
proc url_PostFailoverDBCluster_595996(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostFailoverDBCluster_595995(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595997 = query.getOrDefault("Action")
  valid_595997 = validateParameter(valid_595997, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_595997 != nil:
    section.add "Action", valid_595997
  var valid_595998 = query.getOrDefault("Version")
  valid_595998 = validateParameter(valid_595998, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595998 != nil:
    section.add "Version", valid_595998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595999 = header.getOrDefault("X-Amz-Signature")
  valid_595999 = validateParameter(valid_595999, JString, required = false,
                                 default = nil)
  if valid_595999 != nil:
    section.add "X-Amz-Signature", valid_595999
  var valid_596000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596000 = validateParameter(valid_596000, JString, required = false,
                                 default = nil)
  if valid_596000 != nil:
    section.add "X-Amz-Content-Sha256", valid_596000
  var valid_596001 = header.getOrDefault("X-Amz-Date")
  valid_596001 = validateParameter(valid_596001, JString, required = false,
                                 default = nil)
  if valid_596001 != nil:
    section.add "X-Amz-Date", valid_596001
  var valid_596002 = header.getOrDefault("X-Amz-Credential")
  valid_596002 = validateParameter(valid_596002, JString, required = false,
                                 default = nil)
  if valid_596002 != nil:
    section.add "X-Amz-Credential", valid_596002
  var valid_596003 = header.getOrDefault("X-Amz-Security-Token")
  valid_596003 = validateParameter(valid_596003, JString, required = false,
                                 default = nil)
  if valid_596003 != nil:
    section.add "X-Amz-Security-Token", valid_596003
  var valid_596004 = header.getOrDefault("X-Amz-Algorithm")
  valid_596004 = validateParameter(valid_596004, JString, required = false,
                                 default = nil)
  if valid_596004 != nil:
    section.add "X-Amz-Algorithm", valid_596004
  var valid_596005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596005 = validateParameter(valid_596005, JString, required = false,
                                 default = nil)
  if valid_596005 != nil:
    section.add "X-Amz-SignedHeaders", valid_596005
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_596006 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_596006 = validateParameter(valid_596006, JString, required = false,
                                 default = nil)
  if valid_596006 != nil:
    section.add "TargetDBInstanceIdentifier", valid_596006
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_596007 = formData.getOrDefault("DBClusterIdentifier")
  valid_596007 = validateParameter(valid_596007, JString, required = true,
                                 default = nil)
  if valid_596007 != nil:
    section.add "DBClusterIdentifier", valid_596007
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596008: Call_PostFailoverDBCluster_595994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596008.validator(path, query, header, formData, body)
  let scheme = call_596008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596008.url(scheme.get, call_596008.host, call_596008.base,
                         call_596008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596008, url, valid)

proc call*(call_596009: Call_PostFailoverDBCluster_595994;
          DBClusterIdentifier: string; Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_596010 = newJObject()
  var formData_596011 = newJObject()
  add(query_596010, "Action", newJString(Action))
  add(formData_596011, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_596010, "Version", newJString(Version))
  add(formData_596011, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_596009.call(nil, query_596010, nil, formData_596011, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_595994(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_595995, base: "/",
    url: url_PostFailoverDBCluster_595996, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_595977 = ref object of OpenApiRestCall_592348
proc url_GetFailoverDBCluster_595979(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetFailoverDBCluster_595978(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_595980 = query.getOrDefault("DBClusterIdentifier")
  valid_595980 = validateParameter(valid_595980, JString, required = true,
                                 default = nil)
  if valid_595980 != nil:
    section.add "DBClusterIdentifier", valid_595980
  var valid_595981 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_595981 = validateParameter(valid_595981, JString, required = false,
                                 default = nil)
  if valid_595981 != nil:
    section.add "TargetDBInstanceIdentifier", valid_595981
  var valid_595982 = query.getOrDefault("Action")
  valid_595982 = validateParameter(valid_595982, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_595982 != nil:
    section.add "Action", valid_595982
  var valid_595983 = query.getOrDefault("Version")
  valid_595983 = validateParameter(valid_595983, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595983 != nil:
    section.add "Version", valid_595983
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595984 = header.getOrDefault("X-Amz-Signature")
  valid_595984 = validateParameter(valid_595984, JString, required = false,
                                 default = nil)
  if valid_595984 != nil:
    section.add "X-Amz-Signature", valid_595984
  var valid_595985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595985 = validateParameter(valid_595985, JString, required = false,
                                 default = nil)
  if valid_595985 != nil:
    section.add "X-Amz-Content-Sha256", valid_595985
  var valid_595986 = header.getOrDefault("X-Amz-Date")
  valid_595986 = validateParameter(valid_595986, JString, required = false,
                                 default = nil)
  if valid_595986 != nil:
    section.add "X-Amz-Date", valid_595986
  var valid_595987 = header.getOrDefault("X-Amz-Credential")
  valid_595987 = validateParameter(valid_595987, JString, required = false,
                                 default = nil)
  if valid_595987 != nil:
    section.add "X-Amz-Credential", valid_595987
  var valid_595988 = header.getOrDefault("X-Amz-Security-Token")
  valid_595988 = validateParameter(valid_595988, JString, required = false,
                                 default = nil)
  if valid_595988 != nil:
    section.add "X-Amz-Security-Token", valid_595988
  var valid_595989 = header.getOrDefault("X-Amz-Algorithm")
  valid_595989 = validateParameter(valid_595989, JString, required = false,
                                 default = nil)
  if valid_595989 != nil:
    section.add "X-Amz-Algorithm", valid_595989
  var valid_595990 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595990 = validateParameter(valid_595990, JString, required = false,
                                 default = nil)
  if valid_595990 != nil:
    section.add "X-Amz-SignedHeaders", valid_595990
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595991: Call_GetFailoverDBCluster_595977; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595991.validator(path, query, header, formData, body)
  let scheme = call_595991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595991.url(scheme.get, call_595991.host, call_595991.base,
                         call_595991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595991, url, valid)

proc call*(call_595992: Call_GetFailoverDBCluster_595977;
          DBClusterIdentifier: string; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595993 = newJObject()
  add(query_595993, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595993, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_595993, "Action", newJString(Action))
  add(query_595993, "Version", newJString(Version))
  result = call_595992.call(nil, query_595993, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_595977(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_595978, base: "/",
    url: url_GetFailoverDBCluster_595979, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_596029 = ref object of OpenApiRestCall_592348
proc url_PostListTagsForResource_596031(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListTagsForResource_596030(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596032 = query.getOrDefault("Action")
  valid_596032 = validateParameter(valid_596032, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_596032 != nil:
    section.add "Action", valid_596032
  var valid_596033 = query.getOrDefault("Version")
  valid_596033 = validateParameter(valid_596033, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596033 != nil:
    section.add "Version", valid_596033
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596034 = header.getOrDefault("X-Amz-Signature")
  valid_596034 = validateParameter(valid_596034, JString, required = false,
                                 default = nil)
  if valid_596034 != nil:
    section.add "X-Amz-Signature", valid_596034
  var valid_596035 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596035 = validateParameter(valid_596035, JString, required = false,
                                 default = nil)
  if valid_596035 != nil:
    section.add "X-Amz-Content-Sha256", valid_596035
  var valid_596036 = header.getOrDefault("X-Amz-Date")
  valid_596036 = validateParameter(valid_596036, JString, required = false,
                                 default = nil)
  if valid_596036 != nil:
    section.add "X-Amz-Date", valid_596036
  var valid_596037 = header.getOrDefault("X-Amz-Credential")
  valid_596037 = validateParameter(valid_596037, JString, required = false,
                                 default = nil)
  if valid_596037 != nil:
    section.add "X-Amz-Credential", valid_596037
  var valid_596038 = header.getOrDefault("X-Amz-Security-Token")
  valid_596038 = validateParameter(valid_596038, JString, required = false,
                                 default = nil)
  if valid_596038 != nil:
    section.add "X-Amz-Security-Token", valid_596038
  var valid_596039 = header.getOrDefault("X-Amz-Algorithm")
  valid_596039 = validateParameter(valid_596039, JString, required = false,
                                 default = nil)
  if valid_596039 != nil:
    section.add "X-Amz-Algorithm", valid_596039
  var valid_596040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596040 = validateParameter(valid_596040, JString, required = false,
                                 default = nil)
  if valid_596040 != nil:
    section.add "X-Amz-SignedHeaders", valid_596040
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  section = newJObject()
  var valid_596041 = formData.getOrDefault("Filters")
  valid_596041 = validateParameter(valid_596041, JArray, required = false,
                                 default = nil)
  if valid_596041 != nil:
    section.add "Filters", valid_596041
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_596042 = formData.getOrDefault("ResourceName")
  valid_596042 = validateParameter(valid_596042, JString, required = true,
                                 default = nil)
  if valid_596042 != nil:
    section.add "ResourceName", valid_596042
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596043: Call_PostListTagsForResource_596029; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_596043.validator(path, query, header, formData, body)
  let scheme = call_596043.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596043.url(scheme.get, call_596043.host, call_596043.base,
                         call_596043.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596043, url, valid)

proc call*(call_596044: Call_PostListTagsForResource_596029; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  var query_596045 = newJObject()
  var formData_596046 = newJObject()
  add(query_596045, "Action", newJString(Action))
  if Filters != nil:
    formData_596046.add "Filters", Filters
  add(query_596045, "Version", newJString(Version))
  add(formData_596046, "ResourceName", newJString(ResourceName))
  result = call_596044.call(nil, query_596045, nil, formData_596046, nil)

var postListTagsForResource* = Call_PostListTagsForResource_596029(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_596030, base: "/",
    url: url_PostListTagsForResource_596031, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_596012 = ref object of OpenApiRestCall_592348
proc url_GetListTagsForResource_596014(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListTagsForResource_596013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_596015 = query.getOrDefault("ResourceName")
  valid_596015 = validateParameter(valid_596015, JString, required = true,
                                 default = nil)
  if valid_596015 != nil:
    section.add "ResourceName", valid_596015
  var valid_596016 = query.getOrDefault("Action")
  valid_596016 = validateParameter(valid_596016, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_596016 != nil:
    section.add "Action", valid_596016
  var valid_596017 = query.getOrDefault("Version")
  valid_596017 = validateParameter(valid_596017, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596017 != nil:
    section.add "Version", valid_596017
  var valid_596018 = query.getOrDefault("Filters")
  valid_596018 = validateParameter(valid_596018, JArray, required = false,
                                 default = nil)
  if valid_596018 != nil:
    section.add "Filters", valid_596018
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596019 = header.getOrDefault("X-Amz-Signature")
  valid_596019 = validateParameter(valid_596019, JString, required = false,
                                 default = nil)
  if valid_596019 != nil:
    section.add "X-Amz-Signature", valid_596019
  var valid_596020 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596020 = validateParameter(valid_596020, JString, required = false,
                                 default = nil)
  if valid_596020 != nil:
    section.add "X-Amz-Content-Sha256", valid_596020
  var valid_596021 = header.getOrDefault("X-Amz-Date")
  valid_596021 = validateParameter(valid_596021, JString, required = false,
                                 default = nil)
  if valid_596021 != nil:
    section.add "X-Amz-Date", valid_596021
  var valid_596022 = header.getOrDefault("X-Amz-Credential")
  valid_596022 = validateParameter(valid_596022, JString, required = false,
                                 default = nil)
  if valid_596022 != nil:
    section.add "X-Amz-Credential", valid_596022
  var valid_596023 = header.getOrDefault("X-Amz-Security-Token")
  valid_596023 = validateParameter(valid_596023, JString, required = false,
                                 default = nil)
  if valid_596023 != nil:
    section.add "X-Amz-Security-Token", valid_596023
  var valid_596024 = header.getOrDefault("X-Amz-Algorithm")
  valid_596024 = validateParameter(valid_596024, JString, required = false,
                                 default = nil)
  if valid_596024 != nil:
    section.add "X-Amz-Algorithm", valid_596024
  var valid_596025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596025 = validateParameter(valid_596025, JString, required = false,
                                 default = nil)
  if valid_596025 != nil:
    section.add "X-Amz-SignedHeaders", valid_596025
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596026: Call_GetListTagsForResource_596012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_596026.validator(path, query, header, formData, body)
  let scheme = call_596026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596026.url(scheme.get, call_596026.host, call_596026.base,
                         call_596026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596026, url, valid)

proc call*(call_596027: Call_GetListTagsForResource_596012; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31";
          Filters: JsonNode = nil): Recallable =
  ## getListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  var query_596028 = newJObject()
  add(query_596028, "ResourceName", newJString(ResourceName))
  add(query_596028, "Action", newJString(Action))
  add(query_596028, "Version", newJString(Version))
  if Filters != nil:
    query_596028.add "Filters", Filters
  result = call_596027.call(nil, query_596028, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_596012(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_596013, base: "/",
    url: url_GetListTagsForResource_596014, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCurrentDBClusterCapacity_596066 = ref object of OpenApiRestCall_592348
proc url_PostModifyCurrentDBClusterCapacity_596068(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCurrentDBClusterCapacity_596067(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596069 = query.getOrDefault("Action")
  valid_596069 = validateParameter(valid_596069, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_596069 != nil:
    section.add "Action", valid_596069
  var valid_596070 = query.getOrDefault("Version")
  valid_596070 = validateParameter(valid_596070, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596070 != nil:
    section.add "Version", valid_596070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596071 = header.getOrDefault("X-Amz-Signature")
  valid_596071 = validateParameter(valid_596071, JString, required = false,
                                 default = nil)
  if valid_596071 != nil:
    section.add "X-Amz-Signature", valid_596071
  var valid_596072 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596072 = validateParameter(valid_596072, JString, required = false,
                                 default = nil)
  if valid_596072 != nil:
    section.add "X-Amz-Content-Sha256", valid_596072
  var valid_596073 = header.getOrDefault("X-Amz-Date")
  valid_596073 = validateParameter(valid_596073, JString, required = false,
                                 default = nil)
  if valid_596073 != nil:
    section.add "X-Amz-Date", valid_596073
  var valid_596074 = header.getOrDefault("X-Amz-Credential")
  valid_596074 = validateParameter(valid_596074, JString, required = false,
                                 default = nil)
  if valid_596074 != nil:
    section.add "X-Amz-Credential", valid_596074
  var valid_596075 = header.getOrDefault("X-Amz-Security-Token")
  valid_596075 = validateParameter(valid_596075, JString, required = false,
                                 default = nil)
  if valid_596075 != nil:
    section.add "X-Amz-Security-Token", valid_596075
  var valid_596076 = header.getOrDefault("X-Amz-Algorithm")
  valid_596076 = validateParameter(valid_596076, JString, required = false,
                                 default = nil)
  if valid_596076 != nil:
    section.add "X-Amz-Algorithm", valid_596076
  var valid_596077 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596077 = validateParameter(valid_596077, JString, required = false,
                                 default = nil)
  if valid_596077 != nil:
    section.add "X-Amz-SignedHeaders", valid_596077
  result.add "header", section
  ## parameters in `formData` object:
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  section = newJObject()
  var valid_596078 = formData.getOrDefault("TimeoutAction")
  valid_596078 = validateParameter(valid_596078, JString, required = false,
                                 default = nil)
  if valid_596078 != nil:
    section.add "TimeoutAction", valid_596078
  var valid_596079 = formData.getOrDefault("SecondsBeforeTimeout")
  valid_596079 = validateParameter(valid_596079, JInt, required = false, default = nil)
  if valid_596079 != nil:
    section.add "SecondsBeforeTimeout", valid_596079
  var valid_596080 = formData.getOrDefault("Capacity")
  valid_596080 = validateParameter(valid_596080, JInt, required = false, default = nil)
  if valid_596080 != nil:
    section.add "Capacity", valid_596080
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_596081 = formData.getOrDefault("DBClusterIdentifier")
  valid_596081 = validateParameter(valid_596081, JString, required = true,
                                 default = nil)
  if valid_596081 != nil:
    section.add "DBClusterIdentifier", valid_596081
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596082: Call_PostModifyCurrentDBClusterCapacity_596066;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596082.validator(path, query, header, formData, body)
  let scheme = call_596082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596082.url(scheme.get, call_596082.host, call_596082.base,
                         call_596082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596082, url, valid)

proc call*(call_596083: Call_PostModifyCurrentDBClusterCapacity_596066;
          DBClusterIdentifier: string; TimeoutAction: string = "";
          Action: string = "ModifyCurrentDBClusterCapacity";
          SecondsBeforeTimeout: int = 0; Version: string = "2014-10-31";
          Capacity: int = 0): Recallable =
  ## postModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   Action: string (required)
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Version: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  var query_596084 = newJObject()
  var formData_596085 = newJObject()
  add(formData_596085, "TimeoutAction", newJString(TimeoutAction))
  add(query_596084, "Action", newJString(Action))
  add(formData_596085, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_596084, "Version", newJString(Version))
  add(formData_596085, "Capacity", newJInt(Capacity))
  add(formData_596085, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_596083.call(nil, query_596084, nil, formData_596085, nil)

var postModifyCurrentDBClusterCapacity* = Call_PostModifyCurrentDBClusterCapacity_596066(
    name: "postModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_PostModifyCurrentDBClusterCapacity_596067, base: "/",
    url: url_PostModifyCurrentDBClusterCapacity_596068,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCurrentDBClusterCapacity_596047 = ref object of OpenApiRestCall_592348
proc url_GetModifyCurrentDBClusterCapacity_596049(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCurrentDBClusterCapacity_596048(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_596050 = query.getOrDefault("Capacity")
  valid_596050 = validateParameter(valid_596050, JInt, required = false, default = nil)
  if valid_596050 != nil:
    section.add "Capacity", valid_596050
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_596051 = query.getOrDefault("DBClusterIdentifier")
  valid_596051 = validateParameter(valid_596051, JString, required = true,
                                 default = nil)
  if valid_596051 != nil:
    section.add "DBClusterIdentifier", valid_596051
  var valid_596052 = query.getOrDefault("TimeoutAction")
  valid_596052 = validateParameter(valid_596052, JString, required = false,
                                 default = nil)
  if valid_596052 != nil:
    section.add "TimeoutAction", valid_596052
  var valid_596053 = query.getOrDefault("SecondsBeforeTimeout")
  valid_596053 = validateParameter(valid_596053, JInt, required = false, default = nil)
  if valid_596053 != nil:
    section.add "SecondsBeforeTimeout", valid_596053
  var valid_596054 = query.getOrDefault("Action")
  valid_596054 = validateParameter(valid_596054, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_596054 != nil:
    section.add "Action", valid_596054
  var valid_596055 = query.getOrDefault("Version")
  valid_596055 = validateParameter(valid_596055, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596055 != nil:
    section.add "Version", valid_596055
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596056 = header.getOrDefault("X-Amz-Signature")
  valid_596056 = validateParameter(valid_596056, JString, required = false,
                                 default = nil)
  if valid_596056 != nil:
    section.add "X-Amz-Signature", valid_596056
  var valid_596057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596057 = validateParameter(valid_596057, JString, required = false,
                                 default = nil)
  if valid_596057 != nil:
    section.add "X-Amz-Content-Sha256", valid_596057
  var valid_596058 = header.getOrDefault("X-Amz-Date")
  valid_596058 = validateParameter(valid_596058, JString, required = false,
                                 default = nil)
  if valid_596058 != nil:
    section.add "X-Amz-Date", valid_596058
  var valid_596059 = header.getOrDefault("X-Amz-Credential")
  valid_596059 = validateParameter(valid_596059, JString, required = false,
                                 default = nil)
  if valid_596059 != nil:
    section.add "X-Amz-Credential", valid_596059
  var valid_596060 = header.getOrDefault("X-Amz-Security-Token")
  valid_596060 = validateParameter(valid_596060, JString, required = false,
                                 default = nil)
  if valid_596060 != nil:
    section.add "X-Amz-Security-Token", valid_596060
  var valid_596061 = header.getOrDefault("X-Amz-Algorithm")
  valid_596061 = validateParameter(valid_596061, JString, required = false,
                                 default = nil)
  if valid_596061 != nil:
    section.add "X-Amz-Algorithm", valid_596061
  var valid_596062 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596062 = validateParameter(valid_596062, JString, required = false,
                                 default = nil)
  if valid_596062 != nil:
    section.add "X-Amz-SignedHeaders", valid_596062
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596063: Call_GetModifyCurrentDBClusterCapacity_596047;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596063.validator(path, query, header, formData, body)
  let scheme = call_596063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596063.url(scheme.get, call_596063.host, call_596063.base,
                         call_596063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596063, url, valid)

proc call*(call_596064: Call_GetModifyCurrentDBClusterCapacity_596047;
          DBClusterIdentifier: string; Capacity: int = 0; TimeoutAction: string = "";
          SecondsBeforeTimeout: int = 0;
          Action: string = "ModifyCurrentDBClusterCapacity";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596065 = newJObject()
  add(query_596065, "Capacity", newJInt(Capacity))
  add(query_596065, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_596065, "TimeoutAction", newJString(TimeoutAction))
  add(query_596065, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_596065, "Action", newJString(Action))
  add(query_596065, "Version", newJString(Version))
  result = call_596064.call(nil, query_596065, nil, nil, nil)

var getModifyCurrentDBClusterCapacity* = Call_GetModifyCurrentDBClusterCapacity_596047(
    name: "getModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_GetModifyCurrentDBClusterCapacity_596048, base: "/",
    url: url_GetModifyCurrentDBClusterCapacity_596049,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_596127 = ref object of OpenApiRestCall_592348
proc url_PostModifyDBCluster_596129(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBCluster_596128(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596130 = query.getOrDefault("Action")
  valid_596130 = validateParameter(valid_596130, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_596130 != nil:
    section.add "Action", valid_596130
  var valid_596131 = query.getOrDefault("Version")
  valid_596131 = validateParameter(valid_596131, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596131 != nil:
    section.add "Version", valid_596131
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596132 = header.getOrDefault("X-Amz-Signature")
  valid_596132 = validateParameter(valid_596132, JString, required = false,
                                 default = nil)
  if valid_596132 != nil:
    section.add "X-Amz-Signature", valid_596132
  var valid_596133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596133 = validateParameter(valid_596133, JString, required = false,
                                 default = nil)
  if valid_596133 != nil:
    section.add "X-Amz-Content-Sha256", valid_596133
  var valid_596134 = header.getOrDefault("X-Amz-Date")
  valid_596134 = validateParameter(valid_596134, JString, required = false,
                                 default = nil)
  if valid_596134 != nil:
    section.add "X-Amz-Date", valid_596134
  var valid_596135 = header.getOrDefault("X-Amz-Credential")
  valid_596135 = validateParameter(valid_596135, JString, required = false,
                                 default = nil)
  if valid_596135 != nil:
    section.add "X-Amz-Credential", valid_596135
  var valid_596136 = header.getOrDefault("X-Amz-Security-Token")
  valid_596136 = validateParameter(valid_596136, JString, required = false,
                                 default = nil)
  if valid_596136 != nil:
    section.add "X-Amz-Security-Token", valid_596136
  var valid_596137 = header.getOrDefault("X-Amz-Algorithm")
  valid_596137 = validateParameter(valid_596137, JString, required = false,
                                 default = nil)
  if valid_596137 != nil:
    section.add "X-Amz-Algorithm", valid_596137
  var valid_596138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596138 = validateParameter(valid_596138, JString, required = false,
                                 default = nil)
  if valid_596138 != nil:
    section.add "X-Amz-SignedHeaders", valid_596138
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_596139 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_596139 = validateParameter(valid_596139, JString, required = false,
                                 default = nil)
  if valid_596139 != nil:
    section.add "NewDBClusterIdentifier", valid_596139
  var valid_596140 = formData.getOrDefault("Port")
  valid_596140 = validateParameter(valid_596140, JInt, required = false, default = nil)
  if valid_596140 != nil:
    section.add "Port", valid_596140
  var valid_596141 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_596141 = validateParameter(valid_596141, JString, required = false,
                                 default = nil)
  if valid_596141 != nil:
    section.add "PreferredMaintenanceWindow", valid_596141
  var valid_596142 = formData.getOrDefault("PreferredBackupWindow")
  valid_596142 = validateParameter(valid_596142, JString, required = false,
                                 default = nil)
  if valid_596142 != nil:
    section.add "PreferredBackupWindow", valid_596142
  var valid_596143 = formData.getOrDefault("MasterUserPassword")
  valid_596143 = validateParameter(valid_596143, JString, required = false,
                                 default = nil)
  if valid_596143 != nil:
    section.add "MasterUserPassword", valid_596143
  var valid_596144 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_596144 = validateParameter(valid_596144, JArray, required = false,
                                 default = nil)
  if valid_596144 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_596144
  var valid_596145 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_596145 = validateParameter(valid_596145, JString, required = false,
                                 default = nil)
  if valid_596145 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_596145
  var valid_596146 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_596146 = validateParameter(valid_596146, JArray, required = false,
                                 default = nil)
  if valid_596146 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_596146
  var valid_596147 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_596147 = validateParameter(valid_596147, JString, required = false,
                                 default = nil)
  if valid_596147 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_596147
  var valid_596148 = formData.getOrDefault("EngineVersion")
  valid_596148 = validateParameter(valid_596148, JString, required = false,
                                 default = nil)
  if valid_596148 != nil:
    section.add "EngineVersion", valid_596148
  var valid_596149 = formData.getOrDefault("BacktrackWindow")
  valid_596149 = validateParameter(valid_596149, JInt, required = false, default = nil)
  if valid_596149 != nil:
    section.add "BacktrackWindow", valid_596149
  var valid_596150 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_596150 = validateParameter(valid_596150, JArray, required = false,
                                 default = nil)
  if valid_596150 != nil:
    section.add "VpcSecurityGroupIds", valid_596150
  var valid_596151 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_596151 = validateParameter(valid_596151, JBool, required = false, default = nil)
  if valid_596151 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_596151
  var valid_596152 = formData.getOrDefault("BackupRetentionPeriod")
  valid_596152 = validateParameter(valid_596152, JInt, required = false, default = nil)
  if valid_596152 != nil:
    section.add "BackupRetentionPeriod", valid_596152
  var valid_596153 = formData.getOrDefault("ApplyImmediately")
  valid_596153 = validateParameter(valid_596153, JBool, required = false, default = nil)
  if valid_596153 != nil:
    section.add "ApplyImmediately", valid_596153
  var valid_596154 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_596154 = validateParameter(valid_596154, JString, required = false,
                                 default = nil)
  if valid_596154 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_596154
  var valid_596155 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_596155 = validateParameter(valid_596155, JBool, required = false, default = nil)
  if valid_596155 != nil:
    section.add "AllowMajorVersionUpgrade", valid_596155
  var valid_596156 = formData.getOrDefault("EnableHttpEndpoint")
  valid_596156 = validateParameter(valid_596156, JBool, required = false, default = nil)
  if valid_596156 != nil:
    section.add "EnableHttpEndpoint", valid_596156
  var valid_596157 = formData.getOrDefault("OptionGroupName")
  valid_596157 = validateParameter(valid_596157, JString, required = false,
                                 default = nil)
  if valid_596157 != nil:
    section.add "OptionGroupName", valid_596157
  var valid_596158 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_596158 = validateParameter(valid_596158, JString, required = false,
                                 default = nil)
  if valid_596158 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_596158
  var valid_596159 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_596159 = validateParameter(valid_596159, JString, required = false,
                                 default = nil)
  if valid_596159 != nil:
    section.add "DBClusterParameterGroupName", valid_596159
  var valid_596160 = formData.getOrDefault("DBInstanceParameterGroupName")
  valid_596160 = validateParameter(valid_596160, JString, required = false,
                                 default = nil)
  if valid_596160 != nil:
    section.add "DBInstanceParameterGroupName", valid_596160
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_596161 = formData.getOrDefault("DBClusterIdentifier")
  valid_596161 = validateParameter(valid_596161, JString, required = true,
                                 default = nil)
  if valid_596161 != nil:
    section.add "DBClusterIdentifier", valid_596161
  var valid_596162 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_596162 = validateParameter(valid_596162, JString, required = false,
                                 default = nil)
  if valid_596162 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_596162
  var valid_596163 = formData.getOrDefault("DeletionProtection")
  valid_596163 = validateParameter(valid_596163, JBool, required = false, default = nil)
  if valid_596163 != nil:
    section.add "DeletionProtection", valid_596163
  var valid_596164 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_596164 = validateParameter(valid_596164, JBool, required = false, default = nil)
  if valid_596164 != nil:
    section.add "CopyTagsToSnapshot", valid_596164
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596165: Call_PostModifyDBCluster_596127; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596165.validator(path, query, header, formData, body)
  let scheme = call_596165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596165.url(scheme.get, call_596165.host, call_596165.base,
                         call_596165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596165, url, valid)

proc call*(call_596166: Call_PostModifyDBCluster_596127;
          DBClusterIdentifier: string; NewDBClusterIdentifier: string = "";
          Port: int = 0; PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; ApplyImmediately: bool = false;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "ModifyDBCluster";
          AllowMajorVersionUpgrade: bool = false; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = "";
          DBInstanceParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  var query_596167 = newJObject()
  var formData_596168 = newJObject()
  add(formData_596168, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  add(formData_596168, "Port", newJInt(Port))
  add(formData_596168, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_596168, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_596168, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_596168.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_596168, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_596168.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_596168, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_596168, "EngineVersion", newJString(EngineVersion))
  add(formData_596168, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_596168.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_596168, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_596168, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_596168, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_596168, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_596167, "Action", newJString(Action))
  add(formData_596168, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_596168, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_596168, "OptionGroupName", newJString(OptionGroupName))
  add(formData_596168, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_596168, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_596168, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_596167, "Version", newJString(Version))
  add(formData_596168, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_596168, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_596168, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_596168, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_596166.call(nil, query_596167, nil, formData_596168, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_596127(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_596128, base: "/",
    url: url_PostModifyDBCluster_596129, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_596086 = ref object of OpenApiRestCall_592348
proc url_GetModifyDBCluster_596088(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBCluster_596087(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_596089 = query.getOrDefault("DeletionProtection")
  valid_596089 = validateParameter(valid_596089, JBool, required = false, default = nil)
  if valid_596089 != nil:
    section.add "DeletionProtection", valid_596089
  var valid_596090 = query.getOrDefault("CopyTagsToSnapshot")
  valid_596090 = validateParameter(valid_596090, JBool, required = false, default = nil)
  if valid_596090 != nil:
    section.add "CopyTagsToSnapshot", valid_596090
  var valid_596091 = query.getOrDefault("EnableHttpEndpoint")
  valid_596091 = validateParameter(valid_596091, JBool, required = false, default = nil)
  if valid_596091 != nil:
    section.add "EnableHttpEndpoint", valid_596091
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_596092 = query.getOrDefault("DBClusterIdentifier")
  valid_596092 = validateParameter(valid_596092, JString, required = true,
                                 default = nil)
  if valid_596092 != nil:
    section.add "DBClusterIdentifier", valid_596092
  var valid_596093 = query.getOrDefault("BacktrackWindow")
  valid_596093 = validateParameter(valid_596093, JInt, required = false, default = nil)
  if valid_596093 != nil:
    section.add "BacktrackWindow", valid_596093
  var valid_596094 = query.getOrDefault("DBClusterParameterGroupName")
  valid_596094 = validateParameter(valid_596094, JString, required = false,
                                 default = nil)
  if valid_596094 != nil:
    section.add "DBClusterParameterGroupName", valid_596094
  var valid_596095 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_596095 = validateParameter(valid_596095, JArray, required = false,
                                 default = nil)
  if valid_596095 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_596095
  var valid_596096 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_596096 = validateParameter(valid_596096, JArray, required = false,
                                 default = nil)
  if valid_596096 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_596096
  var valid_596097 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_596097 = validateParameter(valid_596097, JString, required = false,
                                 default = nil)
  if valid_596097 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_596097
  var valid_596098 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_596098 = validateParameter(valid_596098, JString, required = false,
                                 default = nil)
  if valid_596098 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_596098
  var valid_596099 = query.getOrDefault("BackupRetentionPeriod")
  valid_596099 = validateParameter(valid_596099, JInt, required = false, default = nil)
  if valid_596099 != nil:
    section.add "BackupRetentionPeriod", valid_596099
  var valid_596100 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_596100 = validateParameter(valid_596100, JString, required = false,
                                 default = nil)
  if valid_596100 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_596100
  var valid_596101 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_596101 = validateParameter(valid_596101, JBool, required = false, default = nil)
  if valid_596101 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_596101
  var valid_596102 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_596102 = validateParameter(valid_596102, JString, required = false,
                                 default = nil)
  if valid_596102 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_596102
  var valid_596103 = query.getOrDefault("EngineVersion")
  valid_596103 = validateParameter(valid_596103, JString, required = false,
                                 default = nil)
  if valid_596103 != nil:
    section.add "EngineVersion", valid_596103
  var valid_596104 = query.getOrDefault("DBInstanceParameterGroupName")
  valid_596104 = validateParameter(valid_596104, JString, required = false,
                                 default = nil)
  if valid_596104 != nil:
    section.add "DBInstanceParameterGroupName", valid_596104
  var valid_596105 = query.getOrDefault("Action")
  valid_596105 = validateParameter(valid_596105, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_596105 != nil:
    section.add "Action", valid_596105
  var valid_596106 = query.getOrDefault("ApplyImmediately")
  valid_596106 = validateParameter(valid_596106, JBool, required = false, default = nil)
  if valid_596106 != nil:
    section.add "ApplyImmediately", valid_596106
  var valid_596107 = query.getOrDefault("NewDBClusterIdentifier")
  valid_596107 = validateParameter(valid_596107, JString, required = false,
                                 default = nil)
  if valid_596107 != nil:
    section.add "NewDBClusterIdentifier", valid_596107
  var valid_596108 = query.getOrDefault("Port")
  valid_596108 = validateParameter(valid_596108, JInt, required = false, default = nil)
  if valid_596108 != nil:
    section.add "Port", valid_596108
  var valid_596109 = query.getOrDefault("VpcSecurityGroupIds")
  valid_596109 = validateParameter(valid_596109, JArray, required = false,
                                 default = nil)
  if valid_596109 != nil:
    section.add "VpcSecurityGroupIds", valid_596109
  var valid_596110 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_596110 = validateParameter(valid_596110, JBool, required = false, default = nil)
  if valid_596110 != nil:
    section.add "AllowMajorVersionUpgrade", valid_596110
  var valid_596111 = query.getOrDefault("MasterUserPassword")
  valid_596111 = validateParameter(valid_596111, JString, required = false,
                                 default = nil)
  if valid_596111 != nil:
    section.add "MasterUserPassword", valid_596111
  var valid_596112 = query.getOrDefault("OptionGroupName")
  valid_596112 = validateParameter(valid_596112, JString, required = false,
                                 default = nil)
  if valid_596112 != nil:
    section.add "OptionGroupName", valid_596112
  var valid_596113 = query.getOrDefault("Version")
  valid_596113 = validateParameter(valid_596113, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596113 != nil:
    section.add "Version", valid_596113
  var valid_596114 = query.getOrDefault("PreferredBackupWindow")
  valid_596114 = validateParameter(valid_596114, JString, required = false,
                                 default = nil)
  if valid_596114 != nil:
    section.add "PreferredBackupWindow", valid_596114
  var valid_596115 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_596115 = validateParameter(valid_596115, JString, required = false,
                                 default = nil)
  if valid_596115 != nil:
    section.add "PreferredMaintenanceWindow", valid_596115
  var valid_596116 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_596116 = validateParameter(valid_596116, JString, required = false,
                                 default = nil)
  if valid_596116 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_596116
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596117 = header.getOrDefault("X-Amz-Signature")
  valid_596117 = validateParameter(valid_596117, JString, required = false,
                                 default = nil)
  if valid_596117 != nil:
    section.add "X-Amz-Signature", valid_596117
  var valid_596118 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596118 = validateParameter(valid_596118, JString, required = false,
                                 default = nil)
  if valid_596118 != nil:
    section.add "X-Amz-Content-Sha256", valid_596118
  var valid_596119 = header.getOrDefault("X-Amz-Date")
  valid_596119 = validateParameter(valid_596119, JString, required = false,
                                 default = nil)
  if valid_596119 != nil:
    section.add "X-Amz-Date", valid_596119
  var valid_596120 = header.getOrDefault("X-Amz-Credential")
  valid_596120 = validateParameter(valid_596120, JString, required = false,
                                 default = nil)
  if valid_596120 != nil:
    section.add "X-Amz-Credential", valid_596120
  var valid_596121 = header.getOrDefault("X-Amz-Security-Token")
  valid_596121 = validateParameter(valid_596121, JString, required = false,
                                 default = nil)
  if valid_596121 != nil:
    section.add "X-Amz-Security-Token", valid_596121
  var valid_596122 = header.getOrDefault("X-Amz-Algorithm")
  valid_596122 = validateParameter(valid_596122, JString, required = false,
                                 default = nil)
  if valid_596122 != nil:
    section.add "X-Amz-Algorithm", valid_596122
  var valid_596123 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596123 = validateParameter(valid_596123, JString, required = false,
                                 default = nil)
  if valid_596123 != nil:
    section.add "X-Amz-SignedHeaders", valid_596123
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596124: Call_GetModifyDBCluster_596086; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596124.validator(path, query, header, formData, body)
  let scheme = call_596124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596124.url(scheme.get, call_596124.host, call_596124.base,
                         call_596124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596124, url, valid)

proc call*(call_596125: Call_GetModifyDBCluster_596086;
          DBClusterIdentifier: string; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; EnableHttpEndpoint: bool = false;
          BacktrackWindow: int = 0; DBClusterParameterGroupName: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EngineVersion: string = ""; DBInstanceParameterGroupName: string = "";
          Action: string = "ModifyDBCluster"; ApplyImmediately: bool = false;
          NewDBClusterIdentifier: string = ""; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = "";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_596126 = newJObject()
  add(query_596126, "DeletionProtection", newJBool(DeletionProtection))
  add(query_596126, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_596126, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_596126, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_596126, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_596126, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_596126.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_596126.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_596126, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_596126, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_596126, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_596126, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_596126, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_596126, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_596126, "EngineVersion", newJString(EngineVersion))
  add(query_596126, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_596126, "Action", newJString(Action))
  add(query_596126, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_596126, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_596126, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_596126.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_596126, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_596126, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_596126, "OptionGroupName", newJString(OptionGroupName))
  add(query_596126, "Version", newJString(Version))
  add(query_596126, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_596126, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_596126, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_596125.call(nil, query_596126, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_596086(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_596087,
    base: "/", url: url_GetModifyDBCluster_596088,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterEndpoint_596188 = ref object of OpenApiRestCall_592348
proc url_PostModifyDBClusterEndpoint_596190(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterEndpoint_596189(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596191 = query.getOrDefault("Action")
  valid_596191 = validateParameter(valid_596191, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_596191 != nil:
    section.add "Action", valid_596191
  var valid_596192 = query.getOrDefault("Version")
  valid_596192 = validateParameter(valid_596192, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596192 != nil:
    section.add "Version", valid_596192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596193 = header.getOrDefault("X-Amz-Signature")
  valid_596193 = validateParameter(valid_596193, JString, required = false,
                                 default = nil)
  if valid_596193 != nil:
    section.add "X-Amz-Signature", valid_596193
  var valid_596194 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596194 = validateParameter(valid_596194, JString, required = false,
                                 default = nil)
  if valid_596194 != nil:
    section.add "X-Amz-Content-Sha256", valid_596194
  var valid_596195 = header.getOrDefault("X-Amz-Date")
  valid_596195 = validateParameter(valid_596195, JString, required = false,
                                 default = nil)
  if valid_596195 != nil:
    section.add "X-Amz-Date", valid_596195
  var valid_596196 = header.getOrDefault("X-Amz-Credential")
  valid_596196 = validateParameter(valid_596196, JString, required = false,
                                 default = nil)
  if valid_596196 != nil:
    section.add "X-Amz-Credential", valid_596196
  var valid_596197 = header.getOrDefault("X-Amz-Security-Token")
  valid_596197 = validateParameter(valid_596197, JString, required = false,
                                 default = nil)
  if valid_596197 != nil:
    section.add "X-Amz-Security-Token", valid_596197
  var valid_596198 = header.getOrDefault("X-Amz-Algorithm")
  valid_596198 = validateParameter(valid_596198, JString, required = false,
                                 default = nil)
  if valid_596198 != nil:
    section.add "X-Amz-Algorithm", valid_596198
  var valid_596199 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596199 = validateParameter(valid_596199, JString, required = false,
                                 default = nil)
  if valid_596199 != nil:
    section.add "X-Amz-SignedHeaders", valid_596199
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_596200 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_596200 = validateParameter(valid_596200, JString, required = true,
                                 default = nil)
  if valid_596200 != nil:
    section.add "DBClusterEndpointIdentifier", valid_596200
  var valid_596201 = formData.getOrDefault("StaticMembers")
  valid_596201 = validateParameter(valid_596201, JArray, required = false,
                                 default = nil)
  if valid_596201 != nil:
    section.add "StaticMembers", valid_596201
  var valid_596202 = formData.getOrDefault("EndpointType")
  valid_596202 = validateParameter(valid_596202, JString, required = false,
                                 default = nil)
  if valid_596202 != nil:
    section.add "EndpointType", valid_596202
  var valid_596203 = formData.getOrDefault("ExcludedMembers")
  valid_596203 = validateParameter(valid_596203, JArray, required = false,
                                 default = nil)
  if valid_596203 != nil:
    section.add "ExcludedMembers", valid_596203
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596204: Call_PostModifyDBClusterEndpoint_596188; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596204.validator(path, query, header, formData, body)
  let scheme = call_596204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596204.url(scheme.get, call_596204.host, call_596204.base,
                         call_596204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596204, url, valid)

proc call*(call_596205: Call_PostModifyDBClusterEndpoint_596188;
          DBClusterEndpointIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "ModifyDBClusterEndpoint"; EndpointType: string = "";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_596206 = newJObject()
  var formData_596207 = newJObject()
  add(formData_596207, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_596207.add "StaticMembers", StaticMembers
  add(query_596206, "Action", newJString(Action))
  add(formData_596207, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_596207.add "ExcludedMembers", ExcludedMembers
  add(query_596206, "Version", newJString(Version))
  result = call_596205.call(nil, query_596206, nil, formData_596207, nil)

var postModifyDBClusterEndpoint* = Call_PostModifyDBClusterEndpoint_596188(
    name: "postModifyDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_PostModifyDBClusterEndpoint_596189, base: "/",
    url: url_PostModifyDBClusterEndpoint_596190,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterEndpoint_596169 = ref object of OpenApiRestCall_592348
proc url_GetModifyDBClusterEndpoint_596171(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterEndpoint_596170(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_596172 = query.getOrDefault("ExcludedMembers")
  valid_596172 = validateParameter(valid_596172, JArray, required = false,
                                 default = nil)
  if valid_596172 != nil:
    section.add "ExcludedMembers", valid_596172
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_596173 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_596173 = validateParameter(valid_596173, JString, required = true,
                                 default = nil)
  if valid_596173 != nil:
    section.add "DBClusterEndpointIdentifier", valid_596173
  var valid_596174 = query.getOrDefault("StaticMembers")
  valid_596174 = validateParameter(valid_596174, JArray, required = false,
                                 default = nil)
  if valid_596174 != nil:
    section.add "StaticMembers", valid_596174
  var valid_596175 = query.getOrDefault("EndpointType")
  valid_596175 = validateParameter(valid_596175, JString, required = false,
                                 default = nil)
  if valid_596175 != nil:
    section.add "EndpointType", valid_596175
  var valid_596176 = query.getOrDefault("Action")
  valid_596176 = validateParameter(valid_596176, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_596176 != nil:
    section.add "Action", valid_596176
  var valid_596177 = query.getOrDefault("Version")
  valid_596177 = validateParameter(valid_596177, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596177 != nil:
    section.add "Version", valid_596177
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596178 = header.getOrDefault("X-Amz-Signature")
  valid_596178 = validateParameter(valid_596178, JString, required = false,
                                 default = nil)
  if valid_596178 != nil:
    section.add "X-Amz-Signature", valid_596178
  var valid_596179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596179 = validateParameter(valid_596179, JString, required = false,
                                 default = nil)
  if valid_596179 != nil:
    section.add "X-Amz-Content-Sha256", valid_596179
  var valid_596180 = header.getOrDefault("X-Amz-Date")
  valid_596180 = validateParameter(valid_596180, JString, required = false,
                                 default = nil)
  if valid_596180 != nil:
    section.add "X-Amz-Date", valid_596180
  var valid_596181 = header.getOrDefault("X-Amz-Credential")
  valid_596181 = validateParameter(valid_596181, JString, required = false,
                                 default = nil)
  if valid_596181 != nil:
    section.add "X-Amz-Credential", valid_596181
  var valid_596182 = header.getOrDefault("X-Amz-Security-Token")
  valid_596182 = validateParameter(valid_596182, JString, required = false,
                                 default = nil)
  if valid_596182 != nil:
    section.add "X-Amz-Security-Token", valid_596182
  var valid_596183 = header.getOrDefault("X-Amz-Algorithm")
  valid_596183 = validateParameter(valid_596183, JString, required = false,
                                 default = nil)
  if valid_596183 != nil:
    section.add "X-Amz-Algorithm", valid_596183
  var valid_596184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596184 = validateParameter(valid_596184, JString, required = false,
                                 default = nil)
  if valid_596184 != nil:
    section.add "X-Amz-SignedHeaders", valid_596184
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596185: Call_GetModifyDBClusterEndpoint_596169; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596185.validator(path, query, header, formData, body)
  let scheme = call_596185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596185.url(scheme.get, call_596185.host, call_596185.base,
                         call_596185.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596185, url, valid)

proc call*(call_596186: Call_GetModifyDBClusterEndpoint_596169;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          StaticMembers: JsonNode = nil; EndpointType: string = "";
          Action: string = "ModifyDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596187 = newJObject()
  if ExcludedMembers != nil:
    query_596187.add "ExcludedMembers", ExcludedMembers
  add(query_596187, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_596187.add "StaticMembers", StaticMembers
  add(query_596187, "EndpointType", newJString(EndpointType))
  add(query_596187, "Action", newJString(Action))
  add(query_596187, "Version", newJString(Version))
  result = call_596186.call(nil, query_596187, nil, nil, nil)

var getModifyDBClusterEndpoint* = Call_GetModifyDBClusterEndpoint_596169(
    name: "getModifyDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_GetModifyDBClusterEndpoint_596170, base: "/",
    url: url_GetModifyDBClusterEndpoint_596171,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_596225 = ref object of OpenApiRestCall_592348
proc url_PostModifyDBClusterParameterGroup_596227(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_596226(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596228 = query.getOrDefault("Action")
  valid_596228 = validateParameter(valid_596228, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_596228 != nil:
    section.add "Action", valid_596228
  var valid_596229 = query.getOrDefault("Version")
  valid_596229 = validateParameter(valid_596229, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596229 != nil:
    section.add "Version", valid_596229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596230 = header.getOrDefault("X-Amz-Signature")
  valid_596230 = validateParameter(valid_596230, JString, required = false,
                                 default = nil)
  if valid_596230 != nil:
    section.add "X-Amz-Signature", valid_596230
  var valid_596231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596231 = validateParameter(valid_596231, JString, required = false,
                                 default = nil)
  if valid_596231 != nil:
    section.add "X-Amz-Content-Sha256", valid_596231
  var valid_596232 = header.getOrDefault("X-Amz-Date")
  valid_596232 = validateParameter(valid_596232, JString, required = false,
                                 default = nil)
  if valid_596232 != nil:
    section.add "X-Amz-Date", valid_596232
  var valid_596233 = header.getOrDefault("X-Amz-Credential")
  valid_596233 = validateParameter(valid_596233, JString, required = false,
                                 default = nil)
  if valid_596233 != nil:
    section.add "X-Amz-Credential", valid_596233
  var valid_596234 = header.getOrDefault("X-Amz-Security-Token")
  valid_596234 = validateParameter(valid_596234, JString, required = false,
                                 default = nil)
  if valid_596234 != nil:
    section.add "X-Amz-Security-Token", valid_596234
  var valid_596235 = header.getOrDefault("X-Amz-Algorithm")
  valid_596235 = validateParameter(valid_596235, JString, required = false,
                                 default = nil)
  if valid_596235 != nil:
    section.add "X-Amz-Algorithm", valid_596235
  var valid_596236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596236 = validateParameter(valid_596236, JString, required = false,
                                 default = nil)
  if valid_596236 != nil:
    section.add "X-Amz-SignedHeaders", valid_596236
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_596237 = formData.getOrDefault("Parameters")
  valid_596237 = validateParameter(valid_596237, JArray, required = true, default = nil)
  if valid_596237 != nil:
    section.add "Parameters", valid_596237
  var valid_596238 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_596238 = validateParameter(valid_596238, JString, required = true,
                                 default = nil)
  if valid_596238 != nil:
    section.add "DBClusterParameterGroupName", valid_596238
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596239: Call_PostModifyDBClusterParameterGroup_596225;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596239.validator(path, query, header, formData, body)
  let scheme = call_596239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596239.url(scheme.get, call_596239.host, call_596239.base,
                         call_596239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596239, url, valid)

proc call*(call_596240: Call_PostModifyDBClusterParameterGroup_596225;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_596241 = newJObject()
  var formData_596242 = newJObject()
  add(query_596241, "Action", newJString(Action))
  if Parameters != nil:
    formData_596242.add "Parameters", Parameters
  add(formData_596242, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_596241, "Version", newJString(Version))
  result = call_596240.call(nil, query_596241, nil, formData_596242, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_596225(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_596226, base: "/",
    url: url_PostModifyDBClusterParameterGroup_596227,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_596208 = ref object of OpenApiRestCall_592348
proc url_GetModifyDBClusterParameterGroup_596210(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_596209(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Parameters` field"
  var valid_596211 = query.getOrDefault("Parameters")
  valid_596211 = validateParameter(valid_596211, JArray, required = true, default = nil)
  if valid_596211 != nil:
    section.add "Parameters", valid_596211
  var valid_596212 = query.getOrDefault("DBClusterParameterGroupName")
  valid_596212 = validateParameter(valid_596212, JString, required = true,
                                 default = nil)
  if valid_596212 != nil:
    section.add "DBClusterParameterGroupName", valid_596212
  var valid_596213 = query.getOrDefault("Action")
  valid_596213 = validateParameter(valid_596213, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_596213 != nil:
    section.add "Action", valid_596213
  var valid_596214 = query.getOrDefault("Version")
  valid_596214 = validateParameter(valid_596214, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596214 != nil:
    section.add "Version", valid_596214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596215 = header.getOrDefault("X-Amz-Signature")
  valid_596215 = validateParameter(valid_596215, JString, required = false,
                                 default = nil)
  if valid_596215 != nil:
    section.add "X-Amz-Signature", valid_596215
  var valid_596216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596216 = validateParameter(valid_596216, JString, required = false,
                                 default = nil)
  if valid_596216 != nil:
    section.add "X-Amz-Content-Sha256", valid_596216
  var valid_596217 = header.getOrDefault("X-Amz-Date")
  valid_596217 = validateParameter(valid_596217, JString, required = false,
                                 default = nil)
  if valid_596217 != nil:
    section.add "X-Amz-Date", valid_596217
  var valid_596218 = header.getOrDefault("X-Amz-Credential")
  valid_596218 = validateParameter(valid_596218, JString, required = false,
                                 default = nil)
  if valid_596218 != nil:
    section.add "X-Amz-Credential", valid_596218
  var valid_596219 = header.getOrDefault("X-Amz-Security-Token")
  valid_596219 = validateParameter(valid_596219, JString, required = false,
                                 default = nil)
  if valid_596219 != nil:
    section.add "X-Amz-Security-Token", valid_596219
  var valid_596220 = header.getOrDefault("X-Amz-Algorithm")
  valid_596220 = validateParameter(valid_596220, JString, required = false,
                                 default = nil)
  if valid_596220 != nil:
    section.add "X-Amz-Algorithm", valid_596220
  var valid_596221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596221 = validateParameter(valid_596221, JString, required = false,
                                 default = nil)
  if valid_596221 != nil:
    section.add "X-Amz-SignedHeaders", valid_596221
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596222: Call_GetModifyDBClusterParameterGroup_596208;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596222.validator(path, query, header, formData, body)
  let scheme = call_596222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596222.url(scheme.get, call_596222.host, call_596222.base,
                         call_596222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596222, url, valid)

proc call*(call_596223: Call_GetModifyDBClusterParameterGroup_596208;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596224 = newJObject()
  if Parameters != nil:
    query_596224.add "Parameters", Parameters
  add(query_596224, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_596224, "Action", newJString(Action))
  add(query_596224, "Version", newJString(Version))
  result = call_596223.call(nil, query_596224, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_596208(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_596209, base: "/",
    url: url_GetModifyDBClusterParameterGroup_596210,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_596262 = ref object of OpenApiRestCall_592348
proc url_PostModifyDBClusterSnapshotAttribute_596264(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_596263(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596265 = query.getOrDefault("Action")
  valid_596265 = validateParameter(valid_596265, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_596265 != nil:
    section.add "Action", valid_596265
  var valid_596266 = query.getOrDefault("Version")
  valid_596266 = validateParameter(valid_596266, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596266 != nil:
    section.add "Version", valid_596266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596267 = header.getOrDefault("X-Amz-Signature")
  valid_596267 = validateParameter(valid_596267, JString, required = false,
                                 default = nil)
  if valid_596267 != nil:
    section.add "X-Amz-Signature", valid_596267
  var valid_596268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596268 = validateParameter(valid_596268, JString, required = false,
                                 default = nil)
  if valid_596268 != nil:
    section.add "X-Amz-Content-Sha256", valid_596268
  var valid_596269 = header.getOrDefault("X-Amz-Date")
  valid_596269 = validateParameter(valid_596269, JString, required = false,
                                 default = nil)
  if valid_596269 != nil:
    section.add "X-Amz-Date", valid_596269
  var valid_596270 = header.getOrDefault("X-Amz-Credential")
  valid_596270 = validateParameter(valid_596270, JString, required = false,
                                 default = nil)
  if valid_596270 != nil:
    section.add "X-Amz-Credential", valid_596270
  var valid_596271 = header.getOrDefault("X-Amz-Security-Token")
  valid_596271 = validateParameter(valid_596271, JString, required = false,
                                 default = nil)
  if valid_596271 != nil:
    section.add "X-Amz-Security-Token", valid_596271
  var valid_596272 = header.getOrDefault("X-Amz-Algorithm")
  valid_596272 = validateParameter(valid_596272, JString, required = false,
                                 default = nil)
  if valid_596272 != nil:
    section.add "X-Amz-Algorithm", valid_596272
  var valid_596273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596273 = validateParameter(valid_596273, JString, required = false,
                                 default = nil)
  if valid_596273 != nil:
    section.add "X-Amz-SignedHeaders", valid_596273
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_596274 = formData.getOrDefault("AttributeName")
  valid_596274 = validateParameter(valid_596274, JString, required = true,
                                 default = nil)
  if valid_596274 != nil:
    section.add "AttributeName", valid_596274
  var valid_596275 = formData.getOrDefault("ValuesToAdd")
  valid_596275 = validateParameter(valid_596275, JArray, required = false,
                                 default = nil)
  if valid_596275 != nil:
    section.add "ValuesToAdd", valid_596275
  var valid_596276 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_596276 = validateParameter(valid_596276, JString, required = true,
                                 default = nil)
  if valid_596276 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_596276
  var valid_596277 = formData.getOrDefault("ValuesToRemove")
  valid_596277 = validateParameter(valid_596277, JArray, required = false,
                                 default = nil)
  if valid_596277 != nil:
    section.add "ValuesToRemove", valid_596277
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596278: Call_PostModifyDBClusterSnapshotAttribute_596262;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596278.validator(path, query, header, formData, body)
  let scheme = call_596278.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596278.url(scheme.get, call_596278.host, call_596278.base,
                         call_596278.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596278, url, valid)

proc call*(call_596279: Call_PostModifyDBClusterSnapshotAttribute_596262;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_596280 = newJObject()
  var formData_596281 = newJObject()
  add(formData_596281, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_596281.add "ValuesToAdd", ValuesToAdd
  add(formData_596281, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_596280, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_596281.add "ValuesToRemove", ValuesToRemove
  add(query_596280, "Version", newJString(Version))
  result = call_596279.call(nil, query_596280, nil, formData_596281, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_596262(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_596263, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_596264,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_596243 = ref object of OpenApiRestCall_592348
proc url_GetModifyDBClusterSnapshotAttribute_596245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_596244(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596246 = query.getOrDefault("ValuesToRemove")
  valid_596246 = validateParameter(valid_596246, JArray, required = false,
                                 default = nil)
  if valid_596246 != nil:
    section.add "ValuesToRemove", valid_596246
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_596247 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_596247 = validateParameter(valid_596247, JString, required = true,
                                 default = nil)
  if valid_596247 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_596247
  var valid_596248 = query.getOrDefault("Action")
  valid_596248 = validateParameter(valid_596248, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_596248 != nil:
    section.add "Action", valid_596248
  var valid_596249 = query.getOrDefault("AttributeName")
  valid_596249 = validateParameter(valid_596249, JString, required = true,
                                 default = nil)
  if valid_596249 != nil:
    section.add "AttributeName", valid_596249
  var valid_596250 = query.getOrDefault("ValuesToAdd")
  valid_596250 = validateParameter(valid_596250, JArray, required = false,
                                 default = nil)
  if valid_596250 != nil:
    section.add "ValuesToAdd", valid_596250
  var valid_596251 = query.getOrDefault("Version")
  valid_596251 = validateParameter(valid_596251, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596251 != nil:
    section.add "Version", valid_596251
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596252 = header.getOrDefault("X-Amz-Signature")
  valid_596252 = validateParameter(valid_596252, JString, required = false,
                                 default = nil)
  if valid_596252 != nil:
    section.add "X-Amz-Signature", valid_596252
  var valid_596253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596253 = validateParameter(valid_596253, JString, required = false,
                                 default = nil)
  if valid_596253 != nil:
    section.add "X-Amz-Content-Sha256", valid_596253
  var valid_596254 = header.getOrDefault("X-Amz-Date")
  valid_596254 = validateParameter(valid_596254, JString, required = false,
                                 default = nil)
  if valid_596254 != nil:
    section.add "X-Amz-Date", valid_596254
  var valid_596255 = header.getOrDefault("X-Amz-Credential")
  valid_596255 = validateParameter(valid_596255, JString, required = false,
                                 default = nil)
  if valid_596255 != nil:
    section.add "X-Amz-Credential", valid_596255
  var valid_596256 = header.getOrDefault("X-Amz-Security-Token")
  valid_596256 = validateParameter(valid_596256, JString, required = false,
                                 default = nil)
  if valid_596256 != nil:
    section.add "X-Amz-Security-Token", valid_596256
  var valid_596257 = header.getOrDefault("X-Amz-Algorithm")
  valid_596257 = validateParameter(valid_596257, JString, required = false,
                                 default = nil)
  if valid_596257 != nil:
    section.add "X-Amz-Algorithm", valid_596257
  var valid_596258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596258 = validateParameter(valid_596258, JString, required = false,
                                 default = nil)
  if valid_596258 != nil:
    section.add "X-Amz-SignedHeaders", valid_596258
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596259: Call_GetModifyDBClusterSnapshotAttribute_596243;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596259.validator(path, query, header, formData, body)
  let scheme = call_596259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596259.url(scheme.get, call_596259.host, call_596259.base,
                         call_596259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596259, url, valid)

proc call*(call_596260: Call_GetModifyDBClusterSnapshotAttribute_596243;
          DBClusterSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToAdd: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_596261 = newJObject()
  if ValuesToRemove != nil:
    query_596261.add "ValuesToRemove", ValuesToRemove
  add(query_596261, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_596261, "Action", newJString(Action))
  add(query_596261, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_596261.add "ValuesToAdd", ValuesToAdd
  add(query_596261, "Version", newJString(Version))
  result = call_596260.call(nil, query_596261, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_596243(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_596244, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_596245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_596339 = ref object of OpenApiRestCall_592348
proc url_PostModifyDBInstance_596341(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBInstance_596340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596342 = query.getOrDefault("Action")
  valid_596342 = validateParameter(valid_596342, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_596342 != nil:
    section.add "Action", valid_596342
  var valid_596343 = query.getOrDefault("Version")
  valid_596343 = validateParameter(valid_596343, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596343 != nil:
    section.add "Version", valid_596343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_596344 = header.getOrDefault("X-Amz-Security-Token")
  valid_596344 = validateParameter(valid_596344, JString, required = false,
                                 default = nil)
  if valid_596344 != nil:
    section.add "X-Amz-Security-Token", valid_596344
  var valid_596345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596345 = validateParameter(valid_596345, JString, required = false,
                                 default = nil)
  if valid_596345 != nil:
    section.add "X-Amz-SignedHeaders", valid_596345
  var valid_596346 = header.getOrDefault("X-Amz-Signature")
  valid_596346 = validateParameter(valid_596346, JString, required = false,
                                 default = nil)
  if valid_596346 != nil:
    section.add "X-Amz-Signature", valid_596346
  var valid_596347 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596347 = validateParameter(valid_596347, JString, required = false,
                                 default = nil)
  if valid_596347 != nil:
    section.add "X-Amz-Content-Sha256", valid_596347
  var valid_596348 = header.getOrDefault("X-Amz-Date")
  valid_596348 = validateParameter(valid_596348, JString, required = false,
                                 default = nil)
  if valid_596348 != nil:
    section.add "X-Amz-Date", valid_596348
  var valid_596349 = header.getOrDefault("X-Amz-Credential")
  valid_596349 = validateParameter(valid_596349, JString, required = false,
                                 default = nil)
  if valid_596349 != nil:
    section.add "X-Amz-Credential", valid_596349
  var valid_596350 = header.getOrDefault("X-Amz-Algorithm")
  valid_596350 = validateParameter(valid_596350, JString, required = false,
                                 default = nil)
  if valid_596350 != nil:
    section.add "X-Amz-Algorithm", valid_596350
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  section = newJObject()
  var valid_596351 = formData.getOrDefault("PromotionTier")
  valid_596351 = validateParameter(valid_596351, JInt, required = false, default = nil)
  if valid_596351 != nil:
    section.add "PromotionTier", valid_596351
  var valid_596352 = formData.getOrDefault("MultiAZ")
  valid_596352 = validateParameter(valid_596352, JBool, required = false, default = nil)
  if valid_596352 != nil:
    section.add "MultiAZ", valid_596352
  var valid_596353 = formData.getOrDefault("MonitoringRoleArn")
  valid_596353 = validateParameter(valid_596353, JString, required = false,
                                 default = nil)
  if valid_596353 != nil:
    section.add "MonitoringRoleArn", valid_596353
  var valid_596354 = formData.getOrDefault("CACertificateIdentifier")
  valid_596354 = validateParameter(valid_596354, JString, required = false,
                                 default = nil)
  if valid_596354 != nil:
    section.add "CACertificateIdentifier", valid_596354
  var valid_596355 = formData.getOrDefault("MonitoringInterval")
  valid_596355 = validateParameter(valid_596355, JInt, required = false, default = nil)
  if valid_596355 != nil:
    section.add "MonitoringInterval", valid_596355
  var valid_596356 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_596356 = validateParameter(valid_596356, JArray, required = false,
                                 default = nil)
  if valid_596356 != nil:
    section.add "VpcSecurityGroupIds", valid_596356
  var valid_596357 = formData.getOrDefault("EnablePerformanceInsights")
  valid_596357 = validateParameter(valid_596357, JBool, required = false, default = nil)
  if valid_596357 != nil:
    section.add "EnablePerformanceInsights", valid_596357
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_596358 = formData.getOrDefault("DBInstanceIdentifier")
  valid_596358 = validateParameter(valid_596358, JString, required = true,
                                 default = nil)
  if valid_596358 != nil:
    section.add "DBInstanceIdentifier", valid_596358
  var valid_596359 = formData.getOrDefault("TdeCredentialArn")
  valid_596359 = validateParameter(valid_596359, JString, required = false,
                                 default = nil)
  if valid_596359 != nil:
    section.add "TdeCredentialArn", valid_596359
  var valid_596360 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_596360 = validateParameter(valid_596360, JInt, required = false, default = nil)
  if valid_596360 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_596360
  var valid_596361 = formData.getOrDefault("DBSubnetGroupName")
  valid_596361 = validateParameter(valid_596361, JString, required = false,
                                 default = nil)
  if valid_596361 != nil:
    section.add "DBSubnetGroupName", valid_596361
  var valid_596362 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_596362 = validateParameter(valid_596362, JBool, required = false, default = nil)
  if valid_596362 != nil:
    section.add "AllowMajorVersionUpgrade", valid_596362
  var valid_596363 = formData.getOrDefault("StorageType")
  valid_596363 = validateParameter(valid_596363, JString, required = false,
                                 default = nil)
  if valid_596363 != nil:
    section.add "StorageType", valid_596363
  var valid_596364 = formData.getOrDefault("MaxAllocatedStorage")
  valid_596364 = validateParameter(valid_596364, JInt, required = false, default = nil)
  if valid_596364 != nil:
    section.add "MaxAllocatedStorage", valid_596364
  var valid_596365 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_596365 = validateParameter(valid_596365, JBool, required = false, default = nil)
  if valid_596365 != nil:
    section.add "CopyTagsToSnapshot", valid_596365
  var valid_596366 = formData.getOrDefault("DeletionProtection")
  valid_596366 = validateParameter(valid_596366, JBool, required = false, default = nil)
  if valid_596366 != nil:
    section.add "DeletionProtection", valid_596366
  var valid_596367 = formData.getOrDefault("ProcessorFeatures")
  valid_596367 = validateParameter(valid_596367, JArray, required = false,
                                 default = nil)
  if valid_596367 != nil:
    section.add "ProcessorFeatures", valid_596367
  var valid_596368 = formData.getOrDefault("AllocatedStorage")
  valid_596368 = validateParameter(valid_596368, JInt, required = false, default = nil)
  if valid_596368 != nil:
    section.add "AllocatedStorage", valid_596368
  var valid_596369 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_596369 = validateParameter(valid_596369, JString, required = false,
                                 default = nil)
  if valid_596369 != nil:
    section.add "PreferredMaintenanceWindow", valid_596369
  var valid_596370 = formData.getOrDefault("DBInstanceClass")
  valid_596370 = validateParameter(valid_596370, JString, required = false,
                                 default = nil)
  if valid_596370 != nil:
    section.add "DBInstanceClass", valid_596370
  var valid_596371 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_596371 = validateParameter(valid_596371, JBool, required = false, default = nil)
  if valid_596371 != nil:
    section.add "UseDefaultProcessorFeatures", valid_596371
  var valid_596372 = formData.getOrDefault("PreferredBackupWindow")
  valid_596372 = validateParameter(valid_596372, JString, required = false,
                                 default = nil)
  if valid_596372 != nil:
    section.add "PreferredBackupWindow", valid_596372
  var valid_596373 = formData.getOrDefault("MasterUserPassword")
  valid_596373 = validateParameter(valid_596373, JString, required = false,
                                 default = nil)
  if valid_596373 != nil:
    section.add "MasterUserPassword", valid_596373
  var valid_596374 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_596374 = validateParameter(valid_596374, JArray, required = false,
                                 default = nil)
  if valid_596374 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_596374
  var valid_596375 = formData.getOrDefault("Domain")
  valid_596375 = validateParameter(valid_596375, JString, required = false,
                                 default = nil)
  if valid_596375 != nil:
    section.add "Domain", valid_596375
  var valid_596376 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_596376 = validateParameter(valid_596376, JArray, required = false,
                                 default = nil)
  if valid_596376 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_596376
  var valid_596377 = formData.getOrDefault("DBParameterGroupName")
  valid_596377 = validateParameter(valid_596377, JString, required = false,
                                 default = nil)
  if valid_596377 != nil:
    section.add "DBParameterGroupName", valid_596377
  var valid_596378 = formData.getOrDefault("EngineVersion")
  valid_596378 = validateParameter(valid_596378, JString, required = false,
                                 default = nil)
  if valid_596378 != nil:
    section.add "EngineVersion", valid_596378
  var valid_596379 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_596379 = validateParameter(valid_596379, JBool, required = false, default = nil)
  if valid_596379 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_596379
  var valid_596380 = formData.getOrDefault("BackupRetentionPeriod")
  valid_596380 = validateParameter(valid_596380, JInt, required = false, default = nil)
  if valid_596380 != nil:
    section.add "BackupRetentionPeriod", valid_596380
  var valid_596381 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_596381 = validateParameter(valid_596381, JBool, required = false, default = nil)
  if valid_596381 != nil:
    section.add "AutoMinorVersionUpgrade", valid_596381
  var valid_596382 = formData.getOrDefault("TdeCredentialPassword")
  valid_596382 = validateParameter(valid_596382, JString, required = false,
                                 default = nil)
  if valid_596382 != nil:
    section.add "TdeCredentialPassword", valid_596382
  var valid_596383 = formData.getOrDefault("ApplyImmediately")
  valid_596383 = validateParameter(valid_596383, JBool, required = false, default = nil)
  if valid_596383 != nil:
    section.add "ApplyImmediately", valid_596383
  var valid_596384 = formData.getOrDefault("Iops")
  valid_596384 = validateParameter(valid_596384, JInt, required = false, default = nil)
  if valid_596384 != nil:
    section.add "Iops", valid_596384
  var valid_596385 = formData.getOrDefault("PubliclyAccessible")
  valid_596385 = validateParameter(valid_596385, JBool, required = false, default = nil)
  if valid_596385 != nil:
    section.add "PubliclyAccessible", valid_596385
  var valid_596386 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_596386 = validateParameter(valid_596386, JString, required = false,
                                 default = nil)
  if valid_596386 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_596386
  var valid_596387 = formData.getOrDefault("LicenseModel")
  valid_596387 = validateParameter(valid_596387, JString, required = false,
                                 default = nil)
  if valid_596387 != nil:
    section.add "LicenseModel", valid_596387
  var valid_596388 = formData.getOrDefault("DomainIAMRoleName")
  valid_596388 = validateParameter(valid_596388, JString, required = false,
                                 default = nil)
  if valid_596388 != nil:
    section.add "DomainIAMRoleName", valid_596388
  var valid_596389 = formData.getOrDefault("OptionGroupName")
  valid_596389 = validateParameter(valid_596389, JString, required = false,
                                 default = nil)
  if valid_596389 != nil:
    section.add "OptionGroupName", valid_596389
  var valid_596390 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_596390 = validateParameter(valid_596390, JString, required = false,
                                 default = nil)
  if valid_596390 != nil:
    section.add "NewDBInstanceIdentifier", valid_596390
  var valid_596391 = formData.getOrDefault("DBSecurityGroups")
  valid_596391 = validateParameter(valid_596391, JArray, required = false,
                                 default = nil)
  if valid_596391 != nil:
    section.add "DBSecurityGroups", valid_596391
  var valid_596392 = formData.getOrDefault("DBPortNumber")
  valid_596392 = validateParameter(valid_596392, JInt, required = false, default = nil)
  if valid_596392 != nil:
    section.add "DBPortNumber", valid_596392
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596393: Call_PostModifyDBInstance_596339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_596393.validator(path, query, header, formData, body)
  let scheme = call_596393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596393.url(scheme.get, call_596393.host, call_596393.base,
                         call_596393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596393, url, valid)

proc call*(call_596394: Call_PostModifyDBInstance_596339;
          DBInstanceIdentifier: string; PromotionTier: int = 0; MultiAZ: bool = false;
          MonitoringRoleArn: string = ""; CACertificateIdentifier: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnablePerformanceInsights: bool = false; TdeCredentialArn: string = "";
          Action: string = "ModifyDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; AllowMajorVersionUpgrade: bool = false;
          StorageType: string = ""; MaxAllocatedStorage: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = ""; DBInstanceClass: string = "";
          UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Domain: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; AutoMinorVersionUpgrade: bool = false;
          TdeCredentialPassword: string = ""; ApplyImmediately: bool = false;
          Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          DomainIAMRoleName: string = ""; OptionGroupName: string = "";
          NewDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; DBPortNumber: int = 0): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  var query_596395 = newJObject()
  var formData_596396 = newJObject()
  add(formData_596396, "PromotionTier", newJInt(PromotionTier))
  add(formData_596396, "MultiAZ", newJBool(MultiAZ))
  add(formData_596396, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_596396, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_596396, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_596396.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_596396, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_596396, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_596396, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_596395, "Action", newJString(Action))
  add(formData_596396, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_596396, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_596396, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_596396, "StorageType", newJString(StorageType))
  add(formData_596396, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_596396, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_596396, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_596396.add "ProcessorFeatures", ProcessorFeatures
  add(formData_596396, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_596396, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_596396, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_596396, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_596396, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_596396, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_596396.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_596396, "Domain", newJString(Domain))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_596396.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_596396, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_596396, "EngineVersion", newJString(EngineVersion))
  add(formData_596396, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_596396, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_596396, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_596396, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_596396, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_596396, "Iops", newJInt(Iops))
  add(formData_596396, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_596396, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_596396, "LicenseModel", newJString(LicenseModel))
  add(formData_596396, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_596396, "OptionGroupName", newJString(OptionGroupName))
  add(formData_596396, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_596395, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_596396.add "DBSecurityGroups", DBSecurityGroups
  add(formData_596396, "DBPortNumber", newJInt(DBPortNumber))
  result = call_596394.call(nil, query_596395, nil, formData_596396, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_596339(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_596340, base: "/",
    url: url_PostModifyDBInstance_596341, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_596282 = ref object of OpenApiRestCall_592348
proc url_GetModifyDBInstance_596284(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBInstance_596283(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  section = newJObject()
  var valid_596285 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_596285 = validateParameter(valid_596285, JBool, required = false, default = nil)
  if valid_596285 != nil:
    section.add "UseDefaultProcessorFeatures", valid_596285
  var valid_596286 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_596286 = validateParameter(valid_596286, JInt, required = false, default = nil)
  if valid_596286 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_596286
  var valid_596287 = query.getOrDefault("CopyTagsToSnapshot")
  valid_596287 = validateParameter(valid_596287, JBool, required = false, default = nil)
  if valid_596287 != nil:
    section.add "CopyTagsToSnapshot", valid_596287
  var valid_596288 = query.getOrDefault("MonitoringInterval")
  valid_596288 = validateParameter(valid_596288, JInt, required = false, default = nil)
  if valid_596288 != nil:
    section.add "MonitoringInterval", valid_596288
  var valid_596289 = query.getOrDefault("MonitoringRoleArn")
  valid_596289 = validateParameter(valid_596289, JString, required = false,
                                 default = nil)
  if valid_596289 != nil:
    section.add "MonitoringRoleArn", valid_596289
  var valid_596290 = query.getOrDefault("DBPortNumber")
  valid_596290 = validateParameter(valid_596290, JInt, required = false, default = nil)
  if valid_596290 != nil:
    section.add "DBPortNumber", valid_596290
  var valid_596291 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_596291 = validateParameter(valid_596291, JArray, required = false,
                                 default = nil)
  if valid_596291 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_596291
  var valid_596292 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_596292 = validateParameter(valid_596292, JArray, required = false,
                                 default = nil)
  if valid_596292 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_596292
  var valid_596293 = query.getOrDefault("ProcessorFeatures")
  valid_596293 = validateParameter(valid_596293, JArray, required = false,
                                 default = nil)
  if valid_596293 != nil:
    section.add "ProcessorFeatures", valid_596293
  var valid_596294 = query.getOrDefault("BackupRetentionPeriod")
  valid_596294 = validateParameter(valid_596294, JInt, required = false, default = nil)
  if valid_596294 != nil:
    section.add "BackupRetentionPeriod", valid_596294
  var valid_596295 = query.getOrDefault("EngineVersion")
  valid_596295 = validateParameter(valid_596295, JString, required = false,
                                 default = nil)
  if valid_596295 != nil:
    section.add "EngineVersion", valid_596295
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596296 = query.getOrDefault("Action")
  valid_596296 = validateParameter(valid_596296, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_596296 != nil:
    section.add "Action", valid_596296
  var valid_596297 = query.getOrDefault("Domain")
  valid_596297 = validateParameter(valid_596297, JString, required = false,
                                 default = nil)
  if valid_596297 != nil:
    section.add "Domain", valid_596297
  var valid_596298 = query.getOrDefault("VpcSecurityGroupIds")
  valid_596298 = validateParameter(valid_596298, JArray, required = false,
                                 default = nil)
  if valid_596298 != nil:
    section.add "VpcSecurityGroupIds", valid_596298
  var valid_596299 = query.getOrDefault("AllocatedStorage")
  valid_596299 = validateParameter(valid_596299, JInt, required = false, default = nil)
  if valid_596299 != nil:
    section.add "AllocatedStorage", valid_596299
  var valid_596300 = query.getOrDefault("EnablePerformanceInsights")
  valid_596300 = validateParameter(valid_596300, JBool, required = false, default = nil)
  if valid_596300 != nil:
    section.add "EnablePerformanceInsights", valid_596300
  var valid_596301 = query.getOrDefault("PubliclyAccessible")
  valid_596301 = validateParameter(valid_596301, JBool, required = false, default = nil)
  if valid_596301 != nil:
    section.add "PubliclyAccessible", valid_596301
  var valid_596302 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_596302 = validateParameter(valid_596302, JString, required = false,
                                 default = nil)
  if valid_596302 != nil:
    section.add "NewDBInstanceIdentifier", valid_596302
  var valid_596303 = query.getOrDefault("TdeCredentialPassword")
  valid_596303 = validateParameter(valid_596303, JString, required = false,
                                 default = nil)
  if valid_596303 != nil:
    section.add "TdeCredentialPassword", valid_596303
  var valid_596304 = query.getOrDefault("DeletionProtection")
  valid_596304 = validateParameter(valid_596304, JBool, required = false, default = nil)
  if valid_596304 != nil:
    section.add "DeletionProtection", valid_596304
  var valid_596305 = query.getOrDefault("DBParameterGroupName")
  valid_596305 = validateParameter(valid_596305, JString, required = false,
                                 default = nil)
  if valid_596305 != nil:
    section.add "DBParameterGroupName", valid_596305
  var valid_596306 = query.getOrDefault("MaxAllocatedStorage")
  valid_596306 = validateParameter(valid_596306, JInt, required = false, default = nil)
  if valid_596306 != nil:
    section.add "MaxAllocatedStorage", valid_596306
  var valid_596307 = query.getOrDefault("LicenseModel")
  valid_596307 = validateParameter(valid_596307, JString, required = false,
                                 default = nil)
  if valid_596307 != nil:
    section.add "LicenseModel", valid_596307
  var valid_596308 = query.getOrDefault("DBInstanceIdentifier")
  valid_596308 = validateParameter(valid_596308, JString, required = true,
                                 default = nil)
  if valid_596308 != nil:
    section.add "DBInstanceIdentifier", valid_596308
  var valid_596309 = query.getOrDefault("TdeCredentialArn")
  valid_596309 = validateParameter(valid_596309, JString, required = false,
                                 default = nil)
  if valid_596309 != nil:
    section.add "TdeCredentialArn", valid_596309
  var valid_596310 = query.getOrDefault("PromotionTier")
  valid_596310 = validateParameter(valid_596310, JInt, required = false, default = nil)
  if valid_596310 != nil:
    section.add "PromotionTier", valid_596310
  var valid_596311 = query.getOrDefault("CACertificateIdentifier")
  valid_596311 = validateParameter(valid_596311, JString, required = false,
                                 default = nil)
  if valid_596311 != nil:
    section.add "CACertificateIdentifier", valid_596311
  var valid_596312 = query.getOrDefault("StorageType")
  valid_596312 = validateParameter(valid_596312, JString, required = false,
                                 default = nil)
  if valid_596312 != nil:
    section.add "StorageType", valid_596312
  var valid_596313 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_596313 = validateParameter(valid_596313, JBool, required = false, default = nil)
  if valid_596313 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_596313
  var valid_596314 = query.getOrDefault("MultiAZ")
  valid_596314 = validateParameter(valid_596314, JBool, required = false, default = nil)
  if valid_596314 != nil:
    section.add "MultiAZ", valid_596314
  var valid_596315 = query.getOrDefault("DBSecurityGroups")
  valid_596315 = validateParameter(valid_596315, JArray, required = false,
                                 default = nil)
  if valid_596315 != nil:
    section.add "DBSecurityGroups", valid_596315
  var valid_596316 = query.getOrDefault("ApplyImmediately")
  valid_596316 = validateParameter(valid_596316, JBool, required = false, default = nil)
  if valid_596316 != nil:
    section.add "ApplyImmediately", valid_596316
  var valid_596317 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_596317 = validateParameter(valid_596317, JBool, required = false, default = nil)
  if valid_596317 != nil:
    section.add "AllowMajorVersionUpgrade", valid_596317
  var valid_596318 = query.getOrDefault("MasterUserPassword")
  valid_596318 = validateParameter(valid_596318, JString, required = false,
                                 default = nil)
  if valid_596318 != nil:
    section.add "MasterUserPassword", valid_596318
  var valid_596319 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_596319 = validateParameter(valid_596319, JString, required = false,
                                 default = nil)
  if valid_596319 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_596319
  var valid_596320 = query.getOrDefault("OptionGroupName")
  valid_596320 = validateParameter(valid_596320, JString, required = false,
                                 default = nil)
  if valid_596320 != nil:
    section.add "OptionGroupName", valid_596320
  var valid_596321 = query.getOrDefault("DBSubnetGroupName")
  valid_596321 = validateParameter(valid_596321, JString, required = false,
                                 default = nil)
  if valid_596321 != nil:
    section.add "DBSubnetGroupName", valid_596321
  var valid_596322 = query.getOrDefault("PreferredBackupWindow")
  valid_596322 = validateParameter(valid_596322, JString, required = false,
                                 default = nil)
  if valid_596322 != nil:
    section.add "PreferredBackupWindow", valid_596322
  var valid_596323 = query.getOrDefault("DBInstanceClass")
  valid_596323 = validateParameter(valid_596323, JString, required = false,
                                 default = nil)
  if valid_596323 != nil:
    section.add "DBInstanceClass", valid_596323
  var valid_596324 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_596324 = validateParameter(valid_596324, JString, required = false,
                                 default = nil)
  if valid_596324 != nil:
    section.add "PreferredMaintenanceWindow", valid_596324
  var valid_596325 = query.getOrDefault("Version")
  valid_596325 = validateParameter(valid_596325, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596325 != nil:
    section.add "Version", valid_596325
  var valid_596326 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_596326 = validateParameter(valid_596326, JBool, required = false, default = nil)
  if valid_596326 != nil:
    section.add "AutoMinorVersionUpgrade", valid_596326
  var valid_596327 = query.getOrDefault("Iops")
  valid_596327 = validateParameter(valid_596327, JInt, required = false, default = nil)
  if valid_596327 != nil:
    section.add "Iops", valid_596327
  var valid_596328 = query.getOrDefault("DomainIAMRoleName")
  valid_596328 = validateParameter(valid_596328, JString, required = false,
                                 default = nil)
  if valid_596328 != nil:
    section.add "DomainIAMRoleName", valid_596328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_596329 = header.getOrDefault("X-Amz-Security-Token")
  valid_596329 = validateParameter(valid_596329, JString, required = false,
                                 default = nil)
  if valid_596329 != nil:
    section.add "X-Amz-Security-Token", valid_596329
  var valid_596330 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596330 = validateParameter(valid_596330, JString, required = false,
                                 default = nil)
  if valid_596330 != nil:
    section.add "X-Amz-SignedHeaders", valid_596330
  var valid_596331 = header.getOrDefault("X-Amz-Signature")
  valid_596331 = validateParameter(valid_596331, JString, required = false,
                                 default = nil)
  if valid_596331 != nil:
    section.add "X-Amz-Signature", valid_596331
  var valid_596332 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596332 = validateParameter(valid_596332, JString, required = false,
                                 default = nil)
  if valid_596332 != nil:
    section.add "X-Amz-Content-Sha256", valid_596332
  var valid_596333 = header.getOrDefault("X-Amz-Date")
  valid_596333 = validateParameter(valid_596333, JString, required = false,
                                 default = nil)
  if valid_596333 != nil:
    section.add "X-Amz-Date", valid_596333
  var valid_596334 = header.getOrDefault("X-Amz-Credential")
  valid_596334 = validateParameter(valid_596334, JString, required = false,
                                 default = nil)
  if valid_596334 != nil:
    section.add "X-Amz-Credential", valid_596334
  var valid_596335 = header.getOrDefault("X-Amz-Algorithm")
  valid_596335 = validateParameter(valid_596335, JString, required = false,
                                 default = nil)
  if valid_596335 != nil:
    section.add "X-Amz-Algorithm", valid_596335
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596336: Call_GetModifyDBInstance_596282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_596336.validator(path, query, header, formData, body)
  let scheme = call_596336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596336.url(scheme.get, call_596336.host, call_596336.base,
                         call_596336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596336, url, valid)

proc call*(call_596337: Call_GetModifyDBInstance_596282;
          DBInstanceIdentifier: string; UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0;
          CopyTagsToSnapshot: bool = false; MonitoringInterval: int = 0;
          MonitoringRoleArn: string = ""; DBPortNumber: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ProcessorFeatures: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EngineVersion: string = ""; Action: string = "ModifyDBInstance";
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AllocatedStorage: int = 0; EnablePerformanceInsights: bool = false;
          PubliclyAccessible: bool = false; NewDBInstanceIdentifier: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          DBParameterGroupName: string = ""; MaxAllocatedStorage: int = 0;
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          PromotionTier: int = 0; CACertificateIdentifier: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil;
          ApplyImmediately: bool = false; AllowMajorVersionUpgrade: bool = false;
          MasterUserPassword: string = ""; PerformanceInsightsKMSKeyId: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = ""; DBInstanceClass: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  var query_596338 = newJObject()
  add(query_596338, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_596338, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_596338, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_596338, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_596338, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_596338, "DBPortNumber", newJInt(DBPortNumber))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_596338.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_596338.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  if ProcessorFeatures != nil:
    query_596338.add "ProcessorFeatures", ProcessorFeatures
  add(query_596338, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_596338, "EngineVersion", newJString(EngineVersion))
  add(query_596338, "Action", newJString(Action))
  add(query_596338, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_596338.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_596338, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_596338, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_596338, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_596338, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_596338, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_596338, "DeletionProtection", newJBool(DeletionProtection))
  add(query_596338, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_596338, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_596338, "LicenseModel", newJString(LicenseModel))
  add(query_596338, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_596338, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_596338, "PromotionTier", newJInt(PromotionTier))
  add(query_596338, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_596338, "StorageType", newJString(StorageType))
  add(query_596338, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_596338, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_596338.add "DBSecurityGroups", DBSecurityGroups
  add(query_596338, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_596338, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_596338, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_596338, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_596338, "OptionGroupName", newJString(OptionGroupName))
  add(query_596338, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_596338, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_596338, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_596338, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_596338, "Version", newJString(Version))
  add(query_596338, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_596338, "Iops", newJInt(Iops))
  add(query_596338, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_596337.call(nil, query_596338, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_596282(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_596283, base: "/",
    url: url_GetModifyDBInstance_596284, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_596414 = ref object of OpenApiRestCall_592348
proc url_PostModifyDBParameterGroup_596416(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBParameterGroup_596415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596417 = query.getOrDefault("Action")
  valid_596417 = validateParameter(valid_596417, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_596417 != nil:
    section.add "Action", valid_596417
  var valid_596418 = query.getOrDefault("Version")
  valid_596418 = validateParameter(valid_596418, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596418 != nil:
    section.add "Version", valid_596418
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596419 = header.getOrDefault("X-Amz-Signature")
  valid_596419 = validateParameter(valid_596419, JString, required = false,
                                 default = nil)
  if valid_596419 != nil:
    section.add "X-Amz-Signature", valid_596419
  var valid_596420 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596420 = validateParameter(valid_596420, JString, required = false,
                                 default = nil)
  if valid_596420 != nil:
    section.add "X-Amz-Content-Sha256", valid_596420
  var valid_596421 = header.getOrDefault("X-Amz-Date")
  valid_596421 = validateParameter(valid_596421, JString, required = false,
                                 default = nil)
  if valid_596421 != nil:
    section.add "X-Amz-Date", valid_596421
  var valid_596422 = header.getOrDefault("X-Amz-Credential")
  valid_596422 = validateParameter(valid_596422, JString, required = false,
                                 default = nil)
  if valid_596422 != nil:
    section.add "X-Amz-Credential", valid_596422
  var valid_596423 = header.getOrDefault("X-Amz-Security-Token")
  valid_596423 = validateParameter(valid_596423, JString, required = false,
                                 default = nil)
  if valid_596423 != nil:
    section.add "X-Amz-Security-Token", valid_596423
  var valid_596424 = header.getOrDefault("X-Amz-Algorithm")
  valid_596424 = validateParameter(valid_596424, JString, required = false,
                                 default = nil)
  if valid_596424 != nil:
    section.add "X-Amz-Algorithm", valid_596424
  var valid_596425 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596425 = validateParameter(valid_596425, JString, required = false,
                                 default = nil)
  if valid_596425 != nil:
    section.add "X-Amz-SignedHeaders", valid_596425
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_596426 = formData.getOrDefault("DBParameterGroupName")
  valid_596426 = validateParameter(valid_596426, JString, required = true,
                                 default = nil)
  if valid_596426 != nil:
    section.add "DBParameterGroupName", valid_596426
  var valid_596427 = formData.getOrDefault("Parameters")
  valid_596427 = validateParameter(valid_596427, JArray, required = true, default = nil)
  if valid_596427 != nil:
    section.add "Parameters", valid_596427
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596428: Call_PostModifyDBParameterGroup_596414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_596428.validator(path, query, header, formData, body)
  let scheme = call_596428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596428.url(scheme.get, call_596428.host, call_596428.base,
                         call_596428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596428, url, valid)

proc call*(call_596429: Call_PostModifyDBParameterGroup_596414;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Version: string (required)
  var query_596430 = newJObject()
  var formData_596431 = newJObject()
  add(formData_596431, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_596430, "Action", newJString(Action))
  if Parameters != nil:
    formData_596431.add "Parameters", Parameters
  add(query_596430, "Version", newJString(Version))
  result = call_596429.call(nil, query_596430, nil, formData_596431, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_596414(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_596415, base: "/",
    url: url_PostModifyDBParameterGroup_596416,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_596397 = ref object of OpenApiRestCall_592348
proc url_GetModifyDBParameterGroup_596399(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBParameterGroup_596398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_596400 = query.getOrDefault("DBParameterGroupName")
  valid_596400 = validateParameter(valid_596400, JString, required = true,
                                 default = nil)
  if valid_596400 != nil:
    section.add "DBParameterGroupName", valid_596400
  var valid_596401 = query.getOrDefault("Parameters")
  valid_596401 = validateParameter(valid_596401, JArray, required = true, default = nil)
  if valid_596401 != nil:
    section.add "Parameters", valid_596401
  var valid_596402 = query.getOrDefault("Action")
  valid_596402 = validateParameter(valid_596402, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_596402 != nil:
    section.add "Action", valid_596402
  var valid_596403 = query.getOrDefault("Version")
  valid_596403 = validateParameter(valid_596403, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596403 != nil:
    section.add "Version", valid_596403
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596404 = header.getOrDefault("X-Amz-Signature")
  valid_596404 = validateParameter(valid_596404, JString, required = false,
                                 default = nil)
  if valid_596404 != nil:
    section.add "X-Amz-Signature", valid_596404
  var valid_596405 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596405 = validateParameter(valid_596405, JString, required = false,
                                 default = nil)
  if valid_596405 != nil:
    section.add "X-Amz-Content-Sha256", valid_596405
  var valid_596406 = header.getOrDefault("X-Amz-Date")
  valid_596406 = validateParameter(valid_596406, JString, required = false,
                                 default = nil)
  if valid_596406 != nil:
    section.add "X-Amz-Date", valid_596406
  var valid_596407 = header.getOrDefault("X-Amz-Credential")
  valid_596407 = validateParameter(valid_596407, JString, required = false,
                                 default = nil)
  if valid_596407 != nil:
    section.add "X-Amz-Credential", valid_596407
  var valid_596408 = header.getOrDefault("X-Amz-Security-Token")
  valid_596408 = validateParameter(valid_596408, JString, required = false,
                                 default = nil)
  if valid_596408 != nil:
    section.add "X-Amz-Security-Token", valid_596408
  var valid_596409 = header.getOrDefault("X-Amz-Algorithm")
  valid_596409 = validateParameter(valid_596409, JString, required = false,
                                 default = nil)
  if valid_596409 != nil:
    section.add "X-Amz-Algorithm", valid_596409
  var valid_596410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596410 = validateParameter(valid_596410, JString, required = false,
                                 default = nil)
  if valid_596410 != nil:
    section.add "X-Amz-SignedHeaders", valid_596410
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596411: Call_GetModifyDBParameterGroup_596397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_596411.validator(path, query, header, formData, body)
  let scheme = call_596411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596411.url(scheme.get, call_596411.host, call_596411.base,
                         call_596411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596411, url, valid)

proc call*(call_596412: Call_GetModifyDBParameterGroup_596397;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596413 = newJObject()
  add(query_596413, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_596413.add "Parameters", Parameters
  add(query_596413, "Action", newJString(Action))
  add(query_596413, "Version", newJString(Version))
  result = call_596412.call(nil, query_596413, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_596397(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_596398, base: "/",
    url: url_GetModifyDBParameterGroup_596399,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshot_596450 = ref object of OpenApiRestCall_592348
proc url_PostModifyDBSnapshot_596452(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBSnapshot_596451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596453 = query.getOrDefault("Action")
  valid_596453 = validateParameter(valid_596453, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_596453 != nil:
    section.add "Action", valid_596453
  var valid_596454 = query.getOrDefault("Version")
  valid_596454 = validateParameter(valid_596454, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596454 != nil:
    section.add "Version", valid_596454
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596455 = header.getOrDefault("X-Amz-Signature")
  valid_596455 = validateParameter(valid_596455, JString, required = false,
                                 default = nil)
  if valid_596455 != nil:
    section.add "X-Amz-Signature", valid_596455
  var valid_596456 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596456 = validateParameter(valid_596456, JString, required = false,
                                 default = nil)
  if valid_596456 != nil:
    section.add "X-Amz-Content-Sha256", valid_596456
  var valid_596457 = header.getOrDefault("X-Amz-Date")
  valid_596457 = validateParameter(valid_596457, JString, required = false,
                                 default = nil)
  if valid_596457 != nil:
    section.add "X-Amz-Date", valid_596457
  var valid_596458 = header.getOrDefault("X-Amz-Credential")
  valid_596458 = validateParameter(valid_596458, JString, required = false,
                                 default = nil)
  if valid_596458 != nil:
    section.add "X-Amz-Credential", valid_596458
  var valid_596459 = header.getOrDefault("X-Amz-Security-Token")
  valid_596459 = validateParameter(valid_596459, JString, required = false,
                                 default = nil)
  if valid_596459 != nil:
    section.add "X-Amz-Security-Token", valid_596459
  var valid_596460 = header.getOrDefault("X-Amz-Algorithm")
  valid_596460 = validateParameter(valid_596460, JString, required = false,
                                 default = nil)
  if valid_596460 != nil:
    section.add "X-Amz-Algorithm", valid_596460
  var valid_596461 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596461 = validateParameter(valid_596461, JString, required = false,
                                 default = nil)
  if valid_596461 != nil:
    section.add "X-Amz-SignedHeaders", valid_596461
  result.add "header", section
  ## parameters in `formData` object:
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_596462 = formData.getOrDefault("EngineVersion")
  valid_596462 = validateParameter(valid_596462, JString, required = false,
                                 default = nil)
  if valid_596462 != nil:
    section.add "EngineVersion", valid_596462
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_596463 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_596463 = validateParameter(valid_596463, JString, required = true,
                                 default = nil)
  if valid_596463 != nil:
    section.add "DBSnapshotIdentifier", valid_596463
  var valid_596464 = formData.getOrDefault("OptionGroupName")
  valid_596464 = validateParameter(valid_596464, JString, required = false,
                                 default = nil)
  if valid_596464 != nil:
    section.add "OptionGroupName", valid_596464
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596465: Call_PostModifyDBSnapshot_596450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  let valid = call_596465.validator(path, query, header, formData, body)
  let scheme = call_596465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596465.url(scheme.get, call_596465.host, call_596465.base,
                         call_596465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596465, url, valid)

proc call*(call_596466: Call_PostModifyDBSnapshot_596450;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_596467 = newJObject()
  var formData_596468 = newJObject()
  add(formData_596468, "EngineVersion", newJString(EngineVersion))
  add(formData_596468, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_596467, "Action", newJString(Action))
  add(formData_596468, "OptionGroupName", newJString(OptionGroupName))
  add(query_596467, "Version", newJString(Version))
  result = call_596466.call(nil, query_596467, nil, formData_596468, nil)

var postModifyDBSnapshot* = Call_PostModifyDBSnapshot_596450(
    name: "postModifyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_PostModifyDBSnapshot_596451, base: "/",
    url: url_PostModifyDBSnapshot_596452, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshot_596432 = ref object of OpenApiRestCall_592348
proc url_GetModifyDBSnapshot_596434(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBSnapshot_596433(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_596435 = query.getOrDefault("DBSnapshotIdentifier")
  valid_596435 = validateParameter(valid_596435, JString, required = true,
                                 default = nil)
  if valid_596435 != nil:
    section.add "DBSnapshotIdentifier", valid_596435
  var valid_596436 = query.getOrDefault("EngineVersion")
  valid_596436 = validateParameter(valid_596436, JString, required = false,
                                 default = nil)
  if valid_596436 != nil:
    section.add "EngineVersion", valid_596436
  var valid_596437 = query.getOrDefault("Action")
  valid_596437 = validateParameter(valid_596437, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_596437 != nil:
    section.add "Action", valid_596437
  var valid_596438 = query.getOrDefault("OptionGroupName")
  valid_596438 = validateParameter(valid_596438, JString, required = false,
                                 default = nil)
  if valid_596438 != nil:
    section.add "OptionGroupName", valid_596438
  var valid_596439 = query.getOrDefault("Version")
  valid_596439 = validateParameter(valid_596439, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596439 != nil:
    section.add "Version", valid_596439
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596440 = header.getOrDefault("X-Amz-Signature")
  valid_596440 = validateParameter(valid_596440, JString, required = false,
                                 default = nil)
  if valid_596440 != nil:
    section.add "X-Amz-Signature", valid_596440
  var valid_596441 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596441 = validateParameter(valid_596441, JString, required = false,
                                 default = nil)
  if valid_596441 != nil:
    section.add "X-Amz-Content-Sha256", valid_596441
  var valid_596442 = header.getOrDefault("X-Amz-Date")
  valid_596442 = validateParameter(valid_596442, JString, required = false,
                                 default = nil)
  if valid_596442 != nil:
    section.add "X-Amz-Date", valid_596442
  var valid_596443 = header.getOrDefault("X-Amz-Credential")
  valid_596443 = validateParameter(valid_596443, JString, required = false,
                                 default = nil)
  if valid_596443 != nil:
    section.add "X-Amz-Credential", valid_596443
  var valid_596444 = header.getOrDefault("X-Amz-Security-Token")
  valid_596444 = validateParameter(valid_596444, JString, required = false,
                                 default = nil)
  if valid_596444 != nil:
    section.add "X-Amz-Security-Token", valid_596444
  var valid_596445 = header.getOrDefault("X-Amz-Algorithm")
  valid_596445 = validateParameter(valid_596445, JString, required = false,
                                 default = nil)
  if valid_596445 != nil:
    section.add "X-Amz-Algorithm", valid_596445
  var valid_596446 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596446 = validateParameter(valid_596446, JString, required = false,
                                 default = nil)
  if valid_596446 != nil:
    section.add "X-Amz-SignedHeaders", valid_596446
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596447: Call_GetModifyDBSnapshot_596432; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  let valid = call_596447.validator(path, query, header, formData, body)
  let scheme = call_596447.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596447.url(scheme.get, call_596447.host, call_596447.base,
                         call_596447.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596447, url, valid)

proc call*(call_596448: Call_GetModifyDBSnapshot_596432;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_596449 = newJObject()
  add(query_596449, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_596449, "EngineVersion", newJString(EngineVersion))
  add(query_596449, "Action", newJString(Action))
  add(query_596449, "OptionGroupName", newJString(OptionGroupName))
  add(query_596449, "Version", newJString(Version))
  result = call_596448.call(nil, query_596449, nil, nil, nil)

var getModifyDBSnapshot* = Call_GetModifyDBSnapshot_596432(
    name: "getModifyDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_GetModifyDBSnapshot_596433, base: "/",
    url: url_GetModifyDBSnapshot_596434, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshotAttribute_596488 = ref object of OpenApiRestCall_592348
proc url_PostModifyDBSnapshotAttribute_596490(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBSnapshotAttribute_596489(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596491 = query.getOrDefault("Action")
  valid_596491 = validateParameter(valid_596491, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_596491 != nil:
    section.add "Action", valid_596491
  var valid_596492 = query.getOrDefault("Version")
  valid_596492 = validateParameter(valid_596492, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596492 != nil:
    section.add "Version", valid_596492
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596493 = header.getOrDefault("X-Amz-Signature")
  valid_596493 = validateParameter(valid_596493, JString, required = false,
                                 default = nil)
  if valid_596493 != nil:
    section.add "X-Amz-Signature", valid_596493
  var valid_596494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596494 = validateParameter(valid_596494, JString, required = false,
                                 default = nil)
  if valid_596494 != nil:
    section.add "X-Amz-Content-Sha256", valid_596494
  var valid_596495 = header.getOrDefault("X-Amz-Date")
  valid_596495 = validateParameter(valid_596495, JString, required = false,
                                 default = nil)
  if valid_596495 != nil:
    section.add "X-Amz-Date", valid_596495
  var valid_596496 = header.getOrDefault("X-Amz-Credential")
  valid_596496 = validateParameter(valid_596496, JString, required = false,
                                 default = nil)
  if valid_596496 != nil:
    section.add "X-Amz-Credential", valid_596496
  var valid_596497 = header.getOrDefault("X-Amz-Security-Token")
  valid_596497 = validateParameter(valid_596497, JString, required = false,
                                 default = nil)
  if valid_596497 != nil:
    section.add "X-Amz-Security-Token", valid_596497
  var valid_596498 = header.getOrDefault("X-Amz-Algorithm")
  valid_596498 = validateParameter(valid_596498, JString, required = false,
                                 default = nil)
  if valid_596498 != nil:
    section.add "X-Amz-Algorithm", valid_596498
  var valid_596499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596499 = validateParameter(valid_596499, JString, required = false,
                                 default = nil)
  if valid_596499 != nil:
    section.add "X-Amz-SignedHeaders", valid_596499
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_596500 = formData.getOrDefault("AttributeName")
  valid_596500 = validateParameter(valid_596500, JString, required = true,
                                 default = nil)
  if valid_596500 != nil:
    section.add "AttributeName", valid_596500
  var valid_596501 = formData.getOrDefault("ValuesToAdd")
  valid_596501 = validateParameter(valid_596501, JArray, required = false,
                                 default = nil)
  if valid_596501 != nil:
    section.add "ValuesToAdd", valid_596501
  var valid_596502 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_596502 = validateParameter(valid_596502, JString, required = true,
                                 default = nil)
  if valid_596502 != nil:
    section.add "DBSnapshotIdentifier", valid_596502
  var valid_596503 = formData.getOrDefault("ValuesToRemove")
  valid_596503 = validateParameter(valid_596503, JArray, required = false,
                                 default = nil)
  if valid_596503 != nil:
    section.add "ValuesToRemove", valid_596503
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596504: Call_PostModifyDBSnapshotAttribute_596488; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_596504.validator(path, query, header, formData, body)
  let scheme = call_596504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596504.url(scheme.get, call_596504.host, call_596504.base,
                         call_596504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596504, url, valid)

proc call*(call_596505: Call_PostModifyDBSnapshotAttribute_596488;
          AttributeName: string; DBSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil; Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: string (required)
  var query_596506 = newJObject()
  var formData_596507 = newJObject()
  add(formData_596507, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_596507.add "ValuesToAdd", ValuesToAdd
  add(formData_596507, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_596506, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_596507.add "ValuesToRemove", ValuesToRemove
  add(query_596506, "Version", newJString(Version))
  result = call_596505.call(nil, query_596506, nil, formData_596507, nil)

var postModifyDBSnapshotAttribute* = Call_PostModifyDBSnapshotAttribute_596488(
    name: "postModifyDBSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_PostModifyDBSnapshotAttribute_596489, base: "/",
    url: url_PostModifyDBSnapshotAttribute_596490,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshotAttribute_596469 = ref object of OpenApiRestCall_592348
proc url_GetModifyDBSnapshotAttribute_596471(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBSnapshotAttribute_596470(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596472 = query.getOrDefault("ValuesToRemove")
  valid_596472 = validateParameter(valid_596472, JArray, required = false,
                                 default = nil)
  if valid_596472 != nil:
    section.add "ValuesToRemove", valid_596472
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_596473 = query.getOrDefault("DBSnapshotIdentifier")
  valid_596473 = validateParameter(valid_596473, JString, required = true,
                                 default = nil)
  if valid_596473 != nil:
    section.add "DBSnapshotIdentifier", valid_596473
  var valid_596474 = query.getOrDefault("Action")
  valid_596474 = validateParameter(valid_596474, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_596474 != nil:
    section.add "Action", valid_596474
  var valid_596475 = query.getOrDefault("AttributeName")
  valid_596475 = validateParameter(valid_596475, JString, required = true,
                                 default = nil)
  if valid_596475 != nil:
    section.add "AttributeName", valid_596475
  var valid_596476 = query.getOrDefault("ValuesToAdd")
  valid_596476 = validateParameter(valid_596476, JArray, required = false,
                                 default = nil)
  if valid_596476 != nil:
    section.add "ValuesToAdd", valid_596476
  var valid_596477 = query.getOrDefault("Version")
  valid_596477 = validateParameter(valid_596477, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596477 != nil:
    section.add "Version", valid_596477
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596478 = header.getOrDefault("X-Amz-Signature")
  valid_596478 = validateParameter(valid_596478, JString, required = false,
                                 default = nil)
  if valid_596478 != nil:
    section.add "X-Amz-Signature", valid_596478
  var valid_596479 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596479 = validateParameter(valid_596479, JString, required = false,
                                 default = nil)
  if valid_596479 != nil:
    section.add "X-Amz-Content-Sha256", valid_596479
  var valid_596480 = header.getOrDefault("X-Amz-Date")
  valid_596480 = validateParameter(valid_596480, JString, required = false,
                                 default = nil)
  if valid_596480 != nil:
    section.add "X-Amz-Date", valid_596480
  var valid_596481 = header.getOrDefault("X-Amz-Credential")
  valid_596481 = validateParameter(valid_596481, JString, required = false,
                                 default = nil)
  if valid_596481 != nil:
    section.add "X-Amz-Credential", valid_596481
  var valid_596482 = header.getOrDefault("X-Amz-Security-Token")
  valid_596482 = validateParameter(valid_596482, JString, required = false,
                                 default = nil)
  if valid_596482 != nil:
    section.add "X-Amz-Security-Token", valid_596482
  var valid_596483 = header.getOrDefault("X-Amz-Algorithm")
  valid_596483 = validateParameter(valid_596483, JString, required = false,
                                 default = nil)
  if valid_596483 != nil:
    section.add "X-Amz-Algorithm", valid_596483
  var valid_596484 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596484 = validateParameter(valid_596484, JString, required = false,
                                 default = nil)
  if valid_596484 != nil:
    section.add "X-Amz-SignedHeaders", valid_596484
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596485: Call_GetModifyDBSnapshotAttribute_596469; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_596485.validator(path, query, header, formData, body)
  let scheme = call_596485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596485.url(scheme.get, call_596485.host, call_596485.base,
                         call_596485.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596485, url, valid)

proc call*(call_596486: Call_GetModifyDBSnapshotAttribute_596469;
          DBSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBSnapshotAttribute"; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_596487 = newJObject()
  if ValuesToRemove != nil:
    query_596487.add "ValuesToRemove", ValuesToRemove
  add(query_596487, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_596487, "Action", newJString(Action))
  add(query_596487, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_596487.add "ValuesToAdd", ValuesToAdd
  add(query_596487, "Version", newJString(Version))
  result = call_596486.call(nil, query_596487, nil, nil, nil)

var getModifyDBSnapshotAttribute* = Call_GetModifyDBSnapshotAttribute_596469(
    name: "getModifyDBSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_GetModifyDBSnapshotAttribute_596470, base: "/",
    url: url_GetModifyDBSnapshotAttribute_596471,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_596526 = ref object of OpenApiRestCall_592348
proc url_PostModifyDBSubnetGroup_596528(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBSubnetGroup_596527(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596529 = query.getOrDefault("Action")
  valid_596529 = validateParameter(valid_596529, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_596529 != nil:
    section.add "Action", valid_596529
  var valid_596530 = query.getOrDefault("Version")
  valid_596530 = validateParameter(valid_596530, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596530 != nil:
    section.add "Version", valid_596530
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596531 = header.getOrDefault("X-Amz-Signature")
  valid_596531 = validateParameter(valid_596531, JString, required = false,
                                 default = nil)
  if valid_596531 != nil:
    section.add "X-Amz-Signature", valid_596531
  var valid_596532 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596532 = validateParameter(valid_596532, JString, required = false,
                                 default = nil)
  if valid_596532 != nil:
    section.add "X-Amz-Content-Sha256", valid_596532
  var valid_596533 = header.getOrDefault("X-Amz-Date")
  valid_596533 = validateParameter(valid_596533, JString, required = false,
                                 default = nil)
  if valid_596533 != nil:
    section.add "X-Amz-Date", valid_596533
  var valid_596534 = header.getOrDefault("X-Amz-Credential")
  valid_596534 = validateParameter(valid_596534, JString, required = false,
                                 default = nil)
  if valid_596534 != nil:
    section.add "X-Amz-Credential", valid_596534
  var valid_596535 = header.getOrDefault("X-Amz-Security-Token")
  valid_596535 = validateParameter(valid_596535, JString, required = false,
                                 default = nil)
  if valid_596535 != nil:
    section.add "X-Amz-Security-Token", valid_596535
  var valid_596536 = header.getOrDefault("X-Amz-Algorithm")
  valid_596536 = validateParameter(valid_596536, JString, required = false,
                                 default = nil)
  if valid_596536 != nil:
    section.add "X-Amz-Algorithm", valid_596536
  var valid_596537 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596537 = validateParameter(valid_596537, JString, required = false,
                                 default = nil)
  if valid_596537 != nil:
    section.add "X-Amz-SignedHeaders", valid_596537
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  section = newJObject()
  var valid_596538 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_596538 = validateParameter(valid_596538, JString, required = false,
                                 default = nil)
  if valid_596538 != nil:
    section.add "DBSubnetGroupDescription", valid_596538
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_596539 = formData.getOrDefault("DBSubnetGroupName")
  valid_596539 = validateParameter(valid_596539, JString, required = true,
                                 default = nil)
  if valid_596539 != nil:
    section.add "DBSubnetGroupName", valid_596539
  var valid_596540 = formData.getOrDefault("SubnetIds")
  valid_596540 = validateParameter(valid_596540, JArray, required = true, default = nil)
  if valid_596540 != nil:
    section.add "SubnetIds", valid_596540
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596541: Call_PostModifyDBSubnetGroup_596526; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_596541.validator(path, query, header, formData, body)
  let scheme = call_596541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596541.url(scheme.get, call_596541.host, call_596541.base,
                         call_596541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596541, url, valid)

proc call*(call_596542: Call_PostModifyDBSubnetGroup_596526;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string = "";
          Action: string = "ModifyDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  var query_596543 = newJObject()
  var formData_596544 = newJObject()
  add(formData_596544, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_596543, "Action", newJString(Action))
  add(formData_596544, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_596543, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_596544.add "SubnetIds", SubnetIds
  result = call_596542.call(nil, query_596543, nil, formData_596544, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_596526(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_596527, base: "/",
    url: url_PostModifyDBSubnetGroup_596528, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_596508 = ref object of OpenApiRestCall_592348
proc url_GetModifyDBSubnetGroup_596510(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBSubnetGroup_596509(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_596511 = query.getOrDefault("SubnetIds")
  valid_596511 = validateParameter(valid_596511, JArray, required = true, default = nil)
  if valid_596511 != nil:
    section.add "SubnetIds", valid_596511
  var valid_596512 = query.getOrDefault("Action")
  valid_596512 = validateParameter(valid_596512, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_596512 != nil:
    section.add "Action", valid_596512
  var valid_596513 = query.getOrDefault("DBSubnetGroupDescription")
  valid_596513 = validateParameter(valid_596513, JString, required = false,
                                 default = nil)
  if valid_596513 != nil:
    section.add "DBSubnetGroupDescription", valid_596513
  var valid_596514 = query.getOrDefault("DBSubnetGroupName")
  valid_596514 = validateParameter(valid_596514, JString, required = true,
                                 default = nil)
  if valid_596514 != nil:
    section.add "DBSubnetGroupName", valid_596514
  var valid_596515 = query.getOrDefault("Version")
  valid_596515 = validateParameter(valid_596515, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596515 != nil:
    section.add "Version", valid_596515
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596516 = header.getOrDefault("X-Amz-Signature")
  valid_596516 = validateParameter(valid_596516, JString, required = false,
                                 default = nil)
  if valid_596516 != nil:
    section.add "X-Amz-Signature", valid_596516
  var valid_596517 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596517 = validateParameter(valid_596517, JString, required = false,
                                 default = nil)
  if valid_596517 != nil:
    section.add "X-Amz-Content-Sha256", valid_596517
  var valid_596518 = header.getOrDefault("X-Amz-Date")
  valid_596518 = validateParameter(valid_596518, JString, required = false,
                                 default = nil)
  if valid_596518 != nil:
    section.add "X-Amz-Date", valid_596518
  var valid_596519 = header.getOrDefault("X-Amz-Credential")
  valid_596519 = validateParameter(valid_596519, JString, required = false,
                                 default = nil)
  if valid_596519 != nil:
    section.add "X-Amz-Credential", valid_596519
  var valid_596520 = header.getOrDefault("X-Amz-Security-Token")
  valid_596520 = validateParameter(valid_596520, JString, required = false,
                                 default = nil)
  if valid_596520 != nil:
    section.add "X-Amz-Security-Token", valid_596520
  var valid_596521 = header.getOrDefault("X-Amz-Algorithm")
  valid_596521 = validateParameter(valid_596521, JString, required = false,
                                 default = nil)
  if valid_596521 != nil:
    section.add "X-Amz-Algorithm", valid_596521
  var valid_596522 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596522 = validateParameter(valid_596522, JString, required = false,
                                 default = nil)
  if valid_596522 != nil:
    section.add "X-Amz-SignedHeaders", valid_596522
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596523: Call_GetModifyDBSubnetGroup_596508; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_596523.validator(path, query, header, formData, body)
  let scheme = call_596523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596523.url(scheme.get, call_596523.host, call_596523.base,
                         call_596523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596523, url, valid)

proc call*(call_596524: Call_GetModifyDBSubnetGroup_596508; SubnetIds: JsonNode;
          DBSubnetGroupName: string; Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_596525 = newJObject()
  if SubnetIds != nil:
    query_596525.add "SubnetIds", SubnetIds
  add(query_596525, "Action", newJString(Action))
  add(query_596525, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_596525, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_596525, "Version", newJString(Version))
  result = call_596524.call(nil, query_596525, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_596508(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_596509, base: "/",
    url: url_GetModifyDBSubnetGroup_596510, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_596565 = ref object of OpenApiRestCall_592348
proc url_PostModifyEventSubscription_596567(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyEventSubscription_596566(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596568 = query.getOrDefault("Action")
  valid_596568 = validateParameter(valid_596568, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_596568 != nil:
    section.add "Action", valid_596568
  var valid_596569 = query.getOrDefault("Version")
  valid_596569 = validateParameter(valid_596569, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596569 != nil:
    section.add "Version", valid_596569
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596570 = header.getOrDefault("X-Amz-Signature")
  valid_596570 = validateParameter(valid_596570, JString, required = false,
                                 default = nil)
  if valid_596570 != nil:
    section.add "X-Amz-Signature", valid_596570
  var valid_596571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596571 = validateParameter(valid_596571, JString, required = false,
                                 default = nil)
  if valid_596571 != nil:
    section.add "X-Amz-Content-Sha256", valid_596571
  var valid_596572 = header.getOrDefault("X-Amz-Date")
  valid_596572 = validateParameter(valid_596572, JString, required = false,
                                 default = nil)
  if valid_596572 != nil:
    section.add "X-Amz-Date", valid_596572
  var valid_596573 = header.getOrDefault("X-Amz-Credential")
  valid_596573 = validateParameter(valid_596573, JString, required = false,
                                 default = nil)
  if valid_596573 != nil:
    section.add "X-Amz-Credential", valid_596573
  var valid_596574 = header.getOrDefault("X-Amz-Security-Token")
  valid_596574 = validateParameter(valid_596574, JString, required = false,
                                 default = nil)
  if valid_596574 != nil:
    section.add "X-Amz-Security-Token", valid_596574
  var valid_596575 = header.getOrDefault("X-Amz-Algorithm")
  valid_596575 = validateParameter(valid_596575, JString, required = false,
                                 default = nil)
  if valid_596575 != nil:
    section.add "X-Amz-Algorithm", valid_596575
  var valid_596576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596576 = validateParameter(valid_596576, JString, required = false,
                                 default = nil)
  if valid_596576 != nil:
    section.add "X-Amz-SignedHeaders", valid_596576
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  section = newJObject()
  var valid_596577 = formData.getOrDefault("SnsTopicArn")
  valid_596577 = validateParameter(valid_596577, JString, required = false,
                                 default = nil)
  if valid_596577 != nil:
    section.add "SnsTopicArn", valid_596577
  var valid_596578 = formData.getOrDefault("Enabled")
  valid_596578 = validateParameter(valid_596578, JBool, required = false, default = nil)
  if valid_596578 != nil:
    section.add "Enabled", valid_596578
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_596579 = formData.getOrDefault("SubscriptionName")
  valid_596579 = validateParameter(valid_596579, JString, required = true,
                                 default = nil)
  if valid_596579 != nil:
    section.add "SubscriptionName", valid_596579
  var valid_596580 = formData.getOrDefault("SourceType")
  valid_596580 = validateParameter(valid_596580, JString, required = false,
                                 default = nil)
  if valid_596580 != nil:
    section.add "SourceType", valid_596580
  var valid_596581 = formData.getOrDefault("EventCategories")
  valid_596581 = validateParameter(valid_596581, JArray, required = false,
                                 default = nil)
  if valid_596581 != nil:
    section.add "EventCategories", valid_596581
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596582: Call_PostModifyEventSubscription_596565; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_596582.validator(path, query, header, formData, body)
  let scheme = call_596582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596582.url(scheme.get, call_596582.host, call_596582.base,
                         call_596582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596582, url, valid)

proc call*(call_596583: Call_PostModifyEventSubscription_596565;
          SubscriptionName: string; SnsTopicArn: string = ""; Enabled: bool = false;
          SourceType: string = ""; EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596584 = newJObject()
  var formData_596585 = newJObject()
  add(formData_596585, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_596585, "Enabled", newJBool(Enabled))
  add(formData_596585, "SubscriptionName", newJString(SubscriptionName))
  add(formData_596585, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_596585.add "EventCategories", EventCategories
  add(query_596584, "Action", newJString(Action))
  add(query_596584, "Version", newJString(Version))
  result = call_596583.call(nil, query_596584, nil, formData_596585, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_596565(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_596566, base: "/",
    url: url_PostModifyEventSubscription_596567,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_596545 = ref object of OpenApiRestCall_592348
proc url_GetModifyEventSubscription_596547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyEventSubscription_596546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_596548 = query.getOrDefault("SourceType")
  valid_596548 = validateParameter(valid_596548, JString, required = false,
                                 default = nil)
  if valid_596548 != nil:
    section.add "SourceType", valid_596548
  var valid_596549 = query.getOrDefault("Enabled")
  valid_596549 = validateParameter(valid_596549, JBool, required = false, default = nil)
  if valid_596549 != nil:
    section.add "Enabled", valid_596549
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_596550 = query.getOrDefault("SubscriptionName")
  valid_596550 = validateParameter(valid_596550, JString, required = true,
                                 default = nil)
  if valid_596550 != nil:
    section.add "SubscriptionName", valid_596550
  var valid_596551 = query.getOrDefault("EventCategories")
  valid_596551 = validateParameter(valid_596551, JArray, required = false,
                                 default = nil)
  if valid_596551 != nil:
    section.add "EventCategories", valid_596551
  var valid_596552 = query.getOrDefault("Action")
  valid_596552 = validateParameter(valid_596552, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_596552 != nil:
    section.add "Action", valid_596552
  var valid_596553 = query.getOrDefault("SnsTopicArn")
  valid_596553 = validateParameter(valid_596553, JString, required = false,
                                 default = nil)
  if valid_596553 != nil:
    section.add "SnsTopicArn", valid_596553
  var valid_596554 = query.getOrDefault("Version")
  valid_596554 = validateParameter(valid_596554, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596554 != nil:
    section.add "Version", valid_596554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596555 = header.getOrDefault("X-Amz-Signature")
  valid_596555 = validateParameter(valid_596555, JString, required = false,
                                 default = nil)
  if valid_596555 != nil:
    section.add "X-Amz-Signature", valid_596555
  var valid_596556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596556 = validateParameter(valid_596556, JString, required = false,
                                 default = nil)
  if valid_596556 != nil:
    section.add "X-Amz-Content-Sha256", valid_596556
  var valid_596557 = header.getOrDefault("X-Amz-Date")
  valid_596557 = validateParameter(valid_596557, JString, required = false,
                                 default = nil)
  if valid_596557 != nil:
    section.add "X-Amz-Date", valid_596557
  var valid_596558 = header.getOrDefault("X-Amz-Credential")
  valid_596558 = validateParameter(valid_596558, JString, required = false,
                                 default = nil)
  if valid_596558 != nil:
    section.add "X-Amz-Credential", valid_596558
  var valid_596559 = header.getOrDefault("X-Amz-Security-Token")
  valid_596559 = validateParameter(valid_596559, JString, required = false,
                                 default = nil)
  if valid_596559 != nil:
    section.add "X-Amz-Security-Token", valid_596559
  var valid_596560 = header.getOrDefault("X-Amz-Algorithm")
  valid_596560 = validateParameter(valid_596560, JString, required = false,
                                 default = nil)
  if valid_596560 != nil:
    section.add "X-Amz-Algorithm", valid_596560
  var valid_596561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596561 = validateParameter(valid_596561, JString, required = false,
                                 default = nil)
  if valid_596561 != nil:
    section.add "X-Amz-SignedHeaders", valid_596561
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596562: Call_GetModifyEventSubscription_596545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_596562.validator(path, query, header, formData, body)
  let scheme = call_596562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596562.url(scheme.get, call_596562.host, call_596562.base,
                         call_596562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596562, url, valid)

proc call*(call_596563: Call_GetModifyEventSubscription_596545;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_596564 = newJObject()
  add(query_596564, "SourceType", newJString(SourceType))
  add(query_596564, "Enabled", newJBool(Enabled))
  add(query_596564, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_596564.add "EventCategories", EventCategories
  add(query_596564, "Action", newJString(Action))
  add(query_596564, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_596564, "Version", newJString(Version))
  result = call_596563.call(nil, query_596564, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_596545(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_596546, base: "/",
    url: url_GetModifyEventSubscription_596547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyGlobalCluster_596604 = ref object of OpenApiRestCall_592348
proc url_PostModifyGlobalCluster_596606(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyGlobalCluster_596605(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596607 = query.getOrDefault("Action")
  valid_596607 = validateParameter(valid_596607, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_596607 != nil:
    section.add "Action", valid_596607
  var valid_596608 = query.getOrDefault("Version")
  valid_596608 = validateParameter(valid_596608, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596608 != nil:
    section.add "Version", valid_596608
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596609 = header.getOrDefault("X-Amz-Signature")
  valid_596609 = validateParameter(valid_596609, JString, required = false,
                                 default = nil)
  if valid_596609 != nil:
    section.add "X-Amz-Signature", valid_596609
  var valid_596610 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596610 = validateParameter(valid_596610, JString, required = false,
                                 default = nil)
  if valid_596610 != nil:
    section.add "X-Amz-Content-Sha256", valid_596610
  var valid_596611 = header.getOrDefault("X-Amz-Date")
  valid_596611 = validateParameter(valid_596611, JString, required = false,
                                 default = nil)
  if valid_596611 != nil:
    section.add "X-Amz-Date", valid_596611
  var valid_596612 = header.getOrDefault("X-Amz-Credential")
  valid_596612 = validateParameter(valid_596612, JString, required = false,
                                 default = nil)
  if valid_596612 != nil:
    section.add "X-Amz-Credential", valid_596612
  var valid_596613 = header.getOrDefault("X-Amz-Security-Token")
  valid_596613 = validateParameter(valid_596613, JString, required = false,
                                 default = nil)
  if valid_596613 != nil:
    section.add "X-Amz-Security-Token", valid_596613
  var valid_596614 = header.getOrDefault("X-Amz-Algorithm")
  valid_596614 = validateParameter(valid_596614, JString, required = false,
                                 default = nil)
  if valid_596614 != nil:
    section.add "X-Amz-Algorithm", valid_596614
  var valid_596615 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596615 = validateParameter(valid_596615, JString, required = false,
                                 default = nil)
  if valid_596615 != nil:
    section.add "X-Amz-SignedHeaders", valid_596615
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_596616 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_596616 = validateParameter(valid_596616, JString, required = false,
                                 default = nil)
  if valid_596616 != nil:
    section.add "GlobalClusterIdentifier", valid_596616
  var valid_596617 = formData.getOrDefault("DeletionProtection")
  valid_596617 = validateParameter(valid_596617, JBool, required = false, default = nil)
  if valid_596617 != nil:
    section.add "DeletionProtection", valid_596617
  var valid_596618 = formData.getOrDefault("NewGlobalClusterIdentifier")
  valid_596618 = validateParameter(valid_596618, JString, required = false,
                                 default = nil)
  if valid_596618 != nil:
    section.add "NewGlobalClusterIdentifier", valid_596618
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596619: Call_PostModifyGlobalCluster_596604; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596619.validator(path, query, header, formData, body)
  let scheme = call_596619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596619.url(scheme.get, call_596619.host, call_596619.base,
                         call_596619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596619, url, valid)

proc call*(call_596620: Call_PostModifyGlobalCluster_596604;
          GlobalClusterIdentifier: string = "";
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31";
          DeletionProtection: bool = false; NewGlobalClusterIdentifier: string = ""): Recallable =
  ## postModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  var query_596621 = newJObject()
  var formData_596622 = newJObject()
  add(formData_596622, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_596621, "Action", newJString(Action))
  add(query_596621, "Version", newJString(Version))
  add(formData_596622, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_596622, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  result = call_596620.call(nil, query_596621, nil, formData_596622, nil)

var postModifyGlobalCluster* = Call_PostModifyGlobalCluster_596604(
    name: "postModifyGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_PostModifyGlobalCluster_596605, base: "/",
    url: url_PostModifyGlobalCluster_596606, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyGlobalCluster_596586 = ref object of OpenApiRestCall_592348
proc url_GetModifyGlobalCluster_596588(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyGlobalCluster_596587(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_596589 = query.getOrDefault("NewGlobalClusterIdentifier")
  valid_596589 = validateParameter(valid_596589, JString, required = false,
                                 default = nil)
  if valid_596589 != nil:
    section.add "NewGlobalClusterIdentifier", valid_596589
  var valid_596590 = query.getOrDefault("GlobalClusterIdentifier")
  valid_596590 = validateParameter(valid_596590, JString, required = false,
                                 default = nil)
  if valid_596590 != nil:
    section.add "GlobalClusterIdentifier", valid_596590
  var valid_596591 = query.getOrDefault("DeletionProtection")
  valid_596591 = validateParameter(valid_596591, JBool, required = false, default = nil)
  if valid_596591 != nil:
    section.add "DeletionProtection", valid_596591
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596592 = query.getOrDefault("Action")
  valid_596592 = validateParameter(valid_596592, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_596592 != nil:
    section.add "Action", valid_596592
  var valid_596593 = query.getOrDefault("Version")
  valid_596593 = validateParameter(valid_596593, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596593 != nil:
    section.add "Version", valid_596593
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596594 = header.getOrDefault("X-Amz-Signature")
  valid_596594 = validateParameter(valid_596594, JString, required = false,
                                 default = nil)
  if valid_596594 != nil:
    section.add "X-Amz-Signature", valid_596594
  var valid_596595 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596595 = validateParameter(valid_596595, JString, required = false,
                                 default = nil)
  if valid_596595 != nil:
    section.add "X-Amz-Content-Sha256", valid_596595
  var valid_596596 = header.getOrDefault("X-Amz-Date")
  valid_596596 = validateParameter(valid_596596, JString, required = false,
                                 default = nil)
  if valid_596596 != nil:
    section.add "X-Amz-Date", valid_596596
  var valid_596597 = header.getOrDefault("X-Amz-Credential")
  valid_596597 = validateParameter(valid_596597, JString, required = false,
                                 default = nil)
  if valid_596597 != nil:
    section.add "X-Amz-Credential", valid_596597
  var valid_596598 = header.getOrDefault("X-Amz-Security-Token")
  valid_596598 = validateParameter(valid_596598, JString, required = false,
                                 default = nil)
  if valid_596598 != nil:
    section.add "X-Amz-Security-Token", valid_596598
  var valid_596599 = header.getOrDefault("X-Amz-Algorithm")
  valid_596599 = validateParameter(valid_596599, JString, required = false,
                                 default = nil)
  if valid_596599 != nil:
    section.add "X-Amz-Algorithm", valid_596599
  var valid_596600 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596600 = validateParameter(valid_596600, JString, required = false,
                                 default = nil)
  if valid_596600 != nil:
    section.add "X-Amz-SignedHeaders", valid_596600
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596601: Call_GetModifyGlobalCluster_596586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596601.validator(path, query, header, formData, body)
  let scheme = call_596601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596601.url(scheme.get, call_596601.host, call_596601.base,
                         call_596601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596601, url, valid)

proc call*(call_596602: Call_GetModifyGlobalCluster_596586;
          NewGlobalClusterIdentifier: string = "";
          GlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596603 = newJObject()
  add(query_596603, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_596603, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_596603, "DeletionProtection", newJBool(DeletionProtection))
  add(query_596603, "Action", newJString(Action))
  add(query_596603, "Version", newJString(Version))
  result = call_596602.call(nil, query_596603, nil, nil, nil)

var getModifyGlobalCluster* = Call_GetModifyGlobalCluster_596586(
    name: "getModifyGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_GetModifyGlobalCluster_596587, base: "/",
    url: url_GetModifyGlobalCluster_596588, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyOptionGroup_596642 = ref object of OpenApiRestCall_592348
proc url_PostModifyOptionGroup_596644(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyOptionGroup_596643(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596645 = query.getOrDefault("Action")
  valid_596645 = validateParameter(valid_596645, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_596645 != nil:
    section.add "Action", valid_596645
  var valid_596646 = query.getOrDefault("Version")
  valid_596646 = validateParameter(valid_596646, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596646 != nil:
    section.add "Version", valid_596646
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596647 = header.getOrDefault("X-Amz-Signature")
  valid_596647 = validateParameter(valid_596647, JString, required = false,
                                 default = nil)
  if valid_596647 != nil:
    section.add "X-Amz-Signature", valid_596647
  var valid_596648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596648 = validateParameter(valid_596648, JString, required = false,
                                 default = nil)
  if valid_596648 != nil:
    section.add "X-Amz-Content-Sha256", valid_596648
  var valid_596649 = header.getOrDefault("X-Amz-Date")
  valid_596649 = validateParameter(valid_596649, JString, required = false,
                                 default = nil)
  if valid_596649 != nil:
    section.add "X-Amz-Date", valid_596649
  var valid_596650 = header.getOrDefault("X-Amz-Credential")
  valid_596650 = validateParameter(valid_596650, JString, required = false,
                                 default = nil)
  if valid_596650 != nil:
    section.add "X-Amz-Credential", valid_596650
  var valid_596651 = header.getOrDefault("X-Amz-Security-Token")
  valid_596651 = validateParameter(valid_596651, JString, required = false,
                                 default = nil)
  if valid_596651 != nil:
    section.add "X-Amz-Security-Token", valid_596651
  var valid_596652 = header.getOrDefault("X-Amz-Algorithm")
  valid_596652 = validateParameter(valid_596652, JString, required = false,
                                 default = nil)
  if valid_596652 != nil:
    section.add "X-Amz-Algorithm", valid_596652
  var valid_596653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596653 = validateParameter(valid_596653, JString, required = false,
                                 default = nil)
  if valid_596653 != nil:
    section.add "X-Amz-SignedHeaders", valid_596653
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  section = newJObject()
  var valid_596654 = formData.getOrDefault("OptionsToRemove")
  valid_596654 = validateParameter(valid_596654, JArray, required = false,
                                 default = nil)
  if valid_596654 != nil:
    section.add "OptionsToRemove", valid_596654
  var valid_596655 = formData.getOrDefault("ApplyImmediately")
  valid_596655 = validateParameter(valid_596655, JBool, required = false, default = nil)
  if valid_596655 != nil:
    section.add "ApplyImmediately", valid_596655
  var valid_596656 = formData.getOrDefault("OptionsToInclude")
  valid_596656 = validateParameter(valid_596656, JArray, required = false,
                                 default = nil)
  if valid_596656 != nil:
    section.add "OptionsToInclude", valid_596656
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_596657 = formData.getOrDefault("OptionGroupName")
  valid_596657 = validateParameter(valid_596657, JString, required = true,
                                 default = nil)
  if valid_596657 != nil:
    section.add "OptionGroupName", valid_596657
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596658: Call_PostModifyOptionGroup_596642; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_596658.validator(path, query, header, formData, body)
  let scheme = call_596658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596658.url(scheme.get, call_596658.host, call_596658.base,
                         call_596658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596658, url, valid)

proc call*(call_596659: Call_PostModifyOptionGroup_596642; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_596660 = newJObject()
  var formData_596661 = newJObject()
  if OptionsToRemove != nil:
    formData_596661.add "OptionsToRemove", OptionsToRemove
  add(formData_596661, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToInclude != nil:
    formData_596661.add "OptionsToInclude", OptionsToInclude
  add(query_596660, "Action", newJString(Action))
  add(formData_596661, "OptionGroupName", newJString(OptionGroupName))
  add(query_596660, "Version", newJString(Version))
  result = call_596659.call(nil, query_596660, nil, formData_596661, nil)

var postModifyOptionGroup* = Call_PostModifyOptionGroup_596642(
    name: "postModifyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_PostModifyOptionGroup_596643, base: "/",
    url: url_PostModifyOptionGroup_596644, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyOptionGroup_596623 = ref object of OpenApiRestCall_592348
proc url_GetModifyOptionGroup_596625(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyOptionGroup_596624(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596626 = query.getOrDefault("Action")
  valid_596626 = validateParameter(valid_596626, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_596626 != nil:
    section.add "Action", valid_596626
  var valid_596627 = query.getOrDefault("ApplyImmediately")
  valid_596627 = validateParameter(valid_596627, JBool, required = false, default = nil)
  if valid_596627 != nil:
    section.add "ApplyImmediately", valid_596627
  var valid_596628 = query.getOrDefault("OptionsToRemove")
  valid_596628 = validateParameter(valid_596628, JArray, required = false,
                                 default = nil)
  if valid_596628 != nil:
    section.add "OptionsToRemove", valid_596628
  var valid_596629 = query.getOrDefault("OptionsToInclude")
  valid_596629 = validateParameter(valid_596629, JArray, required = false,
                                 default = nil)
  if valid_596629 != nil:
    section.add "OptionsToInclude", valid_596629
  var valid_596630 = query.getOrDefault("OptionGroupName")
  valid_596630 = validateParameter(valid_596630, JString, required = true,
                                 default = nil)
  if valid_596630 != nil:
    section.add "OptionGroupName", valid_596630
  var valid_596631 = query.getOrDefault("Version")
  valid_596631 = validateParameter(valid_596631, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596631 != nil:
    section.add "Version", valid_596631
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596632 = header.getOrDefault("X-Amz-Signature")
  valid_596632 = validateParameter(valid_596632, JString, required = false,
                                 default = nil)
  if valid_596632 != nil:
    section.add "X-Amz-Signature", valid_596632
  var valid_596633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596633 = validateParameter(valid_596633, JString, required = false,
                                 default = nil)
  if valid_596633 != nil:
    section.add "X-Amz-Content-Sha256", valid_596633
  var valid_596634 = header.getOrDefault("X-Amz-Date")
  valid_596634 = validateParameter(valid_596634, JString, required = false,
                                 default = nil)
  if valid_596634 != nil:
    section.add "X-Amz-Date", valid_596634
  var valid_596635 = header.getOrDefault("X-Amz-Credential")
  valid_596635 = validateParameter(valid_596635, JString, required = false,
                                 default = nil)
  if valid_596635 != nil:
    section.add "X-Amz-Credential", valid_596635
  var valid_596636 = header.getOrDefault("X-Amz-Security-Token")
  valid_596636 = validateParameter(valid_596636, JString, required = false,
                                 default = nil)
  if valid_596636 != nil:
    section.add "X-Amz-Security-Token", valid_596636
  var valid_596637 = header.getOrDefault("X-Amz-Algorithm")
  valid_596637 = validateParameter(valid_596637, JString, required = false,
                                 default = nil)
  if valid_596637 != nil:
    section.add "X-Amz-Algorithm", valid_596637
  var valid_596638 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596638 = validateParameter(valid_596638, JString, required = false,
                                 default = nil)
  if valid_596638 != nil:
    section.add "X-Amz-SignedHeaders", valid_596638
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596639: Call_GetModifyOptionGroup_596623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_596639.validator(path, query, header, formData, body)
  let scheme = call_596639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596639.url(scheme.get, call_596639.host, call_596639.base,
                         call_596639.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596639, url, valid)

proc call*(call_596640: Call_GetModifyOptionGroup_596623; OptionGroupName: string;
          Action: string = "ModifyOptionGroup"; ApplyImmediately: bool = false;
          OptionsToRemove: JsonNode = nil; OptionsToInclude: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyOptionGroup
  ## Modifies an existing option group.
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_596641 = newJObject()
  add(query_596641, "Action", newJString(Action))
  add(query_596641, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToRemove != nil:
    query_596641.add "OptionsToRemove", OptionsToRemove
  if OptionsToInclude != nil:
    query_596641.add "OptionsToInclude", OptionsToInclude
  add(query_596641, "OptionGroupName", newJString(OptionGroupName))
  add(query_596641, "Version", newJString(Version))
  result = call_596640.call(nil, query_596641, nil, nil, nil)

var getModifyOptionGroup* = Call_GetModifyOptionGroup_596623(
    name: "getModifyOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_GetModifyOptionGroup_596624, base: "/",
    url: url_GetModifyOptionGroup_596625, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplica_596680 = ref object of OpenApiRestCall_592348
proc url_PostPromoteReadReplica_596682(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPromoteReadReplica_596681(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596683 = query.getOrDefault("Action")
  valid_596683 = validateParameter(valid_596683, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_596683 != nil:
    section.add "Action", valid_596683
  var valid_596684 = query.getOrDefault("Version")
  valid_596684 = validateParameter(valid_596684, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596684 != nil:
    section.add "Version", valid_596684
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596685 = header.getOrDefault("X-Amz-Signature")
  valid_596685 = validateParameter(valid_596685, JString, required = false,
                                 default = nil)
  if valid_596685 != nil:
    section.add "X-Amz-Signature", valid_596685
  var valid_596686 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596686 = validateParameter(valid_596686, JString, required = false,
                                 default = nil)
  if valid_596686 != nil:
    section.add "X-Amz-Content-Sha256", valid_596686
  var valid_596687 = header.getOrDefault("X-Amz-Date")
  valid_596687 = validateParameter(valid_596687, JString, required = false,
                                 default = nil)
  if valid_596687 != nil:
    section.add "X-Amz-Date", valid_596687
  var valid_596688 = header.getOrDefault("X-Amz-Credential")
  valid_596688 = validateParameter(valid_596688, JString, required = false,
                                 default = nil)
  if valid_596688 != nil:
    section.add "X-Amz-Credential", valid_596688
  var valid_596689 = header.getOrDefault("X-Amz-Security-Token")
  valid_596689 = validateParameter(valid_596689, JString, required = false,
                                 default = nil)
  if valid_596689 != nil:
    section.add "X-Amz-Security-Token", valid_596689
  var valid_596690 = header.getOrDefault("X-Amz-Algorithm")
  valid_596690 = validateParameter(valid_596690, JString, required = false,
                                 default = nil)
  if valid_596690 != nil:
    section.add "X-Amz-Algorithm", valid_596690
  var valid_596691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596691 = validateParameter(valid_596691, JString, required = false,
                                 default = nil)
  if valid_596691 != nil:
    section.add "X-Amz-SignedHeaders", valid_596691
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  section = newJObject()
  var valid_596692 = formData.getOrDefault("PreferredBackupWindow")
  valid_596692 = validateParameter(valid_596692, JString, required = false,
                                 default = nil)
  if valid_596692 != nil:
    section.add "PreferredBackupWindow", valid_596692
  var valid_596693 = formData.getOrDefault("BackupRetentionPeriod")
  valid_596693 = validateParameter(valid_596693, JInt, required = false, default = nil)
  if valid_596693 != nil:
    section.add "BackupRetentionPeriod", valid_596693
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_596694 = formData.getOrDefault("DBInstanceIdentifier")
  valid_596694 = validateParameter(valid_596694, JString, required = true,
                                 default = nil)
  if valid_596694 != nil:
    section.add "DBInstanceIdentifier", valid_596694
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596695: Call_PostPromoteReadReplica_596680; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_596695.validator(path, query, header, formData, body)
  let scheme = call_596695.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596695.url(scheme.get, call_596695.host, call_596695.base,
                         call_596695.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596695, url, valid)

proc call*(call_596696: Call_PostPromoteReadReplica_596680;
          DBInstanceIdentifier: string; PreferredBackupWindow: string = "";
          BackupRetentionPeriod: int = 0; Action: string = "PromoteReadReplica";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596697 = newJObject()
  var formData_596698 = newJObject()
  add(formData_596698, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_596698, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_596698, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_596697, "Action", newJString(Action))
  add(query_596697, "Version", newJString(Version))
  result = call_596696.call(nil, query_596697, nil, formData_596698, nil)

var postPromoteReadReplica* = Call_PostPromoteReadReplica_596680(
    name: "postPromoteReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_PostPromoteReadReplica_596681, base: "/",
    url: url_PostPromoteReadReplica_596682, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplica_596662 = ref object of OpenApiRestCall_592348
proc url_GetPromoteReadReplica_596664(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPromoteReadReplica_596663(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_596665 = query.getOrDefault("DBInstanceIdentifier")
  valid_596665 = validateParameter(valid_596665, JString, required = true,
                                 default = nil)
  if valid_596665 != nil:
    section.add "DBInstanceIdentifier", valid_596665
  var valid_596666 = query.getOrDefault("BackupRetentionPeriod")
  valid_596666 = validateParameter(valid_596666, JInt, required = false, default = nil)
  if valid_596666 != nil:
    section.add "BackupRetentionPeriod", valid_596666
  var valid_596667 = query.getOrDefault("Action")
  valid_596667 = validateParameter(valid_596667, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_596667 != nil:
    section.add "Action", valid_596667
  var valid_596668 = query.getOrDefault("Version")
  valid_596668 = validateParameter(valid_596668, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596668 != nil:
    section.add "Version", valid_596668
  var valid_596669 = query.getOrDefault("PreferredBackupWindow")
  valid_596669 = validateParameter(valid_596669, JString, required = false,
                                 default = nil)
  if valid_596669 != nil:
    section.add "PreferredBackupWindow", valid_596669
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596670 = header.getOrDefault("X-Amz-Signature")
  valid_596670 = validateParameter(valid_596670, JString, required = false,
                                 default = nil)
  if valid_596670 != nil:
    section.add "X-Amz-Signature", valid_596670
  var valid_596671 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596671 = validateParameter(valid_596671, JString, required = false,
                                 default = nil)
  if valid_596671 != nil:
    section.add "X-Amz-Content-Sha256", valid_596671
  var valid_596672 = header.getOrDefault("X-Amz-Date")
  valid_596672 = validateParameter(valid_596672, JString, required = false,
                                 default = nil)
  if valid_596672 != nil:
    section.add "X-Amz-Date", valid_596672
  var valid_596673 = header.getOrDefault("X-Amz-Credential")
  valid_596673 = validateParameter(valid_596673, JString, required = false,
                                 default = nil)
  if valid_596673 != nil:
    section.add "X-Amz-Credential", valid_596673
  var valid_596674 = header.getOrDefault("X-Amz-Security-Token")
  valid_596674 = validateParameter(valid_596674, JString, required = false,
                                 default = nil)
  if valid_596674 != nil:
    section.add "X-Amz-Security-Token", valid_596674
  var valid_596675 = header.getOrDefault("X-Amz-Algorithm")
  valid_596675 = validateParameter(valid_596675, JString, required = false,
                                 default = nil)
  if valid_596675 != nil:
    section.add "X-Amz-Algorithm", valid_596675
  var valid_596676 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596676 = validateParameter(valid_596676, JString, required = false,
                                 default = nil)
  if valid_596676 != nil:
    section.add "X-Amz-SignedHeaders", valid_596676
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596677: Call_GetPromoteReadReplica_596662; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_596677.validator(path, query, header, formData, body)
  let scheme = call_596677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596677.url(scheme.get, call_596677.host, call_596677.base,
                         call_596677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596677, url, valid)

proc call*(call_596678: Call_GetPromoteReadReplica_596662;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; Version: string = "2014-10-31";
          PreferredBackupWindow: string = ""): Recallable =
  ## getPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  var query_596679 = newJObject()
  add(query_596679, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_596679, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_596679, "Action", newJString(Action))
  add(query_596679, "Version", newJString(Version))
  add(query_596679, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  result = call_596678.call(nil, query_596679, nil, nil, nil)

var getPromoteReadReplica* = Call_GetPromoteReadReplica_596662(
    name: "getPromoteReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_GetPromoteReadReplica_596663, base: "/",
    url: url_GetPromoteReadReplica_596664, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_596715 = ref object of OpenApiRestCall_592348
proc url_PostPromoteReadReplicaDBCluster_596717(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_596716(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596718 = query.getOrDefault("Action")
  valid_596718 = validateParameter(valid_596718, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_596718 != nil:
    section.add "Action", valid_596718
  var valid_596719 = query.getOrDefault("Version")
  valid_596719 = validateParameter(valid_596719, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596719 != nil:
    section.add "Version", valid_596719
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596720 = header.getOrDefault("X-Amz-Signature")
  valid_596720 = validateParameter(valid_596720, JString, required = false,
                                 default = nil)
  if valid_596720 != nil:
    section.add "X-Amz-Signature", valid_596720
  var valid_596721 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596721 = validateParameter(valid_596721, JString, required = false,
                                 default = nil)
  if valid_596721 != nil:
    section.add "X-Amz-Content-Sha256", valid_596721
  var valid_596722 = header.getOrDefault("X-Amz-Date")
  valid_596722 = validateParameter(valid_596722, JString, required = false,
                                 default = nil)
  if valid_596722 != nil:
    section.add "X-Amz-Date", valid_596722
  var valid_596723 = header.getOrDefault("X-Amz-Credential")
  valid_596723 = validateParameter(valid_596723, JString, required = false,
                                 default = nil)
  if valid_596723 != nil:
    section.add "X-Amz-Credential", valid_596723
  var valid_596724 = header.getOrDefault("X-Amz-Security-Token")
  valid_596724 = validateParameter(valid_596724, JString, required = false,
                                 default = nil)
  if valid_596724 != nil:
    section.add "X-Amz-Security-Token", valid_596724
  var valid_596725 = header.getOrDefault("X-Amz-Algorithm")
  valid_596725 = validateParameter(valid_596725, JString, required = false,
                                 default = nil)
  if valid_596725 != nil:
    section.add "X-Amz-Algorithm", valid_596725
  var valid_596726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596726 = validateParameter(valid_596726, JString, required = false,
                                 default = nil)
  if valid_596726 != nil:
    section.add "X-Amz-SignedHeaders", valid_596726
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_596727 = formData.getOrDefault("DBClusterIdentifier")
  valid_596727 = validateParameter(valid_596727, JString, required = true,
                                 default = nil)
  if valid_596727 != nil:
    section.add "DBClusterIdentifier", valid_596727
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596728: Call_PostPromoteReadReplicaDBCluster_596715;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596728.validator(path, query, header, formData, body)
  let scheme = call_596728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596728.url(scheme.get, call_596728.host, call_596728.base,
                         call_596728.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596728, url, valid)

proc call*(call_596729: Call_PostPromoteReadReplicaDBCluster_596715;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  var query_596730 = newJObject()
  var formData_596731 = newJObject()
  add(query_596730, "Action", newJString(Action))
  add(query_596730, "Version", newJString(Version))
  add(formData_596731, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_596729.call(nil, query_596730, nil, formData_596731, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_596715(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_596716, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_596717,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_596699 = ref object of OpenApiRestCall_592348
proc url_GetPromoteReadReplicaDBCluster_596701(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_596700(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_596702 = query.getOrDefault("DBClusterIdentifier")
  valid_596702 = validateParameter(valid_596702, JString, required = true,
                                 default = nil)
  if valid_596702 != nil:
    section.add "DBClusterIdentifier", valid_596702
  var valid_596703 = query.getOrDefault("Action")
  valid_596703 = validateParameter(valid_596703, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_596703 != nil:
    section.add "Action", valid_596703
  var valid_596704 = query.getOrDefault("Version")
  valid_596704 = validateParameter(valid_596704, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596704 != nil:
    section.add "Version", valid_596704
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596705 = header.getOrDefault("X-Amz-Signature")
  valid_596705 = validateParameter(valid_596705, JString, required = false,
                                 default = nil)
  if valid_596705 != nil:
    section.add "X-Amz-Signature", valid_596705
  var valid_596706 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596706 = validateParameter(valid_596706, JString, required = false,
                                 default = nil)
  if valid_596706 != nil:
    section.add "X-Amz-Content-Sha256", valid_596706
  var valid_596707 = header.getOrDefault("X-Amz-Date")
  valid_596707 = validateParameter(valid_596707, JString, required = false,
                                 default = nil)
  if valid_596707 != nil:
    section.add "X-Amz-Date", valid_596707
  var valid_596708 = header.getOrDefault("X-Amz-Credential")
  valid_596708 = validateParameter(valid_596708, JString, required = false,
                                 default = nil)
  if valid_596708 != nil:
    section.add "X-Amz-Credential", valid_596708
  var valid_596709 = header.getOrDefault("X-Amz-Security-Token")
  valid_596709 = validateParameter(valid_596709, JString, required = false,
                                 default = nil)
  if valid_596709 != nil:
    section.add "X-Amz-Security-Token", valid_596709
  var valid_596710 = header.getOrDefault("X-Amz-Algorithm")
  valid_596710 = validateParameter(valid_596710, JString, required = false,
                                 default = nil)
  if valid_596710 != nil:
    section.add "X-Amz-Algorithm", valid_596710
  var valid_596711 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596711 = validateParameter(valid_596711, JString, required = false,
                                 default = nil)
  if valid_596711 != nil:
    section.add "X-Amz-SignedHeaders", valid_596711
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596712: Call_GetPromoteReadReplicaDBCluster_596699; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596712.validator(path, query, header, formData, body)
  let scheme = call_596712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596712.url(scheme.get, call_596712.host, call_596712.base,
                         call_596712.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596712, url, valid)

proc call*(call_596713: Call_GetPromoteReadReplicaDBCluster_596699;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596714 = newJObject()
  add(query_596714, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_596714, "Action", newJString(Action))
  add(query_596714, "Version", newJString(Version))
  result = call_596713.call(nil, query_596714, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_596699(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_596700, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_596701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedDBInstancesOffering_596751 = ref object of OpenApiRestCall_592348
proc url_PostPurchaseReservedDBInstancesOffering_596753(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPurchaseReservedDBInstancesOffering_596752(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596754 = query.getOrDefault("Action")
  valid_596754 = validateParameter(valid_596754, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_596754 != nil:
    section.add "Action", valid_596754
  var valid_596755 = query.getOrDefault("Version")
  valid_596755 = validateParameter(valid_596755, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596755 != nil:
    section.add "Version", valid_596755
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596756 = header.getOrDefault("X-Amz-Signature")
  valid_596756 = validateParameter(valid_596756, JString, required = false,
                                 default = nil)
  if valid_596756 != nil:
    section.add "X-Amz-Signature", valid_596756
  var valid_596757 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596757 = validateParameter(valid_596757, JString, required = false,
                                 default = nil)
  if valid_596757 != nil:
    section.add "X-Amz-Content-Sha256", valid_596757
  var valid_596758 = header.getOrDefault("X-Amz-Date")
  valid_596758 = validateParameter(valid_596758, JString, required = false,
                                 default = nil)
  if valid_596758 != nil:
    section.add "X-Amz-Date", valid_596758
  var valid_596759 = header.getOrDefault("X-Amz-Credential")
  valid_596759 = validateParameter(valid_596759, JString, required = false,
                                 default = nil)
  if valid_596759 != nil:
    section.add "X-Amz-Credential", valid_596759
  var valid_596760 = header.getOrDefault("X-Amz-Security-Token")
  valid_596760 = validateParameter(valid_596760, JString, required = false,
                                 default = nil)
  if valid_596760 != nil:
    section.add "X-Amz-Security-Token", valid_596760
  var valid_596761 = header.getOrDefault("X-Amz-Algorithm")
  valid_596761 = validateParameter(valid_596761, JString, required = false,
                                 default = nil)
  if valid_596761 != nil:
    section.add "X-Amz-Algorithm", valid_596761
  var valid_596762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596762 = validateParameter(valid_596762, JString, required = false,
                                 default = nil)
  if valid_596762 != nil:
    section.add "X-Amz-SignedHeaders", valid_596762
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  section = newJObject()
  var valid_596763 = formData.getOrDefault("ReservedDBInstanceId")
  valid_596763 = validateParameter(valid_596763, JString, required = false,
                                 default = nil)
  if valid_596763 != nil:
    section.add "ReservedDBInstanceId", valid_596763
  var valid_596764 = formData.getOrDefault("Tags")
  valid_596764 = validateParameter(valid_596764, JArray, required = false,
                                 default = nil)
  if valid_596764 != nil:
    section.add "Tags", valid_596764
  assert formData != nil, "formData argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_596765 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_596765 = validateParameter(valid_596765, JString, required = true,
                                 default = nil)
  if valid_596765 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_596765
  var valid_596766 = formData.getOrDefault("DBInstanceCount")
  valid_596766 = validateParameter(valid_596766, JInt, required = false, default = nil)
  if valid_596766 != nil:
    section.add "DBInstanceCount", valid_596766
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596767: Call_PostPurchaseReservedDBInstancesOffering_596751;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_596767.validator(path, query, header, formData, body)
  let scheme = call_596767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596767.url(scheme.get, call_596767.host, call_596767.base,
                         call_596767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596767, url, valid)

proc call*(call_596768: Call_PostPurchaseReservedDBInstancesOffering_596751;
          ReservedDBInstancesOfferingId: string;
          ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Tags: JsonNode = nil; Version: string = "2014-10-31"; DBInstanceCount: int = 0): Recallable =
  ## postPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  var query_596769 = newJObject()
  var formData_596770 = newJObject()
  add(formData_596770, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_596769, "Action", newJString(Action))
  if Tags != nil:
    formData_596770.add "Tags", Tags
  add(formData_596770, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_596769, "Version", newJString(Version))
  add(formData_596770, "DBInstanceCount", newJInt(DBInstanceCount))
  result = call_596768.call(nil, query_596769, nil, formData_596770, nil)

var postPurchaseReservedDBInstancesOffering* = Call_PostPurchaseReservedDBInstancesOffering_596751(
    name: "postPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_PostPurchaseReservedDBInstancesOffering_596752, base: "/",
    url: url_PostPurchaseReservedDBInstancesOffering_596753,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedDBInstancesOffering_596732 = ref object of OpenApiRestCall_592348
proc url_GetPurchaseReservedDBInstancesOffering_596734(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPurchaseReservedDBInstancesOffering_596733(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: JString (required)
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596735 = query.getOrDefault("Tags")
  valid_596735 = validateParameter(valid_596735, JArray, required = false,
                                 default = nil)
  if valid_596735 != nil:
    section.add "Tags", valid_596735
  var valid_596736 = query.getOrDefault("DBInstanceCount")
  valid_596736 = validateParameter(valid_596736, JInt, required = false, default = nil)
  if valid_596736 != nil:
    section.add "DBInstanceCount", valid_596736
  var valid_596737 = query.getOrDefault("ReservedDBInstanceId")
  valid_596737 = validateParameter(valid_596737, JString, required = false,
                                 default = nil)
  if valid_596737 != nil:
    section.add "ReservedDBInstanceId", valid_596737
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596738 = query.getOrDefault("Action")
  valid_596738 = validateParameter(valid_596738, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_596738 != nil:
    section.add "Action", valid_596738
  var valid_596739 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_596739 = validateParameter(valid_596739, JString, required = true,
                                 default = nil)
  if valid_596739 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_596739
  var valid_596740 = query.getOrDefault("Version")
  valid_596740 = validateParameter(valid_596740, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596740 != nil:
    section.add "Version", valid_596740
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596741 = header.getOrDefault("X-Amz-Signature")
  valid_596741 = validateParameter(valid_596741, JString, required = false,
                                 default = nil)
  if valid_596741 != nil:
    section.add "X-Amz-Signature", valid_596741
  var valid_596742 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596742 = validateParameter(valid_596742, JString, required = false,
                                 default = nil)
  if valid_596742 != nil:
    section.add "X-Amz-Content-Sha256", valid_596742
  var valid_596743 = header.getOrDefault("X-Amz-Date")
  valid_596743 = validateParameter(valid_596743, JString, required = false,
                                 default = nil)
  if valid_596743 != nil:
    section.add "X-Amz-Date", valid_596743
  var valid_596744 = header.getOrDefault("X-Amz-Credential")
  valid_596744 = validateParameter(valid_596744, JString, required = false,
                                 default = nil)
  if valid_596744 != nil:
    section.add "X-Amz-Credential", valid_596744
  var valid_596745 = header.getOrDefault("X-Amz-Security-Token")
  valid_596745 = validateParameter(valid_596745, JString, required = false,
                                 default = nil)
  if valid_596745 != nil:
    section.add "X-Amz-Security-Token", valid_596745
  var valid_596746 = header.getOrDefault("X-Amz-Algorithm")
  valid_596746 = validateParameter(valid_596746, JString, required = false,
                                 default = nil)
  if valid_596746 != nil:
    section.add "X-Amz-Algorithm", valid_596746
  var valid_596747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596747 = validateParameter(valid_596747, JString, required = false,
                                 default = nil)
  if valid_596747 != nil:
    section.add "X-Amz-SignedHeaders", valid_596747
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596748: Call_GetPurchaseReservedDBInstancesOffering_596732;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_596748.validator(path, query, header, formData, body)
  let scheme = call_596748.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596748.url(scheme.get, call_596748.host, call_596748.base,
                         call_596748.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596748, url, valid)

proc call*(call_596749: Call_GetPurchaseReservedDBInstancesOffering_596732;
          ReservedDBInstancesOfferingId: string; Tags: JsonNode = nil;
          DBInstanceCount: int = 0; ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## getPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  var query_596750 = newJObject()
  if Tags != nil:
    query_596750.add "Tags", Tags
  add(query_596750, "DBInstanceCount", newJInt(DBInstanceCount))
  add(query_596750, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_596750, "Action", newJString(Action))
  add(query_596750, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_596750, "Version", newJString(Version))
  result = call_596749.call(nil, query_596750, nil, nil, nil)

var getPurchaseReservedDBInstancesOffering* = Call_GetPurchaseReservedDBInstancesOffering_596732(
    name: "getPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_GetPurchaseReservedDBInstancesOffering_596733, base: "/",
    url: url_GetPurchaseReservedDBInstancesOffering_596734,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_596788 = ref object of OpenApiRestCall_592348
proc url_PostRebootDBInstance_596790(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRebootDBInstance_596789(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596791 = query.getOrDefault("Action")
  valid_596791 = validateParameter(valid_596791, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_596791 != nil:
    section.add "Action", valid_596791
  var valid_596792 = query.getOrDefault("Version")
  valid_596792 = validateParameter(valid_596792, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596792 != nil:
    section.add "Version", valid_596792
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596793 = header.getOrDefault("X-Amz-Signature")
  valid_596793 = validateParameter(valid_596793, JString, required = false,
                                 default = nil)
  if valid_596793 != nil:
    section.add "X-Amz-Signature", valid_596793
  var valid_596794 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596794 = validateParameter(valid_596794, JString, required = false,
                                 default = nil)
  if valid_596794 != nil:
    section.add "X-Amz-Content-Sha256", valid_596794
  var valid_596795 = header.getOrDefault("X-Amz-Date")
  valid_596795 = validateParameter(valid_596795, JString, required = false,
                                 default = nil)
  if valid_596795 != nil:
    section.add "X-Amz-Date", valid_596795
  var valid_596796 = header.getOrDefault("X-Amz-Credential")
  valid_596796 = validateParameter(valid_596796, JString, required = false,
                                 default = nil)
  if valid_596796 != nil:
    section.add "X-Amz-Credential", valid_596796
  var valid_596797 = header.getOrDefault("X-Amz-Security-Token")
  valid_596797 = validateParameter(valid_596797, JString, required = false,
                                 default = nil)
  if valid_596797 != nil:
    section.add "X-Amz-Security-Token", valid_596797
  var valid_596798 = header.getOrDefault("X-Amz-Algorithm")
  valid_596798 = validateParameter(valid_596798, JString, required = false,
                                 default = nil)
  if valid_596798 != nil:
    section.add "X-Amz-Algorithm", valid_596798
  var valid_596799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596799 = validateParameter(valid_596799, JString, required = false,
                                 default = nil)
  if valid_596799 != nil:
    section.add "X-Amz-SignedHeaders", valid_596799
  result.add "header", section
  ## parameters in `formData` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_596800 = formData.getOrDefault("ForceFailover")
  valid_596800 = validateParameter(valid_596800, JBool, required = false, default = nil)
  if valid_596800 != nil:
    section.add "ForceFailover", valid_596800
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_596801 = formData.getOrDefault("DBInstanceIdentifier")
  valid_596801 = validateParameter(valid_596801, JString, required = true,
                                 default = nil)
  if valid_596801 != nil:
    section.add "DBInstanceIdentifier", valid_596801
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596802: Call_PostRebootDBInstance_596788; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_596802.validator(path, query, header, formData, body)
  let scheme = call_596802.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596802.url(scheme.get, call_596802.host, call_596802.base,
                         call_596802.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596802, url, valid)

proc call*(call_596803: Call_PostRebootDBInstance_596788;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596804 = newJObject()
  var formData_596805 = newJObject()
  add(formData_596805, "ForceFailover", newJBool(ForceFailover))
  add(formData_596805, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_596804, "Action", newJString(Action))
  add(query_596804, "Version", newJString(Version))
  result = call_596803.call(nil, query_596804, nil, formData_596805, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_596788(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_596789, base: "/",
    url: url_PostRebootDBInstance_596790, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_596771 = ref object of OpenApiRestCall_592348
proc url_GetRebootDBInstance_596773(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRebootDBInstance_596772(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_596774 = query.getOrDefault("ForceFailover")
  valid_596774 = validateParameter(valid_596774, JBool, required = false, default = nil)
  if valid_596774 != nil:
    section.add "ForceFailover", valid_596774
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_596775 = query.getOrDefault("DBInstanceIdentifier")
  valid_596775 = validateParameter(valid_596775, JString, required = true,
                                 default = nil)
  if valid_596775 != nil:
    section.add "DBInstanceIdentifier", valid_596775
  var valid_596776 = query.getOrDefault("Action")
  valid_596776 = validateParameter(valid_596776, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_596776 != nil:
    section.add "Action", valid_596776
  var valid_596777 = query.getOrDefault("Version")
  valid_596777 = validateParameter(valid_596777, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596777 != nil:
    section.add "Version", valid_596777
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596778 = header.getOrDefault("X-Amz-Signature")
  valid_596778 = validateParameter(valid_596778, JString, required = false,
                                 default = nil)
  if valid_596778 != nil:
    section.add "X-Amz-Signature", valid_596778
  var valid_596779 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596779 = validateParameter(valid_596779, JString, required = false,
                                 default = nil)
  if valid_596779 != nil:
    section.add "X-Amz-Content-Sha256", valid_596779
  var valid_596780 = header.getOrDefault("X-Amz-Date")
  valid_596780 = validateParameter(valid_596780, JString, required = false,
                                 default = nil)
  if valid_596780 != nil:
    section.add "X-Amz-Date", valid_596780
  var valid_596781 = header.getOrDefault("X-Amz-Credential")
  valid_596781 = validateParameter(valid_596781, JString, required = false,
                                 default = nil)
  if valid_596781 != nil:
    section.add "X-Amz-Credential", valid_596781
  var valid_596782 = header.getOrDefault("X-Amz-Security-Token")
  valid_596782 = validateParameter(valid_596782, JString, required = false,
                                 default = nil)
  if valid_596782 != nil:
    section.add "X-Amz-Security-Token", valid_596782
  var valid_596783 = header.getOrDefault("X-Amz-Algorithm")
  valid_596783 = validateParameter(valid_596783, JString, required = false,
                                 default = nil)
  if valid_596783 != nil:
    section.add "X-Amz-Algorithm", valid_596783
  var valid_596784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596784 = validateParameter(valid_596784, JString, required = false,
                                 default = nil)
  if valid_596784 != nil:
    section.add "X-Amz-SignedHeaders", valid_596784
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596785: Call_GetRebootDBInstance_596771; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_596785.validator(path, query, header, formData, body)
  let scheme = call_596785.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596785.url(scheme.get, call_596785.host, call_596785.base,
                         call_596785.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596785, url, valid)

proc call*(call_596786: Call_GetRebootDBInstance_596771;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596787 = newJObject()
  add(query_596787, "ForceFailover", newJBool(ForceFailover))
  add(query_596787, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_596787, "Action", newJString(Action))
  add(query_596787, "Version", newJString(Version))
  result = call_596786.call(nil, query_596787, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_596771(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_596772, base: "/",
    url: url_GetRebootDBInstance_596773, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveFromGlobalCluster_596823 = ref object of OpenApiRestCall_592348
proc url_PostRemoveFromGlobalCluster_596825(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveFromGlobalCluster_596824(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596826 = query.getOrDefault("Action")
  valid_596826 = validateParameter(valid_596826, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_596826 != nil:
    section.add "Action", valid_596826
  var valid_596827 = query.getOrDefault("Version")
  valid_596827 = validateParameter(valid_596827, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596827 != nil:
    section.add "Version", valid_596827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596828 = header.getOrDefault("X-Amz-Signature")
  valid_596828 = validateParameter(valid_596828, JString, required = false,
                                 default = nil)
  if valid_596828 != nil:
    section.add "X-Amz-Signature", valid_596828
  var valid_596829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596829 = validateParameter(valid_596829, JString, required = false,
                                 default = nil)
  if valid_596829 != nil:
    section.add "X-Amz-Content-Sha256", valid_596829
  var valid_596830 = header.getOrDefault("X-Amz-Date")
  valid_596830 = validateParameter(valid_596830, JString, required = false,
                                 default = nil)
  if valid_596830 != nil:
    section.add "X-Amz-Date", valid_596830
  var valid_596831 = header.getOrDefault("X-Amz-Credential")
  valid_596831 = validateParameter(valid_596831, JString, required = false,
                                 default = nil)
  if valid_596831 != nil:
    section.add "X-Amz-Credential", valid_596831
  var valid_596832 = header.getOrDefault("X-Amz-Security-Token")
  valid_596832 = validateParameter(valid_596832, JString, required = false,
                                 default = nil)
  if valid_596832 != nil:
    section.add "X-Amz-Security-Token", valid_596832
  var valid_596833 = header.getOrDefault("X-Amz-Algorithm")
  valid_596833 = validateParameter(valid_596833, JString, required = false,
                                 default = nil)
  if valid_596833 != nil:
    section.add "X-Amz-Algorithm", valid_596833
  var valid_596834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596834 = validateParameter(valid_596834, JString, required = false,
                                 default = nil)
  if valid_596834 != nil:
    section.add "X-Amz-SignedHeaders", valid_596834
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  section = newJObject()
  var valid_596835 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_596835 = validateParameter(valid_596835, JString, required = false,
                                 default = nil)
  if valid_596835 != nil:
    section.add "GlobalClusterIdentifier", valid_596835
  var valid_596836 = formData.getOrDefault("DbClusterIdentifier")
  valid_596836 = validateParameter(valid_596836, JString, required = false,
                                 default = nil)
  if valid_596836 != nil:
    section.add "DbClusterIdentifier", valid_596836
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596837: Call_PostRemoveFromGlobalCluster_596823; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596837.validator(path, query, header, formData, body)
  let scheme = call_596837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596837.url(scheme.get, call_596837.host, call_596837.base,
                         call_596837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596837, url, valid)

proc call*(call_596838: Call_PostRemoveFromGlobalCluster_596823;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596839 = newJObject()
  var formData_596840 = newJObject()
  add(formData_596840, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_596840, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_596839, "Action", newJString(Action))
  add(query_596839, "Version", newJString(Version))
  result = call_596838.call(nil, query_596839, nil, formData_596840, nil)

var postRemoveFromGlobalCluster* = Call_PostRemoveFromGlobalCluster_596823(
    name: "postRemoveFromGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_PostRemoveFromGlobalCluster_596824, base: "/",
    url: url_PostRemoveFromGlobalCluster_596825,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveFromGlobalCluster_596806 = ref object of OpenApiRestCall_592348
proc url_GetRemoveFromGlobalCluster_596808(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveFromGlobalCluster_596807(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_596809 = query.getOrDefault("GlobalClusterIdentifier")
  valid_596809 = validateParameter(valid_596809, JString, required = false,
                                 default = nil)
  if valid_596809 != nil:
    section.add "GlobalClusterIdentifier", valid_596809
  var valid_596810 = query.getOrDefault("DbClusterIdentifier")
  valid_596810 = validateParameter(valid_596810, JString, required = false,
                                 default = nil)
  if valid_596810 != nil:
    section.add "DbClusterIdentifier", valid_596810
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596811 = query.getOrDefault("Action")
  valid_596811 = validateParameter(valid_596811, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_596811 != nil:
    section.add "Action", valid_596811
  var valid_596812 = query.getOrDefault("Version")
  valid_596812 = validateParameter(valid_596812, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596812 != nil:
    section.add "Version", valid_596812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596813 = header.getOrDefault("X-Amz-Signature")
  valid_596813 = validateParameter(valid_596813, JString, required = false,
                                 default = nil)
  if valid_596813 != nil:
    section.add "X-Amz-Signature", valid_596813
  var valid_596814 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596814 = validateParameter(valid_596814, JString, required = false,
                                 default = nil)
  if valid_596814 != nil:
    section.add "X-Amz-Content-Sha256", valid_596814
  var valid_596815 = header.getOrDefault("X-Amz-Date")
  valid_596815 = validateParameter(valid_596815, JString, required = false,
                                 default = nil)
  if valid_596815 != nil:
    section.add "X-Amz-Date", valid_596815
  var valid_596816 = header.getOrDefault("X-Amz-Credential")
  valid_596816 = validateParameter(valid_596816, JString, required = false,
                                 default = nil)
  if valid_596816 != nil:
    section.add "X-Amz-Credential", valid_596816
  var valid_596817 = header.getOrDefault("X-Amz-Security-Token")
  valid_596817 = validateParameter(valid_596817, JString, required = false,
                                 default = nil)
  if valid_596817 != nil:
    section.add "X-Amz-Security-Token", valid_596817
  var valid_596818 = header.getOrDefault("X-Amz-Algorithm")
  valid_596818 = validateParameter(valid_596818, JString, required = false,
                                 default = nil)
  if valid_596818 != nil:
    section.add "X-Amz-Algorithm", valid_596818
  var valid_596819 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596819 = validateParameter(valid_596819, JString, required = false,
                                 default = nil)
  if valid_596819 != nil:
    section.add "X-Amz-SignedHeaders", valid_596819
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596820: Call_GetRemoveFromGlobalCluster_596806; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596820.validator(path, query, header, formData, body)
  let scheme = call_596820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596820.url(scheme.get, call_596820.host, call_596820.base,
                         call_596820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596820, url, valid)

proc call*(call_596821: Call_GetRemoveFromGlobalCluster_596806;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596822 = newJObject()
  add(query_596822, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_596822, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_596822, "Action", newJString(Action))
  add(query_596822, "Version", newJString(Version))
  result = call_596821.call(nil, query_596822, nil, nil, nil)

var getRemoveFromGlobalCluster* = Call_GetRemoveFromGlobalCluster_596806(
    name: "getRemoveFromGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_GetRemoveFromGlobalCluster_596807, base: "/",
    url: url_GetRemoveFromGlobalCluster_596808,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_596859 = ref object of OpenApiRestCall_592348
proc url_PostRemoveRoleFromDBCluster_596861(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_596860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596862 = query.getOrDefault("Action")
  valid_596862 = validateParameter(valid_596862, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_596862 != nil:
    section.add "Action", valid_596862
  var valid_596863 = query.getOrDefault("Version")
  valid_596863 = validateParameter(valid_596863, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596863 != nil:
    section.add "Version", valid_596863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596864 = header.getOrDefault("X-Amz-Signature")
  valid_596864 = validateParameter(valid_596864, JString, required = false,
                                 default = nil)
  if valid_596864 != nil:
    section.add "X-Amz-Signature", valid_596864
  var valid_596865 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596865 = validateParameter(valid_596865, JString, required = false,
                                 default = nil)
  if valid_596865 != nil:
    section.add "X-Amz-Content-Sha256", valid_596865
  var valid_596866 = header.getOrDefault("X-Amz-Date")
  valid_596866 = validateParameter(valid_596866, JString, required = false,
                                 default = nil)
  if valid_596866 != nil:
    section.add "X-Amz-Date", valid_596866
  var valid_596867 = header.getOrDefault("X-Amz-Credential")
  valid_596867 = validateParameter(valid_596867, JString, required = false,
                                 default = nil)
  if valid_596867 != nil:
    section.add "X-Amz-Credential", valid_596867
  var valid_596868 = header.getOrDefault("X-Amz-Security-Token")
  valid_596868 = validateParameter(valid_596868, JString, required = false,
                                 default = nil)
  if valid_596868 != nil:
    section.add "X-Amz-Security-Token", valid_596868
  var valid_596869 = header.getOrDefault("X-Amz-Algorithm")
  valid_596869 = validateParameter(valid_596869, JString, required = false,
                                 default = nil)
  if valid_596869 != nil:
    section.add "X-Amz-Algorithm", valid_596869
  var valid_596870 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596870 = validateParameter(valid_596870, JString, required = false,
                                 default = nil)
  if valid_596870 != nil:
    section.add "X-Amz-SignedHeaders", valid_596870
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  var valid_596871 = formData.getOrDefault("FeatureName")
  valid_596871 = validateParameter(valid_596871, JString, required = false,
                                 default = nil)
  if valid_596871 != nil:
    section.add "FeatureName", valid_596871
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_596872 = formData.getOrDefault("RoleArn")
  valid_596872 = validateParameter(valid_596872, JString, required = true,
                                 default = nil)
  if valid_596872 != nil:
    section.add "RoleArn", valid_596872
  var valid_596873 = formData.getOrDefault("DBClusterIdentifier")
  valid_596873 = validateParameter(valid_596873, JString, required = true,
                                 default = nil)
  if valid_596873 != nil:
    section.add "DBClusterIdentifier", valid_596873
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596874: Call_PostRemoveRoleFromDBCluster_596859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596874.validator(path, query, header, formData, body)
  let scheme = call_596874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596874.url(scheme.get, call_596874.host, call_596874.base,
                         call_596874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596874, url, valid)

proc call*(call_596875: Call_PostRemoveRoleFromDBCluster_596859; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  var query_596876 = newJObject()
  var formData_596877 = newJObject()
  add(formData_596877, "FeatureName", newJString(FeatureName))
  add(formData_596877, "RoleArn", newJString(RoleArn))
  add(query_596876, "Action", newJString(Action))
  add(query_596876, "Version", newJString(Version))
  add(formData_596877, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_596875.call(nil, query_596876, nil, formData_596877, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_596859(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_596860, base: "/",
    url: url_PostRemoveRoleFromDBCluster_596861,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_596841 = ref object of OpenApiRestCall_592348
proc url_GetRemoveRoleFromDBCluster_596843(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_596842(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_596844 = query.getOrDefault("RoleArn")
  valid_596844 = validateParameter(valid_596844, JString, required = true,
                                 default = nil)
  if valid_596844 != nil:
    section.add "RoleArn", valid_596844
  var valid_596845 = query.getOrDefault("DBClusterIdentifier")
  valid_596845 = validateParameter(valid_596845, JString, required = true,
                                 default = nil)
  if valid_596845 != nil:
    section.add "DBClusterIdentifier", valid_596845
  var valid_596846 = query.getOrDefault("FeatureName")
  valid_596846 = validateParameter(valid_596846, JString, required = false,
                                 default = nil)
  if valid_596846 != nil:
    section.add "FeatureName", valid_596846
  var valid_596847 = query.getOrDefault("Action")
  valid_596847 = validateParameter(valid_596847, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_596847 != nil:
    section.add "Action", valid_596847
  var valid_596848 = query.getOrDefault("Version")
  valid_596848 = validateParameter(valid_596848, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596848 != nil:
    section.add "Version", valid_596848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596849 = header.getOrDefault("X-Amz-Signature")
  valid_596849 = validateParameter(valid_596849, JString, required = false,
                                 default = nil)
  if valid_596849 != nil:
    section.add "X-Amz-Signature", valid_596849
  var valid_596850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596850 = validateParameter(valid_596850, JString, required = false,
                                 default = nil)
  if valid_596850 != nil:
    section.add "X-Amz-Content-Sha256", valid_596850
  var valid_596851 = header.getOrDefault("X-Amz-Date")
  valid_596851 = validateParameter(valid_596851, JString, required = false,
                                 default = nil)
  if valid_596851 != nil:
    section.add "X-Amz-Date", valid_596851
  var valid_596852 = header.getOrDefault("X-Amz-Credential")
  valid_596852 = validateParameter(valid_596852, JString, required = false,
                                 default = nil)
  if valid_596852 != nil:
    section.add "X-Amz-Credential", valid_596852
  var valid_596853 = header.getOrDefault("X-Amz-Security-Token")
  valid_596853 = validateParameter(valid_596853, JString, required = false,
                                 default = nil)
  if valid_596853 != nil:
    section.add "X-Amz-Security-Token", valid_596853
  var valid_596854 = header.getOrDefault("X-Amz-Algorithm")
  valid_596854 = validateParameter(valid_596854, JString, required = false,
                                 default = nil)
  if valid_596854 != nil:
    section.add "X-Amz-Algorithm", valid_596854
  var valid_596855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596855 = validateParameter(valid_596855, JString, required = false,
                                 default = nil)
  if valid_596855 != nil:
    section.add "X-Amz-SignedHeaders", valid_596855
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596856: Call_GetRemoveRoleFromDBCluster_596841; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596856.validator(path, query, header, formData, body)
  let scheme = call_596856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596856.url(scheme.get, call_596856.host, call_596856.base,
                         call_596856.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596856, url, valid)

proc call*(call_596857: Call_GetRemoveRoleFromDBCluster_596841; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596858 = newJObject()
  add(query_596858, "RoleArn", newJString(RoleArn))
  add(query_596858, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_596858, "FeatureName", newJString(FeatureName))
  add(query_596858, "Action", newJString(Action))
  add(query_596858, "Version", newJString(Version))
  result = call_596857.call(nil, query_596858, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_596841(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_596842, base: "/",
    url: url_GetRemoveRoleFromDBCluster_596843,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBInstance_596896 = ref object of OpenApiRestCall_592348
proc url_PostRemoveRoleFromDBInstance_596898(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveRoleFromDBInstance_596897(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596899 = query.getOrDefault("Action")
  valid_596899 = validateParameter(valid_596899, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_596899 != nil:
    section.add "Action", valid_596899
  var valid_596900 = query.getOrDefault("Version")
  valid_596900 = validateParameter(valid_596900, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596900 != nil:
    section.add "Version", valid_596900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596901 = header.getOrDefault("X-Amz-Signature")
  valid_596901 = validateParameter(valid_596901, JString, required = false,
                                 default = nil)
  if valid_596901 != nil:
    section.add "X-Amz-Signature", valid_596901
  var valid_596902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596902 = validateParameter(valid_596902, JString, required = false,
                                 default = nil)
  if valid_596902 != nil:
    section.add "X-Amz-Content-Sha256", valid_596902
  var valid_596903 = header.getOrDefault("X-Amz-Date")
  valid_596903 = validateParameter(valid_596903, JString, required = false,
                                 default = nil)
  if valid_596903 != nil:
    section.add "X-Amz-Date", valid_596903
  var valid_596904 = header.getOrDefault("X-Amz-Credential")
  valid_596904 = validateParameter(valid_596904, JString, required = false,
                                 default = nil)
  if valid_596904 != nil:
    section.add "X-Amz-Credential", valid_596904
  var valid_596905 = header.getOrDefault("X-Amz-Security-Token")
  valid_596905 = validateParameter(valid_596905, JString, required = false,
                                 default = nil)
  if valid_596905 != nil:
    section.add "X-Amz-Security-Token", valid_596905
  var valid_596906 = header.getOrDefault("X-Amz-Algorithm")
  valid_596906 = validateParameter(valid_596906, JString, required = false,
                                 default = nil)
  if valid_596906 != nil:
    section.add "X-Amz-Algorithm", valid_596906
  var valid_596907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596907 = validateParameter(valid_596907, JString, required = false,
                                 default = nil)
  if valid_596907 != nil:
    section.add "X-Amz-SignedHeaders", valid_596907
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_596908 = formData.getOrDefault("FeatureName")
  valid_596908 = validateParameter(valid_596908, JString, required = true,
                                 default = nil)
  if valid_596908 != nil:
    section.add "FeatureName", valid_596908
  var valid_596909 = formData.getOrDefault("RoleArn")
  valid_596909 = validateParameter(valid_596909, JString, required = true,
                                 default = nil)
  if valid_596909 != nil:
    section.add "RoleArn", valid_596909
  var valid_596910 = formData.getOrDefault("DBInstanceIdentifier")
  valid_596910 = validateParameter(valid_596910, JString, required = true,
                                 default = nil)
  if valid_596910 != nil:
    section.add "DBInstanceIdentifier", valid_596910
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596911: Call_PostRemoveRoleFromDBInstance_596896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_596911.validator(path, query, header, formData, body)
  let scheme = call_596911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596911.url(scheme.get, call_596911.host, call_596911.base,
                         call_596911.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596911, url, valid)

proc call*(call_596912: Call_PostRemoveRoleFromDBInstance_596896;
          FeatureName: string; RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596913 = newJObject()
  var formData_596914 = newJObject()
  add(formData_596914, "FeatureName", newJString(FeatureName))
  add(formData_596914, "RoleArn", newJString(RoleArn))
  add(formData_596914, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_596913, "Action", newJString(Action))
  add(query_596913, "Version", newJString(Version))
  result = call_596912.call(nil, query_596913, nil, formData_596914, nil)

var postRemoveRoleFromDBInstance* = Call_PostRemoveRoleFromDBInstance_596896(
    name: "postRemoveRoleFromDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_PostRemoveRoleFromDBInstance_596897, base: "/",
    url: url_PostRemoveRoleFromDBInstance_596898,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBInstance_596878 = ref object of OpenApiRestCall_592348
proc url_GetRemoveRoleFromDBInstance_596880(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveRoleFromDBInstance_596879(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_596881 = query.getOrDefault("RoleArn")
  valid_596881 = validateParameter(valid_596881, JString, required = true,
                                 default = nil)
  if valid_596881 != nil:
    section.add "RoleArn", valid_596881
  var valid_596882 = query.getOrDefault("FeatureName")
  valid_596882 = validateParameter(valid_596882, JString, required = true,
                                 default = nil)
  if valid_596882 != nil:
    section.add "FeatureName", valid_596882
  var valid_596883 = query.getOrDefault("DBInstanceIdentifier")
  valid_596883 = validateParameter(valid_596883, JString, required = true,
                                 default = nil)
  if valid_596883 != nil:
    section.add "DBInstanceIdentifier", valid_596883
  var valid_596884 = query.getOrDefault("Action")
  valid_596884 = validateParameter(valid_596884, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_596884 != nil:
    section.add "Action", valid_596884
  var valid_596885 = query.getOrDefault("Version")
  valid_596885 = validateParameter(valid_596885, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596885 != nil:
    section.add "Version", valid_596885
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596886 = header.getOrDefault("X-Amz-Signature")
  valid_596886 = validateParameter(valid_596886, JString, required = false,
                                 default = nil)
  if valid_596886 != nil:
    section.add "X-Amz-Signature", valid_596886
  var valid_596887 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596887 = validateParameter(valid_596887, JString, required = false,
                                 default = nil)
  if valid_596887 != nil:
    section.add "X-Amz-Content-Sha256", valid_596887
  var valid_596888 = header.getOrDefault("X-Amz-Date")
  valid_596888 = validateParameter(valid_596888, JString, required = false,
                                 default = nil)
  if valid_596888 != nil:
    section.add "X-Amz-Date", valid_596888
  var valid_596889 = header.getOrDefault("X-Amz-Credential")
  valid_596889 = validateParameter(valid_596889, JString, required = false,
                                 default = nil)
  if valid_596889 != nil:
    section.add "X-Amz-Credential", valid_596889
  var valid_596890 = header.getOrDefault("X-Amz-Security-Token")
  valid_596890 = validateParameter(valid_596890, JString, required = false,
                                 default = nil)
  if valid_596890 != nil:
    section.add "X-Amz-Security-Token", valid_596890
  var valid_596891 = header.getOrDefault("X-Amz-Algorithm")
  valid_596891 = validateParameter(valid_596891, JString, required = false,
                                 default = nil)
  if valid_596891 != nil:
    section.add "X-Amz-Algorithm", valid_596891
  var valid_596892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596892 = validateParameter(valid_596892, JString, required = false,
                                 default = nil)
  if valid_596892 != nil:
    section.add "X-Amz-SignedHeaders", valid_596892
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596893: Call_GetRemoveRoleFromDBInstance_596878; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_596893.validator(path, query, header, formData, body)
  let scheme = call_596893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596893.url(scheme.get, call_596893.host, call_596893.base,
                         call_596893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596893, url, valid)

proc call*(call_596894: Call_GetRemoveRoleFromDBInstance_596878; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596895 = newJObject()
  add(query_596895, "RoleArn", newJString(RoleArn))
  add(query_596895, "FeatureName", newJString(FeatureName))
  add(query_596895, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_596895, "Action", newJString(Action))
  add(query_596895, "Version", newJString(Version))
  result = call_596894.call(nil, query_596895, nil, nil, nil)

var getRemoveRoleFromDBInstance* = Call_GetRemoveRoleFromDBInstance_596878(
    name: "getRemoveRoleFromDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_GetRemoveRoleFromDBInstance_596879, base: "/",
    url: url_GetRemoveRoleFromDBInstance_596880,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_596932 = ref object of OpenApiRestCall_592348
proc url_PostRemoveSourceIdentifierFromSubscription_596934(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_596933(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596935 = query.getOrDefault("Action")
  valid_596935 = validateParameter(valid_596935, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_596935 != nil:
    section.add "Action", valid_596935
  var valid_596936 = query.getOrDefault("Version")
  valid_596936 = validateParameter(valid_596936, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596936 != nil:
    section.add "Version", valid_596936
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596937 = header.getOrDefault("X-Amz-Signature")
  valid_596937 = validateParameter(valid_596937, JString, required = false,
                                 default = nil)
  if valid_596937 != nil:
    section.add "X-Amz-Signature", valid_596937
  var valid_596938 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596938 = validateParameter(valid_596938, JString, required = false,
                                 default = nil)
  if valid_596938 != nil:
    section.add "X-Amz-Content-Sha256", valid_596938
  var valid_596939 = header.getOrDefault("X-Amz-Date")
  valid_596939 = validateParameter(valid_596939, JString, required = false,
                                 default = nil)
  if valid_596939 != nil:
    section.add "X-Amz-Date", valid_596939
  var valid_596940 = header.getOrDefault("X-Amz-Credential")
  valid_596940 = validateParameter(valid_596940, JString, required = false,
                                 default = nil)
  if valid_596940 != nil:
    section.add "X-Amz-Credential", valid_596940
  var valid_596941 = header.getOrDefault("X-Amz-Security-Token")
  valid_596941 = validateParameter(valid_596941, JString, required = false,
                                 default = nil)
  if valid_596941 != nil:
    section.add "X-Amz-Security-Token", valid_596941
  var valid_596942 = header.getOrDefault("X-Amz-Algorithm")
  valid_596942 = validateParameter(valid_596942, JString, required = false,
                                 default = nil)
  if valid_596942 != nil:
    section.add "X-Amz-Algorithm", valid_596942
  var valid_596943 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596943 = validateParameter(valid_596943, JString, required = false,
                                 default = nil)
  if valid_596943 != nil:
    section.add "X-Amz-SignedHeaders", valid_596943
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_596944 = formData.getOrDefault("SubscriptionName")
  valid_596944 = validateParameter(valid_596944, JString, required = true,
                                 default = nil)
  if valid_596944 != nil:
    section.add "SubscriptionName", valid_596944
  var valid_596945 = formData.getOrDefault("SourceIdentifier")
  valid_596945 = validateParameter(valid_596945, JString, required = true,
                                 default = nil)
  if valid_596945 != nil:
    section.add "SourceIdentifier", valid_596945
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596946: Call_PostRemoveSourceIdentifierFromSubscription_596932;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_596946.validator(path, query, header, formData, body)
  let scheme = call_596946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596946.url(scheme.get, call_596946.host, call_596946.base,
                         call_596946.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596946, url, valid)

proc call*(call_596947: Call_PostRemoveSourceIdentifierFromSubscription_596932;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596948 = newJObject()
  var formData_596949 = newJObject()
  add(formData_596949, "SubscriptionName", newJString(SubscriptionName))
  add(formData_596949, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_596948, "Action", newJString(Action))
  add(query_596948, "Version", newJString(Version))
  result = call_596947.call(nil, query_596948, nil, formData_596949, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_596932(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_596933,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_596934,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_596915 = ref object of OpenApiRestCall_592348
proc url_GetRemoveSourceIdentifierFromSubscription_596917(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_596916(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_596918 = query.getOrDefault("SourceIdentifier")
  valid_596918 = validateParameter(valid_596918, JString, required = true,
                                 default = nil)
  if valid_596918 != nil:
    section.add "SourceIdentifier", valid_596918
  var valid_596919 = query.getOrDefault("SubscriptionName")
  valid_596919 = validateParameter(valid_596919, JString, required = true,
                                 default = nil)
  if valid_596919 != nil:
    section.add "SubscriptionName", valid_596919
  var valid_596920 = query.getOrDefault("Action")
  valid_596920 = validateParameter(valid_596920, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_596920 != nil:
    section.add "Action", valid_596920
  var valid_596921 = query.getOrDefault("Version")
  valid_596921 = validateParameter(valid_596921, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596921 != nil:
    section.add "Version", valid_596921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596922 = header.getOrDefault("X-Amz-Signature")
  valid_596922 = validateParameter(valid_596922, JString, required = false,
                                 default = nil)
  if valid_596922 != nil:
    section.add "X-Amz-Signature", valid_596922
  var valid_596923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596923 = validateParameter(valid_596923, JString, required = false,
                                 default = nil)
  if valid_596923 != nil:
    section.add "X-Amz-Content-Sha256", valid_596923
  var valid_596924 = header.getOrDefault("X-Amz-Date")
  valid_596924 = validateParameter(valid_596924, JString, required = false,
                                 default = nil)
  if valid_596924 != nil:
    section.add "X-Amz-Date", valid_596924
  var valid_596925 = header.getOrDefault("X-Amz-Credential")
  valid_596925 = validateParameter(valid_596925, JString, required = false,
                                 default = nil)
  if valid_596925 != nil:
    section.add "X-Amz-Credential", valid_596925
  var valid_596926 = header.getOrDefault("X-Amz-Security-Token")
  valid_596926 = validateParameter(valid_596926, JString, required = false,
                                 default = nil)
  if valid_596926 != nil:
    section.add "X-Amz-Security-Token", valid_596926
  var valid_596927 = header.getOrDefault("X-Amz-Algorithm")
  valid_596927 = validateParameter(valid_596927, JString, required = false,
                                 default = nil)
  if valid_596927 != nil:
    section.add "X-Amz-Algorithm", valid_596927
  var valid_596928 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596928 = validateParameter(valid_596928, JString, required = false,
                                 default = nil)
  if valid_596928 != nil:
    section.add "X-Amz-SignedHeaders", valid_596928
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596929: Call_GetRemoveSourceIdentifierFromSubscription_596915;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_596929.validator(path, query, header, formData, body)
  let scheme = call_596929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596929.url(scheme.get, call_596929.host, call_596929.base,
                         call_596929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596929, url, valid)

proc call*(call_596930: Call_GetRemoveSourceIdentifierFromSubscription_596915;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596931 = newJObject()
  add(query_596931, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_596931, "SubscriptionName", newJString(SubscriptionName))
  add(query_596931, "Action", newJString(Action))
  add(query_596931, "Version", newJString(Version))
  result = call_596930.call(nil, query_596931, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_596915(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_596916,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_596917,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_596967 = ref object of OpenApiRestCall_592348
proc url_PostRemoveTagsFromResource_596969(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveTagsFromResource_596968(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596970 = query.getOrDefault("Action")
  valid_596970 = validateParameter(valid_596970, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_596970 != nil:
    section.add "Action", valid_596970
  var valid_596971 = query.getOrDefault("Version")
  valid_596971 = validateParameter(valid_596971, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596971 != nil:
    section.add "Version", valid_596971
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596972 = header.getOrDefault("X-Amz-Signature")
  valid_596972 = validateParameter(valid_596972, JString, required = false,
                                 default = nil)
  if valid_596972 != nil:
    section.add "X-Amz-Signature", valid_596972
  var valid_596973 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596973 = validateParameter(valid_596973, JString, required = false,
                                 default = nil)
  if valid_596973 != nil:
    section.add "X-Amz-Content-Sha256", valid_596973
  var valid_596974 = header.getOrDefault("X-Amz-Date")
  valid_596974 = validateParameter(valid_596974, JString, required = false,
                                 default = nil)
  if valid_596974 != nil:
    section.add "X-Amz-Date", valid_596974
  var valid_596975 = header.getOrDefault("X-Amz-Credential")
  valid_596975 = validateParameter(valid_596975, JString, required = false,
                                 default = nil)
  if valid_596975 != nil:
    section.add "X-Amz-Credential", valid_596975
  var valid_596976 = header.getOrDefault("X-Amz-Security-Token")
  valid_596976 = validateParameter(valid_596976, JString, required = false,
                                 default = nil)
  if valid_596976 != nil:
    section.add "X-Amz-Security-Token", valid_596976
  var valid_596977 = header.getOrDefault("X-Amz-Algorithm")
  valid_596977 = validateParameter(valid_596977, JString, required = false,
                                 default = nil)
  if valid_596977 != nil:
    section.add "X-Amz-Algorithm", valid_596977
  var valid_596978 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596978 = validateParameter(valid_596978, JString, required = false,
                                 default = nil)
  if valid_596978 != nil:
    section.add "X-Amz-SignedHeaders", valid_596978
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_596979 = formData.getOrDefault("TagKeys")
  valid_596979 = validateParameter(valid_596979, JArray, required = true, default = nil)
  if valid_596979 != nil:
    section.add "TagKeys", valid_596979
  var valid_596980 = formData.getOrDefault("ResourceName")
  valid_596980 = validateParameter(valid_596980, JString, required = true,
                                 default = nil)
  if valid_596980 != nil:
    section.add "ResourceName", valid_596980
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596981: Call_PostRemoveTagsFromResource_596967; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_596981.validator(path, query, header, formData, body)
  let scheme = call_596981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596981.url(scheme.get, call_596981.host, call_596981.base,
                         call_596981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596981, url, valid)

proc call*(call_596982: Call_PostRemoveTagsFromResource_596967; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  var query_596983 = newJObject()
  var formData_596984 = newJObject()
  if TagKeys != nil:
    formData_596984.add "TagKeys", TagKeys
  add(query_596983, "Action", newJString(Action))
  add(query_596983, "Version", newJString(Version))
  add(formData_596984, "ResourceName", newJString(ResourceName))
  result = call_596982.call(nil, query_596983, nil, formData_596984, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_596967(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_596968, base: "/",
    url: url_PostRemoveTagsFromResource_596969,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_596950 = ref object of OpenApiRestCall_592348
proc url_GetRemoveTagsFromResource_596952(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveTagsFromResource_596951(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_596953 = query.getOrDefault("ResourceName")
  valid_596953 = validateParameter(valid_596953, JString, required = true,
                                 default = nil)
  if valid_596953 != nil:
    section.add "ResourceName", valid_596953
  var valid_596954 = query.getOrDefault("TagKeys")
  valid_596954 = validateParameter(valid_596954, JArray, required = true, default = nil)
  if valid_596954 != nil:
    section.add "TagKeys", valid_596954
  var valid_596955 = query.getOrDefault("Action")
  valid_596955 = validateParameter(valid_596955, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_596955 != nil:
    section.add "Action", valid_596955
  var valid_596956 = query.getOrDefault("Version")
  valid_596956 = validateParameter(valid_596956, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596956 != nil:
    section.add "Version", valid_596956
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596957 = header.getOrDefault("X-Amz-Signature")
  valid_596957 = validateParameter(valid_596957, JString, required = false,
                                 default = nil)
  if valid_596957 != nil:
    section.add "X-Amz-Signature", valid_596957
  var valid_596958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596958 = validateParameter(valid_596958, JString, required = false,
                                 default = nil)
  if valid_596958 != nil:
    section.add "X-Amz-Content-Sha256", valid_596958
  var valid_596959 = header.getOrDefault("X-Amz-Date")
  valid_596959 = validateParameter(valid_596959, JString, required = false,
                                 default = nil)
  if valid_596959 != nil:
    section.add "X-Amz-Date", valid_596959
  var valid_596960 = header.getOrDefault("X-Amz-Credential")
  valid_596960 = validateParameter(valid_596960, JString, required = false,
                                 default = nil)
  if valid_596960 != nil:
    section.add "X-Amz-Credential", valid_596960
  var valid_596961 = header.getOrDefault("X-Amz-Security-Token")
  valid_596961 = validateParameter(valid_596961, JString, required = false,
                                 default = nil)
  if valid_596961 != nil:
    section.add "X-Amz-Security-Token", valid_596961
  var valid_596962 = header.getOrDefault("X-Amz-Algorithm")
  valid_596962 = validateParameter(valid_596962, JString, required = false,
                                 default = nil)
  if valid_596962 != nil:
    section.add "X-Amz-Algorithm", valid_596962
  var valid_596963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596963 = validateParameter(valid_596963, JString, required = false,
                                 default = nil)
  if valid_596963 != nil:
    section.add "X-Amz-SignedHeaders", valid_596963
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596964: Call_GetRemoveTagsFromResource_596950; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_596964.validator(path, query, header, formData, body)
  let scheme = call_596964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596964.url(scheme.get, call_596964.host, call_596964.base,
                         call_596964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596964, url, valid)

proc call*(call_596965: Call_GetRemoveTagsFromResource_596950;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596966 = newJObject()
  add(query_596966, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_596966.add "TagKeys", TagKeys
  add(query_596966, "Action", newJString(Action))
  add(query_596966, "Version", newJString(Version))
  result = call_596965.call(nil, query_596966, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_596950(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_596951, base: "/",
    url: url_GetRemoveTagsFromResource_596952,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_597003 = ref object of OpenApiRestCall_592348
proc url_PostResetDBClusterParameterGroup_597005(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetDBClusterParameterGroup_597004(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597006 = query.getOrDefault("Action")
  valid_597006 = validateParameter(valid_597006, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_597006 != nil:
    section.add "Action", valid_597006
  var valid_597007 = query.getOrDefault("Version")
  valid_597007 = validateParameter(valid_597007, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597007 != nil:
    section.add "Version", valid_597007
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597008 = header.getOrDefault("X-Amz-Signature")
  valid_597008 = validateParameter(valid_597008, JString, required = false,
                                 default = nil)
  if valid_597008 != nil:
    section.add "X-Amz-Signature", valid_597008
  var valid_597009 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597009 = validateParameter(valid_597009, JString, required = false,
                                 default = nil)
  if valid_597009 != nil:
    section.add "X-Amz-Content-Sha256", valid_597009
  var valid_597010 = header.getOrDefault("X-Amz-Date")
  valid_597010 = validateParameter(valid_597010, JString, required = false,
                                 default = nil)
  if valid_597010 != nil:
    section.add "X-Amz-Date", valid_597010
  var valid_597011 = header.getOrDefault("X-Amz-Credential")
  valid_597011 = validateParameter(valid_597011, JString, required = false,
                                 default = nil)
  if valid_597011 != nil:
    section.add "X-Amz-Credential", valid_597011
  var valid_597012 = header.getOrDefault("X-Amz-Security-Token")
  valid_597012 = validateParameter(valid_597012, JString, required = false,
                                 default = nil)
  if valid_597012 != nil:
    section.add "X-Amz-Security-Token", valid_597012
  var valid_597013 = header.getOrDefault("X-Amz-Algorithm")
  valid_597013 = validateParameter(valid_597013, JString, required = false,
                                 default = nil)
  if valid_597013 != nil:
    section.add "X-Amz-Algorithm", valid_597013
  var valid_597014 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597014 = validateParameter(valid_597014, JString, required = false,
                                 default = nil)
  if valid_597014 != nil:
    section.add "X-Amz-SignedHeaders", valid_597014
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  section = newJObject()
  var valid_597015 = formData.getOrDefault("ResetAllParameters")
  valid_597015 = validateParameter(valid_597015, JBool, required = false, default = nil)
  if valid_597015 != nil:
    section.add "ResetAllParameters", valid_597015
  var valid_597016 = formData.getOrDefault("Parameters")
  valid_597016 = validateParameter(valid_597016, JArray, required = false,
                                 default = nil)
  if valid_597016 != nil:
    section.add "Parameters", valid_597016
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_597017 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_597017 = validateParameter(valid_597017, JString, required = true,
                                 default = nil)
  if valid_597017 != nil:
    section.add "DBClusterParameterGroupName", valid_597017
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597018: Call_PostResetDBClusterParameterGroup_597003;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597018.validator(path, query, header, formData, body)
  let scheme = call_597018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597018.url(scheme.get, call_597018.host, call_597018.base,
                         call_597018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597018, url, valid)

proc call*(call_597019: Call_PostResetDBClusterParameterGroup_597003;
          DBClusterParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Parameters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Version: string (required)
  var query_597020 = newJObject()
  var formData_597021 = newJObject()
  add(formData_597021, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_597020, "Action", newJString(Action))
  if Parameters != nil:
    formData_597021.add "Parameters", Parameters
  add(formData_597021, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_597020, "Version", newJString(Version))
  result = call_597019.call(nil, query_597020, nil, formData_597021, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_597003(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_597004, base: "/",
    url: url_PostResetDBClusterParameterGroup_597005,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_596985 = ref object of OpenApiRestCall_592348
proc url_GetResetDBClusterParameterGroup_596987(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetDBClusterParameterGroup_596986(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_596988 = query.getOrDefault("Parameters")
  valid_596988 = validateParameter(valid_596988, JArray, required = false,
                                 default = nil)
  if valid_596988 != nil:
    section.add "Parameters", valid_596988
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_596989 = query.getOrDefault("DBClusterParameterGroupName")
  valid_596989 = validateParameter(valid_596989, JString, required = true,
                                 default = nil)
  if valid_596989 != nil:
    section.add "DBClusterParameterGroupName", valid_596989
  var valid_596990 = query.getOrDefault("ResetAllParameters")
  valid_596990 = validateParameter(valid_596990, JBool, required = false, default = nil)
  if valid_596990 != nil:
    section.add "ResetAllParameters", valid_596990
  var valid_596991 = query.getOrDefault("Action")
  valid_596991 = validateParameter(valid_596991, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_596991 != nil:
    section.add "Action", valid_596991
  var valid_596992 = query.getOrDefault("Version")
  valid_596992 = validateParameter(valid_596992, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596992 != nil:
    section.add "Version", valid_596992
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596993 = header.getOrDefault("X-Amz-Signature")
  valid_596993 = validateParameter(valid_596993, JString, required = false,
                                 default = nil)
  if valid_596993 != nil:
    section.add "X-Amz-Signature", valid_596993
  var valid_596994 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596994 = validateParameter(valid_596994, JString, required = false,
                                 default = nil)
  if valid_596994 != nil:
    section.add "X-Amz-Content-Sha256", valid_596994
  var valid_596995 = header.getOrDefault("X-Amz-Date")
  valid_596995 = validateParameter(valid_596995, JString, required = false,
                                 default = nil)
  if valid_596995 != nil:
    section.add "X-Amz-Date", valid_596995
  var valid_596996 = header.getOrDefault("X-Amz-Credential")
  valid_596996 = validateParameter(valid_596996, JString, required = false,
                                 default = nil)
  if valid_596996 != nil:
    section.add "X-Amz-Credential", valid_596996
  var valid_596997 = header.getOrDefault("X-Amz-Security-Token")
  valid_596997 = validateParameter(valid_596997, JString, required = false,
                                 default = nil)
  if valid_596997 != nil:
    section.add "X-Amz-Security-Token", valid_596997
  var valid_596998 = header.getOrDefault("X-Amz-Algorithm")
  valid_596998 = validateParameter(valid_596998, JString, required = false,
                                 default = nil)
  if valid_596998 != nil:
    section.add "X-Amz-Algorithm", valid_596998
  var valid_596999 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596999 = validateParameter(valid_596999, JString, required = false,
                                 default = nil)
  if valid_596999 != nil:
    section.add "X-Amz-SignedHeaders", valid_596999
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597000: Call_GetResetDBClusterParameterGroup_596985;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597000.validator(path, query, header, formData, body)
  let scheme = call_597000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597000.url(scheme.get, call_597000.host, call_597000.base,
                         call_597000.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597000, url, valid)

proc call*(call_597001: Call_GetResetDBClusterParameterGroup_596985;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597002 = newJObject()
  if Parameters != nil:
    query_597002.add "Parameters", Parameters
  add(query_597002, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_597002, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_597002, "Action", newJString(Action))
  add(query_597002, "Version", newJString(Version))
  result = call_597001.call(nil, query_597002, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_596985(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_596986, base: "/",
    url: url_GetResetDBClusterParameterGroup_596987,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_597040 = ref object of OpenApiRestCall_592348
proc url_PostResetDBParameterGroup_597042(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetDBParameterGroup_597041(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597043 = query.getOrDefault("Action")
  valid_597043 = validateParameter(valid_597043, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_597043 != nil:
    section.add "Action", valid_597043
  var valid_597044 = query.getOrDefault("Version")
  valid_597044 = validateParameter(valid_597044, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597044 != nil:
    section.add "Version", valid_597044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597045 = header.getOrDefault("X-Amz-Signature")
  valid_597045 = validateParameter(valid_597045, JString, required = false,
                                 default = nil)
  if valid_597045 != nil:
    section.add "X-Amz-Signature", valid_597045
  var valid_597046 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597046 = validateParameter(valid_597046, JString, required = false,
                                 default = nil)
  if valid_597046 != nil:
    section.add "X-Amz-Content-Sha256", valid_597046
  var valid_597047 = header.getOrDefault("X-Amz-Date")
  valid_597047 = validateParameter(valid_597047, JString, required = false,
                                 default = nil)
  if valid_597047 != nil:
    section.add "X-Amz-Date", valid_597047
  var valid_597048 = header.getOrDefault("X-Amz-Credential")
  valid_597048 = validateParameter(valid_597048, JString, required = false,
                                 default = nil)
  if valid_597048 != nil:
    section.add "X-Amz-Credential", valid_597048
  var valid_597049 = header.getOrDefault("X-Amz-Security-Token")
  valid_597049 = validateParameter(valid_597049, JString, required = false,
                                 default = nil)
  if valid_597049 != nil:
    section.add "X-Amz-Security-Token", valid_597049
  var valid_597050 = header.getOrDefault("X-Amz-Algorithm")
  valid_597050 = validateParameter(valid_597050, JString, required = false,
                                 default = nil)
  if valid_597050 != nil:
    section.add "X-Amz-Algorithm", valid_597050
  var valid_597051 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597051 = validateParameter(valid_597051, JString, required = false,
                                 default = nil)
  if valid_597051 != nil:
    section.add "X-Amz-SignedHeaders", valid_597051
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  section = newJObject()
  var valid_597052 = formData.getOrDefault("ResetAllParameters")
  valid_597052 = validateParameter(valid_597052, JBool, required = false, default = nil)
  if valid_597052 != nil:
    section.add "ResetAllParameters", valid_597052
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_597053 = formData.getOrDefault("DBParameterGroupName")
  valid_597053 = validateParameter(valid_597053, JString, required = true,
                                 default = nil)
  if valid_597053 != nil:
    section.add "DBParameterGroupName", valid_597053
  var valid_597054 = formData.getOrDefault("Parameters")
  valid_597054 = validateParameter(valid_597054, JArray, required = false,
                                 default = nil)
  if valid_597054 != nil:
    section.add "Parameters", valid_597054
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597055: Call_PostResetDBParameterGroup_597040; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_597055.validator(path, query, header, formData, body)
  let scheme = call_597055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597055.url(scheme.get, call_597055.host, call_597055.base,
                         call_597055.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597055, url, valid)

proc call*(call_597056: Call_PostResetDBParameterGroup_597040;
          DBParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Parameters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Version: string (required)
  var query_597057 = newJObject()
  var formData_597058 = newJObject()
  add(formData_597058, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_597058, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_597057, "Action", newJString(Action))
  if Parameters != nil:
    formData_597058.add "Parameters", Parameters
  add(query_597057, "Version", newJString(Version))
  result = call_597056.call(nil, query_597057, nil, formData_597058, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_597040(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_597041, base: "/",
    url: url_PostResetDBParameterGroup_597042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_597022 = ref object of OpenApiRestCall_592348
proc url_GetResetDBParameterGroup_597024(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetDBParameterGroup_597023(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_597025 = query.getOrDefault("DBParameterGroupName")
  valid_597025 = validateParameter(valid_597025, JString, required = true,
                                 default = nil)
  if valid_597025 != nil:
    section.add "DBParameterGroupName", valid_597025
  var valid_597026 = query.getOrDefault("Parameters")
  valid_597026 = validateParameter(valid_597026, JArray, required = false,
                                 default = nil)
  if valid_597026 != nil:
    section.add "Parameters", valid_597026
  var valid_597027 = query.getOrDefault("ResetAllParameters")
  valid_597027 = validateParameter(valid_597027, JBool, required = false, default = nil)
  if valid_597027 != nil:
    section.add "ResetAllParameters", valid_597027
  var valid_597028 = query.getOrDefault("Action")
  valid_597028 = validateParameter(valid_597028, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_597028 != nil:
    section.add "Action", valid_597028
  var valid_597029 = query.getOrDefault("Version")
  valid_597029 = validateParameter(valid_597029, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597029 != nil:
    section.add "Version", valid_597029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597030 = header.getOrDefault("X-Amz-Signature")
  valid_597030 = validateParameter(valid_597030, JString, required = false,
                                 default = nil)
  if valid_597030 != nil:
    section.add "X-Amz-Signature", valid_597030
  var valid_597031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597031 = validateParameter(valid_597031, JString, required = false,
                                 default = nil)
  if valid_597031 != nil:
    section.add "X-Amz-Content-Sha256", valid_597031
  var valid_597032 = header.getOrDefault("X-Amz-Date")
  valid_597032 = validateParameter(valid_597032, JString, required = false,
                                 default = nil)
  if valid_597032 != nil:
    section.add "X-Amz-Date", valid_597032
  var valid_597033 = header.getOrDefault("X-Amz-Credential")
  valid_597033 = validateParameter(valid_597033, JString, required = false,
                                 default = nil)
  if valid_597033 != nil:
    section.add "X-Amz-Credential", valid_597033
  var valid_597034 = header.getOrDefault("X-Amz-Security-Token")
  valid_597034 = validateParameter(valid_597034, JString, required = false,
                                 default = nil)
  if valid_597034 != nil:
    section.add "X-Amz-Security-Token", valid_597034
  var valid_597035 = header.getOrDefault("X-Amz-Algorithm")
  valid_597035 = validateParameter(valid_597035, JString, required = false,
                                 default = nil)
  if valid_597035 != nil:
    section.add "X-Amz-Algorithm", valid_597035
  var valid_597036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597036 = validateParameter(valid_597036, JString, required = false,
                                 default = nil)
  if valid_597036 != nil:
    section.add "X-Amz-SignedHeaders", valid_597036
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597037: Call_GetResetDBParameterGroup_597022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_597037.validator(path, query, header, formData, body)
  let scheme = call_597037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597037.url(scheme.get, call_597037.host, call_597037.base,
                         call_597037.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597037, url, valid)

proc call*(call_597038: Call_GetResetDBParameterGroup_597022;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597039 = newJObject()
  add(query_597039, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_597039.add "Parameters", Parameters
  add(query_597039, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_597039, "Action", newJString(Action))
  add(query_597039, "Version", newJString(Version))
  result = call_597038.call(nil, query_597039, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_597022(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_597023, base: "/",
    url: url_GetResetDBParameterGroup_597024, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromS3_597103 = ref object of OpenApiRestCall_592348
proc url_PostRestoreDBClusterFromS3_597105(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterFromS3_597104(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597106 = query.getOrDefault("Action")
  valid_597106 = validateParameter(valid_597106, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_597106 != nil:
    section.add "Action", valid_597106
  var valid_597107 = query.getOrDefault("Version")
  valid_597107 = validateParameter(valid_597107, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597107 != nil:
    section.add "Version", valid_597107
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597108 = header.getOrDefault("X-Amz-Signature")
  valid_597108 = validateParameter(valid_597108, JString, required = false,
                                 default = nil)
  if valid_597108 != nil:
    section.add "X-Amz-Signature", valid_597108
  var valid_597109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597109 = validateParameter(valid_597109, JString, required = false,
                                 default = nil)
  if valid_597109 != nil:
    section.add "X-Amz-Content-Sha256", valid_597109
  var valid_597110 = header.getOrDefault("X-Amz-Date")
  valid_597110 = validateParameter(valid_597110, JString, required = false,
                                 default = nil)
  if valid_597110 != nil:
    section.add "X-Amz-Date", valid_597110
  var valid_597111 = header.getOrDefault("X-Amz-Credential")
  valid_597111 = validateParameter(valid_597111, JString, required = false,
                                 default = nil)
  if valid_597111 != nil:
    section.add "X-Amz-Credential", valid_597111
  var valid_597112 = header.getOrDefault("X-Amz-Security-Token")
  valid_597112 = validateParameter(valid_597112, JString, required = false,
                                 default = nil)
  if valid_597112 != nil:
    section.add "X-Amz-Security-Token", valid_597112
  var valid_597113 = header.getOrDefault("X-Amz-Algorithm")
  valid_597113 = validateParameter(valid_597113, JString, required = false,
                                 default = nil)
  if valid_597113 != nil:
    section.add "X-Amz-Algorithm", valid_597113
  var valid_597114 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597114 = validateParameter(valid_597114, JString, required = false,
                                 default = nil)
  if valid_597114 != nil:
    section.add "X-Amz-SignedHeaders", valid_597114
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_597115 = formData.getOrDefault("S3Prefix")
  valid_597115 = validateParameter(valid_597115, JString, required = false,
                                 default = nil)
  if valid_597115 != nil:
    section.add "S3Prefix", valid_597115
  var valid_597116 = formData.getOrDefault("Port")
  valid_597116 = validateParameter(valid_597116, JInt, required = false, default = nil)
  if valid_597116 != nil:
    section.add "Port", valid_597116
  var valid_597117 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_597117 = validateParameter(valid_597117, JString, required = false,
                                 default = nil)
  if valid_597117 != nil:
    section.add "PreferredMaintenanceWindow", valid_597117
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_597118 = formData.getOrDefault("S3IngestionRoleArn")
  valid_597118 = validateParameter(valid_597118, JString, required = true,
                                 default = nil)
  if valid_597118 != nil:
    section.add "S3IngestionRoleArn", valid_597118
  var valid_597119 = formData.getOrDefault("PreferredBackupWindow")
  valid_597119 = validateParameter(valid_597119, JString, required = false,
                                 default = nil)
  if valid_597119 != nil:
    section.add "PreferredBackupWindow", valid_597119
  var valid_597120 = formData.getOrDefault("MasterUserPassword")
  valid_597120 = validateParameter(valid_597120, JString, required = true,
                                 default = nil)
  if valid_597120 != nil:
    section.add "MasterUserPassword", valid_597120
  var valid_597121 = formData.getOrDefault("MasterUsername")
  valid_597121 = validateParameter(valid_597121, JString, required = true,
                                 default = nil)
  if valid_597121 != nil:
    section.add "MasterUsername", valid_597121
  var valid_597122 = formData.getOrDefault("SourceEngine")
  valid_597122 = validateParameter(valid_597122, JString, required = true,
                                 default = nil)
  if valid_597122 != nil:
    section.add "SourceEngine", valid_597122
  var valid_597123 = formData.getOrDefault("EngineVersion")
  valid_597123 = validateParameter(valid_597123, JString, required = false,
                                 default = nil)
  if valid_597123 != nil:
    section.add "EngineVersion", valid_597123
  var valid_597124 = formData.getOrDefault("BacktrackWindow")
  valid_597124 = validateParameter(valid_597124, JInt, required = false, default = nil)
  if valid_597124 != nil:
    section.add "BacktrackWindow", valid_597124
  var valid_597125 = formData.getOrDefault("DatabaseName")
  valid_597125 = validateParameter(valid_597125, JString, required = false,
                                 default = nil)
  if valid_597125 != nil:
    section.add "DatabaseName", valid_597125
  var valid_597126 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_597126 = validateParameter(valid_597126, JArray, required = false,
                                 default = nil)
  if valid_597126 != nil:
    section.add "VpcSecurityGroupIds", valid_597126
  var valid_597127 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597127 = validateParameter(valid_597127, JBool, required = false, default = nil)
  if valid_597127 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597127
  var valid_597128 = formData.getOrDefault("AvailabilityZones")
  valid_597128 = validateParameter(valid_597128, JArray, required = false,
                                 default = nil)
  if valid_597128 != nil:
    section.add "AvailabilityZones", valid_597128
  var valid_597129 = formData.getOrDefault("BackupRetentionPeriod")
  valid_597129 = validateParameter(valid_597129, JInt, required = false, default = nil)
  if valid_597129 != nil:
    section.add "BackupRetentionPeriod", valid_597129
  var valid_597130 = formData.getOrDefault("Engine")
  valid_597130 = validateParameter(valid_597130, JString, required = true,
                                 default = nil)
  if valid_597130 != nil:
    section.add "Engine", valid_597130
  var valid_597131 = formData.getOrDefault("KmsKeyId")
  valid_597131 = validateParameter(valid_597131, JString, required = false,
                                 default = nil)
  if valid_597131 != nil:
    section.add "KmsKeyId", valid_597131
  var valid_597132 = formData.getOrDefault("S3BucketName")
  valid_597132 = validateParameter(valid_597132, JString, required = true,
                                 default = nil)
  if valid_597132 != nil:
    section.add "S3BucketName", valid_597132
  var valid_597133 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_597133 = validateParameter(valid_597133, JArray, required = false,
                                 default = nil)
  if valid_597133 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597133
  var valid_597134 = formData.getOrDefault("SourceEngineVersion")
  valid_597134 = validateParameter(valid_597134, JString, required = true,
                                 default = nil)
  if valid_597134 != nil:
    section.add "SourceEngineVersion", valid_597134
  var valid_597135 = formData.getOrDefault("Tags")
  valid_597135 = validateParameter(valid_597135, JArray, required = false,
                                 default = nil)
  if valid_597135 != nil:
    section.add "Tags", valid_597135
  var valid_597136 = formData.getOrDefault("DBSubnetGroupName")
  valid_597136 = validateParameter(valid_597136, JString, required = false,
                                 default = nil)
  if valid_597136 != nil:
    section.add "DBSubnetGroupName", valid_597136
  var valid_597137 = formData.getOrDefault("OptionGroupName")
  valid_597137 = validateParameter(valid_597137, JString, required = false,
                                 default = nil)
  if valid_597137 != nil:
    section.add "OptionGroupName", valid_597137
  var valid_597138 = formData.getOrDefault("CharacterSetName")
  valid_597138 = validateParameter(valid_597138, JString, required = false,
                                 default = nil)
  if valid_597138 != nil:
    section.add "CharacterSetName", valid_597138
  var valid_597139 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_597139 = validateParameter(valid_597139, JString, required = false,
                                 default = nil)
  if valid_597139 != nil:
    section.add "DBClusterParameterGroupName", valid_597139
  var valid_597140 = formData.getOrDefault("StorageEncrypted")
  valid_597140 = validateParameter(valid_597140, JBool, required = false, default = nil)
  if valid_597140 != nil:
    section.add "StorageEncrypted", valid_597140
  var valid_597141 = formData.getOrDefault("DBClusterIdentifier")
  valid_597141 = validateParameter(valid_597141, JString, required = true,
                                 default = nil)
  if valid_597141 != nil:
    section.add "DBClusterIdentifier", valid_597141
  var valid_597142 = formData.getOrDefault("DeletionProtection")
  valid_597142 = validateParameter(valid_597142, JBool, required = false, default = nil)
  if valid_597142 != nil:
    section.add "DeletionProtection", valid_597142
  var valid_597143 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_597143 = validateParameter(valid_597143, JBool, required = false, default = nil)
  if valid_597143 != nil:
    section.add "CopyTagsToSnapshot", valid_597143
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597144: Call_PostRestoreDBClusterFromS3_597103; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597144.validator(path, query, header, formData, body)
  let scheme = call_597144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597144.url(scheme.get, call_597144.host, call_597144.base,
                         call_597144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597144, url, valid)

proc call*(call_597145: Call_PostRestoreDBClusterFromS3_597103;
          S3IngestionRoleArn: string; MasterUserPassword: string;
          MasterUsername: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string;
          DBClusterIdentifier: string; S3Prefix: string = ""; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          BacktrackWindow: int = 0; DatabaseName: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          KmsKeyId: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterFromS3"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_597146 = newJObject()
  var formData_597147 = newJObject()
  add(formData_597147, "S3Prefix", newJString(S3Prefix))
  add(formData_597147, "Port", newJInt(Port))
  add(formData_597147, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_597147, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_597147, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_597147, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_597147, "MasterUsername", newJString(MasterUsername))
  add(formData_597147, "SourceEngine", newJString(SourceEngine))
  add(formData_597147, "EngineVersion", newJString(EngineVersion))
  add(formData_597147, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_597147, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_597147.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_597147, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_597147.add "AvailabilityZones", AvailabilityZones
  add(formData_597147, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_597147, "Engine", newJString(Engine))
  add(formData_597147, "KmsKeyId", newJString(KmsKeyId))
  add(formData_597147, "S3BucketName", newJString(S3BucketName))
  if EnableCloudwatchLogsExports != nil:
    formData_597147.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_597147, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_597146, "Action", newJString(Action))
  if Tags != nil:
    formData_597147.add "Tags", Tags
  add(formData_597147, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_597147, "OptionGroupName", newJString(OptionGroupName))
  add(formData_597147, "CharacterSetName", newJString(CharacterSetName))
  add(formData_597147, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_597146, "Version", newJString(Version))
  add(formData_597147, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_597147, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_597147, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_597147, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_597145.call(nil, query_597146, nil, formData_597147, nil)

var postRestoreDBClusterFromS3* = Call_PostRestoreDBClusterFromS3_597103(
    name: "postRestoreDBClusterFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_PostRestoreDBClusterFromS3_597104, base: "/",
    url: url_PostRestoreDBClusterFromS3_597105,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromS3_597059 = ref object of OpenApiRestCall_592348
proc url_GetRestoreDBClusterFromS3_597061(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterFromS3_597060(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: JString (required)
  section = newJObject()
  var valid_597062 = query.getOrDefault("DatabaseName")
  valid_597062 = validateParameter(valid_597062, JString, required = false,
                                 default = nil)
  if valid_597062 != nil:
    section.add "DatabaseName", valid_597062
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_597063 = query.getOrDefault("SourceEngineVersion")
  valid_597063 = validateParameter(valid_597063, JString, required = true,
                                 default = nil)
  if valid_597063 != nil:
    section.add "SourceEngineVersion", valid_597063
  var valid_597064 = query.getOrDefault("StorageEncrypted")
  valid_597064 = validateParameter(valid_597064, JBool, required = false, default = nil)
  if valid_597064 != nil:
    section.add "StorageEncrypted", valid_597064
  var valid_597065 = query.getOrDefault("Engine")
  valid_597065 = validateParameter(valid_597065, JString, required = true,
                                 default = nil)
  if valid_597065 != nil:
    section.add "Engine", valid_597065
  var valid_597066 = query.getOrDefault("SourceEngine")
  valid_597066 = validateParameter(valid_597066, JString, required = true,
                                 default = nil)
  if valid_597066 != nil:
    section.add "SourceEngine", valid_597066
  var valid_597067 = query.getOrDefault("DeletionProtection")
  valid_597067 = validateParameter(valid_597067, JBool, required = false, default = nil)
  if valid_597067 != nil:
    section.add "DeletionProtection", valid_597067
  var valid_597068 = query.getOrDefault("CharacterSetName")
  valid_597068 = validateParameter(valid_597068, JString, required = false,
                                 default = nil)
  if valid_597068 != nil:
    section.add "CharacterSetName", valid_597068
  var valid_597069 = query.getOrDefault("S3Prefix")
  valid_597069 = validateParameter(valid_597069, JString, required = false,
                                 default = nil)
  if valid_597069 != nil:
    section.add "S3Prefix", valid_597069
  var valid_597070 = query.getOrDefault("CopyTagsToSnapshot")
  valid_597070 = validateParameter(valid_597070, JBool, required = false, default = nil)
  if valid_597070 != nil:
    section.add "CopyTagsToSnapshot", valid_597070
  var valid_597071 = query.getOrDefault("Tags")
  valid_597071 = validateParameter(valid_597071, JArray, required = false,
                                 default = nil)
  if valid_597071 != nil:
    section.add "Tags", valid_597071
  var valid_597072 = query.getOrDefault("KmsKeyId")
  valid_597072 = validateParameter(valid_597072, JString, required = false,
                                 default = nil)
  if valid_597072 != nil:
    section.add "KmsKeyId", valid_597072
  var valid_597073 = query.getOrDefault("DBClusterIdentifier")
  valid_597073 = validateParameter(valid_597073, JString, required = true,
                                 default = nil)
  if valid_597073 != nil:
    section.add "DBClusterIdentifier", valid_597073
  var valid_597074 = query.getOrDefault("BacktrackWindow")
  valid_597074 = validateParameter(valid_597074, JInt, required = false, default = nil)
  if valid_597074 != nil:
    section.add "BacktrackWindow", valid_597074
  var valid_597075 = query.getOrDefault("DBClusterParameterGroupName")
  valid_597075 = validateParameter(valid_597075, JString, required = false,
                                 default = nil)
  if valid_597075 != nil:
    section.add "DBClusterParameterGroupName", valid_597075
  var valid_597076 = query.getOrDefault("S3BucketName")
  valid_597076 = validateParameter(valid_597076, JString, required = true,
                                 default = nil)
  if valid_597076 != nil:
    section.add "S3BucketName", valid_597076
  var valid_597077 = query.getOrDefault("AvailabilityZones")
  valid_597077 = validateParameter(valid_597077, JArray, required = false,
                                 default = nil)
  if valid_597077 != nil:
    section.add "AvailabilityZones", valid_597077
  var valid_597078 = query.getOrDefault("MasterUsername")
  valid_597078 = validateParameter(valid_597078, JString, required = true,
                                 default = nil)
  if valid_597078 != nil:
    section.add "MasterUsername", valid_597078
  var valid_597079 = query.getOrDefault("BackupRetentionPeriod")
  valid_597079 = validateParameter(valid_597079, JInt, required = false, default = nil)
  if valid_597079 != nil:
    section.add "BackupRetentionPeriod", valid_597079
  var valid_597080 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597080 = validateParameter(valid_597080, JBool, required = false, default = nil)
  if valid_597080 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597080
  var valid_597081 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_597081 = validateParameter(valid_597081, JArray, required = false,
                                 default = nil)
  if valid_597081 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597081
  var valid_597082 = query.getOrDefault("EngineVersion")
  valid_597082 = validateParameter(valid_597082, JString, required = false,
                                 default = nil)
  if valid_597082 != nil:
    section.add "EngineVersion", valid_597082
  var valid_597083 = query.getOrDefault("Action")
  valid_597083 = validateParameter(valid_597083, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_597083 != nil:
    section.add "Action", valid_597083
  var valid_597084 = query.getOrDefault("Port")
  valid_597084 = validateParameter(valid_597084, JInt, required = false, default = nil)
  if valid_597084 != nil:
    section.add "Port", valid_597084
  var valid_597085 = query.getOrDefault("VpcSecurityGroupIds")
  valid_597085 = validateParameter(valid_597085, JArray, required = false,
                                 default = nil)
  if valid_597085 != nil:
    section.add "VpcSecurityGroupIds", valid_597085
  var valid_597086 = query.getOrDefault("MasterUserPassword")
  valid_597086 = validateParameter(valid_597086, JString, required = true,
                                 default = nil)
  if valid_597086 != nil:
    section.add "MasterUserPassword", valid_597086
  var valid_597087 = query.getOrDefault("OptionGroupName")
  valid_597087 = validateParameter(valid_597087, JString, required = false,
                                 default = nil)
  if valid_597087 != nil:
    section.add "OptionGroupName", valid_597087
  var valid_597088 = query.getOrDefault("DBSubnetGroupName")
  valid_597088 = validateParameter(valid_597088, JString, required = false,
                                 default = nil)
  if valid_597088 != nil:
    section.add "DBSubnetGroupName", valid_597088
  var valid_597089 = query.getOrDefault("PreferredBackupWindow")
  valid_597089 = validateParameter(valid_597089, JString, required = false,
                                 default = nil)
  if valid_597089 != nil:
    section.add "PreferredBackupWindow", valid_597089
  var valid_597090 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_597090 = validateParameter(valid_597090, JString, required = false,
                                 default = nil)
  if valid_597090 != nil:
    section.add "PreferredMaintenanceWindow", valid_597090
  var valid_597091 = query.getOrDefault("S3IngestionRoleArn")
  valid_597091 = validateParameter(valid_597091, JString, required = true,
                                 default = nil)
  if valid_597091 != nil:
    section.add "S3IngestionRoleArn", valid_597091
  var valid_597092 = query.getOrDefault("Version")
  valid_597092 = validateParameter(valid_597092, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597092 != nil:
    section.add "Version", valid_597092
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597093 = header.getOrDefault("X-Amz-Signature")
  valid_597093 = validateParameter(valid_597093, JString, required = false,
                                 default = nil)
  if valid_597093 != nil:
    section.add "X-Amz-Signature", valid_597093
  var valid_597094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597094 = validateParameter(valid_597094, JString, required = false,
                                 default = nil)
  if valid_597094 != nil:
    section.add "X-Amz-Content-Sha256", valid_597094
  var valid_597095 = header.getOrDefault("X-Amz-Date")
  valid_597095 = validateParameter(valid_597095, JString, required = false,
                                 default = nil)
  if valid_597095 != nil:
    section.add "X-Amz-Date", valid_597095
  var valid_597096 = header.getOrDefault("X-Amz-Credential")
  valid_597096 = validateParameter(valid_597096, JString, required = false,
                                 default = nil)
  if valid_597096 != nil:
    section.add "X-Amz-Credential", valid_597096
  var valid_597097 = header.getOrDefault("X-Amz-Security-Token")
  valid_597097 = validateParameter(valid_597097, JString, required = false,
                                 default = nil)
  if valid_597097 != nil:
    section.add "X-Amz-Security-Token", valid_597097
  var valid_597098 = header.getOrDefault("X-Amz-Algorithm")
  valid_597098 = validateParameter(valid_597098, JString, required = false,
                                 default = nil)
  if valid_597098 != nil:
    section.add "X-Amz-Algorithm", valid_597098
  var valid_597099 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597099 = validateParameter(valid_597099, JString, required = false,
                                 default = nil)
  if valid_597099 != nil:
    section.add "X-Amz-SignedHeaders", valid_597099
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597100: Call_GetRestoreDBClusterFromS3_597059; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597100.validator(path, query, header, formData, body)
  let scheme = call_597100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597100.url(scheme.get, call_597100.host, call_597100.base,
                         call_597100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597100, url, valid)

proc call*(call_597101: Call_GetRestoreDBClusterFromS3_597059;
          SourceEngineVersion: string; Engine: string; SourceEngine: string;
          DBClusterIdentifier: string; S3BucketName: string; MasterUsername: string;
          MasterUserPassword: string; S3IngestionRoleArn: string;
          DatabaseName: string = ""; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CharacterSetName: string = "";
          S3Prefix: string = ""; CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil;
          KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromS3"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: string (required)
  var query_597102 = newJObject()
  add(query_597102, "DatabaseName", newJString(DatabaseName))
  add(query_597102, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_597102, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_597102, "Engine", newJString(Engine))
  add(query_597102, "SourceEngine", newJString(SourceEngine))
  add(query_597102, "DeletionProtection", newJBool(DeletionProtection))
  add(query_597102, "CharacterSetName", newJString(CharacterSetName))
  add(query_597102, "S3Prefix", newJString(S3Prefix))
  add(query_597102, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_597102.add "Tags", Tags
  add(query_597102, "KmsKeyId", newJString(KmsKeyId))
  add(query_597102, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597102, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_597102, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_597102, "S3BucketName", newJString(S3BucketName))
  if AvailabilityZones != nil:
    query_597102.add "AvailabilityZones", AvailabilityZones
  add(query_597102, "MasterUsername", newJString(MasterUsername))
  add(query_597102, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_597102, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_597102.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_597102, "EngineVersion", newJString(EngineVersion))
  add(query_597102, "Action", newJString(Action))
  add(query_597102, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_597102.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_597102, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_597102, "OptionGroupName", newJString(OptionGroupName))
  add(query_597102, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_597102, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_597102, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_597102, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_597102, "Version", newJString(Version))
  result = call_597101.call(nil, query_597102, nil, nil, nil)

var getRestoreDBClusterFromS3* = Call_GetRestoreDBClusterFromS3_597059(
    name: "getRestoreDBClusterFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_GetRestoreDBClusterFromS3_597060, base: "/",
    url: url_GetRestoreDBClusterFromS3_597061,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_597187 = ref object of OpenApiRestCall_592348
proc url_PostRestoreDBClusterFromSnapshot_597189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_597188(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597190 = query.getOrDefault("Action")
  valid_597190 = validateParameter(valid_597190, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_597190 != nil:
    section.add "Action", valid_597190
  var valid_597191 = query.getOrDefault("Version")
  valid_597191 = validateParameter(valid_597191, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597191 != nil:
    section.add "Version", valid_597191
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597192 = header.getOrDefault("X-Amz-Signature")
  valid_597192 = validateParameter(valid_597192, JString, required = false,
                                 default = nil)
  if valid_597192 != nil:
    section.add "X-Amz-Signature", valid_597192
  var valid_597193 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597193 = validateParameter(valid_597193, JString, required = false,
                                 default = nil)
  if valid_597193 != nil:
    section.add "X-Amz-Content-Sha256", valid_597193
  var valid_597194 = header.getOrDefault("X-Amz-Date")
  valid_597194 = validateParameter(valid_597194, JString, required = false,
                                 default = nil)
  if valid_597194 != nil:
    section.add "X-Amz-Date", valid_597194
  var valid_597195 = header.getOrDefault("X-Amz-Credential")
  valid_597195 = validateParameter(valid_597195, JString, required = false,
                                 default = nil)
  if valid_597195 != nil:
    section.add "X-Amz-Credential", valid_597195
  var valid_597196 = header.getOrDefault("X-Amz-Security-Token")
  valid_597196 = validateParameter(valid_597196, JString, required = false,
                                 default = nil)
  if valid_597196 != nil:
    section.add "X-Amz-Security-Token", valid_597196
  var valid_597197 = header.getOrDefault("X-Amz-Algorithm")
  valid_597197 = validateParameter(valid_597197, JString, required = false,
                                 default = nil)
  if valid_597197 != nil:
    section.add "X-Amz-Algorithm", valid_597197
  var valid_597198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597198 = validateParameter(valid_597198, JString, required = false,
                                 default = nil)
  if valid_597198 != nil:
    section.add "X-Amz-SignedHeaders", valid_597198
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_597199 = formData.getOrDefault("Port")
  valid_597199 = validateParameter(valid_597199, JInt, required = false, default = nil)
  if valid_597199 != nil:
    section.add "Port", valid_597199
  var valid_597200 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_597200 = validateParameter(valid_597200, JString, required = false,
                                 default = nil)
  if valid_597200 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_597200
  var valid_597201 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_597201 = validateParameter(valid_597201, JString, required = false,
                                 default = nil)
  if valid_597201 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_597201
  var valid_597202 = formData.getOrDefault("EngineVersion")
  valid_597202 = validateParameter(valid_597202, JString, required = false,
                                 default = nil)
  if valid_597202 != nil:
    section.add "EngineVersion", valid_597202
  var valid_597203 = formData.getOrDefault("BacktrackWindow")
  valid_597203 = validateParameter(valid_597203, JInt, required = false, default = nil)
  if valid_597203 != nil:
    section.add "BacktrackWindow", valid_597203
  var valid_597204 = formData.getOrDefault("DatabaseName")
  valid_597204 = validateParameter(valid_597204, JString, required = false,
                                 default = nil)
  if valid_597204 != nil:
    section.add "DatabaseName", valid_597204
  var valid_597205 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_597205 = validateParameter(valid_597205, JArray, required = false,
                                 default = nil)
  if valid_597205 != nil:
    section.add "VpcSecurityGroupIds", valid_597205
  var valid_597206 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597206 = validateParameter(valid_597206, JBool, required = false, default = nil)
  if valid_597206 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597206
  var valid_597207 = formData.getOrDefault("AvailabilityZones")
  valid_597207 = validateParameter(valid_597207, JArray, required = false,
                                 default = nil)
  if valid_597207 != nil:
    section.add "AvailabilityZones", valid_597207
  var valid_597208 = formData.getOrDefault("KmsKeyId")
  valid_597208 = validateParameter(valid_597208, JString, required = false,
                                 default = nil)
  if valid_597208 != nil:
    section.add "KmsKeyId", valid_597208
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_597209 = formData.getOrDefault("Engine")
  valid_597209 = validateParameter(valid_597209, JString, required = true,
                                 default = nil)
  if valid_597209 != nil:
    section.add "Engine", valid_597209
  var valid_597210 = formData.getOrDefault("EngineMode")
  valid_597210 = validateParameter(valid_597210, JString, required = false,
                                 default = nil)
  if valid_597210 != nil:
    section.add "EngineMode", valid_597210
  var valid_597211 = formData.getOrDefault("SnapshotIdentifier")
  valid_597211 = validateParameter(valid_597211, JString, required = true,
                                 default = nil)
  if valid_597211 != nil:
    section.add "SnapshotIdentifier", valid_597211
  var valid_597212 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_597212 = validateParameter(valid_597212, JArray, required = false,
                                 default = nil)
  if valid_597212 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597212
  var valid_597213 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_597213 = validateParameter(valid_597213, JString, required = false,
                                 default = nil)
  if valid_597213 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_597213
  var valid_597214 = formData.getOrDefault("Tags")
  valid_597214 = validateParameter(valid_597214, JArray, required = false,
                                 default = nil)
  if valid_597214 != nil:
    section.add "Tags", valid_597214
  var valid_597215 = formData.getOrDefault("DBSubnetGroupName")
  valid_597215 = validateParameter(valid_597215, JString, required = false,
                                 default = nil)
  if valid_597215 != nil:
    section.add "DBSubnetGroupName", valid_597215
  var valid_597216 = formData.getOrDefault("OptionGroupName")
  valid_597216 = validateParameter(valid_597216, JString, required = false,
                                 default = nil)
  if valid_597216 != nil:
    section.add "OptionGroupName", valid_597216
  var valid_597217 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_597217 = validateParameter(valid_597217, JString, required = false,
                                 default = nil)
  if valid_597217 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_597217
  var valid_597218 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_597218 = validateParameter(valid_597218, JString, required = false,
                                 default = nil)
  if valid_597218 != nil:
    section.add "DBClusterParameterGroupName", valid_597218
  var valid_597219 = formData.getOrDefault("DBClusterIdentifier")
  valid_597219 = validateParameter(valid_597219, JString, required = true,
                                 default = nil)
  if valid_597219 != nil:
    section.add "DBClusterIdentifier", valid_597219
  var valid_597220 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_597220 = validateParameter(valid_597220, JString, required = false,
                                 default = nil)
  if valid_597220 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_597220
  var valid_597221 = formData.getOrDefault("DeletionProtection")
  valid_597221 = validateParameter(valid_597221, JBool, required = false, default = nil)
  if valid_597221 != nil:
    section.add "DeletionProtection", valid_597221
  var valid_597222 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_597222 = validateParameter(valid_597222, JBool, required = false, default = nil)
  if valid_597222 != nil:
    section.add "CopyTagsToSnapshot", valid_597222
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597223: Call_PostRestoreDBClusterFromSnapshot_597187;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597223.validator(path, query, header, formData, body)
  let scheme = call_597223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597223.url(scheme.get, call_597223.host, call_597223.base,
                         call_597223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597223, url, valid)

proc call*(call_597224: Call_PostRestoreDBClusterFromSnapshot_597187;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; KmsKeyId: string = "";
          EngineMode: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_597225 = newJObject()
  var formData_597226 = newJObject()
  add(formData_597226, "Port", newJInt(Port))
  add(formData_597226, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_597226, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_597226, "EngineVersion", newJString(EngineVersion))
  add(formData_597226, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_597226, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_597226.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_597226, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_597226.add "AvailabilityZones", AvailabilityZones
  add(formData_597226, "KmsKeyId", newJString(KmsKeyId))
  add(formData_597226, "Engine", newJString(Engine))
  add(formData_597226, "EngineMode", newJString(EngineMode))
  add(formData_597226, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_597226.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_597226, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_597225, "Action", newJString(Action))
  if Tags != nil:
    formData_597226.add "Tags", Tags
  add(formData_597226, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_597226, "OptionGroupName", newJString(OptionGroupName))
  add(formData_597226, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_597226, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_597225, "Version", newJString(Version))
  add(formData_597226, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_597226, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_597226, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_597226, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_597224.call(nil, query_597225, nil, formData_597226, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_597187(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_597188, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_597189,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_597148 = ref object of OpenApiRestCall_592348
proc url_GetRestoreDBClusterFromSnapshot_597150(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_597149(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_597151 = query.getOrDefault("DatabaseName")
  valid_597151 = validateParameter(valid_597151, JString, required = false,
                                 default = nil)
  if valid_597151 != nil:
    section.add "DatabaseName", valid_597151
  var valid_597152 = query.getOrDefault("DeletionProtection")
  valid_597152 = validateParameter(valid_597152, JBool, required = false, default = nil)
  if valid_597152 != nil:
    section.add "DeletionProtection", valid_597152
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_597153 = query.getOrDefault("Engine")
  valid_597153 = validateParameter(valid_597153, JString, required = true,
                                 default = nil)
  if valid_597153 != nil:
    section.add "Engine", valid_597153
  var valid_597154 = query.getOrDefault("CopyTagsToSnapshot")
  valid_597154 = validateParameter(valid_597154, JBool, required = false, default = nil)
  if valid_597154 != nil:
    section.add "CopyTagsToSnapshot", valid_597154
  var valid_597155 = query.getOrDefault("SnapshotIdentifier")
  valid_597155 = validateParameter(valid_597155, JString, required = true,
                                 default = nil)
  if valid_597155 != nil:
    section.add "SnapshotIdentifier", valid_597155
  var valid_597156 = query.getOrDefault("Tags")
  valid_597156 = validateParameter(valid_597156, JArray, required = false,
                                 default = nil)
  if valid_597156 != nil:
    section.add "Tags", valid_597156
  var valid_597157 = query.getOrDefault("KmsKeyId")
  valid_597157 = validateParameter(valid_597157, JString, required = false,
                                 default = nil)
  if valid_597157 != nil:
    section.add "KmsKeyId", valid_597157
  var valid_597158 = query.getOrDefault("DBClusterIdentifier")
  valid_597158 = validateParameter(valid_597158, JString, required = true,
                                 default = nil)
  if valid_597158 != nil:
    section.add "DBClusterIdentifier", valid_597158
  var valid_597159 = query.getOrDefault("BacktrackWindow")
  valid_597159 = validateParameter(valid_597159, JInt, required = false, default = nil)
  if valid_597159 != nil:
    section.add "BacktrackWindow", valid_597159
  var valid_597160 = query.getOrDefault("EngineMode")
  valid_597160 = validateParameter(valid_597160, JString, required = false,
                                 default = nil)
  if valid_597160 != nil:
    section.add "EngineMode", valid_597160
  var valid_597161 = query.getOrDefault("DBClusterParameterGroupName")
  valid_597161 = validateParameter(valid_597161, JString, required = false,
                                 default = nil)
  if valid_597161 != nil:
    section.add "DBClusterParameterGroupName", valid_597161
  var valid_597162 = query.getOrDefault("AvailabilityZones")
  valid_597162 = validateParameter(valid_597162, JArray, required = false,
                                 default = nil)
  if valid_597162 != nil:
    section.add "AvailabilityZones", valid_597162
  var valid_597163 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_597163 = validateParameter(valid_597163, JString, required = false,
                                 default = nil)
  if valid_597163 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_597163
  var valid_597164 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_597164 = validateParameter(valid_597164, JString, required = false,
                                 default = nil)
  if valid_597164 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_597164
  var valid_597165 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_597165 = validateParameter(valid_597165, JString, required = false,
                                 default = nil)
  if valid_597165 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_597165
  var valid_597166 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597166 = validateParameter(valid_597166, JBool, required = false, default = nil)
  if valid_597166 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597166
  var valid_597167 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_597167 = validateParameter(valid_597167, JString, required = false,
                                 default = nil)
  if valid_597167 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_597167
  var valid_597168 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_597168 = validateParameter(valid_597168, JArray, required = false,
                                 default = nil)
  if valid_597168 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597168
  var valid_597169 = query.getOrDefault("EngineVersion")
  valid_597169 = validateParameter(valid_597169, JString, required = false,
                                 default = nil)
  if valid_597169 != nil:
    section.add "EngineVersion", valid_597169
  var valid_597170 = query.getOrDefault("Action")
  valid_597170 = validateParameter(valid_597170, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_597170 != nil:
    section.add "Action", valid_597170
  var valid_597171 = query.getOrDefault("Port")
  valid_597171 = validateParameter(valid_597171, JInt, required = false, default = nil)
  if valid_597171 != nil:
    section.add "Port", valid_597171
  var valid_597172 = query.getOrDefault("VpcSecurityGroupIds")
  valid_597172 = validateParameter(valid_597172, JArray, required = false,
                                 default = nil)
  if valid_597172 != nil:
    section.add "VpcSecurityGroupIds", valid_597172
  var valid_597173 = query.getOrDefault("OptionGroupName")
  valid_597173 = validateParameter(valid_597173, JString, required = false,
                                 default = nil)
  if valid_597173 != nil:
    section.add "OptionGroupName", valid_597173
  var valid_597174 = query.getOrDefault("DBSubnetGroupName")
  valid_597174 = validateParameter(valid_597174, JString, required = false,
                                 default = nil)
  if valid_597174 != nil:
    section.add "DBSubnetGroupName", valid_597174
  var valid_597175 = query.getOrDefault("Version")
  valid_597175 = validateParameter(valid_597175, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597175 != nil:
    section.add "Version", valid_597175
  var valid_597176 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_597176 = validateParameter(valid_597176, JString, required = false,
                                 default = nil)
  if valid_597176 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_597176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597177 = header.getOrDefault("X-Amz-Signature")
  valid_597177 = validateParameter(valid_597177, JString, required = false,
                                 default = nil)
  if valid_597177 != nil:
    section.add "X-Amz-Signature", valid_597177
  var valid_597178 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597178 = validateParameter(valid_597178, JString, required = false,
                                 default = nil)
  if valid_597178 != nil:
    section.add "X-Amz-Content-Sha256", valid_597178
  var valid_597179 = header.getOrDefault("X-Amz-Date")
  valid_597179 = validateParameter(valid_597179, JString, required = false,
                                 default = nil)
  if valid_597179 != nil:
    section.add "X-Amz-Date", valid_597179
  var valid_597180 = header.getOrDefault("X-Amz-Credential")
  valid_597180 = validateParameter(valid_597180, JString, required = false,
                                 default = nil)
  if valid_597180 != nil:
    section.add "X-Amz-Credential", valid_597180
  var valid_597181 = header.getOrDefault("X-Amz-Security-Token")
  valid_597181 = validateParameter(valid_597181, JString, required = false,
                                 default = nil)
  if valid_597181 != nil:
    section.add "X-Amz-Security-Token", valid_597181
  var valid_597182 = header.getOrDefault("X-Amz-Algorithm")
  valid_597182 = validateParameter(valid_597182, JString, required = false,
                                 default = nil)
  if valid_597182 != nil:
    section.add "X-Amz-Algorithm", valid_597182
  var valid_597183 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597183 = validateParameter(valid_597183, JString, required = false,
                                 default = nil)
  if valid_597183 != nil:
    section.add "X-Amz-SignedHeaders", valid_597183
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597184: Call_GetRestoreDBClusterFromSnapshot_597148;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597184.validator(path, query, header, formData, body)
  let scheme = call_597184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597184.url(scheme.get, call_597184.host, call_597184.base,
                         call_597184.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597184, url, valid)

proc call*(call_597185: Call_GetRestoreDBClusterFromSnapshot_597148;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          DatabaseName: string = ""; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil; KmsKeyId: string = "";
          BacktrackWindow: int = 0; EngineMode: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_597186 = newJObject()
  add(query_597186, "DatabaseName", newJString(DatabaseName))
  add(query_597186, "DeletionProtection", newJBool(DeletionProtection))
  add(query_597186, "Engine", newJString(Engine))
  add(query_597186, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_597186, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if Tags != nil:
    query_597186.add "Tags", Tags
  add(query_597186, "KmsKeyId", newJString(KmsKeyId))
  add(query_597186, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597186, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_597186, "EngineMode", newJString(EngineMode))
  add(query_597186, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_597186.add "AvailabilityZones", AvailabilityZones
  add(query_597186, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_597186, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_597186, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_597186, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_597186, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if EnableCloudwatchLogsExports != nil:
    query_597186.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_597186, "EngineVersion", newJString(EngineVersion))
  add(query_597186, "Action", newJString(Action))
  add(query_597186, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_597186.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_597186, "OptionGroupName", newJString(OptionGroupName))
  add(query_597186, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_597186, "Version", newJString(Version))
  add(query_597186, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_597185.call(nil, query_597186, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_597148(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_597149, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_597150,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_597259 = ref object of OpenApiRestCall_592348
proc url_PostRestoreDBClusterToPointInTime_597261(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_597260(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597262 = query.getOrDefault("Action")
  valid_597262 = validateParameter(valid_597262, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_597262 != nil:
    section.add "Action", valid_597262
  var valid_597263 = query.getOrDefault("Version")
  valid_597263 = validateParameter(valid_597263, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597263 != nil:
    section.add "Version", valid_597263
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597264 = header.getOrDefault("X-Amz-Signature")
  valid_597264 = validateParameter(valid_597264, JString, required = false,
                                 default = nil)
  if valid_597264 != nil:
    section.add "X-Amz-Signature", valid_597264
  var valid_597265 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597265 = validateParameter(valid_597265, JString, required = false,
                                 default = nil)
  if valid_597265 != nil:
    section.add "X-Amz-Content-Sha256", valid_597265
  var valid_597266 = header.getOrDefault("X-Amz-Date")
  valid_597266 = validateParameter(valid_597266, JString, required = false,
                                 default = nil)
  if valid_597266 != nil:
    section.add "X-Amz-Date", valid_597266
  var valid_597267 = header.getOrDefault("X-Amz-Credential")
  valid_597267 = validateParameter(valid_597267, JString, required = false,
                                 default = nil)
  if valid_597267 != nil:
    section.add "X-Amz-Credential", valid_597267
  var valid_597268 = header.getOrDefault("X-Amz-Security-Token")
  valid_597268 = validateParameter(valid_597268, JString, required = false,
                                 default = nil)
  if valid_597268 != nil:
    section.add "X-Amz-Security-Token", valid_597268
  var valid_597269 = header.getOrDefault("X-Amz-Algorithm")
  valid_597269 = validateParameter(valid_597269, JString, required = false,
                                 default = nil)
  if valid_597269 != nil:
    section.add "X-Amz-Algorithm", valid_597269
  var valid_597270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597270 = validateParameter(valid_597270, JString, required = false,
                                 default = nil)
  if valid_597270 != nil:
    section.add "X-Amz-SignedHeaders", valid_597270
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_597271 = formData.getOrDefault("Port")
  valid_597271 = validateParameter(valid_597271, JInt, required = false, default = nil)
  if valid_597271 != nil:
    section.add "Port", valid_597271
  var valid_597272 = formData.getOrDefault("BacktrackWindow")
  valid_597272 = validateParameter(valid_597272, JInt, required = false, default = nil)
  if valid_597272 != nil:
    section.add "BacktrackWindow", valid_597272
  var valid_597273 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_597273 = validateParameter(valid_597273, JArray, required = false,
                                 default = nil)
  if valid_597273 != nil:
    section.add "VpcSecurityGroupIds", valid_597273
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_597274 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_597274 = validateParameter(valid_597274, JString, required = true,
                                 default = nil)
  if valid_597274 != nil:
    section.add "SourceDBClusterIdentifier", valid_597274
  var valid_597275 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597275 = validateParameter(valid_597275, JBool, required = false, default = nil)
  if valid_597275 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597275
  var valid_597276 = formData.getOrDefault("KmsKeyId")
  valid_597276 = validateParameter(valid_597276, JString, required = false,
                                 default = nil)
  if valid_597276 != nil:
    section.add "KmsKeyId", valid_597276
  var valid_597277 = formData.getOrDefault("RestoreType")
  valid_597277 = validateParameter(valid_597277, JString, required = false,
                                 default = nil)
  if valid_597277 != nil:
    section.add "RestoreType", valid_597277
  var valid_597278 = formData.getOrDefault("UseLatestRestorableTime")
  valid_597278 = validateParameter(valid_597278, JBool, required = false, default = nil)
  if valid_597278 != nil:
    section.add "UseLatestRestorableTime", valid_597278
  var valid_597279 = formData.getOrDefault("RestoreToTime")
  valid_597279 = validateParameter(valid_597279, JString, required = false,
                                 default = nil)
  if valid_597279 != nil:
    section.add "RestoreToTime", valid_597279
  var valid_597280 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_597280 = validateParameter(valid_597280, JArray, required = false,
                                 default = nil)
  if valid_597280 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597280
  var valid_597281 = formData.getOrDefault("Tags")
  valid_597281 = validateParameter(valid_597281, JArray, required = false,
                                 default = nil)
  if valid_597281 != nil:
    section.add "Tags", valid_597281
  var valid_597282 = formData.getOrDefault("DBSubnetGroupName")
  valid_597282 = validateParameter(valid_597282, JString, required = false,
                                 default = nil)
  if valid_597282 != nil:
    section.add "DBSubnetGroupName", valid_597282
  var valid_597283 = formData.getOrDefault("OptionGroupName")
  valid_597283 = validateParameter(valid_597283, JString, required = false,
                                 default = nil)
  if valid_597283 != nil:
    section.add "OptionGroupName", valid_597283
  var valid_597284 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_597284 = validateParameter(valid_597284, JString, required = false,
                                 default = nil)
  if valid_597284 != nil:
    section.add "DBClusterParameterGroupName", valid_597284
  var valid_597285 = formData.getOrDefault("DBClusterIdentifier")
  valid_597285 = validateParameter(valid_597285, JString, required = true,
                                 default = nil)
  if valid_597285 != nil:
    section.add "DBClusterIdentifier", valid_597285
  var valid_597286 = formData.getOrDefault("DeletionProtection")
  valid_597286 = validateParameter(valid_597286, JBool, required = false, default = nil)
  if valid_597286 != nil:
    section.add "DeletionProtection", valid_597286
  var valid_597287 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_597287 = validateParameter(valid_597287, JBool, required = false, default = nil)
  if valid_597287 != nil:
    section.add "CopyTagsToSnapshot", valid_597287
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597288: Call_PostRestoreDBClusterToPointInTime_597259;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597288.validator(path, query, header, formData, body)
  let scheme = call_597288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597288.url(scheme.get, call_597288.host, call_597288.base,
                         call_597288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597288, url, valid)

proc call*(call_597289: Call_PostRestoreDBClusterToPointInTime_597259;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; BacktrackWindow: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          RestoreToTime: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_597290 = newJObject()
  var formData_597291 = newJObject()
  add(formData_597291, "Port", newJInt(Port))
  add(formData_597291, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_597291.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_597291, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_597291, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_597291, "KmsKeyId", newJString(KmsKeyId))
  add(formData_597291, "RestoreType", newJString(RestoreType))
  add(formData_597291, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_597291, "RestoreToTime", newJString(RestoreToTime))
  if EnableCloudwatchLogsExports != nil:
    formData_597291.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_597290, "Action", newJString(Action))
  if Tags != nil:
    formData_597291.add "Tags", Tags
  add(formData_597291, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_597291, "OptionGroupName", newJString(OptionGroupName))
  add(formData_597291, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_597290, "Version", newJString(Version))
  add(formData_597291, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_597291, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_597291, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_597289.call(nil, query_597290, nil, formData_597291, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_597259(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_597260, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_597261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_597227 = ref object of OpenApiRestCall_592348
proc url_GetRestoreDBClusterToPointInTime_597229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_597228(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597230 = query.getOrDefault("DeletionProtection")
  valid_597230 = validateParameter(valid_597230, JBool, required = false, default = nil)
  if valid_597230 != nil:
    section.add "DeletionProtection", valid_597230
  var valid_597231 = query.getOrDefault("RestoreType")
  valid_597231 = validateParameter(valid_597231, JString, required = false,
                                 default = nil)
  if valid_597231 != nil:
    section.add "RestoreType", valid_597231
  var valid_597232 = query.getOrDefault("UseLatestRestorableTime")
  valid_597232 = validateParameter(valid_597232, JBool, required = false, default = nil)
  if valid_597232 != nil:
    section.add "UseLatestRestorableTime", valid_597232
  var valid_597233 = query.getOrDefault("CopyTagsToSnapshot")
  valid_597233 = validateParameter(valid_597233, JBool, required = false, default = nil)
  if valid_597233 != nil:
    section.add "CopyTagsToSnapshot", valid_597233
  var valid_597234 = query.getOrDefault("Tags")
  valid_597234 = validateParameter(valid_597234, JArray, required = false,
                                 default = nil)
  if valid_597234 != nil:
    section.add "Tags", valid_597234
  var valid_597235 = query.getOrDefault("KmsKeyId")
  valid_597235 = validateParameter(valid_597235, JString, required = false,
                                 default = nil)
  if valid_597235 != nil:
    section.add "KmsKeyId", valid_597235
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597236 = query.getOrDefault("DBClusterIdentifier")
  valid_597236 = validateParameter(valid_597236, JString, required = true,
                                 default = nil)
  if valid_597236 != nil:
    section.add "DBClusterIdentifier", valid_597236
  var valid_597237 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_597237 = validateParameter(valid_597237, JString, required = true,
                                 default = nil)
  if valid_597237 != nil:
    section.add "SourceDBClusterIdentifier", valid_597237
  var valid_597238 = query.getOrDefault("BacktrackWindow")
  valid_597238 = validateParameter(valid_597238, JInt, required = false, default = nil)
  if valid_597238 != nil:
    section.add "BacktrackWindow", valid_597238
  var valid_597239 = query.getOrDefault("DBClusterParameterGroupName")
  valid_597239 = validateParameter(valid_597239, JString, required = false,
                                 default = nil)
  if valid_597239 != nil:
    section.add "DBClusterParameterGroupName", valid_597239
  var valid_597240 = query.getOrDefault("RestoreToTime")
  valid_597240 = validateParameter(valid_597240, JString, required = false,
                                 default = nil)
  if valid_597240 != nil:
    section.add "RestoreToTime", valid_597240
  var valid_597241 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597241 = validateParameter(valid_597241, JBool, required = false, default = nil)
  if valid_597241 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597241
  var valid_597242 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_597242 = validateParameter(valid_597242, JArray, required = false,
                                 default = nil)
  if valid_597242 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597242
  var valid_597243 = query.getOrDefault("Action")
  valid_597243 = validateParameter(valid_597243, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_597243 != nil:
    section.add "Action", valid_597243
  var valid_597244 = query.getOrDefault("Port")
  valid_597244 = validateParameter(valid_597244, JInt, required = false, default = nil)
  if valid_597244 != nil:
    section.add "Port", valid_597244
  var valid_597245 = query.getOrDefault("VpcSecurityGroupIds")
  valid_597245 = validateParameter(valid_597245, JArray, required = false,
                                 default = nil)
  if valid_597245 != nil:
    section.add "VpcSecurityGroupIds", valid_597245
  var valid_597246 = query.getOrDefault("OptionGroupName")
  valid_597246 = validateParameter(valid_597246, JString, required = false,
                                 default = nil)
  if valid_597246 != nil:
    section.add "OptionGroupName", valid_597246
  var valid_597247 = query.getOrDefault("DBSubnetGroupName")
  valid_597247 = validateParameter(valid_597247, JString, required = false,
                                 default = nil)
  if valid_597247 != nil:
    section.add "DBSubnetGroupName", valid_597247
  var valid_597248 = query.getOrDefault("Version")
  valid_597248 = validateParameter(valid_597248, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597248 != nil:
    section.add "Version", valid_597248
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597249 = header.getOrDefault("X-Amz-Signature")
  valid_597249 = validateParameter(valid_597249, JString, required = false,
                                 default = nil)
  if valid_597249 != nil:
    section.add "X-Amz-Signature", valid_597249
  var valid_597250 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597250 = validateParameter(valid_597250, JString, required = false,
                                 default = nil)
  if valid_597250 != nil:
    section.add "X-Amz-Content-Sha256", valid_597250
  var valid_597251 = header.getOrDefault("X-Amz-Date")
  valid_597251 = validateParameter(valid_597251, JString, required = false,
                                 default = nil)
  if valid_597251 != nil:
    section.add "X-Amz-Date", valid_597251
  var valid_597252 = header.getOrDefault("X-Amz-Credential")
  valid_597252 = validateParameter(valid_597252, JString, required = false,
                                 default = nil)
  if valid_597252 != nil:
    section.add "X-Amz-Credential", valid_597252
  var valid_597253 = header.getOrDefault("X-Amz-Security-Token")
  valid_597253 = validateParameter(valid_597253, JString, required = false,
                                 default = nil)
  if valid_597253 != nil:
    section.add "X-Amz-Security-Token", valid_597253
  var valid_597254 = header.getOrDefault("X-Amz-Algorithm")
  valid_597254 = validateParameter(valid_597254, JString, required = false,
                                 default = nil)
  if valid_597254 != nil:
    section.add "X-Amz-Algorithm", valid_597254
  var valid_597255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597255 = validateParameter(valid_597255, JString, required = false,
                                 default = nil)
  if valid_597255 != nil:
    section.add "X-Amz-SignedHeaders", valid_597255
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597256: Call_GetRestoreDBClusterToPointInTime_597227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597256.validator(path, query, header, formData, body)
  let scheme = call_597256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597256.url(scheme.get, call_597256.host, call_597256.base,
                         call_597256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597256, url, valid)

proc call*(call_597257: Call_GetRestoreDBClusterToPointInTime_597227;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          DeletionProtection: bool = false; RestoreType: string = "";
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Tags: JsonNode = nil; KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = ""; RestoreToTime: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_597258 = newJObject()
  add(query_597258, "DeletionProtection", newJBool(DeletionProtection))
  add(query_597258, "RestoreType", newJString(RestoreType))
  add(query_597258, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_597258, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_597258.add "Tags", Tags
  add(query_597258, "KmsKeyId", newJString(KmsKeyId))
  add(query_597258, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597258, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_597258, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_597258, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_597258, "RestoreToTime", newJString(RestoreToTime))
  add(query_597258, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_597258.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_597258, "Action", newJString(Action))
  add(query_597258, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_597258.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_597258, "OptionGroupName", newJString(OptionGroupName))
  add(query_597258, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_597258, "Version", newJString(Version))
  result = call_597257.call(nil, query_597258, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_597227(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_597228, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_597229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromDBSnapshot_597335 = ref object of OpenApiRestCall_592348
proc url_PostRestoreDBInstanceFromDBSnapshot_597337(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBInstanceFromDBSnapshot_597336(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597338 = query.getOrDefault("Action")
  valid_597338 = validateParameter(valid_597338, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_597338 != nil:
    section.add "Action", valid_597338
  var valid_597339 = query.getOrDefault("Version")
  valid_597339 = validateParameter(valid_597339, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597339 != nil:
    section.add "Version", valid_597339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597340 = header.getOrDefault("X-Amz-Signature")
  valid_597340 = validateParameter(valid_597340, JString, required = false,
                                 default = nil)
  if valid_597340 != nil:
    section.add "X-Amz-Signature", valid_597340
  var valid_597341 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597341 = validateParameter(valid_597341, JString, required = false,
                                 default = nil)
  if valid_597341 != nil:
    section.add "X-Amz-Content-Sha256", valid_597341
  var valid_597342 = header.getOrDefault("X-Amz-Date")
  valid_597342 = validateParameter(valid_597342, JString, required = false,
                                 default = nil)
  if valid_597342 != nil:
    section.add "X-Amz-Date", valid_597342
  var valid_597343 = header.getOrDefault("X-Amz-Credential")
  valid_597343 = validateParameter(valid_597343, JString, required = false,
                                 default = nil)
  if valid_597343 != nil:
    section.add "X-Amz-Credential", valid_597343
  var valid_597344 = header.getOrDefault("X-Amz-Security-Token")
  valid_597344 = validateParameter(valid_597344, JString, required = false,
                                 default = nil)
  if valid_597344 != nil:
    section.add "X-Amz-Security-Token", valid_597344
  var valid_597345 = header.getOrDefault("X-Amz-Algorithm")
  valid_597345 = validateParameter(valid_597345, JString, required = false,
                                 default = nil)
  if valid_597345 != nil:
    section.add "X-Amz-Algorithm", valid_597345
  var valid_597346 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597346 = validateParameter(valid_597346, JString, required = false,
                                 default = nil)
  if valid_597346 != nil:
    section.add "X-Amz-SignedHeaders", valid_597346
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_597347 = formData.getOrDefault("Port")
  valid_597347 = validateParameter(valid_597347, JInt, required = false, default = nil)
  if valid_597347 != nil:
    section.add "Port", valid_597347
  var valid_597348 = formData.getOrDefault("DBInstanceClass")
  valid_597348 = validateParameter(valid_597348, JString, required = false,
                                 default = nil)
  if valid_597348 != nil:
    section.add "DBInstanceClass", valid_597348
  var valid_597349 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_597349 = validateParameter(valid_597349, JBool, required = false, default = nil)
  if valid_597349 != nil:
    section.add "UseDefaultProcessorFeatures", valid_597349
  var valid_597350 = formData.getOrDefault("MultiAZ")
  valid_597350 = validateParameter(valid_597350, JBool, required = false, default = nil)
  if valid_597350 != nil:
    section.add "MultiAZ", valid_597350
  var valid_597351 = formData.getOrDefault("Domain")
  valid_597351 = validateParameter(valid_597351, JString, required = false,
                                 default = nil)
  if valid_597351 != nil:
    section.add "Domain", valid_597351
  var valid_597352 = formData.getOrDefault("DBParameterGroupName")
  valid_597352 = validateParameter(valid_597352, JString, required = false,
                                 default = nil)
  if valid_597352 != nil:
    section.add "DBParameterGroupName", valid_597352
  var valid_597353 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_597353 = validateParameter(valid_597353, JArray, required = false,
                                 default = nil)
  if valid_597353 != nil:
    section.add "VpcSecurityGroupIds", valid_597353
  var valid_597354 = formData.getOrDefault("AvailabilityZone")
  valid_597354 = validateParameter(valid_597354, JString, required = false,
                                 default = nil)
  if valid_597354 != nil:
    section.add "AvailabilityZone", valid_597354
  var valid_597355 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597355 = validateParameter(valid_597355, JBool, required = false, default = nil)
  if valid_597355 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597355
  var valid_597356 = formData.getOrDefault("Engine")
  valid_597356 = validateParameter(valid_597356, JString, required = false,
                                 default = nil)
  if valid_597356 != nil:
    section.add "Engine", valid_597356
  var valid_597357 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_597357 = validateParameter(valid_597357, JBool, required = false, default = nil)
  if valid_597357 != nil:
    section.add "AutoMinorVersionUpgrade", valid_597357
  var valid_597358 = formData.getOrDefault("TdeCredentialPassword")
  valid_597358 = validateParameter(valid_597358, JString, required = false,
                                 default = nil)
  if valid_597358 != nil:
    section.add "TdeCredentialPassword", valid_597358
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597359 = formData.getOrDefault("DBInstanceIdentifier")
  valid_597359 = validateParameter(valid_597359, JString, required = true,
                                 default = nil)
  if valid_597359 != nil:
    section.add "DBInstanceIdentifier", valid_597359
  var valid_597360 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_597360 = validateParameter(valid_597360, JString, required = true,
                                 default = nil)
  if valid_597360 != nil:
    section.add "DBSnapshotIdentifier", valid_597360
  var valid_597361 = formData.getOrDefault("DBName")
  valid_597361 = validateParameter(valid_597361, JString, required = false,
                                 default = nil)
  if valid_597361 != nil:
    section.add "DBName", valid_597361
  var valid_597362 = formData.getOrDefault("Iops")
  valid_597362 = validateParameter(valid_597362, JInt, required = false, default = nil)
  if valid_597362 != nil:
    section.add "Iops", valid_597362
  var valid_597363 = formData.getOrDefault("TdeCredentialArn")
  valid_597363 = validateParameter(valid_597363, JString, required = false,
                                 default = nil)
  if valid_597363 != nil:
    section.add "TdeCredentialArn", valid_597363
  var valid_597364 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_597364 = validateParameter(valid_597364, JArray, required = false,
                                 default = nil)
  if valid_597364 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597364
  var valid_597365 = formData.getOrDefault("PubliclyAccessible")
  valid_597365 = validateParameter(valid_597365, JBool, required = false, default = nil)
  if valid_597365 != nil:
    section.add "PubliclyAccessible", valid_597365
  var valid_597366 = formData.getOrDefault("LicenseModel")
  valid_597366 = validateParameter(valid_597366, JString, required = false,
                                 default = nil)
  if valid_597366 != nil:
    section.add "LicenseModel", valid_597366
  var valid_597367 = formData.getOrDefault("Tags")
  valid_597367 = validateParameter(valid_597367, JArray, required = false,
                                 default = nil)
  if valid_597367 != nil:
    section.add "Tags", valid_597367
  var valid_597368 = formData.getOrDefault("DBSubnetGroupName")
  valid_597368 = validateParameter(valid_597368, JString, required = false,
                                 default = nil)
  if valid_597368 != nil:
    section.add "DBSubnetGroupName", valid_597368
  var valid_597369 = formData.getOrDefault("DomainIAMRoleName")
  valid_597369 = validateParameter(valid_597369, JString, required = false,
                                 default = nil)
  if valid_597369 != nil:
    section.add "DomainIAMRoleName", valid_597369
  var valid_597370 = formData.getOrDefault("OptionGroupName")
  valid_597370 = validateParameter(valid_597370, JString, required = false,
                                 default = nil)
  if valid_597370 != nil:
    section.add "OptionGroupName", valid_597370
  var valid_597371 = formData.getOrDefault("StorageType")
  valid_597371 = validateParameter(valid_597371, JString, required = false,
                                 default = nil)
  if valid_597371 != nil:
    section.add "StorageType", valid_597371
  var valid_597372 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_597372 = validateParameter(valid_597372, JBool, required = false, default = nil)
  if valid_597372 != nil:
    section.add "CopyTagsToSnapshot", valid_597372
  var valid_597373 = formData.getOrDefault("DeletionProtection")
  valid_597373 = validateParameter(valid_597373, JBool, required = false, default = nil)
  if valid_597373 != nil:
    section.add "DeletionProtection", valid_597373
  var valid_597374 = formData.getOrDefault("ProcessorFeatures")
  valid_597374 = validateParameter(valid_597374, JArray, required = false,
                                 default = nil)
  if valid_597374 != nil:
    section.add "ProcessorFeatures", valid_597374
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597375: Call_PostRestoreDBInstanceFromDBSnapshot_597335;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_597375.validator(path, query, header, formData, body)
  let scheme = call_597375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597375.url(scheme.get, call_597375.host, call_597375.base,
                         call_597375.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597375, url, valid)

proc call*(call_597376: Call_PostRestoreDBInstanceFromDBSnapshot_597335;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = ""; DBParameterGroupName: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_597377 = newJObject()
  var formData_597378 = newJObject()
  add(formData_597378, "Port", newJInt(Port))
  add(formData_597378, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_597378, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_597378, "MultiAZ", newJBool(MultiAZ))
  add(formData_597378, "Domain", newJString(Domain))
  add(formData_597378, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_597378.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_597378, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_597378, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_597378, "Engine", newJString(Engine))
  add(formData_597378, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_597378, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_597378, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_597378, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(formData_597378, "DBName", newJString(DBName))
  add(formData_597378, "Iops", newJInt(Iops))
  add(formData_597378, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_597378.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_597378, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_597377, "Action", newJString(Action))
  add(formData_597378, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_597378.add "Tags", Tags
  add(formData_597378, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_597378, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_597378, "OptionGroupName", newJString(OptionGroupName))
  add(query_597377, "Version", newJString(Version))
  add(formData_597378, "StorageType", newJString(StorageType))
  add(formData_597378, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_597378, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_597378.add "ProcessorFeatures", ProcessorFeatures
  result = call_597376.call(nil, query_597377, nil, formData_597378, nil)

var postRestoreDBInstanceFromDBSnapshot* = Call_PostRestoreDBInstanceFromDBSnapshot_597335(
    name: "postRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_PostRestoreDBInstanceFromDBSnapshot_597336, base: "/",
    url: url_PostRestoreDBInstanceFromDBSnapshot_597337,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromDBSnapshot_597292 = ref object of OpenApiRestCall_592348
proc url_GetRestoreDBInstanceFromDBSnapshot_597294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBInstanceFromDBSnapshot_597293(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_597295 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_597295 = validateParameter(valid_597295, JBool, required = false, default = nil)
  if valid_597295 != nil:
    section.add "UseDefaultProcessorFeatures", valid_597295
  var valid_597296 = query.getOrDefault("DBName")
  valid_597296 = validateParameter(valid_597296, JString, required = false,
                                 default = nil)
  if valid_597296 != nil:
    section.add "DBName", valid_597296
  var valid_597297 = query.getOrDefault("TdeCredentialPassword")
  valid_597297 = validateParameter(valid_597297, JString, required = false,
                                 default = nil)
  if valid_597297 != nil:
    section.add "TdeCredentialPassword", valid_597297
  var valid_597298 = query.getOrDefault("DeletionProtection")
  valid_597298 = validateParameter(valid_597298, JBool, required = false, default = nil)
  if valid_597298 != nil:
    section.add "DeletionProtection", valid_597298
  var valid_597299 = query.getOrDefault("Engine")
  valid_597299 = validateParameter(valid_597299, JString, required = false,
                                 default = nil)
  if valid_597299 != nil:
    section.add "Engine", valid_597299
  var valid_597300 = query.getOrDefault("CopyTagsToSnapshot")
  valid_597300 = validateParameter(valid_597300, JBool, required = false, default = nil)
  if valid_597300 != nil:
    section.add "CopyTagsToSnapshot", valid_597300
  var valid_597301 = query.getOrDefault("DBParameterGroupName")
  valid_597301 = validateParameter(valid_597301, JString, required = false,
                                 default = nil)
  if valid_597301 != nil:
    section.add "DBParameterGroupName", valid_597301
  var valid_597302 = query.getOrDefault("Tags")
  valid_597302 = validateParameter(valid_597302, JArray, required = false,
                                 default = nil)
  if valid_597302 != nil:
    section.add "Tags", valid_597302
  var valid_597303 = query.getOrDefault("LicenseModel")
  valid_597303 = validateParameter(valid_597303, JString, required = false,
                                 default = nil)
  if valid_597303 != nil:
    section.add "LicenseModel", valid_597303
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597304 = query.getOrDefault("DBInstanceIdentifier")
  valid_597304 = validateParameter(valid_597304, JString, required = true,
                                 default = nil)
  if valid_597304 != nil:
    section.add "DBInstanceIdentifier", valid_597304
  var valid_597305 = query.getOrDefault("DBSnapshotIdentifier")
  valid_597305 = validateParameter(valid_597305, JString, required = true,
                                 default = nil)
  if valid_597305 != nil:
    section.add "DBSnapshotIdentifier", valid_597305
  var valid_597306 = query.getOrDefault("TdeCredentialArn")
  valid_597306 = validateParameter(valid_597306, JString, required = false,
                                 default = nil)
  if valid_597306 != nil:
    section.add "TdeCredentialArn", valid_597306
  var valid_597307 = query.getOrDefault("ProcessorFeatures")
  valid_597307 = validateParameter(valid_597307, JArray, required = false,
                                 default = nil)
  if valid_597307 != nil:
    section.add "ProcessorFeatures", valid_597307
  var valid_597308 = query.getOrDefault("StorageType")
  valid_597308 = validateParameter(valid_597308, JString, required = false,
                                 default = nil)
  if valid_597308 != nil:
    section.add "StorageType", valid_597308
  var valid_597309 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597309 = validateParameter(valid_597309, JBool, required = false, default = nil)
  if valid_597309 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597309
  var valid_597310 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_597310 = validateParameter(valid_597310, JArray, required = false,
                                 default = nil)
  if valid_597310 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597310
  var valid_597311 = query.getOrDefault("Action")
  valid_597311 = validateParameter(valid_597311, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_597311 != nil:
    section.add "Action", valid_597311
  var valid_597312 = query.getOrDefault("MultiAZ")
  valid_597312 = validateParameter(valid_597312, JBool, required = false, default = nil)
  if valid_597312 != nil:
    section.add "MultiAZ", valid_597312
  var valid_597313 = query.getOrDefault("Port")
  valid_597313 = validateParameter(valid_597313, JInt, required = false, default = nil)
  if valid_597313 != nil:
    section.add "Port", valid_597313
  var valid_597314 = query.getOrDefault("Domain")
  valid_597314 = validateParameter(valid_597314, JString, required = false,
                                 default = nil)
  if valid_597314 != nil:
    section.add "Domain", valid_597314
  var valid_597315 = query.getOrDefault("VpcSecurityGroupIds")
  valid_597315 = validateParameter(valid_597315, JArray, required = false,
                                 default = nil)
  if valid_597315 != nil:
    section.add "VpcSecurityGroupIds", valid_597315
  var valid_597316 = query.getOrDefault("AvailabilityZone")
  valid_597316 = validateParameter(valid_597316, JString, required = false,
                                 default = nil)
  if valid_597316 != nil:
    section.add "AvailabilityZone", valid_597316
  var valid_597317 = query.getOrDefault("OptionGroupName")
  valid_597317 = validateParameter(valid_597317, JString, required = false,
                                 default = nil)
  if valid_597317 != nil:
    section.add "OptionGroupName", valid_597317
  var valid_597318 = query.getOrDefault("DBSubnetGroupName")
  valid_597318 = validateParameter(valid_597318, JString, required = false,
                                 default = nil)
  if valid_597318 != nil:
    section.add "DBSubnetGroupName", valid_597318
  var valid_597319 = query.getOrDefault("Version")
  valid_597319 = validateParameter(valid_597319, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597319 != nil:
    section.add "Version", valid_597319
  var valid_597320 = query.getOrDefault("DBInstanceClass")
  valid_597320 = validateParameter(valid_597320, JString, required = false,
                                 default = nil)
  if valid_597320 != nil:
    section.add "DBInstanceClass", valid_597320
  var valid_597321 = query.getOrDefault("PubliclyAccessible")
  valid_597321 = validateParameter(valid_597321, JBool, required = false, default = nil)
  if valid_597321 != nil:
    section.add "PubliclyAccessible", valid_597321
  var valid_597322 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_597322 = validateParameter(valid_597322, JBool, required = false, default = nil)
  if valid_597322 != nil:
    section.add "AutoMinorVersionUpgrade", valid_597322
  var valid_597323 = query.getOrDefault("Iops")
  valid_597323 = validateParameter(valid_597323, JInt, required = false, default = nil)
  if valid_597323 != nil:
    section.add "Iops", valid_597323
  var valid_597324 = query.getOrDefault("DomainIAMRoleName")
  valid_597324 = validateParameter(valid_597324, JString, required = false,
                                 default = nil)
  if valid_597324 != nil:
    section.add "DomainIAMRoleName", valid_597324
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597325 = header.getOrDefault("X-Amz-Signature")
  valid_597325 = validateParameter(valid_597325, JString, required = false,
                                 default = nil)
  if valid_597325 != nil:
    section.add "X-Amz-Signature", valid_597325
  var valid_597326 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597326 = validateParameter(valid_597326, JString, required = false,
                                 default = nil)
  if valid_597326 != nil:
    section.add "X-Amz-Content-Sha256", valid_597326
  var valid_597327 = header.getOrDefault("X-Amz-Date")
  valid_597327 = validateParameter(valid_597327, JString, required = false,
                                 default = nil)
  if valid_597327 != nil:
    section.add "X-Amz-Date", valid_597327
  var valid_597328 = header.getOrDefault("X-Amz-Credential")
  valid_597328 = validateParameter(valid_597328, JString, required = false,
                                 default = nil)
  if valid_597328 != nil:
    section.add "X-Amz-Credential", valid_597328
  var valid_597329 = header.getOrDefault("X-Amz-Security-Token")
  valid_597329 = validateParameter(valid_597329, JString, required = false,
                                 default = nil)
  if valid_597329 != nil:
    section.add "X-Amz-Security-Token", valid_597329
  var valid_597330 = header.getOrDefault("X-Amz-Algorithm")
  valid_597330 = validateParameter(valid_597330, JString, required = false,
                                 default = nil)
  if valid_597330 != nil:
    section.add "X-Amz-Algorithm", valid_597330
  var valid_597331 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597331 = validateParameter(valid_597331, JString, required = false,
                                 default = nil)
  if valid_597331 != nil:
    section.add "X-Amz-SignedHeaders", valid_597331
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597332: Call_GetRestoreDBInstanceFromDBSnapshot_597292;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_597332.validator(path, query, header, formData, body)
  let scheme = call_597332.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597332.url(scheme.get, call_597332.host, call_597332.base,
                         call_597332.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597332, url, valid)

proc call*(call_597333: Call_GetRestoreDBInstanceFromDBSnapshot_597292;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; CopyTagsToSnapshot: bool = false;
          DBParameterGroupName: string = ""; Tags: JsonNode = nil;
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromDBSnapshot"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          DBInstanceClass: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_597334 = newJObject()
  add(query_597334, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_597334, "DBName", newJString(DBName))
  add(query_597334, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_597334, "DeletionProtection", newJBool(DeletionProtection))
  add(query_597334, "Engine", newJString(Engine))
  add(query_597334, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_597334, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_597334.add "Tags", Tags
  add(query_597334, "LicenseModel", newJString(LicenseModel))
  add(query_597334, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_597334, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_597334, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_597334.add "ProcessorFeatures", ProcessorFeatures
  add(query_597334, "StorageType", newJString(StorageType))
  add(query_597334, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_597334.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_597334, "Action", newJString(Action))
  add(query_597334, "MultiAZ", newJBool(MultiAZ))
  add(query_597334, "Port", newJInt(Port))
  add(query_597334, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_597334.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_597334, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_597334, "OptionGroupName", newJString(OptionGroupName))
  add(query_597334, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_597334, "Version", newJString(Version))
  add(query_597334, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_597334, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_597334, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_597334, "Iops", newJInt(Iops))
  add(query_597334, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_597333.call(nil, query_597334, nil, nil, nil)

var getRestoreDBInstanceFromDBSnapshot* = Call_GetRestoreDBInstanceFromDBSnapshot_597292(
    name: "getRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_GetRestoreDBInstanceFromDBSnapshot_597293, base: "/",
    url: url_GetRestoreDBInstanceFromDBSnapshot_597294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromS3_597437 = ref object of OpenApiRestCall_592348
proc url_PostRestoreDBInstanceFromS3_597439(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBInstanceFromS3_597438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597440 = query.getOrDefault("Action")
  valid_597440 = validateParameter(valid_597440, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_597440 != nil:
    section.add "Action", valid_597440
  var valid_597441 = query.getOrDefault("Version")
  valid_597441 = validateParameter(valid_597441, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597441 != nil:
    section.add "Version", valid_597441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_597442 = header.getOrDefault("X-Amz-Security-Token")
  valid_597442 = validateParameter(valid_597442, JString, required = false,
                                 default = nil)
  if valid_597442 != nil:
    section.add "X-Amz-Security-Token", valid_597442
  var valid_597443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597443 = validateParameter(valid_597443, JString, required = false,
                                 default = nil)
  if valid_597443 != nil:
    section.add "X-Amz-SignedHeaders", valid_597443
  var valid_597444 = header.getOrDefault("X-Amz-Signature")
  valid_597444 = validateParameter(valid_597444, JString, required = false,
                                 default = nil)
  if valid_597444 != nil:
    section.add "X-Amz-Signature", valid_597444
  var valid_597445 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597445 = validateParameter(valid_597445, JString, required = false,
                                 default = nil)
  if valid_597445 != nil:
    section.add "X-Amz-Content-Sha256", valid_597445
  var valid_597446 = header.getOrDefault("X-Amz-Date")
  valid_597446 = validateParameter(valid_597446, JString, required = false,
                                 default = nil)
  if valid_597446 != nil:
    section.add "X-Amz-Date", valid_597446
  var valid_597447 = header.getOrDefault("X-Amz-Credential")
  valid_597447 = validateParameter(valid_597447, JString, required = false,
                                 default = nil)
  if valid_597447 != nil:
    section.add "X-Amz-Credential", valid_597447
  var valid_597448 = header.getOrDefault("X-Amz-Algorithm")
  valid_597448 = validateParameter(valid_597448, JString, required = false,
                                 default = nil)
  if valid_597448 != nil:
    section.add "X-Amz-Algorithm", valid_597448
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_597449 = formData.getOrDefault("S3IngestionRoleArn")
  valid_597449 = validateParameter(valid_597449, JString, required = true,
                                 default = nil)
  if valid_597449 != nil:
    section.add "S3IngestionRoleArn", valid_597449
  var valid_597450 = formData.getOrDefault("Port")
  valid_597450 = validateParameter(valid_597450, JInt, required = false, default = nil)
  if valid_597450 != nil:
    section.add "Port", valid_597450
  var valid_597451 = formData.getOrDefault("MultiAZ")
  valid_597451 = validateParameter(valid_597451, JBool, required = false, default = nil)
  if valid_597451 != nil:
    section.add "MultiAZ", valid_597451
  var valid_597452 = formData.getOrDefault("MasterUsername")
  valid_597452 = validateParameter(valid_597452, JString, required = false,
                                 default = nil)
  if valid_597452 != nil:
    section.add "MasterUsername", valid_597452
  var valid_597453 = formData.getOrDefault("MonitoringRoleArn")
  valid_597453 = validateParameter(valid_597453, JString, required = false,
                                 default = nil)
  if valid_597453 != nil:
    section.add "MonitoringRoleArn", valid_597453
  var valid_597454 = formData.getOrDefault("MonitoringInterval")
  valid_597454 = validateParameter(valid_597454, JInt, required = false, default = nil)
  if valid_597454 != nil:
    section.add "MonitoringInterval", valid_597454
  var valid_597455 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_597455 = validateParameter(valid_597455, JArray, required = false,
                                 default = nil)
  if valid_597455 != nil:
    section.add "VpcSecurityGroupIds", valid_597455
  var valid_597456 = formData.getOrDefault("AvailabilityZone")
  valid_597456 = validateParameter(valid_597456, JString, required = false,
                                 default = nil)
  if valid_597456 != nil:
    section.add "AvailabilityZone", valid_597456
  var valid_597457 = formData.getOrDefault("EnablePerformanceInsights")
  valid_597457 = validateParameter(valid_597457, JBool, required = false, default = nil)
  if valid_597457 != nil:
    section.add "EnablePerformanceInsights", valid_597457
  var valid_597458 = formData.getOrDefault("DBInstanceIdentifier")
  valid_597458 = validateParameter(valid_597458, JString, required = true,
                                 default = nil)
  if valid_597458 != nil:
    section.add "DBInstanceIdentifier", valid_597458
  var valid_597459 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_597459 = validateParameter(valid_597459, JArray, required = false,
                                 default = nil)
  if valid_597459 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597459
  var valid_597460 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_597460 = validateParameter(valid_597460, JInt, required = false, default = nil)
  if valid_597460 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_597460
  var valid_597461 = formData.getOrDefault("DBSubnetGroupName")
  valid_597461 = validateParameter(valid_597461, JString, required = false,
                                 default = nil)
  if valid_597461 != nil:
    section.add "DBSubnetGroupName", valid_597461
  var valid_597462 = formData.getOrDefault("StorageType")
  valid_597462 = validateParameter(valid_597462, JString, required = false,
                                 default = nil)
  if valid_597462 != nil:
    section.add "StorageType", valid_597462
  var valid_597463 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_597463 = validateParameter(valid_597463, JBool, required = false, default = nil)
  if valid_597463 != nil:
    section.add "CopyTagsToSnapshot", valid_597463
  var valid_597464 = formData.getOrDefault("DeletionProtection")
  valid_597464 = validateParameter(valid_597464, JBool, required = false, default = nil)
  if valid_597464 != nil:
    section.add "DeletionProtection", valid_597464
  var valid_597465 = formData.getOrDefault("ProcessorFeatures")
  valid_597465 = validateParameter(valid_597465, JArray, required = false,
                                 default = nil)
  if valid_597465 != nil:
    section.add "ProcessorFeatures", valid_597465
  var valid_597466 = formData.getOrDefault("AllocatedStorage")
  valid_597466 = validateParameter(valid_597466, JInt, required = false, default = nil)
  if valid_597466 != nil:
    section.add "AllocatedStorage", valid_597466
  var valid_597467 = formData.getOrDefault("S3Prefix")
  valid_597467 = validateParameter(valid_597467, JString, required = false,
                                 default = nil)
  if valid_597467 != nil:
    section.add "S3Prefix", valid_597467
  var valid_597468 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_597468 = validateParameter(valid_597468, JString, required = false,
                                 default = nil)
  if valid_597468 != nil:
    section.add "PreferredMaintenanceWindow", valid_597468
  var valid_597469 = formData.getOrDefault("DBInstanceClass")
  valid_597469 = validateParameter(valid_597469, JString, required = true,
                                 default = nil)
  if valid_597469 != nil:
    section.add "DBInstanceClass", valid_597469
  var valid_597470 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_597470 = validateParameter(valid_597470, JBool, required = false, default = nil)
  if valid_597470 != nil:
    section.add "UseDefaultProcessorFeatures", valid_597470
  var valid_597471 = formData.getOrDefault("PreferredBackupWindow")
  valid_597471 = validateParameter(valid_597471, JString, required = false,
                                 default = nil)
  if valid_597471 != nil:
    section.add "PreferredBackupWindow", valid_597471
  var valid_597472 = formData.getOrDefault("MasterUserPassword")
  valid_597472 = validateParameter(valid_597472, JString, required = false,
                                 default = nil)
  if valid_597472 != nil:
    section.add "MasterUserPassword", valid_597472
  var valid_597473 = formData.getOrDefault("SourceEngine")
  valid_597473 = validateParameter(valid_597473, JString, required = true,
                                 default = nil)
  if valid_597473 != nil:
    section.add "SourceEngine", valid_597473
  var valid_597474 = formData.getOrDefault("DBParameterGroupName")
  valid_597474 = validateParameter(valid_597474, JString, required = false,
                                 default = nil)
  if valid_597474 != nil:
    section.add "DBParameterGroupName", valid_597474
  var valid_597475 = formData.getOrDefault("EngineVersion")
  valid_597475 = validateParameter(valid_597475, JString, required = false,
                                 default = nil)
  if valid_597475 != nil:
    section.add "EngineVersion", valid_597475
  var valid_597476 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597476 = validateParameter(valid_597476, JBool, required = false, default = nil)
  if valid_597476 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597476
  var valid_597477 = formData.getOrDefault("BackupRetentionPeriod")
  valid_597477 = validateParameter(valid_597477, JInt, required = false, default = nil)
  if valid_597477 != nil:
    section.add "BackupRetentionPeriod", valid_597477
  var valid_597478 = formData.getOrDefault("KmsKeyId")
  valid_597478 = validateParameter(valid_597478, JString, required = false,
                                 default = nil)
  if valid_597478 != nil:
    section.add "KmsKeyId", valid_597478
  var valid_597479 = formData.getOrDefault("Engine")
  valid_597479 = validateParameter(valid_597479, JString, required = true,
                                 default = nil)
  if valid_597479 != nil:
    section.add "Engine", valid_597479
  var valid_597480 = formData.getOrDefault("S3BucketName")
  valid_597480 = validateParameter(valid_597480, JString, required = true,
                                 default = nil)
  if valid_597480 != nil:
    section.add "S3BucketName", valid_597480
  var valid_597481 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_597481 = validateParameter(valid_597481, JBool, required = false, default = nil)
  if valid_597481 != nil:
    section.add "AutoMinorVersionUpgrade", valid_597481
  var valid_597482 = formData.getOrDefault("DBName")
  valid_597482 = validateParameter(valid_597482, JString, required = false,
                                 default = nil)
  if valid_597482 != nil:
    section.add "DBName", valid_597482
  var valid_597483 = formData.getOrDefault("Iops")
  valid_597483 = validateParameter(valid_597483, JInt, required = false, default = nil)
  if valid_597483 != nil:
    section.add "Iops", valid_597483
  var valid_597484 = formData.getOrDefault("PubliclyAccessible")
  valid_597484 = validateParameter(valid_597484, JBool, required = false, default = nil)
  if valid_597484 != nil:
    section.add "PubliclyAccessible", valid_597484
  var valid_597485 = formData.getOrDefault("SourceEngineVersion")
  valid_597485 = validateParameter(valid_597485, JString, required = true,
                                 default = nil)
  if valid_597485 != nil:
    section.add "SourceEngineVersion", valid_597485
  var valid_597486 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_597486 = validateParameter(valid_597486, JString, required = false,
                                 default = nil)
  if valid_597486 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_597486
  var valid_597487 = formData.getOrDefault("LicenseModel")
  valid_597487 = validateParameter(valid_597487, JString, required = false,
                                 default = nil)
  if valid_597487 != nil:
    section.add "LicenseModel", valid_597487
  var valid_597488 = formData.getOrDefault("Tags")
  valid_597488 = validateParameter(valid_597488, JArray, required = false,
                                 default = nil)
  if valid_597488 != nil:
    section.add "Tags", valid_597488
  var valid_597489 = formData.getOrDefault("OptionGroupName")
  valid_597489 = validateParameter(valid_597489, JString, required = false,
                                 default = nil)
  if valid_597489 != nil:
    section.add "OptionGroupName", valid_597489
  var valid_597490 = formData.getOrDefault("DBSecurityGroups")
  valid_597490 = validateParameter(valid_597490, JArray, required = false,
                                 default = nil)
  if valid_597490 != nil:
    section.add "DBSecurityGroups", valid_597490
  var valid_597491 = formData.getOrDefault("StorageEncrypted")
  valid_597491 = validateParameter(valid_597491, JBool, required = false, default = nil)
  if valid_597491 != nil:
    section.add "StorageEncrypted", valid_597491
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597492: Call_PostRestoreDBInstanceFromS3_597437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_597492.validator(path, query, header, formData, body)
  let scheme = call_597492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597492.url(scheme.get, call_597492.host, call_597492.base,
                         call_597492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597492, url, valid)

proc call*(call_597493: Call_PostRestoreDBInstanceFromS3_597437;
          S3IngestionRoleArn: string; DBInstanceIdentifier: string;
          DBInstanceClass: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string; Port: int = 0;
          MultiAZ: bool = false; MasterUsername: string = "";
          MonitoringRoleArn: string = ""; MonitoringInterval: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnablePerformanceInsights: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromS3";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          S3Prefix: string = ""; PreferredMaintenanceWindow: string = "";
          UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; DBName: string = ""; Iops: int = 0;
          PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"; DBSecurityGroups: JsonNode = nil;
          StorageEncrypted: bool = false): Recallable =
  ## postRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  var query_597494 = newJObject()
  var formData_597495 = newJObject()
  add(formData_597495, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_597495, "Port", newJInt(Port))
  add(formData_597495, "MultiAZ", newJBool(MultiAZ))
  add(formData_597495, "MasterUsername", newJString(MasterUsername))
  add(formData_597495, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_597495, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_597495.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_597495, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_597495, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_597495, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_597495.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_597494, "Action", newJString(Action))
  add(formData_597495, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_597495, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_597495, "StorageType", newJString(StorageType))
  add(formData_597495, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_597495, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_597495.add "ProcessorFeatures", ProcessorFeatures
  add(formData_597495, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_597495, "S3Prefix", newJString(S3Prefix))
  add(formData_597495, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_597495, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_597495, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_597495, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_597495, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_597495, "SourceEngine", newJString(SourceEngine))
  add(formData_597495, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_597495, "EngineVersion", newJString(EngineVersion))
  add(formData_597495, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_597495, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_597495, "KmsKeyId", newJString(KmsKeyId))
  add(formData_597495, "Engine", newJString(Engine))
  add(formData_597495, "S3BucketName", newJString(S3BucketName))
  add(formData_597495, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_597495, "DBName", newJString(DBName))
  add(formData_597495, "Iops", newJInt(Iops))
  add(formData_597495, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_597495, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_597495, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_597495, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_597495.add "Tags", Tags
  add(formData_597495, "OptionGroupName", newJString(OptionGroupName))
  add(query_597494, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_597495.add "DBSecurityGroups", DBSecurityGroups
  add(formData_597495, "StorageEncrypted", newJBool(StorageEncrypted))
  result = call_597493.call(nil, query_597494, nil, formData_597495, nil)

var postRestoreDBInstanceFromS3* = Call_PostRestoreDBInstanceFromS3_597437(
    name: "postRestoreDBInstanceFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_PostRestoreDBInstanceFromS3_597438, base: "/",
    url: url_PostRestoreDBInstanceFromS3_597439,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromS3_597379 = ref object of OpenApiRestCall_592348
proc url_GetRestoreDBInstanceFromS3_597381(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBInstanceFromS3_597380(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_597382 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_597382 = validateParameter(valid_597382, JBool, required = false, default = nil)
  if valid_597382 != nil:
    section.add "UseDefaultProcessorFeatures", valid_597382
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_597383 = query.getOrDefault("SourceEngineVersion")
  valid_597383 = validateParameter(valid_597383, JString, required = true,
                                 default = nil)
  if valid_597383 != nil:
    section.add "SourceEngineVersion", valid_597383
  var valid_597384 = query.getOrDefault("SourceEngine")
  valid_597384 = validateParameter(valid_597384, JString, required = true,
                                 default = nil)
  if valid_597384 != nil:
    section.add "SourceEngine", valid_597384
  var valid_597385 = query.getOrDefault("Engine")
  valid_597385 = validateParameter(valid_597385, JString, required = true,
                                 default = nil)
  if valid_597385 != nil:
    section.add "Engine", valid_597385
  var valid_597386 = query.getOrDefault("CopyTagsToSnapshot")
  valid_597386 = validateParameter(valid_597386, JBool, required = false, default = nil)
  if valid_597386 != nil:
    section.add "CopyTagsToSnapshot", valid_597386
  var valid_597387 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_597387 = validateParameter(valid_597387, JInt, required = false, default = nil)
  if valid_597387 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_597387
  var valid_597388 = query.getOrDefault("MonitoringInterval")
  valid_597388 = validateParameter(valid_597388, JInt, required = false, default = nil)
  if valid_597388 != nil:
    section.add "MonitoringInterval", valid_597388
  var valid_597389 = query.getOrDefault("KmsKeyId")
  valid_597389 = validateParameter(valid_597389, JString, required = false,
                                 default = nil)
  if valid_597389 != nil:
    section.add "KmsKeyId", valid_597389
  var valid_597390 = query.getOrDefault("MonitoringRoleArn")
  valid_597390 = validateParameter(valid_597390, JString, required = false,
                                 default = nil)
  if valid_597390 != nil:
    section.add "MonitoringRoleArn", valid_597390
  var valid_597391 = query.getOrDefault("S3BucketName")
  valid_597391 = validateParameter(valid_597391, JString, required = true,
                                 default = nil)
  if valid_597391 != nil:
    section.add "S3BucketName", valid_597391
  var valid_597392 = query.getOrDefault("ProcessorFeatures")
  valid_597392 = validateParameter(valid_597392, JArray, required = false,
                                 default = nil)
  if valid_597392 != nil:
    section.add "ProcessorFeatures", valid_597392
  var valid_597393 = query.getOrDefault("MasterUsername")
  valid_597393 = validateParameter(valid_597393, JString, required = false,
                                 default = nil)
  if valid_597393 != nil:
    section.add "MasterUsername", valid_597393
  var valid_597394 = query.getOrDefault("BackupRetentionPeriod")
  valid_597394 = validateParameter(valid_597394, JInt, required = false, default = nil)
  if valid_597394 != nil:
    section.add "BackupRetentionPeriod", valid_597394
  var valid_597395 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_597395 = validateParameter(valid_597395, JArray, required = false,
                                 default = nil)
  if valid_597395 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597395
  var valid_597396 = query.getOrDefault("EngineVersion")
  valid_597396 = validateParameter(valid_597396, JString, required = false,
                                 default = nil)
  if valid_597396 != nil:
    section.add "EngineVersion", valid_597396
  var valid_597397 = query.getOrDefault("Action")
  valid_597397 = validateParameter(valid_597397, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_597397 != nil:
    section.add "Action", valid_597397
  var valid_597398 = query.getOrDefault("VpcSecurityGroupIds")
  valid_597398 = validateParameter(valid_597398, JArray, required = false,
                                 default = nil)
  if valid_597398 != nil:
    section.add "VpcSecurityGroupIds", valid_597398
  var valid_597399 = query.getOrDefault("AllocatedStorage")
  valid_597399 = validateParameter(valid_597399, JInt, required = false, default = nil)
  if valid_597399 != nil:
    section.add "AllocatedStorage", valid_597399
  var valid_597400 = query.getOrDefault("EnablePerformanceInsights")
  valid_597400 = validateParameter(valid_597400, JBool, required = false, default = nil)
  if valid_597400 != nil:
    section.add "EnablePerformanceInsights", valid_597400
  var valid_597401 = query.getOrDefault("PubliclyAccessible")
  valid_597401 = validateParameter(valid_597401, JBool, required = false, default = nil)
  if valid_597401 != nil:
    section.add "PubliclyAccessible", valid_597401
  var valid_597402 = query.getOrDefault("S3IngestionRoleArn")
  valid_597402 = validateParameter(valid_597402, JString, required = true,
                                 default = nil)
  if valid_597402 != nil:
    section.add "S3IngestionRoleArn", valid_597402
  var valid_597403 = query.getOrDefault("DBName")
  valid_597403 = validateParameter(valid_597403, JString, required = false,
                                 default = nil)
  if valid_597403 != nil:
    section.add "DBName", valid_597403
  var valid_597404 = query.getOrDefault("StorageEncrypted")
  valid_597404 = validateParameter(valid_597404, JBool, required = false, default = nil)
  if valid_597404 != nil:
    section.add "StorageEncrypted", valid_597404
  var valid_597405 = query.getOrDefault("DBParameterGroupName")
  valid_597405 = validateParameter(valid_597405, JString, required = false,
                                 default = nil)
  if valid_597405 != nil:
    section.add "DBParameterGroupName", valid_597405
  var valid_597406 = query.getOrDefault("DeletionProtection")
  valid_597406 = validateParameter(valid_597406, JBool, required = false, default = nil)
  if valid_597406 != nil:
    section.add "DeletionProtection", valid_597406
  var valid_597407 = query.getOrDefault("S3Prefix")
  valid_597407 = validateParameter(valid_597407, JString, required = false,
                                 default = nil)
  if valid_597407 != nil:
    section.add "S3Prefix", valid_597407
  var valid_597408 = query.getOrDefault("Tags")
  valid_597408 = validateParameter(valid_597408, JArray, required = false,
                                 default = nil)
  if valid_597408 != nil:
    section.add "Tags", valid_597408
  var valid_597409 = query.getOrDefault("LicenseModel")
  valid_597409 = validateParameter(valid_597409, JString, required = false,
                                 default = nil)
  if valid_597409 != nil:
    section.add "LicenseModel", valid_597409
  var valid_597410 = query.getOrDefault("DBInstanceIdentifier")
  valid_597410 = validateParameter(valid_597410, JString, required = true,
                                 default = nil)
  if valid_597410 != nil:
    section.add "DBInstanceIdentifier", valid_597410
  var valid_597411 = query.getOrDefault("StorageType")
  valid_597411 = validateParameter(valid_597411, JString, required = false,
                                 default = nil)
  if valid_597411 != nil:
    section.add "StorageType", valid_597411
  var valid_597412 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597412 = validateParameter(valid_597412, JBool, required = false, default = nil)
  if valid_597412 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597412
  var valid_597413 = query.getOrDefault("MultiAZ")
  valid_597413 = validateParameter(valid_597413, JBool, required = false, default = nil)
  if valid_597413 != nil:
    section.add "MultiAZ", valid_597413
  var valid_597414 = query.getOrDefault("DBSecurityGroups")
  valid_597414 = validateParameter(valid_597414, JArray, required = false,
                                 default = nil)
  if valid_597414 != nil:
    section.add "DBSecurityGroups", valid_597414
  var valid_597415 = query.getOrDefault("Port")
  valid_597415 = validateParameter(valid_597415, JInt, required = false, default = nil)
  if valid_597415 != nil:
    section.add "Port", valid_597415
  var valid_597416 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_597416 = validateParameter(valid_597416, JString, required = false,
                                 default = nil)
  if valid_597416 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_597416
  var valid_597417 = query.getOrDefault("MasterUserPassword")
  valid_597417 = validateParameter(valid_597417, JString, required = false,
                                 default = nil)
  if valid_597417 != nil:
    section.add "MasterUserPassword", valid_597417
  var valid_597418 = query.getOrDefault("AvailabilityZone")
  valid_597418 = validateParameter(valid_597418, JString, required = false,
                                 default = nil)
  if valid_597418 != nil:
    section.add "AvailabilityZone", valid_597418
  var valid_597419 = query.getOrDefault("OptionGroupName")
  valid_597419 = validateParameter(valid_597419, JString, required = false,
                                 default = nil)
  if valid_597419 != nil:
    section.add "OptionGroupName", valid_597419
  var valid_597420 = query.getOrDefault("DBSubnetGroupName")
  valid_597420 = validateParameter(valid_597420, JString, required = false,
                                 default = nil)
  if valid_597420 != nil:
    section.add "DBSubnetGroupName", valid_597420
  var valid_597421 = query.getOrDefault("PreferredBackupWindow")
  valid_597421 = validateParameter(valid_597421, JString, required = false,
                                 default = nil)
  if valid_597421 != nil:
    section.add "PreferredBackupWindow", valid_597421
  var valid_597422 = query.getOrDefault("DBInstanceClass")
  valid_597422 = validateParameter(valid_597422, JString, required = true,
                                 default = nil)
  if valid_597422 != nil:
    section.add "DBInstanceClass", valid_597422
  var valid_597423 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_597423 = validateParameter(valid_597423, JString, required = false,
                                 default = nil)
  if valid_597423 != nil:
    section.add "PreferredMaintenanceWindow", valid_597423
  var valid_597424 = query.getOrDefault("Version")
  valid_597424 = validateParameter(valid_597424, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597424 != nil:
    section.add "Version", valid_597424
  var valid_597425 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_597425 = validateParameter(valid_597425, JBool, required = false, default = nil)
  if valid_597425 != nil:
    section.add "AutoMinorVersionUpgrade", valid_597425
  var valid_597426 = query.getOrDefault("Iops")
  valid_597426 = validateParameter(valid_597426, JInt, required = false, default = nil)
  if valid_597426 != nil:
    section.add "Iops", valid_597426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_597427 = header.getOrDefault("X-Amz-Security-Token")
  valid_597427 = validateParameter(valid_597427, JString, required = false,
                                 default = nil)
  if valid_597427 != nil:
    section.add "X-Amz-Security-Token", valid_597427
  var valid_597428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597428 = validateParameter(valid_597428, JString, required = false,
                                 default = nil)
  if valid_597428 != nil:
    section.add "X-Amz-SignedHeaders", valid_597428
  var valid_597429 = header.getOrDefault("X-Amz-Signature")
  valid_597429 = validateParameter(valid_597429, JString, required = false,
                                 default = nil)
  if valid_597429 != nil:
    section.add "X-Amz-Signature", valid_597429
  var valid_597430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597430 = validateParameter(valid_597430, JString, required = false,
                                 default = nil)
  if valid_597430 != nil:
    section.add "X-Amz-Content-Sha256", valid_597430
  var valid_597431 = header.getOrDefault("X-Amz-Date")
  valid_597431 = validateParameter(valid_597431, JString, required = false,
                                 default = nil)
  if valid_597431 != nil:
    section.add "X-Amz-Date", valid_597431
  var valid_597432 = header.getOrDefault("X-Amz-Credential")
  valid_597432 = validateParameter(valid_597432, JString, required = false,
                                 default = nil)
  if valid_597432 != nil:
    section.add "X-Amz-Credential", valid_597432
  var valid_597433 = header.getOrDefault("X-Amz-Algorithm")
  valid_597433 = validateParameter(valid_597433, JString, required = false,
                                 default = nil)
  if valid_597433 != nil:
    section.add "X-Amz-Algorithm", valid_597433
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597434: Call_GetRestoreDBInstanceFromS3_597379; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_597434.validator(path, query, header, formData, body)
  let scheme = call_597434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597434.url(scheme.get, call_597434.host, call_597434.base,
                         call_597434.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597434, url, valid)

proc call*(call_597435: Call_GetRestoreDBInstanceFromS3_597379;
          SourceEngineVersion: string; SourceEngine: string; Engine: string;
          S3BucketName: string; S3IngestionRoleArn: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          UseDefaultProcessorFeatures: bool = false;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBInstanceFromS3";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; StorageEncrypted: bool = false;
          DBParameterGroupName: string = ""; DeletionProtection: bool = false;
          S3Prefix: string = ""; Tags: JsonNode = nil; LicenseModel: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0): Recallable =
  ## getRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  var query_597436 = newJObject()
  add(query_597436, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_597436, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_597436, "SourceEngine", newJString(SourceEngine))
  add(query_597436, "Engine", newJString(Engine))
  add(query_597436, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_597436, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_597436, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_597436, "KmsKeyId", newJString(KmsKeyId))
  add(query_597436, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_597436, "S3BucketName", newJString(S3BucketName))
  if ProcessorFeatures != nil:
    query_597436.add "ProcessorFeatures", ProcessorFeatures
  add(query_597436, "MasterUsername", newJString(MasterUsername))
  add(query_597436, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_597436.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_597436, "EngineVersion", newJString(EngineVersion))
  add(query_597436, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_597436.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_597436, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_597436, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_597436, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_597436, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_597436, "DBName", newJString(DBName))
  add(query_597436, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_597436, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_597436, "DeletionProtection", newJBool(DeletionProtection))
  add(query_597436, "S3Prefix", newJString(S3Prefix))
  if Tags != nil:
    query_597436.add "Tags", Tags
  add(query_597436, "LicenseModel", newJString(LicenseModel))
  add(query_597436, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_597436, "StorageType", newJString(StorageType))
  add(query_597436, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_597436, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_597436.add "DBSecurityGroups", DBSecurityGroups
  add(query_597436, "Port", newJInt(Port))
  add(query_597436, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_597436, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_597436, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_597436, "OptionGroupName", newJString(OptionGroupName))
  add(query_597436, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_597436, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_597436, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_597436, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_597436, "Version", newJString(Version))
  add(query_597436, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_597436, "Iops", newJInt(Iops))
  result = call_597435.call(nil, query_597436, nil, nil, nil)

var getRestoreDBInstanceFromS3* = Call_GetRestoreDBInstanceFromS3_597379(
    name: "getRestoreDBInstanceFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_GetRestoreDBInstanceFromS3_597380, base: "/",
    url: url_GetRestoreDBInstanceFromS3_597381,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceToPointInTime_597542 = ref object of OpenApiRestCall_592348
proc url_PostRestoreDBInstanceToPointInTime_597544(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBInstanceToPointInTime_597543(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597545 = query.getOrDefault("Action")
  valid_597545 = validateParameter(valid_597545, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_597545 != nil:
    section.add "Action", valid_597545
  var valid_597546 = query.getOrDefault("Version")
  valid_597546 = validateParameter(valid_597546, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597546 != nil:
    section.add "Version", valid_597546
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597547 = header.getOrDefault("X-Amz-Signature")
  valid_597547 = validateParameter(valid_597547, JString, required = false,
                                 default = nil)
  if valid_597547 != nil:
    section.add "X-Amz-Signature", valid_597547
  var valid_597548 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597548 = validateParameter(valid_597548, JString, required = false,
                                 default = nil)
  if valid_597548 != nil:
    section.add "X-Amz-Content-Sha256", valid_597548
  var valid_597549 = header.getOrDefault("X-Amz-Date")
  valid_597549 = validateParameter(valid_597549, JString, required = false,
                                 default = nil)
  if valid_597549 != nil:
    section.add "X-Amz-Date", valid_597549
  var valid_597550 = header.getOrDefault("X-Amz-Credential")
  valid_597550 = validateParameter(valid_597550, JString, required = false,
                                 default = nil)
  if valid_597550 != nil:
    section.add "X-Amz-Credential", valid_597550
  var valid_597551 = header.getOrDefault("X-Amz-Security-Token")
  valid_597551 = validateParameter(valid_597551, JString, required = false,
                                 default = nil)
  if valid_597551 != nil:
    section.add "X-Amz-Security-Token", valid_597551
  var valid_597552 = header.getOrDefault("X-Amz-Algorithm")
  valid_597552 = validateParameter(valid_597552, JString, required = false,
                                 default = nil)
  if valid_597552 != nil:
    section.add "X-Amz-Algorithm", valid_597552
  var valid_597553 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597553 = validateParameter(valid_597553, JString, required = false,
                                 default = nil)
  if valid_597553 != nil:
    section.add "X-Amz-SignedHeaders", valid_597553
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_597554 = formData.getOrDefault("Port")
  valid_597554 = validateParameter(valid_597554, JInt, required = false, default = nil)
  if valid_597554 != nil:
    section.add "Port", valid_597554
  var valid_597555 = formData.getOrDefault("DBInstanceClass")
  valid_597555 = validateParameter(valid_597555, JString, required = false,
                                 default = nil)
  if valid_597555 != nil:
    section.add "DBInstanceClass", valid_597555
  var valid_597556 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_597556 = validateParameter(valid_597556, JBool, required = false, default = nil)
  if valid_597556 != nil:
    section.add "UseDefaultProcessorFeatures", valid_597556
  var valid_597557 = formData.getOrDefault("MultiAZ")
  valid_597557 = validateParameter(valid_597557, JBool, required = false, default = nil)
  if valid_597557 != nil:
    section.add "MultiAZ", valid_597557
  var valid_597558 = formData.getOrDefault("Domain")
  valid_597558 = validateParameter(valid_597558, JString, required = false,
                                 default = nil)
  if valid_597558 != nil:
    section.add "Domain", valid_597558
  var valid_597559 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_597559 = validateParameter(valid_597559, JString, required = false,
                                 default = nil)
  if valid_597559 != nil:
    section.add "SourceDBInstanceIdentifier", valid_597559
  var valid_597560 = formData.getOrDefault("DBParameterGroupName")
  valid_597560 = validateParameter(valid_597560, JString, required = false,
                                 default = nil)
  if valid_597560 != nil:
    section.add "DBParameterGroupName", valid_597560
  var valid_597561 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_597561 = validateParameter(valid_597561, JArray, required = false,
                                 default = nil)
  if valid_597561 != nil:
    section.add "VpcSecurityGroupIds", valid_597561
  var valid_597562 = formData.getOrDefault("AvailabilityZone")
  valid_597562 = validateParameter(valid_597562, JString, required = false,
                                 default = nil)
  if valid_597562 != nil:
    section.add "AvailabilityZone", valid_597562
  var valid_597563 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597563 = validateParameter(valid_597563, JBool, required = false, default = nil)
  if valid_597563 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597563
  var valid_597564 = formData.getOrDefault("Engine")
  valid_597564 = validateParameter(valid_597564, JString, required = false,
                                 default = nil)
  if valid_597564 != nil:
    section.add "Engine", valid_597564
  var valid_597565 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_597565 = validateParameter(valid_597565, JBool, required = false, default = nil)
  if valid_597565 != nil:
    section.add "AutoMinorVersionUpgrade", valid_597565
  var valid_597566 = formData.getOrDefault("TdeCredentialPassword")
  valid_597566 = validateParameter(valid_597566, JString, required = false,
                                 default = nil)
  if valid_597566 != nil:
    section.add "TdeCredentialPassword", valid_597566
  var valid_597567 = formData.getOrDefault("UseLatestRestorableTime")
  valid_597567 = validateParameter(valid_597567, JBool, required = false, default = nil)
  if valid_597567 != nil:
    section.add "UseLatestRestorableTime", valid_597567
  var valid_597568 = formData.getOrDefault("DBName")
  valid_597568 = validateParameter(valid_597568, JString, required = false,
                                 default = nil)
  if valid_597568 != nil:
    section.add "DBName", valid_597568
  var valid_597569 = formData.getOrDefault("Iops")
  valid_597569 = validateParameter(valid_597569, JInt, required = false, default = nil)
  if valid_597569 != nil:
    section.add "Iops", valid_597569
  var valid_597570 = formData.getOrDefault("TdeCredentialArn")
  valid_597570 = validateParameter(valid_597570, JString, required = false,
                                 default = nil)
  if valid_597570 != nil:
    section.add "TdeCredentialArn", valid_597570
  var valid_597571 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_597571 = validateParameter(valid_597571, JArray, required = false,
                                 default = nil)
  if valid_597571 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597571
  var valid_597572 = formData.getOrDefault("PubliclyAccessible")
  valid_597572 = validateParameter(valid_597572, JBool, required = false, default = nil)
  if valid_597572 != nil:
    section.add "PubliclyAccessible", valid_597572
  var valid_597573 = formData.getOrDefault("LicenseModel")
  valid_597573 = validateParameter(valid_597573, JString, required = false,
                                 default = nil)
  if valid_597573 != nil:
    section.add "LicenseModel", valid_597573
  var valid_597574 = formData.getOrDefault("Tags")
  valid_597574 = validateParameter(valid_597574, JArray, required = false,
                                 default = nil)
  if valid_597574 != nil:
    section.add "Tags", valid_597574
  var valid_597575 = formData.getOrDefault("DBSubnetGroupName")
  valid_597575 = validateParameter(valid_597575, JString, required = false,
                                 default = nil)
  if valid_597575 != nil:
    section.add "DBSubnetGroupName", valid_597575
  var valid_597576 = formData.getOrDefault("DomainIAMRoleName")
  valid_597576 = validateParameter(valid_597576, JString, required = false,
                                 default = nil)
  if valid_597576 != nil:
    section.add "DomainIAMRoleName", valid_597576
  var valid_597577 = formData.getOrDefault("OptionGroupName")
  valid_597577 = validateParameter(valid_597577, JString, required = false,
                                 default = nil)
  if valid_597577 != nil:
    section.add "OptionGroupName", valid_597577
  var valid_597578 = formData.getOrDefault("RestoreTime")
  valid_597578 = validateParameter(valid_597578, JString, required = false,
                                 default = nil)
  if valid_597578 != nil:
    section.add "RestoreTime", valid_597578
  assert formData != nil, "formData argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_597579 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_597579 = validateParameter(valid_597579, JString, required = true,
                                 default = nil)
  if valid_597579 != nil:
    section.add "TargetDBInstanceIdentifier", valid_597579
  var valid_597580 = formData.getOrDefault("StorageType")
  valid_597580 = validateParameter(valid_597580, JString, required = false,
                                 default = nil)
  if valid_597580 != nil:
    section.add "StorageType", valid_597580
  var valid_597581 = formData.getOrDefault("SourceDbiResourceId")
  valid_597581 = validateParameter(valid_597581, JString, required = false,
                                 default = nil)
  if valid_597581 != nil:
    section.add "SourceDbiResourceId", valid_597581
  var valid_597582 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_597582 = validateParameter(valid_597582, JBool, required = false, default = nil)
  if valid_597582 != nil:
    section.add "CopyTagsToSnapshot", valid_597582
  var valid_597583 = formData.getOrDefault("DeletionProtection")
  valid_597583 = validateParameter(valid_597583, JBool, required = false, default = nil)
  if valid_597583 != nil:
    section.add "DeletionProtection", valid_597583
  var valid_597584 = formData.getOrDefault("ProcessorFeatures")
  valid_597584 = validateParameter(valid_597584, JArray, required = false,
                                 default = nil)
  if valid_597584 != nil:
    section.add "ProcessorFeatures", valid_597584
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597585: Call_PostRestoreDBInstanceToPointInTime_597542;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_597585.validator(path, query, header, formData, body)
  let scheme = call_597585.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597585.url(scheme.get, call_597585.host, call_597585.base,
                         call_597585.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597585, url, valid)

proc call*(call_597586: Call_PostRestoreDBInstanceToPointInTime_597542;
          TargetDBInstanceIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = "";
          SourceDBInstanceIdentifier: string = "";
          DBParameterGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          UseLatestRestorableTime: bool = false; DBName: string = ""; Iops: int = 0;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceToPointInTime";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; RestoreTime: string = "";
          Version: string = "2014-10-31"; StorageType: string = "";
          SourceDbiResourceId: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_597587 = newJObject()
  var formData_597588 = newJObject()
  add(formData_597588, "Port", newJInt(Port))
  add(formData_597588, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_597588, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_597588, "MultiAZ", newJBool(MultiAZ))
  add(formData_597588, "Domain", newJString(Domain))
  add(formData_597588, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_597588, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_597588.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_597588, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_597588, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_597588, "Engine", newJString(Engine))
  add(formData_597588, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_597588, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_597588, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_597588, "DBName", newJString(DBName))
  add(formData_597588, "Iops", newJInt(Iops))
  add(formData_597588, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_597588.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_597588, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_597587, "Action", newJString(Action))
  add(formData_597588, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_597588.add "Tags", Tags
  add(formData_597588, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_597588, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_597588, "OptionGroupName", newJString(OptionGroupName))
  add(formData_597588, "RestoreTime", newJString(RestoreTime))
  add(formData_597588, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_597587, "Version", newJString(Version))
  add(formData_597588, "StorageType", newJString(StorageType))
  add(formData_597588, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(formData_597588, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_597588, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_597588.add "ProcessorFeatures", ProcessorFeatures
  result = call_597586.call(nil, query_597587, nil, formData_597588, nil)

var postRestoreDBInstanceToPointInTime* = Call_PostRestoreDBInstanceToPointInTime_597542(
    name: "postRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_PostRestoreDBInstanceToPointInTime_597543, base: "/",
    url: url_PostRestoreDBInstanceToPointInTime_597544,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceToPointInTime_597496 = ref object of OpenApiRestCall_592348
proc url_GetRestoreDBInstanceToPointInTime_597498(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBInstanceToPointInTime_597497(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_597499 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_597499 = validateParameter(valid_597499, JBool, required = false, default = nil)
  if valid_597499 != nil:
    section.add "UseDefaultProcessorFeatures", valid_597499
  var valid_597500 = query.getOrDefault("DBName")
  valid_597500 = validateParameter(valid_597500, JString, required = false,
                                 default = nil)
  if valid_597500 != nil:
    section.add "DBName", valid_597500
  var valid_597501 = query.getOrDefault("TdeCredentialPassword")
  valid_597501 = validateParameter(valid_597501, JString, required = false,
                                 default = nil)
  if valid_597501 != nil:
    section.add "TdeCredentialPassword", valid_597501
  var valid_597502 = query.getOrDefault("DeletionProtection")
  valid_597502 = validateParameter(valid_597502, JBool, required = false, default = nil)
  if valid_597502 != nil:
    section.add "DeletionProtection", valid_597502
  var valid_597503 = query.getOrDefault("Engine")
  valid_597503 = validateParameter(valid_597503, JString, required = false,
                                 default = nil)
  if valid_597503 != nil:
    section.add "Engine", valid_597503
  var valid_597504 = query.getOrDefault("UseLatestRestorableTime")
  valid_597504 = validateParameter(valid_597504, JBool, required = false, default = nil)
  if valid_597504 != nil:
    section.add "UseLatestRestorableTime", valid_597504
  var valid_597505 = query.getOrDefault("CopyTagsToSnapshot")
  valid_597505 = validateParameter(valid_597505, JBool, required = false, default = nil)
  if valid_597505 != nil:
    section.add "CopyTagsToSnapshot", valid_597505
  var valid_597506 = query.getOrDefault("DBParameterGroupName")
  valid_597506 = validateParameter(valid_597506, JString, required = false,
                                 default = nil)
  if valid_597506 != nil:
    section.add "DBParameterGroupName", valid_597506
  var valid_597507 = query.getOrDefault("Tags")
  valid_597507 = validateParameter(valid_597507, JArray, required = false,
                                 default = nil)
  if valid_597507 != nil:
    section.add "Tags", valid_597507
  var valid_597508 = query.getOrDefault("LicenseModel")
  valid_597508 = validateParameter(valid_597508, JString, required = false,
                                 default = nil)
  if valid_597508 != nil:
    section.add "LicenseModel", valid_597508
  var valid_597509 = query.getOrDefault("TdeCredentialArn")
  valid_597509 = validateParameter(valid_597509, JString, required = false,
                                 default = nil)
  if valid_597509 != nil:
    section.add "TdeCredentialArn", valid_597509
  var valid_597510 = query.getOrDefault("ProcessorFeatures")
  valid_597510 = validateParameter(valid_597510, JArray, required = false,
                                 default = nil)
  if valid_597510 != nil:
    section.add "ProcessorFeatures", valid_597510
  var valid_597511 = query.getOrDefault("StorageType")
  valid_597511 = validateParameter(valid_597511, JString, required = false,
                                 default = nil)
  if valid_597511 != nil:
    section.add "StorageType", valid_597511
  assert query != nil, "query argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_597512 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_597512 = validateParameter(valid_597512, JString, required = true,
                                 default = nil)
  if valid_597512 != nil:
    section.add "TargetDBInstanceIdentifier", valid_597512
  var valid_597513 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_597513 = validateParameter(valid_597513, JBool, required = false, default = nil)
  if valid_597513 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_597513
  var valid_597514 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_597514 = validateParameter(valid_597514, JArray, required = false,
                                 default = nil)
  if valid_597514 != nil:
    section.add "EnableCloudwatchLogsExports", valid_597514
  var valid_597515 = query.getOrDefault("Action")
  valid_597515 = validateParameter(valid_597515, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_597515 != nil:
    section.add "Action", valid_597515
  var valid_597516 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_597516 = validateParameter(valid_597516, JString, required = false,
                                 default = nil)
  if valid_597516 != nil:
    section.add "SourceDBInstanceIdentifier", valid_597516
  var valid_597517 = query.getOrDefault("MultiAZ")
  valid_597517 = validateParameter(valid_597517, JBool, required = false, default = nil)
  if valid_597517 != nil:
    section.add "MultiAZ", valid_597517
  var valid_597518 = query.getOrDefault("Port")
  valid_597518 = validateParameter(valid_597518, JInt, required = false, default = nil)
  if valid_597518 != nil:
    section.add "Port", valid_597518
  var valid_597519 = query.getOrDefault("Domain")
  valid_597519 = validateParameter(valid_597519, JString, required = false,
                                 default = nil)
  if valid_597519 != nil:
    section.add "Domain", valid_597519
  var valid_597520 = query.getOrDefault("VpcSecurityGroupIds")
  valid_597520 = validateParameter(valid_597520, JArray, required = false,
                                 default = nil)
  if valid_597520 != nil:
    section.add "VpcSecurityGroupIds", valid_597520
  var valid_597521 = query.getOrDefault("SourceDbiResourceId")
  valid_597521 = validateParameter(valid_597521, JString, required = false,
                                 default = nil)
  if valid_597521 != nil:
    section.add "SourceDbiResourceId", valid_597521
  var valid_597522 = query.getOrDefault("AvailabilityZone")
  valid_597522 = validateParameter(valid_597522, JString, required = false,
                                 default = nil)
  if valid_597522 != nil:
    section.add "AvailabilityZone", valid_597522
  var valid_597523 = query.getOrDefault("OptionGroupName")
  valid_597523 = validateParameter(valid_597523, JString, required = false,
                                 default = nil)
  if valid_597523 != nil:
    section.add "OptionGroupName", valid_597523
  var valid_597524 = query.getOrDefault("DBSubnetGroupName")
  valid_597524 = validateParameter(valid_597524, JString, required = false,
                                 default = nil)
  if valid_597524 != nil:
    section.add "DBSubnetGroupName", valid_597524
  var valid_597525 = query.getOrDefault("RestoreTime")
  valid_597525 = validateParameter(valid_597525, JString, required = false,
                                 default = nil)
  if valid_597525 != nil:
    section.add "RestoreTime", valid_597525
  var valid_597526 = query.getOrDefault("DBInstanceClass")
  valid_597526 = validateParameter(valid_597526, JString, required = false,
                                 default = nil)
  if valid_597526 != nil:
    section.add "DBInstanceClass", valid_597526
  var valid_597527 = query.getOrDefault("PubliclyAccessible")
  valid_597527 = validateParameter(valid_597527, JBool, required = false, default = nil)
  if valid_597527 != nil:
    section.add "PubliclyAccessible", valid_597527
  var valid_597528 = query.getOrDefault("Version")
  valid_597528 = validateParameter(valid_597528, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597528 != nil:
    section.add "Version", valid_597528
  var valid_597529 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_597529 = validateParameter(valid_597529, JBool, required = false, default = nil)
  if valid_597529 != nil:
    section.add "AutoMinorVersionUpgrade", valid_597529
  var valid_597530 = query.getOrDefault("Iops")
  valid_597530 = validateParameter(valid_597530, JInt, required = false, default = nil)
  if valid_597530 != nil:
    section.add "Iops", valid_597530
  var valid_597531 = query.getOrDefault("DomainIAMRoleName")
  valid_597531 = validateParameter(valid_597531, JString, required = false,
                                 default = nil)
  if valid_597531 != nil:
    section.add "DomainIAMRoleName", valid_597531
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597532 = header.getOrDefault("X-Amz-Signature")
  valid_597532 = validateParameter(valid_597532, JString, required = false,
                                 default = nil)
  if valid_597532 != nil:
    section.add "X-Amz-Signature", valid_597532
  var valid_597533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597533 = validateParameter(valid_597533, JString, required = false,
                                 default = nil)
  if valid_597533 != nil:
    section.add "X-Amz-Content-Sha256", valid_597533
  var valid_597534 = header.getOrDefault("X-Amz-Date")
  valid_597534 = validateParameter(valid_597534, JString, required = false,
                                 default = nil)
  if valid_597534 != nil:
    section.add "X-Amz-Date", valid_597534
  var valid_597535 = header.getOrDefault("X-Amz-Credential")
  valid_597535 = validateParameter(valid_597535, JString, required = false,
                                 default = nil)
  if valid_597535 != nil:
    section.add "X-Amz-Credential", valid_597535
  var valid_597536 = header.getOrDefault("X-Amz-Security-Token")
  valid_597536 = validateParameter(valid_597536, JString, required = false,
                                 default = nil)
  if valid_597536 != nil:
    section.add "X-Amz-Security-Token", valid_597536
  var valid_597537 = header.getOrDefault("X-Amz-Algorithm")
  valid_597537 = validateParameter(valid_597537, JString, required = false,
                                 default = nil)
  if valid_597537 != nil:
    section.add "X-Amz-Algorithm", valid_597537
  var valid_597538 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597538 = validateParameter(valid_597538, JString, required = false,
                                 default = nil)
  if valid_597538 != nil:
    section.add "X-Amz-SignedHeaders", valid_597538
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597539: Call_GetRestoreDBInstanceToPointInTime_597496;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_597539.validator(path, query, header, formData, body)
  let scheme = call_597539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597539.url(scheme.get, call_597539.host, call_597539.base,
                         call_597539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597539, url, valid)

proc call*(call_597540: Call_GetRestoreDBInstanceToPointInTime_597496;
          TargetDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; UseLatestRestorableTime: bool = false;
          CopyTagsToSnapshot: bool = false; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; LicenseModel: string = "";
          TdeCredentialArn: string = ""; ProcessorFeatures: JsonNode = nil;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceToPointInTime";
          SourceDBInstanceIdentifier: string = ""; MultiAZ: bool = false; Port: int = 0;
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          SourceDbiResourceId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          RestoreTime: string = ""; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_597541 = newJObject()
  add(query_597541, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_597541, "DBName", newJString(DBName))
  add(query_597541, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_597541, "DeletionProtection", newJBool(DeletionProtection))
  add(query_597541, "Engine", newJString(Engine))
  add(query_597541, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_597541, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_597541, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_597541.add "Tags", Tags
  add(query_597541, "LicenseModel", newJString(LicenseModel))
  add(query_597541, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_597541.add "ProcessorFeatures", ProcessorFeatures
  add(query_597541, "StorageType", newJString(StorageType))
  add(query_597541, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_597541, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_597541.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_597541, "Action", newJString(Action))
  add(query_597541, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_597541, "MultiAZ", newJBool(MultiAZ))
  add(query_597541, "Port", newJInt(Port))
  add(query_597541, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_597541.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_597541, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(query_597541, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_597541, "OptionGroupName", newJString(OptionGroupName))
  add(query_597541, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_597541, "RestoreTime", newJString(RestoreTime))
  add(query_597541, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_597541, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_597541, "Version", newJString(Version))
  add(query_597541, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_597541, "Iops", newJInt(Iops))
  add(query_597541, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_597540.call(nil, query_597541, nil, nil, nil)

var getRestoreDBInstanceToPointInTime* = Call_GetRestoreDBInstanceToPointInTime_597496(
    name: "getRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_GetRestoreDBInstanceToPointInTime_597497, base: "/",
    url: url_GetRestoreDBInstanceToPointInTime_597498,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeDBSecurityGroupIngress_597609 = ref object of OpenApiRestCall_592348
proc url_PostRevokeDBSecurityGroupIngress_597611(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRevokeDBSecurityGroupIngress_597610(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597612 = query.getOrDefault("Action")
  valid_597612 = validateParameter(valid_597612, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_597612 != nil:
    section.add "Action", valid_597612
  var valid_597613 = query.getOrDefault("Version")
  valid_597613 = validateParameter(valid_597613, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597613 != nil:
    section.add "Version", valid_597613
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597614 = header.getOrDefault("X-Amz-Signature")
  valid_597614 = validateParameter(valid_597614, JString, required = false,
                                 default = nil)
  if valid_597614 != nil:
    section.add "X-Amz-Signature", valid_597614
  var valid_597615 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597615 = validateParameter(valid_597615, JString, required = false,
                                 default = nil)
  if valid_597615 != nil:
    section.add "X-Amz-Content-Sha256", valid_597615
  var valid_597616 = header.getOrDefault("X-Amz-Date")
  valid_597616 = validateParameter(valid_597616, JString, required = false,
                                 default = nil)
  if valid_597616 != nil:
    section.add "X-Amz-Date", valid_597616
  var valid_597617 = header.getOrDefault("X-Amz-Credential")
  valid_597617 = validateParameter(valid_597617, JString, required = false,
                                 default = nil)
  if valid_597617 != nil:
    section.add "X-Amz-Credential", valid_597617
  var valid_597618 = header.getOrDefault("X-Amz-Security-Token")
  valid_597618 = validateParameter(valid_597618, JString, required = false,
                                 default = nil)
  if valid_597618 != nil:
    section.add "X-Amz-Security-Token", valid_597618
  var valid_597619 = header.getOrDefault("X-Amz-Algorithm")
  valid_597619 = validateParameter(valid_597619, JString, required = false,
                                 default = nil)
  if valid_597619 != nil:
    section.add "X-Amz-Algorithm", valid_597619
  var valid_597620 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597620 = validateParameter(valid_597620, JString, required = false,
                                 default = nil)
  if valid_597620 != nil:
    section.add "X-Amz-SignedHeaders", valid_597620
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_597621 = formData.getOrDefault("DBSecurityGroupName")
  valid_597621 = validateParameter(valid_597621, JString, required = true,
                                 default = nil)
  if valid_597621 != nil:
    section.add "DBSecurityGroupName", valid_597621
  var valid_597622 = formData.getOrDefault("EC2SecurityGroupName")
  valid_597622 = validateParameter(valid_597622, JString, required = false,
                                 default = nil)
  if valid_597622 != nil:
    section.add "EC2SecurityGroupName", valid_597622
  var valid_597623 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_597623 = validateParameter(valid_597623, JString, required = false,
                                 default = nil)
  if valid_597623 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_597623
  var valid_597624 = formData.getOrDefault("EC2SecurityGroupId")
  valid_597624 = validateParameter(valid_597624, JString, required = false,
                                 default = nil)
  if valid_597624 != nil:
    section.add "EC2SecurityGroupId", valid_597624
  var valid_597625 = formData.getOrDefault("CIDRIP")
  valid_597625 = validateParameter(valid_597625, JString, required = false,
                                 default = nil)
  if valid_597625 != nil:
    section.add "CIDRIP", valid_597625
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597626: Call_PostRevokeDBSecurityGroupIngress_597609;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_597626.validator(path, query, header, formData, body)
  let scheme = call_597626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597626.url(scheme.get, call_597626.host, call_597626.base,
                         call_597626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597626, url, valid)

proc call*(call_597627: Call_PostRevokeDBSecurityGroupIngress_597609;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597628 = newJObject()
  var formData_597629 = newJObject()
  add(formData_597629, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_597629, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_597629, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_597629, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_597629, "CIDRIP", newJString(CIDRIP))
  add(query_597628, "Action", newJString(Action))
  add(query_597628, "Version", newJString(Version))
  result = call_597627.call(nil, query_597628, nil, formData_597629, nil)

var postRevokeDBSecurityGroupIngress* = Call_PostRevokeDBSecurityGroupIngress_597609(
    name: "postRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_PostRevokeDBSecurityGroupIngress_597610, base: "/",
    url: url_PostRevokeDBSecurityGroupIngress_597611,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeDBSecurityGroupIngress_597589 = ref object of OpenApiRestCall_592348
proc url_GetRevokeDBSecurityGroupIngress_597591(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRevokeDBSecurityGroupIngress_597590(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  var valid_597592 = query.getOrDefault("EC2SecurityGroupName")
  valid_597592 = validateParameter(valid_597592, JString, required = false,
                                 default = nil)
  if valid_597592 != nil:
    section.add "EC2SecurityGroupName", valid_597592
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_597593 = query.getOrDefault("DBSecurityGroupName")
  valid_597593 = validateParameter(valid_597593, JString, required = true,
                                 default = nil)
  if valid_597593 != nil:
    section.add "DBSecurityGroupName", valid_597593
  var valid_597594 = query.getOrDefault("EC2SecurityGroupId")
  valid_597594 = validateParameter(valid_597594, JString, required = false,
                                 default = nil)
  if valid_597594 != nil:
    section.add "EC2SecurityGroupId", valid_597594
  var valid_597595 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_597595 = validateParameter(valid_597595, JString, required = false,
                                 default = nil)
  if valid_597595 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_597595
  var valid_597596 = query.getOrDefault("Action")
  valid_597596 = validateParameter(valid_597596, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_597596 != nil:
    section.add "Action", valid_597596
  var valid_597597 = query.getOrDefault("Version")
  valid_597597 = validateParameter(valid_597597, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597597 != nil:
    section.add "Version", valid_597597
  var valid_597598 = query.getOrDefault("CIDRIP")
  valid_597598 = validateParameter(valid_597598, JString, required = false,
                                 default = nil)
  if valid_597598 != nil:
    section.add "CIDRIP", valid_597598
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597599 = header.getOrDefault("X-Amz-Signature")
  valid_597599 = validateParameter(valid_597599, JString, required = false,
                                 default = nil)
  if valid_597599 != nil:
    section.add "X-Amz-Signature", valid_597599
  var valid_597600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597600 = validateParameter(valid_597600, JString, required = false,
                                 default = nil)
  if valid_597600 != nil:
    section.add "X-Amz-Content-Sha256", valid_597600
  var valid_597601 = header.getOrDefault("X-Amz-Date")
  valid_597601 = validateParameter(valid_597601, JString, required = false,
                                 default = nil)
  if valid_597601 != nil:
    section.add "X-Amz-Date", valid_597601
  var valid_597602 = header.getOrDefault("X-Amz-Credential")
  valid_597602 = validateParameter(valid_597602, JString, required = false,
                                 default = nil)
  if valid_597602 != nil:
    section.add "X-Amz-Credential", valid_597602
  var valid_597603 = header.getOrDefault("X-Amz-Security-Token")
  valid_597603 = validateParameter(valid_597603, JString, required = false,
                                 default = nil)
  if valid_597603 != nil:
    section.add "X-Amz-Security-Token", valid_597603
  var valid_597604 = header.getOrDefault("X-Amz-Algorithm")
  valid_597604 = validateParameter(valid_597604, JString, required = false,
                                 default = nil)
  if valid_597604 != nil:
    section.add "X-Amz-Algorithm", valid_597604
  var valid_597605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597605 = validateParameter(valid_597605, JString, required = false,
                                 default = nil)
  if valid_597605 != nil:
    section.add "X-Amz-SignedHeaders", valid_597605
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597606: Call_GetRevokeDBSecurityGroupIngress_597589;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_597606.validator(path, query, header, formData, body)
  let scheme = call_597606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597606.url(scheme.get, call_597606.host, call_597606.base,
                         call_597606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597606, url, valid)

proc call*(call_597607: Call_GetRevokeDBSecurityGroupIngress_597589;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  var query_597608 = newJObject()
  add(query_597608, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_597608, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_597608, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_597608, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_597608, "Action", newJString(Action))
  add(query_597608, "Version", newJString(Version))
  add(query_597608, "CIDRIP", newJString(CIDRIP))
  result = call_597607.call(nil, query_597608, nil, nil, nil)

var getRevokeDBSecurityGroupIngress* = Call_GetRevokeDBSecurityGroupIngress_597589(
    name: "getRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_GetRevokeDBSecurityGroupIngress_597590, base: "/",
    url: url_GetRevokeDBSecurityGroupIngress_597591,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartActivityStream_597649 = ref object of OpenApiRestCall_592348
proc url_PostStartActivityStream_597651(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStartActivityStream_597650(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597652 = query.getOrDefault("Action")
  valid_597652 = validateParameter(valid_597652, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_597652 != nil:
    section.add "Action", valid_597652
  var valid_597653 = query.getOrDefault("Version")
  valid_597653 = validateParameter(valid_597653, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597653 != nil:
    section.add "Version", valid_597653
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597654 = header.getOrDefault("X-Amz-Signature")
  valid_597654 = validateParameter(valid_597654, JString, required = false,
                                 default = nil)
  if valid_597654 != nil:
    section.add "X-Amz-Signature", valid_597654
  var valid_597655 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597655 = validateParameter(valid_597655, JString, required = false,
                                 default = nil)
  if valid_597655 != nil:
    section.add "X-Amz-Content-Sha256", valid_597655
  var valid_597656 = header.getOrDefault("X-Amz-Date")
  valid_597656 = validateParameter(valid_597656, JString, required = false,
                                 default = nil)
  if valid_597656 != nil:
    section.add "X-Amz-Date", valid_597656
  var valid_597657 = header.getOrDefault("X-Amz-Credential")
  valid_597657 = validateParameter(valid_597657, JString, required = false,
                                 default = nil)
  if valid_597657 != nil:
    section.add "X-Amz-Credential", valid_597657
  var valid_597658 = header.getOrDefault("X-Amz-Security-Token")
  valid_597658 = validateParameter(valid_597658, JString, required = false,
                                 default = nil)
  if valid_597658 != nil:
    section.add "X-Amz-Security-Token", valid_597658
  var valid_597659 = header.getOrDefault("X-Amz-Algorithm")
  valid_597659 = validateParameter(valid_597659, JString, required = false,
                                 default = nil)
  if valid_597659 != nil:
    section.add "X-Amz-Algorithm", valid_597659
  var valid_597660 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597660 = validateParameter(valid_597660, JString, required = false,
                                 default = nil)
  if valid_597660 != nil:
    section.add "X-Amz-SignedHeaders", valid_597660
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_597661 = formData.getOrDefault("ResourceArn")
  valid_597661 = validateParameter(valid_597661, JString, required = true,
                                 default = nil)
  if valid_597661 != nil:
    section.add "ResourceArn", valid_597661
  var valid_597662 = formData.getOrDefault("Mode")
  valid_597662 = validateParameter(valid_597662, JString, required = true,
                                 default = newJString("sync"))
  if valid_597662 != nil:
    section.add "Mode", valid_597662
  var valid_597663 = formData.getOrDefault("KmsKeyId")
  valid_597663 = validateParameter(valid_597663, JString, required = true,
                                 default = nil)
  if valid_597663 != nil:
    section.add "KmsKeyId", valid_597663
  var valid_597664 = formData.getOrDefault("ApplyImmediately")
  valid_597664 = validateParameter(valid_597664, JBool, required = false, default = nil)
  if valid_597664 != nil:
    section.add "ApplyImmediately", valid_597664
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597665: Call_PostStartActivityStream_597649; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_597665.validator(path, query, header, formData, body)
  let scheme = call_597665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597665.url(scheme.get, call_597665.host, call_597665.base,
                         call_597665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597665, url, valid)

proc call*(call_597666: Call_PostStartActivityStream_597649; ResourceArn: string;
          KmsKeyId: string; Mode: string = "sync"; ApplyImmediately: bool = false;
          Action: string = "StartActivityStream"; Version: string = "2014-10-31"): Recallable =
  ## postStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597667 = newJObject()
  var formData_597668 = newJObject()
  add(formData_597668, "ResourceArn", newJString(ResourceArn))
  add(formData_597668, "Mode", newJString(Mode))
  add(formData_597668, "KmsKeyId", newJString(KmsKeyId))
  add(formData_597668, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_597667, "Action", newJString(Action))
  add(query_597667, "Version", newJString(Version))
  result = call_597666.call(nil, query_597667, nil, formData_597668, nil)

var postStartActivityStream* = Call_PostStartActivityStream_597649(
    name: "postStartActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_PostStartActivityStream_597650, base: "/",
    url: url_PostStartActivityStream_597651, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartActivityStream_597630 = ref object of OpenApiRestCall_592348
proc url_GetStartActivityStream_597632(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStartActivityStream_597631(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `KmsKeyId` field"
  var valid_597633 = query.getOrDefault("KmsKeyId")
  valid_597633 = validateParameter(valid_597633, JString, required = true,
                                 default = nil)
  if valid_597633 != nil:
    section.add "KmsKeyId", valid_597633
  var valid_597634 = query.getOrDefault("ResourceArn")
  valid_597634 = validateParameter(valid_597634, JString, required = true,
                                 default = nil)
  if valid_597634 != nil:
    section.add "ResourceArn", valid_597634
  var valid_597635 = query.getOrDefault("Mode")
  valid_597635 = validateParameter(valid_597635, JString, required = true,
                                 default = newJString("sync"))
  if valid_597635 != nil:
    section.add "Mode", valid_597635
  var valid_597636 = query.getOrDefault("Action")
  valid_597636 = validateParameter(valid_597636, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_597636 != nil:
    section.add "Action", valid_597636
  var valid_597637 = query.getOrDefault("ApplyImmediately")
  valid_597637 = validateParameter(valid_597637, JBool, required = false, default = nil)
  if valid_597637 != nil:
    section.add "ApplyImmediately", valid_597637
  var valid_597638 = query.getOrDefault("Version")
  valid_597638 = validateParameter(valid_597638, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597638 != nil:
    section.add "Version", valid_597638
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597639 = header.getOrDefault("X-Amz-Signature")
  valid_597639 = validateParameter(valid_597639, JString, required = false,
                                 default = nil)
  if valid_597639 != nil:
    section.add "X-Amz-Signature", valid_597639
  var valid_597640 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597640 = validateParameter(valid_597640, JString, required = false,
                                 default = nil)
  if valid_597640 != nil:
    section.add "X-Amz-Content-Sha256", valid_597640
  var valid_597641 = header.getOrDefault("X-Amz-Date")
  valid_597641 = validateParameter(valid_597641, JString, required = false,
                                 default = nil)
  if valid_597641 != nil:
    section.add "X-Amz-Date", valid_597641
  var valid_597642 = header.getOrDefault("X-Amz-Credential")
  valid_597642 = validateParameter(valid_597642, JString, required = false,
                                 default = nil)
  if valid_597642 != nil:
    section.add "X-Amz-Credential", valid_597642
  var valid_597643 = header.getOrDefault("X-Amz-Security-Token")
  valid_597643 = validateParameter(valid_597643, JString, required = false,
                                 default = nil)
  if valid_597643 != nil:
    section.add "X-Amz-Security-Token", valid_597643
  var valid_597644 = header.getOrDefault("X-Amz-Algorithm")
  valid_597644 = validateParameter(valid_597644, JString, required = false,
                                 default = nil)
  if valid_597644 != nil:
    section.add "X-Amz-Algorithm", valid_597644
  var valid_597645 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597645 = validateParameter(valid_597645, JString, required = false,
                                 default = nil)
  if valid_597645 != nil:
    section.add "X-Amz-SignedHeaders", valid_597645
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597646: Call_GetStartActivityStream_597630; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_597646.validator(path, query, header, formData, body)
  let scheme = call_597646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597646.url(scheme.get, call_597646.host, call_597646.base,
                         call_597646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597646, url, valid)

proc call*(call_597647: Call_GetStartActivityStream_597630; KmsKeyId: string;
          ResourceArn: string; Mode: string = "sync";
          Action: string = "StartActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_597648 = newJObject()
  add(query_597648, "KmsKeyId", newJString(KmsKeyId))
  add(query_597648, "ResourceArn", newJString(ResourceArn))
  add(query_597648, "Mode", newJString(Mode))
  add(query_597648, "Action", newJString(Action))
  add(query_597648, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_597648, "Version", newJString(Version))
  result = call_597647.call(nil, query_597648, nil, nil, nil)

var getStartActivityStream* = Call_GetStartActivityStream_597630(
    name: "getStartActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_GetStartActivityStream_597631, base: "/",
    url: url_GetStartActivityStream_597632, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_597685 = ref object of OpenApiRestCall_592348
proc url_PostStartDBCluster_597687(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStartDBCluster_597686(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597688 = query.getOrDefault("Action")
  valid_597688 = validateParameter(valid_597688, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_597688 != nil:
    section.add "Action", valid_597688
  var valid_597689 = query.getOrDefault("Version")
  valid_597689 = validateParameter(valid_597689, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597689 != nil:
    section.add "Version", valid_597689
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597690 = header.getOrDefault("X-Amz-Signature")
  valid_597690 = validateParameter(valid_597690, JString, required = false,
                                 default = nil)
  if valid_597690 != nil:
    section.add "X-Amz-Signature", valid_597690
  var valid_597691 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597691 = validateParameter(valid_597691, JString, required = false,
                                 default = nil)
  if valid_597691 != nil:
    section.add "X-Amz-Content-Sha256", valid_597691
  var valid_597692 = header.getOrDefault("X-Amz-Date")
  valid_597692 = validateParameter(valid_597692, JString, required = false,
                                 default = nil)
  if valid_597692 != nil:
    section.add "X-Amz-Date", valid_597692
  var valid_597693 = header.getOrDefault("X-Amz-Credential")
  valid_597693 = validateParameter(valid_597693, JString, required = false,
                                 default = nil)
  if valid_597693 != nil:
    section.add "X-Amz-Credential", valid_597693
  var valid_597694 = header.getOrDefault("X-Amz-Security-Token")
  valid_597694 = validateParameter(valid_597694, JString, required = false,
                                 default = nil)
  if valid_597694 != nil:
    section.add "X-Amz-Security-Token", valid_597694
  var valid_597695 = header.getOrDefault("X-Amz-Algorithm")
  valid_597695 = validateParameter(valid_597695, JString, required = false,
                                 default = nil)
  if valid_597695 != nil:
    section.add "X-Amz-Algorithm", valid_597695
  var valid_597696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597696 = validateParameter(valid_597696, JString, required = false,
                                 default = nil)
  if valid_597696 != nil:
    section.add "X-Amz-SignedHeaders", valid_597696
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597697 = formData.getOrDefault("DBClusterIdentifier")
  valid_597697 = validateParameter(valid_597697, JString, required = true,
                                 default = nil)
  if valid_597697 != nil:
    section.add "DBClusterIdentifier", valid_597697
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597698: Call_PostStartDBCluster_597685; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597698.validator(path, query, header, formData, body)
  let scheme = call_597698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597698.url(scheme.get, call_597698.host, call_597698.base,
                         call_597698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597698, url, valid)

proc call*(call_597699: Call_PostStartDBCluster_597685;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  var query_597700 = newJObject()
  var formData_597701 = newJObject()
  add(query_597700, "Action", newJString(Action))
  add(query_597700, "Version", newJString(Version))
  add(formData_597701, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_597699.call(nil, query_597700, nil, formData_597701, nil)

var postStartDBCluster* = Call_PostStartDBCluster_597685(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_597686, base: "/",
    url: url_PostStartDBCluster_597687, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_597669 = ref object of OpenApiRestCall_592348
proc url_GetStartDBCluster_597671(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStartDBCluster_597670(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597672 = query.getOrDefault("DBClusterIdentifier")
  valid_597672 = validateParameter(valid_597672, JString, required = true,
                                 default = nil)
  if valid_597672 != nil:
    section.add "DBClusterIdentifier", valid_597672
  var valid_597673 = query.getOrDefault("Action")
  valid_597673 = validateParameter(valid_597673, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_597673 != nil:
    section.add "Action", valid_597673
  var valid_597674 = query.getOrDefault("Version")
  valid_597674 = validateParameter(valid_597674, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597674 != nil:
    section.add "Version", valid_597674
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597675 = header.getOrDefault("X-Amz-Signature")
  valid_597675 = validateParameter(valid_597675, JString, required = false,
                                 default = nil)
  if valid_597675 != nil:
    section.add "X-Amz-Signature", valid_597675
  var valid_597676 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597676 = validateParameter(valid_597676, JString, required = false,
                                 default = nil)
  if valid_597676 != nil:
    section.add "X-Amz-Content-Sha256", valid_597676
  var valid_597677 = header.getOrDefault("X-Amz-Date")
  valid_597677 = validateParameter(valid_597677, JString, required = false,
                                 default = nil)
  if valid_597677 != nil:
    section.add "X-Amz-Date", valid_597677
  var valid_597678 = header.getOrDefault("X-Amz-Credential")
  valid_597678 = validateParameter(valid_597678, JString, required = false,
                                 default = nil)
  if valid_597678 != nil:
    section.add "X-Amz-Credential", valid_597678
  var valid_597679 = header.getOrDefault("X-Amz-Security-Token")
  valid_597679 = validateParameter(valid_597679, JString, required = false,
                                 default = nil)
  if valid_597679 != nil:
    section.add "X-Amz-Security-Token", valid_597679
  var valid_597680 = header.getOrDefault("X-Amz-Algorithm")
  valid_597680 = validateParameter(valid_597680, JString, required = false,
                                 default = nil)
  if valid_597680 != nil:
    section.add "X-Amz-Algorithm", valid_597680
  var valid_597681 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597681 = validateParameter(valid_597681, JString, required = false,
                                 default = nil)
  if valid_597681 != nil:
    section.add "X-Amz-SignedHeaders", valid_597681
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597682: Call_GetStartDBCluster_597669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597682.validator(path, query, header, formData, body)
  let scheme = call_597682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597682.url(scheme.get, call_597682.host, call_597682.base,
                         call_597682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597682, url, valid)

proc call*(call_597683: Call_GetStartDBCluster_597669; DBClusterIdentifier: string;
          Action: string = "StartDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597684 = newJObject()
  add(query_597684, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597684, "Action", newJString(Action))
  add(query_597684, "Version", newJString(Version))
  result = call_597683.call(nil, query_597684, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_597669(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_597670,
    base: "/", url: url_GetStartDBCluster_597671,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBInstance_597718 = ref object of OpenApiRestCall_592348
proc url_PostStartDBInstance_597720(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStartDBInstance_597719(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597721 = query.getOrDefault("Action")
  valid_597721 = validateParameter(valid_597721, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_597721 != nil:
    section.add "Action", valid_597721
  var valid_597722 = query.getOrDefault("Version")
  valid_597722 = validateParameter(valid_597722, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597722 != nil:
    section.add "Version", valid_597722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597723 = header.getOrDefault("X-Amz-Signature")
  valid_597723 = validateParameter(valid_597723, JString, required = false,
                                 default = nil)
  if valid_597723 != nil:
    section.add "X-Amz-Signature", valid_597723
  var valid_597724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597724 = validateParameter(valid_597724, JString, required = false,
                                 default = nil)
  if valid_597724 != nil:
    section.add "X-Amz-Content-Sha256", valid_597724
  var valid_597725 = header.getOrDefault("X-Amz-Date")
  valid_597725 = validateParameter(valid_597725, JString, required = false,
                                 default = nil)
  if valid_597725 != nil:
    section.add "X-Amz-Date", valid_597725
  var valid_597726 = header.getOrDefault("X-Amz-Credential")
  valid_597726 = validateParameter(valid_597726, JString, required = false,
                                 default = nil)
  if valid_597726 != nil:
    section.add "X-Amz-Credential", valid_597726
  var valid_597727 = header.getOrDefault("X-Amz-Security-Token")
  valid_597727 = validateParameter(valid_597727, JString, required = false,
                                 default = nil)
  if valid_597727 != nil:
    section.add "X-Amz-Security-Token", valid_597727
  var valid_597728 = header.getOrDefault("X-Amz-Algorithm")
  valid_597728 = validateParameter(valid_597728, JString, required = false,
                                 default = nil)
  if valid_597728 != nil:
    section.add "X-Amz-Algorithm", valid_597728
  var valid_597729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597729 = validateParameter(valid_597729, JString, required = false,
                                 default = nil)
  if valid_597729 != nil:
    section.add "X-Amz-SignedHeaders", valid_597729
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597730 = formData.getOrDefault("DBInstanceIdentifier")
  valid_597730 = validateParameter(valid_597730, JString, required = true,
                                 default = nil)
  if valid_597730 != nil:
    section.add "DBInstanceIdentifier", valid_597730
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597731: Call_PostStartDBInstance_597718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_597731.validator(path, query, header, formData, body)
  let scheme = call_597731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597731.url(scheme.get, call_597731.host, call_597731.base,
                         call_597731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597731, url, valid)

proc call*(call_597732: Call_PostStartDBInstance_597718;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597733 = newJObject()
  var formData_597734 = newJObject()
  add(formData_597734, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_597733, "Action", newJString(Action))
  add(query_597733, "Version", newJString(Version))
  result = call_597732.call(nil, query_597733, nil, formData_597734, nil)

var postStartDBInstance* = Call_PostStartDBInstance_597718(
    name: "postStartDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBInstance",
    validator: validate_PostStartDBInstance_597719, base: "/",
    url: url_PostStartDBInstance_597720, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBInstance_597702 = ref object of OpenApiRestCall_592348
proc url_GetStartDBInstance_597704(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStartDBInstance_597703(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597705 = query.getOrDefault("DBInstanceIdentifier")
  valid_597705 = validateParameter(valid_597705, JString, required = true,
                                 default = nil)
  if valid_597705 != nil:
    section.add "DBInstanceIdentifier", valid_597705
  var valid_597706 = query.getOrDefault("Action")
  valid_597706 = validateParameter(valid_597706, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_597706 != nil:
    section.add "Action", valid_597706
  var valid_597707 = query.getOrDefault("Version")
  valid_597707 = validateParameter(valid_597707, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597707 != nil:
    section.add "Version", valid_597707
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597708 = header.getOrDefault("X-Amz-Signature")
  valid_597708 = validateParameter(valid_597708, JString, required = false,
                                 default = nil)
  if valid_597708 != nil:
    section.add "X-Amz-Signature", valid_597708
  var valid_597709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597709 = validateParameter(valid_597709, JString, required = false,
                                 default = nil)
  if valid_597709 != nil:
    section.add "X-Amz-Content-Sha256", valid_597709
  var valid_597710 = header.getOrDefault("X-Amz-Date")
  valid_597710 = validateParameter(valid_597710, JString, required = false,
                                 default = nil)
  if valid_597710 != nil:
    section.add "X-Amz-Date", valid_597710
  var valid_597711 = header.getOrDefault("X-Amz-Credential")
  valid_597711 = validateParameter(valid_597711, JString, required = false,
                                 default = nil)
  if valid_597711 != nil:
    section.add "X-Amz-Credential", valid_597711
  var valid_597712 = header.getOrDefault("X-Amz-Security-Token")
  valid_597712 = validateParameter(valid_597712, JString, required = false,
                                 default = nil)
  if valid_597712 != nil:
    section.add "X-Amz-Security-Token", valid_597712
  var valid_597713 = header.getOrDefault("X-Amz-Algorithm")
  valid_597713 = validateParameter(valid_597713, JString, required = false,
                                 default = nil)
  if valid_597713 != nil:
    section.add "X-Amz-Algorithm", valid_597713
  var valid_597714 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597714 = validateParameter(valid_597714, JString, required = false,
                                 default = nil)
  if valid_597714 != nil:
    section.add "X-Amz-SignedHeaders", valid_597714
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597715: Call_GetStartDBInstance_597702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_597715.validator(path, query, header, formData, body)
  let scheme = call_597715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597715.url(scheme.get, call_597715.host, call_597715.base,
                         call_597715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597715, url, valid)

proc call*(call_597716: Call_GetStartDBInstance_597702;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597717 = newJObject()
  add(query_597717, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_597717, "Action", newJString(Action))
  add(query_597717, "Version", newJString(Version))
  result = call_597716.call(nil, query_597717, nil, nil, nil)

var getStartDBInstance* = Call_GetStartDBInstance_597702(
    name: "getStartDBInstance", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBInstance", validator: validate_GetStartDBInstance_597703,
    base: "/", url: url_GetStartDBInstance_597704,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopActivityStream_597752 = ref object of OpenApiRestCall_592348
proc url_PostStopActivityStream_597754(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStopActivityStream_597753(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597755 = query.getOrDefault("Action")
  valid_597755 = validateParameter(valid_597755, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_597755 != nil:
    section.add "Action", valid_597755
  var valid_597756 = query.getOrDefault("Version")
  valid_597756 = validateParameter(valid_597756, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597756 != nil:
    section.add "Version", valid_597756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597757 = header.getOrDefault("X-Amz-Signature")
  valid_597757 = validateParameter(valid_597757, JString, required = false,
                                 default = nil)
  if valid_597757 != nil:
    section.add "X-Amz-Signature", valid_597757
  var valid_597758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597758 = validateParameter(valid_597758, JString, required = false,
                                 default = nil)
  if valid_597758 != nil:
    section.add "X-Amz-Content-Sha256", valid_597758
  var valid_597759 = header.getOrDefault("X-Amz-Date")
  valid_597759 = validateParameter(valid_597759, JString, required = false,
                                 default = nil)
  if valid_597759 != nil:
    section.add "X-Amz-Date", valid_597759
  var valid_597760 = header.getOrDefault("X-Amz-Credential")
  valid_597760 = validateParameter(valid_597760, JString, required = false,
                                 default = nil)
  if valid_597760 != nil:
    section.add "X-Amz-Credential", valid_597760
  var valid_597761 = header.getOrDefault("X-Amz-Security-Token")
  valid_597761 = validateParameter(valid_597761, JString, required = false,
                                 default = nil)
  if valid_597761 != nil:
    section.add "X-Amz-Security-Token", valid_597761
  var valid_597762 = header.getOrDefault("X-Amz-Algorithm")
  valid_597762 = validateParameter(valid_597762, JString, required = false,
                                 default = nil)
  if valid_597762 != nil:
    section.add "X-Amz-Algorithm", valid_597762
  var valid_597763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597763 = validateParameter(valid_597763, JString, required = false,
                                 default = nil)
  if valid_597763 != nil:
    section.add "X-Amz-SignedHeaders", valid_597763
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_597764 = formData.getOrDefault("ResourceArn")
  valid_597764 = validateParameter(valid_597764, JString, required = true,
                                 default = nil)
  if valid_597764 != nil:
    section.add "ResourceArn", valid_597764
  var valid_597765 = formData.getOrDefault("ApplyImmediately")
  valid_597765 = validateParameter(valid_597765, JBool, required = false, default = nil)
  if valid_597765 != nil:
    section.add "ApplyImmediately", valid_597765
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597766: Call_PostStopActivityStream_597752; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_597766.validator(path, query, header, formData, body)
  let scheme = call_597766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597766.url(scheme.get, call_597766.host, call_597766.base,
                         call_597766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597766, url, valid)

proc call*(call_597767: Call_PostStopActivityStream_597752; ResourceArn: string;
          ApplyImmediately: bool = false; Action: string = "StopActivityStream";
          Version: string = "2014-10-31"): Recallable =
  ## postStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597768 = newJObject()
  var formData_597769 = newJObject()
  add(formData_597769, "ResourceArn", newJString(ResourceArn))
  add(formData_597769, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_597768, "Action", newJString(Action))
  add(query_597768, "Version", newJString(Version))
  result = call_597767.call(nil, query_597768, nil, formData_597769, nil)

var postStopActivityStream* = Call_PostStopActivityStream_597752(
    name: "postStopActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_PostStopActivityStream_597753, base: "/",
    url: url_PostStopActivityStream_597754, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopActivityStream_597735 = ref object of OpenApiRestCall_592348
proc url_GetStopActivityStream_597737(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStopActivityStream_597736(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_597738 = query.getOrDefault("ResourceArn")
  valid_597738 = validateParameter(valid_597738, JString, required = true,
                                 default = nil)
  if valid_597738 != nil:
    section.add "ResourceArn", valid_597738
  var valid_597739 = query.getOrDefault("Action")
  valid_597739 = validateParameter(valid_597739, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_597739 != nil:
    section.add "Action", valid_597739
  var valid_597740 = query.getOrDefault("ApplyImmediately")
  valid_597740 = validateParameter(valid_597740, JBool, required = false, default = nil)
  if valid_597740 != nil:
    section.add "ApplyImmediately", valid_597740
  var valid_597741 = query.getOrDefault("Version")
  valid_597741 = validateParameter(valid_597741, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597741 != nil:
    section.add "Version", valid_597741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597742 = header.getOrDefault("X-Amz-Signature")
  valid_597742 = validateParameter(valid_597742, JString, required = false,
                                 default = nil)
  if valid_597742 != nil:
    section.add "X-Amz-Signature", valid_597742
  var valid_597743 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597743 = validateParameter(valid_597743, JString, required = false,
                                 default = nil)
  if valid_597743 != nil:
    section.add "X-Amz-Content-Sha256", valid_597743
  var valid_597744 = header.getOrDefault("X-Amz-Date")
  valid_597744 = validateParameter(valid_597744, JString, required = false,
                                 default = nil)
  if valid_597744 != nil:
    section.add "X-Amz-Date", valid_597744
  var valid_597745 = header.getOrDefault("X-Amz-Credential")
  valid_597745 = validateParameter(valid_597745, JString, required = false,
                                 default = nil)
  if valid_597745 != nil:
    section.add "X-Amz-Credential", valid_597745
  var valid_597746 = header.getOrDefault("X-Amz-Security-Token")
  valid_597746 = validateParameter(valid_597746, JString, required = false,
                                 default = nil)
  if valid_597746 != nil:
    section.add "X-Amz-Security-Token", valid_597746
  var valid_597747 = header.getOrDefault("X-Amz-Algorithm")
  valid_597747 = validateParameter(valid_597747, JString, required = false,
                                 default = nil)
  if valid_597747 != nil:
    section.add "X-Amz-Algorithm", valid_597747
  var valid_597748 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597748 = validateParameter(valid_597748, JString, required = false,
                                 default = nil)
  if valid_597748 != nil:
    section.add "X-Amz-SignedHeaders", valid_597748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597749: Call_GetStopActivityStream_597735; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_597749.validator(path, query, header, formData, body)
  let scheme = call_597749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597749.url(scheme.get, call_597749.host, call_597749.base,
                         call_597749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597749, url, valid)

proc call*(call_597750: Call_GetStopActivityStream_597735; ResourceArn: string;
          Action: string = "StopActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_597751 = newJObject()
  add(query_597751, "ResourceArn", newJString(ResourceArn))
  add(query_597751, "Action", newJString(Action))
  add(query_597751, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_597751, "Version", newJString(Version))
  result = call_597750.call(nil, query_597751, nil, nil, nil)

var getStopActivityStream* = Call_GetStopActivityStream_597735(
    name: "getStopActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_GetStopActivityStream_597736, base: "/",
    url: url_GetStopActivityStream_597737, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_597786 = ref object of OpenApiRestCall_592348
proc url_PostStopDBCluster_597788(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStopDBCluster_597787(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597789 = query.getOrDefault("Action")
  valid_597789 = validateParameter(valid_597789, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_597789 != nil:
    section.add "Action", valid_597789
  var valid_597790 = query.getOrDefault("Version")
  valid_597790 = validateParameter(valid_597790, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597790 != nil:
    section.add "Version", valid_597790
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597791 = header.getOrDefault("X-Amz-Signature")
  valid_597791 = validateParameter(valid_597791, JString, required = false,
                                 default = nil)
  if valid_597791 != nil:
    section.add "X-Amz-Signature", valid_597791
  var valid_597792 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597792 = validateParameter(valid_597792, JString, required = false,
                                 default = nil)
  if valid_597792 != nil:
    section.add "X-Amz-Content-Sha256", valid_597792
  var valid_597793 = header.getOrDefault("X-Amz-Date")
  valid_597793 = validateParameter(valid_597793, JString, required = false,
                                 default = nil)
  if valid_597793 != nil:
    section.add "X-Amz-Date", valid_597793
  var valid_597794 = header.getOrDefault("X-Amz-Credential")
  valid_597794 = validateParameter(valid_597794, JString, required = false,
                                 default = nil)
  if valid_597794 != nil:
    section.add "X-Amz-Credential", valid_597794
  var valid_597795 = header.getOrDefault("X-Amz-Security-Token")
  valid_597795 = validateParameter(valid_597795, JString, required = false,
                                 default = nil)
  if valid_597795 != nil:
    section.add "X-Amz-Security-Token", valid_597795
  var valid_597796 = header.getOrDefault("X-Amz-Algorithm")
  valid_597796 = validateParameter(valid_597796, JString, required = false,
                                 default = nil)
  if valid_597796 != nil:
    section.add "X-Amz-Algorithm", valid_597796
  var valid_597797 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597797 = validateParameter(valid_597797, JString, required = false,
                                 default = nil)
  if valid_597797 != nil:
    section.add "X-Amz-SignedHeaders", valid_597797
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597798 = formData.getOrDefault("DBClusterIdentifier")
  valid_597798 = validateParameter(valid_597798, JString, required = true,
                                 default = nil)
  if valid_597798 != nil:
    section.add "DBClusterIdentifier", valid_597798
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597799: Call_PostStopDBCluster_597786; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597799.validator(path, query, header, formData, body)
  let scheme = call_597799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597799.url(scheme.get, call_597799.host, call_597799.base,
                         call_597799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597799, url, valid)

proc call*(call_597800: Call_PostStopDBCluster_597786; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  var query_597801 = newJObject()
  var formData_597802 = newJObject()
  add(query_597801, "Action", newJString(Action))
  add(query_597801, "Version", newJString(Version))
  add(formData_597802, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_597800.call(nil, query_597801, nil, formData_597802, nil)

var postStopDBCluster* = Call_PostStopDBCluster_597786(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_597787,
    base: "/", url: url_PostStopDBCluster_597788,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_597770 = ref object of OpenApiRestCall_592348
proc url_GetStopDBCluster_597772(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStopDBCluster_597771(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_597773 = query.getOrDefault("DBClusterIdentifier")
  valid_597773 = validateParameter(valid_597773, JString, required = true,
                                 default = nil)
  if valid_597773 != nil:
    section.add "DBClusterIdentifier", valid_597773
  var valid_597774 = query.getOrDefault("Action")
  valid_597774 = validateParameter(valid_597774, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_597774 != nil:
    section.add "Action", valid_597774
  var valid_597775 = query.getOrDefault("Version")
  valid_597775 = validateParameter(valid_597775, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597775 != nil:
    section.add "Version", valid_597775
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597776 = header.getOrDefault("X-Amz-Signature")
  valid_597776 = validateParameter(valid_597776, JString, required = false,
                                 default = nil)
  if valid_597776 != nil:
    section.add "X-Amz-Signature", valid_597776
  var valid_597777 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597777 = validateParameter(valid_597777, JString, required = false,
                                 default = nil)
  if valid_597777 != nil:
    section.add "X-Amz-Content-Sha256", valid_597777
  var valid_597778 = header.getOrDefault("X-Amz-Date")
  valid_597778 = validateParameter(valid_597778, JString, required = false,
                                 default = nil)
  if valid_597778 != nil:
    section.add "X-Amz-Date", valid_597778
  var valid_597779 = header.getOrDefault("X-Amz-Credential")
  valid_597779 = validateParameter(valid_597779, JString, required = false,
                                 default = nil)
  if valid_597779 != nil:
    section.add "X-Amz-Credential", valid_597779
  var valid_597780 = header.getOrDefault("X-Amz-Security-Token")
  valid_597780 = validateParameter(valid_597780, JString, required = false,
                                 default = nil)
  if valid_597780 != nil:
    section.add "X-Amz-Security-Token", valid_597780
  var valid_597781 = header.getOrDefault("X-Amz-Algorithm")
  valid_597781 = validateParameter(valid_597781, JString, required = false,
                                 default = nil)
  if valid_597781 != nil:
    section.add "X-Amz-Algorithm", valid_597781
  var valid_597782 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597782 = validateParameter(valid_597782, JString, required = false,
                                 default = nil)
  if valid_597782 != nil:
    section.add "X-Amz-SignedHeaders", valid_597782
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597783: Call_GetStopDBCluster_597770; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_597783.validator(path, query, header, formData, body)
  let scheme = call_597783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597783.url(scheme.get, call_597783.host, call_597783.base,
                         call_597783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597783, url, valid)

proc call*(call_597784: Call_GetStopDBCluster_597770; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597785 = newJObject()
  add(query_597785, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_597785, "Action", newJString(Action))
  add(query_597785, "Version", newJString(Version))
  result = call_597784.call(nil, query_597785, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_597770(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_597771,
    base: "/", url: url_GetStopDBCluster_597772,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBInstance_597820 = ref object of OpenApiRestCall_592348
proc url_PostStopDBInstance_597822(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStopDBInstance_597821(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597823 = query.getOrDefault("Action")
  valid_597823 = validateParameter(valid_597823, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_597823 != nil:
    section.add "Action", valid_597823
  var valid_597824 = query.getOrDefault("Version")
  valid_597824 = validateParameter(valid_597824, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597824 != nil:
    section.add "Version", valid_597824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597825 = header.getOrDefault("X-Amz-Signature")
  valid_597825 = validateParameter(valid_597825, JString, required = false,
                                 default = nil)
  if valid_597825 != nil:
    section.add "X-Amz-Signature", valid_597825
  var valid_597826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597826 = validateParameter(valid_597826, JString, required = false,
                                 default = nil)
  if valid_597826 != nil:
    section.add "X-Amz-Content-Sha256", valid_597826
  var valid_597827 = header.getOrDefault("X-Amz-Date")
  valid_597827 = validateParameter(valid_597827, JString, required = false,
                                 default = nil)
  if valid_597827 != nil:
    section.add "X-Amz-Date", valid_597827
  var valid_597828 = header.getOrDefault("X-Amz-Credential")
  valid_597828 = validateParameter(valid_597828, JString, required = false,
                                 default = nil)
  if valid_597828 != nil:
    section.add "X-Amz-Credential", valid_597828
  var valid_597829 = header.getOrDefault("X-Amz-Security-Token")
  valid_597829 = validateParameter(valid_597829, JString, required = false,
                                 default = nil)
  if valid_597829 != nil:
    section.add "X-Amz-Security-Token", valid_597829
  var valid_597830 = header.getOrDefault("X-Amz-Algorithm")
  valid_597830 = validateParameter(valid_597830, JString, required = false,
                                 default = nil)
  if valid_597830 != nil:
    section.add "X-Amz-Algorithm", valid_597830
  var valid_597831 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597831 = validateParameter(valid_597831, JString, required = false,
                                 default = nil)
  if valid_597831 != nil:
    section.add "X-Amz-SignedHeaders", valid_597831
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597832 = formData.getOrDefault("DBInstanceIdentifier")
  valid_597832 = validateParameter(valid_597832, JString, required = true,
                                 default = nil)
  if valid_597832 != nil:
    section.add "DBInstanceIdentifier", valid_597832
  var valid_597833 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_597833 = validateParameter(valid_597833, JString, required = false,
                                 default = nil)
  if valid_597833 != nil:
    section.add "DBSnapshotIdentifier", valid_597833
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597834: Call_PostStopDBInstance_597820; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_597834.validator(path, query, header, formData, body)
  let scheme = call_597834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597834.url(scheme.get, call_597834.host, call_597834.base,
                         call_597834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597834, url, valid)

proc call*(call_597835: Call_PostStopDBInstance_597820;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597836 = newJObject()
  var formData_597837 = newJObject()
  add(formData_597837, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_597837, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_597836, "Action", newJString(Action))
  add(query_597836, "Version", newJString(Version))
  result = call_597835.call(nil, query_597836, nil, formData_597837, nil)

var postStopDBInstance* = Call_PostStopDBInstance_597820(
    name: "postStopDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopDBInstance",
    validator: validate_PostStopDBInstance_597821, base: "/",
    url: url_PostStopDBInstance_597822, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBInstance_597803 = ref object of OpenApiRestCall_592348
proc url_GetStopDBInstance_597805(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStopDBInstance_597804(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_597806 = query.getOrDefault("DBInstanceIdentifier")
  valid_597806 = validateParameter(valid_597806, JString, required = true,
                                 default = nil)
  if valid_597806 != nil:
    section.add "DBInstanceIdentifier", valid_597806
  var valid_597807 = query.getOrDefault("DBSnapshotIdentifier")
  valid_597807 = validateParameter(valid_597807, JString, required = false,
                                 default = nil)
  if valid_597807 != nil:
    section.add "DBSnapshotIdentifier", valid_597807
  var valid_597808 = query.getOrDefault("Action")
  valid_597808 = validateParameter(valid_597808, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_597808 != nil:
    section.add "Action", valid_597808
  var valid_597809 = query.getOrDefault("Version")
  valid_597809 = validateParameter(valid_597809, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_597809 != nil:
    section.add "Version", valid_597809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_597810 = header.getOrDefault("X-Amz-Signature")
  valid_597810 = validateParameter(valid_597810, JString, required = false,
                                 default = nil)
  if valid_597810 != nil:
    section.add "X-Amz-Signature", valid_597810
  var valid_597811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597811 = validateParameter(valid_597811, JString, required = false,
                                 default = nil)
  if valid_597811 != nil:
    section.add "X-Amz-Content-Sha256", valid_597811
  var valid_597812 = header.getOrDefault("X-Amz-Date")
  valid_597812 = validateParameter(valid_597812, JString, required = false,
                                 default = nil)
  if valid_597812 != nil:
    section.add "X-Amz-Date", valid_597812
  var valid_597813 = header.getOrDefault("X-Amz-Credential")
  valid_597813 = validateParameter(valid_597813, JString, required = false,
                                 default = nil)
  if valid_597813 != nil:
    section.add "X-Amz-Credential", valid_597813
  var valid_597814 = header.getOrDefault("X-Amz-Security-Token")
  valid_597814 = validateParameter(valid_597814, JString, required = false,
                                 default = nil)
  if valid_597814 != nil:
    section.add "X-Amz-Security-Token", valid_597814
  var valid_597815 = header.getOrDefault("X-Amz-Algorithm")
  valid_597815 = validateParameter(valid_597815, JString, required = false,
                                 default = nil)
  if valid_597815 != nil:
    section.add "X-Amz-Algorithm", valid_597815
  var valid_597816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597816 = validateParameter(valid_597816, JString, required = false,
                                 default = nil)
  if valid_597816 != nil:
    section.add "X-Amz-SignedHeaders", valid_597816
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597817: Call_GetStopDBInstance_597803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_597817.validator(path, query, header, formData, body)
  let scheme = call_597817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597817.url(scheme.get, call_597817.host, call_597817.base,
                         call_597817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597817, url, valid)

proc call*(call_597818: Call_GetStopDBInstance_597803;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597819 = newJObject()
  add(query_597819, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_597819, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_597819, "Action", newJString(Action))
  add(query_597819, "Version", newJString(Version))
  result = call_597818.call(nil, query_597819, nil, nil, nil)

var getStopDBInstance* = Call_GetStopDBInstance_597803(name: "getStopDBInstance",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBInstance", validator: validate_GetStopDBInstance_597804,
    base: "/", url: url_GetStopDBInstance_597805,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
