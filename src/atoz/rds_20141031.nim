
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Relational Database Service
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Relational Database Service</fullname> <p> </p> <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the cloud. It provides cost-efficient, resizeable capacity for an industry-standard relational database and manages common database administration tasks, freeing up developers to focus on what makes their applications and businesses unique.</p> <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS is flexible: you can scale your DB instance's compute resources and storage capacity to meet your application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for the resources you use.</p> <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface you can use to manage Amazon RDS. Amazon RDS is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p> <p> <b>Amazon RDS API Reference</b> </p> <ul> <li> <p>For the alphabetical list of API actions, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p> </li> <li> <p>For the alphabetical list of data types, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p> </li> <li> <p>For a list of common query parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p> </li> <li> <p>For descriptions of the error codes, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p> </li> </ul> <p> <b>Amazon RDS User Guide</b> </p> <ul> <li> <p>For a summary of the Amazon RDS interfaces, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p> </li> <li> <p>For more information about how to use the Query API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_610658 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_610658](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_610658): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js == nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "rds"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_611269 = ref object of OpenApiRestCall_610658
proc url_PostAddRoleToDBCluster_611271(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBCluster_611270(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611272 = query.getOrDefault("Action")
  valid_611272 = validateParameter(valid_611272, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_611272 != nil:
    section.add "Action", valid_611272
  var valid_611273 = query.getOrDefault("Version")
  valid_611273 = validateParameter(valid_611273, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611273 != nil:
    section.add "Version", valid_611273
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611274 = header.getOrDefault("X-Amz-Signature")
  valid_611274 = validateParameter(valid_611274, JString, required = false,
                                 default = nil)
  if valid_611274 != nil:
    section.add "X-Amz-Signature", valid_611274
  var valid_611275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611275 = validateParameter(valid_611275, JString, required = false,
                                 default = nil)
  if valid_611275 != nil:
    section.add "X-Amz-Content-Sha256", valid_611275
  var valid_611276 = header.getOrDefault("X-Amz-Date")
  valid_611276 = validateParameter(valid_611276, JString, required = false,
                                 default = nil)
  if valid_611276 != nil:
    section.add "X-Amz-Date", valid_611276
  var valid_611277 = header.getOrDefault("X-Amz-Credential")
  valid_611277 = validateParameter(valid_611277, JString, required = false,
                                 default = nil)
  if valid_611277 != nil:
    section.add "X-Amz-Credential", valid_611277
  var valid_611278 = header.getOrDefault("X-Amz-Security-Token")
  valid_611278 = validateParameter(valid_611278, JString, required = false,
                                 default = nil)
  if valid_611278 != nil:
    section.add "X-Amz-Security-Token", valid_611278
  var valid_611279 = header.getOrDefault("X-Amz-Algorithm")
  valid_611279 = validateParameter(valid_611279, JString, required = false,
                                 default = nil)
  if valid_611279 != nil:
    section.add "X-Amz-Algorithm", valid_611279
  var valid_611280 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611280 = validateParameter(valid_611280, JString, required = false,
                                 default = nil)
  if valid_611280 != nil:
    section.add "X-Amz-SignedHeaders", valid_611280
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  var valid_611281 = formData.getOrDefault("FeatureName")
  valid_611281 = validateParameter(valid_611281, JString, required = false,
                                 default = nil)
  if valid_611281 != nil:
    section.add "FeatureName", valid_611281
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_611282 = formData.getOrDefault("RoleArn")
  valid_611282 = validateParameter(valid_611282, JString, required = true,
                                 default = nil)
  if valid_611282 != nil:
    section.add "RoleArn", valid_611282
  var valid_611283 = formData.getOrDefault("DBClusterIdentifier")
  valid_611283 = validateParameter(valid_611283, JString, required = true,
                                 default = nil)
  if valid_611283 != nil:
    section.add "DBClusterIdentifier", valid_611283
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611284: Call_PostAddRoleToDBCluster_611269; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611284.validator(path, query, header, formData, body)
  let scheme = call_611284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611284.url(scheme.get, call_611284.host, call_611284.base,
                         call_611284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611284, url, valid)

proc call*(call_611285: Call_PostAddRoleToDBCluster_611269; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  var query_611286 = newJObject()
  var formData_611287 = newJObject()
  add(formData_611287, "FeatureName", newJString(FeatureName))
  add(formData_611287, "RoleArn", newJString(RoleArn))
  add(query_611286, "Action", newJString(Action))
  add(query_611286, "Version", newJString(Version))
  add(formData_611287, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_611285.call(nil, query_611286, nil, formData_611287, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_611269(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_611270, base: "/",
    url: url_PostAddRoleToDBCluster_611271, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_610996 = ref object of OpenApiRestCall_610658
proc url_GetAddRoleToDBCluster_610998(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBCluster_610997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_611110 = query.getOrDefault("RoleArn")
  valid_611110 = validateParameter(valid_611110, JString, required = true,
                                 default = nil)
  if valid_611110 != nil:
    section.add "RoleArn", valid_611110
  var valid_611111 = query.getOrDefault("DBClusterIdentifier")
  valid_611111 = validateParameter(valid_611111, JString, required = true,
                                 default = nil)
  if valid_611111 != nil:
    section.add "DBClusterIdentifier", valid_611111
  var valid_611112 = query.getOrDefault("FeatureName")
  valid_611112 = validateParameter(valid_611112, JString, required = false,
                                 default = nil)
  if valid_611112 != nil:
    section.add "FeatureName", valid_611112
  var valid_611126 = query.getOrDefault("Action")
  valid_611126 = validateParameter(valid_611126, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_611126 != nil:
    section.add "Action", valid_611126
  var valid_611127 = query.getOrDefault("Version")
  valid_611127 = validateParameter(valid_611127, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611127 != nil:
    section.add "Version", valid_611127
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611128 = header.getOrDefault("X-Amz-Signature")
  valid_611128 = validateParameter(valid_611128, JString, required = false,
                                 default = nil)
  if valid_611128 != nil:
    section.add "X-Amz-Signature", valid_611128
  var valid_611129 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611129 = validateParameter(valid_611129, JString, required = false,
                                 default = nil)
  if valid_611129 != nil:
    section.add "X-Amz-Content-Sha256", valid_611129
  var valid_611130 = header.getOrDefault("X-Amz-Date")
  valid_611130 = validateParameter(valid_611130, JString, required = false,
                                 default = nil)
  if valid_611130 != nil:
    section.add "X-Amz-Date", valid_611130
  var valid_611131 = header.getOrDefault("X-Amz-Credential")
  valid_611131 = validateParameter(valid_611131, JString, required = false,
                                 default = nil)
  if valid_611131 != nil:
    section.add "X-Amz-Credential", valid_611131
  var valid_611132 = header.getOrDefault("X-Amz-Security-Token")
  valid_611132 = validateParameter(valid_611132, JString, required = false,
                                 default = nil)
  if valid_611132 != nil:
    section.add "X-Amz-Security-Token", valid_611132
  var valid_611133 = header.getOrDefault("X-Amz-Algorithm")
  valid_611133 = validateParameter(valid_611133, JString, required = false,
                                 default = nil)
  if valid_611133 != nil:
    section.add "X-Amz-Algorithm", valid_611133
  var valid_611134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611134 = validateParameter(valid_611134, JString, required = false,
                                 default = nil)
  if valid_611134 != nil:
    section.add "X-Amz-SignedHeaders", valid_611134
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611157: Call_GetAddRoleToDBCluster_610996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611157.validator(path, query, header, formData, body)
  let scheme = call_611157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611157.url(scheme.get, call_611157.host, call_611157.base,
                         call_611157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611157, url, valid)

proc call*(call_611228: Call_GetAddRoleToDBCluster_610996; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611229 = newJObject()
  add(query_611229, "RoleArn", newJString(RoleArn))
  add(query_611229, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_611229, "FeatureName", newJString(FeatureName))
  add(query_611229, "Action", newJString(Action))
  add(query_611229, "Version", newJString(Version))
  result = call_611228.call(nil, query_611229, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_610996(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_610997, base: "/",
    url: url_GetAddRoleToDBCluster_610998, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToDBInstance_611306 = ref object of OpenApiRestCall_610658
proc url_PostAddRoleToDBInstance_611308(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBInstance_611307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611309 = query.getOrDefault("Action")
  valid_611309 = validateParameter(valid_611309, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_611309 != nil:
    section.add "Action", valid_611309
  var valid_611310 = query.getOrDefault("Version")
  valid_611310 = validateParameter(valid_611310, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611310 != nil:
    section.add "Version", valid_611310
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611311 = header.getOrDefault("X-Amz-Signature")
  valid_611311 = validateParameter(valid_611311, JString, required = false,
                                 default = nil)
  if valid_611311 != nil:
    section.add "X-Amz-Signature", valid_611311
  var valid_611312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611312 = validateParameter(valid_611312, JString, required = false,
                                 default = nil)
  if valid_611312 != nil:
    section.add "X-Amz-Content-Sha256", valid_611312
  var valid_611313 = header.getOrDefault("X-Amz-Date")
  valid_611313 = validateParameter(valid_611313, JString, required = false,
                                 default = nil)
  if valid_611313 != nil:
    section.add "X-Amz-Date", valid_611313
  var valid_611314 = header.getOrDefault("X-Amz-Credential")
  valid_611314 = validateParameter(valid_611314, JString, required = false,
                                 default = nil)
  if valid_611314 != nil:
    section.add "X-Amz-Credential", valid_611314
  var valid_611315 = header.getOrDefault("X-Amz-Security-Token")
  valid_611315 = validateParameter(valid_611315, JString, required = false,
                                 default = nil)
  if valid_611315 != nil:
    section.add "X-Amz-Security-Token", valid_611315
  var valid_611316 = header.getOrDefault("X-Amz-Algorithm")
  valid_611316 = validateParameter(valid_611316, JString, required = false,
                                 default = nil)
  if valid_611316 != nil:
    section.add "X-Amz-Algorithm", valid_611316
  var valid_611317 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611317 = validateParameter(valid_611317, JString, required = false,
                                 default = nil)
  if valid_611317 != nil:
    section.add "X-Amz-SignedHeaders", valid_611317
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_611318 = formData.getOrDefault("FeatureName")
  valid_611318 = validateParameter(valid_611318, JString, required = true,
                                 default = nil)
  if valid_611318 != nil:
    section.add "FeatureName", valid_611318
  var valid_611319 = formData.getOrDefault("RoleArn")
  valid_611319 = validateParameter(valid_611319, JString, required = true,
                                 default = nil)
  if valid_611319 != nil:
    section.add "RoleArn", valid_611319
  var valid_611320 = formData.getOrDefault("DBInstanceIdentifier")
  valid_611320 = validateParameter(valid_611320, JString, required = true,
                                 default = nil)
  if valid_611320 != nil:
    section.add "DBInstanceIdentifier", valid_611320
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611321: Call_PostAddRoleToDBInstance_611306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_611321.validator(path, query, header, formData, body)
  let scheme = call_611321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611321.url(scheme.get, call_611321.host, call_611321.base,
                         call_611321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611321, url, valid)

proc call*(call_611322: Call_PostAddRoleToDBInstance_611306; FeatureName: string;
          RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611323 = newJObject()
  var formData_611324 = newJObject()
  add(formData_611324, "FeatureName", newJString(FeatureName))
  add(formData_611324, "RoleArn", newJString(RoleArn))
  add(formData_611324, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_611323, "Action", newJString(Action))
  add(query_611323, "Version", newJString(Version))
  result = call_611322.call(nil, query_611323, nil, formData_611324, nil)

var postAddRoleToDBInstance* = Call_PostAddRoleToDBInstance_611306(
    name: "postAddRoleToDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_PostAddRoleToDBInstance_611307, base: "/",
    url: url_PostAddRoleToDBInstance_611308, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBInstance_611288 = ref object of OpenApiRestCall_610658
proc url_GetAddRoleToDBInstance_611290(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBInstance_611289(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_611291 = query.getOrDefault("RoleArn")
  valid_611291 = validateParameter(valid_611291, JString, required = true,
                                 default = nil)
  if valid_611291 != nil:
    section.add "RoleArn", valid_611291
  var valid_611292 = query.getOrDefault("FeatureName")
  valid_611292 = validateParameter(valid_611292, JString, required = true,
                                 default = nil)
  if valid_611292 != nil:
    section.add "FeatureName", valid_611292
  var valid_611293 = query.getOrDefault("DBInstanceIdentifier")
  valid_611293 = validateParameter(valid_611293, JString, required = true,
                                 default = nil)
  if valid_611293 != nil:
    section.add "DBInstanceIdentifier", valid_611293
  var valid_611294 = query.getOrDefault("Action")
  valid_611294 = validateParameter(valid_611294, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_611294 != nil:
    section.add "Action", valid_611294
  var valid_611295 = query.getOrDefault("Version")
  valid_611295 = validateParameter(valid_611295, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611295 != nil:
    section.add "Version", valid_611295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611296 = header.getOrDefault("X-Amz-Signature")
  valid_611296 = validateParameter(valid_611296, JString, required = false,
                                 default = nil)
  if valid_611296 != nil:
    section.add "X-Amz-Signature", valid_611296
  var valid_611297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611297 = validateParameter(valid_611297, JString, required = false,
                                 default = nil)
  if valid_611297 != nil:
    section.add "X-Amz-Content-Sha256", valid_611297
  var valid_611298 = header.getOrDefault("X-Amz-Date")
  valid_611298 = validateParameter(valid_611298, JString, required = false,
                                 default = nil)
  if valid_611298 != nil:
    section.add "X-Amz-Date", valid_611298
  var valid_611299 = header.getOrDefault("X-Amz-Credential")
  valid_611299 = validateParameter(valid_611299, JString, required = false,
                                 default = nil)
  if valid_611299 != nil:
    section.add "X-Amz-Credential", valid_611299
  var valid_611300 = header.getOrDefault("X-Amz-Security-Token")
  valid_611300 = validateParameter(valid_611300, JString, required = false,
                                 default = nil)
  if valid_611300 != nil:
    section.add "X-Amz-Security-Token", valid_611300
  var valid_611301 = header.getOrDefault("X-Amz-Algorithm")
  valid_611301 = validateParameter(valid_611301, JString, required = false,
                                 default = nil)
  if valid_611301 != nil:
    section.add "X-Amz-Algorithm", valid_611301
  var valid_611302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611302 = validateParameter(valid_611302, JString, required = false,
                                 default = nil)
  if valid_611302 != nil:
    section.add "X-Amz-SignedHeaders", valid_611302
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611303: Call_GetAddRoleToDBInstance_611288; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_611303.validator(path, query, header, formData, body)
  let scheme = call_611303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611303.url(scheme.get, call_611303.host, call_611303.base,
                         call_611303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611303, url, valid)

proc call*(call_611304: Call_GetAddRoleToDBInstance_611288; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611305 = newJObject()
  add(query_611305, "RoleArn", newJString(RoleArn))
  add(query_611305, "FeatureName", newJString(FeatureName))
  add(query_611305, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_611305, "Action", newJString(Action))
  add(query_611305, "Version", newJString(Version))
  result = call_611304.call(nil, query_611305, nil, nil, nil)

var getAddRoleToDBInstance* = Call_GetAddRoleToDBInstance_611288(
    name: "getAddRoleToDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_GetAddRoleToDBInstance_611289, base: "/",
    url: url_GetAddRoleToDBInstance_611290, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_611342 = ref object of OpenApiRestCall_610658
proc url_PostAddSourceIdentifierToSubscription_611344(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_611343(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611345 = query.getOrDefault("Action")
  valid_611345 = validateParameter(valid_611345, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_611345 != nil:
    section.add "Action", valid_611345
  var valid_611346 = query.getOrDefault("Version")
  valid_611346 = validateParameter(valid_611346, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611346 != nil:
    section.add "Version", valid_611346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611347 = header.getOrDefault("X-Amz-Signature")
  valid_611347 = validateParameter(valid_611347, JString, required = false,
                                 default = nil)
  if valid_611347 != nil:
    section.add "X-Amz-Signature", valid_611347
  var valid_611348 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611348 = validateParameter(valid_611348, JString, required = false,
                                 default = nil)
  if valid_611348 != nil:
    section.add "X-Amz-Content-Sha256", valid_611348
  var valid_611349 = header.getOrDefault("X-Amz-Date")
  valid_611349 = validateParameter(valid_611349, JString, required = false,
                                 default = nil)
  if valid_611349 != nil:
    section.add "X-Amz-Date", valid_611349
  var valid_611350 = header.getOrDefault("X-Amz-Credential")
  valid_611350 = validateParameter(valid_611350, JString, required = false,
                                 default = nil)
  if valid_611350 != nil:
    section.add "X-Amz-Credential", valid_611350
  var valid_611351 = header.getOrDefault("X-Amz-Security-Token")
  valid_611351 = validateParameter(valid_611351, JString, required = false,
                                 default = nil)
  if valid_611351 != nil:
    section.add "X-Amz-Security-Token", valid_611351
  var valid_611352 = header.getOrDefault("X-Amz-Algorithm")
  valid_611352 = validateParameter(valid_611352, JString, required = false,
                                 default = nil)
  if valid_611352 != nil:
    section.add "X-Amz-Algorithm", valid_611352
  var valid_611353 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611353 = validateParameter(valid_611353, JString, required = false,
                                 default = nil)
  if valid_611353 != nil:
    section.add "X-Amz-SignedHeaders", valid_611353
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_611354 = formData.getOrDefault("SubscriptionName")
  valid_611354 = validateParameter(valid_611354, JString, required = true,
                                 default = nil)
  if valid_611354 != nil:
    section.add "SubscriptionName", valid_611354
  var valid_611355 = formData.getOrDefault("SourceIdentifier")
  valid_611355 = validateParameter(valid_611355, JString, required = true,
                                 default = nil)
  if valid_611355 != nil:
    section.add "SourceIdentifier", valid_611355
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611356: Call_PostAddSourceIdentifierToSubscription_611342;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_611356.validator(path, query, header, formData, body)
  let scheme = call_611356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611356.url(scheme.get, call_611356.host, call_611356.base,
                         call_611356.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611356, url, valid)

proc call*(call_611357: Call_PostAddSourceIdentifierToSubscription_611342;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611358 = newJObject()
  var formData_611359 = newJObject()
  add(formData_611359, "SubscriptionName", newJString(SubscriptionName))
  add(formData_611359, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_611358, "Action", newJString(Action))
  add(query_611358, "Version", newJString(Version))
  result = call_611357.call(nil, query_611358, nil, formData_611359, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_611342(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_611343, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_611344,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_611325 = ref object of OpenApiRestCall_610658
proc url_GetAddSourceIdentifierToSubscription_611327(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_611326(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_611328 = query.getOrDefault("SourceIdentifier")
  valid_611328 = validateParameter(valid_611328, JString, required = true,
                                 default = nil)
  if valid_611328 != nil:
    section.add "SourceIdentifier", valid_611328
  var valid_611329 = query.getOrDefault("SubscriptionName")
  valid_611329 = validateParameter(valid_611329, JString, required = true,
                                 default = nil)
  if valid_611329 != nil:
    section.add "SubscriptionName", valid_611329
  var valid_611330 = query.getOrDefault("Action")
  valid_611330 = validateParameter(valid_611330, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_611330 != nil:
    section.add "Action", valid_611330
  var valid_611331 = query.getOrDefault("Version")
  valid_611331 = validateParameter(valid_611331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611331 != nil:
    section.add "Version", valid_611331
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611332 = header.getOrDefault("X-Amz-Signature")
  valid_611332 = validateParameter(valid_611332, JString, required = false,
                                 default = nil)
  if valid_611332 != nil:
    section.add "X-Amz-Signature", valid_611332
  var valid_611333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611333 = validateParameter(valid_611333, JString, required = false,
                                 default = nil)
  if valid_611333 != nil:
    section.add "X-Amz-Content-Sha256", valid_611333
  var valid_611334 = header.getOrDefault("X-Amz-Date")
  valid_611334 = validateParameter(valid_611334, JString, required = false,
                                 default = nil)
  if valid_611334 != nil:
    section.add "X-Amz-Date", valid_611334
  var valid_611335 = header.getOrDefault("X-Amz-Credential")
  valid_611335 = validateParameter(valid_611335, JString, required = false,
                                 default = nil)
  if valid_611335 != nil:
    section.add "X-Amz-Credential", valid_611335
  var valid_611336 = header.getOrDefault("X-Amz-Security-Token")
  valid_611336 = validateParameter(valid_611336, JString, required = false,
                                 default = nil)
  if valid_611336 != nil:
    section.add "X-Amz-Security-Token", valid_611336
  var valid_611337 = header.getOrDefault("X-Amz-Algorithm")
  valid_611337 = validateParameter(valid_611337, JString, required = false,
                                 default = nil)
  if valid_611337 != nil:
    section.add "X-Amz-Algorithm", valid_611337
  var valid_611338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611338 = validateParameter(valid_611338, JString, required = false,
                                 default = nil)
  if valid_611338 != nil:
    section.add "X-Amz-SignedHeaders", valid_611338
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611339: Call_GetAddSourceIdentifierToSubscription_611325;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_611339.validator(path, query, header, formData, body)
  let scheme = call_611339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611339.url(scheme.get, call_611339.host, call_611339.base,
                         call_611339.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611339, url, valid)

proc call*(call_611340: Call_GetAddSourceIdentifierToSubscription_611325;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611341 = newJObject()
  add(query_611341, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_611341, "SubscriptionName", newJString(SubscriptionName))
  add(query_611341, "Action", newJString(Action))
  add(query_611341, "Version", newJString(Version))
  result = call_611340.call(nil, query_611341, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_611325(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_611326, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_611327,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_611377 = ref object of OpenApiRestCall_610658
proc url_PostAddTagsToResource_611379(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_611378(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611380 = query.getOrDefault("Action")
  valid_611380 = validateParameter(valid_611380, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_611380 != nil:
    section.add "Action", valid_611380
  var valid_611381 = query.getOrDefault("Version")
  valid_611381 = validateParameter(valid_611381, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611381 != nil:
    section.add "Version", valid_611381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611382 = header.getOrDefault("X-Amz-Signature")
  valid_611382 = validateParameter(valid_611382, JString, required = false,
                                 default = nil)
  if valid_611382 != nil:
    section.add "X-Amz-Signature", valid_611382
  var valid_611383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611383 = validateParameter(valid_611383, JString, required = false,
                                 default = nil)
  if valid_611383 != nil:
    section.add "X-Amz-Content-Sha256", valid_611383
  var valid_611384 = header.getOrDefault("X-Amz-Date")
  valid_611384 = validateParameter(valid_611384, JString, required = false,
                                 default = nil)
  if valid_611384 != nil:
    section.add "X-Amz-Date", valid_611384
  var valid_611385 = header.getOrDefault("X-Amz-Credential")
  valid_611385 = validateParameter(valid_611385, JString, required = false,
                                 default = nil)
  if valid_611385 != nil:
    section.add "X-Amz-Credential", valid_611385
  var valid_611386 = header.getOrDefault("X-Amz-Security-Token")
  valid_611386 = validateParameter(valid_611386, JString, required = false,
                                 default = nil)
  if valid_611386 != nil:
    section.add "X-Amz-Security-Token", valid_611386
  var valid_611387 = header.getOrDefault("X-Amz-Algorithm")
  valid_611387 = validateParameter(valid_611387, JString, required = false,
                                 default = nil)
  if valid_611387 != nil:
    section.add "X-Amz-Algorithm", valid_611387
  var valid_611388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611388 = validateParameter(valid_611388, JString, required = false,
                                 default = nil)
  if valid_611388 != nil:
    section.add "X-Amz-SignedHeaders", valid_611388
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_611389 = formData.getOrDefault("Tags")
  valid_611389 = validateParameter(valid_611389, JArray, required = true, default = nil)
  if valid_611389 != nil:
    section.add "Tags", valid_611389
  var valid_611390 = formData.getOrDefault("ResourceName")
  valid_611390 = validateParameter(valid_611390, JString, required = true,
                                 default = nil)
  if valid_611390 != nil:
    section.add "ResourceName", valid_611390
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611391: Call_PostAddTagsToResource_611377; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_611391.validator(path, query, header, formData, body)
  let scheme = call_611391.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611391.url(scheme.get, call_611391.host, call_611391.base,
                         call_611391.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611391, url, valid)

proc call*(call_611392: Call_PostAddTagsToResource_611377; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  var query_611393 = newJObject()
  var formData_611394 = newJObject()
  add(query_611393, "Action", newJString(Action))
  if Tags != nil:
    formData_611394.add "Tags", Tags
  add(query_611393, "Version", newJString(Version))
  add(formData_611394, "ResourceName", newJString(ResourceName))
  result = call_611392.call(nil, query_611393, nil, formData_611394, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_611377(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_611378, base: "/",
    url: url_PostAddTagsToResource_611379, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_611360 = ref object of OpenApiRestCall_610658
proc url_GetAddTagsToResource_611362(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_611361(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_611363 = query.getOrDefault("Tags")
  valid_611363 = validateParameter(valid_611363, JArray, required = true, default = nil)
  if valid_611363 != nil:
    section.add "Tags", valid_611363
  var valid_611364 = query.getOrDefault("ResourceName")
  valid_611364 = validateParameter(valid_611364, JString, required = true,
                                 default = nil)
  if valid_611364 != nil:
    section.add "ResourceName", valid_611364
  var valid_611365 = query.getOrDefault("Action")
  valid_611365 = validateParameter(valid_611365, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_611365 != nil:
    section.add "Action", valid_611365
  var valid_611366 = query.getOrDefault("Version")
  valid_611366 = validateParameter(valid_611366, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611366 != nil:
    section.add "Version", valid_611366
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611367 = header.getOrDefault("X-Amz-Signature")
  valid_611367 = validateParameter(valid_611367, JString, required = false,
                                 default = nil)
  if valid_611367 != nil:
    section.add "X-Amz-Signature", valid_611367
  var valid_611368 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611368 = validateParameter(valid_611368, JString, required = false,
                                 default = nil)
  if valid_611368 != nil:
    section.add "X-Amz-Content-Sha256", valid_611368
  var valid_611369 = header.getOrDefault("X-Amz-Date")
  valid_611369 = validateParameter(valid_611369, JString, required = false,
                                 default = nil)
  if valid_611369 != nil:
    section.add "X-Amz-Date", valid_611369
  var valid_611370 = header.getOrDefault("X-Amz-Credential")
  valid_611370 = validateParameter(valid_611370, JString, required = false,
                                 default = nil)
  if valid_611370 != nil:
    section.add "X-Amz-Credential", valid_611370
  var valid_611371 = header.getOrDefault("X-Amz-Security-Token")
  valid_611371 = validateParameter(valid_611371, JString, required = false,
                                 default = nil)
  if valid_611371 != nil:
    section.add "X-Amz-Security-Token", valid_611371
  var valid_611372 = header.getOrDefault("X-Amz-Algorithm")
  valid_611372 = validateParameter(valid_611372, JString, required = false,
                                 default = nil)
  if valid_611372 != nil:
    section.add "X-Amz-Algorithm", valid_611372
  var valid_611373 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611373 = validateParameter(valid_611373, JString, required = false,
                                 default = nil)
  if valid_611373 != nil:
    section.add "X-Amz-SignedHeaders", valid_611373
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611374: Call_GetAddTagsToResource_611360; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_611374.validator(path, query, header, formData, body)
  let scheme = call_611374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611374.url(scheme.get, call_611374.host, call_611374.base,
                         call_611374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611374, url, valid)

proc call*(call_611375: Call_GetAddTagsToResource_611360; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611376 = newJObject()
  if Tags != nil:
    query_611376.add "Tags", Tags
  add(query_611376, "ResourceName", newJString(ResourceName))
  add(query_611376, "Action", newJString(Action))
  add(query_611376, "Version", newJString(Version))
  result = call_611375.call(nil, query_611376, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_611360(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_611361, base: "/",
    url: url_GetAddTagsToResource_611362, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_611413 = ref object of OpenApiRestCall_610658
proc url_PostApplyPendingMaintenanceAction_611415(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_611414(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611416 = query.getOrDefault("Action")
  valid_611416 = validateParameter(valid_611416, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_611416 != nil:
    section.add "Action", valid_611416
  var valid_611417 = query.getOrDefault("Version")
  valid_611417 = validateParameter(valid_611417, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611417 != nil:
    section.add "Version", valid_611417
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611418 = header.getOrDefault("X-Amz-Signature")
  valid_611418 = validateParameter(valid_611418, JString, required = false,
                                 default = nil)
  if valid_611418 != nil:
    section.add "X-Amz-Signature", valid_611418
  var valid_611419 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611419 = validateParameter(valid_611419, JString, required = false,
                                 default = nil)
  if valid_611419 != nil:
    section.add "X-Amz-Content-Sha256", valid_611419
  var valid_611420 = header.getOrDefault("X-Amz-Date")
  valid_611420 = validateParameter(valid_611420, JString, required = false,
                                 default = nil)
  if valid_611420 != nil:
    section.add "X-Amz-Date", valid_611420
  var valid_611421 = header.getOrDefault("X-Amz-Credential")
  valid_611421 = validateParameter(valid_611421, JString, required = false,
                                 default = nil)
  if valid_611421 != nil:
    section.add "X-Amz-Credential", valid_611421
  var valid_611422 = header.getOrDefault("X-Amz-Security-Token")
  valid_611422 = validateParameter(valid_611422, JString, required = false,
                                 default = nil)
  if valid_611422 != nil:
    section.add "X-Amz-Security-Token", valid_611422
  var valid_611423 = header.getOrDefault("X-Amz-Algorithm")
  valid_611423 = validateParameter(valid_611423, JString, required = false,
                                 default = nil)
  if valid_611423 != nil:
    section.add "X-Amz-Algorithm", valid_611423
  var valid_611424 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611424 = validateParameter(valid_611424, JString, required = false,
                                 default = nil)
  if valid_611424 != nil:
    section.add "X-Amz-SignedHeaders", valid_611424
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ResourceIdentifier` field"
  var valid_611425 = formData.getOrDefault("ResourceIdentifier")
  valid_611425 = validateParameter(valid_611425, JString, required = true,
                                 default = nil)
  if valid_611425 != nil:
    section.add "ResourceIdentifier", valid_611425
  var valid_611426 = formData.getOrDefault("ApplyAction")
  valid_611426 = validateParameter(valid_611426, JString, required = true,
                                 default = nil)
  if valid_611426 != nil:
    section.add "ApplyAction", valid_611426
  var valid_611427 = formData.getOrDefault("OptInType")
  valid_611427 = validateParameter(valid_611427, JString, required = true,
                                 default = nil)
  if valid_611427 != nil:
    section.add "OptInType", valid_611427
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611428: Call_PostApplyPendingMaintenanceAction_611413;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_611428.validator(path, query, header, formData, body)
  let scheme = call_611428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611428.url(scheme.get, call_611428.host, call_611428.base,
                         call_611428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611428, url, valid)

proc call*(call_611429: Call_PostApplyPendingMaintenanceAction_611413;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_611430 = newJObject()
  var formData_611431 = newJObject()
  add(formData_611431, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_611431, "ApplyAction", newJString(ApplyAction))
  add(query_611430, "Action", newJString(Action))
  add(formData_611431, "OptInType", newJString(OptInType))
  add(query_611430, "Version", newJString(Version))
  result = call_611429.call(nil, query_611430, nil, formData_611431, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_611413(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_611414, base: "/",
    url: url_PostApplyPendingMaintenanceAction_611415,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_611395 = ref object of OpenApiRestCall_610658
proc url_GetApplyPendingMaintenanceAction_611397(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_611396(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ResourceIdentifier` field"
  var valid_611398 = query.getOrDefault("ResourceIdentifier")
  valid_611398 = validateParameter(valid_611398, JString, required = true,
                                 default = nil)
  if valid_611398 != nil:
    section.add "ResourceIdentifier", valid_611398
  var valid_611399 = query.getOrDefault("ApplyAction")
  valid_611399 = validateParameter(valid_611399, JString, required = true,
                                 default = nil)
  if valid_611399 != nil:
    section.add "ApplyAction", valid_611399
  var valid_611400 = query.getOrDefault("Action")
  valid_611400 = validateParameter(valid_611400, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_611400 != nil:
    section.add "Action", valid_611400
  var valid_611401 = query.getOrDefault("OptInType")
  valid_611401 = validateParameter(valid_611401, JString, required = true,
                                 default = nil)
  if valid_611401 != nil:
    section.add "OptInType", valid_611401
  var valid_611402 = query.getOrDefault("Version")
  valid_611402 = validateParameter(valid_611402, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611402 != nil:
    section.add "Version", valid_611402
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611403 = header.getOrDefault("X-Amz-Signature")
  valid_611403 = validateParameter(valid_611403, JString, required = false,
                                 default = nil)
  if valid_611403 != nil:
    section.add "X-Amz-Signature", valid_611403
  var valid_611404 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611404 = validateParameter(valid_611404, JString, required = false,
                                 default = nil)
  if valid_611404 != nil:
    section.add "X-Amz-Content-Sha256", valid_611404
  var valid_611405 = header.getOrDefault("X-Amz-Date")
  valid_611405 = validateParameter(valid_611405, JString, required = false,
                                 default = nil)
  if valid_611405 != nil:
    section.add "X-Amz-Date", valid_611405
  var valid_611406 = header.getOrDefault("X-Amz-Credential")
  valid_611406 = validateParameter(valid_611406, JString, required = false,
                                 default = nil)
  if valid_611406 != nil:
    section.add "X-Amz-Credential", valid_611406
  var valid_611407 = header.getOrDefault("X-Amz-Security-Token")
  valid_611407 = validateParameter(valid_611407, JString, required = false,
                                 default = nil)
  if valid_611407 != nil:
    section.add "X-Amz-Security-Token", valid_611407
  var valid_611408 = header.getOrDefault("X-Amz-Algorithm")
  valid_611408 = validateParameter(valid_611408, JString, required = false,
                                 default = nil)
  if valid_611408 != nil:
    section.add "X-Amz-Algorithm", valid_611408
  var valid_611409 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611409 = validateParameter(valid_611409, JString, required = false,
                                 default = nil)
  if valid_611409 != nil:
    section.add "X-Amz-SignedHeaders", valid_611409
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611410: Call_GetApplyPendingMaintenanceAction_611395;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_611410.validator(path, query, header, formData, body)
  let scheme = call_611410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611410.url(scheme.get, call_611410.host, call_611410.base,
                         call_611410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611410, url, valid)

proc call*(call_611411: Call_GetApplyPendingMaintenanceAction_611395;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_611412 = newJObject()
  add(query_611412, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_611412, "ApplyAction", newJString(ApplyAction))
  add(query_611412, "Action", newJString(Action))
  add(query_611412, "OptInType", newJString(OptInType))
  add(query_611412, "Version", newJString(Version))
  result = call_611411.call(nil, query_611412, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_611395(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_611396, base: "/",
    url: url_GetApplyPendingMaintenanceAction_611397,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeDBSecurityGroupIngress_611452 = ref object of OpenApiRestCall_610658
proc url_PostAuthorizeDBSecurityGroupIngress_611454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeDBSecurityGroupIngress_611453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611455 = query.getOrDefault("Action")
  valid_611455 = validateParameter(valid_611455, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_611455 != nil:
    section.add "Action", valid_611455
  var valid_611456 = query.getOrDefault("Version")
  valid_611456 = validateParameter(valid_611456, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611456 != nil:
    section.add "Version", valid_611456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611457 = header.getOrDefault("X-Amz-Signature")
  valid_611457 = validateParameter(valid_611457, JString, required = false,
                                 default = nil)
  if valid_611457 != nil:
    section.add "X-Amz-Signature", valid_611457
  var valid_611458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611458 = validateParameter(valid_611458, JString, required = false,
                                 default = nil)
  if valid_611458 != nil:
    section.add "X-Amz-Content-Sha256", valid_611458
  var valid_611459 = header.getOrDefault("X-Amz-Date")
  valid_611459 = validateParameter(valid_611459, JString, required = false,
                                 default = nil)
  if valid_611459 != nil:
    section.add "X-Amz-Date", valid_611459
  var valid_611460 = header.getOrDefault("X-Amz-Credential")
  valid_611460 = validateParameter(valid_611460, JString, required = false,
                                 default = nil)
  if valid_611460 != nil:
    section.add "X-Amz-Credential", valid_611460
  var valid_611461 = header.getOrDefault("X-Amz-Security-Token")
  valid_611461 = validateParameter(valid_611461, JString, required = false,
                                 default = nil)
  if valid_611461 != nil:
    section.add "X-Amz-Security-Token", valid_611461
  var valid_611462 = header.getOrDefault("X-Amz-Algorithm")
  valid_611462 = validateParameter(valid_611462, JString, required = false,
                                 default = nil)
  if valid_611462 != nil:
    section.add "X-Amz-Algorithm", valid_611462
  var valid_611463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611463 = validateParameter(valid_611463, JString, required = false,
                                 default = nil)
  if valid_611463 != nil:
    section.add "X-Amz-SignedHeaders", valid_611463
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_611464 = formData.getOrDefault("DBSecurityGroupName")
  valid_611464 = validateParameter(valid_611464, JString, required = true,
                                 default = nil)
  if valid_611464 != nil:
    section.add "DBSecurityGroupName", valid_611464
  var valid_611465 = formData.getOrDefault("EC2SecurityGroupName")
  valid_611465 = validateParameter(valid_611465, JString, required = false,
                                 default = nil)
  if valid_611465 != nil:
    section.add "EC2SecurityGroupName", valid_611465
  var valid_611466 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_611466 = validateParameter(valid_611466, JString, required = false,
                                 default = nil)
  if valid_611466 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_611466
  var valid_611467 = formData.getOrDefault("EC2SecurityGroupId")
  valid_611467 = validateParameter(valid_611467, JString, required = false,
                                 default = nil)
  if valid_611467 != nil:
    section.add "EC2SecurityGroupId", valid_611467
  var valid_611468 = formData.getOrDefault("CIDRIP")
  valid_611468 = validateParameter(valid_611468, JString, required = false,
                                 default = nil)
  if valid_611468 != nil:
    section.add "CIDRIP", valid_611468
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611469: Call_PostAuthorizeDBSecurityGroupIngress_611452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_611469.validator(path, query, header, formData, body)
  let scheme = call_611469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611469.url(scheme.get, call_611469.host, call_611469.base,
                         call_611469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611469, url, valid)

proc call*(call_611470: Call_PostAuthorizeDBSecurityGroupIngress_611452;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611471 = newJObject()
  var formData_611472 = newJObject()
  add(formData_611472, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_611472, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_611472, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_611472, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_611472, "CIDRIP", newJString(CIDRIP))
  add(query_611471, "Action", newJString(Action))
  add(query_611471, "Version", newJString(Version))
  result = call_611470.call(nil, query_611471, nil, formData_611472, nil)

var postAuthorizeDBSecurityGroupIngress* = Call_PostAuthorizeDBSecurityGroupIngress_611452(
    name: "postAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_PostAuthorizeDBSecurityGroupIngress_611453, base: "/",
    url: url_PostAuthorizeDBSecurityGroupIngress_611454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeDBSecurityGroupIngress_611432 = ref object of OpenApiRestCall_610658
proc url_GetAuthorizeDBSecurityGroupIngress_611434(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeDBSecurityGroupIngress_611433(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  var valid_611435 = query.getOrDefault("EC2SecurityGroupName")
  valid_611435 = validateParameter(valid_611435, JString, required = false,
                                 default = nil)
  if valid_611435 != nil:
    section.add "EC2SecurityGroupName", valid_611435
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_611436 = query.getOrDefault("DBSecurityGroupName")
  valid_611436 = validateParameter(valid_611436, JString, required = true,
                                 default = nil)
  if valid_611436 != nil:
    section.add "DBSecurityGroupName", valid_611436
  var valid_611437 = query.getOrDefault("EC2SecurityGroupId")
  valid_611437 = validateParameter(valid_611437, JString, required = false,
                                 default = nil)
  if valid_611437 != nil:
    section.add "EC2SecurityGroupId", valid_611437
  var valid_611438 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_611438 = validateParameter(valid_611438, JString, required = false,
                                 default = nil)
  if valid_611438 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_611438
  var valid_611439 = query.getOrDefault("Action")
  valid_611439 = validateParameter(valid_611439, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_611439 != nil:
    section.add "Action", valid_611439
  var valid_611440 = query.getOrDefault("Version")
  valid_611440 = validateParameter(valid_611440, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611440 != nil:
    section.add "Version", valid_611440
  var valid_611441 = query.getOrDefault("CIDRIP")
  valid_611441 = validateParameter(valid_611441, JString, required = false,
                                 default = nil)
  if valid_611441 != nil:
    section.add "CIDRIP", valid_611441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611442 = header.getOrDefault("X-Amz-Signature")
  valid_611442 = validateParameter(valid_611442, JString, required = false,
                                 default = nil)
  if valid_611442 != nil:
    section.add "X-Amz-Signature", valid_611442
  var valid_611443 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611443 = validateParameter(valid_611443, JString, required = false,
                                 default = nil)
  if valid_611443 != nil:
    section.add "X-Amz-Content-Sha256", valid_611443
  var valid_611444 = header.getOrDefault("X-Amz-Date")
  valid_611444 = validateParameter(valid_611444, JString, required = false,
                                 default = nil)
  if valid_611444 != nil:
    section.add "X-Amz-Date", valid_611444
  var valid_611445 = header.getOrDefault("X-Amz-Credential")
  valid_611445 = validateParameter(valid_611445, JString, required = false,
                                 default = nil)
  if valid_611445 != nil:
    section.add "X-Amz-Credential", valid_611445
  var valid_611446 = header.getOrDefault("X-Amz-Security-Token")
  valid_611446 = validateParameter(valid_611446, JString, required = false,
                                 default = nil)
  if valid_611446 != nil:
    section.add "X-Amz-Security-Token", valid_611446
  var valid_611447 = header.getOrDefault("X-Amz-Algorithm")
  valid_611447 = validateParameter(valid_611447, JString, required = false,
                                 default = nil)
  if valid_611447 != nil:
    section.add "X-Amz-Algorithm", valid_611447
  var valid_611448 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611448 = validateParameter(valid_611448, JString, required = false,
                                 default = nil)
  if valid_611448 != nil:
    section.add "X-Amz-SignedHeaders", valid_611448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611449: Call_GetAuthorizeDBSecurityGroupIngress_611432;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_611449.validator(path, query, header, formData, body)
  let scheme = call_611449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611449.url(scheme.get, call_611449.host, call_611449.base,
                         call_611449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611449, url, valid)

proc call*(call_611450: Call_GetAuthorizeDBSecurityGroupIngress_611432;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  var query_611451 = newJObject()
  add(query_611451, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_611451, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_611451, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_611451, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_611451, "Action", newJString(Action))
  add(query_611451, "Version", newJString(Version))
  add(query_611451, "CIDRIP", newJString(CIDRIP))
  result = call_611450.call(nil, query_611451, nil, nil, nil)

var getAuthorizeDBSecurityGroupIngress* = Call_GetAuthorizeDBSecurityGroupIngress_611432(
    name: "getAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_GetAuthorizeDBSecurityGroupIngress_611433, base: "/",
    url: url_GetAuthorizeDBSecurityGroupIngress_611434,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBacktrackDBCluster_611492 = ref object of OpenApiRestCall_610658
proc url_PostBacktrackDBCluster_611494(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBacktrackDBCluster_611493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611495 = query.getOrDefault("Action")
  valid_611495 = validateParameter(valid_611495, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_611495 != nil:
    section.add "Action", valid_611495
  var valid_611496 = query.getOrDefault("Version")
  valid_611496 = validateParameter(valid_611496, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611496 != nil:
    section.add "Version", valid_611496
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611497 = header.getOrDefault("X-Amz-Signature")
  valid_611497 = validateParameter(valid_611497, JString, required = false,
                                 default = nil)
  if valid_611497 != nil:
    section.add "X-Amz-Signature", valid_611497
  var valid_611498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611498 = validateParameter(valid_611498, JString, required = false,
                                 default = nil)
  if valid_611498 != nil:
    section.add "X-Amz-Content-Sha256", valid_611498
  var valid_611499 = header.getOrDefault("X-Amz-Date")
  valid_611499 = validateParameter(valid_611499, JString, required = false,
                                 default = nil)
  if valid_611499 != nil:
    section.add "X-Amz-Date", valid_611499
  var valid_611500 = header.getOrDefault("X-Amz-Credential")
  valid_611500 = validateParameter(valid_611500, JString, required = false,
                                 default = nil)
  if valid_611500 != nil:
    section.add "X-Amz-Credential", valid_611500
  var valid_611501 = header.getOrDefault("X-Amz-Security-Token")
  valid_611501 = validateParameter(valid_611501, JString, required = false,
                                 default = nil)
  if valid_611501 != nil:
    section.add "X-Amz-Security-Token", valid_611501
  var valid_611502 = header.getOrDefault("X-Amz-Algorithm")
  valid_611502 = validateParameter(valid_611502, JString, required = false,
                                 default = nil)
  if valid_611502 != nil:
    section.add "X-Amz-Algorithm", valid_611502
  var valid_611503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611503 = validateParameter(valid_611503, JString, required = false,
                                 default = nil)
  if valid_611503 != nil:
    section.add "X-Amz-SignedHeaders", valid_611503
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  section = newJObject()
  var valid_611504 = formData.getOrDefault("Force")
  valid_611504 = validateParameter(valid_611504, JBool, required = false, default = nil)
  if valid_611504 != nil:
    section.add "Force", valid_611504
  var valid_611505 = formData.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_611505 = validateParameter(valid_611505, JBool, required = false, default = nil)
  if valid_611505 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_611505
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_611506 = formData.getOrDefault("DBClusterIdentifier")
  valid_611506 = validateParameter(valid_611506, JString, required = true,
                                 default = nil)
  if valid_611506 != nil:
    section.add "DBClusterIdentifier", valid_611506
  var valid_611507 = formData.getOrDefault("BacktrackTo")
  valid_611507 = validateParameter(valid_611507, JString, required = true,
                                 default = nil)
  if valid_611507 != nil:
    section.add "BacktrackTo", valid_611507
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611508: Call_PostBacktrackDBCluster_611492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611508.validator(path, query, header, formData, body)
  let scheme = call_611508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611508.url(scheme.get, call_611508.host, call_611508.base,
                         call_611508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611508, url, valid)

proc call*(call_611509: Call_PostBacktrackDBCluster_611492;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  var query_611510 = newJObject()
  var formData_611511 = newJObject()
  add(formData_611511, "Force", newJBool(Force))
  add(formData_611511, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_611510, "Action", newJString(Action))
  add(query_611510, "Version", newJString(Version))
  add(formData_611511, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_611511, "BacktrackTo", newJString(BacktrackTo))
  result = call_611509.call(nil, query_611510, nil, formData_611511, nil)

var postBacktrackDBCluster* = Call_PostBacktrackDBCluster_611492(
    name: "postBacktrackDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_PostBacktrackDBCluster_611493, base: "/",
    url: url_PostBacktrackDBCluster_611494, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBacktrackDBCluster_611473 = ref object of OpenApiRestCall_610658
proc url_GetBacktrackDBCluster_611475(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBacktrackDBCluster_611474(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: JString (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_611476 = query.getOrDefault("DBClusterIdentifier")
  valid_611476 = validateParameter(valid_611476, JString, required = true,
                                 default = nil)
  if valid_611476 != nil:
    section.add "DBClusterIdentifier", valid_611476
  var valid_611477 = query.getOrDefault("BacktrackTo")
  valid_611477 = validateParameter(valid_611477, JString, required = true,
                                 default = nil)
  if valid_611477 != nil:
    section.add "BacktrackTo", valid_611477
  var valid_611478 = query.getOrDefault("Force")
  valid_611478 = validateParameter(valid_611478, JBool, required = false, default = nil)
  if valid_611478 != nil:
    section.add "Force", valid_611478
  var valid_611479 = query.getOrDefault("Action")
  valid_611479 = validateParameter(valid_611479, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_611479 != nil:
    section.add "Action", valid_611479
  var valid_611480 = query.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_611480 = validateParameter(valid_611480, JBool, required = false, default = nil)
  if valid_611480 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_611480
  var valid_611481 = query.getOrDefault("Version")
  valid_611481 = validateParameter(valid_611481, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611481 != nil:
    section.add "Version", valid_611481
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611482 = header.getOrDefault("X-Amz-Signature")
  valid_611482 = validateParameter(valid_611482, JString, required = false,
                                 default = nil)
  if valid_611482 != nil:
    section.add "X-Amz-Signature", valid_611482
  var valid_611483 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611483 = validateParameter(valid_611483, JString, required = false,
                                 default = nil)
  if valid_611483 != nil:
    section.add "X-Amz-Content-Sha256", valid_611483
  var valid_611484 = header.getOrDefault("X-Amz-Date")
  valid_611484 = validateParameter(valid_611484, JString, required = false,
                                 default = nil)
  if valid_611484 != nil:
    section.add "X-Amz-Date", valid_611484
  var valid_611485 = header.getOrDefault("X-Amz-Credential")
  valid_611485 = validateParameter(valid_611485, JString, required = false,
                                 default = nil)
  if valid_611485 != nil:
    section.add "X-Amz-Credential", valid_611485
  var valid_611486 = header.getOrDefault("X-Amz-Security-Token")
  valid_611486 = validateParameter(valid_611486, JString, required = false,
                                 default = nil)
  if valid_611486 != nil:
    section.add "X-Amz-Security-Token", valid_611486
  var valid_611487 = header.getOrDefault("X-Amz-Algorithm")
  valid_611487 = validateParameter(valid_611487, JString, required = false,
                                 default = nil)
  if valid_611487 != nil:
    section.add "X-Amz-Algorithm", valid_611487
  var valid_611488 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611488 = validateParameter(valid_611488, JString, required = false,
                                 default = nil)
  if valid_611488 != nil:
    section.add "X-Amz-SignedHeaders", valid_611488
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611489: Call_GetBacktrackDBCluster_611473; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611489.validator(path, query, header, formData, body)
  let scheme = call_611489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611489.url(scheme.get, call_611489.host, call_611489.base,
                         call_611489.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611489, url, valid)

proc call*(call_611490: Call_GetBacktrackDBCluster_611473;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          Action: string = "BacktrackDBCluster";
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: string (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: string (required)
  var query_611491 = newJObject()
  add(query_611491, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_611491, "BacktrackTo", newJString(BacktrackTo))
  add(query_611491, "Force", newJBool(Force))
  add(query_611491, "Action", newJString(Action))
  add(query_611491, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_611491, "Version", newJString(Version))
  result = call_611490.call(nil, query_611491, nil, nil, nil)

var getBacktrackDBCluster* = Call_GetBacktrackDBCluster_611473(
    name: "getBacktrackDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_GetBacktrackDBCluster_611474, base: "/",
    url: url_GetBacktrackDBCluster_611475, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCancelExportTask_611528 = ref object of OpenApiRestCall_610658
proc url_PostCancelExportTask_611530(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCancelExportTask_611529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611531 = query.getOrDefault("Action")
  valid_611531 = validateParameter(valid_611531, JString, required = true,
                                 default = newJString("CancelExportTask"))
  if valid_611531 != nil:
    section.add "Action", valid_611531
  var valid_611532 = query.getOrDefault("Version")
  valid_611532 = validateParameter(valid_611532, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611532 != nil:
    section.add "Version", valid_611532
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611533 = header.getOrDefault("X-Amz-Signature")
  valid_611533 = validateParameter(valid_611533, JString, required = false,
                                 default = nil)
  if valid_611533 != nil:
    section.add "X-Amz-Signature", valid_611533
  var valid_611534 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611534 = validateParameter(valid_611534, JString, required = false,
                                 default = nil)
  if valid_611534 != nil:
    section.add "X-Amz-Content-Sha256", valid_611534
  var valid_611535 = header.getOrDefault("X-Amz-Date")
  valid_611535 = validateParameter(valid_611535, JString, required = false,
                                 default = nil)
  if valid_611535 != nil:
    section.add "X-Amz-Date", valid_611535
  var valid_611536 = header.getOrDefault("X-Amz-Credential")
  valid_611536 = validateParameter(valid_611536, JString, required = false,
                                 default = nil)
  if valid_611536 != nil:
    section.add "X-Amz-Credential", valid_611536
  var valid_611537 = header.getOrDefault("X-Amz-Security-Token")
  valid_611537 = validateParameter(valid_611537, JString, required = false,
                                 default = nil)
  if valid_611537 != nil:
    section.add "X-Amz-Security-Token", valid_611537
  var valid_611538 = header.getOrDefault("X-Amz-Algorithm")
  valid_611538 = validateParameter(valid_611538, JString, required = false,
                                 default = nil)
  if valid_611538 != nil:
    section.add "X-Amz-Algorithm", valid_611538
  var valid_611539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611539 = validateParameter(valid_611539, JString, required = false,
                                 default = nil)
  if valid_611539 != nil:
    section.add "X-Amz-SignedHeaders", valid_611539
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExportTaskIdentifier: JString (required)
  ##                       : The identifier of the snapshot export task to cancel.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ExportTaskIdentifier` field"
  var valid_611540 = formData.getOrDefault("ExportTaskIdentifier")
  valid_611540 = validateParameter(valid_611540, JString, required = true,
                                 default = nil)
  if valid_611540 != nil:
    section.add "ExportTaskIdentifier", valid_611540
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611541: Call_PostCancelExportTask_611528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  let valid = call_611541.validator(path, query, header, formData, body)
  let scheme = call_611541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611541.url(scheme.get, call_611541.host, call_611541.base,
                         call_611541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611541, url, valid)

proc call*(call_611542: Call_PostCancelExportTask_611528;
          ExportTaskIdentifier: string; Action: string = "CancelExportTask";
          Version: string = "2014-10-31"): Recallable =
  ## postCancelExportTask
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ##   ExportTaskIdentifier: string (required)
  ##                       : The identifier of the snapshot export task to cancel.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611543 = newJObject()
  var formData_611544 = newJObject()
  add(formData_611544, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(query_611543, "Action", newJString(Action))
  add(query_611543, "Version", newJString(Version))
  result = call_611542.call(nil, query_611543, nil, formData_611544, nil)

var postCancelExportTask* = Call_PostCancelExportTask_611528(
    name: "postCancelExportTask", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CancelExportTask",
    validator: validate_PostCancelExportTask_611529, base: "/",
    url: url_PostCancelExportTask_611530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCancelExportTask_611512 = ref object of OpenApiRestCall_610658
proc url_GetCancelExportTask_611514(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCancelExportTask_611513(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExportTaskIdentifier: JString (required)
  ##                       : The identifier of the snapshot export task to cancel.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ExportTaskIdentifier` field"
  var valid_611515 = query.getOrDefault("ExportTaskIdentifier")
  valid_611515 = validateParameter(valid_611515, JString, required = true,
                                 default = nil)
  if valid_611515 != nil:
    section.add "ExportTaskIdentifier", valid_611515
  var valid_611516 = query.getOrDefault("Action")
  valid_611516 = validateParameter(valid_611516, JString, required = true,
                                 default = newJString("CancelExportTask"))
  if valid_611516 != nil:
    section.add "Action", valid_611516
  var valid_611517 = query.getOrDefault("Version")
  valid_611517 = validateParameter(valid_611517, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611517 != nil:
    section.add "Version", valid_611517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611518 = header.getOrDefault("X-Amz-Signature")
  valid_611518 = validateParameter(valid_611518, JString, required = false,
                                 default = nil)
  if valid_611518 != nil:
    section.add "X-Amz-Signature", valid_611518
  var valid_611519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611519 = validateParameter(valid_611519, JString, required = false,
                                 default = nil)
  if valid_611519 != nil:
    section.add "X-Amz-Content-Sha256", valid_611519
  var valid_611520 = header.getOrDefault("X-Amz-Date")
  valid_611520 = validateParameter(valid_611520, JString, required = false,
                                 default = nil)
  if valid_611520 != nil:
    section.add "X-Amz-Date", valid_611520
  var valid_611521 = header.getOrDefault("X-Amz-Credential")
  valid_611521 = validateParameter(valid_611521, JString, required = false,
                                 default = nil)
  if valid_611521 != nil:
    section.add "X-Amz-Credential", valid_611521
  var valid_611522 = header.getOrDefault("X-Amz-Security-Token")
  valid_611522 = validateParameter(valid_611522, JString, required = false,
                                 default = nil)
  if valid_611522 != nil:
    section.add "X-Amz-Security-Token", valid_611522
  var valid_611523 = header.getOrDefault("X-Amz-Algorithm")
  valid_611523 = validateParameter(valid_611523, JString, required = false,
                                 default = nil)
  if valid_611523 != nil:
    section.add "X-Amz-Algorithm", valid_611523
  var valid_611524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611524 = validateParameter(valid_611524, JString, required = false,
                                 default = nil)
  if valid_611524 != nil:
    section.add "X-Amz-SignedHeaders", valid_611524
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611525: Call_GetCancelExportTask_611512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  let valid = call_611525.validator(path, query, header, formData, body)
  let scheme = call_611525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611525.url(scheme.get, call_611525.host, call_611525.base,
                         call_611525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611525, url, valid)

proc call*(call_611526: Call_GetCancelExportTask_611512;
          ExportTaskIdentifier: string; Action: string = "CancelExportTask";
          Version: string = "2014-10-31"): Recallable =
  ## getCancelExportTask
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ##   ExportTaskIdentifier: string (required)
  ##                       : The identifier of the snapshot export task to cancel.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611527 = newJObject()
  add(query_611527, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(query_611527, "Action", newJString(Action))
  add(query_611527, "Version", newJString(Version))
  result = call_611526.call(nil, query_611527, nil, nil, nil)

var getCancelExportTask* = Call_GetCancelExportTask_611512(
    name: "getCancelExportTask", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CancelExportTask",
    validator: validate_GetCancelExportTask_611513, base: "/",
    url: url_GetCancelExportTask_611514, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_611564 = ref object of OpenApiRestCall_610658
proc url_PostCopyDBClusterParameterGroup_611566(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_611565(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611567 = query.getOrDefault("Action")
  valid_611567 = validateParameter(valid_611567, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_611567 != nil:
    section.add "Action", valid_611567
  var valid_611568 = query.getOrDefault("Version")
  valid_611568 = validateParameter(valid_611568, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611568 != nil:
    section.add "Version", valid_611568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611569 = header.getOrDefault("X-Amz-Signature")
  valid_611569 = validateParameter(valid_611569, JString, required = false,
                                 default = nil)
  if valid_611569 != nil:
    section.add "X-Amz-Signature", valid_611569
  var valid_611570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611570 = validateParameter(valid_611570, JString, required = false,
                                 default = nil)
  if valid_611570 != nil:
    section.add "X-Amz-Content-Sha256", valid_611570
  var valid_611571 = header.getOrDefault("X-Amz-Date")
  valid_611571 = validateParameter(valid_611571, JString, required = false,
                                 default = nil)
  if valid_611571 != nil:
    section.add "X-Amz-Date", valid_611571
  var valid_611572 = header.getOrDefault("X-Amz-Credential")
  valid_611572 = validateParameter(valid_611572, JString, required = false,
                                 default = nil)
  if valid_611572 != nil:
    section.add "X-Amz-Credential", valid_611572
  var valid_611573 = header.getOrDefault("X-Amz-Security-Token")
  valid_611573 = validateParameter(valid_611573, JString, required = false,
                                 default = nil)
  if valid_611573 != nil:
    section.add "X-Amz-Security-Token", valid_611573
  var valid_611574 = header.getOrDefault("X-Amz-Algorithm")
  valid_611574 = validateParameter(valid_611574, JString, required = false,
                                 default = nil)
  if valid_611574 != nil:
    section.add "X-Amz-Algorithm", valid_611574
  var valid_611575 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611575 = validateParameter(valid_611575, JString, required = false,
                                 default = nil)
  if valid_611575 != nil:
    section.add "X-Amz-SignedHeaders", valid_611575
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupIdentifier` field"
  var valid_611576 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_611576 = validateParameter(valid_611576, JString, required = true,
                                 default = nil)
  if valid_611576 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_611576
  var valid_611577 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_611577 = validateParameter(valid_611577, JString, required = true,
                                 default = nil)
  if valid_611577 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_611577
  var valid_611578 = formData.getOrDefault("Tags")
  valid_611578 = validateParameter(valid_611578, JArray, required = false,
                                 default = nil)
  if valid_611578 != nil:
    section.add "Tags", valid_611578
  var valid_611579 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_611579 = validateParameter(valid_611579, JString, required = true,
                                 default = nil)
  if valid_611579 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_611579
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611580: Call_PostCopyDBClusterParameterGroup_611564;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611580.validator(path, query, header, formData, body)
  let scheme = call_611580.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611580.url(scheme.get, call_611580.host, call_611580.base,
                         call_611580.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611580, url, valid)

proc call*(call_611581: Call_PostCopyDBClusterParameterGroup_611564;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          Action: string = "CopyDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  var query_611582 = newJObject()
  var formData_611583 = newJObject()
  add(formData_611583, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(formData_611583, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_611582, "Action", newJString(Action))
  if Tags != nil:
    formData_611583.add "Tags", Tags
  add(query_611582, "Version", newJString(Version))
  add(formData_611583, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  result = call_611581.call(nil, query_611582, nil, formData_611583, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_611564(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_611565, base: "/",
    url: url_PostCopyDBClusterParameterGroup_611566,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_611545 = ref object of OpenApiRestCall_610658
proc url_GetCopyDBClusterParameterGroup_611547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_611546(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: JString (required)
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_611548 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_611548 = validateParameter(valid_611548, JString, required = true,
                                 default = nil)
  if valid_611548 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_611548
  var valid_611549 = query.getOrDefault("Tags")
  valid_611549 = validateParameter(valid_611549, JArray, required = false,
                                 default = nil)
  if valid_611549 != nil:
    section.add "Tags", valid_611549
  var valid_611550 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_611550 = validateParameter(valid_611550, JString, required = true,
                                 default = nil)
  if valid_611550 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_611550
  var valid_611551 = query.getOrDefault("Action")
  valid_611551 = validateParameter(valid_611551, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_611551 != nil:
    section.add "Action", valid_611551
  var valid_611552 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_611552 = validateParameter(valid_611552, JString, required = true,
                                 default = nil)
  if valid_611552 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_611552
  var valid_611553 = query.getOrDefault("Version")
  valid_611553 = validateParameter(valid_611553, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611553 != nil:
    section.add "Version", valid_611553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611554 = header.getOrDefault("X-Amz-Signature")
  valid_611554 = validateParameter(valid_611554, JString, required = false,
                                 default = nil)
  if valid_611554 != nil:
    section.add "X-Amz-Signature", valid_611554
  var valid_611555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611555 = validateParameter(valid_611555, JString, required = false,
                                 default = nil)
  if valid_611555 != nil:
    section.add "X-Amz-Content-Sha256", valid_611555
  var valid_611556 = header.getOrDefault("X-Amz-Date")
  valid_611556 = validateParameter(valid_611556, JString, required = false,
                                 default = nil)
  if valid_611556 != nil:
    section.add "X-Amz-Date", valid_611556
  var valid_611557 = header.getOrDefault("X-Amz-Credential")
  valid_611557 = validateParameter(valid_611557, JString, required = false,
                                 default = nil)
  if valid_611557 != nil:
    section.add "X-Amz-Credential", valid_611557
  var valid_611558 = header.getOrDefault("X-Amz-Security-Token")
  valid_611558 = validateParameter(valid_611558, JString, required = false,
                                 default = nil)
  if valid_611558 != nil:
    section.add "X-Amz-Security-Token", valid_611558
  var valid_611559 = header.getOrDefault("X-Amz-Algorithm")
  valid_611559 = validateParameter(valid_611559, JString, required = false,
                                 default = nil)
  if valid_611559 != nil:
    section.add "X-Amz-Algorithm", valid_611559
  var valid_611560 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611560 = validateParameter(valid_611560, JString, required = false,
                                 default = nil)
  if valid_611560 != nil:
    section.add "X-Amz-SignedHeaders", valid_611560
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611561: Call_GetCopyDBClusterParameterGroup_611545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611561.validator(path, query, header, formData, body)
  let scheme = call_611561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611561.url(scheme.get, call_611561.host, call_611561.base,
                         call_611561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611561, url, valid)

proc call*(call_611562: Call_GetCopyDBClusterParameterGroup_611545;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_611563 = newJObject()
  add(query_611563, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    query_611563.add "Tags", Tags
  add(query_611563, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_611563, "Action", newJString(Action))
  add(query_611563, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_611563, "Version", newJString(Version))
  result = call_611562.call(nil, query_611563, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_611545(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_611546, base: "/",
    url: url_GetCopyDBClusterParameterGroup_611547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_611606 = ref object of OpenApiRestCall_610658
proc url_PostCopyDBClusterSnapshot_611608(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterSnapshot_611607(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611609 = query.getOrDefault("Action")
  valid_611609 = validateParameter(valid_611609, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_611609 != nil:
    section.add "Action", valid_611609
  var valid_611610 = query.getOrDefault("Version")
  valid_611610 = validateParameter(valid_611610, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611610 != nil:
    section.add "Version", valid_611610
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611611 = header.getOrDefault("X-Amz-Signature")
  valid_611611 = validateParameter(valid_611611, JString, required = false,
                                 default = nil)
  if valid_611611 != nil:
    section.add "X-Amz-Signature", valid_611611
  var valid_611612 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611612 = validateParameter(valid_611612, JString, required = false,
                                 default = nil)
  if valid_611612 != nil:
    section.add "X-Amz-Content-Sha256", valid_611612
  var valid_611613 = header.getOrDefault("X-Amz-Date")
  valid_611613 = validateParameter(valid_611613, JString, required = false,
                                 default = nil)
  if valid_611613 != nil:
    section.add "X-Amz-Date", valid_611613
  var valid_611614 = header.getOrDefault("X-Amz-Credential")
  valid_611614 = validateParameter(valid_611614, JString, required = false,
                                 default = nil)
  if valid_611614 != nil:
    section.add "X-Amz-Credential", valid_611614
  var valid_611615 = header.getOrDefault("X-Amz-Security-Token")
  valid_611615 = validateParameter(valid_611615, JString, required = false,
                                 default = nil)
  if valid_611615 != nil:
    section.add "X-Amz-Security-Token", valid_611615
  var valid_611616 = header.getOrDefault("X-Amz-Algorithm")
  valid_611616 = validateParameter(valid_611616, JString, required = false,
                                 default = nil)
  if valid_611616 != nil:
    section.add "X-Amz-Algorithm", valid_611616
  var valid_611617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611617 = validateParameter(valid_611617, JString, required = false,
                                 default = nil)
  if valid_611617 != nil:
    section.add "X-Amz-SignedHeaders", valid_611617
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_611618 = formData.getOrDefault("SourceRegion")
  valid_611618 = validateParameter(valid_611618, JString, required = false,
                                 default = nil)
  if valid_611618 != nil:
    section.add "SourceRegion", valid_611618
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_611619 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_611619 = validateParameter(valid_611619, JString, required = true,
                                 default = nil)
  if valid_611619 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_611619
  var valid_611620 = formData.getOrDefault("KmsKeyId")
  valid_611620 = validateParameter(valid_611620, JString, required = false,
                                 default = nil)
  if valid_611620 != nil:
    section.add "KmsKeyId", valid_611620
  var valid_611621 = formData.getOrDefault("PreSignedUrl")
  valid_611621 = validateParameter(valid_611621, JString, required = false,
                                 default = nil)
  if valid_611621 != nil:
    section.add "PreSignedUrl", valid_611621
  var valid_611622 = formData.getOrDefault("CopyTags")
  valid_611622 = validateParameter(valid_611622, JBool, required = false, default = nil)
  if valid_611622 != nil:
    section.add "CopyTags", valid_611622
  var valid_611623 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_611623 = validateParameter(valid_611623, JString, required = true,
                                 default = nil)
  if valid_611623 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_611623
  var valid_611624 = formData.getOrDefault("Tags")
  valid_611624 = validateParameter(valid_611624, JArray, required = false,
                                 default = nil)
  if valid_611624 != nil:
    section.add "Tags", valid_611624
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611625: Call_PostCopyDBClusterSnapshot_611606; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611625.validator(path, query, header, formData, body)
  let scheme = call_611625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611625.url(scheme.get, call_611625.host, call_611625.base,
                         call_611625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611625, url, valid)

proc call*(call_611626: Call_PostCopyDBClusterSnapshot_611606;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; SourceRegion: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_611627 = newJObject()
  var formData_611628 = newJObject()
  add(formData_611628, "SourceRegion", newJString(SourceRegion))
  add(formData_611628, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_611628, "KmsKeyId", newJString(KmsKeyId))
  add(formData_611628, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_611628, "CopyTags", newJBool(CopyTags))
  add(formData_611628, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_611627, "Action", newJString(Action))
  if Tags != nil:
    formData_611628.add "Tags", Tags
  add(query_611627, "Version", newJString(Version))
  result = call_611626.call(nil, query_611627, nil, formData_611628, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_611606(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_611607, base: "/",
    url: url_PostCopyDBClusterSnapshot_611608,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_611584 = ref object of OpenApiRestCall_610658
proc url_GetCopyDBClusterSnapshot_611586(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterSnapshot_611585(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: JString (required)
  section = newJObject()
  var valid_611587 = query.getOrDefault("Tags")
  valid_611587 = validateParameter(valid_611587, JArray, required = false,
                                 default = nil)
  if valid_611587 != nil:
    section.add "Tags", valid_611587
  var valid_611588 = query.getOrDefault("KmsKeyId")
  valid_611588 = validateParameter(valid_611588, JString, required = false,
                                 default = nil)
  if valid_611588 != nil:
    section.add "KmsKeyId", valid_611588
  var valid_611589 = query.getOrDefault("PreSignedUrl")
  valid_611589 = validateParameter(valid_611589, JString, required = false,
                                 default = nil)
  if valid_611589 != nil:
    section.add "PreSignedUrl", valid_611589
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_611590 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_611590 = validateParameter(valid_611590, JString, required = true,
                                 default = nil)
  if valid_611590 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_611590
  var valid_611591 = query.getOrDefault("SourceRegion")
  valid_611591 = validateParameter(valid_611591, JString, required = false,
                                 default = nil)
  if valid_611591 != nil:
    section.add "SourceRegion", valid_611591
  var valid_611592 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_611592 = validateParameter(valid_611592, JString, required = true,
                                 default = nil)
  if valid_611592 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_611592
  var valid_611593 = query.getOrDefault("Action")
  valid_611593 = validateParameter(valid_611593, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_611593 != nil:
    section.add "Action", valid_611593
  var valid_611594 = query.getOrDefault("CopyTags")
  valid_611594 = validateParameter(valid_611594, JBool, required = false, default = nil)
  if valid_611594 != nil:
    section.add "CopyTags", valid_611594
  var valid_611595 = query.getOrDefault("Version")
  valid_611595 = validateParameter(valid_611595, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611595 != nil:
    section.add "Version", valid_611595
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611596 = header.getOrDefault("X-Amz-Signature")
  valid_611596 = validateParameter(valid_611596, JString, required = false,
                                 default = nil)
  if valid_611596 != nil:
    section.add "X-Amz-Signature", valid_611596
  var valid_611597 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611597 = validateParameter(valid_611597, JString, required = false,
                                 default = nil)
  if valid_611597 != nil:
    section.add "X-Amz-Content-Sha256", valid_611597
  var valid_611598 = header.getOrDefault("X-Amz-Date")
  valid_611598 = validateParameter(valid_611598, JString, required = false,
                                 default = nil)
  if valid_611598 != nil:
    section.add "X-Amz-Date", valid_611598
  var valid_611599 = header.getOrDefault("X-Amz-Credential")
  valid_611599 = validateParameter(valid_611599, JString, required = false,
                                 default = nil)
  if valid_611599 != nil:
    section.add "X-Amz-Credential", valid_611599
  var valid_611600 = header.getOrDefault("X-Amz-Security-Token")
  valid_611600 = validateParameter(valid_611600, JString, required = false,
                                 default = nil)
  if valid_611600 != nil:
    section.add "X-Amz-Security-Token", valid_611600
  var valid_611601 = header.getOrDefault("X-Amz-Algorithm")
  valid_611601 = validateParameter(valid_611601, JString, required = false,
                                 default = nil)
  if valid_611601 != nil:
    section.add "X-Amz-Algorithm", valid_611601
  var valid_611602 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611602 = validateParameter(valid_611602, JString, required = false,
                                 default = nil)
  if valid_611602 != nil:
    section.add "X-Amz-SignedHeaders", valid_611602
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611603: Call_GetCopyDBClusterSnapshot_611584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611603.validator(path, query, header, formData, body)
  let scheme = call_611603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611603.url(scheme.get, call_611603.host, call_611603.base,
                         call_611603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611603, url, valid)

proc call*(call_611604: Call_GetCopyDBClusterSnapshot_611584;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; Tags: JsonNode = nil;
          KmsKeyId: string = ""; PreSignedUrl: string = ""; SourceRegion: string = "";
          Action: string = "CopyDBClusterSnapshot"; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: string (required)
  var query_611605 = newJObject()
  if Tags != nil:
    query_611605.add "Tags", Tags
  add(query_611605, "KmsKeyId", newJString(KmsKeyId))
  add(query_611605, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_611605, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_611605, "SourceRegion", newJString(SourceRegion))
  add(query_611605, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_611605, "Action", newJString(Action))
  add(query_611605, "CopyTags", newJBool(CopyTags))
  add(query_611605, "Version", newJString(Version))
  result = call_611604.call(nil, query_611605, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_611584(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_611585, base: "/",
    url: url_GetCopyDBClusterSnapshot_611586, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_611648 = ref object of OpenApiRestCall_610658
proc url_PostCopyDBParameterGroup_611650(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBParameterGroup_611649(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611651 = query.getOrDefault("Action")
  valid_611651 = validateParameter(valid_611651, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_611651 != nil:
    section.add "Action", valid_611651
  var valid_611652 = query.getOrDefault("Version")
  valid_611652 = validateParameter(valid_611652, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611652 != nil:
    section.add "Version", valid_611652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611653 = header.getOrDefault("X-Amz-Signature")
  valid_611653 = validateParameter(valid_611653, JString, required = false,
                                 default = nil)
  if valid_611653 != nil:
    section.add "X-Amz-Signature", valid_611653
  var valid_611654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611654 = validateParameter(valid_611654, JString, required = false,
                                 default = nil)
  if valid_611654 != nil:
    section.add "X-Amz-Content-Sha256", valid_611654
  var valid_611655 = header.getOrDefault("X-Amz-Date")
  valid_611655 = validateParameter(valid_611655, JString, required = false,
                                 default = nil)
  if valid_611655 != nil:
    section.add "X-Amz-Date", valid_611655
  var valid_611656 = header.getOrDefault("X-Amz-Credential")
  valid_611656 = validateParameter(valid_611656, JString, required = false,
                                 default = nil)
  if valid_611656 != nil:
    section.add "X-Amz-Credential", valid_611656
  var valid_611657 = header.getOrDefault("X-Amz-Security-Token")
  valid_611657 = validateParameter(valid_611657, JString, required = false,
                                 default = nil)
  if valid_611657 != nil:
    section.add "X-Amz-Security-Token", valid_611657
  var valid_611658 = header.getOrDefault("X-Amz-Algorithm")
  valid_611658 = validateParameter(valid_611658, JString, required = false,
                                 default = nil)
  if valid_611658 != nil:
    section.add "X-Amz-Algorithm", valid_611658
  var valid_611659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611659 = validateParameter(valid_611659, JString, required = false,
                                 default = nil)
  if valid_611659 != nil:
    section.add "X-Amz-SignedHeaders", valid_611659
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_611660 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_611660 = validateParameter(valid_611660, JString, required = true,
                                 default = nil)
  if valid_611660 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_611660
  var valid_611661 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_611661 = validateParameter(valid_611661, JString, required = true,
                                 default = nil)
  if valid_611661 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_611661
  var valid_611662 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_611662 = validateParameter(valid_611662, JString, required = true,
                                 default = nil)
  if valid_611662 != nil:
    section.add "TargetDBParameterGroupDescription", valid_611662
  var valid_611663 = formData.getOrDefault("Tags")
  valid_611663 = validateParameter(valid_611663, JArray, required = false,
                                 default = nil)
  if valid_611663 != nil:
    section.add "Tags", valid_611663
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611664: Call_PostCopyDBParameterGroup_611648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_611664.validator(path, query, header, formData, body)
  let scheme = call_611664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611664.url(scheme.get, call_611664.host, call_611664.base,
                         call_611664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611664, url, valid)

proc call*(call_611665: Call_PostCopyDBParameterGroup_611648;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          Action: string = "CopyDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_611666 = newJObject()
  var formData_611667 = newJObject()
  add(formData_611667, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(formData_611667, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(formData_611667, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_611666, "Action", newJString(Action))
  if Tags != nil:
    formData_611667.add "Tags", Tags
  add(query_611666, "Version", newJString(Version))
  result = call_611665.call(nil, query_611666, nil, formData_611667, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_611648(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_611649, base: "/",
    url: url_PostCopyDBParameterGroup_611650, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_611629 = ref object of OpenApiRestCall_610658
proc url_GetCopyDBParameterGroup_611631(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBParameterGroup_611630(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_611632 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_611632 = validateParameter(valid_611632, JString, required = true,
                                 default = nil)
  if valid_611632 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_611632
  var valid_611633 = query.getOrDefault("Tags")
  valid_611633 = validateParameter(valid_611633, JArray, required = false,
                                 default = nil)
  if valid_611633 != nil:
    section.add "Tags", valid_611633
  var valid_611634 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_611634 = validateParameter(valid_611634, JString, required = true,
                                 default = nil)
  if valid_611634 != nil:
    section.add "TargetDBParameterGroupDescription", valid_611634
  var valid_611635 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_611635 = validateParameter(valid_611635, JString, required = true,
                                 default = nil)
  if valid_611635 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_611635
  var valid_611636 = query.getOrDefault("Action")
  valid_611636 = validateParameter(valid_611636, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_611636 != nil:
    section.add "Action", valid_611636
  var valid_611637 = query.getOrDefault("Version")
  valid_611637 = validateParameter(valid_611637, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611637 != nil:
    section.add "Version", valid_611637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611638 = header.getOrDefault("X-Amz-Signature")
  valid_611638 = validateParameter(valid_611638, JString, required = false,
                                 default = nil)
  if valid_611638 != nil:
    section.add "X-Amz-Signature", valid_611638
  var valid_611639 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611639 = validateParameter(valid_611639, JString, required = false,
                                 default = nil)
  if valid_611639 != nil:
    section.add "X-Amz-Content-Sha256", valid_611639
  var valid_611640 = header.getOrDefault("X-Amz-Date")
  valid_611640 = validateParameter(valid_611640, JString, required = false,
                                 default = nil)
  if valid_611640 != nil:
    section.add "X-Amz-Date", valid_611640
  var valid_611641 = header.getOrDefault("X-Amz-Credential")
  valid_611641 = validateParameter(valid_611641, JString, required = false,
                                 default = nil)
  if valid_611641 != nil:
    section.add "X-Amz-Credential", valid_611641
  var valid_611642 = header.getOrDefault("X-Amz-Security-Token")
  valid_611642 = validateParameter(valid_611642, JString, required = false,
                                 default = nil)
  if valid_611642 != nil:
    section.add "X-Amz-Security-Token", valid_611642
  var valid_611643 = header.getOrDefault("X-Amz-Algorithm")
  valid_611643 = validateParameter(valid_611643, JString, required = false,
                                 default = nil)
  if valid_611643 != nil:
    section.add "X-Amz-Algorithm", valid_611643
  var valid_611644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611644 = validateParameter(valid_611644, JString, required = false,
                                 default = nil)
  if valid_611644 != nil:
    section.add "X-Amz-SignedHeaders", valid_611644
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611645: Call_GetCopyDBParameterGroup_611629; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_611645.validator(path, query, header, formData, body)
  let scheme = call_611645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611645.url(scheme.get, call_611645.host, call_611645.base,
                         call_611645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611645, url, valid)

proc call*(call_611646: Call_GetCopyDBParameterGroup_611629;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611647 = newJObject()
  add(query_611647, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  if Tags != nil:
    query_611647.add "Tags", Tags
  add(query_611647, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_611647, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(query_611647, "Action", newJString(Action))
  add(query_611647, "Version", newJString(Version))
  result = call_611646.call(nil, query_611647, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_611629(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_611630, base: "/",
    url: url_GetCopyDBParameterGroup_611631, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBSnapshot_611691 = ref object of OpenApiRestCall_610658
proc url_PostCopyDBSnapshot_611693(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBSnapshot_611692(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611694 = query.getOrDefault("Action")
  valid_611694 = validateParameter(valid_611694, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_611694 != nil:
    section.add "Action", valid_611694
  var valid_611695 = query.getOrDefault("Version")
  valid_611695 = validateParameter(valid_611695, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611695 != nil:
    section.add "Version", valid_611695
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611696 = header.getOrDefault("X-Amz-Signature")
  valid_611696 = validateParameter(valid_611696, JString, required = false,
                                 default = nil)
  if valid_611696 != nil:
    section.add "X-Amz-Signature", valid_611696
  var valid_611697 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611697 = validateParameter(valid_611697, JString, required = false,
                                 default = nil)
  if valid_611697 != nil:
    section.add "X-Amz-Content-Sha256", valid_611697
  var valid_611698 = header.getOrDefault("X-Amz-Date")
  valid_611698 = validateParameter(valid_611698, JString, required = false,
                                 default = nil)
  if valid_611698 != nil:
    section.add "X-Amz-Date", valid_611698
  var valid_611699 = header.getOrDefault("X-Amz-Credential")
  valid_611699 = validateParameter(valid_611699, JString, required = false,
                                 default = nil)
  if valid_611699 != nil:
    section.add "X-Amz-Credential", valid_611699
  var valid_611700 = header.getOrDefault("X-Amz-Security-Token")
  valid_611700 = validateParameter(valid_611700, JString, required = false,
                                 default = nil)
  if valid_611700 != nil:
    section.add "X-Amz-Security-Token", valid_611700
  var valid_611701 = header.getOrDefault("X-Amz-Algorithm")
  valid_611701 = validateParameter(valid_611701, JString, required = false,
                                 default = nil)
  if valid_611701 != nil:
    section.add "X-Amz-Algorithm", valid_611701
  var valid_611702 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611702 = validateParameter(valid_611702, JString, required = false,
                                 default = nil)
  if valid_611702 != nil:
    section.add "X-Amz-SignedHeaders", valid_611702
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_611703 = formData.getOrDefault("SourceRegion")
  valid_611703 = validateParameter(valid_611703, JString, required = false,
                                 default = nil)
  if valid_611703 != nil:
    section.add "SourceRegion", valid_611703
  var valid_611704 = formData.getOrDefault("KmsKeyId")
  valid_611704 = validateParameter(valid_611704, JString, required = false,
                                 default = nil)
  if valid_611704 != nil:
    section.add "KmsKeyId", valid_611704
  assert formData != nil, "formData argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_611705 = formData.getOrDefault("SourceDBSnapshotIdentifier")
  valid_611705 = validateParameter(valid_611705, JString, required = true,
                                 default = nil)
  if valid_611705 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_611705
  var valid_611706 = formData.getOrDefault("CopyTags")
  valid_611706 = validateParameter(valid_611706, JBool, required = false, default = nil)
  if valid_611706 != nil:
    section.add "CopyTags", valid_611706
  var valid_611707 = formData.getOrDefault("PreSignedUrl")
  valid_611707 = validateParameter(valid_611707, JString, required = false,
                                 default = nil)
  if valid_611707 != nil:
    section.add "PreSignedUrl", valid_611707
  var valid_611708 = formData.getOrDefault("Tags")
  valid_611708 = validateParameter(valid_611708, JArray, required = false,
                                 default = nil)
  if valid_611708 != nil:
    section.add "Tags", valid_611708
  var valid_611709 = formData.getOrDefault("TargetDBSnapshotIdentifier")
  valid_611709 = validateParameter(valid_611709, JString, required = true,
                                 default = nil)
  if valid_611709 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_611709
  var valid_611710 = formData.getOrDefault("OptionGroupName")
  valid_611710 = validateParameter(valid_611710, JString, required = false,
                                 default = nil)
  if valid_611710 != nil:
    section.add "OptionGroupName", valid_611710
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611711: Call_PostCopyDBSnapshot_611691; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_611711.validator(path, query, header, formData, body)
  let scheme = call_611711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611711.url(scheme.get, call_611711.host, call_611711.base,
                         call_611711.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611711, url, valid)

proc call*(call_611712: Call_PostCopyDBSnapshot_611691;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          SourceRegion: string = ""; KmsKeyId: string = ""; CopyTags: bool = false;
          PreSignedUrl: string = ""; Action: string = "CopyDBSnapshot";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_611713 = newJObject()
  var formData_611714 = newJObject()
  add(formData_611714, "SourceRegion", newJString(SourceRegion))
  add(formData_611714, "KmsKeyId", newJString(KmsKeyId))
  add(formData_611714, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(formData_611714, "CopyTags", newJBool(CopyTags))
  add(formData_611714, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_611713, "Action", newJString(Action))
  if Tags != nil:
    formData_611714.add "Tags", Tags
  add(formData_611714, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(formData_611714, "OptionGroupName", newJString(OptionGroupName))
  add(query_611713, "Version", newJString(Version))
  result = call_611712.call(nil, query_611713, nil, formData_611714, nil)

var postCopyDBSnapshot* = Call_PostCopyDBSnapshot_611691(
    name: "postCopyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBSnapshot",
    validator: validate_PostCopyDBSnapshot_611692, base: "/",
    url: url_PostCopyDBSnapshot_611693, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBSnapshot_611668 = ref object of OpenApiRestCall_610658
proc url_GetCopyDBSnapshot_611670(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBSnapshot_611669(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_611671 = query.getOrDefault("SourceDBSnapshotIdentifier")
  valid_611671 = validateParameter(valid_611671, JString, required = true,
                                 default = nil)
  if valid_611671 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_611671
  var valid_611672 = query.getOrDefault("Tags")
  valid_611672 = validateParameter(valid_611672, JArray, required = false,
                                 default = nil)
  if valid_611672 != nil:
    section.add "Tags", valid_611672
  var valid_611673 = query.getOrDefault("KmsKeyId")
  valid_611673 = validateParameter(valid_611673, JString, required = false,
                                 default = nil)
  if valid_611673 != nil:
    section.add "KmsKeyId", valid_611673
  var valid_611674 = query.getOrDefault("PreSignedUrl")
  valid_611674 = validateParameter(valid_611674, JString, required = false,
                                 default = nil)
  if valid_611674 != nil:
    section.add "PreSignedUrl", valid_611674
  var valid_611675 = query.getOrDefault("SourceRegion")
  valid_611675 = validateParameter(valid_611675, JString, required = false,
                                 default = nil)
  if valid_611675 != nil:
    section.add "SourceRegion", valid_611675
  var valid_611676 = query.getOrDefault("Action")
  valid_611676 = validateParameter(valid_611676, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_611676 != nil:
    section.add "Action", valid_611676
  var valid_611677 = query.getOrDefault("OptionGroupName")
  valid_611677 = validateParameter(valid_611677, JString, required = false,
                                 default = nil)
  if valid_611677 != nil:
    section.add "OptionGroupName", valid_611677
  var valid_611678 = query.getOrDefault("CopyTags")
  valid_611678 = validateParameter(valid_611678, JBool, required = false, default = nil)
  if valid_611678 != nil:
    section.add "CopyTags", valid_611678
  var valid_611679 = query.getOrDefault("TargetDBSnapshotIdentifier")
  valid_611679 = validateParameter(valid_611679, JString, required = true,
                                 default = nil)
  if valid_611679 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_611679
  var valid_611680 = query.getOrDefault("Version")
  valid_611680 = validateParameter(valid_611680, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611680 != nil:
    section.add "Version", valid_611680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611681 = header.getOrDefault("X-Amz-Signature")
  valid_611681 = validateParameter(valid_611681, JString, required = false,
                                 default = nil)
  if valid_611681 != nil:
    section.add "X-Amz-Signature", valid_611681
  var valid_611682 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611682 = validateParameter(valid_611682, JString, required = false,
                                 default = nil)
  if valid_611682 != nil:
    section.add "X-Amz-Content-Sha256", valid_611682
  var valid_611683 = header.getOrDefault("X-Amz-Date")
  valid_611683 = validateParameter(valid_611683, JString, required = false,
                                 default = nil)
  if valid_611683 != nil:
    section.add "X-Amz-Date", valid_611683
  var valid_611684 = header.getOrDefault("X-Amz-Credential")
  valid_611684 = validateParameter(valid_611684, JString, required = false,
                                 default = nil)
  if valid_611684 != nil:
    section.add "X-Amz-Credential", valid_611684
  var valid_611685 = header.getOrDefault("X-Amz-Security-Token")
  valid_611685 = validateParameter(valid_611685, JString, required = false,
                                 default = nil)
  if valid_611685 != nil:
    section.add "X-Amz-Security-Token", valid_611685
  var valid_611686 = header.getOrDefault("X-Amz-Algorithm")
  valid_611686 = validateParameter(valid_611686, JString, required = false,
                                 default = nil)
  if valid_611686 != nil:
    section.add "X-Amz-Algorithm", valid_611686
  var valid_611687 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611687 = validateParameter(valid_611687, JString, required = false,
                                 default = nil)
  if valid_611687 != nil:
    section.add "X-Amz-SignedHeaders", valid_611687
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611688: Call_GetCopyDBSnapshot_611668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_611688.validator(path, query, header, formData, body)
  let scheme = call_611688.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611688.url(scheme.get, call_611688.host, call_611688.base,
                         call_611688.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611688, url, valid)

proc call*(call_611689: Call_GetCopyDBSnapshot_611668;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          Tags: JsonNode = nil; KmsKeyId: string = ""; PreSignedUrl: string = "";
          SourceRegion: string = ""; Action: string = "CopyDBSnapshot";
          OptionGroupName: string = ""; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: string (required)
  var query_611690 = newJObject()
  add(query_611690, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  if Tags != nil:
    query_611690.add "Tags", Tags
  add(query_611690, "KmsKeyId", newJString(KmsKeyId))
  add(query_611690, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_611690, "SourceRegion", newJString(SourceRegion))
  add(query_611690, "Action", newJString(Action))
  add(query_611690, "OptionGroupName", newJString(OptionGroupName))
  add(query_611690, "CopyTags", newJBool(CopyTags))
  add(query_611690, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(query_611690, "Version", newJString(Version))
  result = call_611689.call(nil, query_611690, nil, nil, nil)

var getCopyDBSnapshot* = Call_GetCopyDBSnapshot_611668(name: "getCopyDBSnapshot",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyDBSnapshot", validator: validate_GetCopyDBSnapshot_611669,
    base: "/", url: url_GetCopyDBSnapshot_611670,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyOptionGroup_611734 = ref object of OpenApiRestCall_610658
proc url_PostCopyOptionGroup_611736(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyOptionGroup_611735(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611737 = query.getOrDefault("Action")
  valid_611737 = validateParameter(valid_611737, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_611737 != nil:
    section.add "Action", valid_611737
  var valid_611738 = query.getOrDefault("Version")
  valid_611738 = validateParameter(valid_611738, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611738 != nil:
    section.add "Version", valid_611738
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611739 = header.getOrDefault("X-Amz-Signature")
  valid_611739 = validateParameter(valid_611739, JString, required = false,
                                 default = nil)
  if valid_611739 != nil:
    section.add "X-Amz-Signature", valid_611739
  var valid_611740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611740 = validateParameter(valid_611740, JString, required = false,
                                 default = nil)
  if valid_611740 != nil:
    section.add "X-Amz-Content-Sha256", valid_611740
  var valid_611741 = header.getOrDefault("X-Amz-Date")
  valid_611741 = validateParameter(valid_611741, JString, required = false,
                                 default = nil)
  if valid_611741 != nil:
    section.add "X-Amz-Date", valid_611741
  var valid_611742 = header.getOrDefault("X-Amz-Credential")
  valid_611742 = validateParameter(valid_611742, JString, required = false,
                                 default = nil)
  if valid_611742 != nil:
    section.add "X-Amz-Credential", valid_611742
  var valid_611743 = header.getOrDefault("X-Amz-Security-Token")
  valid_611743 = validateParameter(valid_611743, JString, required = false,
                                 default = nil)
  if valid_611743 != nil:
    section.add "X-Amz-Security-Token", valid_611743
  var valid_611744 = header.getOrDefault("X-Amz-Algorithm")
  valid_611744 = validateParameter(valid_611744, JString, required = false,
                                 default = nil)
  if valid_611744 != nil:
    section.add "X-Amz-Algorithm", valid_611744
  var valid_611745 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611745 = validateParameter(valid_611745, JString, required = false,
                                 default = nil)
  if valid_611745 != nil:
    section.add "X-Amz-SignedHeaders", valid_611745
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetOptionGroupIdentifier` field"
  var valid_611746 = formData.getOrDefault("TargetOptionGroupIdentifier")
  valid_611746 = validateParameter(valid_611746, JString, required = true,
                                 default = nil)
  if valid_611746 != nil:
    section.add "TargetOptionGroupIdentifier", valid_611746
  var valid_611747 = formData.getOrDefault("TargetOptionGroupDescription")
  valid_611747 = validateParameter(valid_611747, JString, required = true,
                                 default = nil)
  if valid_611747 != nil:
    section.add "TargetOptionGroupDescription", valid_611747
  var valid_611748 = formData.getOrDefault("SourceOptionGroupIdentifier")
  valid_611748 = validateParameter(valid_611748, JString, required = true,
                                 default = nil)
  if valid_611748 != nil:
    section.add "SourceOptionGroupIdentifier", valid_611748
  var valid_611749 = formData.getOrDefault("Tags")
  valid_611749 = validateParameter(valid_611749, JArray, required = false,
                                 default = nil)
  if valid_611749 != nil:
    section.add "Tags", valid_611749
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611750: Call_PostCopyOptionGroup_611734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_611750.validator(path, query, header, formData, body)
  let scheme = call_611750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611750.url(scheme.get, call_611750.host, call_611750.base,
                         call_611750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611750, url, valid)

proc call*(call_611751: Call_PostCopyOptionGroup_611734;
          TargetOptionGroupIdentifier: string;
          TargetOptionGroupDescription: string;
          SourceOptionGroupIdentifier: string; Action: string = "CopyOptionGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCopyOptionGroup
  ## Copies the specified option group.
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_611752 = newJObject()
  var formData_611753 = newJObject()
  add(formData_611753, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(formData_611753, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(formData_611753, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  add(query_611752, "Action", newJString(Action))
  if Tags != nil:
    formData_611753.add "Tags", Tags
  add(query_611752, "Version", newJString(Version))
  result = call_611751.call(nil, query_611752, nil, formData_611753, nil)

var postCopyOptionGroup* = Call_PostCopyOptionGroup_611734(
    name: "postCopyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyOptionGroup",
    validator: validate_PostCopyOptionGroup_611735, base: "/",
    url: url_PostCopyOptionGroup_611736, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyOptionGroup_611715 = ref object of OpenApiRestCall_610658
proc url_GetCopyOptionGroup_611717(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyOptionGroup_611716(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Action: JString (required)
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: JString (required)
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  section = newJObject()
  var valid_611718 = query.getOrDefault("Tags")
  valid_611718 = validateParameter(valid_611718, JArray, required = false,
                                 default = nil)
  if valid_611718 != nil:
    section.add "Tags", valid_611718
  assert query != nil, "query argument is necessary due to required `TargetOptionGroupDescription` field"
  var valid_611719 = query.getOrDefault("TargetOptionGroupDescription")
  valid_611719 = validateParameter(valid_611719, JString, required = true,
                                 default = nil)
  if valid_611719 != nil:
    section.add "TargetOptionGroupDescription", valid_611719
  var valid_611720 = query.getOrDefault("Action")
  valid_611720 = validateParameter(valid_611720, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_611720 != nil:
    section.add "Action", valid_611720
  var valid_611721 = query.getOrDefault("TargetOptionGroupIdentifier")
  valid_611721 = validateParameter(valid_611721, JString, required = true,
                                 default = nil)
  if valid_611721 != nil:
    section.add "TargetOptionGroupIdentifier", valid_611721
  var valid_611722 = query.getOrDefault("Version")
  valid_611722 = validateParameter(valid_611722, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611722 != nil:
    section.add "Version", valid_611722
  var valid_611723 = query.getOrDefault("SourceOptionGroupIdentifier")
  valid_611723 = validateParameter(valid_611723, JString, required = true,
                                 default = nil)
  if valid_611723 != nil:
    section.add "SourceOptionGroupIdentifier", valid_611723
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611724 = header.getOrDefault("X-Amz-Signature")
  valid_611724 = validateParameter(valid_611724, JString, required = false,
                                 default = nil)
  if valid_611724 != nil:
    section.add "X-Amz-Signature", valid_611724
  var valid_611725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611725 = validateParameter(valid_611725, JString, required = false,
                                 default = nil)
  if valid_611725 != nil:
    section.add "X-Amz-Content-Sha256", valid_611725
  var valid_611726 = header.getOrDefault("X-Amz-Date")
  valid_611726 = validateParameter(valid_611726, JString, required = false,
                                 default = nil)
  if valid_611726 != nil:
    section.add "X-Amz-Date", valid_611726
  var valid_611727 = header.getOrDefault("X-Amz-Credential")
  valid_611727 = validateParameter(valid_611727, JString, required = false,
                                 default = nil)
  if valid_611727 != nil:
    section.add "X-Amz-Credential", valid_611727
  var valid_611728 = header.getOrDefault("X-Amz-Security-Token")
  valid_611728 = validateParameter(valid_611728, JString, required = false,
                                 default = nil)
  if valid_611728 != nil:
    section.add "X-Amz-Security-Token", valid_611728
  var valid_611729 = header.getOrDefault("X-Amz-Algorithm")
  valid_611729 = validateParameter(valid_611729, JString, required = false,
                                 default = nil)
  if valid_611729 != nil:
    section.add "X-Amz-Algorithm", valid_611729
  var valid_611730 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611730 = validateParameter(valid_611730, JString, required = false,
                                 default = nil)
  if valid_611730 != nil:
    section.add "X-Amz-SignedHeaders", valid_611730
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611731: Call_GetCopyOptionGroup_611715; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_611731.validator(path, query, header, formData, body)
  let scheme = call_611731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611731.url(scheme.get, call_611731.host, call_611731.base,
                         call_611731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611731, url, valid)

proc call*(call_611732: Call_GetCopyOptionGroup_611715;
          TargetOptionGroupDescription: string;
          TargetOptionGroupIdentifier: string;
          SourceOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyOptionGroup
  ## Copies the specified option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Action: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: string (required)
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  var query_611733 = newJObject()
  if Tags != nil:
    query_611733.add "Tags", Tags
  add(query_611733, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(query_611733, "Action", newJString(Action))
  add(query_611733, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(query_611733, "Version", newJString(Version))
  add(query_611733, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  result = call_611732.call(nil, query_611733, nil, nil, nil)

var getCopyOptionGroup* = Call_GetCopyOptionGroup_611715(
    name: "getCopyOptionGroup", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyOptionGroup", validator: validate_GetCopyOptionGroup_611716,
    base: "/", url: url_GetCopyOptionGroup_611717,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomAvailabilityZone_611773 = ref object of OpenApiRestCall_610658
proc url_PostCreateCustomAvailabilityZone_611775(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCustomAvailabilityZone_611774(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611776 = query.getOrDefault("Action")
  valid_611776 = validateParameter(valid_611776, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_611776 != nil:
    section.add "Action", valid_611776
  var valid_611777 = query.getOrDefault("Version")
  valid_611777 = validateParameter(valid_611777, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611777 != nil:
    section.add "Version", valid_611777
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611778 = header.getOrDefault("X-Amz-Signature")
  valid_611778 = validateParameter(valid_611778, JString, required = false,
                                 default = nil)
  if valid_611778 != nil:
    section.add "X-Amz-Signature", valid_611778
  var valid_611779 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611779 = validateParameter(valid_611779, JString, required = false,
                                 default = nil)
  if valid_611779 != nil:
    section.add "X-Amz-Content-Sha256", valid_611779
  var valid_611780 = header.getOrDefault("X-Amz-Date")
  valid_611780 = validateParameter(valid_611780, JString, required = false,
                                 default = nil)
  if valid_611780 != nil:
    section.add "X-Amz-Date", valid_611780
  var valid_611781 = header.getOrDefault("X-Amz-Credential")
  valid_611781 = validateParameter(valid_611781, JString, required = false,
                                 default = nil)
  if valid_611781 != nil:
    section.add "X-Amz-Credential", valid_611781
  var valid_611782 = header.getOrDefault("X-Amz-Security-Token")
  valid_611782 = validateParameter(valid_611782, JString, required = false,
                                 default = nil)
  if valid_611782 != nil:
    section.add "X-Amz-Security-Token", valid_611782
  var valid_611783 = header.getOrDefault("X-Amz-Algorithm")
  valid_611783 = validateParameter(valid_611783, JString, required = false,
                                 default = nil)
  if valid_611783 != nil:
    section.add "X-Amz-Algorithm", valid_611783
  var valid_611784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611784 = validateParameter(valid_611784, JString, required = false,
                                 default = nil)
  if valid_611784 != nil:
    section.add "X-Amz-SignedHeaders", valid_611784
  result.add "header", section
  ## parameters in `formData` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  section = newJObject()
  var valid_611785 = formData.getOrDefault("VpnTunnelOriginatorIP")
  valid_611785 = validateParameter(valid_611785, JString, required = false,
                                 default = nil)
  if valid_611785 != nil:
    section.add "VpnTunnelOriginatorIP", valid_611785
  var valid_611786 = formData.getOrDefault("ExistingVpnId")
  valid_611786 = validateParameter(valid_611786, JString, required = false,
                                 default = nil)
  if valid_611786 != nil:
    section.add "ExistingVpnId", valid_611786
  var valid_611787 = formData.getOrDefault("NewVpnTunnelName")
  valid_611787 = validateParameter(valid_611787, JString, required = false,
                                 default = nil)
  if valid_611787 != nil:
    section.add "NewVpnTunnelName", valid_611787
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneName` field"
  var valid_611788 = formData.getOrDefault("CustomAvailabilityZoneName")
  valid_611788 = validateParameter(valid_611788, JString, required = true,
                                 default = nil)
  if valid_611788 != nil:
    section.add "CustomAvailabilityZoneName", valid_611788
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611789: Call_PostCreateCustomAvailabilityZone_611773;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_611789.validator(path, query, header, formData, body)
  let scheme = call_611789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611789.url(scheme.get, call_611789.host, call_611789.base,
                         call_611789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611789, url, valid)

proc call*(call_611790: Call_PostCreateCustomAvailabilityZone_611773;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = ""; NewVpnTunnelName: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  var query_611791 = newJObject()
  var formData_611792 = newJObject()
  add(formData_611792, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(formData_611792, "ExistingVpnId", newJString(ExistingVpnId))
  add(formData_611792, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  add(query_611791, "Action", newJString(Action))
  add(formData_611792, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_611791, "Version", newJString(Version))
  result = call_611790.call(nil, query_611791, nil, formData_611792, nil)

var postCreateCustomAvailabilityZone* = Call_PostCreateCustomAvailabilityZone_611773(
    name: "postCreateCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_PostCreateCustomAvailabilityZone_611774, base: "/",
    url: url_PostCreateCustomAvailabilityZone_611775,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomAvailabilityZone_611754 = ref object of OpenApiRestCall_610658
proc url_GetCreateCustomAvailabilityZone_611756(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCustomAvailabilityZone_611755(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: JString (required)
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: JString (required)
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  section = newJObject()
  var valid_611757 = query.getOrDefault("VpnTunnelOriginatorIP")
  valid_611757 = validateParameter(valid_611757, JString, required = false,
                                 default = nil)
  if valid_611757 != nil:
    section.add "VpnTunnelOriginatorIP", valid_611757
  var valid_611758 = query.getOrDefault("ExistingVpnId")
  valid_611758 = validateParameter(valid_611758, JString, required = false,
                                 default = nil)
  if valid_611758 != nil:
    section.add "ExistingVpnId", valid_611758
  var valid_611759 = query.getOrDefault("Action")
  valid_611759 = validateParameter(valid_611759, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_611759 != nil:
    section.add "Action", valid_611759
  var valid_611760 = query.getOrDefault("CustomAvailabilityZoneName")
  valid_611760 = validateParameter(valid_611760, JString, required = true,
                                 default = nil)
  if valid_611760 != nil:
    section.add "CustomAvailabilityZoneName", valid_611760
  var valid_611761 = query.getOrDefault("Version")
  valid_611761 = validateParameter(valid_611761, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611761 != nil:
    section.add "Version", valid_611761
  var valid_611762 = query.getOrDefault("NewVpnTunnelName")
  valid_611762 = validateParameter(valid_611762, JString, required = false,
                                 default = nil)
  if valid_611762 != nil:
    section.add "NewVpnTunnelName", valid_611762
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611763 = header.getOrDefault("X-Amz-Signature")
  valid_611763 = validateParameter(valid_611763, JString, required = false,
                                 default = nil)
  if valid_611763 != nil:
    section.add "X-Amz-Signature", valid_611763
  var valid_611764 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611764 = validateParameter(valid_611764, JString, required = false,
                                 default = nil)
  if valid_611764 != nil:
    section.add "X-Amz-Content-Sha256", valid_611764
  var valid_611765 = header.getOrDefault("X-Amz-Date")
  valid_611765 = validateParameter(valid_611765, JString, required = false,
                                 default = nil)
  if valid_611765 != nil:
    section.add "X-Amz-Date", valid_611765
  var valid_611766 = header.getOrDefault("X-Amz-Credential")
  valid_611766 = validateParameter(valid_611766, JString, required = false,
                                 default = nil)
  if valid_611766 != nil:
    section.add "X-Amz-Credential", valid_611766
  var valid_611767 = header.getOrDefault("X-Amz-Security-Token")
  valid_611767 = validateParameter(valid_611767, JString, required = false,
                                 default = nil)
  if valid_611767 != nil:
    section.add "X-Amz-Security-Token", valid_611767
  var valid_611768 = header.getOrDefault("X-Amz-Algorithm")
  valid_611768 = validateParameter(valid_611768, JString, required = false,
                                 default = nil)
  if valid_611768 != nil:
    section.add "X-Amz-Algorithm", valid_611768
  var valid_611769 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611769 = validateParameter(valid_611769, JString, required = false,
                                 default = nil)
  if valid_611769 != nil:
    section.add "X-Amz-SignedHeaders", valid_611769
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611770: Call_GetCreateCustomAvailabilityZone_611754;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_611770.validator(path, query, header, formData, body)
  let scheme = call_611770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611770.url(scheme.get, call_611770.host, call_611770.base,
                         call_611770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611770, url, valid)

proc call*(call_611771: Call_GetCreateCustomAvailabilityZone_611754;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"; NewVpnTunnelName: string = ""): Recallable =
  ## getCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  var query_611772 = newJObject()
  add(query_611772, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(query_611772, "ExistingVpnId", newJString(ExistingVpnId))
  add(query_611772, "Action", newJString(Action))
  add(query_611772, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_611772, "Version", newJString(Version))
  add(query_611772, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  result = call_611771.call(nil, query_611772, nil, nil, nil)

var getCreateCustomAvailabilityZone* = Call_GetCreateCustomAvailabilityZone_611754(
    name: "getCreateCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_GetCreateCustomAvailabilityZone_611755, base: "/",
    url: url_GetCreateCustomAvailabilityZone_611756,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_611861 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBCluster_611863(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBCluster_611862(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611864 = query.getOrDefault("Action")
  valid_611864 = validateParameter(valid_611864, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_611864 != nil:
    section.add "Action", valid_611864
  var valid_611865 = query.getOrDefault("Version")
  valid_611865 = validateParameter(valid_611865, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611865 != nil:
    section.add "Version", valid_611865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_611866 = header.getOrDefault("X-Amz-Security-Token")
  valid_611866 = validateParameter(valid_611866, JString, required = false,
                                 default = nil)
  if valid_611866 != nil:
    section.add "X-Amz-Security-Token", valid_611866
  var valid_611867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611867 = validateParameter(valid_611867, JString, required = false,
                                 default = nil)
  if valid_611867 != nil:
    section.add "X-Amz-SignedHeaders", valid_611867
  var valid_611868 = header.getOrDefault("X-Amz-Signature")
  valid_611868 = validateParameter(valid_611868, JString, required = false,
                                 default = nil)
  if valid_611868 != nil:
    section.add "X-Amz-Signature", valid_611868
  var valid_611869 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611869 = validateParameter(valid_611869, JString, required = false,
                                 default = nil)
  if valid_611869 != nil:
    section.add "X-Amz-Content-Sha256", valid_611869
  var valid_611870 = header.getOrDefault("X-Amz-Date")
  valid_611870 = validateParameter(valid_611870, JString, required = false,
                                 default = nil)
  if valid_611870 != nil:
    section.add "X-Amz-Date", valid_611870
  var valid_611871 = header.getOrDefault("X-Amz-Credential")
  valid_611871 = validateParameter(valid_611871, JString, required = false,
                                 default = nil)
  if valid_611871 != nil:
    section.add "X-Amz-Credential", valid_611871
  var valid_611872 = header.getOrDefault("X-Amz-Algorithm")
  valid_611872 = validateParameter(valid_611872, JString, required = false,
                                 default = nil)
  if valid_611872 != nil:
    section.add "X-Amz-Algorithm", valid_611872
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: JString
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  section = newJObject()
  var valid_611873 = formData.getOrDefault("Port")
  valid_611873 = validateParameter(valid_611873, JInt, required = false, default = nil)
  if valid_611873 != nil:
    section.add "Port", valid_611873
  var valid_611874 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_611874 = validateParameter(valid_611874, JString, required = false,
                                 default = nil)
  if valid_611874 != nil:
    section.add "GlobalClusterIdentifier", valid_611874
  var valid_611875 = formData.getOrDefault("MasterUsername")
  valid_611875 = validateParameter(valid_611875, JString, required = false,
                                 default = nil)
  if valid_611875 != nil:
    section.add "MasterUsername", valid_611875
  var valid_611876 = formData.getOrDefault("DatabaseName")
  valid_611876 = validateParameter(valid_611876, JString, required = false,
                                 default = nil)
  if valid_611876 != nil:
    section.add "DatabaseName", valid_611876
  var valid_611877 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_611877 = validateParameter(valid_611877, JArray, required = false,
                                 default = nil)
  if valid_611877 != nil:
    section.add "VpcSecurityGroupIds", valid_611877
  var valid_611878 = formData.getOrDefault("AvailabilityZones")
  valid_611878 = validateParameter(valid_611878, JArray, required = false,
                                 default = nil)
  if valid_611878 != nil:
    section.add "AvailabilityZones", valid_611878
  var valid_611879 = formData.getOrDefault("EngineMode")
  valid_611879 = validateParameter(valid_611879, JString, required = false,
                                 default = nil)
  if valid_611879 != nil:
    section.add "EngineMode", valid_611879
  var valid_611880 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_611880 = validateParameter(valid_611880, JArray, required = false,
                                 default = nil)
  if valid_611880 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611880
  var valid_611881 = formData.getOrDefault("DBSubnetGroupName")
  valid_611881 = validateParameter(valid_611881, JString, required = false,
                                 default = nil)
  if valid_611881 != nil:
    section.add "DBSubnetGroupName", valid_611881
  var valid_611882 = formData.getOrDefault("CharacterSetName")
  valid_611882 = validateParameter(valid_611882, JString, required = false,
                                 default = nil)
  if valid_611882 != nil:
    section.add "CharacterSetName", valid_611882
  var valid_611883 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_611883 = validateParameter(valid_611883, JString, required = false,
                                 default = nil)
  if valid_611883 != nil:
    section.add "DBClusterParameterGroupName", valid_611883
  var valid_611884 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_611884 = validateParameter(valid_611884, JBool, required = false, default = nil)
  if valid_611884 != nil:
    section.add "CopyTagsToSnapshot", valid_611884
  var valid_611885 = formData.getOrDefault("DeletionProtection")
  valid_611885 = validateParameter(valid_611885, JBool, required = false, default = nil)
  if valid_611885 != nil:
    section.add "DeletionProtection", valid_611885
  var valid_611886 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_611886 = validateParameter(valid_611886, JString, required = false,
                                 default = nil)
  if valid_611886 != nil:
    section.add "PreferredMaintenanceWindow", valid_611886
  var valid_611887 = formData.getOrDefault("PreferredBackupWindow")
  valid_611887 = validateParameter(valid_611887, JString, required = false,
                                 default = nil)
  if valid_611887 != nil:
    section.add "PreferredBackupWindow", valid_611887
  var valid_611888 = formData.getOrDefault("MasterUserPassword")
  valid_611888 = validateParameter(valid_611888, JString, required = false,
                                 default = nil)
  if valid_611888 != nil:
    section.add "MasterUserPassword", valid_611888
  var valid_611889 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_611889 = validateParameter(valid_611889, JString, required = false,
                                 default = nil)
  if valid_611889 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_611889
  var valid_611890 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_611890 = validateParameter(valid_611890, JString, required = false,
                                 default = nil)
  if valid_611890 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_611890
  var valid_611891 = formData.getOrDefault("SourceRegion")
  valid_611891 = validateParameter(valid_611891, JString, required = false,
                                 default = nil)
  if valid_611891 != nil:
    section.add "SourceRegion", valid_611891
  var valid_611892 = formData.getOrDefault("EngineVersion")
  valid_611892 = validateParameter(valid_611892, JString, required = false,
                                 default = nil)
  if valid_611892 != nil:
    section.add "EngineVersion", valid_611892
  var valid_611893 = formData.getOrDefault("BacktrackWindow")
  valid_611893 = validateParameter(valid_611893, JInt, required = false, default = nil)
  if valid_611893 != nil:
    section.add "BacktrackWindow", valid_611893
  var valid_611894 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611894 = validateParameter(valid_611894, JBool, required = false, default = nil)
  if valid_611894 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611894
  var valid_611895 = formData.getOrDefault("BackupRetentionPeriod")
  valid_611895 = validateParameter(valid_611895, JInt, required = false, default = nil)
  if valid_611895 != nil:
    section.add "BackupRetentionPeriod", valid_611895
  var valid_611896 = formData.getOrDefault("KmsKeyId")
  valid_611896 = validateParameter(valid_611896, JString, required = false,
                                 default = nil)
  if valid_611896 != nil:
    section.add "KmsKeyId", valid_611896
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_611897 = formData.getOrDefault("Engine")
  valid_611897 = validateParameter(valid_611897, JString, required = true,
                                 default = nil)
  if valid_611897 != nil:
    section.add "Engine", valid_611897
  var valid_611898 = formData.getOrDefault("PreSignedUrl")
  valid_611898 = validateParameter(valid_611898, JString, required = false,
                                 default = nil)
  if valid_611898 != nil:
    section.add "PreSignedUrl", valid_611898
  var valid_611899 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_611899 = validateParameter(valid_611899, JString, required = false,
                                 default = nil)
  if valid_611899 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_611899
  var valid_611900 = formData.getOrDefault("Tags")
  valid_611900 = validateParameter(valid_611900, JArray, required = false,
                                 default = nil)
  if valid_611900 != nil:
    section.add "Tags", valid_611900
  var valid_611901 = formData.getOrDefault("EnableHttpEndpoint")
  valid_611901 = validateParameter(valid_611901, JBool, required = false, default = nil)
  if valid_611901 != nil:
    section.add "EnableHttpEndpoint", valid_611901
  var valid_611902 = formData.getOrDefault("OptionGroupName")
  valid_611902 = validateParameter(valid_611902, JString, required = false,
                                 default = nil)
  if valid_611902 != nil:
    section.add "OptionGroupName", valid_611902
  var valid_611903 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_611903 = validateParameter(valid_611903, JString, required = false,
                                 default = nil)
  if valid_611903 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_611903
  var valid_611904 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_611904 = validateParameter(valid_611904, JString, required = false,
                                 default = nil)
  if valid_611904 != nil:
    section.add "ReplicationSourceIdentifier", valid_611904
  var valid_611905 = formData.getOrDefault("StorageEncrypted")
  valid_611905 = validateParameter(valid_611905, JBool, required = false, default = nil)
  if valid_611905 != nil:
    section.add "StorageEncrypted", valid_611905
  var valid_611906 = formData.getOrDefault("DBClusterIdentifier")
  valid_611906 = validateParameter(valid_611906, JString, required = true,
                                 default = nil)
  if valid_611906 != nil:
    section.add "DBClusterIdentifier", valid_611906
  var valid_611907 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_611907 = validateParameter(valid_611907, JString, required = false,
                                 default = nil)
  if valid_611907 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_611907
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611908: Call_PostCreateDBCluster_611861; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611908.validator(path, query, header, formData, body)
  let scheme = call_611908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611908.url(scheme.get, call_611908.host, call_611908.base,
                         call_611908.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611908, url, valid)

proc call*(call_611909: Call_PostCreateDBCluster_611861; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          GlobalClusterIdentifier: string = ""; MasterUsername: string = "";
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; EngineMode: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBCluster"; DBSubnetGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = ""; SourceRegion: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          PreSignedUrl: string = ""; ScalingConfigurationMaxCapacity: string = "";
          Tags: JsonNode = nil; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          ReplicationSourceIdentifier: string = ""; Version: string = "2014-10-31";
          StorageEncrypted: bool = false; ScalingConfigurationAutoPause: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: string
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  var query_611910 = newJObject()
  var formData_611911 = newJObject()
  add(formData_611911, "Port", newJInt(Port))
  add(formData_611911, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_611911, "MasterUsername", newJString(MasterUsername))
  add(formData_611911, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_611911.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if AvailabilityZones != nil:
    formData_611911.add "AvailabilityZones", AvailabilityZones
  add(formData_611911, "EngineMode", newJString(EngineMode))
  if EnableCloudwatchLogsExports != nil:
    formData_611911.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_611910, "Action", newJString(Action))
  add(formData_611911, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_611911, "CharacterSetName", newJString(CharacterSetName))
  add(formData_611911, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_611911, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_611911, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_611911, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_611911, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_611911, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_611911, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_611911, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_611911, "SourceRegion", newJString(SourceRegion))
  add(formData_611911, "EngineVersion", newJString(EngineVersion))
  add(formData_611911, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_611911, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_611911, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_611911, "KmsKeyId", newJString(KmsKeyId))
  add(formData_611911, "Engine", newJString(Engine))
  add(formData_611911, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_611911, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  if Tags != nil:
    formData_611911.add "Tags", Tags
  add(formData_611911, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_611911, "OptionGroupName", newJString(OptionGroupName))
  add(formData_611911, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_611911, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_611910, "Version", newJString(Version))
  add(formData_611911, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_611911, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_611911, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  result = call_611909.call(nil, query_611910, nil, formData_611911, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_611861(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_611862, base: "/",
    url: url_PostCreateDBCluster_611863, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_611793 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBCluster_611795(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBCluster_611794(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: JString
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_611814 = query.getOrDefault("GlobalClusterIdentifier")
  valid_611814 = validateParameter(valid_611814, JString, required = false,
                                 default = nil)
  if valid_611814 != nil:
    section.add "GlobalClusterIdentifier", valid_611814
  var valid_611815 = query.getOrDefault("DatabaseName")
  valid_611815 = validateParameter(valid_611815, JString, required = false,
                                 default = nil)
  if valid_611815 != nil:
    section.add "DatabaseName", valid_611815
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_611816 = query.getOrDefault("Engine")
  valid_611816 = validateParameter(valid_611816, JString, required = true,
                                 default = nil)
  if valid_611816 != nil:
    section.add "Engine", valid_611816
  var valid_611817 = query.getOrDefault("CopyTagsToSnapshot")
  valid_611817 = validateParameter(valid_611817, JBool, required = false, default = nil)
  if valid_611817 != nil:
    section.add "CopyTagsToSnapshot", valid_611817
  var valid_611818 = query.getOrDefault("EnableHttpEndpoint")
  valid_611818 = validateParameter(valid_611818, JBool, required = false, default = nil)
  if valid_611818 != nil:
    section.add "EnableHttpEndpoint", valid_611818
  var valid_611819 = query.getOrDefault("KmsKeyId")
  valid_611819 = validateParameter(valid_611819, JString, required = false,
                                 default = nil)
  if valid_611819 != nil:
    section.add "KmsKeyId", valid_611819
  var valid_611820 = query.getOrDefault("PreSignedUrl")
  valid_611820 = validateParameter(valid_611820, JString, required = false,
                                 default = nil)
  if valid_611820 != nil:
    section.add "PreSignedUrl", valid_611820
  var valid_611821 = query.getOrDefault("EngineMode")
  valid_611821 = validateParameter(valid_611821, JString, required = false,
                                 default = nil)
  if valid_611821 != nil:
    section.add "EngineMode", valid_611821
  var valid_611822 = query.getOrDefault("MasterUsername")
  valid_611822 = validateParameter(valid_611822, JString, required = false,
                                 default = nil)
  if valid_611822 != nil:
    section.add "MasterUsername", valid_611822
  var valid_611823 = query.getOrDefault("BackupRetentionPeriod")
  valid_611823 = validateParameter(valid_611823, JInt, required = false, default = nil)
  if valid_611823 != nil:
    section.add "BackupRetentionPeriod", valid_611823
  var valid_611824 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_611824 = validateParameter(valid_611824, JString, required = false,
                                 default = nil)
  if valid_611824 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_611824
  var valid_611825 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_611825 = validateParameter(valid_611825, JArray, required = false,
                                 default = nil)
  if valid_611825 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611825
  var valid_611826 = query.getOrDefault("EngineVersion")
  valid_611826 = validateParameter(valid_611826, JString, required = false,
                                 default = nil)
  if valid_611826 != nil:
    section.add "EngineVersion", valid_611826
  var valid_611827 = query.getOrDefault("Action")
  valid_611827 = validateParameter(valid_611827, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_611827 != nil:
    section.add "Action", valid_611827
  var valid_611828 = query.getOrDefault("VpcSecurityGroupIds")
  valid_611828 = validateParameter(valid_611828, JArray, required = false,
                                 default = nil)
  if valid_611828 != nil:
    section.add "VpcSecurityGroupIds", valid_611828
  var valid_611829 = query.getOrDefault("StorageEncrypted")
  valid_611829 = validateParameter(valid_611829, JBool, required = false, default = nil)
  if valid_611829 != nil:
    section.add "StorageEncrypted", valid_611829
  var valid_611830 = query.getOrDefault("DeletionProtection")
  valid_611830 = validateParameter(valid_611830, JBool, required = false, default = nil)
  if valid_611830 != nil:
    section.add "DeletionProtection", valid_611830
  var valid_611831 = query.getOrDefault("CharacterSetName")
  valid_611831 = validateParameter(valid_611831, JString, required = false,
                                 default = nil)
  if valid_611831 != nil:
    section.add "CharacterSetName", valid_611831
  var valid_611832 = query.getOrDefault("Tags")
  valid_611832 = validateParameter(valid_611832, JArray, required = false,
                                 default = nil)
  if valid_611832 != nil:
    section.add "Tags", valid_611832
  var valid_611833 = query.getOrDefault("DBClusterIdentifier")
  valid_611833 = validateParameter(valid_611833, JString, required = true,
                                 default = nil)
  if valid_611833 != nil:
    section.add "DBClusterIdentifier", valid_611833
  var valid_611834 = query.getOrDefault("BacktrackWindow")
  valid_611834 = validateParameter(valid_611834, JInt, required = false, default = nil)
  if valid_611834 != nil:
    section.add "BacktrackWindow", valid_611834
  var valid_611835 = query.getOrDefault("DBClusterParameterGroupName")
  valid_611835 = validateParameter(valid_611835, JString, required = false,
                                 default = nil)
  if valid_611835 != nil:
    section.add "DBClusterParameterGroupName", valid_611835
  var valid_611836 = query.getOrDefault("AvailabilityZones")
  valid_611836 = validateParameter(valid_611836, JArray, required = false,
                                 default = nil)
  if valid_611836 != nil:
    section.add "AvailabilityZones", valid_611836
  var valid_611837 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_611837 = validateParameter(valid_611837, JString, required = false,
                                 default = nil)
  if valid_611837 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_611837
  var valid_611838 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_611838 = validateParameter(valid_611838, JString, required = false,
                                 default = nil)
  if valid_611838 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_611838
  var valid_611839 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611839 = validateParameter(valid_611839, JBool, required = false, default = nil)
  if valid_611839 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611839
  var valid_611840 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_611840 = validateParameter(valid_611840, JString, required = false,
                                 default = nil)
  if valid_611840 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_611840
  var valid_611841 = query.getOrDefault("SourceRegion")
  valid_611841 = validateParameter(valid_611841, JString, required = false,
                                 default = nil)
  if valid_611841 != nil:
    section.add "SourceRegion", valid_611841
  var valid_611842 = query.getOrDefault("Port")
  valid_611842 = validateParameter(valid_611842, JInt, required = false, default = nil)
  if valid_611842 != nil:
    section.add "Port", valid_611842
  var valid_611843 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_611843 = validateParameter(valid_611843, JString, required = false,
                                 default = nil)
  if valid_611843 != nil:
    section.add "ReplicationSourceIdentifier", valid_611843
  var valid_611844 = query.getOrDefault("MasterUserPassword")
  valid_611844 = validateParameter(valid_611844, JString, required = false,
                                 default = nil)
  if valid_611844 != nil:
    section.add "MasterUserPassword", valid_611844
  var valid_611845 = query.getOrDefault("OptionGroupName")
  valid_611845 = validateParameter(valid_611845, JString, required = false,
                                 default = nil)
  if valid_611845 != nil:
    section.add "OptionGroupName", valid_611845
  var valid_611846 = query.getOrDefault("DBSubnetGroupName")
  valid_611846 = validateParameter(valid_611846, JString, required = false,
                                 default = nil)
  if valid_611846 != nil:
    section.add "DBSubnetGroupName", valid_611846
  var valid_611847 = query.getOrDefault("PreferredBackupWindow")
  valid_611847 = validateParameter(valid_611847, JString, required = false,
                                 default = nil)
  if valid_611847 != nil:
    section.add "PreferredBackupWindow", valid_611847
  var valid_611848 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_611848 = validateParameter(valid_611848, JString, required = false,
                                 default = nil)
  if valid_611848 != nil:
    section.add "PreferredMaintenanceWindow", valid_611848
  var valid_611849 = query.getOrDefault("Version")
  valid_611849 = validateParameter(valid_611849, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611849 != nil:
    section.add "Version", valid_611849
  var valid_611850 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_611850 = validateParameter(valid_611850, JString, required = false,
                                 default = nil)
  if valid_611850 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_611850
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_611851 = header.getOrDefault("X-Amz-Security-Token")
  valid_611851 = validateParameter(valid_611851, JString, required = false,
                                 default = nil)
  if valid_611851 != nil:
    section.add "X-Amz-Security-Token", valid_611851
  var valid_611852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611852 = validateParameter(valid_611852, JString, required = false,
                                 default = nil)
  if valid_611852 != nil:
    section.add "X-Amz-SignedHeaders", valid_611852
  var valid_611853 = header.getOrDefault("X-Amz-Signature")
  valid_611853 = validateParameter(valid_611853, JString, required = false,
                                 default = nil)
  if valid_611853 != nil:
    section.add "X-Amz-Signature", valid_611853
  var valid_611854 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611854 = validateParameter(valid_611854, JString, required = false,
                                 default = nil)
  if valid_611854 != nil:
    section.add "X-Amz-Content-Sha256", valid_611854
  var valid_611855 = header.getOrDefault("X-Amz-Date")
  valid_611855 = validateParameter(valid_611855, JString, required = false,
                                 default = nil)
  if valid_611855 != nil:
    section.add "X-Amz-Date", valid_611855
  var valid_611856 = header.getOrDefault("X-Amz-Credential")
  valid_611856 = validateParameter(valid_611856, JString, required = false,
                                 default = nil)
  if valid_611856 != nil:
    section.add "X-Amz-Credential", valid_611856
  var valid_611857 = header.getOrDefault("X-Amz-Algorithm")
  valid_611857 = validateParameter(valid_611857, JString, required = false,
                                 default = nil)
  if valid_611857 != nil:
    section.add "X-Amz-Algorithm", valid_611857
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611858: Call_GetCreateDBCluster_611793; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611858.validator(path, query, header, formData, body)
  let scheme = call_611858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611858.url(scheme.get, call_611858.host, call_611858.base,
                         call_611858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611858, url, valid)

proc call*(call_611859: Call_GetCreateDBCluster_611793; Engine: string;
          DBClusterIdentifier: string; GlobalClusterIdentifier: string = "";
          DatabaseName: string = ""; CopyTagsToSnapshot: bool = false;
          EnableHttpEndpoint: bool = false; KmsKeyId: string = "";
          PreSignedUrl: string = ""; EngineMode: string = "";
          MasterUsername: string = ""; BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBCluster"; VpcSecurityGroupIds: JsonNode = nil;
          StorageEncrypted: bool = false; DeletionProtection: bool = false;
          CharacterSetName: string = ""; Tags: JsonNode = nil; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          SourceRegion: string = ""; Port: int = 0;
          ReplicationSourceIdentifier: string = ""; MasterUserPassword: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: string
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_611860 = newJObject()
  add(query_611860, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_611860, "DatabaseName", newJString(DatabaseName))
  add(query_611860, "Engine", newJString(Engine))
  add(query_611860, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_611860, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_611860, "KmsKeyId", newJString(KmsKeyId))
  add(query_611860, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_611860, "EngineMode", newJString(EngineMode))
  add(query_611860, "MasterUsername", newJString(MasterUsername))
  add(query_611860, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_611860, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  if EnableCloudwatchLogsExports != nil:
    query_611860.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_611860, "EngineVersion", newJString(EngineVersion))
  add(query_611860, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_611860.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_611860, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_611860, "DeletionProtection", newJBool(DeletionProtection))
  add(query_611860, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_611860.add "Tags", Tags
  add(query_611860, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_611860, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_611860, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_611860.add "AvailabilityZones", AvailabilityZones
  add(query_611860, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_611860, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_611860, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_611860, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_611860, "SourceRegion", newJString(SourceRegion))
  add(query_611860, "Port", newJInt(Port))
  add(query_611860, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_611860, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_611860, "OptionGroupName", newJString(OptionGroupName))
  add(query_611860, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_611860, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_611860, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_611860, "Version", newJString(Version))
  add(query_611860, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_611859.call(nil, query_611860, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_611793(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_611794,
    base: "/", url: url_GetCreateDBCluster_611795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterEndpoint_611933 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBClusterEndpoint_611935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterEndpoint_611934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611936 = query.getOrDefault("Action")
  valid_611936 = validateParameter(valid_611936, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_611936 != nil:
    section.add "Action", valid_611936
  var valid_611937 = query.getOrDefault("Version")
  valid_611937 = validateParameter(valid_611937, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611937 != nil:
    section.add "Version", valid_611937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611938 = header.getOrDefault("X-Amz-Signature")
  valid_611938 = validateParameter(valid_611938, JString, required = false,
                                 default = nil)
  if valid_611938 != nil:
    section.add "X-Amz-Signature", valid_611938
  var valid_611939 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611939 = validateParameter(valid_611939, JString, required = false,
                                 default = nil)
  if valid_611939 != nil:
    section.add "X-Amz-Content-Sha256", valid_611939
  var valid_611940 = header.getOrDefault("X-Amz-Date")
  valid_611940 = validateParameter(valid_611940, JString, required = false,
                                 default = nil)
  if valid_611940 != nil:
    section.add "X-Amz-Date", valid_611940
  var valid_611941 = header.getOrDefault("X-Amz-Credential")
  valid_611941 = validateParameter(valid_611941, JString, required = false,
                                 default = nil)
  if valid_611941 != nil:
    section.add "X-Amz-Credential", valid_611941
  var valid_611942 = header.getOrDefault("X-Amz-Security-Token")
  valid_611942 = validateParameter(valid_611942, JString, required = false,
                                 default = nil)
  if valid_611942 != nil:
    section.add "X-Amz-Security-Token", valid_611942
  var valid_611943 = header.getOrDefault("X-Amz-Algorithm")
  valid_611943 = validateParameter(valid_611943, JString, required = false,
                                 default = nil)
  if valid_611943 != nil:
    section.add "X-Amz-Algorithm", valid_611943
  var valid_611944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611944 = validateParameter(valid_611944, JString, required = false,
                                 default = nil)
  if valid_611944 != nil:
    section.add "X-Amz-SignedHeaders", valid_611944
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_611945 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_611945 = validateParameter(valid_611945, JString, required = true,
                                 default = nil)
  if valid_611945 != nil:
    section.add "DBClusterEndpointIdentifier", valid_611945
  var valid_611946 = formData.getOrDefault("StaticMembers")
  valid_611946 = validateParameter(valid_611946, JArray, required = false,
                                 default = nil)
  if valid_611946 != nil:
    section.add "StaticMembers", valid_611946
  var valid_611947 = formData.getOrDefault("EndpointType")
  valid_611947 = validateParameter(valid_611947, JString, required = true,
                                 default = nil)
  if valid_611947 != nil:
    section.add "EndpointType", valid_611947
  var valid_611948 = formData.getOrDefault("ExcludedMembers")
  valid_611948 = validateParameter(valid_611948, JArray, required = false,
                                 default = nil)
  if valid_611948 != nil:
    section.add "ExcludedMembers", valid_611948
  var valid_611949 = formData.getOrDefault("Tags")
  valid_611949 = validateParameter(valid_611949, JArray, required = false,
                                 default = nil)
  if valid_611949 != nil:
    section.add "Tags", valid_611949
  var valid_611950 = formData.getOrDefault("DBClusterIdentifier")
  valid_611950 = validateParameter(valid_611950, JString, required = true,
                                 default = nil)
  if valid_611950 != nil:
    section.add "DBClusterIdentifier", valid_611950
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611951: Call_PostCreateDBClusterEndpoint_611933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611951.validator(path, query, header, formData, body)
  let scheme = call_611951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611951.url(scheme.get, call_611951.host, call_611951.base,
                         call_611951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611951, url, valid)

proc call*(call_611952: Call_PostCreateDBClusterEndpoint_611933;
          DBClusterEndpointIdentifier: string; EndpointType: string;
          DBClusterIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_611953 = newJObject()
  var formData_611954 = newJObject()
  add(formData_611954, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_611954.add "StaticMembers", StaticMembers
  add(query_611953, "Action", newJString(Action))
  add(formData_611954, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_611954.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    formData_611954.add "Tags", Tags
  add(query_611953, "Version", newJString(Version))
  add(formData_611954, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_611952.call(nil, query_611953, nil, formData_611954, nil)

var postCreateDBClusterEndpoint* = Call_PostCreateDBClusterEndpoint_611933(
    name: "postCreateDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_PostCreateDBClusterEndpoint_611934, base: "/",
    url: url_PostCreateDBClusterEndpoint_611935,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterEndpoint_611912 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBClusterEndpoint_611914(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterEndpoint_611913(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611915 = query.getOrDefault("ExcludedMembers")
  valid_611915 = validateParameter(valid_611915, JArray, required = false,
                                 default = nil)
  if valid_611915 != nil:
    section.add "ExcludedMembers", valid_611915
  var valid_611916 = query.getOrDefault("Tags")
  valid_611916 = validateParameter(valid_611916, JArray, required = false,
                                 default = nil)
  if valid_611916 != nil:
    section.add "Tags", valid_611916
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_611917 = query.getOrDefault("DBClusterIdentifier")
  valid_611917 = validateParameter(valid_611917, JString, required = true,
                                 default = nil)
  if valid_611917 != nil:
    section.add "DBClusterIdentifier", valid_611917
  var valid_611918 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_611918 = validateParameter(valid_611918, JString, required = true,
                                 default = nil)
  if valid_611918 != nil:
    section.add "DBClusterEndpointIdentifier", valid_611918
  var valid_611919 = query.getOrDefault("StaticMembers")
  valid_611919 = validateParameter(valid_611919, JArray, required = false,
                                 default = nil)
  if valid_611919 != nil:
    section.add "StaticMembers", valid_611919
  var valid_611920 = query.getOrDefault("EndpointType")
  valid_611920 = validateParameter(valid_611920, JString, required = true,
                                 default = nil)
  if valid_611920 != nil:
    section.add "EndpointType", valid_611920
  var valid_611921 = query.getOrDefault("Action")
  valid_611921 = validateParameter(valid_611921, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_611921 != nil:
    section.add "Action", valid_611921
  var valid_611922 = query.getOrDefault("Version")
  valid_611922 = validateParameter(valid_611922, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611922 != nil:
    section.add "Version", valid_611922
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611923 = header.getOrDefault("X-Amz-Signature")
  valid_611923 = validateParameter(valid_611923, JString, required = false,
                                 default = nil)
  if valid_611923 != nil:
    section.add "X-Amz-Signature", valid_611923
  var valid_611924 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611924 = validateParameter(valid_611924, JString, required = false,
                                 default = nil)
  if valid_611924 != nil:
    section.add "X-Amz-Content-Sha256", valid_611924
  var valid_611925 = header.getOrDefault("X-Amz-Date")
  valid_611925 = validateParameter(valid_611925, JString, required = false,
                                 default = nil)
  if valid_611925 != nil:
    section.add "X-Amz-Date", valid_611925
  var valid_611926 = header.getOrDefault("X-Amz-Credential")
  valid_611926 = validateParameter(valid_611926, JString, required = false,
                                 default = nil)
  if valid_611926 != nil:
    section.add "X-Amz-Credential", valid_611926
  var valid_611927 = header.getOrDefault("X-Amz-Security-Token")
  valid_611927 = validateParameter(valid_611927, JString, required = false,
                                 default = nil)
  if valid_611927 != nil:
    section.add "X-Amz-Security-Token", valid_611927
  var valid_611928 = header.getOrDefault("X-Amz-Algorithm")
  valid_611928 = validateParameter(valid_611928, JString, required = false,
                                 default = nil)
  if valid_611928 != nil:
    section.add "X-Amz-Algorithm", valid_611928
  var valid_611929 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611929 = validateParameter(valid_611929, JString, required = false,
                                 default = nil)
  if valid_611929 != nil:
    section.add "X-Amz-SignedHeaders", valid_611929
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611930: Call_GetCreateDBClusterEndpoint_611912; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611930.validator(path, query, header, formData, body)
  let scheme = call_611930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611930.url(scheme.get, call_611930.host, call_611930.base,
                         call_611930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611930, url, valid)

proc call*(call_611931: Call_GetCreateDBClusterEndpoint_611912;
          DBClusterIdentifier: string; DBClusterEndpointIdentifier: string;
          EndpointType: string; ExcludedMembers: JsonNode = nil; Tags: JsonNode = nil;
          StaticMembers: JsonNode = nil; Action: string = "CreateDBClusterEndpoint";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611932 = newJObject()
  if ExcludedMembers != nil:
    query_611932.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    query_611932.add "Tags", Tags
  add(query_611932, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_611932, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_611932.add "StaticMembers", StaticMembers
  add(query_611932, "EndpointType", newJString(EndpointType))
  add(query_611932, "Action", newJString(Action))
  add(query_611932, "Version", newJString(Version))
  result = call_611931.call(nil, query_611932, nil, nil, nil)

var getCreateDBClusterEndpoint* = Call_GetCreateDBClusterEndpoint_611912(
    name: "getCreateDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_GetCreateDBClusterEndpoint_611913, base: "/",
    url: url_GetCreateDBClusterEndpoint_611914,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_611974 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBClusterParameterGroup_611976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_611975(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611977 = query.getOrDefault("Action")
  valid_611977 = validateParameter(valid_611977, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_611977 != nil:
    section.add "Action", valid_611977
  var valid_611978 = query.getOrDefault("Version")
  valid_611978 = validateParameter(valid_611978, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611978 != nil:
    section.add "Version", valid_611978
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611979 = header.getOrDefault("X-Amz-Signature")
  valid_611979 = validateParameter(valid_611979, JString, required = false,
                                 default = nil)
  if valid_611979 != nil:
    section.add "X-Amz-Signature", valid_611979
  var valid_611980 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611980 = validateParameter(valid_611980, JString, required = false,
                                 default = nil)
  if valid_611980 != nil:
    section.add "X-Amz-Content-Sha256", valid_611980
  var valid_611981 = header.getOrDefault("X-Amz-Date")
  valid_611981 = validateParameter(valid_611981, JString, required = false,
                                 default = nil)
  if valid_611981 != nil:
    section.add "X-Amz-Date", valid_611981
  var valid_611982 = header.getOrDefault("X-Amz-Credential")
  valid_611982 = validateParameter(valid_611982, JString, required = false,
                                 default = nil)
  if valid_611982 != nil:
    section.add "X-Amz-Credential", valid_611982
  var valid_611983 = header.getOrDefault("X-Amz-Security-Token")
  valid_611983 = validateParameter(valid_611983, JString, required = false,
                                 default = nil)
  if valid_611983 != nil:
    section.add "X-Amz-Security-Token", valid_611983
  var valid_611984 = header.getOrDefault("X-Amz-Algorithm")
  valid_611984 = validateParameter(valid_611984, JString, required = false,
                                 default = nil)
  if valid_611984 != nil:
    section.add "X-Amz-Algorithm", valid_611984
  var valid_611985 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611985 = validateParameter(valid_611985, JString, required = false,
                                 default = nil)
  if valid_611985 != nil:
    section.add "X-Amz-SignedHeaders", valid_611985
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_611986 = formData.getOrDefault("Description")
  valid_611986 = validateParameter(valid_611986, JString, required = true,
                                 default = nil)
  if valid_611986 != nil:
    section.add "Description", valid_611986
  var valid_611987 = formData.getOrDefault("Tags")
  valid_611987 = validateParameter(valid_611987, JArray, required = false,
                                 default = nil)
  if valid_611987 != nil:
    section.add "Tags", valid_611987
  var valid_611988 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_611988 = validateParameter(valid_611988, JString, required = true,
                                 default = nil)
  if valid_611988 != nil:
    section.add "DBClusterParameterGroupName", valid_611988
  var valid_611989 = formData.getOrDefault("DBParameterGroupFamily")
  valid_611989 = validateParameter(valid_611989, JString, required = true,
                                 default = nil)
  if valid_611989 != nil:
    section.add "DBParameterGroupFamily", valid_611989
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611990: Call_PostCreateDBClusterParameterGroup_611974;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611990.validator(path, query, header, formData, body)
  let scheme = call_611990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611990.url(scheme.get, call_611990.host, call_611990.base,
                         call_611990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611990, url, valid)

proc call*(call_611991: Call_PostCreateDBClusterParameterGroup_611974;
          Description: string; DBClusterParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  var query_611992 = newJObject()
  var formData_611993 = newJObject()
  add(formData_611993, "Description", newJString(Description))
  add(query_611992, "Action", newJString(Action))
  if Tags != nil:
    formData_611993.add "Tags", Tags
  add(formData_611993, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_611992, "Version", newJString(Version))
  add(formData_611993, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_611991.call(nil, query_611992, nil, formData_611993, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_611974(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_611975, base: "/",
    url: url_PostCreateDBClusterParameterGroup_611976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_611955 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBClusterParameterGroup_611957(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_611956(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_611958 = query.getOrDefault("DBParameterGroupFamily")
  valid_611958 = validateParameter(valid_611958, JString, required = true,
                                 default = nil)
  if valid_611958 != nil:
    section.add "DBParameterGroupFamily", valid_611958
  var valid_611959 = query.getOrDefault("Tags")
  valid_611959 = validateParameter(valid_611959, JArray, required = false,
                                 default = nil)
  if valid_611959 != nil:
    section.add "Tags", valid_611959
  var valid_611960 = query.getOrDefault("DBClusterParameterGroupName")
  valid_611960 = validateParameter(valid_611960, JString, required = true,
                                 default = nil)
  if valid_611960 != nil:
    section.add "DBClusterParameterGroupName", valid_611960
  var valid_611961 = query.getOrDefault("Action")
  valid_611961 = validateParameter(valid_611961, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_611961 != nil:
    section.add "Action", valid_611961
  var valid_611962 = query.getOrDefault("Description")
  valid_611962 = validateParameter(valid_611962, JString, required = true,
                                 default = nil)
  if valid_611962 != nil:
    section.add "Description", valid_611962
  var valid_611963 = query.getOrDefault("Version")
  valid_611963 = validateParameter(valid_611963, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611963 != nil:
    section.add "Version", valid_611963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611964 = header.getOrDefault("X-Amz-Signature")
  valid_611964 = validateParameter(valid_611964, JString, required = false,
                                 default = nil)
  if valid_611964 != nil:
    section.add "X-Amz-Signature", valid_611964
  var valid_611965 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611965 = validateParameter(valid_611965, JString, required = false,
                                 default = nil)
  if valid_611965 != nil:
    section.add "X-Amz-Content-Sha256", valid_611965
  var valid_611966 = header.getOrDefault("X-Amz-Date")
  valid_611966 = validateParameter(valid_611966, JString, required = false,
                                 default = nil)
  if valid_611966 != nil:
    section.add "X-Amz-Date", valid_611966
  var valid_611967 = header.getOrDefault("X-Amz-Credential")
  valid_611967 = validateParameter(valid_611967, JString, required = false,
                                 default = nil)
  if valid_611967 != nil:
    section.add "X-Amz-Credential", valid_611967
  var valid_611968 = header.getOrDefault("X-Amz-Security-Token")
  valid_611968 = validateParameter(valid_611968, JString, required = false,
                                 default = nil)
  if valid_611968 != nil:
    section.add "X-Amz-Security-Token", valid_611968
  var valid_611969 = header.getOrDefault("X-Amz-Algorithm")
  valid_611969 = validateParameter(valid_611969, JString, required = false,
                                 default = nil)
  if valid_611969 != nil:
    section.add "X-Amz-Algorithm", valid_611969
  var valid_611970 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611970 = validateParameter(valid_611970, JString, required = false,
                                 default = nil)
  if valid_611970 != nil:
    section.add "X-Amz-SignedHeaders", valid_611970
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611971: Call_GetCreateDBClusterParameterGroup_611955;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611971.validator(path, query, header, formData, body)
  let scheme = call_611971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611971.url(scheme.get, call_611971.host, call_611971.base,
                         call_611971.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611971, url, valid)

proc call*(call_611972: Call_GetCreateDBClusterParameterGroup_611955;
          DBParameterGroupFamily: string; DBClusterParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: string (required)
  var query_611973 = newJObject()
  add(query_611973, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_611973.add "Tags", Tags
  add(query_611973, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_611973, "Action", newJString(Action))
  add(query_611973, "Description", newJString(Description))
  add(query_611973, "Version", newJString(Version))
  result = call_611972.call(nil, query_611973, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_611955(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_611956, base: "/",
    url: url_GetCreateDBClusterParameterGroup_611957,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_612012 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBClusterSnapshot_612014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterSnapshot_612013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612015 = query.getOrDefault("Action")
  valid_612015 = validateParameter(valid_612015, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_612015 != nil:
    section.add "Action", valid_612015
  var valid_612016 = query.getOrDefault("Version")
  valid_612016 = validateParameter(valid_612016, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612016 != nil:
    section.add "Version", valid_612016
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612017 = header.getOrDefault("X-Amz-Signature")
  valid_612017 = validateParameter(valid_612017, JString, required = false,
                                 default = nil)
  if valid_612017 != nil:
    section.add "X-Amz-Signature", valid_612017
  var valid_612018 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612018 = validateParameter(valid_612018, JString, required = false,
                                 default = nil)
  if valid_612018 != nil:
    section.add "X-Amz-Content-Sha256", valid_612018
  var valid_612019 = header.getOrDefault("X-Amz-Date")
  valid_612019 = validateParameter(valid_612019, JString, required = false,
                                 default = nil)
  if valid_612019 != nil:
    section.add "X-Amz-Date", valid_612019
  var valid_612020 = header.getOrDefault("X-Amz-Credential")
  valid_612020 = validateParameter(valid_612020, JString, required = false,
                                 default = nil)
  if valid_612020 != nil:
    section.add "X-Amz-Credential", valid_612020
  var valid_612021 = header.getOrDefault("X-Amz-Security-Token")
  valid_612021 = validateParameter(valid_612021, JString, required = false,
                                 default = nil)
  if valid_612021 != nil:
    section.add "X-Amz-Security-Token", valid_612021
  var valid_612022 = header.getOrDefault("X-Amz-Algorithm")
  valid_612022 = validateParameter(valid_612022, JString, required = false,
                                 default = nil)
  if valid_612022 != nil:
    section.add "X-Amz-Algorithm", valid_612022
  var valid_612023 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612023 = validateParameter(valid_612023, JString, required = false,
                                 default = nil)
  if valid_612023 != nil:
    section.add "X-Amz-SignedHeaders", valid_612023
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_612024 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_612024 = validateParameter(valid_612024, JString, required = true,
                                 default = nil)
  if valid_612024 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_612024
  var valid_612025 = formData.getOrDefault("Tags")
  valid_612025 = validateParameter(valid_612025, JArray, required = false,
                                 default = nil)
  if valid_612025 != nil:
    section.add "Tags", valid_612025
  var valid_612026 = formData.getOrDefault("DBClusterIdentifier")
  valid_612026 = validateParameter(valid_612026, JString, required = true,
                                 default = nil)
  if valid_612026 != nil:
    section.add "DBClusterIdentifier", valid_612026
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612027: Call_PostCreateDBClusterSnapshot_612012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612027.validator(path, query, header, formData, body)
  let scheme = call_612027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612027.url(scheme.get, call_612027.host, call_612027.base,
                         call_612027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612027, url, valid)

proc call*(call_612028: Call_PostCreateDBClusterSnapshot_612012;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Action: string = "CreateDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_612029 = newJObject()
  var formData_612030 = newJObject()
  add(formData_612030, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_612029, "Action", newJString(Action))
  if Tags != nil:
    formData_612030.add "Tags", Tags
  add(query_612029, "Version", newJString(Version))
  add(formData_612030, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_612028.call(nil, query_612029, nil, formData_612030, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_612012(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_612013, base: "/",
    url: url_PostCreateDBClusterSnapshot_612014,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_611994 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBClusterSnapshot_611996(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterSnapshot_611995(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_611997 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_611997 = validateParameter(valid_611997, JString, required = true,
                                 default = nil)
  if valid_611997 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_611997
  var valid_611998 = query.getOrDefault("Tags")
  valid_611998 = validateParameter(valid_611998, JArray, required = false,
                                 default = nil)
  if valid_611998 != nil:
    section.add "Tags", valid_611998
  var valid_611999 = query.getOrDefault("DBClusterIdentifier")
  valid_611999 = validateParameter(valid_611999, JString, required = true,
                                 default = nil)
  if valid_611999 != nil:
    section.add "DBClusterIdentifier", valid_611999
  var valid_612000 = query.getOrDefault("Action")
  valid_612000 = validateParameter(valid_612000, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_612000 != nil:
    section.add "Action", valid_612000
  var valid_612001 = query.getOrDefault("Version")
  valid_612001 = validateParameter(valid_612001, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612001 != nil:
    section.add "Version", valid_612001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612002 = header.getOrDefault("X-Amz-Signature")
  valid_612002 = validateParameter(valid_612002, JString, required = false,
                                 default = nil)
  if valid_612002 != nil:
    section.add "X-Amz-Signature", valid_612002
  var valid_612003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612003 = validateParameter(valid_612003, JString, required = false,
                                 default = nil)
  if valid_612003 != nil:
    section.add "X-Amz-Content-Sha256", valid_612003
  var valid_612004 = header.getOrDefault("X-Amz-Date")
  valid_612004 = validateParameter(valid_612004, JString, required = false,
                                 default = nil)
  if valid_612004 != nil:
    section.add "X-Amz-Date", valid_612004
  var valid_612005 = header.getOrDefault("X-Amz-Credential")
  valid_612005 = validateParameter(valid_612005, JString, required = false,
                                 default = nil)
  if valid_612005 != nil:
    section.add "X-Amz-Credential", valid_612005
  var valid_612006 = header.getOrDefault("X-Amz-Security-Token")
  valid_612006 = validateParameter(valid_612006, JString, required = false,
                                 default = nil)
  if valid_612006 != nil:
    section.add "X-Amz-Security-Token", valid_612006
  var valid_612007 = header.getOrDefault("X-Amz-Algorithm")
  valid_612007 = validateParameter(valid_612007, JString, required = false,
                                 default = nil)
  if valid_612007 != nil:
    section.add "X-Amz-Algorithm", valid_612007
  var valid_612008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612008 = validateParameter(valid_612008, JString, required = false,
                                 default = nil)
  if valid_612008 != nil:
    section.add "X-Amz-SignedHeaders", valid_612008
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612009: Call_GetCreateDBClusterSnapshot_611994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612009.validator(path, query, header, formData, body)
  let scheme = call_612009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612009.url(scheme.get, call_612009.host, call_612009.base,
                         call_612009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612009, url, valid)

proc call*(call_612010: Call_GetCreateDBClusterSnapshot_611994;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612011 = newJObject()
  add(query_612011, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_612011.add "Tags", Tags
  add(query_612011, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_612011, "Action", newJString(Action))
  add(query_612011, "Version", newJString(Version))
  result = call_612010.call(nil, query_612011, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_611994(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_611995, base: "/",
    url: url_GetCreateDBClusterSnapshot_611996,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_612092 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBInstance_612094(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstance_612093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612095 = query.getOrDefault("Action")
  valid_612095 = validateParameter(valid_612095, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_612095 != nil:
    section.add "Action", valid_612095
  var valid_612096 = query.getOrDefault("Version")
  valid_612096 = validateParameter(valid_612096, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612096 != nil:
    section.add "Version", valid_612096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_612097 = header.getOrDefault("X-Amz-Security-Token")
  valid_612097 = validateParameter(valid_612097, JString, required = false,
                                 default = nil)
  if valid_612097 != nil:
    section.add "X-Amz-Security-Token", valid_612097
  var valid_612098 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612098 = validateParameter(valid_612098, JString, required = false,
                                 default = nil)
  if valid_612098 != nil:
    section.add "X-Amz-SignedHeaders", valid_612098
  var valid_612099 = header.getOrDefault("X-Amz-Signature")
  valid_612099 = validateParameter(valid_612099, JString, required = false,
                                 default = nil)
  if valid_612099 != nil:
    section.add "X-Amz-Signature", valid_612099
  var valid_612100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612100 = validateParameter(valid_612100, JString, required = false,
                                 default = nil)
  if valid_612100 != nil:
    section.add "X-Amz-Content-Sha256", valid_612100
  var valid_612101 = header.getOrDefault("X-Amz-Date")
  valid_612101 = validateParameter(valid_612101, JString, required = false,
                                 default = nil)
  if valid_612101 != nil:
    section.add "X-Amz-Date", valid_612101
  var valid_612102 = header.getOrDefault("X-Amz-Credential")
  valid_612102 = validateParameter(valid_612102, JString, required = false,
                                 default = nil)
  if valid_612102 != nil:
    section.add "X-Amz-Credential", valid_612102
  var valid_612103 = header.getOrDefault("X-Amz-Algorithm")
  valid_612103 = validateParameter(valid_612103, JString, required = false,
                                 default = nil)
  if valid_612103 != nil:
    section.add "X-Amz-Algorithm", valid_612103
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  section = newJObject()
  var valid_612104 = formData.getOrDefault("PromotionTier")
  valid_612104 = validateParameter(valid_612104, JInt, required = false, default = nil)
  if valid_612104 != nil:
    section.add "PromotionTier", valid_612104
  var valid_612105 = formData.getOrDefault("Port")
  valid_612105 = validateParameter(valid_612105, JInt, required = false, default = nil)
  if valid_612105 != nil:
    section.add "Port", valid_612105
  var valid_612106 = formData.getOrDefault("MultiAZ")
  valid_612106 = validateParameter(valid_612106, JBool, required = false, default = nil)
  if valid_612106 != nil:
    section.add "MultiAZ", valid_612106
  var valid_612107 = formData.getOrDefault("MasterUsername")
  valid_612107 = validateParameter(valid_612107, JString, required = false,
                                 default = nil)
  if valid_612107 != nil:
    section.add "MasterUsername", valid_612107
  var valid_612108 = formData.getOrDefault("MonitoringRoleArn")
  valid_612108 = validateParameter(valid_612108, JString, required = false,
                                 default = nil)
  if valid_612108 != nil:
    section.add "MonitoringRoleArn", valid_612108
  var valid_612109 = formData.getOrDefault("MonitoringInterval")
  valid_612109 = validateParameter(valid_612109, JInt, required = false, default = nil)
  if valid_612109 != nil:
    section.add "MonitoringInterval", valid_612109
  var valid_612110 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_612110 = validateParameter(valid_612110, JArray, required = false,
                                 default = nil)
  if valid_612110 != nil:
    section.add "VpcSecurityGroupIds", valid_612110
  var valid_612111 = formData.getOrDefault("AvailabilityZone")
  valid_612111 = validateParameter(valid_612111, JString, required = false,
                                 default = nil)
  if valid_612111 != nil:
    section.add "AvailabilityZone", valid_612111
  var valid_612112 = formData.getOrDefault("EnablePerformanceInsights")
  valid_612112 = validateParameter(valid_612112, JBool, required = false, default = nil)
  if valid_612112 != nil:
    section.add "EnablePerformanceInsights", valid_612112
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_612113 = formData.getOrDefault("DBInstanceIdentifier")
  valid_612113 = validateParameter(valid_612113, JString, required = true,
                                 default = nil)
  if valid_612113 != nil:
    section.add "DBInstanceIdentifier", valid_612113
  var valid_612114 = formData.getOrDefault("TdeCredentialArn")
  valid_612114 = validateParameter(valid_612114, JString, required = false,
                                 default = nil)
  if valid_612114 != nil:
    section.add "TdeCredentialArn", valid_612114
  var valid_612115 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_612115 = validateParameter(valid_612115, JArray, required = false,
                                 default = nil)
  if valid_612115 != nil:
    section.add "EnableCloudwatchLogsExports", valid_612115
  var valid_612116 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_612116 = validateParameter(valid_612116, JInt, required = false, default = nil)
  if valid_612116 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_612116
  var valid_612117 = formData.getOrDefault("DBSubnetGroupName")
  valid_612117 = validateParameter(valid_612117, JString, required = false,
                                 default = nil)
  if valid_612117 != nil:
    section.add "DBSubnetGroupName", valid_612117
  var valid_612118 = formData.getOrDefault("CharacterSetName")
  valid_612118 = validateParameter(valid_612118, JString, required = false,
                                 default = nil)
  if valid_612118 != nil:
    section.add "CharacterSetName", valid_612118
  var valid_612119 = formData.getOrDefault("StorageType")
  valid_612119 = validateParameter(valid_612119, JString, required = false,
                                 default = nil)
  if valid_612119 != nil:
    section.add "StorageType", valid_612119
  var valid_612120 = formData.getOrDefault("MaxAllocatedStorage")
  valid_612120 = validateParameter(valid_612120, JInt, required = false, default = nil)
  if valid_612120 != nil:
    section.add "MaxAllocatedStorage", valid_612120
  var valid_612121 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_612121 = validateParameter(valid_612121, JBool, required = false, default = nil)
  if valid_612121 != nil:
    section.add "CopyTagsToSnapshot", valid_612121
  var valid_612122 = formData.getOrDefault("DeletionProtection")
  valid_612122 = validateParameter(valid_612122, JBool, required = false, default = nil)
  if valid_612122 != nil:
    section.add "DeletionProtection", valid_612122
  var valid_612123 = formData.getOrDefault("ProcessorFeatures")
  valid_612123 = validateParameter(valid_612123, JArray, required = false,
                                 default = nil)
  if valid_612123 != nil:
    section.add "ProcessorFeatures", valid_612123
  var valid_612124 = formData.getOrDefault("AllocatedStorage")
  valid_612124 = validateParameter(valid_612124, JInt, required = false, default = nil)
  if valid_612124 != nil:
    section.add "AllocatedStorage", valid_612124
  var valid_612125 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_612125 = validateParameter(valid_612125, JString, required = false,
                                 default = nil)
  if valid_612125 != nil:
    section.add "PreferredMaintenanceWindow", valid_612125
  var valid_612126 = formData.getOrDefault("DBInstanceClass")
  valid_612126 = validateParameter(valid_612126, JString, required = true,
                                 default = nil)
  if valid_612126 != nil:
    section.add "DBInstanceClass", valid_612126
  var valid_612127 = formData.getOrDefault("PreferredBackupWindow")
  valid_612127 = validateParameter(valid_612127, JString, required = false,
                                 default = nil)
  if valid_612127 != nil:
    section.add "PreferredBackupWindow", valid_612127
  var valid_612128 = formData.getOrDefault("MasterUserPassword")
  valid_612128 = validateParameter(valid_612128, JString, required = false,
                                 default = nil)
  if valid_612128 != nil:
    section.add "MasterUserPassword", valid_612128
  var valid_612129 = formData.getOrDefault("Domain")
  valid_612129 = validateParameter(valid_612129, JString, required = false,
                                 default = nil)
  if valid_612129 != nil:
    section.add "Domain", valid_612129
  var valid_612130 = formData.getOrDefault("Timezone")
  valid_612130 = validateParameter(valid_612130, JString, required = false,
                                 default = nil)
  if valid_612130 != nil:
    section.add "Timezone", valid_612130
  var valid_612131 = formData.getOrDefault("DBParameterGroupName")
  valid_612131 = validateParameter(valid_612131, JString, required = false,
                                 default = nil)
  if valid_612131 != nil:
    section.add "DBParameterGroupName", valid_612131
  var valid_612132 = formData.getOrDefault("EngineVersion")
  valid_612132 = validateParameter(valid_612132, JString, required = false,
                                 default = nil)
  if valid_612132 != nil:
    section.add "EngineVersion", valid_612132
  var valid_612133 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_612133 = validateParameter(valid_612133, JBool, required = false, default = nil)
  if valid_612133 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_612133
  var valid_612134 = formData.getOrDefault("BackupRetentionPeriod")
  valid_612134 = validateParameter(valid_612134, JInt, required = false, default = nil)
  if valid_612134 != nil:
    section.add "BackupRetentionPeriod", valid_612134
  var valid_612135 = formData.getOrDefault("KmsKeyId")
  valid_612135 = validateParameter(valid_612135, JString, required = false,
                                 default = nil)
  if valid_612135 != nil:
    section.add "KmsKeyId", valid_612135
  var valid_612136 = formData.getOrDefault("Engine")
  valid_612136 = validateParameter(valid_612136, JString, required = true,
                                 default = nil)
  if valid_612136 != nil:
    section.add "Engine", valid_612136
  var valid_612137 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_612137 = validateParameter(valid_612137, JBool, required = false, default = nil)
  if valid_612137 != nil:
    section.add "AutoMinorVersionUpgrade", valid_612137
  var valid_612138 = formData.getOrDefault("TdeCredentialPassword")
  valid_612138 = validateParameter(valid_612138, JString, required = false,
                                 default = nil)
  if valid_612138 != nil:
    section.add "TdeCredentialPassword", valid_612138
  var valid_612139 = formData.getOrDefault("DBName")
  valid_612139 = validateParameter(valid_612139, JString, required = false,
                                 default = nil)
  if valid_612139 != nil:
    section.add "DBName", valid_612139
  var valid_612140 = formData.getOrDefault("Iops")
  valid_612140 = validateParameter(valid_612140, JInt, required = false, default = nil)
  if valid_612140 != nil:
    section.add "Iops", valid_612140
  var valid_612141 = formData.getOrDefault("PubliclyAccessible")
  valid_612141 = validateParameter(valid_612141, JBool, required = false, default = nil)
  if valid_612141 != nil:
    section.add "PubliclyAccessible", valid_612141
  var valid_612142 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_612142 = validateParameter(valid_612142, JString, required = false,
                                 default = nil)
  if valid_612142 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_612142
  var valid_612143 = formData.getOrDefault("LicenseModel")
  valid_612143 = validateParameter(valid_612143, JString, required = false,
                                 default = nil)
  if valid_612143 != nil:
    section.add "LicenseModel", valid_612143
  var valid_612144 = formData.getOrDefault("Tags")
  valid_612144 = validateParameter(valid_612144, JArray, required = false,
                                 default = nil)
  if valid_612144 != nil:
    section.add "Tags", valid_612144
  var valid_612145 = formData.getOrDefault("DomainIAMRoleName")
  valid_612145 = validateParameter(valid_612145, JString, required = false,
                                 default = nil)
  if valid_612145 != nil:
    section.add "DomainIAMRoleName", valid_612145
  var valid_612146 = formData.getOrDefault("OptionGroupName")
  valid_612146 = validateParameter(valid_612146, JString, required = false,
                                 default = nil)
  if valid_612146 != nil:
    section.add "OptionGroupName", valid_612146
  var valid_612147 = formData.getOrDefault("DBSecurityGroups")
  valid_612147 = validateParameter(valid_612147, JArray, required = false,
                                 default = nil)
  if valid_612147 != nil:
    section.add "DBSecurityGroups", valid_612147
  var valid_612148 = formData.getOrDefault("StorageEncrypted")
  valid_612148 = validateParameter(valid_612148, JBool, required = false, default = nil)
  if valid_612148 != nil:
    section.add "StorageEncrypted", valid_612148
  var valid_612149 = formData.getOrDefault("DBClusterIdentifier")
  valid_612149 = validateParameter(valid_612149, JString, required = false,
                                 default = nil)
  if valid_612149 != nil:
    section.add "DBClusterIdentifier", valid_612149
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612150: Call_PostCreateDBInstance_612092; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_612150.validator(path, query, header, formData, body)
  let scheme = call_612150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612150.url(scheme.get, call_612150.host, call_612150.base,
                         call_612150.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612150, url, valid)

proc call*(call_612151: Call_PostCreateDBInstance_612092;
          DBInstanceIdentifier: string; DBInstanceClass: string; Engine: string;
          PromotionTier: int = 0; Port: int = 0; MultiAZ: bool = false;
          MasterUsername: string = ""; MonitoringRoleArn: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; EnablePerformanceInsights: bool = false;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; CharacterSetName: string = "";
          StorageType: string = ""; MaxAllocatedStorage: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          Domain: string = ""; Timezone: string = ""; DBParameterGroupName: string = "";
          EngineVersion: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  var query_612152 = newJObject()
  var formData_612153 = newJObject()
  add(formData_612153, "PromotionTier", newJInt(PromotionTier))
  add(formData_612153, "Port", newJInt(Port))
  add(formData_612153, "MultiAZ", newJBool(MultiAZ))
  add(formData_612153, "MasterUsername", newJString(MasterUsername))
  add(formData_612153, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_612153, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_612153.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_612153, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_612153, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_612153, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_612153, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_612153.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_612152, "Action", newJString(Action))
  add(formData_612153, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_612153, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_612153, "CharacterSetName", newJString(CharacterSetName))
  add(formData_612153, "StorageType", newJString(StorageType))
  add(formData_612153, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_612153, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_612153, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_612153.add "ProcessorFeatures", ProcessorFeatures
  add(formData_612153, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_612153, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_612153, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_612153, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_612153, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_612153, "Domain", newJString(Domain))
  add(formData_612153, "Timezone", newJString(Timezone))
  add(formData_612153, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_612153, "EngineVersion", newJString(EngineVersion))
  add(formData_612153, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_612153, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_612153, "KmsKeyId", newJString(KmsKeyId))
  add(formData_612153, "Engine", newJString(Engine))
  add(formData_612153, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_612153, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_612153, "DBName", newJString(DBName))
  add(formData_612153, "Iops", newJInt(Iops))
  add(formData_612153, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_612153, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_612153, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_612153.add "Tags", Tags
  add(formData_612153, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_612153, "OptionGroupName", newJString(OptionGroupName))
  add(query_612152, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_612153.add "DBSecurityGroups", DBSecurityGroups
  add(formData_612153, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_612153, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_612151.call(nil, query_612152, nil, formData_612153, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_612092(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_612093, base: "/",
    url: url_PostCreateDBInstance_612094, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_612031 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBInstance_612033(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstance_612032(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: JString (required)
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_612034 = query.getOrDefault("Engine")
  valid_612034 = validateParameter(valid_612034, JString, required = true,
                                 default = nil)
  if valid_612034 != nil:
    section.add "Engine", valid_612034
  var valid_612035 = query.getOrDefault("CopyTagsToSnapshot")
  valid_612035 = validateParameter(valid_612035, JBool, required = false, default = nil)
  if valid_612035 != nil:
    section.add "CopyTagsToSnapshot", valid_612035
  var valid_612036 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_612036 = validateParameter(valid_612036, JInt, required = false, default = nil)
  if valid_612036 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_612036
  var valid_612037 = query.getOrDefault("MonitoringInterval")
  valid_612037 = validateParameter(valid_612037, JInt, required = false, default = nil)
  if valid_612037 != nil:
    section.add "MonitoringInterval", valid_612037
  var valid_612038 = query.getOrDefault("KmsKeyId")
  valid_612038 = validateParameter(valid_612038, JString, required = false,
                                 default = nil)
  if valid_612038 != nil:
    section.add "KmsKeyId", valid_612038
  var valid_612039 = query.getOrDefault("MonitoringRoleArn")
  valid_612039 = validateParameter(valid_612039, JString, required = false,
                                 default = nil)
  if valid_612039 != nil:
    section.add "MonitoringRoleArn", valid_612039
  var valid_612040 = query.getOrDefault("ProcessorFeatures")
  valid_612040 = validateParameter(valid_612040, JArray, required = false,
                                 default = nil)
  if valid_612040 != nil:
    section.add "ProcessorFeatures", valid_612040
  var valid_612041 = query.getOrDefault("MasterUsername")
  valid_612041 = validateParameter(valid_612041, JString, required = false,
                                 default = nil)
  if valid_612041 != nil:
    section.add "MasterUsername", valid_612041
  var valid_612042 = query.getOrDefault("BackupRetentionPeriod")
  valid_612042 = validateParameter(valid_612042, JInt, required = false, default = nil)
  if valid_612042 != nil:
    section.add "BackupRetentionPeriod", valid_612042
  var valid_612043 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_612043 = validateParameter(valid_612043, JArray, required = false,
                                 default = nil)
  if valid_612043 != nil:
    section.add "EnableCloudwatchLogsExports", valid_612043
  var valid_612044 = query.getOrDefault("EngineVersion")
  valid_612044 = validateParameter(valid_612044, JString, required = false,
                                 default = nil)
  if valid_612044 != nil:
    section.add "EngineVersion", valid_612044
  var valid_612045 = query.getOrDefault("Action")
  valid_612045 = validateParameter(valid_612045, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_612045 != nil:
    section.add "Action", valid_612045
  var valid_612046 = query.getOrDefault("Domain")
  valid_612046 = validateParameter(valid_612046, JString, required = false,
                                 default = nil)
  if valid_612046 != nil:
    section.add "Domain", valid_612046
  var valid_612047 = query.getOrDefault("VpcSecurityGroupIds")
  valid_612047 = validateParameter(valid_612047, JArray, required = false,
                                 default = nil)
  if valid_612047 != nil:
    section.add "VpcSecurityGroupIds", valid_612047
  var valid_612048 = query.getOrDefault("AllocatedStorage")
  valid_612048 = validateParameter(valid_612048, JInt, required = false, default = nil)
  if valid_612048 != nil:
    section.add "AllocatedStorage", valid_612048
  var valid_612049 = query.getOrDefault("EnablePerformanceInsights")
  valid_612049 = validateParameter(valid_612049, JBool, required = false, default = nil)
  if valid_612049 != nil:
    section.add "EnablePerformanceInsights", valid_612049
  var valid_612050 = query.getOrDefault("PubliclyAccessible")
  valid_612050 = validateParameter(valid_612050, JBool, required = false, default = nil)
  if valid_612050 != nil:
    section.add "PubliclyAccessible", valid_612050
  var valid_612051 = query.getOrDefault("DBName")
  valid_612051 = validateParameter(valid_612051, JString, required = false,
                                 default = nil)
  if valid_612051 != nil:
    section.add "DBName", valid_612051
  var valid_612052 = query.getOrDefault("TdeCredentialPassword")
  valid_612052 = validateParameter(valid_612052, JString, required = false,
                                 default = nil)
  if valid_612052 != nil:
    section.add "TdeCredentialPassword", valid_612052
  var valid_612053 = query.getOrDefault("StorageEncrypted")
  valid_612053 = validateParameter(valid_612053, JBool, required = false, default = nil)
  if valid_612053 != nil:
    section.add "StorageEncrypted", valid_612053
  var valid_612054 = query.getOrDefault("DBParameterGroupName")
  valid_612054 = validateParameter(valid_612054, JString, required = false,
                                 default = nil)
  if valid_612054 != nil:
    section.add "DBParameterGroupName", valid_612054
  var valid_612055 = query.getOrDefault("DeletionProtection")
  valid_612055 = validateParameter(valid_612055, JBool, required = false, default = nil)
  if valid_612055 != nil:
    section.add "DeletionProtection", valid_612055
  var valid_612056 = query.getOrDefault("CharacterSetName")
  valid_612056 = validateParameter(valid_612056, JString, required = false,
                                 default = nil)
  if valid_612056 != nil:
    section.add "CharacterSetName", valid_612056
  var valid_612057 = query.getOrDefault("Tags")
  valid_612057 = validateParameter(valid_612057, JArray, required = false,
                                 default = nil)
  if valid_612057 != nil:
    section.add "Tags", valid_612057
  var valid_612058 = query.getOrDefault("MaxAllocatedStorage")
  valid_612058 = validateParameter(valid_612058, JInt, required = false, default = nil)
  if valid_612058 != nil:
    section.add "MaxAllocatedStorage", valid_612058
  var valid_612059 = query.getOrDefault("DBClusterIdentifier")
  valid_612059 = validateParameter(valid_612059, JString, required = false,
                                 default = nil)
  if valid_612059 != nil:
    section.add "DBClusterIdentifier", valid_612059
  var valid_612060 = query.getOrDefault("LicenseModel")
  valid_612060 = validateParameter(valid_612060, JString, required = false,
                                 default = nil)
  if valid_612060 != nil:
    section.add "LicenseModel", valid_612060
  var valid_612061 = query.getOrDefault("DBInstanceIdentifier")
  valid_612061 = validateParameter(valid_612061, JString, required = true,
                                 default = nil)
  if valid_612061 != nil:
    section.add "DBInstanceIdentifier", valid_612061
  var valid_612062 = query.getOrDefault("TdeCredentialArn")
  valid_612062 = validateParameter(valid_612062, JString, required = false,
                                 default = nil)
  if valid_612062 != nil:
    section.add "TdeCredentialArn", valid_612062
  var valid_612063 = query.getOrDefault("PromotionTier")
  valid_612063 = validateParameter(valid_612063, JInt, required = false, default = nil)
  if valid_612063 != nil:
    section.add "PromotionTier", valid_612063
  var valid_612064 = query.getOrDefault("StorageType")
  valid_612064 = validateParameter(valid_612064, JString, required = false,
                                 default = nil)
  if valid_612064 != nil:
    section.add "StorageType", valid_612064
  var valid_612065 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_612065 = validateParameter(valid_612065, JBool, required = false, default = nil)
  if valid_612065 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_612065
  var valid_612066 = query.getOrDefault("MultiAZ")
  valid_612066 = validateParameter(valid_612066, JBool, required = false, default = nil)
  if valid_612066 != nil:
    section.add "MultiAZ", valid_612066
  var valid_612067 = query.getOrDefault("DBSecurityGroups")
  valid_612067 = validateParameter(valid_612067, JArray, required = false,
                                 default = nil)
  if valid_612067 != nil:
    section.add "DBSecurityGroups", valid_612067
  var valid_612068 = query.getOrDefault("Port")
  valid_612068 = validateParameter(valid_612068, JInt, required = false, default = nil)
  if valid_612068 != nil:
    section.add "Port", valid_612068
  var valid_612069 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_612069 = validateParameter(valid_612069, JString, required = false,
                                 default = nil)
  if valid_612069 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_612069
  var valid_612070 = query.getOrDefault("MasterUserPassword")
  valid_612070 = validateParameter(valid_612070, JString, required = false,
                                 default = nil)
  if valid_612070 != nil:
    section.add "MasterUserPassword", valid_612070
  var valid_612071 = query.getOrDefault("AvailabilityZone")
  valid_612071 = validateParameter(valid_612071, JString, required = false,
                                 default = nil)
  if valid_612071 != nil:
    section.add "AvailabilityZone", valid_612071
  var valid_612072 = query.getOrDefault("OptionGroupName")
  valid_612072 = validateParameter(valid_612072, JString, required = false,
                                 default = nil)
  if valid_612072 != nil:
    section.add "OptionGroupName", valid_612072
  var valid_612073 = query.getOrDefault("DBSubnetGroupName")
  valid_612073 = validateParameter(valid_612073, JString, required = false,
                                 default = nil)
  if valid_612073 != nil:
    section.add "DBSubnetGroupName", valid_612073
  var valid_612074 = query.getOrDefault("PreferredBackupWindow")
  valid_612074 = validateParameter(valid_612074, JString, required = false,
                                 default = nil)
  if valid_612074 != nil:
    section.add "PreferredBackupWindow", valid_612074
  var valid_612075 = query.getOrDefault("DBInstanceClass")
  valid_612075 = validateParameter(valid_612075, JString, required = true,
                                 default = nil)
  if valid_612075 != nil:
    section.add "DBInstanceClass", valid_612075
  var valid_612076 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_612076 = validateParameter(valid_612076, JString, required = false,
                                 default = nil)
  if valid_612076 != nil:
    section.add "PreferredMaintenanceWindow", valid_612076
  var valid_612077 = query.getOrDefault("Timezone")
  valid_612077 = validateParameter(valid_612077, JString, required = false,
                                 default = nil)
  if valid_612077 != nil:
    section.add "Timezone", valid_612077
  var valid_612078 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_612078 = validateParameter(valid_612078, JBool, required = false, default = nil)
  if valid_612078 != nil:
    section.add "AutoMinorVersionUpgrade", valid_612078
  var valid_612079 = query.getOrDefault("Iops")
  valid_612079 = validateParameter(valid_612079, JInt, required = false, default = nil)
  if valid_612079 != nil:
    section.add "Iops", valid_612079
  var valid_612080 = query.getOrDefault("Version")
  valid_612080 = validateParameter(valid_612080, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612080 != nil:
    section.add "Version", valid_612080
  var valid_612081 = query.getOrDefault("DomainIAMRoleName")
  valid_612081 = validateParameter(valid_612081, JString, required = false,
                                 default = nil)
  if valid_612081 != nil:
    section.add "DomainIAMRoleName", valid_612081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_612082 = header.getOrDefault("X-Amz-Security-Token")
  valid_612082 = validateParameter(valid_612082, JString, required = false,
                                 default = nil)
  if valid_612082 != nil:
    section.add "X-Amz-Security-Token", valid_612082
  var valid_612083 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612083 = validateParameter(valid_612083, JString, required = false,
                                 default = nil)
  if valid_612083 != nil:
    section.add "X-Amz-SignedHeaders", valid_612083
  var valid_612084 = header.getOrDefault("X-Amz-Signature")
  valid_612084 = validateParameter(valid_612084, JString, required = false,
                                 default = nil)
  if valid_612084 != nil:
    section.add "X-Amz-Signature", valid_612084
  var valid_612085 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612085 = validateParameter(valid_612085, JString, required = false,
                                 default = nil)
  if valid_612085 != nil:
    section.add "X-Amz-Content-Sha256", valid_612085
  var valid_612086 = header.getOrDefault("X-Amz-Date")
  valid_612086 = validateParameter(valid_612086, JString, required = false,
                                 default = nil)
  if valid_612086 != nil:
    section.add "X-Amz-Date", valid_612086
  var valid_612087 = header.getOrDefault("X-Amz-Credential")
  valid_612087 = validateParameter(valid_612087, JString, required = false,
                                 default = nil)
  if valid_612087 != nil:
    section.add "X-Amz-Credential", valid_612087
  var valid_612088 = header.getOrDefault("X-Amz-Algorithm")
  valid_612088 = validateParameter(valid_612088, JString, required = false,
                                 default = nil)
  if valid_612088 != nil:
    section.add "X-Amz-Algorithm", valid_612088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612089: Call_GetCreateDBInstance_612031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_612089.validator(path, query, header, formData, body)
  let scheme = call_612089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612089.url(scheme.get, call_612089.host, call_612089.base,
                         call_612089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612089, url, valid)

proc call*(call_612090: Call_GetCreateDBInstance_612031; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; TdeCredentialPassword: string = "";
          StorageEncrypted: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false; CharacterSetName: string = "";
          Tags: JsonNode = nil; MaxAllocatedStorage: int = 0;
          DBClusterIdentifier: string = ""; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Timezone: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          Version: string = "2014-10-31"; DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: string (required)
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_612091 = newJObject()
  add(query_612091, "Engine", newJString(Engine))
  add(query_612091, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_612091, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_612091, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_612091, "KmsKeyId", newJString(KmsKeyId))
  add(query_612091, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  if ProcessorFeatures != nil:
    query_612091.add "ProcessorFeatures", ProcessorFeatures
  add(query_612091, "MasterUsername", newJString(MasterUsername))
  add(query_612091, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_612091.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_612091, "EngineVersion", newJString(EngineVersion))
  add(query_612091, "Action", newJString(Action))
  add(query_612091, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_612091.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_612091, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_612091, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_612091, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_612091, "DBName", newJString(DBName))
  add(query_612091, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_612091, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_612091, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_612091, "DeletionProtection", newJBool(DeletionProtection))
  add(query_612091, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_612091.add "Tags", Tags
  add(query_612091, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_612091, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_612091, "LicenseModel", newJString(LicenseModel))
  add(query_612091, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_612091, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_612091, "PromotionTier", newJInt(PromotionTier))
  add(query_612091, "StorageType", newJString(StorageType))
  add(query_612091, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_612091, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_612091.add "DBSecurityGroups", DBSecurityGroups
  add(query_612091, "Port", newJInt(Port))
  add(query_612091, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_612091, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_612091, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_612091, "OptionGroupName", newJString(OptionGroupName))
  add(query_612091, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_612091, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_612091, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_612091, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_612091, "Timezone", newJString(Timezone))
  add(query_612091, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_612091, "Iops", newJInt(Iops))
  add(query_612091, "Version", newJString(Version))
  add(query_612091, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_612090.call(nil, query_612091, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_612031(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_612032, base: "/",
    url: url_GetCreateDBInstance_612033, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstanceReadReplica_612200 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBInstanceReadReplica_612202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstanceReadReplica_612201(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612203 = query.getOrDefault("Action")
  valid_612203 = validateParameter(valid_612203, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_612203 != nil:
    section.add "Action", valid_612203
  var valid_612204 = query.getOrDefault("Version")
  valid_612204 = validateParameter(valid_612204, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612204 != nil:
    section.add "Version", valid_612204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612205 = header.getOrDefault("X-Amz-Signature")
  valid_612205 = validateParameter(valid_612205, JString, required = false,
                                 default = nil)
  if valid_612205 != nil:
    section.add "X-Amz-Signature", valid_612205
  var valid_612206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612206 = validateParameter(valid_612206, JString, required = false,
                                 default = nil)
  if valid_612206 != nil:
    section.add "X-Amz-Content-Sha256", valid_612206
  var valid_612207 = header.getOrDefault("X-Amz-Date")
  valid_612207 = validateParameter(valid_612207, JString, required = false,
                                 default = nil)
  if valid_612207 != nil:
    section.add "X-Amz-Date", valid_612207
  var valid_612208 = header.getOrDefault("X-Amz-Credential")
  valid_612208 = validateParameter(valid_612208, JString, required = false,
                                 default = nil)
  if valid_612208 != nil:
    section.add "X-Amz-Credential", valid_612208
  var valid_612209 = header.getOrDefault("X-Amz-Security-Token")
  valid_612209 = validateParameter(valid_612209, JString, required = false,
                                 default = nil)
  if valid_612209 != nil:
    section.add "X-Amz-Security-Token", valid_612209
  var valid_612210 = header.getOrDefault("X-Amz-Algorithm")
  valid_612210 = validateParameter(valid_612210, JString, required = false,
                                 default = nil)
  if valid_612210 != nil:
    section.add "X-Amz-Algorithm", valid_612210
  var valid_612211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612211 = validateParameter(valid_612211, JString, required = false,
                                 default = nil)
  if valid_612211 != nil:
    section.add "X-Amz-SignedHeaders", valid_612211
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_612212 = formData.getOrDefault("Port")
  valid_612212 = validateParameter(valid_612212, JInt, required = false, default = nil)
  if valid_612212 != nil:
    section.add "Port", valid_612212
  var valid_612213 = formData.getOrDefault("DBInstanceClass")
  valid_612213 = validateParameter(valid_612213, JString, required = false,
                                 default = nil)
  if valid_612213 != nil:
    section.add "DBInstanceClass", valid_612213
  var valid_612214 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_612214 = validateParameter(valid_612214, JBool, required = false, default = nil)
  if valid_612214 != nil:
    section.add "UseDefaultProcessorFeatures", valid_612214
  var valid_612215 = formData.getOrDefault("MultiAZ")
  valid_612215 = validateParameter(valid_612215, JBool, required = false, default = nil)
  if valid_612215 != nil:
    section.add "MultiAZ", valid_612215
  var valid_612216 = formData.getOrDefault("Domain")
  valid_612216 = validateParameter(valid_612216, JString, required = false,
                                 default = nil)
  if valid_612216 != nil:
    section.add "Domain", valid_612216
  var valid_612217 = formData.getOrDefault("MonitoringRoleArn")
  valid_612217 = validateParameter(valid_612217, JString, required = false,
                                 default = nil)
  if valid_612217 != nil:
    section.add "MonitoringRoleArn", valid_612217
  assert formData != nil, "formData argument is necessary due to required `SourceDBInstanceIdentifier` field"
  var valid_612218 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_612218 = validateParameter(valid_612218, JString, required = true,
                                 default = nil)
  if valid_612218 != nil:
    section.add "SourceDBInstanceIdentifier", valid_612218
  var valid_612219 = formData.getOrDefault("DBParameterGroupName")
  valid_612219 = validateParameter(valid_612219, JString, required = false,
                                 default = nil)
  if valid_612219 != nil:
    section.add "DBParameterGroupName", valid_612219
  var valid_612220 = formData.getOrDefault("SourceRegion")
  valid_612220 = validateParameter(valid_612220, JString, required = false,
                                 default = nil)
  if valid_612220 != nil:
    section.add "SourceRegion", valid_612220
  var valid_612221 = formData.getOrDefault("MonitoringInterval")
  valid_612221 = validateParameter(valid_612221, JInt, required = false, default = nil)
  if valid_612221 != nil:
    section.add "MonitoringInterval", valid_612221
  var valid_612222 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_612222 = validateParameter(valid_612222, JArray, required = false,
                                 default = nil)
  if valid_612222 != nil:
    section.add "VpcSecurityGroupIds", valid_612222
  var valid_612223 = formData.getOrDefault("AvailabilityZone")
  valid_612223 = validateParameter(valid_612223, JString, required = false,
                                 default = nil)
  if valid_612223 != nil:
    section.add "AvailabilityZone", valid_612223
  var valid_612224 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_612224 = validateParameter(valid_612224, JBool, required = false, default = nil)
  if valid_612224 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_612224
  var valid_612225 = formData.getOrDefault("KmsKeyId")
  valid_612225 = validateParameter(valid_612225, JString, required = false,
                                 default = nil)
  if valid_612225 != nil:
    section.add "KmsKeyId", valid_612225
  var valid_612226 = formData.getOrDefault("EnablePerformanceInsights")
  valid_612226 = validateParameter(valid_612226, JBool, required = false, default = nil)
  if valid_612226 != nil:
    section.add "EnablePerformanceInsights", valid_612226
  var valid_612227 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_612227 = validateParameter(valid_612227, JBool, required = false, default = nil)
  if valid_612227 != nil:
    section.add "AutoMinorVersionUpgrade", valid_612227
  var valid_612228 = formData.getOrDefault("PreSignedUrl")
  valid_612228 = validateParameter(valid_612228, JString, required = false,
                                 default = nil)
  if valid_612228 != nil:
    section.add "PreSignedUrl", valid_612228
  var valid_612229 = formData.getOrDefault("DBInstanceIdentifier")
  valid_612229 = validateParameter(valid_612229, JString, required = true,
                                 default = nil)
  if valid_612229 != nil:
    section.add "DBInstanceIdentifier", valid_612229
  var valid_612230 = formData.getOrDefault("Iops")
  valid_612230 = validateParameter(valid_612230, JInt, required = false, default = nil)
  if valid_612230 != nil:
    section.add "Iops", valid_612230
  var valid_612231 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_612231 = validateParameter(valid_612231, JArray, required = false,
                                 default = nil)
  if valid_612231 != nil:
    section.add "EnableCloudwatchLogsExports", valid_612231
  var valid_612232 = formData.getOrDefault("PubliclyAccessible")
  valid_612232 = validateParameter(valid_612232, JBool, required = false, default = nil)
  if valid_612232 != nil:
    section.add "PubliclyAccessible", valid_612232
  var valid_612233 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_612233 = validateParameter(valid_612233, JString, required = false,
                                 default = nil)
  if valid_612233 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_612233
  var valid_612234 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_612234 = validateParameter(valid_612234, JInt, required = false, default = nil)
  if valid_612234 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_612234
  var valid_612235 = formData.getOrDefault("Tags")
  valid_612235 = validateParameter(valid_612235, JArray, required = false,
                                 default = nil)
  if valid_612235 != nil:
    section.add "Tags", valid_612235
  var valid_612236 = formData.getOrDefault("DBSubnetGroupName")
  valid_612236 = validateParameter(valid_612236, JString, required = false,
                                 default = nil)
  if valid_612236 != nil:
    section.add "DBSubnetGroupName", valid_612236
  var valid_612237 = formData.getOrDefault("DomainIAMRoleName")
  valid_612237 = validateParameter(valid_612237, JString, required = false,
                                 default = nil)
  if valid_612237 != nil:
    section.add "DomainIAMRoleName", valid_612237
  var valid_612238 = formData.getOrDefault("OptionGroupName")
  valid_612238 = validateParameter(valid_612238, JString, required = false,
                                 default = nil)
  if valid_612238 != nil:
    section.add "OptionGroupName", valid_612238
  var valid_612239 = formData.getOrDefault("StorageType")
  valid_612239 = validateParameter(valid_612239, JString, required = false,
                                 default = nil)
  if valid_612239 != nil:
    section.add "StorageType", valid_612239
  var valid_612240 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_612240 = validateParameter(valid_612240, JBool, required = false, default = nil)
  if valid_612240 != nil:
    section.add "CopyTagsToSnapshot", valid_612240
  var valid_612241 = formData.getOrDefault("DeletionProtection")
  valid_612241 = validateParameter(valid_612241, JBool, required = false, default = nil)
  if valid_612241 != nil:
    section.add "DeletionProtection", valid_612241
  var valid_612242 = formData.getOrDefault("ProcessorFeatures")
  valid_612242 = validateParameter(valid_612242, JArray, required = false,
                                 default = nil)
  if valid_612242 != nil:
    section.add "ProcessorFeatures", valid_612242
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612243: Call_PostCreateDBInstanceReadReplica_612200;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_612243.validator(path, query, header, formData, body)
  let scheme = call_612243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612243.url(scheme.get, call_612243.host, call_612243.base,
                         call_612243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612243, url, valid)

proc call*(call_612244: Call_PostCreateDBInstanceReadReplica_612200;
          SourceDBInstanceIdentifier: string; DBInstanceIdentifier: string;
          Port: int = 0; DBInstanceClass: string = "";
          UseDefaultProcessorFeatures: bool = false; MultiAZ: bool = false;
          Domain: string = ""; MonitoringRoleArn: string = "";
          DBParameterGroupName: string = ""; SourceRegion: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; PreSignedUrl: string = "";
          Iops: int = 0; EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "CreateDBInstanceReadReplica";
          PerformanceInsightsKMSKeyId: string = "";
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_612245 = newJObject()
  var formData_612246 = newJObject()
  add(formData_612246, "Port", newJInt(Port))
  add(formData_612246, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_612246, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_612246, "MultiAZ", newJBool(MultiAZ))
  add(formData_612246, "Domain", newJString(Domain))
  add(formData_612246, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_612246, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_612246, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_612246, "SourceRegion", newJString(SourceRegion))
  add(formData_612246, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_612246.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_612246, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_612246, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_612246, "KmsKeyId", newJString(KmsKeyId))
  add(formData_612246, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_612246, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_612246, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_612246, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_612246, "Iops", newJInt(Iops))
  if EnableCloudwatchLogsExports != nil:
    formData_612246.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_612246, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_612245, "Action", newJString(Action))
  add(formData_612246, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_612246, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    formData_612246.add "Tags", Tags
  add(formData_612246, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_612246, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_612246, "OptionGroupName", newJString(OptionGroupName))
  add(query_612245, "Version", newJString(Version))
  add(formData_612246, "StorageType", newJString(StorageType))
  add(formData_612246, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_612246, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_612246.add "ProcessorFeatures", ProcessorFeatures
  result = call_612244.call(nil, query_612245, nil, formData_612246, nil)

var postCreateDBInstanceReadReplica* = Call_PostCreateDBInstanceReadReplica_612200(
    name: "postCreateDBInstanceReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_PostCreateDBInstanceReadReplica_612201, base: "/",
    url: url_PostCreateDBInstanceReadReplica_612202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstanceReadReplica_612154 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBInstanceReadReplica_612156(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstanceReadReplica_612155(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_612157 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_612157 = validateParameter(valid_612157, JBool, required = false, default = nil)
  if valid_612157 != nil:
    section.add "UseDefaultProcessorFeatures", valid_612157
  var valid_612158 = query.getOrDefault("DeletionProtection")
  valid_612158 = validateParameter(valid_612158, JBool, required = false, default = nil)
  if valid_612158 != nil:
    section.add "DeletionProtection", valid_612158
  var valid_612159 = query.getOrDefault("DBParameterGroupName")
  valid_612159 = validateParameter(valid_612159, JString, required = false,
                                 default = nil)
  if valid_612159 != nil:
    section.add "DBParameterGroupName", valid_612159
  var valid_612160 = query.getOrDefault("CopyTagsToSnapshot")
  valid_612160 = validateParameter(valid_612160, JBool, required = false, default = nil)
  if valid_612160 != nil:
    section.add "CopyTagsToSnapshot", valid_612160
  var valid_612161 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_612161 = validateParameter(valid_612161, JInt, required = false, default = nil)
  if valid_612161 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_612161
  var valid_612162 = query.getOrDefault("Tags")
  valid_612162 = validateParameter(valid_612162, JArray, required = false,
                                 default = nil)
  if valid_612162 != nil:
    section.add "Tags", valid_612162
  var valid_612163 = query.getOrDefault("MonitoringInterval")
  valid_612163 = validateParameter(valid_612163, JInt, required = false, default = nil)
  if valid_612163 != nil:
    section.add "MonitoringInterval", valid_612163
  var valid_612164 = query.getOrDefault("MonitoringRoleArn")
  valid_612164 = validateParameter(valid_612164, JString, required = false,
                                 default = nil)
  if valid_612164 != nil:
    section.add "MonitoringRoleArn", valid_612164
  var valid_612165 = query.getOrDefault("KmsKeyId")
  valid_612165 = validateParameter(valid_612165, JString, required = false,
                                 default = nil)
  if valid_612165 != nil:
    section.add "KmsKeyId", valid_612165
  var valid_612166 = query.getOrDefault("PreSignedUrl")
  valid_612166 = validateParameter(valid_612166, JString, required = false,
                                 default = nil)
  if valid_612166 != nil:
    section.add "PreSignedUrl", valid_612166
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_612167 = query.getOrDefault("DBInstanceIdentifier")
  valid_612167 = validateParameter(valid_612167, JString, required = true,
                                 default = nil)
  if valid_612167 != nil:
    section.add "DBInstanceIdentifier", valid_612167
  var valid_612168 = query.getOrDefault("ProcessorFeatures")
  valid_612168 = validateParameter(valid_612168, JArray, required = false,
                                 default = nil)
  if valid_612168 != nil:
    section.add "ProcessorFeatures", valid_612168
  var valid_612169 = query.getOrDefault("StorageType")
  valid_612169 = validateParameter(valid_612169, JString, required = false,
                                 default = nil)
  if valid_612169 != nil:
    section.add "StorageType", valid_612169
  var valid_612170 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_612170 = validateParameter(valid_612170, JBool, required = false, default = nil)
  if valid_612170 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_612170
  var valid_612171 = query.getOrDefault("SourceRegion")
  valid_612171 = validateParameter(valid_612171, JString, required = false,
                                 default = nil)
  if valid_612171 != nil:
    section.add "SourceRegion", valid_612171
  var valid_612172 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_612172 = validateParameter(valid_612172, JArray, required = false,
                                 default = nil)
  if valid_612172 != nil:
    section.add "EnableCloudwatchLogsExports", valid_612172
  var valid_612173 = query.getOrDefault("Action")
  valid_612173 = validateParameter(valid_612173, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_612173 != nil:
    section.add "Action", valid_612173
  var valid_612174 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_612174 = validateParameter(valid_612174, JString, required = true,
                                 default = nil)
  if valid_612174 != nil:
    section.add "SourceDBInstanceIdentifier", valid_612174
  var valid_612175 = query.getOrDefault("MultiAZ")
  valid_612175 = validateParameter(valid_612175, JBool, required = false, default = nil)
  if valid_612175 != nil:
    section.add "MultiAZ", valid_612175
  var valid_612176 = query.getOrDefault("Port")
  valid_612176 = validateParameter(valid_612176, JInt, required = false, default = nil)
  if valid_612176 != nil:
    section.add "Port", valid_612176
  var valid_612177 = query.getOrDefault("Domain")
  valid_612177 = validateParameter(valid_612177, JString, required = false,
                                 default = nil)
  if valid_612177 != nil:
    section.add "Domain", valid_612177
  var valid_612178 = query.getOrDefault("VpcSecurityGroupIds")
  valid_612178 = validateParameter(valid_612178, JArray, required = false,
                                 default = nil)
  if valid_612178 != nil:
    section.add "VpcSecurityGroupIds", valid_612178
  var valid_612179 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_612179 = validateParameter(valid_612179, JString, required = false,
                                 default = nil)
  if valid_612179 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_612179
  var valid_612180 = query.getOrDefault("AvailabilityZone")
  valid_612180 = validateParameter(valid_612180, JString, required = false,
                                 default = nil)
  if valid_612180 != nil:
    section.add "AvailabilityZone", valid_612180
  var valid_612181 = query.getOrDefault("OptionGroupName")
  valid_612181 = validateParameter(valid_612181, JString, required = false,
                                 default = nil)
  if valid_612181 != nil:
    section.add "OptionGroupName", valid_612181
  var valid_612182 = query.getOrDefault("DBSubnetGroupName")
  valid_612182 = validateParameter(valid_612182, JString, required = false,
                                 default = nil)
  if valid_612182 != nil:
    section.add "DBSubnetGroupName", valid_612182
  var valid_612183 = query.getOrDefault("Version")
  valid_612183 = validateParameter(valid_612183, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612183 != nil:
    section.add "Version", valid_612183
  var valid_612184 = query.getOrDefault("DBInstanceClass")
  valid_612184 = validateParameter(valid_612184, JString, required = false,
                                 default = nil)
  if valid_612184 != nil:
    section.add "DBInstanceClass", valid_612184
  var valid_612185 = query.getOrDefault("PubliclyAccessible")
  valid_612185 = validateParameter(valid_612185, JBool, required = false, default = nil)
  if valid_612185 != nil:
    section.add "PubliclyAccessible", valid_612185
  var valid_612186 = query.getOrDefault("EnablePerformanceInsights")
  valid_612186 = validateParameter(valid_612186, JBool, required = false, default = nil)
  if valid_612186 != nil:
    section.add "EnablePerformanceInsights", valid_612186
  var valid_612187 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_612187 = validateParameter(valid_612187, JBool, required = false, default = nil)
  if valid_612187 != nil:
    section.add "AutoMinorVersionUpgrade", valid_612187
  var valid_612188 = query.getOrDefault("Iops")
  valid_612188 = validateParameter(valid_612188, JInt, required = false, default = nil)
  if valid_612188 != nil:
    section.add "Iops", valid_612188
  var valid_612189 = query.getOrDefault("DomainIAMRoleName")
  valid_612189 = validateParameter(valid_612189, JString, required = false,
                                 default = nil)
  if valid_612189 != nil:
    section.add "DomainIAMRoleName", valid_612189
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612190 = header.getOrDefault("X-Amz-Signature")
  valid_612190 = validateParameter(valid_612190, JString, required = false,
                                 default = nil)
  if valid_612190 != nil:
    section.add "X-Amz-Signature", valid_612190
  var valid_612191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612191 = validateParameter(valid_612191, JString, required = false,
                                 default = nil)
  if valid_612191 != nil:
    section.add "X-Amz-Content-Sha256", valid_612191
  var valid_612192 = header.getOrDefault("X-Amz-Date")
  valid_612192 = validateParameter(valid_612192, JString, required = false,
                                 default = nil)
  if valid_612192 != nil:
    section.add "X-Amz-Date", valid_612192
  var valid_612193 = header.getOrDefault("X-Amz-Credential")
  valid_612193 = validateParameter(valid_612193, JString, required = false,
                                 default = nil)
  if valid_612193 != nil:
    section.add "X-Amz-Credential", valid_612193
  var valid_612194 = header.getOrDefault("X-Amz-Security-Token")
  valid_612194 = validateParameter(valid_612194, JString, required = false,
                                 default = nil)
  if valid_612194 != nil:
    section.add "X-Amz-Security-Token", valid_612194
  var valid_612195 = header.getOrDefault("X-Amz-Algorithm")
  valid_612195 = validateParameter(valid_612195, JString, required = false,
                                 default = nil)
  if valid_612195 != nil:
    section.add "X-Amz-Algorithm", valid_612195
  var valid_612196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612196 = validateParameter(valid_612196, JString, required = false,
                                 default = nil)
  if valid_612196 != nil:
    section.add "X-Amz-SignedHeaders", valid_612196
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612197: Call_GetCreateDBInstanceReadReplica_612154; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_612197.validator(path, query, header, formData, body)
  let scheme = call_612197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612197.url(scheme.get, call_612197.host, call_612197.base,
                         call_612197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612197, url, valid)

proc call*(call_612198: Call_GetCreateDBInstanceReadReplica_612154;
          DBInstanceIdentifier: string; SourceDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false;
          DeletionProtection: bool = false; DBParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          MonitoringInterval: int = 0; MonitoringRoleArn: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; SourceRegion: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstanceReadReplica"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          PerformanceInsightsKMSKeyId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_612199 = newJObject()
  add(query_612199, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_612199, "DeletionProtection", newJBool(DeletionProtection))
  add(query_612199, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_612199, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_612199, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    query_612199.add "Tags", Tags
  add(query_612199, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_612199, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_612199, "KmsKeyId", newJString(KmsKeyId))
  add(query_612199, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_612199, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if ProcessorFeatures != nil:
    query_612199.add "ProcessorFeatures", ProcessorFeatures
  add(query_612199, "StorageType", newJString(StorageType))
  add(query_612199, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_612199, "SourceRegion", newJString(SourceRegion))
  if EnableCloudwatchLogsExports != nil:
    query_612199.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_612199, "Action", newJString(Action))
  add(query_612199, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_612199, "MultiAZ", newJBool(MultiAZ))
  add(query_612199, "Port", newJInt(Port))
  add(query_612199, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_612199.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_612199, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_612199, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_612199, "OptionGroupName", newJString(OptionGroupName))
  add(query_612199, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_612199, "Version", newJString(Version))
  add(query_612199, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_612199, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_612199, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_612199, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_612199, "Iops", newJInt(Iops))
  add(query_612199, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_612198.call(nil, query_612199, nil, nil, nil)

var getCreateDBInstanceReadReplica* = Call_GetCreateDBInstanceReadReplica_612154(
    name: "getCreateDBInstanceReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_GetCreateDBInstanceReadReplica_612155, base: "/",
    url: url_GetCreateDBInstanceReadReplica_612156,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_612266 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBParameterGroup_612268(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBParameterGroup_612267(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612269 = query.getOrDefault("Action")
  valid_612269 = validateParameter(valid_612269, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_612269 != nil:
    section.add "Action", valid_612269
  var valid_612270 = query.getOrDefault("Version")
  valid_612270 = validateParameter(valid_612270, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612270 != nil:
    section.add "Version", valid_612270
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612271 = header.getOrDefault("X-Amz-Signature")
  valid_612271 = validateParameter(valid_612271, JString, required = false,
                                 default = nil)
  if valid_612271 != nil:
    section.add "X-Amz-Signature", valid_612271
  var valid_612272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612272 = validateParameter(valid_612272, JString, required = false,
                                 default = nil)
  if valid_612272 != nil:
    section.add "X-Amz-Content-Sha256", valid_612272
  var valid_612273 = header.getOrDefault("X-Amz-Date")
  valid_612273 = validateParameter(valid_612273, JString, required = false,
                                 default = nil)
  if valid_612273 != nil:
    section.add "X-Amz-Date", valid_612273
  var valid_612274 = header.getOrDefault("X-Amz-Credential")
  valid_612274 = validateParameter(valid_612274, JString, required = false,
                                 default = nil)
  if valid_612274 != nil:
    section.add "X-Amz-Credential", valid_612274
  var valid_612275 = header.getOrDefault("X-Amz-Security-Token")
  valid_612275 = validateParameter(valid_612275, JString, required = false,
                                 default = nil)
  if valid_612275 != nil:
    section.add "X-Amz-Security-Token", valid_612275
  var valid_612276 = header.getOrDefault("X-Amz-Algorithm")
  valid_612276 = validateParameter(valid_612276, JString, required = false,
                                 default = nil)
  if valid_612276 != nil:
    section.add "X-Amz-Algorithm", valid_612276
  var valid_612277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612277 = validateParameter(valid_612277, JString, required = false,
                                 default = nil)
  if valid_612277 != nil:
    section.add "X-Amz-SignedHeaders", valid_612277
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_612278 = formData.getOrDefault("Description")
  valid_612278 = validateParameter(valid_612278, JString, required = true,
                                 default = nil)
  if valid_612278 != nil:
    section.add "Description", valid_612278
  var valid_612279 = formData.getOrDefault("DBParameterGroupName")
  valid_612279 = validateParameter(valid_612279, JString, required = true,
                                 default = nil)
  if valid_612279 != nil:
    section.add "DBParameterGroupName", valid_612279
  var valid_612280 = formData.getOrDefault("Tags")
  valid_612280 = validateParameter(valid_612280, JArray, required = false,
                                 default = nil)
  if valid_612280 != nil:
    section.add "Tags", valid_612280
  var valid_612281 = formData.getOrDefault("DBParameterGroupFamily")
  valid_612281 = validateParameter(valid_612281, JString, required = true,
                                 default = nil)
  if valid_612281 != nil:
    section.add "DBParameterGroupFamily", valid_612281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612282: Call_PostCreateDBParameterGroup_612266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_612282.validator(path, query, header, formData, body)
  let scheme = call_612282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612282.url(scheme.get, call_612282.host, call_612282.base,
                         call_612282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612282, url, valid)

proc call*(call_612283: Call_PostCreateDBParameterGroup_612266;
          Description: string; DBParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  var query_612284 = newJObject()
  var formData_612285 = newJObject()
  add(formData_612285, "Description", newJString(Description))
  add(formData_612285, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_612284, "Action", newJString(Action))
  if Tags != nil:
    formData_612285.add "Tags", Tags
  add(query_612284, "Version", newJString(Version))
  add(formData_612285, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_612283.call(nil, query_612284, nil, formData_612285, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_612266(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_612267, base: "/",
    url: url_PostCreateDBParameterGroup_612268,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_612247 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBParameterGroup_612249(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBParameterGroup_612248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_612250 = query.getOrDefault("DBParameterGroupFamily")
  valid_612250 = validateParameter(valid_612250, JString, required = true,
                                 default = nil)
  if valid_612250 != nil:
    section.add "DBParameterGroupFamily", valid_612250
  var valid_612251 = query.getOrDefault("DBParameterGroupName")
  valid_612251 = validateParameter(valid_612251, JString, required = true,
                                 default = nil)
  if valid_612251 != nil:
    section.add "DBParameterGroupName", valid_612251
  var valid_612252 = query.getOrDefault("Tags")
  valid_612252 = validateParameter(valid_612252, JArray, required = false,
                                 default = nil)
  if valid_612252 != nil:
    section.add "Tags", valid_612252
  var valid_612253 = query.getOrDefault("Action")
  valid_612253 = validateParameter(valid_612253, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_612253 != nil:
    section.add "Action", valid_612253
  var valid_612254 = query.getOrDefault("Description")
  valid_612254 = validateParameter(valid_612254, JString, required = true,
                                 default = nil)
  if valid_612254 != nil:
    section.add "Description", valid_612254
  var valid_612255 = query.getOrDefault("Version")
  valid_612255 = validateParameter(valid_612255, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612255 != nil:
    section.add "Version", valid_612255
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612256 = header.getOrDefault("X-Amz-Signature")
  valid_612256 = validateParameter(valid_612256, JString, required = false,
                                 default = nil)
  if valid_612256 != nil:
    section.add "X-Amz-Signature", valid_612256
  var valid_612257 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612257 = validateParameter(valid_612257, JString, required = false,
                                 default = nil)
  if valid_612257 != nil:
    section.add "X-Amz-Content-Sha256", valid_612257
  var valid_612258 = header.getOrDefault("X-Amz-Date")
  valid_612258 = validateParameter(valid_612258, JString, required = false,
                                 default = nil)
  if valid_612258 != nil:
    section.add "X-Amz-Date", valid_612258
  var valid_612259 = header.getOrDefault("X-Amz-Credential")
  valid_612259 = validateParameter(valid_612259, JString, required = false,
                                 default = nil)
  if valid_612259 != nil:
    section.add "X-Amz-Credential", valid_612259
  var valid_612260 = header.getOrDefault("X-Amz-Security-Token")
  valid_612260 = validateParameter(valid_612260, JString, required = false,
                                 default = nil)
  if valid_612260 != nil:
    section.add "X-Amz-Security-Token", valid_612260
  var valid_612261 = header.getOrDefault("X-Amz-Algorithm")
  valid_612261 = validateParameter(valid_612261, JString, required = false,
                                 default = nil)
  if valid_612261 != nil:
    section.add "X-Amz-Algorithm", valid_612261
  var valid_612262 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612262 = validateParameter(valid_612262, JString, required = false,
                                 default = nil)
  if valid_612262 != nil:
    section.add "X-Amz-SignedHeaders", valid_612262
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612263: Call_GetCreateDBParameterGroup_612247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_612263.validator(path, query, header, formData, body)
  let scheme = call_612263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612263.url(scheme.get, call_612263.host, call_612263.base,
                         call_612263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612263, url, valid)

proc call*(call_612264: Call_GetCreateDBParameterGroup_612247;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   Version: string (required)
  var query_612265 = newJObject()
  add(query_612265, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_612265, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_612265.add "Tags", Tags
  add(query_612265, "Action", newJString(Action))
  add(query_612265, "Description", newJString(Description))
  add(query_612265, "Version", newJString(Version))
  result = call_612264.call(nil, query_612265, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_612247(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_612248, base: "/",
    url: url_GetCreateDBParameterGroup_612249,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBProxy_612311 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBProxy_612313(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBProxy_612312(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612314 = query.getOrDefault("Action")
  valid_612314 = validateParameter(valid_612314, JString, required = true,
                                 default = newJString("CreateDBProxy"))
  if valid_612314 != nil:
    section.add "Action", valid_612314
  var valid_612315 = query.getOrDefault("Version")
  valid_612315 = validateParameter(valid_612315, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612315 != nil:
    section.add "Version", valid_612315
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612316 = header.getOrDefault("X-Amz-Signature")
  valid_612316 = validateParameter(valid_612316, JString, required = false,
                                 default = nil)
  if valid_612316 != nil:
    section.add "X-Amz-Signature", valid_612316
  var valid_612317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612317 = validateParameter(valid_612317, JString, required = false,
                                 default = nil)
  if valid_612317 != nil:
    section.add "X-Amz-Content-Sha256", valid_612317
  var valid_612318 = header.getOrDefault("X-Amz-Date")
  valid_612318 = validateParameter(valid_612318, JString, required = false,
                                 default = nil)
  if valid_612318 != nil:
    section.add "X-Amz-Date", valid_612318
  var valid_612319 = header.getOrDefault("X-Amz-Credential")
  valid_612319 = validateParameter(valid_612319, JString, required = false,
                                 default = nil)
  if valid_612319 != nil:
    section.add "X-Amz-Credential", valid_612319
  var valid_612320 = header.getOrDefault("X-Amz-Security-Token")
  valid_612320 = validateParameter(valid_612320, JString, required = false,
                                 default = nil)
  if valid_612320 != nil:
    section.add "X-Amz-Security-Token", valid_612320
  var valid_612321 = header.getOrDefault("X-Amz-Algorithm")
  valid_612321 = validateParameter(valid_612321, JString, required = false,
                                 default = nil)
  if valid_612321 != nil:
    section.add "X-Amz-Algorithm", valid_612321
  var valid_612322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612322 = validateParameter(valid_612322, JString, required = false,
                                 default = nil)
  if valid_612322 != nil:
    section.add "X-Amz-SignedHeaders", valid_612322
  result.add "header", section
  ## parameters in `formData` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_612323 = formData.getOrDefault("IdleClientTimeout")
  valid_612323 = validateParameter(valid_612323, JInt, required = false, default = nil)
  if valid_612323 != nil:
    section.add "IdleClientTimeout", valid_612323
  assert formData != nil,
        "formData argument is necessary due to required `VpcSubnetIds` field"
  var valid_612324 = formData.getOrDefault("VpcSubnetIds")
  valid_612324 = validateParameter(valid_612324, JArray, required = true, default = nil)
  if valid_612324 != nil:
    section.add "VpcSubnetIds", valid_612324
  var valid_612325 = formData.getOrDefault("RequireTLS")
  valid_612325 = validateParameter(valid_612325, JBool, required = false, default = nil)
  if valid_612325 != nil:
    section.add "RequireTLS", valid_612325
  var valid_612326 = formData.getOrDefault("DebugLogging")
  valid_612326 = validateParameter(valid_612326, JBool, required = false, default = nil)
  if valid_612326 != nil:
    section.add "DebugLogging", valid_612326
  var valid_612327 = formData.getOrDefault("RoleArn")
  valid_612327 = validateParameter(valid_612327, JString, required = true,
                                 default = nil)
  if valid_612327 != nil:
    section.add "RoleArn", valid_612327
  var valid_612328 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_612328 = validateParameter(valid_612328, JArray, required = false,
                                 default = nil)
  if valid_612328 != nil:
    section.add "VpcSecurityGroupIds", valid_612328
  var valid_612329 = formData.getOrDefault("EngineFamily")
  valid_612329 = validateParameter(valid_612329, JString, required = true,
                                 default = newJString("MYSQL"))
  if valid_612329 != nil:
    section.add "EngineFamily", valid_612329
  var valid_612330 = formData.getOrDefault("Auth")
  valid_612330 = validateParameter(valid_612330, JArray, required = true, default = nil)
  if valid_612330 != nil:
    section.add "Auth", valid_612330
  var valid_612331 = formData.getOrDefault("DBProxyName")
  valid_612331 = validateParameter(valid_612331, JString, required = true,
                                 default = nil)
  if valid_612331 != nil:
    section.add "DBProxyName", valid_612331
  var valid_612332 = formData.getOrDefault("Tags")
  valid_612332 = validateParameter(valid_612332, JArray, required = false,
                                 default = nil)
  if valid_612332 != nil:
    section.add "Tags", valid_612332
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612333: Call_PostCreateDBProxy_612311; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_612333.validator(path, query, header, formData, body)
  let scheme = call_612333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612333.url(scheme.get, call_612333.host, call_612333.base,
                         call_612333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612333, url, valid)

proc call*(call_612334: Call_PostCreateDBProxy_612311; VpcSubnetIds: JsonNode;
          RoleArn: string; Auth: JsonNode; DBProxyName: string;
          IdleClientTimeout: int = 0; RequireTLS: bool = false;
          DebugLogging: bool = false; VpcSecurityGroupIds: JsonNode = nil;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_612335 = newJObject()
  var formData_612336 = newJObject()
  add(formData_612336, "IdleClientTimeout", newJInt(IdleClientTimeout))
  if VpcSubnetIds != nil:
    formData_612336.add "VpcSubnetIds", VpcSubnetIds
  add(formData_612336, "RequireTLS", newJBool(RequireTLS))
  add(formData_612336, "DebugLogging", newJBool(DebugLogging))
  add(formData_612336, "RoleArn", newJString(RoleArn))
  if VpcSecurityGroupIds != nil:
    formData_612336.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_612336, "EngineFamily", newJString(EngineFamily))
  if Auth != nil:
    formData_612336.add "Auth", Auth
  add(formData_612336, "DBProxyName", newJString(DBProxyName))
  add(query_612335, "Action", newJString(Action))
  if Tags != nil:
    formData_612336.add "Tags", Tags
  add(query_612335, "Version", newJString(Version))
  result = call_612334.call(nil, query_612335, nil, formData_612336, nil)

var postCreateDBProxy* = Call_PostCreateDBProxy_612311(name: "postCreateDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_PostCreateDBProxy_612312,
    base: "/", url: url_PostCreateDBProxy_612313,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBProxy_612286 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBProxy_612288(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBProxy_612287(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Version: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  section = newJObject()
  var valid_612289 = query.getOrDefault("IdleClientTimeout")
  valid_612289 = validateParameter(valid_612289, JInt, required = false, default = nil)
  if valid_612289 != nil:
    section.add "IdleClientTimeout", valid_612289
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_612290 = query.getOrDefault("RoleArn")
  valid_612290 = validateParameter(valid_612290, JString, required = true,
                                 default = nil)
  if valid_612290 != nil:
    section.add "RoleArn", valid_612290
  var valid_612291 = query.getOrDefault("Tags")
  valid_612291 = validateParameter(valid_612291, JArray, required = false,
                                 default = nil)
  if valid_612291 != nil:
    section.add "Tags", valid_612291
  var valid_612292 = query.getOrDefault("Auth")
  valid_612292 = validateParameter(valid_612292, JArray, required = true, default = nil)
  if valid_612292 != nil:
    section.add "Auth", valid_612292
  var valid_612293 = query.getOrDefault("RequireTLS")
  valid_612293 = validateParameter(valid_612293, JBool, required = false, default = nil)
  if valid_612293 != nil:
    section.add "RequireTLS", valid_612293
  var valid_612294 = query.getOrDefault("EngineFamily")
  valid_612294 = validateParameter(valid_612294, JString, required = true,
                                 default = newJString("MYSQL"))
  if valid_612294 != nil:
    section.add "EngineFamily", valid_612294
  var valid_612295 = query.getOrDefault("Action")
  valid_612295 = validateParameter(valid_612295, JString, required = true,
                                 default = newJString("CreateDBProxy"))
  if valid_612295 != nil:
    section.add "Action", valid_612295
  var valid_612296 = query.getOrDefault("VpcSecurityGroupIds")
  valid_612296 = validateParameter(valid_612296, JArray, required = false,
                                 default = nil)
  if valid_612296 != nil:
    section.add "VpcSecurityGroupIds", valid_612296
  var valid_612297 = query.getOrDefault("VpcSubnetIds")
  valid_612297 = validateParameter(valid_612297, JArray, required = true, default = nil)
  if valid_612297 != nil:
    section.add "VpcSubnetIds", valid_612297
  var valid_612298 = query.getOrDefault("Version")
  valid_612298 = validateParameter(valid_612298, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612298 != nil:
    section.add "Version", valid_612298
  var valid_612299 = query.getOrDefault("DebugLogging")
  valid_612299 = validateParameter(valid_612299, JBool, required = false, default = nil)
  if valid_612299 != nil:
    section.add "DebugLogging", valid_612299
  var valid_612300 = query.getOrDefault("DBProxyName")
  valid_612300 = validateParameter(valid_612300, JString, required = true,
                                 default = nil)
  if valid_612300 != nil:
    section.add "DBProxyName", valid_612300
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612301 = header.getOrDefault("X-Amz-Signature")
  valid_612301 = validateParameter(valid_612301, JString, required = false,
                                 default = nil)
  if valid_612301 != nil:
    section.add "X-Amz-Signature", valid_612301
  var valid_612302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612302 = validateParameter(valid_612302, JString, required = false,
                                 default = nil)
  if valid_612302 != nil:
    section.add "X-Amz-Content-Sha256", valid_612302
  var valid_612303 = header.getOrDefault("X-Amz-Date")
  valid_612303 = validateParameter(valid_612303, JString, required = false,
                                 default = nil)
  if valid_612303 != nil:
    section.add "X-Amz-Date", valid_612303
  var valid_612304 = header.getOrDefault("X-Amz-Credential")
  valid_612304 = validateParameter(valid_612304, JString, required = false,
                                 default = nil)
  if valid_612304 != nil:
    section.add "X-Amz-Credential", valid_612304
  var valid_612305 = header.getOrDefault("X-Amz-Security-Token")
  valid_612305 = validateParameter(valid_612305, JString, required = false,
                                 default = nil)
  if valid_612305 != nil:
    section.add "X-Amz-Security-Token", valid_612305
  var valid_612306 = header.getOrDefault("X-Amz-Algorithm")
  valid_612306 = validateParameter(valid_612306, JString, required = false,
                                 default = nil)
  if valid_612306 != nil:
    section.add "X-Amz-Algorithm", valid_612306
  var valid_612307 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612307 = validateParameter(valid_612307, JString, required = false,
                                 default = nil)
  if valid_612307 != nil:
    section.add "X-Amz-SignedHeaders", valid_612307
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612308: Call_GetCreateDBProxy_612286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_612308.validator(path, query, header, formData, body)
  let scheme = call_612308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612308.url(scheme.get, call_612308.host, call_612308.base,
                         call_612308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612308, url, valid)

proc call*(call_612309: Call_GetCreateDBProxy_612286; RoleArn: string;
          Auth: JsonNode; VpcSubnetIds: JsonNode; DBProxyName: string;
          IdleClientTimeout: int = 0; Tags: JsonNode = nil; RequireTLS: bool = false;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          VpcSecurityGroupIds: JsonNode = nil; Version: string = "2014-10-31";
          DebugLogging: bool = false): Recallable =
  ## getCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Version: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  var query_612310 = newJObject()
  add(query_612310, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_612310, "RoleArn", newJString(RoleArn))
  if Tags != nil:
    query_612310.add "Tags", Tags
  if Auth != nil:
    query_612310.add "Auth", Auth
  add(query_612310, "RequireTLS", newJBool(RequireTLS))
  add(query_612310, "EngineFamily", newJString(EngineFamily))
  add(query_612310, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_612310.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if VpcSubnetIds != nil:
    query_612310.add "VpcSubnetIds", VpcSubnetIds
  add(query_612310, "Version", newJString(Version))
  add(query_612310, "DebugLogging", newJBool(DebugLogging))
  add(query_612310, "DBProxyName", newJString(DBProxyName))
  result = call_612309.call(nil, query_612310, nil, nil, nil)

var getCreateDBProxy* = Call_GetCreateDBProxy_612286(name: "getCreateDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_GetCreateDBProxy_612287,
    base: "/", url: url_GetCreateDBProxy_612288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSecurityGroup_612355 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBSecurityGroup_612357(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSecurityGroup_612356(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612358 = query.getOrDefault("Action")
  valid_612358 = validateParameter(valid_612358, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_612358 != nil:
    section.add "Action", valid_612358
  var valid_612359 = query.getOrDefault("Version")
  valid_612359 = validateParameter(valid_612359, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612359 != nil:
    section.add "Version", valid_612359
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612360 = header.getOrDefault("X-Amz-Signature")
  valid_612360 = validateParameter(valid_612360, JString, required = false,
                                 default = nil)
  if valid_612360 != nil:
    section.add "X-Amz-Signature", valid_612360
  var valid_612361 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612361 = validateParameter(valid_612361, JString, required = false,
                                 default = nil)
  if valid_612361 != nil:
    section.add "X-Amz-Content-Sha256", valid_612361
  var valid_612362 = header.getOrDefault("X-Amz-Date")
  valid_612362 = validateParameter(valid_612362, JString, required = false,
                                 default = nil)
  if valid_612362 != nil:
    section.add "X-Amz-Date", valid_612362
  var valid_612363 = header.getOrDefault("X-Amz-Credential")
  valid_612363 = validateParameter(valid_612363, JString, required = false,
                                 default = nil)
  if valid_612363 != nil:
    section.add "X-Amz-Credential", valid_612363
  var valid_612364 = header.getOrDefault("X-Amz-Security-Token")
  valid_612364 = validateParameter(valid_612364, JString, required = false,
                                 default = nil)
  if valid_612364 != nil:
    section.add "X-Amz-Security-Token", valid_612364
  var valid_612365 = header.getOrDefault("X-Amz-Algorithm")
  valid_612365 = validateParameter(valid_612365, JString, required = false,
                                 default = nil)
  if valid_612365 != nil:
    section.add "X-Amz-Algorithm", valid_612365
  var valid_612366 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612366 = validateParameter(valid_612366, JString, required = false,
                                 default = nil)
  if valid_612366 != nil:
    section.add "X-Amz-SignedHeaders", valid_612366
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupDescription` field"
  var valid_612367 = formData.getOrDefault("DBSecurityGroupDescription")
  valid_612367 = validateParameter(valid_612367, JString, required = true,
                                 default = nil)
  if valid_612367 != nil:
    section.add "DBSecurityGroupDescription", valid_612367
  var valid_612368 = formData.getOrDefault("DBSecurityGroupName")
  valid_612368 = validateParameter(valid_612368, JString, required = true,
                                 default = nil)
  if valid_612368 != nil:
    section.add "DBSecurityGroupName", valid_612368
  var valid_612369 = formData.getOrDefault("Tags")
  valid_612369 = validateParameter(valid_612369, JArray, required = false,
                                 default = nil)
  if valid_612369 != nil:
    section.add "Tags", valid_612369
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612370: Call_PostCreateDBSecurityGroup_612355; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_612370.validator(path, query, header, formData, body)
  let scheme = call_612370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612370.url(scheme.get, call_612370.host, call_612370.base,
                         call_612370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612370, url, valid)

proc call*(call_612371: Call_PostCreateDBSecurityGroup_612355;
          DBSecurityGroupDescription: string; DBSecurityGroupName: string;
          Action: string = "CreateDBSecurityGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_612372 = newJObject()
  var formData_612373 = newJObject()
  add(formData_612373, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(formData_612373, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_612372, "Action", newJString(Action))
  if Tags != nil:
    formData_612373.add "Tags", Tags
  add(query_612372, "Version", newJString(Version))
  result = call_612371.call(nil, query_612372, nil, formData_612373, nil)

var postCreateDBSecurityGroup* = Call_PostCreateDBSecurityGroup_612355(
    name: "postCreateDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_PostCreateDBSecurityGroup_612356, base: "/",
    url: url_PostCreateDBSecurityGroup_612357,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSecurityGroup_612337 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBSecurityGroup_612339(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSecurityGroup_612338(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_612340 = query.getOrDefault("DBSecurityGroupName")
  valid_612340 = validateParameter(valid_612340, JString, required = true,
                                 default = nil)
  if valid_612340 != nil:
    section.add "DBSecurityGroupName", valid_612340
  var valid_612341 = query.getOrDefault("Tags")
  valid_612341 = validateParameter(valid_612341, JArray, required = false,
                                 default = nil)
  if valid_612341 != nil:
    section.add "Tags", valid_612341
  var valid_612342 = query.getOrDefault("DBSecurityGroupDescription")
  valid_612342 = validateParameter(valid_612342, JString, required = true,
                                 default = nil)
  if valid_612342 != nil:
    section.add "DBSecurityGroupDescription", valid_612342
  var valid_612343 = query.getOrDefault("Action")
  valid_612343 = validateParameter(valid_612343, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_612343 != nil:
    section.add "Action", valid_612343
  var valid_612344 = query.getOrDefault("Version")
  valid_612344 = validateParameter(valid_612344, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612344 != nil:
    section.add "Version", valid_612344
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612345 = header.getOrDefault("X-Amz-Signature")
  valid_612345 = validateParameter(valid_612345, JString, required = false,
                                 default = nil)
  if valid_612345 != nil:
    section.add "X-Amz-Signature", valid_612345
  var valid_612346 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612346 = validateParameter(valid_612346, JString, required = false,
                                 default = nil)
  if valid_612346 != nil:
    section.add "X-Amz-Content-Sha256", valid_612346
  var valid_612347 = header.getOrDefault("X-Amz-Date")
  valid_612347 = validateParameter(valid_612347, JString, required = false,
                                 default = nil)
  if valid_612347 != nil:
    section.add "X-Amz-Date", valid_612347
  var valid_612348 = header.getOrDefault("X-Amz-Credential")
  valid_612348 = validateParameter(valid_612348, JString, required = false,
                                 default = nil)
  if valid_612348 != nil:
    section.add "X-Amz-Credential", valid_612348
  var valid_612349 = header.getOrDefault("X-Amz-Security-Token")
  valid_612349 = validateParameter(valid_612349, JString, required = false,
                                 default = nil)
  if valid_612349 != nil:
    section.add "X-Amz-Security-Token", valid_612349
  var valid_612350 = header.getOrDefault("X-Amz-Algorithm")
  valid_612350 = validateParameter(valid_612350, JString, required = false,
                                 default = nil)
  if valid_612350 != nil:
    section.add "X-Amz-Algorithm", valid_612350
  var valid_612351 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612351 = validateParameter(valid_612351, JString, required = false,
                                 default = nil)
  if valid_612351 != nil:
    section.add "X-Amz-SignedHeaders", valid_612351
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612352: Call_GetCreateDBSecurityGroup_612337; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_612352.validator(path, query, header, formData, body)
  let scheme = call_612352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612352.url(scheme.get, call_612352.host, call_612352.base,
                         call_612352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612352, url, valid)

proc call*(call_612353: Call_GetCreateDBSecurityGroup_612337;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612354 = newJObject()
  add(query_612354, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Tags != nil:
    query_612354.add "Tags", Tags
  add(query_612354, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(query_612354, "Action", newJString(Action))
  add(query_612354, "Version", newJString(Version))
  result = call_612353.call(nil, query_612354, nil, nil, nil)

var getCreateDBSecurityGroup* = Call_GetCreateDBSecurityGroup_612337(
    name: "getCreateDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_GetCreateDBSecurityGroup_612338, base: "/",
    url: url_GetCreateDBSecurityGroup_612339, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSnapshot_612392 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBSnapshot_612394(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSnapshot_612393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612395 = query.getOrDefault("Action")
  valid_612395 = validateParameter(valid_612395, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_612395 != nil:
    section.add "Action", valid_612395
  var valid_612396 = query.getOrDefault("Version")
  valid_612396 = validateParameter(valid_612396, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612396 != nil:
    section.add "Version", valid_612396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612397 = header.getOrDefault("X-Amz-Signature")
  valid_612397 = validateParameter(valid_612397, JString, required = false,
                                 default = nil)
  if valid_612397 != nil:
    section.add "X-Amz-Signature", valid_612397
  var valid_612398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612398 = validateParameter(valid_612398, JString, required = false,
                                 default = nil)
  if valid_612398 != nil:
    section.add "X-Amz-Content-Sha256", valid_612398
  var valid_612399 = header.getOrDefault("X-Amz-Date")
  valid_612399 = validateParameter(valid_612399, JString, required = false,
                                 default = nil)
  if valid_612399 != nil:
    section.add "X-Amz-Date", valid_612399
  var valid_612400 = header.getOrDefault("X-Amz-Credential")
  valid_612400 = validateParameter(valid_612400, JString, required = false,
                                 default = nil)
  if valid_612400 != nil:
    section.add "X-Amz-Credential", valid_612400
  var valid_612401 = header.getOrDefault("X-Amz-Security-Token")
  valid_612401 = validateParameter(valid_612401, JString, required = false,
                                 default = nil)
  if valid_612401 != nil:
    section.add "X-Amz-Security-Token", valid_612401
  var valid_612402 = header.getOrDefault("X-Amz-Algorithm")
  valid_612402 = validateParameter(valid_612402, JString, required = false,
                                 default = nil)
  if valid_612402 != nil:
    section.add "X-Amz-Algorithm", valid_612402
  var valid_612403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612403 = validateParameter(valid_612403, JString, required = false,
                                 default = nil)
  if valid_612403 != nil:
    section.add "X-Amz-SignedHeaders", valid_612403
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_612404 = formData.getOrDefault("DBInstanceIdentifier")
  valid_612404 = validateParameter(valid_612404, JString, required = true,
                                 default = nil)
  if valid_612404 != nil:
    section.add "DBInstanceIdentifier", valid_612404
  var valid_612405 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_612405 = validateParameter(valid_612405, JString, required = true,
                                 default = nil)
  if valid_612405 != nil:
    section.add "DBSnapshotIdentifier", valid_612405
  var valid_612406 = formData.getOrDefault("Tags")
  valid_612406 = validateParameter(valid_612406, JArray, required = false,
                                 default = nil)
  if valid_612406 != nil:
    section.add "Tags", valid_612406
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612407: Call_PostCreateDBSnapshot_612392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_612407.validator(path, query, header, formData, body)
  let scheme = call_612407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612407.url(scheme.get, call_612407.host, call_612407.base,
                         call_612407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612407, url, valid)

proc call*(call_612408: Call_PostCreateDBSnapshot_612392;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Action: string = "CreateDBSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_612409 = newJObject()
  var formData_612410 = newJObject()
  add(formData_612410, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_612410, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_612409, "Action", newJString(Action))
  if Tags != nil:
    formData_612410.add "Tags", Tags
  add(query_612409, "Version", newJString(Version))
  result = call_612408.call(nil, query_612409, nil, formData_612410, nil)

var postCreateDBSnapshot* = Call_PostCreateDBSnapshot_612392(
    name: "postCreateDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_PostCreateDBSnapshot_612393, base: "/",
    url: url_PostCreateDBSnapshot_612394, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSnapshot_612374 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBSnapshot_612376(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSnapshot_612375(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612377 = query.getOrDefault("Tags")
  valid_612377 = validateParameter(valid_612377, JArray, required = false,
                                 default = nil)
  if valid_612377 != nil:
    section.add "Tags", valid_612377
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_612378 = query.getOrDefault("DBInstanceIdentifier")
  valid_612378 = validateParameter(valid_612378, JString, required = true,
                                 default = nil)
  if valid_612378 != nil:
    section.add "DBInstanceIdentifier", valid_612378
  var valid_612379 = query.getOrDefault("DBSnapshotIdentifier")
  valid_612379 = validateParameter(valid_612379, JString, required = true,
                                 default = nil)
  if valid_612379 != nil:
    section.add "DBSnapshotIdentifier", valid_612379
  var valid_612380 = query.getOrDefault("Action")
  valid_612380 = validateParameter(valid_612380, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_612380 != nil:
    section.add "Action", valid_612380
  var valid_612381 = query.getOrDefault("Version")
  valid_612381 = validateParameter(valid_612381, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612381 != nil:
    section.add "Version", valid_612381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612382 = header.getOrDefault("X-Amz-Signature")
  valid_612382 = validateParameter(valid_612382, JString, required = false,
                                 default = nil)
  if valid_612382 != nil:
    section.add "X-Amz-Signature", valid_612382
  var valid_612383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612383 = validateParameter(valid_612383, JString, required = false,
                                 default = nil)
  if valid_612383 != nil:
    section.add "X-Amz-Content-Sha256", valid_612383
  var valid_612384 = header.getOrDefault("X-Amz-Date")
  valid_612384 = validateParameter(valid_612384, JString, required = false,
                                 default = nil)
  if valid_612384 != nil:
    section.add "X-Amz-Date", valid_612384
  var valid_612385 = header.getOrDefault("X-Amz-Credential")
  valid_612385 = validateParameter(valid_612385, JString, required = false,
                                 default = nil)
  if valid_612385 != nil:
    section.add "X-Amz-Credential", valid_612385
  var valid_612386 = header.getOrDefault("X-Amz-Security-Token")
  valid_612386 = validateParameter(valid_612386, JString, required = false,
                                 default = nil)
  if valid_612386 != nil:
    section.add "X-Amz-Security-Token", valid_612386
  var valid_612387 = header.getOrDefault("X-Amz-Algorithm")
  valid_612387 = validateParameter(valid_612387, JString, required = false,
                                 default = nil)
  if valid_612387 != nil:
    section.add "X-Amz-Algorithm", valid_612387
  var valid_612388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612388 = validateParameter(valid_612388, JString, required = false,
                                 default = nil)
  if valid_612388 != nil:
    section.add "X-Amz-SignedHeaders", valid_612388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612389: Call_GetCreateDBSnapshot_612374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_612389.validator(path, query, header, formData, body)
  let scheme = call_612389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612389.url(scheme.get, call_612389.host, call_612389.base,
                         call_612389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612389, url, valid)

proc call*(call_612390: Call_GetCreateDBSnapshot_612374;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612391 = newJObject()
  if Tags != nil:
    query_612391.add "Tags", Tags
  add(query_612391, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_612391, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_612391, "Action", newJString(Action))
  add(query_612391, "Version", newJString(Version))
  result = call_612390.call(nil, query_612391, nil, nil, nil)

var getCreateDBSnapshot* = Call_GetCreateDBSnapshot_612374(
    name: "getCreateDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_GetCreateDBSnapshot_612375, base: "/",
    url: url_GetCreateDBSnapshot_612376, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_612430 = ref object of OpenApiRestCall_610658
proc url_PostCreateDBSubnetGroup_612432(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSubnetGroup_612431(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612433 = query.getOrDefault("Action")
  valid_612433 = validateParameter(valid_612433, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_612433 != nil:
    section.add "Action", valid_612433
  var valid_612434 = query.getOrDefault("Version")
  valid_612434 = validateParameter(valid_612434, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612434 != nil:
    section.add "Version", valid_612434
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612435 = header.getOrDefault("X-Amz-Signature")
  valid_612435 = validateParameter(valid_612435, JString, required = false,
                                 default = nil)
  if valid_612435 != nil:
    section.add "X-Amz-Signature", valid_612435
  var valid_612436 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612436 = validateParameter(valid_612436, JString, required = false,
                                 default = nil)
  if valid_612436 != nil:
    section.add "X-Amz-Content-Sha256", valid_612436
  var valid_612437 = header.getOrDefault("X-Amz-Date")
  valid_612437 = validateParameter(valid_612437, JString, required = false,
                                 default = nil)
  if valid_612437 != nil:
    section.add "X-Amz-Date", valid_612437
  var valid_612438 = header.getOrDefault("X-Amz-Credential")
  valid_612438 = validateParameter(valid_612438, JString, required = false,
                                 default = nil)
  if valid_612438 != nil:
    section.add "X-Amz-Credential", valid_612438
  var valid_612439 = header.getOrDefault("X-Amz-Security-Token")
  valid_612439 = validateParameter(valid_612439, JString, required = false,
                                 default = nil)
  if valid_612439 != nil:
    section.add "X-Amz-Security-Token", valid_612439
  var valid_612440 = header.getOrDefault("X-Amz-Algorithm")
  valid_612440 = validateParameter(valid_612440, JString, required = false,
                                 default = nil)
  if valid_612440 != nil:
    section.add "X-Amz-Algorithm", valid_612440
  var valid_612441 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612441 = validateParameter(valid_612441, JString, required = false,
                                 default = nil)
  if valid_612441 != nil:
    section.add "X-Amz-SignedHeaders", valid_612441
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupDescription` field"
  var valid_612442 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_612442 = validateParameter(valid_612442, JString, required = true,
                                 default = nil)
  if valid_612442 != nil:
    section.add "DBSubnetGroupDescription", valid_612442
  var valid_612443 = formData.getOrDefault("Tags")
  valid_612443 = validateParameter(valid_612443, JArray, required = false,
                                 default = nil)
  if valid_612443 != nil:
    section.add "Tags", valid_612443
  var valid_612444 = formData.getOrDefault("DBSubnetGroupName")
  valid_612444 = validateParameter(valid_612444, JString, required = true,
                                 default = nil)
  if valid_612444 != nil:
    section.add "DBSubnetGroupName", valid_612444
  var valid_612445 = formData.getOrDefault("SubnetIds")
  valid_612445 = validateParameter(valid_612445, JArray, required = true, default = nil)
  if valid_612445 != nil:
    section.add "SubnetIds", valid_612445
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612446: Call_PostCreateDBSubnetGroup_612430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_612446.validator(path, query, header, formData, body)
  let scheme = call_612446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612446.url(scheme.get, call_612446.host, call_612446.base,
                         call_612446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612446, url, valid)

proc call*(call_612447: Call_PostCreateDBSubnetGroup_612430;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateDBSubnetGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  var query_612448 = newJObject()
  var formData_612449 = newJObject()
  add(formData_612449, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_612448, "Action", newJString(Action))
  if Tags != nil:
    formData_612449.add "Tags", Tags
  add(formData_612449, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_612448, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_612449.add "SubnetIds", SubnetIds
  result = call_612447.call(nil, query_612448, nil, formData_612449, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_612430(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_612431, base: "/",
    url: url_PostCreateDBSubnetGroup_612432, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_612411 = ref object of OpenApiRestCall_610658
proc url_GetCreateDBSubnetGroup_612413(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSubnetGroup_612412(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_612414 = query.getOrDefault("Tags")
  valid_612414 = validateParameter(valid_612414, JArray, required = false,
                                 default = nil)
  if valid_612414 != nil:
    section.add "Tags", valid_612414
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_612415 = query.getOrDefault("SubnetIds")
  valid_612415 = validateParameter(valid_612415, JArray, required = true, default = nil)
  if valid_612415 != nil:
    section.add "SubnetIds", valid_612415
  var valid_612416 = query.getOrDefault("Action")
  valid_612416 = validateParameter(valid_612416, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_612416 != nil:
    section.add "Action", valid_612416
  var valid_612417 = query.getOrDefault("DBSubnetGroupDescription")
  valid_612417 = validateParameter(valid_612417, JString, required = true,
                                 default = nil)
  if valid_612417 != nil:
    section.add "DBSubnetGroupDescription", valid_612417
  var valid_612418 = query.getOrDefault("DBSubnetGroupName")
  valid_612418 = validateParameter(valid_612418, JString, required = true,
                                 default = nil)
  if valid_612418 != nil:
    section.add "DBSubnetGroupName", valid_612418
  var valid_612419 = query.getOrDefault("Version")
  valid_612419 = validateParameter(valid_612419, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612419 != nil:
    section.add "Version", valid_612419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612420 = header.getOrDefault("X-Amz-Signature")
  valid_612420 = validateParameter(valid_612420, JString, required = false,
                                 default = nil)
  if valid_612420 != nil:
    section.add "X-Amz-Signature", valid_612420
  var valid_612421 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612421 = validateParameter(valid_612421, JString, required = false,
                                 default = nil)
  if valid_612421 != nil:
    section.add "X-Amz-Content-Sha256", valid_612421
  var valid_612422 = header.getOrDefault("X-Amz-Date")
  valid_612422 = validateParameter(valid_612422, JString, required = false,
                                 default = nil)
  if valid_612422 != nil:
    section.add "X-Amz-Date", valid_612422
  var valid_612423 = header.getOrDefault("X-Amz-Credential")
  valid_612423 = validateParameter(valid_612423, JString, required = false,
                                 default = nil)
  if valid_612423 != nil:
    section.add "X-Amz-Credential", valid_612423
  var valid_612424 = header.getOrDefault("X-Amz-Security-Token")
  valid_612424 = validateParameter(valid_612424, JString, required = false,
                                 default = nil)
  if valid_612424 != nil:
    section.add "X-Amz-Security-Token", valid_612424
  var valid_612425 = header.getOrDefault("X-Amz-Algorithm")
  valid_612425 = validateParameter(valid_612425, JString, required = false,
                                 default = nil)
  if valid_612425 != nil:
    section.add "X-Amz-Algorithm", valid_612425
  var valid_612426 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612426 = validateParameter(valid_612426, JString, required = false,
                                 default = nil)
  if valid_612426 != nil:
    section.add "X-Amz-SignedHeaders", valid_612426
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612427: Call_GetCreateDBSubnetGroup_612411; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_612427.validator(path, query, header, formData, body)
  let scheme = call_612427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612427.url(scheme.get, call_612427.host, call_612427.base,
                         call_612427.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612427, url, valid)

proc call*(call_612428: Call_GetCreateDBSubnetGroup_612411; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_612429 = newJObject()
  if Tags != nil:
    query_612429.add "Tags", Tags
  if SubnetIds != nil:
    query_612429.add "SubnetIds", SubnetIds
  add(query_612429, "Action", newJString(Action))
  add(query_612429, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_612429, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_612429, "Version", newJString(Version))
  result = call_612428.call(nil, query_612429, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_612411(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_612412, base: "/",
    url: url_GetCreateDBSubnetGroup_612413, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_612472 = ref object of OpenApiRestCall_610658
proc url_PostCreateEventSubscription_612474(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_612473(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612475 = query.getOrDefault("Action")
  valid_612475 = validateParameter(valid_612475, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_612475 != nil:
    section.add "Action", valid_612475
  var valid_612476 = query.getOrDefault("Version")
  valid_612476 = validateParameter(valid_612476, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612476 != nil:
    section.add "Version", valid_612476
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612477 = header.getOrDefault("X-Amz-Signature")
  valid_612477 = validateParameter(valid_612477, JString, required = false,
                                 default = nil)
  if valid_612477 != nil:
    section.add "X-Amz-Signature", valid_612477
  var valid_612478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612478 = validateParameter(valid_612478, JString, required = false,
                                 default = nil)
  if valid_612478 != nil:
    section.add "X-Amz-Content-Sha256", valid_612478
  var valid_612479 = header.getOrDefault("X-Amz-Date")
  valid_612479 = validateParameter(valid_612479, JString, required = false,
                                 default = nil)
  if valid_612479 != nil:
    section.add "X-Amz-Date", valid_612479
  var valid_612480 = header.getOrDefault("X-Amz-Credential")
  valid_612480 = validateParameter(valid_612480, JString, required = false,
                                 default = nil)
  if valid_612480 != nil:
    section.add "X-Amz-Credential", valid_612480
  var valid_612481 = header.getOrDefault("X-Amz-Security-Token")
  valid_612481 = validateParameter(valid_612481, JString, required = false,
                                 default = nil)
  if valid_612481 != nil:
    section.add "X-Amz-Security-Token", valid_612481
  var valid_612482 = header.getOrDefault("X-Amz-Algorithm")
  valid_612482 = validateParameter(valid_612482, JString, required = false,
                                 default = nil)
  if valid_612482 != nil:
    section.add "X-Amz-Algorithm", valid_612482
  var valid_612483 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612483 = validateParameter(valid_612483, JString, required = false,
                                 default = nil)
  if valid_612483 != nil:
    section.add "X-Amz-SignedHeaders", valid_612483
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_612484 = formData.getOrDefault("SourceIds")
  valid_612484 = validateParameter(valid_612484, JArray, required = false,
                                 default = nil)
  if valid_612484 != nil:
    section.add "SourceIds", valid_612484
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_612485 = formData.getOrDefault("SnsTopicArn")
  valid_612485 = validateParameter(valid_612485, JString, required = true,
                                 default = nil)
  if valid_612485 != nil:
    section.add "SnsTopicArn", valid_612485
  var valid_612486 = formData.getOrDefault("Enabled")
  valid_612486 = validateParameter(valid_612486, JBool, required = false, default = nil)
  if valid_612486 != nil:
    section.add "Enabled", valid_612486
  var valid_612487 = formData.getOrDefault("SubscriptionName")
  valid_612487 = validateParameter(valid_612487, JString, required = true,
                                 default = nil)
  if valid_612487 != nil:
    section.add "SubscriptionName", valid_612487
  var valid_612488 = formData.getOrDefault("SourceType")
  valid_612488 = validateParameter(valid_612488, JString, required = false,
                                 default = nil)
  if valid_612488 != nil:
    section.add "SourceType", valid_612488
  var valid_612489 = formData.getOrDefault("EventCategories")
  valid_612489 = validateParameter(valid_612489, JArray, required = false,
                                 default = nil)
  if valid_612489 != nil:
    section.add "EventCategories", valid_612489
  var valid_612490 = formData.getOrDefault("Tags")
  valid_612490 = validateParameter(valid_612490, JArray, required = false,
                                 default = nil)
  if valid_612490 != nil:
    section.add "Tags", valid_612490
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612491: Call_PostCreateEventSubscription_612472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_612491.validator(path, query, header, formData, body)
  let scheme = call_612491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612491.url(scheme.get, call_612491.host, call_612491.base,
                         call_612491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612491, url, valid)

proc call*(call_612492: Call_PostCreateEventSubscription_612472;
          SnsTopicArn: string; SubscriptionName: string; SourceIds: JsonNode = nil;
          Enabled: bool = false; SourceType: string = "";
          EventCategories: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_612493 = newJObject()
  var formData_612494 = newJObject()
  if SourceIds != nil:
    formData_612494.add "SourceIds", SourceIds
  add(formData_612494, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_612494, "Enabled", newJBool(Enabled))
  add(formData_612494, "SubscriptionName", newJString(SubscriptionName))
  add(formData_612494, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_612494.add "EventCategories", EventCategories
  add(query_612493, "Action", newJString(Action))
  if Tags != nil:
    formData_612494.add "Tags", Tags
  add(query_612493, "Version", newJString(Version))
  result = call_612492.call(nil, query_612493, nil, formData_612494, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_612472(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_612473, base: "/",
    url: url_PostCreateEventSubscription_612474,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_612450 = ref object of OpenApiRestCall_610658
proc url_GetCreateEventSubscription_612452(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_612451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_612453 = query.getOrDefault("Tags")
  valid_612453 = validateParameter(valid_612453, JArray, required = false,
                                 default = nil)
  if valid_612453 != nil:
    section.add "Tags", valid_612453
  var valid_612454 = query.getOrDefault("SourceType")
  valid_612454 = validateParameter(valid_612454, JString, required = false,
                                 default = nil)
  if valid_612454 != nil:
    section.add "SourceType", valid_612454
  var valid_612455 = query.getOrDefault("Enabled")
  valid_612455 = validateParameter(valid_612455, JBool, required = false, default = nil)
  if valid_612455 != nil:
    section.add "Enabled", valid_612455
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_612456 = query.getOrDefault("SubscriptionName")
  valid_612456 = validateParameter(valid_612456, JString, required = true,
                                 default = nil)
  if valid_612456 != nil:
    section.add "SubscriptionName", valid_612456
  var valid_612457 = query.getOrDefault("EventCategories")
  valid_612457 = validateParameter(valid_612457, JArray, required = false,
                                 default = nil)
  if valid_612457 != nil:
    section.add "EventCategories", valid_612457
  var valid_612458 = query.getOrDefault("SourceIds")
  valid_612458 = validateParameter(valid_612458, JArray, required = false,
                                 default = nil)
  if valid_612458 != nil:
    section.add "SourceIds", valid_612458
  var valid_612459 = query.getOrDefault("Action")
  valid_612459 = validateParameter(valid_612459, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_612459 != nil:
    section.add "Action", valid_612459
  var valid_612460 = query.getOrDefault("SnsTopicArn")
  valid_612460 = validateParameter(valid_612460, JString, required = true,
                                 default = nil)
  if valid_612460 != nil:
    section.add "SnsTopicArn", valid_612460
  var valid_612461 = query.getOrDefault("Version")
  valid_612461 = validateParameter(valid_612461, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612461 != nil:
    section.add "Version", valid_612461
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612462 = header.getOrDefault("X-Amz-Signature")
  valid_612462 = validateParameter(valid_612462, JString, required = false,
                                 default = nil)
  if valid_612462 != nil:
    section.add "X-Amz-Signature", valid_612462
  var valid_612463 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612463 = validateParameter(valid_612463, JString, required = false,
                                 default = nil)
  if valid_612463 != nil:
    section.add "X-Amz-Content-Sha256", valid_612463
  var valid_612464 = header.getOrDefault("X-Amz-Date")
  valid_612464 = validateParameter(valid_612464, JString, required = false,
                                 default = nil)
  if valid_612464 != nil:
    section.add "X-Amz-Date", valid_612464
  var valid_612465 = header.getOrDefault("X-Amz-Credential")
  valid_612465 = validateParameter(valid_612465, JString, required = false,
                                 default = nil)
  if valid_612465 != nil:
    section.add "X-Amz-Credential", valid_612465
  var valid_612466 = header.getOrDefault("X-Amz-Security-Token")
  valid_612466 = validateParameter(valid_612466, JString, required = false,
                                 default = nil)
  if valid_612466 != nil:
    section.add "X-Amz-Security-Token", valid_612466
  var valid_612467 = header.getOrDefault("X-Amz-Algorithm")
  valid_612467 = validateParameter(valid_612467, JString, required = false,
                                 default = nil)
  if valid_612467 != nil:
    section.add "X-Amz-Algorithm", valid_612467
  var valid_612468 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612468 = validateParameter(valid_612468, JString, required = false,
                                 default = nil)
  if valid_612468 != nil:
    section.add "X-Amz-SignedHeaders", valid_612468
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612469: Call_GetCreateEventSubscription_612450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_612469.validator(path, query, header, formData, body)
  let scheme = call_612469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612469.url(scheme.get, call_612469.host, call_612469.base,
                         call_612469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612469, url, valid)

proc call*(call_612470: Call_GetCreateEventSubscription_612450;
          SubscriptionName: string; SnsTopicArn: string; Tags: JsonNode = nil;
          SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_612471 = newJObject()
  if Tags != nil:
    query_612471.add "Tags", Tags
  add(query_612471, "SourceType", newJString(SourceType))
  add(query_612471, "Enabled", newJBool(Enabled))
  add(query_612471, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_612471.add "EventCategories", EventCategories
  if SourceIds != nil:
    query_612471.add "SourceIds", SourceIds
  add(query_612471, "Action", newJString(Action))
  add(query_612471, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_612471, "Version", newJString(Version))
  result = call_612470.call(nil, query_612471, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_612450(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_612451, base: "/",
    url: url_GetCreateEventSubscription_612452,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGlobalCluster_612517 = ref object of OpenApiRestCall_610658
proc url_PostCreateGlobalCluster_612519(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGlobalCluster_612518(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612520 = query.getOrDefault("Action")
  valid_612520 = validateParameter(valid_612520, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_612520 != nil:
    section.add "Action", valid_612520
  var valid_612521 = query.getOrDefault("Version")
  valid_612521 = validateParameter(valid_612521, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612521 != nil:
    section.add "Version", valid_612521
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612522 = header.getOrDefault("X-Amz-Signature")
  valid_612522 = validateParameter(valid_612522, JString, required = false,
                                 default = nil)
  if valid_612522 != nil:
    section.add "X-Amz-Signature", valid_612522
  var valid_612523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612523 = validateParameter(valid_612523, JString, required = false,
                                 default = nil)
  if valid_612523 != nil:
    section.add "X-Amz-Content-Sha256", valid_612523
  var valid_612524 = header.getOrDefault("X-Amz-Date")
  valid_612524 = validateParameter(valid_612524, JString, required = false,
                                 default = nil)
  if valid_612524 != nil:
    section.add "X-Amz-Date", valid_612524
  var valid_612525 = header.getOrDefault("X-Amz-Credential")
  valid_612525 = validateParameter(valid_612525, JString, required = false,
                                 default = nil)
  if valid_612525 != nil:
    section.add "X-Amz-Credential", valid_612525
  var valid_612526 = header.getOrDefault("X-Amz-Security-Token")
  valid_612526 = validateParameter(valid_612526, JString, required = false,
                                 default = nil)
  if valid_612526 != nil:
    section.add "X-Amz-Security-Token", valid_612526
  var valid_612527 = header.getOrDefault("X-Amz-Algorithm")
  valid_612527 = validateParameter(valid_612527, JString, required = false,
                                 default = nil)
  if valid_612527 != nil:
    section.add "X-Amz-Algorithm", valid_612527
  var valid_612528 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612528 = validateParameter(valid_612528, JString, required = false,
                                 default = nil)
  if valid_612528 != nil:
    section.add "X-Amz-SignedHeaders", valid_612528
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  section = newJObject()
  var valid_612529 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_612529 = validateParameter(valid_612529, JString, required = false,
                                 default = nil)
  if valid_612529 != nil:
    section.add "GlobalClusterIdentifier", valid_612529
  var valid_612530 = formData.getOrDefault("EngineVersion")
  valid_612530 = validateParameter(valid_612530, JString, required = false,
                                 default = nil)
  if valid_612530 != nil:
    section.add "EngineVersion", valid_612530
  var valid_612531 = formData.getOrDefault("DatabaseName")
  valid_612531 = validateParameter(valid_612531, JString, required = false,
                                 default = nil)
  if valid_612531 != nil:
    section.add "DatabaseName", valid_612531
  var valid_612532 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_612532 = validateParameter(valid_612532, JString, required = false,
                                 default = nil)
  if valid_612532 != nil:
    section.add "SourceDBClusterIdentifier", valid_612532
  var valid_612533 = formData.getOrDefault("Engine")
  valid_612533 = validateParameter(valid_612533, JString, required = false,
                                 default = nil)
  if valid_612533 != nil:
    section.add "Engine", valid_612533
  var valid_612534 = formData.getOrDefault("StorageEncrypted")
  valid_612534 = validateParameter(valid_612534, JBool, required = false, default = nil)
  if valid_612534 != nil:
    section.add "StorageEncrypted", valid_612534
  var valid_612535 = formData.getOrDefault("DeletionProtection")
  valid_612535 = validateParameter(valid_612535, JBool, required = false, default = nil)
  if valid_612535 != nil:
    section.add "DeletionProtection", valid_612535
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612536: Call_PostCreateGlobalCluster_612517; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612536.validator(path, query, header, formData, body)
  let scheme = call_612536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612536.url(scheme.get, call_612536.host, call_612536.base,
                         call_612536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612536, url, valid)

proc call*(call_612537: Call_PostCreateGlobalCluster_612517;
          GlobalClusterIdentifier: string = ""; EngineVersion: string = "";
          DatabaseName: string = ""; SourceDBClusterIdentifier: string = "";
          Engine: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false): Recallable =
  ## postCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  var query_612538 = newJObject()
  var formData_612539 = newJObject()
  add(formData_612539, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_612539, "EngineVersion", newJString(EngineVersion))
  add(formData_612539, "DatabaseName", newJString(DatabaseName))
  add(formData_612539, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_612539, "Engine", newJString(Engine))
  add(query_612538, "Action", newJString(Action))
  add(query_612538, "Version", newJString(Version))
  add(formData_612539, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_612539, "DeletionProtection", newJBool(DeletionProtection))
  result = call_612537.call(nil, query_612538, nil, formData_612539, nil)

var postCreateGlobalCluster* = Call_PostCreateGlobalCluster_612517(
    name: "postCreateGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_PostCreateGlobalCluster_612518, base: "/",
    url: url_PostCreateGlobalCluster_612519, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGlobalCluster_612495 = ref object of OpenApiRestCall_610658
proc url_GetCreateGlobalCluster_612497(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGlobalCluster_612496(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612498 = query.getOrDefault("GlobalClusterIdentifier")
  valid_612498 = validateParameter(valid_612498, JString, required = false,
                                 default = nil)
  if valid_612498 != nil:
    section.add "GlobalClusterIdentifier", valid_612498
  var valid_612499 = query.getOrDefault("DatabaseName")
  valid_612499 = validateParameter(valid_612499, JString, required = false,
                                 default = nil)
  if valid_612499 != nil:
    section.add "DatabaseName", valid_612499
  var valid_612500 = query.getOrDefault("DeletionProtection")
  valid_612500 = validateParameter(valid_612500, JBool, required = false, default = nil)
  if valid_612500 != nil:
    section.add "DeletionProtection", valid_612500
  var valid_612501 = query.getOrDefault("Engine")
  valid_612501 = validateParameter(valid_612501, JString, required = false,
                                 default = nil)
  if valid_612501 != nil:
    section.add "Engine", valid_612501
  var valid_612502 = query.getOrDefault("StorageEncrypted")
  valid_612502 = validateParameter(valid_612502, JBool, required = false, default = nil)
  if valid_612502 != nil:
    section.add "StorageEncrypted", valid_612502
  var valid_612503 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_612503 = validateParameter(valid_612503, JString, required = false,
                                 default = nil)
  if valid_612503 != nil:
    section.add "SourceDBClusterIdentifier", valid_612503
  var valid_612504 = query.getOrDefault("EngineVersion")
  valid_612504 = validateParameter(valid_612504, JString, required = false,
                                 default = nil)
  if valid_612504 != nil:
    section.add "EngineVersion", valid_612504
  var valid_612505 = query.getOrDefault("Action")
  valid_612505 = validateParameter(valid_612505, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_612505 != nil:
    section.add "Action", valid_612505
  var valid_612506 = query.getOrDefault("Version")
  valid_612506 = validateParameter(valid_612506, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612506 != nil:
    section.add "Version", valid_612506
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612507 = header.getOrDefault("X-Amz-Signature")
  valid_612507 = validateParameter(valid_612507, JString, required = false,
                                 default = nil)
  if valid_612507 != nil:
    section.add "X-Amz-Signature", valid_612507
  var valid_612508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612508 = validateParameter(valid_612508, JString, required = false,
                                 default = nil)
  if valid_612508 != nil:
    section.add "X-Amz-Content-Sha256", valid_612508
  var valid_612509 = header.getOrDefault("X-Amz-Date")
  valid_612509 = validateParameter(valid_612509, JString, required = false,
                                 default = nil)
  if valid_612509 != nil:
    section.add "X-Amz-Date", valid_612509
  var valid_612510 = header.getOrDefault("X-Amz-Credential")
  valid_612510 = validateParameter(valid_612510, JString, required = false,
                                 default = nil)
  if valid_612510 != nil:
    section.add "X-Amz-Credential", valid_612510
  var valid_612511 = header.getOrDefault("X-Amz-Security-Token")
  valid_612511 = validateParameter(valid_612511, JString, required = false,
                                 default = nil)
  if valid_612511 != nil:
    section.add "X-Amz-Security-Token", valid_612511
  var valid_612512 = header.getOrDefault("X-Amz-Algorithm")
  valid_612512 = validateParameter(valid_612512, JString, required = false,
                                 default = nil)
  if valid_612512 != nil:
    section.add "X-Amz-Algorithm", valid_612512
  var valid_612513 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612513 = validateParameter(valid_612513, JString, required = false,
                                 default = nil)
  if valid_612513 != nil:
    section.add "X-Amz-SignedHeaders", valid_612513
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612514: Call_GetCreateGlobalCluster_612495; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612514.validator(path, query, header, formData, body)
  let scheme = call_612514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612514.url(scheme.get, call_612514.host, call_612514.base,
                         call_612514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612514, url, valid)

proc call*(call_612515: Call_GetCreateGlobalCluster_612495;
          GlobalClusterIdentifier: string = ""; DatabaseName: string = "";
          DeletionProtection: bool = false; Engine: string = "";
          StorageEncrypted: bool = false; SourceDBClusterIdentifier: string = "";
          EngineVersion: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612516 = newJObject()
  add(query_612516, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_612516, "DatabaseName", newJString(DatabaseName))
  add(query_612516, "DeletionProtection", newJBool(DeletionProtection))
  add(query_612516, "Engine", newJString(Engine))
  add(query_612516, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_612516, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_612516, "EngineVersion", newJString(EngineVersion))
  add(query_612516, "Action", newJString(Action))
  add(query_612516, "Version", newJString(Version))
  result = call_612515.call(nil, query_612516, nil, nil, nil)

var getCreateGlobalCluster* = Call_GetCreateGlobalCluster_612495(
    name: "getCreateGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_GetCreateGlobalCluster_612496, base: "/",
    url: url_GetCreateGlobalCluster_612497, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOptionGroup_612560 = ref object of OpenApiRestCall_610658
proc url_PostCreateOptionGroup_612562(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOptionGroup_612561(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612563 = query.getOrDefault("Action")
  valid_612563 = validateParameter(valid_612563, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_612563 != nil:
    section.add "Action", valid_612563
  var valid_612564 = query.getOrDefault("Version")
  valid_612564 = validateParameter(valid_612564, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612564 != nil:
    section.add "Version", valid_612564
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612565 = header.getOrDefault("X-Amz-Signature")
  valid_612565 = validateParameter(valid_612565, JString, required = false,
                                 default = nil)
  if valid_612565 != nil:
    section.add "X-Amz-Signature", valid_612565
  var valid_612566 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612566 = validateParameter(valid_612566, JString, required = false,
                                 default = nil)
  if valid_612566 != nil:
    section.add "X-Amz-Content-Sha256", valid_612566
  var valid_612567 = header.getOrDefault("X-Amz-Date")
  valid_612567 = validateParameter(valid_612567, JString, required = false,
                                 default = nil)
  if valid_612567 != nil:
    section.add "X-Amz-Date", valid_612567
  var valid_612568 = header.getOrDefault("X-Amz-Credential")
  valid_612568 = validateParameter(valid_612568, JString, required = false,
                                 default = nil)
  if valid_612568 != nil:
    section.add "X-Amz-Credential", valid_612568
  var valid_612569 = header.getOrDefault("X-Amz-Security-Token")
  valid_612569 = validateParameter(valid_612569, JString, required = false,
                                 default = nil)
  if valid_612569 != nil:
    section.add "X-Amz-Security-Token", valid_612569
  var valid_612570 = header.getOrDefault("X-Amz-Algorithm")
  valid_612570 = validateParameter(valid_612570, JString, required = false,
                                 default = nil)
  if valid_612570 != nil:
    section.add "X-Amz-Algorithm", valid_612570
  var valid_612571 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612571 = validateParameter(valid_612571, JString, required = false,
                                 default = nil)
  if valid_612571 != nil:
    section.add "X-Amz-SignedHeaders", valid_612571
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupDescription` field"
  var valid_612572 = formData.getOrDefault("OptionGroupDescription")
  valid_612572 = validateParameter(valid_612572, JString, required = true,
                                 default = nil)
  if valid_612572 != nil:
    section.add "OptionGroupDescription", valid_612572
  var valid_612573 = formData.getOrDefault("EngineName")
  valid_612573 = validateParameter(valid_612573, JString, required = true,
                                 default = nil)
  if valid_612573 != nil:
    section.add "EngineName", valid_612573
  var valid_612574 = formData.getOrDefault("MajorEngineVersion")
  valid_612574 = validateParameter(valid_612574, JString, required = true,
                                 default = nil)
  if valid_612574 != nil:
    section.add "MajorEngineVersion", valid_612574
  var valid_612575 = formData.getOrDefault("Tags")
  valid_612575 = validateParameter(valid_612575, JArray, required = false,
                                 default = nil)
  if valid_612575 != nil:
    section.add "Tags", valid_612575
  var valid_612576 = formData.getOrDefault("OptionGroupName")
  valid_612576 = validateParameter(valid_612576, JString, required = true,
                                 default = nil)
  if valid_612576 != nil:
    section.add "OptionGroupName", valid_612576
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612577: Call_PostCreateOptionGroup_612560; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_612577.validator(path, query, header, formData, body)
  let scheme = call_612577.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612577.url(scheme.get, call_612577.host, call_612577.base,
                         call_612577.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612577, url, valid)

proc call*(call_612578: Call_PostCreateOptionGroup_612560;
          OptionGroupDescription: string; EngineName: string;
          MajorEngineVersion: string; OptionGroupName: string;
          Action: string = "CreateOptionGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  var query_612579 = newJObject()
  var formData_612580 = newJObject()
  add(formData_612580, "OptionGroupDescription",
      newJString(OptionGroupDescription))
  add(formData_612580, "EngineName", newJString(EngineName))
  add(formData_612580, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_612579, "Action", newJString(Action))
  if Tags != nil:
    formData_612580.add "Tags", Tags
  add(formData_612580, "OptionGroupName", newJString(OptionGroupName))
  add(query_612579, "Version", newJString(Version))
  result = call_612578.call(nil, query_612579, nil, formData_612580, nil)

var postCreateOptionGroup* = Call_PostCreateOptionGroup_612560(
    name: "postCreateOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_PostCreateOptionGroup_612561, base: "/",
    url: url_PostCreateOptionGroup_612562, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOptionGroup_612540 = ref object of OpenApiRestCall_610658
proc url_GetCreateOptionGroup_612542(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOptionGroup_612541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: JString (required)
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_612543 = query.getOrDefault("EngineName")
  valid_612543 = validateParameter(valid_612543, JString, required = true,
                                 default = nil)
  if valid_612543 != nil:
    section.add "EngineName", valid_612543
  var valid_612544 = query.getOrDefault("OptionGroupDescription")
  valid_612544 = validateParameter(valid_612544, JString, required = true,
                                 default = nil)
  if valid_612544 != nil:
    section.add "OptionGroupDescription", valid_612544
  var valid_612545 = query.getOrDefault("Tags")
  valid_612545 = validateParameter(valid_612545, JArray, required = false,
                                 default = nil)
  if valid_612545 != nil:
    section.add "Tags", valid_612545
  var valid_612546 = query.getOrDefault("Action")
  valid_612546 = validateParameter(valid_612546, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_612546 != nil:
    section.add "Action", valid_612546
  var valid_612547 = query.getOrDefault("OptionGroupName")
  valid_612547 = validateParameter(valid_612547, JString, required = true,
                                 default = nil)
  if valid_612547 != nil:
    section.add "OptionGroupName", valid_612547
  var valid_612548 = query.getOrDefault("Version")
  valid_612548 = validateParameter(valid_612548, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612548 != nil:
    section.add "Version", valid_612548
  var valid_612549 = query.getOrDefault("MajorEngineVersion")
  valid_612549 = validateParameter(valid_612549, JString, required = true,
                                 default = nil)
  if valid_612549 != nil:
    section.add "MajorEngineVersion", valid_612549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612550 = header.getOrDefault("X-Amz-Signature")
  valid_612550 = validateParameter(valid_612550, JString, required = false,
                                 default = nil)
  if valid_612550 != nil:
    section.add "X-Amz-Signature", valid_612550
  var valid_612551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612551 = validateParameter(valid_612551, JString, required = false,
                                 default = nil)
  if valid_612551 != nil:
    section.add "X-Amz-Content-Sha256", valid_612551
  var valid_612552 = header.getOrDefault("X-Amz-Date")
  valid_612552 = validateParameter(valid_612552, JString, required = false,
                                 default = nil)
  if valid_612552 != nil:
    section.add "X-Amz-Date", valid_612552
  var valid_612553 = header.getOrDefault("X-Amz-Credential")
  valid_612553 = validateParameter(valid_612553, JString, required = false,
                                 default = nil)
  if valid_612553 != nil:
    section.add "X-Amz-Credential", valid_612553
  var valid_612554 = header.getOrDefault("X-Amz-Security-Token")
  valid_612554 = validateParameter(valid_612554, JString, required = false,
                                 default = nil)
  if valid_612554 != nil:
    section.add "X-Amz-Security-Token", valid_612554
  var valid_612555 = header.getOrDefault("X-Amz-Algorithm")
  valid_612555 = validateParameter(valid_612555, JString, required = false,
                                 default = nil)
  if valid_612555 != nil:
    section.add "X-Amz-Algorithm", valid_612555
  var valid_612556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612556 = validateParameter(valid_612556, JString, required = false,
                                 default = nil)
  if valid_612556 != nil:
    section.add "X-Amz-SignedHeaders", valid_612556
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612557: Call_GetCreateOptionGroup_612540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_612557.validator(path, query, header, formData, body)
  let scheme = call_612557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612557.url(scheme.get, call_612557.host, call_612557.base,
                         call_612557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612557, url, valid)

proc call*(call_612558: Call_GetCreateOptionGroup_612540; EngineName: string;
          OptionGroupDescription: string; OptionGroupName: string;
          MajorEngineVersion: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  var query_612559 = newJObject()
  add(query_612559, "EngineName", newJString(EngineName))
  add(query_612559, "OptionGroupDescription", newJString(OptionGroupDescription))
  if Tags != nil:
    query_612559.add "Tags", Tags
  add(query_612559, "Action", newJString(Action))
  add(query_612559, "OptionGroupName", newJString(OptionGroupName))
  add(query_612559, "Version", newJString(Version))
  add(query_612559, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_612558.call(nil, query_612559, nil, nil, nil)

var getCreateOptionGroup* = Call_GetCreateOptionGroup_612540(
    name: "getCreateOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_GetCreateOptionGroup_612541, base: "/",
    url: url_GetCreateOptionGroup_612542, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomAvailabilityZone_612597 = ref object of OpenApiRestCall_610658
proc url_PostDeleteCustomAvailabilityZone_612599(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCustomAvailabilityZone_612598(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612600 = query.getOrDefault("Action")
  valid_612600 = validateParameter(valid_612600, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_612600 != nil:
    section.add "Action", valid_612600
  var valid_612601 = query.getOrDefault("Version")
  valid_612601 = validateParameter(valid_612601, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612601 != nil:
    section.add "Version", valid_612601
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612602 = header.getOrDefault("X-Amz-Signature")
  valid_612602 = validateParameter(valid_612602, JString, required = false,
                                 default = nil)
  if valid_612602 != nil:
    section.add "X-Amz-Signature", valid_612602
  var valid_612603 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612603 = validateParameter(valid_612603, JString, required = false,
                                 default = nil)
  if valid_612603 != nil:
    section.add "X-Amz-Content-Sha256", valid_612603
  var valid_612604 = header.getOrDefault("X-Amz-Date")
  valid_612604 = validateParameter(valid_612604, JString, required = false,
                                 default = nil)
  if valid_612604 != nil:
    section.add "X-Amz-Date", valid_612604
  var valid_612605 = header.getOrDefault("X-Amz-Credential")
  valid_612605 = validateParameter(valid_612605, JString, required = false,
                                 default = nil)
  if valid_612605 != nil:
    section.add "X-Amz-Credential", valid_612605
  var valid_612606 = header.getOrDefault("X-Amz-Security-Token")
  valid_612606 = validateParameter(valid_612606, JString, required = false,
                                 default = nil)
  if valid_612606 != nil:
    section.add "X-Amz-Security-Token", valid_612606
  var valid_612607 = header.getOrDefault("X-Amz-Algorithm")
  valid_612607 = validateParameter(valid_612607, JString, required = false,
                                 default = nil)
  if valid_612607 != nil:
    section.add "X-Amz-Algorithm", valid_612607
  var valid_612608 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612608 = validateParameter(valid_612608, JString, required = false,
                                 default = nil)
  if valid_612608 != nil:
    section.add "X-Amz-SignedHeaders", valid_612608
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_612609 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_612609 = validateParameter(valid_612609, JString, required = true,
                                 default = nil)
  if valid_612609 != nil:
    section.add "CustomAvailabilityZoneId", valid_612609
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612610: Call_PostDeleteCustomAvailabilityZone_612597;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_612610.validator(path, query, header, formData, body)
  let scheme = call_612610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612610.url(scheme.get, call_612610.host, call_612610.base,
                         call_612610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612610, url, valid)

proc call*(call_612611: Call_PostDeleteCustomAvailabilityZone_612597;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Version: string (required)
  var query_612612 = newJObject()
  var formData_612613 = newJObject()
  add(query_612612, "Action", newJString(Action))
  add(formData_612613, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_612612, "Version", newJString(Version))
  result = call_612611.call(nil, query_612612, nil, formData_612613, nil)

var postDeleteCustomAvailabilityZone* = Call_PostDeleteCustomAvailabilityZone_612597(
    name: "postDeleteCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_PostDeleteCustomAvailabilityZone_612598, base: "/",
    url: url_PostDeleteCustomAvailabilityZone_612599,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomAvailabilityZone_612581 = ref object of OpenApiRestCall_610658
proc url_GetDeleteCustomAvailabilityZone_612583(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCustomAvailabilityZone_612582(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_612584 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_612584 = validateParameter(valid_612584, JString, required = true,
                                 default = nil)
  if valid_612584 != nil:
    section.add "CustomAvailabilityZoneId", valid_612584
  var valid_612585 = query.getOrDefault("Action")
  valid_612585 = validateParameter(valid_612585, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_612585 != nil:
    section.add "Action", valid_612585
  var valid_612586 = query.getOrDefault("Version")
  valid_612586 = validateParameter(valid_612586, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612586 != nil:
    section.add "Version", valid_612586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612587 = header.getOrDefault("X-Amz-Signature")
  valid_612587 = validateParameter(valid_612587, JString, required = false,
                                 default = nil)
  if valid_612587 != nil:
    section.add "X-Amz-Signature", valid_612587
  var valid_612588 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612588 = validateParameter(valid_612588, JString, required = false,
                                 default = nil)
  if valid_612588 != nil:
    section.add "X-Amz-Content-Sha256", valid_612588
  var valid_612589 = header.getOrDefault("X-Amz-Date")
  valid_612589 = validateParameter(valid_612589, JString, required = false,
                                 default = nil)
  if valid_612589 != nil:
    section.add "X-Amz-Date", valid_612589
  var valid_612590 = header.getOrDefault("X-Amz-Credential")
  valid_612590 = validateParameter(valid_612590, JString, required = false,
                                 default = nil)
  if valid_612590 != nil:
    section.add "X-Amz-Credential", valid_612590
  var valid_612591 = header.getOrDefault("X-Amz-Security-Token")
  valid_612591 = validateParameter(valid_612591, JString, required = false,
                                 default = nil)
  if valid_612591 != nil:
    section.add "X-Amz-Security-Token", valid_612591
  var valid_612592 = header.getOrDefault("X-Amz-Algorithm")
  valid_612592 = validateParameter(valid_612592, JString, required = false,
                                 default = nil)
  if valid_612592 != nil:
    section.add "X-Amz-Algorithm", valid_612592
  var valid_612593 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612593 = validateParameter(valid_612593, JString, required = false,
                                 default = nil)
  if valid_612593 != nil:
    section.add "X-Amz-SignedHeaders", valid_612593
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612594: Call_GetDeleteCustomAvailabilityZone_612581;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_612594.validator(path, query, header, formData, body)
  let scheme = call_612594.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612594.url(scheme.get, call_612594.host, call_612594.base,
                         call_612594.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612594, url, valid)

proc call*(call_612595: Call_GetDeleteCustomAvailabilityZone_612581;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612596 = newJObject()
  add(query_612596, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_612596, "Action", newJString(Action))
  add(query_612596, "Version", newJString(Version))
  result = call_612595.call(nil, query_612596, nil, nil, nil)

var getDeleteCustomAvailabilityZone* = Call_GetDeleteCustomAvailabilityZone_612581(
    name: "getDeleteCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_GetDeleteCustomAvailabilityZone_612582, base: "/",
    url: url_GetDeleteCustomAvailabilityZone_612583,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_612632 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBCluster_612634(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBCluster_612633(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612635 = query.getOrDefault("Action")
  valid_612635 = validateParameter(valid_612635, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_612635 != nil:
    section.add "Action", valid_612635
  var valid_612636 = query.getOrDefault("Version")
  valid_612636 = validateParameter(valid_612636, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612636 != nil:
    section.add "Version", valid_612636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612637 = header.getOrDefault("X-Amz-Signature")
  valid_612637 = validateParameter(valid_612637, JString, required = false,
                                 default = nil)
  if valid_612637 != nil:
    section.add "X-Amz-Signature", valid_612637
  var valid_612638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612638 = validateParameter(valid_612638, JString, required = false,
                                 default = nil)
  if valid_612638 != nil:
    section.add "X-Amz-Content-Sha256", valid_612638
  var valid_612639 = header.getOrDefault("X-Amz-Date")
  valid_612639 = validateParameter(valid_612639, JString, required = false,
                                 default = nil)
  if valid_612639 != nil:
    section.add "X-Amz-Date", valid_612639
  var valid_612640 = header.getOrDefault("X-Amz-Credential")
  valid_612640 = validateParameter(valid_612640, JString, required = false,
                                 default = nil)
  if valid_612640 != nil:
    section.add "X-Amz-Credential", valid_612640
  var valid_612641 = header.getOrDefault("X-Amz-Security-Token")
  valid_612641 = validateParameter(valid_612641, JString, required = false,
                                 default = nil)
  if valid_612641 != nil:
    section.add "X-Amz-Security-Token", valid_612641
  var valid_612642 = header.getOrDefault("X-Amz-Algorithm")
  valid_612642 = validateParameter(valid_612642, JString, required = false,
                                 default = nil)
  if valid_612642 != nil:
    section.add "X-Amz-Algorithm", valid_612642
  var valid_612643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612643 = validateParameter(valid_612643, JString, required = false,
                                 default = nil)
  if valid_612643 != nil:
    section.add "X-Amz-SignedHeaders", valid_612643
  result.add "header", section
  ## parameters in `formData` object:
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_612644 = formData.getOrDefault("SkipFinalSnapshot")
  valid_612644 = validateParameter(valid_612644, JBool, required = false, default = nil)
  if valid_612644 != nil:
    section.add "SkipFinalSnapshot", valid_612644
  var valid_612645 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_612645 = validateParameter(valid_612645, JString, required = false,
                                 default = nil)
  if valid_612645 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_612645
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_612646 = formData.getOrDefault("DBClusterIdentifier")
  valid_612646 = validateParameter(valid_612646, JString, required = true,
                                 default = nil)
  if valid_612646 != nil:
    section.add "DBClusterIdentifier", valid_612646
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612647: Call_PostDeleteDBCluster_612632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612647.validator(path, query, header, formData, body)
  let scheme = call_612647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612647.url(scheme.get, call_612647.host, call_612647.base,
                         call_612647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612647, url, valid)

proc call*(call_612648: Call_PostDeleteDBCluster_612632;
          DBClusterIdentifier: string; Action: string = "DeleteDBCluster";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_612649 = newJObject()
  var formData_612650 = newJObject()
  add(query_612649, "Action", newJString(Action))
  add(formData_612650, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_612650, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_612649, "Version", newJString(Version))
  add(formData_612650, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_612648.call(nil, query_612649, nil, formData_612650, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_612632(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_612633, base: "/",
    url: url_PostDeleteDBCluster_612634, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_612614 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBCluster_612616(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBCluster_612615(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_612617 = query.getOrDefault("DBClusterIdentifier")
  valid_612617 = validateParameter(valid_612617, JString, required = true,
                                 default = nil)
  if valid_612617 != nil:
    section.add "DBClusterIdentifier", valid_612617
  var valid_612618 = query.getOrDefault("SkipFinalSnapshot")
  valid_612618 = validateParameter(valid_612618, JBool, required = false, default = nil)
  if valid_612618 != nil:
    section.add "SkipFinalSnapshot", valid_612618
  var valid_612619 = query.getOrDefault("Action")
  valid_612619 = validateParameter(valid_612619, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_612619 != nil:
    section.add "Action", valid_612619
  var valid_612620 = query.getOrDefault("Version")
  valid_612620 = validateParameter(valid_612620, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612620 != nil:
    section.add "Version", valid_612620
  var valid_612621 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_612621 = validateParameter(valid_612621, JString, required = false,
                                 default = nil)
  if valid_612621 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_612621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612622 = header.getOrDefault("X-Amz-Signature")
  valid_612622 = validateParameter(valid_612622, JString, required = false,
                                 default = nil)
  if valid_612622 != nil:
    section.add "X-Amz-Signature", valid_612622
  var valid_612623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612623 = validateParameter(valid_612623, JString, required = false,
                                 default = nil)
  if valid_612623 != nil:
    section.add "X-Amz-Content-Sha256", valid_612623
  var valid_612624 = header.getOrDefault("X-Amz-Date")
  valid_612624 = validateParameter(valid_612624, JString, required = false,
                                 default = nil)
  if valid_612624 != nil:
    section.add "X-Amz-Date", valid_612624
  var valid_612625 = header.getOrDefault("X-Amz-Credential")
  valid_612625 = validateParameter(valid_612625, JString, required = false,
                                 default = nil)
  if valid_612625 != nil:
    section.add "X-Amz-Credential", valid_612625
  var valid_612626 = header.getOrDefault("X-Amz-Security-Token")
  valid_612626 = validateParameter(valid_612626, JString, required = false,
                                 default = nil)
  if valid_612626 != nil:
    section.add "X-Amz-Security-Token", valid_612626
  var valid_612627 = header.getOrDefault("X-Amz-Algorithm")
  valid_612627 = validateParameter(valid_612627, JString, required = false,
                                 default = nil)
  if valid_612627 != nil:
    section.add "X-Amz-Algorithm", valid_612627
  var valid_612628 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612628 = validateParameter(valid_612628, JString, required = false,
                                 default = nil)
  if valid_612628 != nil:
    section.add "X-Amz-SignedHeaders", valid_612628
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612629: Call_GetDeleteDBCluster_612614; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612629.validator(path, query, header, formData, body)
  let scheme = call_612629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612629.url(scheme.get, call_612629.host, call_612629.base,
                         call_612629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612629, url, valid)

proc call*(call_612630: Call_GetDeleteDBCluster_612614;
          DBClusterIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_612631 = newJObject()
  add(query_612631, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_612631, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_612631, "Action", newJString(Action))
  add(query_612631, "Version", newJString(Version))
  add(query_612631, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_612630.call(nil, query_612631, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_612614(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_612615,
    base: "/", url: url_GetDeleteDBCluster_612616,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterEndpoint_612667 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBClusterEndpoint_612669(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterEndpoint_612668(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612670 = query.getOrDefault("Action")
  valid_612670 = validateParameter(valid_612670, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_612670 != nil:
    section.add "Action", valid_612670
  var valid_612671 = query.getOrDefault("Version")
  valid_612671 = validateParameter(valid_612671, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612671 != nil:
    section.add "Version", valid_612671
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612672 = header.getOrDefault("X-Amz-Signature")
  valid_612672 = validateParameter(valid_612672, JString, required = false,
                                 default = nil)
  if valid_612672 != nil:
    section.add "X-Amz-Signature", valid_612672
  var valid_612673 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612673 = validateParameter(valid_612673, JString, required = false,
                                 default = nil)
  if valid_612673 != nil:
    section.add "X-Amz-Content-Sha256", valid_612673
  var valid_612674 = header.getOrDefault("X-Amz-Date")
  valid_612674 = validateParameter(valid_612674, JString, required = false,
                                 default = nil)
  if valid_612674 != nil:
    section.add "X-Amz-Date", valid_612674
  var valid_612675 = header.getOrDefault("X-Amz-Credential")
  valid_612675 = validateParameter(valid_612675, JString, required = false,
                                 default = nil)
  if valid_612675 != nil:
    section.add "X-Amz-Credential", valid_612675
  var valid_612676 = header.getOrDefault("X-Amz-Security-Token")
  valid_612676 = validateParameter(valid_612676, JString, required = false,
                                 default = nil)
  if valid_612676 != nil:
    section.add "X-Amz-Security-Token", valid_612676
  var valid_612677 = header.getOrDefault("X-Amz-Algorithm")
  valid_612677 = validateParameter(valid_612677, JString, required = false,
                                 default = nil)
  if valid_612677 != nil:
    section.add "X-Amz-Algorithm", valid_612677
  var valid_612678 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612678 = validateParameter(valid_612678, JString, required = false,
                                 default = nil)
  if valid_612678 != nil:
    section.add "X-Amz-SignedHeaders", valid_612678
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_612679 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_612679 = validateParameter(valid_612679, JString, required = true,
                                 default = nil)
  if valid_612679 != nil:
    section.add "DBClusterEndpointIdentifier", valid_612679
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612680: Call_PostDeleteDBClusterEndpoint_612667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612680.validator(path, query, header, formData, body)
  let scheme = call_612680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612680.url(scheme.get, call_612680.host, call_612680.base,
                         call_612680.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612680, url, valid)

proc call*(call_612681: Call_PostDeleteDBClusterEndpoint_612667;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612682 = newJObject()
  var formData_612683 = newJObject()
  add(formData_612683, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_612682, "Action", newJString(Action))
  add(query_612682, "Version", newJString(Version))
  result = call_612681.call(nil, query_612682, nil, formData_612683, nil)

var postDeleteDBClusterEndpoint* = Call_PostDeleteDBClusterEndpoint_612667(
    name: "postDeleteDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_PostDeleteDBClusterEndpoint_612668, base: "/",
    url: url_PostDeleteDBClusterEndpoint_612669,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterEndpoint_612651 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBClusterEndpoint_612653(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterEndpoint_612652(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_612654 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_612654 = validateParameter(valid_612654, JString, required = true,
                                 default = nil)
  if valid_612654 != nil:
    section.add "DBClusterEndpointIdentifier", valid_612654
  var valid_612655 = query.getOrDefault("Action")
  valid_612655 = validateParameter(valid_612655, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_612655 != nil:
    section.add "Action", valid_612655
  var valid_612656 = query.getOrDefault("Version")
  valid_612656 = validateParameter(valid_612656, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612656 != nil:
    section.add "Version", valid_612656
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612657 = header.getOrDefault("X-Amz-Signature")
  valid_612657 = validateParameter(valid_612657, JString, required = false,
                                 default = nil)
  if valid_612657 != nil:
    section.add "X-Amz-Signature", valid_612657
  var valid_612658 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612658 = validateParameter(valid_612658, JString, required = false,
                                 default = nil)
  if valid_612658 != nil:
    section.add "X-Amz-Content-Sha256", valid_612658
  var valid_612659 = header.getOrDefault("X-Amz-Date")
  valid_612659 = validateParameter(valid_612659, JString, required = false,
                                 default = nil)
  if valid_612659 != nil:
    section.add "X-Amz-Date", valid_612659
  var valid_612660 = header.getOrDefault("X-Amz-Credential")
  valid_612660 = validateParameter(valid_612660, JString, required = false,
                                 default = nil)
  if valid_612660 != nil:
    section.add "X-Amz-Credential", valid_612660
  var valid_612661 = header.getOrDefault("X-Amz-Security-Token")
  valid_612661 = validateParameter(valid_612661, JString, required = false,
                                 default = nil)
  if valid_612661 != nil:
    section.add "X-Amz-Security-Token", valid_612661
  var valid_612662 = header.getOrDefault("X-Amz-Algorithm")
  valid_612662 = validateParameter(valid_612662, JString, required = false,
                                 default = nil)
  if valid_612662 != nil:
    section.add "X-Amz-Algorithm", valid_612662
  var valid_612663 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612663 = validateParameter(valid_612663, JString, required = false,
                                 default = nil)
  if valid_612663 != nil:
    section.add "X-Amz-SignedHeaders", valid_612663
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612664: Call_GetDeleteDBClusterEndpoint_612651; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612664.validator(path, query, header, formData, body)
  let scheme = call_612664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612664.url(scheme.get, call_612664.host, call_612664.base,
                         call_612664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612664, url, valid)

proc call*(call_612665: Call_GetDeleteDBClusterEndpoint_612651;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612666 = newJObject()
  add(query_612666, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_612666, "Action", newJString(Action))
  add(query_612666, "Version", newJString(Version))
  result = call_612665.call(nil, query_612666, nil, nil, nil)

var getDeleteDBClusterEndpoint* = Call_GetDeleteDBClusterEndpoint_612651(
    name: "getDeleteDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_GetDeleteDBClusterEndpoint_612652, base: "/",
    url: url_GetDeleteDBClusterEndpoint_612653,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_612700 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBClusterParameterGroup_612702(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_612701(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612703 = query.getOrDefault("Action")
  valid_612703 = validateParameter(valid_612703, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_612703 != nil:
    section.add "Action", valid_612703
  var valid_612704 = query.getOrDefault("Version")
  valid_612704 = validateParameter(valid_612704, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612704 != nil:
    section.add "Version", valid_612704
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612705 = header.getOrDefault("X-Amz-Signature")
  valid_612705 = validateParameter(valid_612705, JString, required = false,
                                 default = nil)
  if valid_612705 != nil:
    section.add "X-Amz-Signature", valid_612705
  var valid_612706 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612706 = validateParameter(valid_612706, JString, required = false,
                                 default = nil)
  if valid_612706 != nil:
    section.add "X-Amz-Content-Sha256", valid_612706
  var valid_612707 = header.getOrDefault("X-Amz-Date")
  valid_612707 = validateParameter(valid_612707, JString, required = false,
                                 default = nil)
  if valid_612707 != nil:
    section.add "X-Amz-Date", valid_612707
  var valid_612708 = header.getOrDefault("X-Amz-Credential")
  valid_612708 = validateParameter(valid_612708, JString, required = false,
                                 default = nil)
  if valid_612708 != nil:
    section.add "X-Amz-Credential", valid_612708
  var valid_612709 = header.getOrDefault("X-Amz-Security-Token")
  valid_612709 = validateParameter(valid_612709, JString, required = false,
                                 default = nil)
  if valid_612709 != nil:
    section.add "X-Amz-Security-Token", valid_612709
  var valid_612710 = header.getOrDefault("X-Amz-Algorithm")
  valid_612710 = validateParameter(valid_612710, JString, required = false,
                                 default = nil)
  if valid_612710 != nil:
    section.add "X-Amz-Algorithm", valid_612710
  var valid_612711 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612711 = validateParameter(valid_612711, JString, required = false,
                                 default = nil)
  if valid_612711 != nil:
    section.add "X-Amz-SignedHeaders", valid_612711
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_612712 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_612712 = validateParameter(valid_612712, JString, required = true,
                                 default = nil)
  if valid_612712 != nil:
    section.add "DBClusterParameterGroupName", valid_612712
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612713: Call_PostDeleteDBClusterParameterGroup_612700;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612713.validator(path, query, header, formData, body)
  let scheme = call_612713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612713.url(scheme.get, call_612713.host, call_612713.base,
                         call_612713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612713, url, valid)

proc call*(call_612714: Call_PostDeleteDBClusterParameterGroup_612700;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_612715 = newJObject()
  var formData_612716 = newJObject()
  add(query_612715, "Action", newJString(Action))
  add(formData_612716, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_612715, "Version", newJString(Version))
  result = call_612714.call(nil, query_612715, nil, formData_612716, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_612700(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_612701, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_612702,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_612684 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBClusterParameterGroup_612686(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_612685(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_612687 = query.getOrDefault("DBClusterParameterGroupName")
  valid_612687 = validateParameter(valid_612687, JString, required = true,
                                 default = nil)
  if valid_612687 != nil:
    section.add "DBClusterParameterGroupName", valid_612687
  var valid_612688 = query.getOrDefault("Action")
  valid_612688 = validateParameter(valid_612688, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_612688 != nil:
    section.add "Action", valid_612688
  var valid_612689 = query.getOrDefault("Version")
  valid_612689 = validateParameter(valid_612689, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612689 != nil:
    section.add "Version", valid_612689
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612690 = header.getOrDefault("X-Amz-Signature")
  valid_612690 = validateParameter(valid_612690, JString, required = false,
                                 default = nil)
  if valid_612690 != nil:
    section.add "X-Amz-Signature", valid_612690
  var valid_612691 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612691 = validateParameter(valid_612691, JString, required = false,
                                 default = nil)
  if valid_612691 != nil:
    section.add "X-Amz-Content-Sha256", valid_612691
  var valid_612692 = header.getOrDefault("X-Amz-Date")
  valid_612692 = validateParameter(valid_612692, JString, required = false,
                                 default = nil)
  if valid_612692 != nil:
    section.add "X-Amz-Date", valid_612692
  var valid_612693 = header.getOrDefault("X-Amz-Credential")
  valid_612693 = validateParameter(valid_612693, JString, required = false,
                                 default = nil)
  if valid_612693 != nil:
    section.add "X-Amz-Credential", valid_612693
  var valid_612694 = header.getOrDefault("X-Amz-Security-Token")
  valid_612694 = validateParameter(valid_612694, JString, required = false,
                                 default = nil)
  if valid_612694 != nil:
    section.add "X-Amz-Security-Token", valid_612694
  var valid_612695 = header.getOrDefault("X-Amz-Algorithm")
  valid_612695 = validateParameter(valid_612695, JString, required = false,
                                 default = nil)
  if valid_612695 != nil:
    section.add "X-Amz-Algorithm", valid_612695
  var valid_612696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612696 = validateParameter(valid_612696, JString, required = false,
                                 default = nil)
  if valid_612696 != nil:
    section.add "X-Amz-SignedHeaders", valid_612696
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612697: Call_GetDeleteDBClusterParameterGroup_612684;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612697.validator(path, query, header, formData, body)
  let scheme = call_612697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612697.url(scheme.get, call_612697.host, call_612697.base,
                         call_612697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612697, url, valid)

proc call*(call_612698: Call_GetDeleteDBClusterParameterGroup_612684;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612699 = newJObject()
  add(query_612699, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_612699, "Action", newJString(Action))
  add(query_612699, "Version", newJString(Version))
  result = call_612698.call(nil, query_612699, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_612684(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_612685, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_612686,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_612733 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBClusterSnapshot_612735(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_612734(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612736 = query.getOrDefault("Action")
  valid_612736 = validateParameter(valid_612736, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_612736 != nil:
    section.add "Action", valid_612736
  var valid_612737 = query.getOrDefault("Version")
  valid_612737 = validateParameter(valid_612737, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612737 != nil:
    section.add "Version", valid_612737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612738 = header.getOrDefault("X-Amz-Signature")
  valid_612738 = validateParameter(valid_612738, JString, required = false,
                                 default = nil)
  if valid_612738 != nil:
    section.add "X-Amz-Signature", valid_612738
  var valid_612739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612739 = validateParameter(valid_612739, JString, required = false,
                                 default = nil)
  if valid_612739 != nil:
    section.add "X-Amz-Content-Sha256", valid_612739
  var valid_612740 = header.getOrDefault("X-Amz-Date")
  valid_612740 = validateParameter(valid_612740, JString, required = false,
                                 default = nil)
  if valid_612740 != nil:
    section.add "X-Amz-Date", valid_612740
  var valid_612741 = header.getOrDefault("X-Amz-Credential")
  valid_612741 = validateParameter(valid_612741, JString, required = false,
                                 default = nil)
  if valid_612741 != nil:
    section.add "X-Amz-Credential", valid_612741
  var valid_612742 = header.getOrDefault("X-Amz-Security-Token")
  valid_612742 = validateParameter(valid_612742, JString, required = false,
                                 default = nil)
  if valid_612742 != nil:
    section.add "X-Amz-Security-Token", valid_612742
  var valid_612743 = header.getOrDefault("X-Amz-Algorithm")
  valid_612743 = validateParameter(valid_612743, JString, required = false,
                                 default = nil)
  if valid_612743 != nil:
    section.add "X-Amz-Algorithm", valid_612743
  var valid_612744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612744 = validateParameter(valid_612744, JString, required = false,
                                 default = nil)
  if valid_612744 != nil:
    section.add "X-Amz-SignedHeaders", valid_612744
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_612745 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_612745 = validateParameter(valid_612745, JString, required = true,
                                 default = nil)
  if valid_612745 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_612745
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612746: Call_PostDeleteDBClusterSnapshot_612733; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612746.validator(path, query, header, formData, body)
  let scheme = call_612746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612746.url(scheme.get, call_612746.host, call_612746.base,
                         call_612746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612746, url, valid)

proc call*(call_612747: Call_PostDeleteDBClusterSnapshot_612733;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612748 = newJObject()
  var formData_612749 = newJObject()
  add(formData_612749, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_612748, "Action", newJString(Action))
  add(query_612748, "Version", newJString(Version))
  result = call_612747.call(nil, query_612748, nil, formData_612749, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_612733(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_612734, base: "/",
    url: url_PostDeleteDBClusterSnapshot_612735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_612717 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBClusterSnapshot_612719(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_612718(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_612720 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_612720 = validateParameter(valid_612720, JString, required = true,
                                 default = nil)
  if valid_612720 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_612720
  var valid_612721 = query.getOrDefault("Action")
  valid_612721 = validateParameter(valid_612721, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_612721 != nil:
    section.add "Action", valid_612721
  var valid_612722 = query.getOrDefault("Version")
  valid_612722 = validateParameter(valid_612722, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612722 != nil:
    section.add "Version", valid_612722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612723 = header.getOrDefault("X-Amz-Signature")
  valid_612723 = validateParameter(valid_612723, JString, required = false,
                                 default = nil)
  if valid_612723 != nil:
    section.add "X-Amz-Signature", valid_612723
  var valid_612724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612724 = validateParameter(valid_612724, JString, required = false,
                                 default = nil)
  if valid_612724 != nil:
    section.add "X-Amz-Content-Sha256", valid_612724
  var valid_612725 = header.getOrDefault("X-Amz-Date")
  valid_612725 = validateParameter(valid_612725, JString, required = false,
                                 default = nil)
  if valid_612725 != nil:
    section.add "X-Amz-Date", valid_612725
  var valid_612726 = header.getOrDefault("X-Amz-Credential")
  valid_612726 = validateParameter(valid_612726, JString, required = false,
                                 default = nil)
  if valid_612726 != nil:
    section.add "X-Amz-Credential", valid_612726
  var valid_612727 = header.getOrDefault("X-Amz-Security-Token")
  valid_612727 = validateParameter(valid_612727, JString, required = false,
                                 default = nil)
  if valid_612727 != nil:
    section.add "X-Amz-Security-Token", valid_612727
  var valid_612728 = header.getOrDefault("X-Amz-Algorithm")
  valid_612728 = validateParameter(valid_612728, JString, required = false,
                                 default = nil)
  if valid_612728 != nil:
    section.add "X-Amz-Algorithm", valid_612728
  var valid_612729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612729 = validateParameter(valid_612729, JString, required = false,
                                 default = nil)
  if valid_612729 != nil:
    section.add "X-Amz-SignedHeaders", valid_612729
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612730: Call_GetDeleteDBClusterSnapshot_612717; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_612730.validator(path, query, header, formData, body)
  let scheme = call_612730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612730.url(scheme.get, call_612730.host, call_612730.base,
                         call_612730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612730, url, valid)

proc call*(call_612731: Call_GetDeleteDBClusterSnapshot_612717;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612732 = newJObject()
  add(query_612732, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_612732, "Action", newJString(Action))
  add(query_612732, "Version", newJString(Version))
  result = call_612731.call(nil, query_612732, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_612717(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_612718, base: "/",
    url: url_GetDeleteDBClusterSnapshot_612719,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_612769 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBInstance_612771(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstance_612770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612772 = query.getOrDefault("Action")
  valid_612772 = validateParameter(valid_612772, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_612772 != nil:
    section.add "Action", valid_612772
  var valid_612773 = query.getOrDefault("Version")
  valid_612773 = validateParameter(valid_612773, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612773 != nil:
    section.add "Version", valid_612773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612774 = header.getOrDefault("X-Amz-Signature")
  valid_612774 = validateParameter(valid_612774, JString, required = false,
                                 default = nil)
  if valid_612774 != nil:
    section.add "X-Amz-Signature", valid_612774
  var valid_612775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612775 = validateParameter(valid_612775, JString, required = false,
                                 default = nil)
  if valid_612775 != nil:
    section.add "X-Amz-Content-Sha256", valid_612775
  var valid_612776 = header.getOrDefault("X-Amz-Date")
  valid_612776 = validateParameter(valid_612776, JString, required = false,
                                 default = nil)
  if valid_612776 != nil:
    section.add "X-Amz-Date", valid_612776
  var valid_612777 = header.getOrDefault("X-Amz-Credential")
  valid_612777 = validateParameter(valid_612777, JString, required = false,
                                 default = nil)
  if valid_612777 != nil:
    section.add "X-Amz-Credential", valid_612777
  var valid_612778 = header.getOrDefault("X-Amz-Security-Token")
  valid_612778 = validateParameter(valid_612778, JString, required = false,
                                 default = nil)
  if valid_612778 != nil:
    section.add "X-Amz-Security-Token", valid_612778
  var valid_612779 = header.getOrDefault("X-Amz-Algorithm")
  valid_612779 = validateParameter(valid_612779, JString, required = false,
                                 default = nil)
  if valid_612779 != nil:
    section.add "X-Amz-Algorithm", valid_612779
  var valid_612780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612780 = validateParameter(valid_612780, JString, required = false,
                                 default = nil)
  if valid_612780 != nil:
    section.add "X-Amz-SignedHeaders", valid_612780
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_612781 = formData.getOrDefault("DBInstanceIdentifier")
  valid_612781 = validateParameter(valid_612781, JString, required = true,
                                 default = nil)
  if valid_612781 != nil:
    section.add "DBInstanceIdentifier", valid_612781
  var valid_612782 = formData.getOrDefault("SkipFinalSnapshot")
  valid_612782 = validateParameter(valid_612782, JBool, required = false, default = nil)
  if valid_612782 != nil:
    section.add "SkipFinalSnapshot", valid_612782
  var valid_612783 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_612783 = validateParameter(valid_612783, JString, required = false,
                                 default = nil)
  if valid_612783 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_612783
  var valid_612784 = formData.getOrDefault("DeleteAutomatedBackups")
  valid_612784 = validateParameter(valid_612784, JBool, required = false, default = nil)
  if valid_612784 != nil:
    section.add "DeleteAutomatedBackups", valid_612784
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612785: Call_PostDeleteDBInstance_612769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_612785.validator(path, query, header, formData, body)
  let scheme = call_612785.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612785.url(scheme.get, call_612785.host, call_612785.base,
                         call_612785.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612785, url, valid)

proc call*(call_612786: Call_PostDeleteDBInstance_612769;
          DBInstanceIdentifier: string; Action: string = "DeleteDBInstance";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"; DeleteAutomatedBackups: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Version: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  var query_612787 = newJObject()
  var formData_612788 = newJObject()
  add(formData_612788, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_612787, "Action", newJString(Action))
  add(formData_612788, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_612788, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_612787, "Version", newJString(Version))
  add(formData_612788, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  result = call_612786.call(nil, query_612787, nil, formData_612788, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_612769(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_612770, base: "/",
    url: url_PostDeleteDBInstance_612771, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_612750 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBInstance_612752(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstance_612751(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  var valid_612753 = query.getOrDefault("DeleteAutomatedBackups")
  valid_612753 = validateParameter(valid_612753, JBool, required = false, default = nil)
  if valid_612753 != nil:
    section.add "DeleteAutomatedBackups", valid_612753
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_612754 = query.getOrDefault("DBInstanceIdentifier")
  valid_612754 = validateParameter(valid_612754, JString, required = true,
                                 default = nil)
  if valid_612754 != nil:
    section.add "DBInstanceIdentifier", valid_612754
  var valid_612755 = query.getOrDefault("SkipFinalSnapshot")
  valid_612755 = validateParameter(valid_612755, JBool, required = false, default = nil)
  if valid_612755 != nil:
    section.add "SkipFinalSnapshot", valid_612755
  var valid_612756 = query.getOrDefault("Action")
  valid_612756 = validateParameter(valid_612756, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_612756 != nil:
    section.add "Action", valid_612756
  var valid_612757 = query.getOrDefault("Version")
  valid_612757 = validateParameter(valid_612757, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612757 != nil:
    section.add "Version", valid_612757
  var valid_612758 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_612758 = validateParameter(valid_612758, JString, required = false,
                                 default = nil)
  if valid_612758 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_612758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612759 = header.getOrDefault("X-Amz-Signature")
  valid_612759 = validateParameter(valid_612759, JString, required = false,
                                 default = nil)
  if valid_612759 != nil:
    section.add "X-Amz-Signature", valid_612759
  var valid_612760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612760 = validateParameter(valid_612760, JString, required = false,
                                 default = nil)
  if valid_612760 != nil:
    section.add "X-Amz-Content-Sha256", valid_612760
  var valid_612761 = header.getOrDefault("X-Amz-Date")
  valid_612761 = validateParameter(valid_612761, JString, required = false,
                                 default = nil)
  if valid_612761 != nil:
    section.add "X-Amz-Date", valid_612761
  var valid_612762 = header.getOrDefault("X-Amz-Credential")
  valid_612762 = validateParameter(valid_612762, JString, required = false,
                                 default = nil)
  if valid_612762 != nil:
    section.add "X-Amz-Credential", valid_612762
  var valid_612763 = header.getOrDefault("X-Amz-Security-Token")
  valid_612763 = validateParameter(valid_612763, JString, required = false,
                                 default = nil)
  if valid_612763 != nil:
    section.add "X-Amz-Security-Token", valid_612763
  var valid_612764 = header.getOrDefault("X-Amz-Algorithm")
  valid_612764 = validateParameter(valid_612764, JString, required = false,
                                 default = nil)
  if valid_612764 != nil:
    section.add "X-Amz-Algorithm", valid_612764
  var valid_612765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612765 = validateParameter(valid_612765, JString, required = false,
                                 default = nil)
  if valid_612765 != nil:
    section.add "X-Amz-SignedHeaders", valid_612765
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612766: Call_GetDeleteDBInstance_612750; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_612766.validator(path, query, header, formData, body)
  let scheme = call_612766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612766.url(scheme.get, call_612766.host, call_612766.base,
                         call_612766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612766, url, valid)

proc call*(call_612767: Call_GetDeleteDBInstance_612750;
          DBInstanceIdentifier: string; DeleteAutomatedBackups: bool = false;
          SkipFinalSnapshot: bool = false; Action: string = "DeleteDBInstance";
          Version: string = "2014-10-31"; FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  var query_612768 = newJObject()
  add(query_612768, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_612768, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_612768, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_612768, "Action", newJString(Action))
  add(query_612768, "Version", newJString(Version))
  add(query_612768, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_612767.call(nil, query_612768, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_612750(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_612751, base: "/",
    url: url_GetDeleteDBInstance_612752, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstanceAutomatedBackup_612805 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBInstanceAutomatedBackup_612807(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstanceAutomatedBackup_612806(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612808 = query.getOrDefault("Action")
  valid_612808 = validateParameter(valid_612808, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_612808 != nil:
    section.add "Action", valid_612808
  var valid_612809 = query.getOrDefault("Version")
  valid_612809 = validateParameter(valid_612809, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612809 != nil:
    section.add "Version", valid_612809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612810 = header.getOrDefault("X-Amz-Signature")
  valid_612810 = validateParameter(valid_612810, JString, required = false,
                                 default = nil)
  if valid_612810 != nil:
    section.add "X-Amz-Signature", valid_612810
  var valid_612811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612811 = validateParameter(valid_612811, JString, required = false,
                                 default = nil)
  if valid_612811 != nil:
    section.add "X-Amz-Content-Sha256", valid_612811
  var valid_612812 = header.getOrDefault("X-Amz-Date")
  valid_612812 = validateParameter(valid_612812, JString, required = false,
                                 default = nil)
  if valid_612812 != nil:
    section.add "X-Amz-Date", valid_612812
  var valid_612813 = header.getOrDefault("X-Amz-Credential")
  valid_612813 = validateParameter(valid_612813, JString, required = false,
                                 default = nil)
  if valid_612813 != nil:
    section.add "X-Amz-Credential", valid_612813
  var valid_612814 = header.getOrDefault("X-Amz-Security-Token")
  valid_612814 = validateParameter(valid_612814, JString, required = false,
                                 default = nil)
  if valid_612814 != nil:
    section.add "X-Amz-Security-Token", valid_612814
  var valid_612815 = header.getOrDefault("X-Amz-Algorithm")
  valid_612815 = validateParameter(valid_612815, JString, required = false,
                                 default = nil)
  if valid_612815 != nil:
    section.add "X-Amz-Algorithm", valid_612815
  var valid_612816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612816 = validateParameter(valid_612816, JString, required = false,
                                 default = nil)
  if valid_612816 != nil:
    section.add "X-Amz-SignedHeaders", valid_612816
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbiResourceId` field"
  var valid_612817 = formData.getOrDefault("DbiResourceId")
  valid_612817 = validateParameter(valid_612817, JString, required = true,
                                 default = nil)
  if valid_612817 != nil:
    section.add "DbiResourceId", valid_612817
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612818: Call_PostDeleteDBInstanceAutomatedBackup_612805;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_612818.validator(path, query, header, formData, body)
  let scheme = call_612818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612818.url(scheme.get, call_612818.host, call_612818.base,
                         call_612818.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612818, url, valid)

proc call*(call_612819: Call_PostDeleteDBInstanceAutomatedBackup_612805;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612820 = newJObject()
  var formData_612821 = newJObject()
  add(formData_612821, "DbiResourceId", newJString(DbiResourceId))
  add(query_612820, "Action", newJString(Action))
  add(query_612820, "Version", newJString(Version))
  result = call_612819.call(nil, query_612820, nil, formData_612821, nil)

var postDeleteDBInstanceAutomatedBackup* = Call_PostDeleteDBInstanceAutomatedBackup_612805(
    name: "postDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_PostDeleteDBInstanceAutomatedBackup_612806, base: "/",
    url: url_PostDeleteDBInstanceAutomatedBackup_612807,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstanceAutomatedBackup_612789 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBInstanceAutomatedBackup_612791(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstanceAutomatedBackup_612790(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DbiResourceId` field"
  var valid_612792 = query.getOrDefault("DbiResourceId")
  valid_612792 = validateParameter(valid_612792, JString, required = true,
                                 default = nil)
  if valid_612792 != nil:
    section.add "DbiResourceId", valid_612792
  var valid_612793 = query.getOrDefault("Action")
  valid_612793 = validateParameter(valid_612793, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_612793 != nil:
    section.add "Action", valid_612793
  var valid_612794 = query.getOrDefault("Version")
  valid_612794 = validateParameter(valid_612794, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612794 != nil:
    section.add "Version", valid_612794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612795 = header.getOrDefault("X-Amz-Signature")
  valid_612795 = validateParameter(valid_612795, JString, required = false,
                                 default = nil)
  if valid_612795 != nil:
    section.add "X-Amz-Signature", valid_612795
  var valid_612796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612796 = validateParameter(valid_612796, JString, required = false,
                                 default = nil)
  if valid_612796 != nil:
    section.add "X-Amz-Content-Sha256", valid_612796
  var valid_612797 = header.getOrDefault("X-Amz-Date")
  valid_612797 = validateParameter(valid_612797, JString, required = false,
                                 default = nil)
  if valid_612797 != nil:
    section.add "X-Amz-Date", valid_612797
  var valid_612798 = header.getOrDefault("X-Amz-Credential")
  valid_612798 = validateParameter(valid_612798, JString, required = false,
                                 default = nil)
  if valid_612798 != nil:
    section.add "X-Amz-Credential", valid_612798
  var valid_612799 = header.getOrDefault("X-Amz-Security-Token")
  valid_612799 = validateParameter(valid_612799, JString, required = false,
                                 default = nil)
  if valid_612799 != nil:
    section.add "X-Amz-Security-Token", valid_612799
  var valid_612800 = header.getOrDefault("X-Amz-Algorithm")
  valid_612800 = validateParameter(valid_612800, JString, required = false,
                                 default = nil)
  if valid_612800 != nil:
    section.add "X-Amz-Algorithm", valid_612800
  var valid_612801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612801 = validateParameter(valid_612801, JString, required = false,
                                 default = nil)
  if valid_612801 != nil:
    section.add "X-Amz-SignedHeaders", valid_612801
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612802: Call_GetDeleteDBInstanceAutomatedBackup_612789;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_612802.validator(path, query, header, formData, body)
  let scheme = call_612802.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612802.url(scheme.get, call_612802.host, call_612802.base,
                         call_612802.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612802, url, valid)

proc call*(call_612803: Call_GetDeleteDBInstanceAutomatedBackup_612789;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612804 = newJObject()
  add(query_612804, "DbiResourceId", newJString(DbiResourceId))
  add(query_612804, "Action", newJString(Action))
  add(query_612804, "Version", newJString(Version))
  result = call_612803.call(nil, query_612804, nil, nil, nil)

var getDeleteDBInstanceAutomatedBackup* = Call_GetDeleteDBInstanceAutomatedBackup_612789(
    name: "getDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_GetDeleteDBInstanceAutomatedBackup_612790, base: "/",
    url: url_GetDeleteDBInstanceAutomatedBackup_612791,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_612838 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBParameterGroup_612840(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBParameterGroup_612839(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612841 = query.getOrDefault("Action")
  valid_612841 = validateParameter(valid_612841, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_612841 != nil:
    section.add "Action", valid_612841
  var valid_612842 = query.getOrDefault("Version")
  valid_612842 = validateParameter(valid_612842, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612842 != nil:
    section.add "Version", valid_612842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612843 = header.getOrDefault("X-Amz-Signature")
  valid_612843 = validateParameter(valid_612843, JString, required = false,
                                 default = nil)
  if valid_612843 != nil:
    section.add "X-Amz-Signature", valid_612843
  var valid_612844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612844 = validateParameter(valid_612844, JString, required = false,
                                 default = nil)
  if valid_612844 != nil:
    section.add "X-Amz-Content-Sha256", valid_612844
  var valid_612845 = header.getOrDefault("X-Amz-Date")
  valid_612845 = validateParameter(valid_612845, JString, required = false,
                                 default = nil)
  if valid_612845 != nil:
    section.add "X-Amz-Date", valid_612845
  var valid_612846 = header.getOrDefault("X-Amz-Credential")
  valid_612846 = validateParameter(valid_612846, JString, required = false,
                                 default = nil)
  if valid_612846 != nil:
    section.add "X-Amz-Credential", valid_612846
  var valid_612847 = header.getOrDefault("X-Amz-Security-Token")
  valid_612847 = validateParameter(valid_612847, JString, required = false,
                                 default = nil)
  if valid_612847 != nil:
    section.add "X-Amz-Security-Token", valid_612847
  var valid_612848 = header.getOrDefault("X-Amz-Algorithm")
  valid_612848 = validateParameter(valid_612848, JString, required = false,
                                 default = nil)
  if valid_612848 != nil:
    section.add "X-Amz-Algorithm", valid_612848
  var valid_612849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612849 = validateParameter(valid_612849, JString, required = false,
                                 default = nil)
  if valid_612849 != nil:
    section.add "X-Amz-SignedHeaders", valid_612849
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_612850 = formData.getOrDefault("DBParameterGroupName")
  valid_612850 = validateParameter(valid_612850, JString, required = true,
                                 default = nil)
  if valid_612850 != nil:
    section.add "DBParameterGroupName", valid_612850
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612851: Call_PostDeleteDBParameterGroup_612838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_612851.validator(path, query, header, formData, body)
  let scheme = call_612851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612851.url(scheme.get, call_612851.host, call_612851.base,
                         call_612851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612851, url, valid)

proc call*(call_612852: Call_PostDeleteDBParameterGroup_612838;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612853 = newJObject()
  var formData_612854 = newJObject()
  add(formData_612854, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_612853, "Action", newJString(Action))
  add(query_612853, "Version", newJString(Version))
  result = call_612852.call(nil, query_612853, nil, formData_612854, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_612838(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_612839, base: "/",
    url: url_PostDeleteDBParameterGroup_612840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_612822 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBParameterGroup_612824(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBParameterGroup_612823(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_612825 = query.getOrDefault("DBParameterGroupName")
  valid_612825 = validateParameter(valid_612825, JString, required = true,
                                 default = nil)
  if valid_612825 != nil:
    section.add "DBParameterGroupName", valid_612825
  var valid_612826 = query.getOrDefault("Action")
  valid_612826 = validateParameter(valid_612826, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_612826 != nil:
    section.add "Action", valid_612826
  var valid_612827 = query.getOrDefault("Version")
  valid_612827 = validateParameter(valid_612827, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612827 != nil:
    section.add "Version", valid_612827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612828 = header.getOrDefault("X-Amz-Signature")
  valid_612828 = validateParameter(valid_612828, JString, required = false,
                                 default = nil)
  if valid_612828 != nil:
    section.add "X-Amz-Signature", valid_612828
  var valid_612829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612829 = validateParameter(valid_612829, JString, required = false,
                                 default = nil)
  if valid_612829 != nil:
    section.add "X-Amz-Content-Sha256", valid_612829
  var valid_612830 = header.getOrDefault("X-Amz-Date")
  valid_612830 = validateParameter(valid_612830, JString, required = false,
                                 default = nil)
  if valid_612830 != nil:
    section.add "X-Amz-Date", valid_612830
  var valid_612831 = header.getOrDefault("X-Amz-Credential")
  valid_612831 = validateParameter(valid_612831, JString, required = false,
                                 default = nil)
  if valid_612831 != nil:
    section.add "X-Amz-Credential", valid_612831
  var valid_612832 = header.getOrDefault("X-Amz-Security-Token")
  valid_612832 = validateParameter(valid_612832, JString, required = false,
                                 default = nil)
  if valid_612832 != nil:
    section.add "X-Amz-Security-Token", valid_612832
  var valid_612833 = header.getOrDefault("X-Amz-Algorithm")
  valid_612833 = validateParameter(valid_612833, JString, required = false,
                                 default = nil)
  if valid_612833 != nil:
    section.add "X-Amz-Algorithm", valid_612833
  var valid_612834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612834 = validateParameter(valid_612834, JString, required = false,
                                 default = nil)
  if valid_612834 != nil:
    section.add "X-Amz-SignedHeaders", valid_612834
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612835: Call_GetDeleteDBParameterGroup_612822; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_612835.validator(path, query, header, formData, body)
  let scheme = call_612835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612835.url(scheme.get, call_612835.host, call_612835.base,
                         call_612835.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612835, url, valid)

proc call*(call_612836: Call_GetDeleteDBParameterGroup_612822;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612837 = newJObject()
  add(query_612837, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_612837, "Action", newJString(Action))
  add(query_612837, "Version", newJString(Version))
  result = call_612836.call(nil, query_612837, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_612822(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_612823, base: "/",
    url: url_GetDeleteDBParameterGroup_612824,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBProxy_612871 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBProxy_612873(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBProxy_612872(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612874 = query.getOrDefault("Action")
  valid_612874 = validateParameter(valid_612874, JString, required = true,
                                 default = newJString("DeleteDBProxy"))
  if valid_612874 != nil:
    section.add "Action", valid_612874
  var valid_612875 = query.getOrDefault("Version")
  valid_612875 = validateParameter(valid_612875, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612875 != nil:
    section.add "Version", valid_612875
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612876 = header.getOrDefault("X-Amz-Signature")
  valid_612876 = validateParameter(valid_612876, JString, required = false,
                                 default = nil)
  if valid_612876 != nil:
    section.add "X-Amz-Signature", valid_612876
  var valid_612877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612877 = validateParameter(valid_612877, JString, required = false,
                                 default = nil)
  if valid_612877 != nil:
    section.add "X-Amz-Content-Sha256", valid_612877
  var valid_612878 = header.getOrDefault("X-Amz-Date")
  valid_612878 = validateParameter(valid_612878, JString, required = false,
                                 default = nil)
  if valid_612878 != nil:
    section.add "X-Amz-Date", valid_612878
  var valid_612879 = header.getOrDefault("X-Amz-Credential")
  valid_612879 = validateParameter(valid_612879, JString, required = false,
                                 default = nil)
  if valid_612879 != nil:
    section.add "X-Amz-Credential", valid_612879
  var valid_612880 = header.getOrDefault("X-Amz-Security-Token")
  valid_612880 = validateParameter(valid_612880, JString, required = false,
                                 default = nil)
  if valid_612880 != nil:
    section.add "X-Amz-Security-Token", valid_612880
  var valid_612881 = header.getOrDefault("X-Amz-Algorithm")
  valid_612881 = validateParameter(valid_612881, JString, required = false,
                                 default = nil)
  if valid_612881 != nil:
    section.add "X-Amz-Algorithm", valid_612881
  var valid_612882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612882 = validateParameter(valid_612882, JString, required = false,
                                 default = nil)
  if valid_612882 != nil:
    section.add "X-Amz-SignedHeaders", valid_612882
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_612883 = formData.getOrDefault("DBProxyName")
  valid_612883 = validateParameter(valid_612883, JString, required = true,
                                 default = nil)
  if valid_612883 != nil:
    section.add "DBProxyName", valid_612883
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612884: Call_PostDeleteDBProxy_612871; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_612884.validator(path, query, header, formData, body)
  let scheme = call_612884.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612884.url(scheme.get, call_612884.host, call_612884.base,
                         call_612884.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612884, url, valid)

proc call*(call_612885: Call_PostDeleteDBProxy_612871; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612886 = newJObject()
  var formData_612887 = newJObject()
  add(formData_612887, "DBProxyName", newJString(DBProxyName))
  add(query_612886, "Action", newJString(Action))
  add(query_612886, "Version", newJString(Version))
  result = call_612885.call(nil, query_612886, nil, formData_612887, nil)

var postDeleteDBProxy* = Call_PostDeleteDBProxy_612871(name: "postDeleteDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_PostDeleteDBProxy_612872,
    base: "/", url: url_PostDeleteDBProxy_612873,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBProxy_612855 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBProxy_612857(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBProxy_612856(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  var valid_612858 = query.getOrDefault("Action")
  valid_612858 = validateParameter(valid_612858, JString, required = true,
                                 default = newJString("DeleteDBProxy"))
  if valid_612858 != nil:
    section.add "Action", valid_612858
  var valid_612859 = query.getOrDefault("Version")
  valid_612859 = validateParameter(valid_612859, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612859 != nil:
    section.add "Version", valid_612859
  var valid_612860 = query.getOrDefault("DBProxyName")
  valid_612860 = validateParameter(valid_612860, JString, required = true,
                                 default = nil)
  if valid_612860 != nil:
    section.add "DBProxyName", valid_612860
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612861 = header.getOrDefault("X-Amz-Signature")
  valid_612861 = validateParameter(valid_612861, JString, required = false,
                                 default = nil)
  if valid_612861 != nil:
    section.add "X-Amz-Signature", valid_612861
  var valid_612862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612862 = validateParameter(valid_612862, JString, required = false,
                                 default = nil)
  if valid_612862 != nil:
    section.add "X-Amz-Content-Sha256", valid_612862
  var valid_612863 = header.getOrDefault("X-Amz-Date")
  valid_612863 = validateParameter(valid_612863, JString, required = false,
                                 default = nil)
  if valid_612863 != nil:
    section.add "X-Amz-Date", valid_612863
  var valid_612864 = header.getOrDefault("X-Amz-Credential")
  valid_612864 = validateParameter(valid_612864, JString, required = false,
                                 default = nil)
  if valid_612864 != nil:
    section.add "X-Amz-Credential", valid_612864
  var valid_612865 = header.getOrDefault("X-Amz-Security-Token")
  valid_612865 = validateParameter(valid_612865, JString, required = false,
                                 default = nil)
  if valid_612865 != nil:
    section.add "X-Amz-Security-Token", valid_612865
  var valid_612866 = header.getOrDefault("X-Amz-Algorithm")
  valid_612866 = validateParameter(valid_612866, JString, required = false,
                                 default = nil)
  if valid_612866 != nil:
    section.add "X-Amz-Algorithm", valid_612866
  var valid_612867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612867 = validateParameter(valid_612867, JString, required = false,
                                 default = nil)
  if valid_612867 != nil:
    section.add "X-Amz-SignedHeaders", valid_612867
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612868: Call_GetDeleteDBProxy_612855; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_612868.validator(path, query, header, formData, body)
  let scheme = call_612868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612868.url(scheme.get, call_612868.host, call_612868.base,
                         call_612868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612868, url, valid)

proc call*(call_612869: Call_GetDeleteDBProxy_612855; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  var query_612870 = newJObject()
  add(query_612870, "Action", newJString(Action))
  add(query_612870, "Version", newJString(Version))
  add(query_612870, "DBProxyName", newJString(DBProxyName))
  result = call_612869.call(nil, query_612870, nil, nil, nil)

var getDeleteDBProxy* = Call_GetDeleteDBProxy_612855(name: "getDeleteDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_GetDeleteDBProxy_612856,
    base: "/", url: url_GetDeleteDBProxy_612857,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSecurityGroup_612904 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBSecurityGroup_612906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSecurityGroup_612905(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612907 = query.getOrDefault("Action")
  valid_612907 = validateParameter(valid_612907, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_612907 != nil:
    section.add "Action", valid_612907
  var valid_612908 = query.getOrDefault("Version")
  valid_612908 = validateParameter(valid_612908, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612908 != nil:
    section.add "Version", valid_612908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612909 = header.getOrDefault("X-Amz-Signature")
  valid_612909 = validateParameter(valid_612909, JString, required = false,
                                 default = nil)
  if valid_612909 != nil:
    section.add "X-Amz-Signature", valid_612909
  var valid_612910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612910 = validateParameter(valid_612910, JString, required = false,
                                 default = nil)
  if valid_612910 != nil:
    section.add "X-Amz-Content-Sha256", valid_612910
  var valid_612911 = header.getOrDefault("X-Amz-Date")
  valid_612911 = validateParameter(valid_612911, JString, required = false,
                                 default = nil)
  if valid_612911 != nil:
    section.add "X-Amz-Date", valid_612911
  var valid_612912 = header.getOrDefault("X-Amz-Credential")
  valid_612912 = validateParameter(valid_612912, JString, required = false,
                                 default = nil)
  if valid_612912 != nil:
    section.add "X-Amz-Credential", valid_612912
  var valid_612913 = header.getOrDefault("X-Amz-Security-Token")
  valid_612913 = validateParameter(valid_612913, JString, required = false,
                                 default = nil)
  if valid_612913 != nil:
    section.add "X-Amz-Security-Token", valid_612913
  var valid_612914 = header.getOrDefault("X-Amz-Algorithm")
  valid_612914 = validateParameter(valid_612914, JString, required = false,
                                 default = nil)
  if valid_612914 != nil:
    section.add "X-Amz-Algorithm", valid_612914
  var valid_612915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612915 = validateParameter(valid_612915, JString, required = false,
                                 default = nil)
  if valid_612915 != nil:
    section.add "X-Amz-SignedHeaders", valid_612915
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_612916 = formData.getOrDefault("DBSecurityGroupName")
  valid_612916 = validateParameter(valid_612916, JString, required = true,
                                 default = nil)
  if valid_612916 != nil:
    section.add "DBSecurityGroupName", valid_612916
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612917: Call_PostDeleteDBSecurityGroup_612904; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_612917.validator(path, query, header, formData, body)
  let scheme = call_612917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612917.url(scheme.get, call_612917.host, call_612917.base,
                         call_612917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612917, url, valid)

proc call*(call_612918: Call_PostDeleteDBSecurityGroup_612904;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612919 = newJObject()
  var formData_612920 = newJObject()
  add(formData_612920, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_612919, "Action", newJString(Action))
  add(query_612919, "Version", newJString(Version))
  result = call_612918.call(nil, query_612919, nil, formData_612920, nil)

var postDeleteDBSecurityGroup* = Call_PostDeleteDBSecurityGroup_612904(
    name: "postDeleteDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_PostDeleteDBSecurityGroup_612905, base: "/",
    url: url_PostDeleteDBSecurityGroup_612906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSecurityGroup_612888 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBSecurityGroup_612890(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSecurityGroup_612889(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_612891 = query.getOrDefault("DBSecurityGroupName")
  valid_612891 = validateParameter(valid_612891, JString, required = true,
                                 default = nil)
  if valid_612891 != nil:
    section.add "DBSecurityGroupName", valid_612891
  var valid_612892 = query.getOrDefault("Action")
  valid_612892 = validateParameter(valid_612892, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_612892 != nil:
    section.add "Action", valid_612892
  var valid_612893 = query.getOrDefault("Version")
  valid_612893 = validateParameter(valid_612893, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612893 != nil:
    section.add "Version", valid_612893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612894 = header.getOrDefault("X-Amz-Signature")
  valid_612894 = validateParameter(valid_612894, JString, required = false,
                                 default = nil)
  if valid_612894 != nil:
    section.add "X-Amz-Signature", valid_612894
  var valid_612895 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612895 = validateParameter(valid_612895, JString, required = false,
                                 default = nil)
  if valid_612895 != nil:
    section.add "X-Amz-Content-Sha256", valid_612895
  var valid_612896 = header.getOrDefault("X-Amz-Date")
  valid_612896 = validateParameter(valid_612896, JString, required = false,
                                 default = nil)
  if valid_612896 != nil:
    section.add "X-Amz-Date", valid_612896
  var valid_612897 = header.getOrDefault("X-Amz-Credential")
  valid_612897 = validateParameter(valid_612897, JString, required = false,
                                 default = nil)
  if valid_612897 != nil:
    section.add "X-Amz-Credential", valid_612897
  var valid_612898 = header.getOrDefault("X-Amz-Security-Token")
  valid_612898 = validateParameter(valid_612898, JString, required = false,
                                 default = nil)
  if valid_612898 != nil:
    section.add "X-Amz-Security-Token", valid_612898
  var valid_612899 = header.getOrDefault("X-Amz-Algorithm")
  valid_612899 = validateParameter(valid_612899, JString, required = false,
                                 default = nil)
  if valid_612899 != nil:
    section.add "X-Amz-Algorithm", valid_612899
  var valid_612900 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612900 = validateParameter(valid_612900, JString, required = false,
                                 default = nil)
  if valid_612900 != nil:
    section.add "X-Amz-SignedHeaders", valid_612900
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612901: Call_GetDeleteDBSecurityGroup_612888; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_612901.validator(path, query, header, formData, body)
  let scheme = call_612901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612901.url(scheme.get, call_612901.host, call_612901.base,
                         call_612901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612901, url, valid)

proc call*(call_612902: Call_GetDeleteDBSecurityGroup_612888;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612903 = newJObject()
  add(query_612903, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_612903, "Action", newJString(Action))
  add(query_612903, "Version", newJString(Version))
  result = call_612902.call(nil, query_612903, nil, nil, nil)

var getDeleteDBSecurityGroup* = Call_GetDeleteDBSecurityGroup_612888(
    name: "getDeleteDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_GetDeleteDBSecurityGroup_612889, base: "/",
    url: url_GetDeleteDBSecurityGroup_612890, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSnapshot_612937 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBSnapshot_612939(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSnapshot_612938(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612940 = query.getOrDefault("Action")
  valid_612940 = validateParameter(valid_612940, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_612940 != nil:
    section.add "Action", valid_612940
  var valid_612941 = query.getOrDefault("Version")
  valid_612941 = validateParameter(valid_612941, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612941 != nil:
    section.add "Version", valid_612941
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612942 = header.getOrDefault("X-Amz-Signature")
  valid_612942 = validateParameter(valid_612942, JString, required = false,
                                 default = nil)
  if valid_612942 != nil:
    section.add "X-Amz-Signature", valid_612942
  var valid_612943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612943 = validateParameter(valid_612943, JString, required = false,
                                 default = nil)
  if valid_612943 != nil:
    section.add "X-Amz-Content-Sha256", valid_612943
  var valid_612944 = header.getOrDefault("X-Amz-Date")
  valid_612944 = validateParameter(valid_612944, JString, required = false,
                                 default = nil)
  if valid_612944 != nil:
    section.add "X-Amz-Date", valid_612944
  var valid_612945 = header.getOrDefault("X-Amz-Credential")
  valid_612945 = validateParameter(valid_612945, JString, required = false,
                                 default = nil)
  if valid_612945 != nil:
    section.add "X-Amz-Credential", valid_612945
  var valid_612946 = header.getOrDefault("X-Amz-Security-Token")
  valid_612946 = validateParameter(valid_612946, JString, required = false,
                                 default = nil)
  if valid_612946 != nil:
    section.add "X-Amz-Security-Token", valid_612946
  var valid_612947 = header.getOrDefault("X-Amz-Algorithm")
  valid_612947 = validateParameter(valid_612947, JString, required = false,
                                 default = nil)
  if valid_612947 != nil:
    section.add "X-Amz-Algorithm", valid_612947
  var valid_612948 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612948 = validateParameter(valid_612948, JString, required = false,
                                 default = nil)
  if valid_612948 != nil:
    section.add "X-Amz-SignedHeaders", valid_612948
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_612949 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_612949 = validateParameter(valid_612949, JString, required = true,
                                 default = nil)
  if valid_612949 != nil:
    section.add "DBSnapshotIdentifier", valid_612949
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612950: Call_PostDeleteDBSnapshot_612937; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_612950.validator(path, query, header, formData, body)
  let scheme = call_612950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612950.url(scheme.get, call_612950.host, call_612950.base,
                         call_612950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612950, url, valid)

proc call*(call_612951: Call_PostDeleteDBSnapshot_612937;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612952 = newJObject()
  var formData_612953 = newJObject()
  add(formData_612953, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_612952, "Action", newJString(Action))
  add(query_612952, "Version", newJString(Version))
  result = call_612951.call(nil, query_612952, nil, formData_612953, nil)

var postDeleteDBSnapshot* = Call_PostDeleteDBSnapshot_612937(
    name: "postDeleteDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_PostDeleteDBSnapshot_612938, base: "/",
    url: url_PostDeleteDBSnapshot_612939, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSnapshot_612921 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBSnapshot_612923(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSnapshot_612922(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_612924 = query.getOrDefault("DBSnapshotIdentifier")
  valid_612924 = validateParameter(valid_612924, JString, required = true,
                                 default = nil)
  if valid_612924 != nil:
    section.add "DBSnapshotIdentifier", valid_612924
  var valid_612925 = query.getOrDefault("Action")
  valid_612925 = validateParameter(valid_612925, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_612925 != nil:
    section.add "Action", valid_612925
  var valid_612926 = query.getOrDefault("Version")
  valid_612926 = validateParameter(valid_612926, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612926 != nil:
    section.add "Version", valid_612926
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612927 = header.getOrDefault("X-Amz-Signature")
  valid_612927 = validateParameter(valid_612927, JString, required = false,
                                 default = nil)
  if valid_612927 != nil:
    section.add "X-Amz-Signature", valid_612927
  var valid_612928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612928 = validateParameter(valid_612928, JString, required = false,
                                 default = nil)
  if valid_612928 != nil:
    section.add "X-Amz-Content-Sha256", valid_612928
  var valid_612929 = header.getOrDefault("X-Amz-Date")
  valid_612929 = validateParameter(valid_612929, JString, required = false,
                                 default = nil)
  if valid_612929 != nil:
    section.add "X-Amz-Date", valid_612929
  var valid_612930 = header.getOrDefault("X-Amz-Credential")
  valid_612930 = validateParameter(valid_612930, JString, required = false,
                                 default = nil)
  if valid_612930 != nil:
    section.add "X-Amz-Credential", valid_612930
  var valid_612931 = header.getOrDefault("X-Amz-Security-Token")
  valid_612931 = validateParameter(valid_612931, JString, required = false,
                                 default = nil)
  if valid_612931 != nil:
    section.add "X-Amz-Security-Token", valid_612931
  var valid_612932 = header.getOrDefault("X-Amz-Algorithm")
  valid_612932 = validateParameter(valid_612932, JString, required = false,
                                 default = nil)
  if valid_612932 != nil:
    section.add "X-Amz-Algorithm", valid_612932
  var valid_612933 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612933 = validateParameter(valid_612933, JString, required = false,
                                 default = nil)
  if valid_612933 != nil:
    section.add "X-Amz-SignedHeaders", valid_612933
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612934: Call_GetDeleteDBSnapshot_612921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_612934.validator(path, query, header, formData, body)
  let scheme = call_612934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612934.url(scheme.get, call_612934.host, call_612934.base,
                         call_612934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612934, url, valid)

proc call*(call_612935: Call_GetDeleteDBSnapshot_612921;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612936 = newJObject()
  add(query_612936, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_612936, "Action", newJString(Action))
  add(query_612936, "Version", newJString(Version))
  result = call_612935.call(nil, query_612936, nil, nil, nil)

var getDeleteDBSnapshot* = Call_GetDeleteDBSnapshot_612921(
    name: "getDeleteDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_GetDeleteDBSnapshot_612922, base: "/",
    url: url_GetDeleteDBSnapshot_612923, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_612970 = ref object of OpenApiRestCall_610658
proc url_PostDeleteDBSubnetGroup_612972(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSubnetGroup_612971(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612973 = query.getOrDefault("Action")
  valid_612973 = validateParameter(valid_612973, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_612973 != nil:
    section.add "Action", valid_612973
  var valid_612974 = query.getOrDefault("Version")
  valid_612974 = validateParameter(valid_612974, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612974 != nil:
    section.add "Version", valid_612974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612975 = header.getOrDefault("X-Amz-Signature")
  valid_612975 = validateParameter(valid_612975, JString, required = false,
                                 default = nil)
  if valid_612975 != nil:
    section.add "X-Amz-Signature", valid_612975
  var valid_612976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612976 = validateParameter(valid_612976, JString, required = false,
                                 default = nil)
  if valid_612976 != nil:
    section.add "X-Amz-Content-Sha256", valid_612976
  var valid_612977 = header.getOrDefault("X-Amz-Date")
  valid_612977 = validateParameter(valid_612977, JString, required = false,
                                 default = nil)
  if valid_612977 != nil:
    section.add "X-Amz-Date", valid_612977
  var valid_612978 = header.getOrDefault("X-Amz-Credential")
  valid_612978 = validateParameter(valid_612978, JString, required = false,
                                 default = nil)
  if valid_612978 != nil:
    section.add "X-Amz-Credential", valid_612978
  var valid_612979 = header.getOrDefault("X-Amz-Security-Token")
  valid_612979 = validateParameter(valid_612979, JString, required = false,
                                 default = nil)
  if valid_612979 != nil:
    section.add "X-Amz-Security-Token", valid_612979
  var valid_612980 = header.getOrDefault("X-Amz-Algorithm")
  valid_612980 = validateParameter(valid_612980, JString, required = false,
                                 default = nil)
  if valid_612980 != nil:
    section.add "X-Amz-Algorithm", valid_612980
  var valid_612981 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612981 = validateParameter(valid_612981, JString, required = false,
                                 default = nil)
  if valid_612981 != nil:
    section.add "X-Amz-SignedHeaders", valid_612981
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_612982 = formData.getOrDefault("DBSubnetGroupName")
  valid_612982 = validateParameter(valid_612982, JString, required = true,
                                 default = nil)
  if valid_612982 != nil:
    section.add "DBSubnetGroupName", valid_612982
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612983: Call_PostDeleteDBSubnetGroup_612970; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_612983.validator(path, query, header, formData, body)
  let scheme = call_612983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612983.url(scheme.get, call_612983.host, call_612983.base,
                         call_612983.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612983, url, valid)

proc call*(call_612984: Call_PostDeleteDBSubnetGroup_612970;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_612985 = newJObject()
  var formData_612986 = newJObject()
  add(query_612985, "Action", newJString(Action))
  add(formData_612986, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_612985, "Version", newJString(Version))
  result = call_612984.call(nil, query_612985, nil, formData_612986, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_612970(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_612971, base: "/",
    url: url_PostDeleteDBSubnetGroup_612972, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_612954 = ref object of OpenApiRestCall_610658
proc url_GetDeleteDBSubnetGroup_612956(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSubnetGroup_612955(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_612957 = query.getOrDefault("Action")
  valid_612957 = validateParameter(valid_612957, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_612957 != nil:
    section.add "Action", valid_612957
  var valid_612958 = query.getOrDefault("DBSubnetGroupName")
  valid_612958 = validateParameter(valid_612958, JString, required = true,
                                 default = nil)
  if valid_612958 != nil:
    section.add "DBSubnetGroupName", valid_612958
  var valid_612959 = query.getOrDefault("Version")
  valid_612959 = validateParameter(valid_612959, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612959 != nil:
    section.add "Version", valid_612959
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612960 = header.getOrDefault("X-Amz-Signature")
  valid_612960 = validateParameter(valid_612960, JString, required = false,
                                 default = nil)
  if valid_612960 != nil:
    section.add "X-Amz-Signature", valid_612960
  var valid_612961 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612961 = validateParameter(valid_612961, JString, required = false,
                                 default = nil)
  if valid_612961 != nil:
    section.add "X-Amz-Content-Sha256", valid_612961
  var valid_612962 = header.getOrDefault("X-Amz-Date")
  valid_612962 = validateParameter(valid_612962, JString, required = false,
                                 default = nil)
  if valid_612962 != nil:
    section.add "X-Amz-Date", valid_612962
  var valid_612963 = header.getOrDefault("X-Amz-Credential")
  valid_612963 = validateParameter(valid_612963, JString, required = false,
                                 default = nil)
  if valid_612963 != nil:
    section.add "X-Amz-Credential", valid_612963
  var valid_612964 = header.getOrDefault("X-Amz-Security-Token")
  valid_612964 = validateParameter(valid_612964, JString, required = false,
                                 default = nil)
  if valid_612964 != nil:
    section.add "X-Amz-Security-Token", valid_612964
  var valid_612965 = header.getOrDefault("X-Amz-Algorithm")
  valid_612965 = validateParameter(valid_612965, JString, required = false,
                                 default = nil)
  if valid_612965 != nil:
    section.add "X-Amz-Algorithm", valid_612965
  var valid_612966 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612966 = validateParameter(valid_612966, JString, required = false,
                                 default = nil)
  if valid_612966 != nil:
    section.add "X-Amz-SignedHeaders", valid_612966
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612967: Call_GetDeleteDBSubnetGroup_612954; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_612967.validator(path, query, header, formData, body)
  let scheme = call_612967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612967.url(scheme.get, call_612967.host, call_612967.base,
                         call_612967.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612967, url, valid)

proc call*(call_612968: Call_GetDeleteDBSubnetGroup_612954;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_612969 = newJObject()
  add(query_612969, "Action", newJString(Action))
  add(query_612969, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_612969, "Version", newJString(Version))
  result = call_612968.call(nil, query_612969, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_612954(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_612955, base: "/",
    url: url_GetDeleteDBSubnetGroup_612956, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_613003 = ref object of OpenApiRestCall_610658
proc url_PostDeleteEventSubscription_613005(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_613004(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613006 = query.getOrDefault("Action")
  valid_613006 = validateParameter(valid_613006, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_613006 != nil:
    section.add "Action", valid_613006
  var valid_613007 = query.getOrDefault("Version")
  valid_613007 = validateParameter(valid_613007, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613007 != nil:
    section.add "Version", valid_613007
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613008 = header.getOrDefault("X-Amz-Signature")
  valid_613008 = validateParameter(valid_613008, JString, required = false,
                                 default = nil)
  if valid_613008 != nil:
    section.add "X-Amz-Signature", valid_613008
  var valid_613009 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613009 = validateParameter(valid_613009, JString, required = false,
                                 default = nil)
  if valid_613009 != nil:
    section.add "X-Amz-Content-Sha256", valid_613009
  var valid_613010 = header.getOrDefault("X-Amz-Date")
  valid_613010 = validateParameter(valid_613010, JString, required = false,
                                 default = nil)
  if valid_613010 != nil:
    section.add "X-Amz-Date", valid_613010
  var valid_613011 = header.getOrDefault("X-Amz-Credential")
  valid_613011 = validateParameter(valid_613011, JString, required = false,
                                 default = nil)
  if valid_613011 != nil:
    section.add "X-Amz-Credential", valid_613011
  var valid_613012 = header.getOrDefault("X-Amz-Security-Token")
  valid_613012 = validateParameter(valid_613012, JString, required = false,
                                 default = nil)
  if valid_613012 != nil:
    section.add "X-Amz-Security-Token", valid_613012
  var valid_613013 = header.getOrDefault("X-Amz-Algorithm")
  valid_613013 = validateParameter(valid_613013, JString, required = false,
                                 default = nil)
  if valid_613013 != nil:
    section.add "X-Amz-Algorithm", valid_613013
  var valid_613014 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613014 = validateParameter(valid_613014, JString, required = false,
                                 default = nil)
  if valid_613014 != nil:
    section.add "X-Amz-SignedHeaders", valid_613014
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_613015 = formData.getOrDefault("SubscriptionName")
  valid_613015 = validateParameter(valid_613015, JString, required = true,
                                 default = nil)
  if valid_613015 != nil:
    section.add "SubscriptionName", valid_613015
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613016: Call_PostDeleteEventSubscription_613003; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_613016.validator(path, query, header, formData, body)
  let scheme = call_613016.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613016.url(scheme.get, call_613016.host, call_613016.base,
                         call_613016.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613016, url, valid)

proc call*(call_613017: Call_PostDeleteEventSubscription_613003;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613018 = newJObject()
  var formData_613019 = newJObject()
  add(formData_613019, "SubscriptionName", newJString(SubscriptionName))
  add(query_613018, "Action", newJString(Action))
  add(query_613018, "Version", newJString(Version))
  result = call_613017.call(nil, query_613018, nil, formData_613019, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_613003(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_613004, base: "/",
    url: url_PostDeleteEventSubscription_613005,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_612987 = ref object of OpenApiRestCall_610658
proc url_GetDeleteEventSubscription_612989(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_612988(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_612990 = query.getOrDefault("SubscriptionName")
  valid_612990 = validateParameter(valid_612990, JString, required = true,
                                 default = nil)
  if valid_612990 != nil:
    section.add "SubscriptionName", valid_612990
  var valid_612991 = query.getOrDefault("Action")
  valid_612991 = validateParameter(valid_612991, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_612991 != nil:
    section.add "Action", valid_612991
  var valid_612992 = query.getOrDefault("Version")
  valid_612992 = validateParameter(valid_612992, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_612992 != nil:
    section.add "Version", valid_612992
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612993 = header.getOrDefault("X-Amz-Signature")
  valid_612993 = validateParameter(valid_612993, JString, required = false,
                                 default = nil)
  if valid_612993 != nil:
    section.add "X-Amz-Signature", valid_612993
  var valid_612994 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612994 = validateParameter(valid_612994, JString, required = false,
                                 default = nil)
  if valid_612994 != nil:
    section.add "X-Amz-Content-Sha256", valid_612994
  var valid_612995 = header.getOrDefault("X-Amz-Date")
  valid_612995 = validateParameter(valid_612995, JString, required = false,
                                 default = nil)
  if valid_612995 != nil:
    section.add "X-Amz-Date", valid_612995
  var valid_612996 = header.getOrDefault("X-Amz-Credential")
  valid_612996 = validateParameter(valid_612996, JString, required = false,
                                 default = nil)
  if valid_612996 != nil:
    section.add "X-Amz-Credential", valid_612996
  var valid_612997 = header.getOrDefault("X-Amz-Security-Token")
  valid_612997 = validateParameter(valid_612997, JString, required = false,
                                 default = nil)
  if valid_612997 != nil:
    section.add "X-Amz-Security-Token", valid_612997
  var valid_612998 = header.getOrDefault("X-Amz-Algorithm")
  valid_612998 = validateParameter(valid_612998, JString, required = false,
                                 default = nil)
  if valid_612998 != nil:
    section.add "X-Amz-Algorithm", valid_612998
  var valid_612999 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612999 = validateParameter(valid_612999, JString, required = false,
                                 default = nil)
  if valid_612999 != nil:
    section.add "X-Amz-SignedHeaders", valid_612999
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613000: Call_GetDeleteEventSubscription_612987; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_613000.validator(path, query, header, formData, body)
  let scheme = call_613000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613000.url(scheme.get, call_613000.host, call_613000.base,
                         call_613000.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613000, url, valid)

proc call*(call_613001: Call_GetDeleteEventSubscription_612987;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613002 = newJObject()
  add(query_613002, "SubscriptionName", newJString(SubscriptionName))
  add(query_613002, "Action", newJString(Action))
  add(query_613002, "Version", newJString(Version))
  result = call_613001.call(nil, query_613002, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_612987(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_612988, base: "/",
    url: url_GetDeleteEventSubscription_612989,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGlobalCluster_613036 = ref object of OpenApiRestCall_610658
proc url_PostDeleteGlobalCluster_613038(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGlobalCluster_613037(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613039 = query.getOrDefault("Action")
  valid_613039 = validateParameter(valid_613039, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_613039 != nil:
    section.add "Action", valid_613039
  var valid_613040 = query.getOrDefault("Version")
  valid_613040 = validateParameter(valid_613040, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613040 != nil:
    section.add "Version", valid_613040
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613041 = header.getOrDefault("X-Amz-Signature")
  valid_613041 = validateParameter(valid_613041, JString, required = false,
                                 default = nil)
  if valid_613041 != nil:
    section.add "X-Amz-Signature", valid_613041
  var valid_613042 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613042 = validateParameter(valid_613042, JString, required = false,
                                 default = nil)
  if valid_613042 != nil:
    section.add "X-Amz-Content-Sha256", valid_613042
  var valid_613043 = header.getOrDefault("X-Amz-Date")
  valid_613043 = validateParameter(valid_613043, JString, required = false,
                                 default = nil)
  if valid_613043 != nil:
    section.add "X-Amz-Date", valid_613043
  var valid_613044 = header.getOrDefault("X-Amz-Credential")
  valid_613044 = validateParameter(valid_613044, JString, required = false,
                                 default = nil)
  if valid_613044 != nil:
    section.add "X-Amz-Credential", valid_613044
  var valid_613045 = header.getOrDefault("X-Amz-Security-Token")
  valid_613045 = validateParameter(valid_613045, JString, required = false,
                                 default = nil)
  if valid_613045 != nil:
    section.add "X-Amz-Security-Token", valid_613045
  var valid_613046 = header.getOrDefault("X-Amz-Algorithm")
  valid_613046 = validateParameter(valid_613046, JString, required = false,
                                 default = nil)
  if valid_613046 != nil:
    section.add "X-Amz-Algorithm", valid_613046
  var valid_613047 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613047 = validateParameter(valid_613047, JString, required = false,
                                 default = nil)
  if valid_613047 != nil:
    section.add "X-Amz-SignedHeaders", valid_613047
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_613048 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_613048 = validateParameter(valid_613048, JString, required = true,
                                 default = nil)
  if valid_613048 != nil:
    section.add "GlobalClusterIdentifier", valid_613048
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613049: Call_PostDeleteGlobalCluster_613036; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613049.validator(path, query, header, formData, body)
  let scheme = call_613049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613049.url(scheme.get, call_613049.host, call_613049.base,
                         call_613049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613049, url, valid)

proc call*(call_613050: Call_PostDeleteGlobalCluster_613036;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613051 = newJObject()
  var formData_613052 = newJObject()
  add(formData_613052, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_613051, "Action", newJString(Action))
  add(query_613051, "Version", newJString(Version))
  result = call_613050.call(nil, query_613051, nil, formData_613052, nil)

var postDeleteGlobalCluster* = Call_PostDeleteGlobalCluster_613036(
    name: "postDeleteGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_PostDeleteGlobalCluster_613037, base: "/",
    url: url_PostDeleteGlobalCluster_613038, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGlobalCluster_613020 = ref object of OpenApiRestCall_610658
proc url_GetDeleteGlobalCluster_613022(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGlobalCluster_613021(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_613023 = query.getOrDefault("GlobalClusterIdentifier")
  valid_613023 = validateParameter(valid_613023, JString, required = true,
                                 default = nil)
  if valid_613023 != nil:
    section.add "GlobalClusterIdentifier", valid_613023
  var valid_613024 = query.getOrDefault("Action")
  valid_613024 = validateParameter(valid_613024, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_613024 != nil:
    section.add "Action", valid_613024
  var valid_613025 = query.getOrDefault("Version")
  valid_613025 = validateParameter(valid_613025, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613025 != nil:
    section.add "Version", valid_613025
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613026 = header.getOrDefault("X-Amz-Signature")
  valid_613026 = validateParameter(valid_613026, JString, required = false,
                                 default = nil)
  if valid_613026 != nil:
    section.add "X-Amz-Signature", valid_613026
  var valid_613027 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613027 = validateParameter(valid_613027, JString, required = false,
                                 default = nil)
  if valid_613027 != nil:
    section.add "X-Amz-Content-Sha256", valid_613027
  var valid_613028 = header.getOrDefault("X-Amz-Date")
  valid_613028 = validateParameter(valid_613028, JString, required = false,
                                 default = nil)
  if valid_613028 != nil:
    section.add "X-Amz-Date", valid_613028
  var valid_613029 = header.getOrDefault("X-Amz-Credential")
  valid_613029 = validateParameter(valid_613029, JString, required = false,
                                 default = nil)
  if valid_613029 != nil:
    section.add "X-Amz-Credential", valid_613029
  var valid_613030 = header.getOrDefault("X-Amz-Security-Token")
  valid_613030 = validateParameter(valid_613030, JString, required = false,
                                 default = nil)
  if valid_613030 != nil:
    section.add "X-Amz-Security-Token", valid_613030
  var valid_613031 = header.getOrDefault("X-Amz-Algorithm")
  valid_613031 = validateParameter(valid_613031, JString, required = false,
                                 default = nil)
  if valid_613031 != nil:
    section.add "X-Amz-Algorithm", valid_613031
  var valid_613032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613032 = validateParameter(valid_613032, JString, required = false,
                                 default = nil)
  if valid_613032 != nil:
    section.add "X-Amz-SignedHeaders", valid_613032
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613033: Call_GetDeleteGlobalCluster_613020; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613033.validator(path, query, header, formData, body)
  let scheme = call_613033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613033.url(scheme.get, call_613033.host, call_613033.base,
                         call_613033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613033, url, valid)

proc call*(call_613034: Call_GetDeleteGlobalCluster_613020;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613035 = newJObject()
  add(query_613035, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_613035, "Action", newJString(Action))
  add(query_613035, "Version", newJString(Version))
  result = call_613034.call(nil, query_613035, nil, nil, nil)

var getDeleteGlobalCluster* = Call_GetDeleteGlobalCluster_613020(
    name: "getDeleteGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_GetDeleteGlobalCluster_613021, base: "/",
    url: url_GetDeleteGlobalCluster_613022, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstallationMedia_613069 = ref object of OpenApiRestCall_610658
proc url_PostDeleteInstallationMedia_613071(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstallationMedia_613070(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613072 = query.getOrDefault("Action")
  valid_613072 = validateParameter(valid_613072, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_613072 != nil:
    section.add "Action", valid_613072
  var valid_613073 = query.getOrDefault("Version")
  valid_613073 = validateParameter(valid_613073, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613073 != nil:
    section.add "Version", valid_613073
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613074 = header.getOrDefault("X-Amz-Signature")
  valid_613074 = validateParameter(valid_613074, JString, required = false,
                                 default = nil)
  if valid_613074 != nil:
    section.add "X-Amz-Signature", valid_613074
  var valid_613075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613075 = validateParameter(valid_613075, JString, required = false,
                                 default = nil)
  if valid_613075 != nil:
    section.add "X-Amz-Content-Sha256", valid_613075
  var valid_613076 = header.getOrDefault("X-Amz-Date")
  valid_613076 = validateParameter(valid_613076, JString, required = false,
                                 default = nil)
  if valid_613076 != nil:
    section.add "X-Amz-Date", valid_613076
  var valid_613077 = header.getOrDefault("X-Amz-Credential")
  valid_613077 = validateParameter(valid_613077, JString, required = false,
                                 default = nil)
  if valid_613077 != nil:
    section.add "X-Amz-Credential", valid_613077
  var valid_613078 = header.getOrDefault("X-Amz-Security-Token")
  valid_613078 = validateParameter(valid_613078, JString, required = false,
                                 default = nil)
  if valid_613078 != nil:
    section.add "X-Amz-Security-Token", valid_613078
  var valid_613079 = header.getOrDefault("X-Amz-Algorithm")
  valid_613079 = validateParameter(valid_613079, JString, required = false,
                                 default = nil)
  if valid_613079 != nil:
    section.add "X-Amz-Algorithm", valid_613079
  var valid_613080 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613080 = validateParameter(valid_613080, JString, required = false,
                                 default = nil)
  if valid_613080 != nil:
    section.add "X-Amz-SignedHeaders", valid_613080
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstallationMediaId` field"
  var valid_613081 = formData.getOrDefault("InstallationMediaId")
  valid_613081 = validateParameter(valid_613081, JString, required = true,
                                 default = nil)
  if valid_613081 != nil:
    section.add "InstallationMediaId", valid_613081
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613082: Call_PostDeleteInstallationMedia_613069; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_613082.validator(path, query, header, formData, body)
  let scheme = call_613082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613082.url(scheme.get, call_613082.host, call_613082.base,
                         call_613082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613082, url, valid)

proc call*(call_613083: Call_PostDeleteInstallationMedia_613069;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613084 = newJObject()
  var formData_613085 = newJObject()
  add(formData_613085, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_613084, "Action", newJString(Action))
  add(query_613084, "Version", newJString(Version))
  result = call_613083.call(nil, query_613084, nil, formData_613085, nil)

var postDeleteInstallationMedia* = Call_PostDeleteInstallationMedia_613069(
    name: "postDeleteInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_PostDeleteInstallationMedia_613070, base: "/",
    url: url_PostDeleteInstallationMedia_613071,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstallationMedia_613053 = ref object of OpenApiRestCall_610658
proc url_GetDeleteInstallationMedia_613055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstallationMedia_613054(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstallationMediaId` field"
  var valid_613056 = query.getOrDefault("InstallationMediaId")
  valid_613056 = validateParameter(valid_613056, JString, required = true,
                                 default = nil)
  if valid_613056 != nil:
    section.add "InstallationMediaId", valid_613056
  var valid_613057 = query.getOrDefault("Action")
  valid_613057 = validateParameter(valid_613057, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_613057 != nil:
    section.add "Action", valid_613057
  var valid_613058 = query.getOrDefault("Version")
  valid_613058 = validateParameter(valid_613058, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613058 != nil:
    section.add "Version", valid_613058
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613059 = header.getOrDefault("X-Amz-Signature")
  valid_613059 = validateParameter(valid_613059, JString, required = false,
                                 default = nil)
  if valid_613059 != nil:
    section.add "X-Amz-Signature", valid_613059
  var valid_613060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613060 = validateParameter(valid_613060, JString, required = false,
                                 default = nil)
  if valid_613060 != nil:
    section.add "X-Amz-Content-Sha256", valid_613060
  var valid_613061 = header.getOrDefault("X-Amz-Date")
  valid_613061 = validateParameter(valid_613061, JString, required = false,
                                 default = nil)
  if valid_613061 != nil:
    section.add "X-Amz-Date", valid_613061
  var valid_613062 = header.getOrDefault("X-Amz-Credential")
  valid_613062 = validateParameter(valid_613062, JString, required = false,
                                 default = nil)
  if valid_613062 != nil:
    section.add "X-Amz-Credential", valid_613062
  var valid_613063 = header.getOrDefault("X-Amz-Security-Token")
  valid_613063 = validateParameter(valid_613063, JString, required = false,
                                 default = nil)
  if valid_613063 != nil:
    section.add "X-Amz-Security-Token", valid_613063
  var valid_613064 = header.getOrDefault("X-Amz-Algorithm")
  valid_613064 = validateParameter(valid_613064, JString, required = false,
                                 default = nil)
  if valid_613064 != nil:
    section.add "X-Amz-Algorithm", valid_613064
  var valid_613065 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613065 = validateParameter(valid_613065, JString, required = false,
                                 default = nil)
  if valid_613065 != nil:
    section.add "X-Amz-SignedHeaders", valid_613065
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613066: Call_GetDeleteInstallationMedia_613053; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_613066.validator(path, query, header, formData, body)
  let scheme = call_613066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613066.url(scheme.get, call_613066.host, call_613066.base,
                         call_613066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613066, url, valid)

proc call*(call_613067: Call_GetDeleteInstallationMedia_613053;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613068 = newJObject()
  add(query_613068, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_613068, "Action", newJString(Action))
  add(query_613068, "Version", newJString(Version))
  result = call_613067.call(nil, query_613068, nil, nil, nil)

var getDeleteInstallationMedia* = Call_GetDeleteInstallationMedia_613053(
    name: "getDeleteInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_GetDeleteInstallationMedia_613054, base: "/",
    url: url_GetDeleteInstallationMedia_613055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOptionGroup_613102 = ref object of OpenApiRestCall_610658
proc url_PostDeleteOptionGroup_613104(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOptionGroup_613103(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613105 = query.getOrDefault("Action")
  valid_613105 = validateParameter(valid_613105, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_613105 != nil:
    section.add "Action", valid_613105
  var valid_613106 = query.getOrDefault("Version")
  valid_613106 = validateParameter(valid_613106, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613106 != nil:
    section.add "Version", valid_613106
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613107 = header.getOrDefault("X-Amz-Signature")
  valid_613107 = validateParameter(valid_613107, JString, required = false,
                                 default = nil)
  if valid_613107 != nil:
    section.add "X-Amz-Signature", valid_613107
  var valid_613108 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613108 = validateParameter(valid_613108, JString, required = false,
                                 default = nil)
  if valid_613108 != nil:
    section.add "X-Amz-Content-Sha256", valid_613108
  var valid_613109 = header.getOrDefault("X-Amz-Date")
  valid_613109 = validateParameter(valid_613109, JString, required = false,
                                 default = nil)
  if valid_613109 != nil:
    section.add "X-Amz-Date", valid_613109
  var valid_613110 = header.getOrDefault("X-Amz-Credential")
  valid_613110 = validateParameter(valid_613110, JString, required = false,
                                 default = nil)
  if valid_613110 != nil:
    section.add "X-Amz-Credential", valid_613110
  var valid_613111 = header.getOrDefault("X-Amz-Security-Token")
  valid_613111 = validateParameter(valid_613111, JString, required = false,
                                 default = nil)
  if valid_613111 != nil:
    section.add "X-Amz-Security-Token", valid_613111
  var valid_613112 = header.getOrDefault("X-Amz-Algorithm")
  valid_613112 = validateParameter(valid_613112, JString, required = false,
                                 default = nil)
  if valid_613112 != nil:
    section.add "X-Amz-Algorithm", valid_613112
  var valid_613113 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613113 = validateParameter(valid_613113, JString, required = false,
                                 default = nil)
  if valid_613113 != nil:
    section.add "X-Amz-SignedHeaders", valid_613113
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_613114 = formData.getOrDefault("OptionGroupName")
  valid_613114 = validateParameter(valid_613114, JString, required = true,
                                 default = nil)
  if valid_613114 != nil:
    section.add "OptionGroupName", valid_613114
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613115: Call_PostDeleteOptionGroup_613102; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_613115.validator(path, query, header, formData, body)
  let scheme = call_613115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613115.url(scheme.get, call_613115.host, call_613115.base,
                         call_613115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613115, url, valid)

proc call*(call_613116: Call_PostDeleteOptionGroup_613102; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_613117 = newJObject()
  var formData_613118 = newJObject()
  add(query_613117, "Action", newJString(Action))
  add(formData_613118, "OptionGroupName", newJString(OptionGroupName))
  add(query_613117, "Version", newJString(Version))
  result = call_613116.call(nil, query_613117, nil, formData_613118, nil)

var postDeleteOptionGroup* = Call_PostDeleteOptionGroup_613102(
    name: "postDeleteOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_PostDeleteOptionGroup_613103, base: "/",
    url: url_PostDeleteOptionGroup_613104, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOptionGroup_613086 = ref object of OpenApiRestCall_610658
proc url_GetDeleteOptionGroup_613088(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOptionGroup_613087(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613089 = query.getOrDefault("Action")
  valid_613089 = validateParameter(valid_613089, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_613089 != nil:
    section.add "Action", valid_613089
  var valid_613090 = query.getOrDefault("OptionGroupName")
  valid_613090 = validateParameter(valid_613090, JString, required = true,
                                 default = nil)
  if valid_613090 != nil:
    section.add "OptionGroupName", valid_613090
  var valid_613091 = query.getOrDefault("Version")
  valid_613091 = validateParameter(valid_613091, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613091 != nil:
    section.add "Version", valid_613091
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613092 = header.getOrDefault("X-Amz-Signature")
  valid_613092 = validateParameter(valid_613092, JString, required = false,
                                 default = nil)
  if valid_613092 != nil:
    section.add "X-Amz-Signature", valid_613092
  var valid_613093 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613093 = validateParameter(valid_613093, JString, required = false,
                                 default = nil)
  if valid_613093 != nil:
    section.add "X-Amz-Content-Sha256", valid_613093
  var valid_613094 = header.getOrDefault("X-Amz-Date")
  valid_613094 = validateParameter(valid_613094, JString, required = false,
                                 default = nil)
  if valid_613094 != nil:
    section.add "X-Amz-Date", valid_613094
  var valid_613095 = header.getOrDefault("X-Amz-Credential")
  valid_613095 = validateParameter(valid_613095, JString, required = false,
                                 default = nil)
  if valid_613095 != nil:
    section.add "X-Amz-Credential", valid_613095
  var valid_613096 = header.getOrDefault("X-Amz-Security-Token")
  valid_613096 = validateParameter(valid_613096, JString, required = false,
                                 default = nil)
  if valid_613096 != nil:
    section.add "X-Amz-Security-Token", valid_613096
  var valid_613097 = header.getOrDefault("X-Amz-Algorithm")
  valid_613097 = validateParameter(valid_613097, JString, required = false,
                                 default = nil)
  if valid_613097 != nil:
    section.add "X-Amz-Algorithm", valid_613097
  var valid_613098 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613098 = validateParameter(valid_613098, JString, required = false,
                                 default = nil)
  if valid_613098 != nil:
    section.add "X-Amz-SignedHeaders", valid_613098
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613099: Call_GetDeleteOptionGroup_613086; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_613099.validator(path, query, header, formData, body)
  let scheme = call_613099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613099.url(scheme.get, call_613099.host, call_613099.base,
                         call_613099.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613099, url, valid)

proc call*(call_613100: Call_GetDeleteOptionGroup_613086; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_613101 = newJObject()
  add(query_613101, "Action", newJString(Action))
  add(query_613101, "OptionGroupName", newJString(OptionGroupName))
  add(query_613101, "Version", newJString(Version))
  result = call_613100.call(nil, query_613101, nil, nil, nil)

var getDeleteOptionGroup* = Call_GetDeleteOptionGroup_613086(
    name: "getDeleteOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_GetDeleteOptionGroup_613087, base: "/",
    url: url_GetDeleteOptionGroup_613088, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeregisterDBProxyTargets_613138 = ref object of OpenApiRestCall_610658
proc url_PostDeregisterDBProxyTargets_613140(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeregisterDBProxyTargets_613139(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613141 = query.getOrDefault("Action")
  valid_613141 = validateParameter(valid_613141, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_613141 != nil:
    section.add "Action", valid_613141
  var valid_613142 = query.getOrDefault("Version")
  valid_613142 = validateParameter(valid_613142, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613142 != nil:
    section.add "Version", valid_613142
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613143 = header.getOrDefault("X-Amz-Signature")
  valid_613143 = validateParameter(valid_613143, JString, required = false,
                                 default = nil)
  if valid_613143 != nil:
    section.add "X-Amz-Signature", valid_613143
  var valid_613144 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613144 = validateParameter(valid_613144, JString, required = false,
                                 default = nil)
  if valid_613144 != nil:
    section.add "X-Amz-Content-Sha256", valid_613144
  var valid_613145 = header.getOrDefault("X-Amz-Date")
  valid_613145 = validateParameter(valid_613145, JString, required = false,
                                 default = nil)
  if valid_613145 != nil:
    section.add "X-Amz-Date", valid_613145
  var valid_613146 = header.getOrDefault("X-Amz-Credential")
  valid_613146 = validateParameter(valid_613146, JString, required = false,
                                 default = nil)
  if valid_613146 != nil:
    section.add "X-Amz-Credential", valid_613146
  var valid_613147 = header.getOrDefault("X-Amz-Security-Token")
  valid_613147 = validateParameter(valid_613147, JString, required = false,
                                 default = nil)
  if valid_613147 != nil:
    section.add "X-Amz-Security-Token", valid_613147
  var valid_613148 = header.getOrDefault("X-Amz-Algorithm")
  valid_613148 = validateParameter(valid_613148, JString, required = false,
                                 default = nil)
  if valid_613148 != nil:
    section.add "X-Amz-Algorithm", valid_613148
  var valid_613149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613149 = validateParameter(valid_613149, JString, required = false,
                                 default = nil)
  if valid_613149 != nil:
    section.add "X-Amz-SignedHeaders", valid_613149
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_613150 = formData.getOrDefault("TargetGroupName")
  valid_613150 = validateParameter(valid_613150, JString, required = false,
                                 default = nil)
  if valid_613150 != nil:
    section.add "TargetGroupName", valid_613150
  var valid_613151 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_613151 = validateParameter(valid_613151, JArray, required = false,
                                 default = nil)
  if valid_613151 != nil:
    section.add "DBInstanceIdentifiers", valid_613151
  var valid_613152 = formData.getOrDefault("DBClusterIdentifiers")
  valid_613152 = validateParameter(valid_613152, JArray, required = false,
                                 default = nil)
  if valid_613152 != nil:
    section.add "DBClusterIdentifiers", valid_613152
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_613153 = formData.getOrDefault("DBProxyName")
  valid_613153 = validateParameter(valid_613153, JString, required = true,
                                 default = nil)
  if valid_613153 != nil:
    section.add "DBProxyName", valid_613153
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613154: Call_PostDeregisterDBProxyTargets_613138; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_613154.validator(path, query, header, formData, body)
  let scheme = call_613154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613154.url(scheme.get, call_613154.host, call_613154.base,
                         call_613154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613154, url, valid)

proc call*(call_613155: Call_PostDeregisterDBProxyTargets_613138;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          DBClusterIdentifiers: JsonNode = nil;
          Action: string = "DeregisterDBProxyTargets";
          Version: string = "2014-10-31"): Recallable =
  ## postDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613156 = newJObject()
  var formData_613157 = newJObject()
  add(formData_613157, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    formData_613157.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  if DBClusterIdentifiers != nil:
    formData_613157.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_613157, "DBProxyName", newJString(DBProxyName))
  add(query_613156, "Action", newJString(Action))
  add(query_613156, "Version", newJString(Version))
  result = call_613155.call(nil, query_613156, nil, formData_613157, nil)

var postDeregisterDBProxyTargets* = Call_PostDeregisterDBProxyTargets_613138(
    name: "postDeregisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_PostDeregisterDBProxyTargets_613139, base: "/",
    url: url_PostDeregisterDBProxyTargets_613140,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeregisterDBProxyTargets_613119 = ref object of OpenApiRestCall_610658
proc url_GetDeregisterDBProxyTargets_613121(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeregisterDBProxyTargets_613120(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_613122 = query.getOrDefault("DBClusterIdentifiers")
  valid_613122 = validateParameter(valid_613122, JArray, required = false,
                                 default = nil)
  if valid_613122 != nil:
    section.add "DBClusterIdentifiers", valid_613122
  var valid_613123 = query.getOrDefault("DBInstanceIdentifiers")
  valid_613123 = validateParameter(valid_613123, JArray, required = false,
                                 default = nil)
  if valid_613123 != nil:
    section.add "DBInstanceIdentifiers", valid_613123
  var valid_613124 = query.getOrDefault("TargetGroupName")
  valid_613124 = validateParameter(valid_613124, JString, required = false,
                                 default = nil)
  if valid_613124 != nil:
    section.add "TargetGroupName", valid_613124
  var valid_613125 = query.getOrDefault("Action")
  valid_613125 = validateParameter(valid_613125, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_613125 != nil:
    section.add "Action", valid_613125
  var valid_613126 = query.getOrDefault("Version")
  valid_613126 = validateParameter(valid_613126, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613126 != nil:
    section.add "Version", valid_613126
  var valid_613127 = query.getOrDefault("DBProxyName")
  valid_613127 = validateParameter(valid_613127, JString, required = true,
                                 default = nil)
  if valid_613127 != nil:
    section.add "DBProxyName", valid_613127
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613128 = header.getOrDefault("X-Amz-Signature")
  valid_613128 = validateParameter(valid_613128, JString, required = false,
                                 default = nil)
  if valid_613128 != nil:
    section.add "X-Amz-Signature", valid_613128
  var valid_613129 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613129 = validateParameter(valid_613129, JString, required = false,
                                 default = nil)
  if valid_613129 != nil:
    section.add "X-Amz-Content-Sha256", valid_613129
  var valid_613130 = header.getOrDefault("X-Amz-Date")
  valid_613130 = validateParameter(valid_613130, JString, required = false,
                                 default = nil)
  if valid_613130 != nil:
    section.add "X-Amz-Date", valid_613130
  var valid_613131 = header.getOrDefault("X-Amz-Credential")
  valid_613131 = validateParameter(valid_613131, JString, required = false,
                                 default = nil)
  if valid_613131 != nil:
    section.add "X-Amz-Credential", valid_613131
  var valid_613132 = header.getOrDefault("X-Amz-Security-Token")
  valid_613132 = validateParameter(valid_613132, JString, required = false,
                                 default = nil)
  if valid_613132 != nil:
    section.add "X-Amz-Security-Token", valid_613132
  var valid_613133 = header.getOrDefault("X-Amz-Algorithm")
  valid_613133 = validateParameter(valid_613133, JString, required = false,
                                 default = nil)
  if valid_613133 != nil:
    section.add "X-Amz-Algorithm", valid_613133
  var valid_613134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613134 = validateParameter(valid_613134, JString, required = false,
                                 default = nil)
  if valid_613134 != nil:
    section.add "X-Amz-SignedHeaders", valid_613134
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613135: Call_GetDeregisterDBProxyTargets_613119; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_613135.validator(path, query, header, formData, body)
  let scheme = call_613135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613135.url(scheme.get, call_613135.host, call_613135.base,
                         call_613135.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613135, url, valid)

proc call*(call_613136: Call_GetDeregisterDBProxyTargets_613119;
          DBProxyName: string; DBClusterIdentifiers: JsonNode = nil;
          DBInstanceIdentifiers: JsonNode = nil; TargetGroupName: string = "";
          Action: string = "DeregisterDBProxyTargets";
          Version: string = "2014-10-31"): Recallable =
  ## getDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  var query_613137 = newJObject()
  if DBClusterIdentifiers != nil:
    query_613137.add "DBClusterIdentifiers", DBClusterIdentifiers
  if DBInstanceIdentifiers != nil:
    query_613137.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_613137, "TargetGroupName", newJString(TargetGroupName))
  add(query_613137, "Action", newJString(Action))
  add(query_613137, "Version", newJString(Version))
  add(query_613137, "DBProxyName", newJString(DBProxyName))
  result = call_613136.call(nil, query_613137, nil, nil, nil)

var getDeregisterDBProxyTargets* = Call_GetDeregisterDBProxyTargets_613119(
    name: "getDeregisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_GetDeregisterDBProxyTargets_613120, base: "/",
    url: url_GetDeregisterDBProxyTargets_613121,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_613173 = ref object of OpenApiRestCall_610658
proc url_PostDescribeAccountAttributes_613175(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountAttributes_613174(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613176 = query.getOrDefault("Action")
  valid_613176 = validateParameter(valid_613176, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_613176 != nil:
    section.add "Action", valid_613176
  var valid_613177 = query.getOrDefault("Version")
  valid_613177 = validateParameter(valid_613177, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613177 != nil:
    section.add "Version", valid_613177
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613178 = header.getOrDefault("X-Amz-Signature")
  valid_613178 = validateParameter(valid_613178, JString, required = false,
                                 default = nil)
  if valid_613178 != nil:
    section.add "X-Amz-Signature", valid_613178
  var valid_613179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613179 = validateParameter(valid_613179, JString, required = false,
                                 default = nil)
  if valid_613179 != nil:
    section.add "X-Amz-Content-Sha256", valid_613179
  var valid_613180 = header.getOrDefault("X-Amz-Date")
  valid_613180 = validateParameter(valid_613180, JString, required = false,
                                 default = nil)
  if valid_613180 != nil:
    section.add "X-Amz-Date", valid_613180
  var valid_613181 = header.getOrDefault("X-Amz-Credential")
  valid_613181 = validateParameter(valid_613181, JString, required = false,
                                 default = nil)
  if valid_613181 != nil:
    section.add "X-Amz-Credential", valid_613181
  var valid_613182 = header.getOrDefault("X-Amz-Security-Token")
  valid_613182 = validateParameter(valid_613182, JString, required = false,
                                 default = nil)
  if valid_613182 != nil:
    section.add "X-Amz-Security-Token", valid_613182
  var valid_613183 = header.getOrDefault("X-Amz-Algorithm")
  valid_613183 = validateParameter(valid_613183, JString, required = false,
                                 default = nil)
  if valid_613183 != nil:
    section.add "X-Amz-Algorithm", valid_613183
  var valid_613184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613184 = validateParameter(valid_613184, JString, required = false,
                                 default = nil)
  if valid_613184 != nil:
    section.add "X-Amz-SignedHeaders", valid_613184
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613185: Call_PostDescribeAccountAttributes_613173; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_613185.validator(path, query, header, formData, body)
  let scheme = call_613185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613185.url(scheme.get, call_613185.host, call_613185.base,
                         call_613185.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613185, url, valid)

proc call*(call_613186: Call_PostDescribeAccountAttributes_613173;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613187 = newJObject()
  add(query_613187, "Action", newJString(Action))
  add(query_613187, "Version", newJString(Version))
  result = call_613186.call(nil, query_613187, nil, nil, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_613173(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_613174, base: "/",
    url: url_PostDescribeAccountAttributes_613175,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_613158 = ref object of OpenApiRestCall_610658
proc url_GetDescribeAccountAttributes_613160(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountAttributes_613159(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613161 = query.getOrDefault("Action")
  valid_613161 = validateParameter(valid_613161, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_613161 != nil:
    section.add "Action", valid_613161
  var valid_613162 = query.getOrDefault("Version")
  valid_613162 = validateParameter(valid_613162, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613162 != nil:
    section.add "Version", valid_613162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613163 = header.getOrDefault("X-Amz-Signature")
  valid_613163 = validateParameter(valid_613163, JString, required = false,
                                 default = nil)
  if valid_613163 != nil:
    section.add "X-Amz-Signature", valid_613163
  var valid_613164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613164 = validateParameter(valid_613164, JString, required = false,
                                 default = nil)
  if valid_613164 != nil:
    section.add "X-Amz-Content-Sha256", valid_613164
  var valid_613165 = header.getOrDefault("X-Amz-Date")
  valid_613165 = validateParameter(valid_613165, JString, required = false,
                                 default = nil)
  if valid_613165 != nil:
    section.add "X-Amz-Date", valid_613165
  var valid_613166 = header.getOrDefault("X-Amz-Credential")
  valid_613166 = validateParameter(valid_613166, JString, required = false,
                                 default = nil)
  if valid_613166 != nil:
    section.add "X-Amz-Credential", valid_613166
  var valid_613167 = header.getOrDefault("X-Amz-Security-Token")
  valid_613167 = validateParameter(valid_613167, JString, required = false,
                                 default = nil)
  if valid_613167 != nil:
    section.add "X-Amz-Security-Token", valid_613167
  var valid_613168 = header.getOrDefault("X-Amz-Algorithm")
  valid_613168 = validateParameter(valid_613168, JString, required = false,
                                 default = nil)
  if valid_613168 != nil:
    section.add "X-Amz-Algorithm", valid_613168
  var valid_613169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613169 = validateParameter(valid_613169, JString, required = false,
                                 default = nil)
  if valid_613169 != nil:
    section.add "X-Amz-SignedHeaders", valid_613169
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613170: Call_GetDescribeAccountAttributes_613158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_613170.validator(path, query, header, formData, body)
  let scheme = call_613170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613170.url(scheme.get, call_613170.host, call_613170.base,
                         call_613170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613170, url, valid)

proc call*(call_613171: Call_GetDescribeAccountAttributes_613158;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613172 = newJObject()
  add(query_613172, "Action", newJString(Action))
  add(query_613172, "Version", newJString(Version))
  result = call_613171.call(nil, query_613172, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_613158(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_613159, base: "/",
    url: url_GetDescribeAccountAttributes_613160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCertificates_613207 = ref object of OpenApiRestCall_610658
proc url_PostDescribeCertificates_613209(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCertificates_613208(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613210 = query.getOrDefault("Action")
  valid_613210 = validateParameter(valid_613210, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_613210 != nil:
    section.add "Action", valid_613210
  var valid_613211 = query.getOrDefault("Version")
  valid_613211 = validateParameter(valid_613211, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613211 != nil:
    section.add "Version", valid_613211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613212 = header.getOrDefault("X-Amz-Signature")
  valid_613212 = validateParameter(valid_613212, JString, required = false,
                                 default = nil)
  if valid_613212 != nil:
    section.add "X-Amz-Signature", valid_613212
  var valid_613213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613213 = validateParameter(valid_613213, JString, required = false,
                                 default = nil)
  if valid_613213 != nil:
    section.add "X-Amz-Content-Sha256", valid_613213
  var valid_613214 = header.getOrDefault("X-Amz-Date")
  valid_613214 = validateParameter(valid_613214, JString, required = false,
                                 default = nil)
  if valid_613214 != nil:
    section.add "X-Amz-Date", valid_613214
  var valid_613215 = header.getOrDefault("X-Amz-Credential")
  valid_613215 = validateParameter(valid_613215, JString, required = false,
                                 default = nil)
  if valid_613215 != nil:
    section.add "X-Amz-Credential", valid_613215
  var valid_613216 = header.getOrDefault("X-Amz-Security-Token")
  valid_613216 = validateParameter(valid_613216, JString, required = false,
                                 default = nil)
  if valid_613216 != nil:
    section.add "X-Amz-Security-Token", valid_613216
  var valid_613217 = header.getOrDefault("X-Amz-Algorithm")
  valid_613217 = validateParameter(valid_613217, JString, required = false,
                                 default = nil)
  if valid_613217 != nil:
    section.add "X-Amz-Algorithm", valid_613217
  var valid_613218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613218 = validateParameter(valid_613218, JString, required = false,
                                 default = nil)
  if valid_613218 != nil:
    section.add "X-Amz-SignedHeaders", valid_613218
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_613219 = formData.getOrDefault("MaxRecords")
  valid_613219 = validateParameter(valid_613219, JInt, required = false, default = nil)
  if valid_613219 != nil:
    section.add "MaxRecords", valid_613219
  var valid_613220 = formData.getOrDefault("Marker")
  valid_613220 = validateParameter(valid_613220, JString, required = false,
                                 default = nil)
  if valid_613220 != nil:
    section.add "Marker", valid_613220
  var valid_613221 = formData.getOrDefault("CertificateIdentifier")
  valid_613221 = validateParameter(valid_613221, JString, required = false,
                                 default = nil)
  if valid_613221 != nil:
    section.add "CertificateIdentifier", valid_613221
  var valid_613222 = formData.getOrDefault("Filters")
  valid_613222 = validateParameter(valid_613222, JArray, required = false,
                                 default = nil)
  if valid_613222 != nil:
    section.add "Filters", valid_613222
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613223: Call_PostDescribeCertificates_613207; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_613223.validator(path, query, header, formData, body)
  let scheme = call_613223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613223.url(scheme.get, call_613223.host, call_613223.base,
                         call_613223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613223, url, valid)

proc call*(call_613224: Call_PostDescribeCertificates_613207; MaxRecords: int = 0;
          Marker: string = ""; CertificateIdentifier: string = "";
          Action: string = "DescribeCertificates"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_613225 = newJObject()
  var formData_613226 = newJObject()
  add(formData_613226, "MaxRecords", newJInt(MaxRecords))
  add(formData_613226, "Marker", newJString(Marker))
  add(formData_613226, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_613225, "Action", newJString(Action))
  if Filters != nil:
    formData_613226.add "Filters", Filters
  add(query_613225, "Version", newJString(Version))
  result = call_613224.call(nil, query_613225, nil, formData_613226, nil)

var postDescribeCertificates* = Call_PostDescribeCertificates_613207(
    name: "postDescribeCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_PostDescribeCertificates_613208, base: "/",
    url: url_PostDescribeCertificates_613209, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCertificates_613188 = ref object of OpenApiRestCall_610658
proc url_GetDescribeCertificates_613190(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCertificates_613189(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613191 = query.getOrDefault("Marker")
  valid_613191 = validateParameter(valid_613191, JString, required = false,
                                 default = nil)
  if valid_613191 != nil:
    section.add "Marker", valid_613191
  var valid_613192 = query.getOrDefault("Action")
  valid_613192 = validateParameter(valid_613192, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_613192 != nil:
    section.add "Action", valid_613192
  var valid_613193 = query.getOrDefault("Version")
  valid_613193 = validateParameter(valid_613193, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613193 != nil:
    section.add "Version", valid_613193
  var valid_613194 = query.getOrDefault("CertificateIdentifier")
  valid_613194 = validateParameter(valid_613194, JString, required = false,
                                 default = nil)
  if valid_613194 != nil:
    section.add "CertificateIdentifier", valid_613194
  var valid_613195 = query.getOrDefault("Filters")
  valid_613195 = validateParameter(valid_613195, JArray, required = false,
                                 default = nil)
  if valid_613195 != nil:
    section.add "Filters", valid_613195
  var valid_613196 = query.getOrDefault("MaxRecords")
  valid_613196 = validateParameter(valid_613196, JInt, required = false, default = nil)
  if valid_613196 != nil:
    section.add "MaxRecords", valid_613196
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613197 = header.getOrDefault("X-Amz-Signature")
  valid_613197 = validateParameter(valid_613197, JString, required = false,
                                 default = nil)
  if valid_613197 != nil:
    section.add "X-Amz-Signature", valid_613197
  var valid_613198 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613198 = validateParameter(valid_613198, JString, required = false,
                                 default = nil)
  if valid_613198 != nil:
    section.add "X-Amz-Content-Sha256", valid_613198
  var valid_613199 = header.getOrDefault("X-Amz-Date")
  valid_613199 = validateParameter(valid_613199, JString, required = false,
                                 default = nil)
  if valid_613199 != nil:
    section.add "X-Amz-Date", valid_613199
  var valid_613200 = header.getOrDefault("X-Amz-Credential")
  valid_613200 = validateParameter(valid_613200, JString, required = false,
                                 default = nil)
  if valid_613200 != nil:
    section.add "X-Amz-Credential", valid_613200
  var valid_613201 = header.getOrDefault("X-Amz-Security-Token")
  valid_613201 = validateParameter(valid_613201, JString, required = false,
                                 default = nil)
  if valid_613201 != nil:
    section.add "X-Amz-Security-Token", valid_613201
  var valid_613202 = header.getOrDefault("X-Amz-Algorithm")
  valid_613202 = validateParameter(valid_613202, JString, required = false,
                                 default = nil)
  if valid_613202 != nil:
    section.add "X-Amz-Algorithm", valid_613202
  var valid_613203 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613203 = validateParameter(valid_613203, JString, required = false,
                                 default = nil)
  if valid_613203 != nil:
    section.add "X-Amz-SignedHeaders", valid_613203
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613204: Call_GetDescribeCertificates_613188; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_613204.validator(path, query, header, formData, body)
  let scheme = call_613204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613204.url(scheme.get, call_613204.host, call_613204.base,
                         call_613204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613204, url, valid)

proc call*(call_613205: Call_GetDescribeCertificates_613188; Marker: string = "";
          Action: string = "DescribeCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0): Recallable =
  ## getDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613206 = newJObject()
  add(query_613206, "Marker", newJString(Marker))
  add(query_613206, "Action", newJString(Action))
  add(query_613206, "Version", newJString(Version))
  add(query_613206, "CertificateIdentifier", newJString(CertificateIdentifier))
  if Filters != nil:
    query_613206.add "Filters", Filters
  add(query_613206, "MaxRecords", newJInt(MaxRecords))
  result = call_613205.call(nil, query_613206, nil, nil, nil)

var getDescribeCertificates* = Call_GetDescribeCertificates_613188(
    name: "getDescribeCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_GetDescribeCertificates_613189, base: "/",
    url: url_GetDescribeCertificates_613190, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCustomAvailabilityZones_613246 = ref object of OpenApiRestCall_610658
proc url_PostDescribeCustomAvailabilityZones_613248(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCustomAvailabilityZones_613247(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613249 = query.getOrDefault("Action")
  valid_613249 = validateParameter(valid_613249, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_613249 != nil:
    section.add "Action", valid_613249
  var valid_613250 = query.getOrDefault("Version")
  valid_613250 = validateParameter(valid_613250, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613250 != nil:
    section.add "Version", valid_613250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613251 = header.getOrDefault("X-Amz-Signature")
  valid_613251 = validateParameter(valid_613251, JString, required = false,
                                 default = nil)
  if valid_613251 != nil:
    section.add "X-Amz-Signature", valid_613251
  var valid_613252 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613252 = validateParameter(valid_613252, JString, required = false,
                                 default = nil)
  if valid_613252 != nil:
    section.add "X-Amz-Content-Sha256", valid_613252
  var valid_613253 = header.getOrDefault("X-Amz-Date")
  valid_613253 = validateParameter(valid_613253, JString, required = false,
                                 default = nil)
  if valid_613253 != nil:
    section.add "X-Amz-Date", valid_613253
  var valid_613254 = header.getOrDefault("X-Amz-Credential")
  valid_613254 = validateParameter(valid_613254, JString, required = false,
                                 default = nil)
  if valid_613254 != nil:
    section.add "X-Amz-Credential", valid_613254
  var valid_613255 = header.getOrDefault("X-Amz-Security-Token")
  valid_613255 = validateParameter(valid_613255, JString, required = false,
                                 default = nil)
  if valid_613255 != nil:
    section.add "X-Amz-Security-Token", valid_613255
  var valid_613256 = header.getOrDefault("X-Amz-Algorithm")
  valid_613256 = validateParameter(valid_613256, JString, required = false,
                                 default = nil)
  if valid_613256 != nil:
    section.add "X-Amz-Algorithm", valid_613256
  var valid_613257 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613257 = validateParameter(valid_613257, JString, required = false,
                                 default = nil)
  if valid_613257 != nil:
    section.add "X-Amz-SignedHeaders", valid_613257
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  section = newJObject()
  var valid_613258 = formData.getOrDefault("MaxRecords")
  valid_613258 = validateParameter(valid_613258, JInt, required = false, default = nil)
  if valid_613258 != nil:
    section.add "MaxRecords", valid_613258
  var valid_613259 = formData.getOrDefault("Marker")
  valid_613259 = validateParameter(valid_613259, JString, required = false,
                                 default = nil)
  if valid_613259 != nil:
    section.add "Marker", valid_613259
  var valid_613260 = formData.getOrDefault("Filters")
  valid_613260 = validateParameter(valid_613260, JArray, required = false,
                                 default = nil)
  if valid_613260 != nil:
    section.add "Filters", valid_613260
  var valid_613261 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_613261 = validateParameter(valid_613261, JString, required = false,
                                 default = nil)
  if valid_613261 != nil:
    section.add "CustomAvailabilityZoneId", valid_613261
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613262: Call_PostDescribeCustomAvailabilityZones_613246;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_613262.validator(path, query, header, formData, body)
  let scheme = call_613262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613262.url(scheme.get, call_613262.host, call_613262.base,
                         call_613262.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613262, url, valid)

proc call*(call_613263: Call_PostDescribeCustomAvailabilityZones_613246;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Filters: JsonNode = nil; CustomAvailabilityZoneId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Version: string (required)
  var query_613264 = newJObject()
  var formData_613265 = newJObject()
  add(formData_613265, "MaxRecords", newJInt(MaxRecords))
  add(formData_613265, "Marker", newJString(Marker))
  add(query_613264, "Action", newJString(Action))
  if Filters != nil:
    formData_613265.add "Filters", Filters
  add(formData_613265, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_613264, "Version", newJString(Version))
  result = call_613263.call(nil, query_613264, nil, formData_613265, nil)

var postDescribeCustomAvailabilityZones* = Call_PostDescribeCustomAvailabilityZones_613246(
    name: "postDescribeCustomAvailabilityZones", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_PostDescribeCustomAvailabilityZones_613247, base: "/",
    url: url_PostDescribeCustomAvailabilityZones_613248,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCustomAvailabilityZones_613227 = ref object of OpenApiRestCall_610658
proc url_GetDescribeCustomAvailabilityZones_613229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCustomAvailabilityZones_613228(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613230 = query.getOrDefault("Marker")
  valid_613230 = validateParameter(valid_613230, JString, required = false,
                                 default = nil)
  if valid_613230 != nil:
    section.add "Marker", valid_613230
  var valid_613231 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_613231 = validateParameter(valid_613231, JString, required = false,
                                 default = nil)
  if valid_613231 != nil:
    section.add "CustomAvailabilityZoneId", valid_613231
  var valid_613232 = query.getOrDefault("Action")
  valid_613232 = validateParameter(valid_613232, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_613232 != nil:
    section.add "Action", valid_613232
  var valid_613233 = query.getOrDefault("Version")
  valid_613233 = validateParameter(valid_613233, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613233 != nil:
    section.add "Version", valid_613233
  var valid_613234 = query.getOrDefault("Filters")
  valid_613234 = validateParameter(valid_613234, JArray, required = false,
                                 default = nil)
  if valid_613234 != nil:
    section.add "Filters", valid_613234
  var valid_613235 = query.getOrDefault("MaxRecords")
  valid_613235 = validateParameter(valid_613235, JInt, required = false, default = nil)
  if valid_613235 != nil:
    section.add "MaxRecords", valid_613235
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613236 = header.getOrDefault("X-Amz-Signature")
  valid_613236 = validateParameter(valid_613236, JString, required = false,
                                 default = nil)
  if valid_613236 != nil:
    section.add "X-Amz-Signature", valid_613236
  var valid_613237 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613237 = validateParameter(valid_613237, JString, required = false,
                                 default = nil)
  if valid_613237 != nil:
    section.add "X-Amz-Content-Sha256", valid_613237
  var valid_613238 = header.getOrDefault("X-Amz-Date")
  valid_613238 = validateParameter(valid_613238, JString, required = false,
                                 default = nil)
  if valid_613238 != nil:
    section.add "X-Amz-Date", valid_613238
  var valid_613239 = header.getOrDefault("X-Amz-Credential")
  valid_613239 = validateParameter(valid_613239, JString, required = false,
                                 default = nil)
  if valid_613239 != nil:
    section.add "X-Amz-Credential", valid_613239
  var valid_613240 = header.getOrDefault("X-Amz-Security-Token")
  valid_613240 = validateParameter(valid_613240, JString, required = false,
                                 default = nil)
  if valid_613240 != nil:
    section.add "X-Amz-Security-Token", valid_613240
  var valid_613241 = header.getOrDefault("X-Amz-Algorithm")
  valid_613241 = validateParameter(valid_613241, JString, required = false,
                                 default = nil)
  if valid_613241 != nil:
    section.add "X-Amz-Algorithm", valid_613241
  var valid_613242 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613242 = validateParameter(valid_613242, JString, required = false,
                                 default = nil)
  if valid_613242 != nil:
    section.add "X-Amz-SignedHeaders", valid_613242
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613243: Call_GetDescribeCustomAvailabilityZones_613227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_613243.validator(path, query, header, formData, body)
  let scheme = call_613243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613243.url(scheme.get, call_613243.host, call_613243.base,
                         call_613243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613243, url, valid)

proc call*(call_613244: Call_GetDescribeCustomAvailabilityZones_613227;
          Marker: string = ""; CustomAvailabilityZoneId: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613245 = newJObject()
  add(query_613245, "Marker", newJString(Marker))
  add(query_613245, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_613245, "Action", newJString(Action))
  add(query_613245, "Version", newJString(Version))
  if Filters != nil:
    query_613245.add "Filters", Filters
  add(query_613245, "MaxRecords", newJInt(MaxRecords))
  result = call_613244.call(nil, query_613245, nil, nil, nil)

var getDescribeCustomAvailabilityZones* = Call_GetDescribeCustomAvailabilityZones_613227(
    name: "getDescribeCustomAvailabilityZones", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_GetDescribeCustomAvailabilityZones_613228, base: "/",
    url: url_GetDescribeCustomAvailabilityZones_613229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterBacktracks_613286 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBClusterBacktracks_613288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterBacktracks_613287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613289 = query.getOrDefault("Action")
  valid_613289 = validateParameter(valid_613289, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_613289 != nil:
    section.add "Action", valid_613289
  var valid_613290 = query.getOrDefault("Version")
  valid_613290 = validateParameter(valid_613290, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613290 != nil:
    section.add "Version", valid_613290
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613291 = header.getOrDefault("X-Amz-Signature")
  valid_613291 = validateParameter(valid_613291, JString, required = false,
                                 default = nil)
  if valid_613291 != nil:
    section.add "X-Amz-Signature", valid_613291
  var valid_613292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613292 = validateParameter(valid_613292, JString, required = false,
                                 default = nil)
  if valid_613292 != nil:
    section.add "X-Amz-Content-Sha256", valid_613292
  var valid_613293 = header.getOrDefault("X-Amz-Date")
  valid_613293 = validateParameter(valid_613293, JString, required = false,
                                 default = nil)
  if valid_613293 != nil:
    section.add "X-Amz-Date", valid_613293
  var valid_613294 = header.getOrDefault("X-Amz-Credential")
  valid_613294 = validateParameter(valid_613294, JString, required = false,
                                 default = nil)
  if valid_613294 != nil:
    section.add "X-Amz-Credential", valid_613294
  var valid_613295 = header.getOrDefault("X-Amz-Security-Token")
  valid_613295 = validateParameter(valid_613295, JString, required = false,
                                 default = nil)
  if valid_613295 != nil:
    section.add "X-Amz-Security-Token", valid_613295
  var valid_613296 = header.getOrDefault("X-Amz-Algorithm")
  valid_613296 = validateParameter(valid_613296, JString, required = false,
                                 default = nil)
  if valid_613296 != nil:
    section.add "X-Amz-Algorithm", valid_613296
  var valid_613297 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613297 = validateParameter(valid_613297, JString, required = false,
                                 default = nil)
  if valid_613297 != nil:
    section.add "X-Amz-SignedHeaders", valid_613297
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_613298 = formData.getOrDefault("MaxRecords")
  valid_613298 = validateParameter(valid_613298, JInt, required = false, default = nil)
  if valid_613298 != nil:
    section.add "MaxRecords", valid_613298
  var valid_613299 = formData.getOrDefault("Marker")
  valid_613299 = validateParameter(valid_613299, JString, required = false,
                                 default = nil)
  if valid_613299 != nil:
    section.add "Marker", valid_613299
  var valid_613300 = formData.getOrDefault("BacktrackIdentifier")
  valid_613300 = validateParameter(valid_613300, JString, required = false,
                                 default = nil)
  if valid_613300 != nil:
    section.add "BacktrackIdentifier", valid_613300
  var valid_613301 = formData.getOrDefault("Filters")
  valid_613301 = validateParameter(valid_613301, JArray, required = false,
                                 default = nil)
  if valid_613301 != nil:
    section.add "Filters", valid_613301
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_613302 = formData.getOrDefault("DBClusterIdentifier")
  valid_613302 = validateParameter(valid_613302, JString, required = true,
                                 default = nil)
  if valid_613302 != nil:
    section.add "DBClusterIdentifier", valid_613302
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613303: Call_PostDescribeDBClusterBacktracks_613286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613303.validator(path, query, header, formData, body)
  let scheme = call_613303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613303.url(scheme.get, call_613303.host, call_613303.base,
                         call_613303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613303, url, valid)

proc call*(call_613304: Call_PostDescribeDBClusterBacktracks_613286;
          DBClusterIdentifier: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_613305 = newJObject()
  var formData_613306 = newJObject()
  add(formData_613306, "MaxRecords", newJInt(MaxRecords))
  add(formData_613306, "Marker", newJString(Marker))
  add(query_613305, "Action", newJString(Action))
  add(formData_613306, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  if Filters != nil:
    formData_613306.add "Filters", Filters
  add(query_613305, "Version", newJString(Version))
  add(formData_613306, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_613304.call(nil, query_613305, nil, formData_613306, nil)

var postDescribeDBClusterBacktracks* = Call_PostDescribeDBClusterBacktracks_613286(
    name: "postDescribeDBClusterBacktracks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_PostDescribeDBClusterBacktracks_613287, base: "/",
    url: url_PostDescribeDBClusterBacktracks_613288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterBacktracks_613266 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBClusterBacktracks_613268(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterBacktracks_613267(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613269 = query.getOrDefault("Marker")
  valid_613269 = validateParameter(valid_613269, JString, required = false,
                                 default = nil)
  if valid_613269 != nil:
    section.add "Marker", valid_613269
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_613270 = query.getOrDefault("DBClusterIdentifier")
  valid_613270 = validateParameter(valid_613270, JString, required = true,
                                 default = nil)
  if valid_613270 != nil:
    section.add "DBClusterIdentifier", valid_613270
  var valid_613271 = query.getOrDefault("BacktrackIdentifier")
  valid_613271 = validateParameter(valid_613271, JString, required = false,
                                 default = nil)
  if valid_613271 != nil:
    section.add "BacktrackIdentifier", valid_613271
  var valid_613272 = query.getOrDefault("Action")
  valid_613272 = validateParameter(valid_613272, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_613272 != nil:
    section.add "Action", valid_613272
  var valid_613273 = query.getOrDefault("Version")
  valid_613273 = validateParameter(valid_613273, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613273 != nil:
    section.add "Version", valid_613273
  var valid_613274 = query.getOrDefault("Filters")
  valid_613274 = validateParameter(valid_613274, JArray, required = false,
                                 default = nil)
  if valid_613274 != nil:
    section.add "Filters", valid_613274
  var valid_613275 = query.getOrDefault("MaxRecords")
  valid_613275 = validateParameter(valid_613275, JInt, required = false, default = nil)
  if valid_613275 != nil:
    section.add "MaxRecords", valid_613275
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613276 = header.getOrDefault("X-Amz-Signature")
  valid_613276 = validateParameter(valid_613276, JString, required = false,
                                 default = nil)
  if valid_613276 != nil:
    section.add "X-Amz-Signature", valid_613276
  var valid_613277 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613277 = validateParameter(valid_613277, JString, required = false,
                                 default = nil)
  if valid_613277 != nil:
    section.add "X-Amz-Content-Sha256", valid_613277
  var valid_613278 = header.getOrDefault("X-Amz-Date")
  valid_613278 = validateParameter(valid_613278, JString, required = false,
                                 default = nil)
  if valid_613278 != nil:
    section.add "X-Amz-Date", valid_613278
  var valid_613279 = header.getOrDefault("X-Amz-Credential")
  valid_613279 = validateParameter(valid_613279, JString, required = false,
                                 default = nil)
  if valid_613279 != nil:
    section.add "X-Amz-Credential", valid_613279
  var valid_613280 = header.getOrDefault("X-Amz-Security-Token")
  valid_613280 = validateParameter(valid_613280, JString, required = false,
                                 default = nil)
  if valid_613280 != nil:
    section.add "X-Amz-Security-Token", valid_613280
  var valid_613281 = header.getOrDefault("X-Amz-Algorithm")
  valid_613281 = validateParameter(valid_613281, JString, required = false,
                                 default = nil)
  if valid_613281 != nil:
    section.add "X-Amz-Algorithm", valid_613281
  var valid_613282 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613282 = validateParameter(valid_613282, JString, required = false,
                                 default = nil)
  if valid_613282 != nil:
    section.add "X-Amz-SignedHeaders", valid_613282
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613283: Call_GetDescribeDBClusterBacktracks_613266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613283.validator(path, query, header, formData, body)
  let scheme = call_613283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613283.url(scheme.get, call_613283.host, call_613283.base,
                         call_613283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613283, url, valid)

proc call*(call_613284: Call_GetDescribeDBClusterBacktracks_613266;
          DBClusterIdentifier: string; Marker: string = "";
          BacktrackIdentifier: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613285 = newJObject()
  add(query_613285, "Marker", newJString(Marker))
  add(query_613285, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613285, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  add(query_613285, "Action", newJString(Action))
  add(query_613285, "Version", newJString(Version))
  if Filters != nil:
    query_613285.add "Filters", Filters
  add(query_613285, "MaxRecords", newJInt(MaxRecords))
  result = call_613284.call(nil, query_613285, nil, nil, nil)

var getDescribeDBClusterBacktracks* = Call_GetDescribeDBClusterBacktracks_613266(
    name: "getDescribeDBClusterBacktracks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_GetDescribeDBClusterBacktracks_613267, base: "/",
    url: url_GetDescribeDBClusterBacktracks_613268,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterEndpoints_613327 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBClusterEndpoints_613329(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterEndpoints_613328(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613330 = query.getOrDefault("Action")
  valid_613330 = validateParameter(valid_613330, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_613330 != nil:
    section.add "Action", valid_613330
  var valid_613331 = query.getOrDefault("Version")
  valid_613331 = validateParameter(valid_613331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613331 != nil:
    section.add "Version", valid_613331
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613332 = header.getOrDefault("X-Amz-Signature")
  valid_613332 = validateParameter(valid_613332, JString, required = false,
                                 default = nil)
  if valid_613332 != nil:
    section.add "X-Amz-Signature", valid_613332
  var valid_613333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613333 = validateParameter(valid_613333, JString, required = false,
                                 default = nil)
  if valid_613333 != nil:
    section.add "X-Amz-Content-Sha256", valid_613333
  var valid_613334 = header.getOrDefault("X-Amz-Date")
  valid_613334 = validateParameter(valid_613334, JString, required = false,
                                 default = nil)
  if valid_613334 != nil:
    section.add "X-Amz-Date", valid_613334
  var valid_613335 = header.getOrDefault("X-Amz-Credential")
  valid_613335 = validateParameter(valid_613335, JString, required = false,
                                 default = nil)
  if valid_613335 != nil:
    section.add "X-Amz-Credential", valid_613335
  var valid_613336 = header.getOrDefault("X-Amz-Security-Token")
  valid_613336 = validateParameter(valid_613336, JString, required = false,
                                 default = nil)
  if valid_613336 != nil:
    section.add "X-Amz-Security-Token", valid_613336
  var valid_613337 = header.getOrDefault("X-Amz-Algorithm")
  valid_613337 = validateParameter(valid_613337, JString, required = false,
                                 default = nil)
  if valid_613337 != nil:
    section.add "X-Amz-Algorithm", valid_613337
  var valid_613338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613338 = validateParameter(valid_613338, JString, required = false,
                                 default = nil)
  if valid_613338 != nil:
    section.add "X-Amz-SignedHeaders", valid_613338
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_613339 = formData.getOrDefault("MaxRecords")
  valid_613339 = validateParameter(valid_613339, JInt, required = false, default = nil)
  if valid_613339 != nil:
    section.add "MaxRecords", valid_613339
  var valid_613340 = formData.getOrDefault("Marker")
  valid_613340 = validateParameter(valid_613340, JString, required = false,
                                 default = nil)
  if valid_613340 != nil:
    section.add "Marker", valid_613340
  var valid_613341 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_613341 = validateParameter(valid_613341, JString, required = false,
                                 default = nil)
  if valid_613341 != nil:
    section.add "DBClusterEndpointIdentifier", valid_613341
  var valid_613342 = formData.getOrDefault("Filters")
  valid_613342 = validateParameter(valid_613342, JArray, required = false,
                                 default = nil)
  if valid_613342 != nil:
    section.add "Filters", valid_613342
  var valid_613343 = formData.getOrDefault("DBClusterIdentifier")
  valid_613343 = validateParameter(valid_613343, JString, required = false,
                                 default = nil)
  if valid_613343 != nil:
    section.add "DBClusterIdentifier", valid_613343
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613344: Call_PostDescribeDBClusterEndpoints_613327; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613344.validator(path, query, header, formData, body)
  let scheme = call_613344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613344.url(scheme.get, call_613344.host, call_613344.base,
                         call_613344.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613344, url, valid)

proc call*(call_613345: Call_PostDescribeDBClusterEndpoints_613327;
          MaxRecords: int = 0; Marker: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_613346 = newJObject()
  var formData_613347 = newJObject()
  add(formData_613347, "MaxRecords", newJInt(MaxRecords))
  add(formData_613347, "Marker", newJString(Marker))
  add(formData_613347, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_613346, "Action", newJString(Action))
  if Filters != nil:
    formData_613347.add "Filters", Filters
  add(query_613346, "Version", newJString(Version))
  add(formData_613347, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_613345.call(nil, query_613346, nil, formData_613347, nil)

var postDescribeDBClusterEndpoints* = Call_PostDescribeDBClusterEndpoints_613327(
    name: "postDescribeDBClusterEndpoints", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_PostDescribeDBClusterEndpoints_613328, base: "/",
    url: url_PostDescribeDBClusterEndpoints_613329,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterEndpoints_613307 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBClusterEndpoints_613309(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterEndpoints_613308(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613310 = query.getOrDefault("Marker")
  valid_613310 = validateParameter(valid_613310, JString, required = false,
                                 default = nil)
  if valid_613310 != nil:
    section.add "Marker", valid_613310
  var valid_613311 = query.getOrDefault("DBClusterIdentifier")
  valid_613311 = validateParameter(valid_613311, JString, required = false,
                                 default = nil)
  if valid_613311 != nil:
    section.add "DBClusterIdentifier", valid_613311
  var valid_613312 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_613312 = validateParameter(valid_613312, JString, required = false,
                                 default = nil)
  if valid_613312 != nil:
    section.add "DBClusterEndpointIdentifier", valid_613312
  var valid_613313 = query.getOrDefault("Action")
  valid_613313 = validateParameter(valid_613313, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_613313 != nil:
    section.add "Action", valid_613313
  var valid_613314 = query.getOrDefault("Version")
  valid_613314 = validateParameter(valid_613314, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613314 != nil:
    section.add "Version", valid_613314
  var valid_613315 = query.getOrDefault("Filters")
  valid_613315 = validateParameter(valid_613315, JArray, required = false,
                                 default = nil)
  if valid_613315 != nil:
    section.add "Filters", valid_613315
  var valid_613316 = query.getOrDefault("MaxRecords")
  valid_613316 = validateParameter(valid_613316, JInt, required = false, default = nil)
  if valid_613316 != nil:
    section.add "MaxRecords", valid_613316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613317 = header.getOrDefault("X-Amz-Signature")
  valid_613317 = validateParameter(valid_613317, JString, required = false,
                                 default = nil)
  if valid_613317 != nil:
    section.add "X-Amz-Signature", valid_613317
  var valid_613318 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613318 = validateParameter(valid_613318, JString, required = false,
                                 default = nil)
  if valid_613318 != nil:
    section.add "X-Amz-Content-Sha256", valid_613318
  var valid_613319 = header.getOrDefault("X-Amz-Date")
  valid_613319 = validateParameter(valid_613319, JString, required = false,
                                 default = nil)
  if valid_613319 != nil:
    section.add "X-Amz-Date", valid_613319
  var valid_613320 = header.getOrDefault("X-Amz-Credential")
  valid_613320 = validateParameter(valid_613320, JString, required = false,
                                 default = nil)
  if valid_613320 != nil:
    section.add "X-Amz-Credential", valid_613320
  var valid_613321 = header.getOrDefault("X-Amz-Security-Token")
  valid_613321 = validateParameter(valid_613321, JString, required = false,
                                 default = nil)
  if valid_613321 != nil:
    section.add "X-Amz-Security-Token", valid_613321
  var valid_613322 = header.getOrDefault("X-Amz-Algorithm")
  valid_613322 = validateParameter(valid_613322, JString, required = false,
                                 default = nil)
  if valid_613322 != nil:
    section.add "X-Amz-Algorithm", valid_613322
  var valid_613323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613323 = validateParameter(valid_613323, JString, required = false,
                                 default = nil)
  if valid_613323 != nil:
    section.add "X-Amz-SignedHeaders", valid_613323
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613324: Call_GetDescribeDBClusterEndpoints_613307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613324.validator(path, query, header, formData, body)
  let scheme = call_613324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613324.url(scheme.get, call_613324.host, call_613324.base,
                         call_613324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613324, url, valid)

proc call*(call_613325: Call_GetDescribeDBClusterEndpoints_613307;
          Marker: string = ""; DBClusterIdentifier: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613326 = newJObject()
  add(query_613326, "Marker", newJString(Marker))
  add(query_613326, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613326, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_613326, "Action", newJString(Action))
  add(query_613326, "Version", newJString(Version))
  if Filters != nil:
    query_613326.add "Filters", Filters
  add(query_613326, "MaxRecords", newJInt(MaxRecords))
  result = call_613325.call(nil, query_613326, nil, nil, nil)

var getDescribeDBClusterEndpoints* = Call_GetDescribeDBClusterEndpoints_613307(
    name: "getDescribeDBClusterEndpoints", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_GetDescribeDBClusterEndpoints_613308, base: "/",
    url: url_GetDescribeDBClusterEndpoints_613309,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_613367 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBClusterParameterGroups_613369(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_613368(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613370 = query.getOrDefault("Action")
  valid_613370 = validateParameter(valid_613370, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_613370 != nil:
    section.add "Action", valid_613370
  var valid_613371 = query.getOrDefault("Version")
  valid_613371 = validateParameter(valid_613371, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613371 != nil:
    section.add "Version", valid_613371
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613372 = header.getOrDefault("X-Amz-Signature")
  valid_613372 = validateParameter(valid_613372, JString, required = false,
                                 default = nil)
  if valid_613372 != nil:
    section.add "X-Amz-Signature", valid_613372
  var valid_613373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613373 = validateParameter(valid_613373, JString, required = false,
                                 default = nil)
  if valid_613373 != nil:
    section.add "X-Amz-Content-Sha256", valid_613373
  var valid_613374 = header.getOrDefault("X-Amz-Date")
  valid_613374 = validateParameter(valid_613374, JString, required = false,
                                 default = nil)
  if valid_613374 != nil:
    section.add "X-Amz-Date", valid_613374
  var valid_613375 = header.getOrDefault("X-Amz-Credential")
  valid_613375 = validateParameter(valid_613375, JString, required = false,
                                 default = nil)
  if valid_613375 != nil:
    section.add "X-Amz-Credential", valid_613375
  var valid_613376 = header.getOrDefault("X-Amz-Security-Token")
  valid_613376 = validateParameter(valid_613376, JString, required = false,
                                 default = nil)
  if valid_613376 != nil:
    section.add "X-Amz-Security-Token", valid_613376
  var valid_613377 = header.getOrDefault("X-Amz-Algorithm")
  valid_613377 = validateParameter(valid_613377, JString, required = false,
                                 default = nil)
  if valid_613377 != nil:
    section.add "X-Amz-Algorithm", valid_613377
  var valid_613378 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613378 = validateParameter(valid_613378, JString, required = false,
                                 default = nil)
  if valid_613378 != nil:
    section.add "X-Amz-SignedHeaders", valid_613378
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_613379 = formData.getOrDefault("MaxRecords")
  valid_613379 = validateParameter(valid_613379, JInt, required = false, default = nil)
  if valid_613379 != nil:
    section.add "MaxRecords", valid_613379
  var valid_613380 = formData.getOrDefault("Marker")
  valid_613380 = validateParameter(valid_613380, JString, required = false,
                                 default = nil)
  if valid_613380 != nil:
    section.add "Marker", valid_613380
  var valid_613381 = formData.getOrDefault("Filters")
  valid_613381 = validateParameter(valid_613381, JArray, required = false,
                                 default = nil)
  if valid_613381 != nil:
    section.add "Filters", valid_613381
  var valid_613382 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_613382 = validateParameter(valid_613382, JString, required = false,
                                 default = nil)
  if valid_613382 != nil:
    section.add "DBClusterParameterGroupName", valid_613382
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613383: Call_PostDescribeDBClusterParameterGroups_613367;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613383.validator(path, query, header, formData, body)
  let scheme = call_613383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613383.url(scheme.get, call_613383.host, call_613383.base,
                         call_613383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613383, url, valid)

proc call*(call_613384: Call_PostDescribeDBClusterParameterGroups_613367;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Filters: JsonNode = nil; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_613385 = newJObject()
  var formData_613386 = newJObject()
  add(formData_613386, "MaxRecords", newJInt(MaxRecords))
  add(formData_613386, "Marker", newJString(Marker))
  add(query_613385, "Action", newJString(Action))
  if Filters != nil:
    formData_613386.add "Filters", Filters
  add(formData_613386, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_613385, "Version", newJString(Version))
  result = call_613384.call(nil, query_613385, nil, formData_613386, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_613367(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_613368, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_613369,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_613348 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBClusterParameterGroups_613350(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_613349(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613351 = query.getOrDefault("Marker")
  valid_613351 = validateParameter(valid_613351, JString, required = false,
                                 default = nil)
  if valid_613351 != nil:
    section.add "Marker", valid_613351
  var valid_613352 = query.getOrDefault("DBClusterParameterGroupName")
  valid_613352 = validateParameter(valid_613352, JString, required = false,
                                 default = nil)
  if valid_613352 != nil:
    section.add "DBClusterParameterGroupName", valid_613352
  var valid_613353 = query.getOrDefault("Action")
  valid_613353 = validateParameter(valid_613353, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_613353 != nil:
    section.add "Action", valid_613353
  var valid_613354 = query.getOrDefault("Version")
  valid_613354 = validateParameter(valid_613354, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613354 != nil:
    section.add "Version", valid_613354
  var valid_613355 = query.getOrDefault("Filters")
  valid_613355 = validateParameter(valid_613355, JArray, required = false,
                                 default = nil)
  if valid_613355 != nil:
    section.add "Filters", valid_613355
  var valid_613356 = query.getOrDefault("MaxRecords")
  valid_613356 = validateParameter(valid_613356, JInt, required = false, default = nil)
  if valid_613356 != nil:
    section.add "MaxRecords", valid_613356
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613357 = header.getOrDefault("X-Amz-Signature")
  valid_613357 = validateParameter(valid_613357, JString, required = false,
                                 default = nil)
  if valid_613357 != nil:
    section.add "X-Amz-Signature", valid_613357
  var valid_613358 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613358 = validateParameter(valid_613358, JString, required = false,
                                 default = nil)
  if valid_613358 != nil:
    section.add "X-Amz-Content-Sha256", valid_613358
  var valid_613359 = header.getOrDefault("X-Amz-Date")
  valid_613359 = validateParameter(valid_613359, JString, required = false,
                                 default = nil)
  if valid_613359 != nil:
    section.add "X-Amz-Date", valid_613359
  var valid_613360 = header.getOrDefault("X-Amz-Credential")
  valid_613360 = validateParameter(valid_613360, JString, required = false,
                                 default = nil)
  if valid_613360 != nil:
    section.add "X-Amz-Credential", valid_613360
  var valid_613361 = header.getOrDefault("X-Amz-Security-Token")
  valid_613361 = validateParameter(valid_613361, JString, required = false,
                                 default = nil)
  if valid_613361 != nil:
    section.add "X-Amz-Security-Token", valid_613361
  var valid_613362 = header.getOrDefault("X-Amz-Algorithm")
  valid_613362 = validateParameter(valid_613362, JString, required = false,
                                 default = nil)
  if valid_613362 != nil:
    section.add "X-Amz-Algorithm", valid_613362
  var valid_613363 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613363 = validateParameter(valid_613363, JString, required = false,
                                 default = nil)
  if valid_613363 != nil:
    section.add "X-Amz-SignedHeaders", valid_613363
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613364: Call_GetDescribeDBClusterParameterGroups_613348;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613364.validator(path, query, header, formData, body)
  let scheme = call_613364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613364.url(scheme.get, call_613364.host, call_613364.base,
                         call_613364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613364, url, valid)

proc call*(call_613365: Call_GetDescribeDBClusterParameterGroups_613348;
          Marker: string = ""; DBClusterParameterGroupName: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613366 = newJObject()
  add(query_613366, "Marker", newJString(Marker))
  add(query_613366, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_613366, "Action", newJString(Action))
  add(query_613366, "Version", newJString(Version))
  if Filters != nil:
    query_613366.add "Filters", Filters
  add(query_613366, "MaxRecords", newJInt(MaxRecords))
  result = call_613365.call(nil, query_613366, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_613348(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_613349, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_613350,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_613407 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBClusterParameters_613409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameters_613408(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613410 = query.getOrDefault("Action")
  valid_613410 = validateParameter(valid_613410, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_613410 != nil:
    section.add "Action", valid_613410
  var valid_613411 = query.getOrDefault("Version")
  valid_613411 = validateParameter(valid_613411, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613411 != nil:
    section.add "Version", valid_613411
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613412 = header.getOrDefault("X-Amz-Signature")
  valid_613412 = validateParameter(valid_613412, JString, required = false,
                                 default = nil)
  if valid_613412 != nil:
    section.add "X-Amz-Signature", valid_613412
  var valid_613413 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613413 = validateParameter(valid_613413, JString, required = false,
                                 default = nil)
  if valid_613413 != nil:
    section.add "X-Amz-Content-Sha256", valid_613413
  var valid_613414 = header.getOrDefault("X-Amz-Date")
  valid_613414 = validateParameter(valid_613414, JString, required = false,
                                 default = nil)
  if valid_613414 != nil:
    section.add "X-Amz-Date", valid_613414
  var valid_613415 = header.getOrDefault("X-Amz-Credential")
  valid_613415 = validateParameter(valid_613415, JString, required = false,
                                 default = nil)
  if valid_613415 != nil:
    section.add "X-Amz-Credential", valid_613415
  var valid_613416 = header.getOrDefault("X-Amz-Security-Token")
  valid_613416 = validateParameter(valid_613416, JString, required = false,
                                 default = nil)
  if valid_613416 != nil:
    section.add "X-Amz-Security-Token", valid_613416
  var valid_613417 = header.getOrDefault("X-Amz-Algorithm")
  valid_613417 = validateParameter(valid_613417, JString, required = false,
                                 default = nil)
  if valid_613417 != nil:
    section.add "X-Amz-Algorithm", valid_613417
  var valid_613418 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613418 = validateParameter(valid_613418, JString, required = false,
                                 default = nil)
  if valid_613418 != nil:
    section.add "X-Amz-SignedHeaders", valid_613418
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_613419 = formData.getOrDefault("Source")
  valid_613419 = validateParameter(valid_613419, JString, required = false,
                                 default = nil)
  if valid_613419 != nil:
    section.add "Source", valid_613419
  var valid_613420 = formData.getOrDefault("MaxRecords")
  valid_613420 = validateParameter(valid_613420, JInt, required = false, default = nil)
  if valid_613420 != nil:
    section.add "MaxRecords", valid_613420
  var valid_613421 = formData.getOrDefault("Marker")
  valid_613421 = validateParameter(valid_613421, JString, required = false,
                                 default = nil)
  if valid_613421 != nil:
    section.add "Marker", valid_613421
  var valid_613422 = formData.getOrDefault("Filters")
  valid_613422 = validateParameter(valid_613422, JArray, required = false,
                                 default = nil)
  if valid_613422 != nil:
    section.add "Filters", valid_613422
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_613423 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_613423 = validateParameter(valid_613423, JString, required = true,
                                 default = nil)
  if valid_613423 != nil:
    section.add "DBClusterParameterGroupName", valid_613423
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613424: Call_PostDescribeDBClusterParameters_613407;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613424.validator(path, query, header, formData, body)
  let scheme = call_613424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613424.url(scheme.get, call_613424.host, call_613424.base,
                         call_613424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613424, url, valid)

proc call*(call_613425: Call_PostDescribeDBClusterParameters_613407;
          DBClusterParameterGroupName: string; Source: string = "";
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_613426 = newJObject()
  var formData_613427 = newJObject()
  add(formData_613427, "Source", newJString(Source))
  add(formData_613427, "MaxRecords", newJInt(MaxRecords))
  add(formData_613427, "Marker", newJString(Marker))
  add(query_613426, "Action", newJString(Action))
  if Filters != nil:
    formData_613427.add "Filters", Filters
  add(formData_613427, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_613426, "Version", newJString(Version))
  result = call_613425.call(nil, query_613426, nil, formData_613427, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_613407(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_613408, base: "/",
    url: url_PostDescribeDBClusterParameters_613409,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_613387 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBClusterParameters_613389(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameters_613388(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613390 = query.getOrDefault("Marker")
  valid_613390 = validateParameter(valid_613390, JString, required = false,
                                 default = nil)
  if valid_613390 != nil:
    section.add "Marker", valid_613390
  var valid_613391 = query.getOrDefault("Source")
  valid_613391 = validateParameter(valid_613391, JString, required = false,
                                 default = nil)
  if valid_613391 != nil:
    section.add "Source", valid_613391
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_613392 = query.getOrDefault("DBClusterParameterGroupName")
  valid_613392 = validateParameter(valid_613392, JString, required = true,
                                 default = nil)
  if valid_613392 != nil:
    section.add "DBClusterParameterGroupName", valid_613392
  var valid_613393 = query.getOrDefault("Action")
  valid_613393 = validateParameter(valid_613393, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_613393 != nil:
    section.add "Action", valid_613393
  var valid_613394 = query.getOrDefault("Version")
  valid_613394 = validateParameter(valid_613394, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613394 != nil:
    section.add "Version", valid_613394
  var valid_613395 = query.getOrDefault("Filters")
  valid_613395 = validateParameter(valid_613395, JArray, required = false,
                                 default = nil)
  if valid_613395 != nil:
    section.add "Filters", valid_613395
  var valid_613396 = query.getOrDefault("MaxRecords")
  valid_613396 = validateParameter(valid_613396, JInt, required = false, default = nil)
  if valid_613396 != nil:
    section.add "MaxRecords", valid_613396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613397 = header.getOrDefault("X-Amz-Signature")
  valid_613397 = validateParameter(valid_613397, JString, required = false,
                                 default = nil)
  if valid_613397 != nil:
    section.add "X-Amz-Signature", valid_613397
  var valid_613398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613398 = validateParameter(valid_613398, JString, required = false,
                                 default = nil)
  if valid_613398 != nil:
    section.add "X-Amz-Content-Sha256", valid_613398
  var valid_613399 = header.getOrDefault("X-Amz-Date")
  valid_613399 = validateParameter(valid_613399, JString, required = false,
                                 default = nil)
  if valid_613399 != nil:
    section.add "X-Amz-Date", valid_613399
  var valid_613400 = header.getOrDefault("X-Amz-Credential")
  valid_613400 = validateParameter(valid_613400, JString, required = false,
                                 default = nil)
  if valid_613400 != nil:
    section.add "X-Amz-Credential", valid_613400
  var valid_613401 = header.getOrDefault("X-Amz-Security-Token")
  valid_613401 = validateParameter(valid_613401, JString, required = false,
                                 default = nil)
  if valid_613401 != nil:
    section.add "X-Amz-Security-Token", valid_613401
  var valid_613402 = header.getOrDefault("X-Amz-Algorithm")
  valid_613402 = validateParameter(valid_613402, JString, required = false,
                                 default = nil)
  if valid_613402 != nil:
    section.add "X-Amz-Algorithm", valid_613402
  var valid_613403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613403 = validateParameter(valid_613403, JString, required = false,
                                 default = nil)
  if valid_613403 != nil:
    section.add "X-Amz-SignedHeaders", valid_613403
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613404: Call_GetDescribeDBClusterParameters_613387; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613404.validator(path, query, header, formData, body)
  let scheme = call_613404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613404.url(scheme.get, call_613404.host, call_613404.base,
                         call_613404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613404, url, valid)

proc call*(call_613405: Call_GetDescribeDBClusterParameters_613387;
          DBClusterParameterGroupName: string; Marker: string = "";
          Source: string = ""; Action: string = "DescribeDBClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613406 = newJObject()
  add(query_613406, "Marker", newJString(Marker))
  add(query_613406, "Source", newJString(Source))
  add(query_613406, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_613406, "Action", newJString(Action))
  add(query_613406, "Version", newJString(Version))
  if Filters != nil:
    query_613406.add "Filters", Filters
  add(query_613406, "MaxRecords", newJInt(MaxRecords))
  result = call_613405.call(nil, query_613406, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_613387(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_613388, base: "/",
    url: url_GetDescribeDBClusterParameters_613389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_613444 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBClusterSnapshotAttributes_613446(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_613445(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613447 = query.getOrDefault("Action")
  valid_613447 = validateParameter(valid_613447, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_613447 != nil:
    section.add "Action", valid_613447
  var valid_613448 = query.getOrDefault("Version")
  valid_613448 = validateParameter(valid_613448, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613448 != nil:
    section.add "Version", valid_613448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613449 = header.getOrDefault("X-Amz-Signature")
  valid_613449 = validateParameter(valid_613449, JString, required = false,
                                 default = nil)
  if valid_613449 != nil:
    section.add "X-Amz-Signature", valid_613449
  var valid_613450 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613450 = validateParameter(valid_613450, JString, required = false,
                                 default = nil)
  if valid_613450 != nil:
    section.add "X-Amz-Content-Sha256", valid_613450
  var valid_613451 = header.getOrDefault("X-Amz-Date")
  valid_613451 = validateParameter(valid_613451, JString, required = false,
                                 default = nil)
  if valid_613451 != nil:
    section.add "X-Amz-Date", valid_613451
  var valid_613452 = header.getOrDefault("X-Amz-Credential")
  valid_613452 = validateParameter(valid_613452, JString, required = false,
                                 default = nil)
  if valid_613452 != nil:
    section.add "X-Amz-Credential", valid_613452
  var valid_613453 = header.getOrDefault("X-Amz-Security-Token")
  valid_613453 = validateParameter(valid_613453, JString, required = false,
                                 default = nil)
  if valid_613453 != nil:
    section.add "X-Amz-Security-Token", valid_613453
  var valid_613454 = header.getOrDefault("X-Amz-Algorithm")
  valid_613454 = validateParameter(valid_613454, JString, required = false,
                                 default = nil)
  if valid_613454 != nil:
    section.add "X-Amz-Algorithm", valid_613454
  var valid_613455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613455 = validateParameter(valid_613455, JString, required = false,
                                 default = nil)
  if valid_613455 != nil:
    section.add "X-Amz-SignedHeaders", valid_613455
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_613456 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_613456 = validateParameter(valid_613456, JString, required = true,
                                 default = nil)
  if valid_613456 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_613456
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613457: Call_PostDescribeDBClusterSnapshotAttributes_613444;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613457.validator(path, query, header, formData, body)
  let scheme = call_613457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613457.url(scheme.get, call_613457.host, call_613457.base,
                         call_613457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613457, url, valid)

proc call*(call_613458: Call_PostDescribeDBClusterSnapshotAttributes_613444;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613459 = newJObject()
  var formData_613460 = newJObject()
  add(formData_613460, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_613459, "Action", newJString(Action))
  add(query_613459, "Version", newJString(Version))
  result = call_613458.call(nil, query_613459, nil, formData_613460, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_613444(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_613445, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_613446,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_613428 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBClusterSnapshotAttributes_613430(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_613429(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_613431 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_613431 = validateParameter(valid_613431, JString, required = true,
                                 default = nil)
  if valid_613431 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_613431
  var valid_613432 = query.getOrDefault("Action")
  valid_613432 = validateParameter(valid_613432, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_613432 != nil:
    section.add "Action", valid_613432
  var valid_613433 = query.getOrDefault("Version")
  valid_613433 = validateParameter(valid_613433, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613433 != nil:
    section.add "Version", valid_613433
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613434 = header.getOrDefault("X-Amz-Signature")
  valid_613434 = validateParameter(valid_613434, JString, required = false,
                                 default = nil)
  if valid_613434 != nil:
    section.add "X-Amz-Signature", valid_613434
  var valid_613435 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613435 = validateParameter(valid_613435, JString, required = false,
                                 default = nil)
  if valid_613435 != nil:
    section.add "X-Amz-Content-Sha256", valid_613435
  var valid_613436 = header.getOrDefault("X-Amz-Date")
  valid_613436 = validateParameter(valid_613436, JString, required = false,
                                 default = nil)
  if valid_613436 != nil:
    section.add "X-Amz-Date", valid_613436
  var valid_613437 = header.getOrDefault("X-Amz-Credential")
  valid_613437 = validateParameter(valid_613437, JString, required = false,
                                 default = nil)
  if valid_613437 != nil:
    section.add "X-Amz-Credential", valid_613437
  var valid_613438 = header.getOrDefault("X-Amz-Security-Token")
  valid_613438 = validateParameter(valid_613438, JString, required = false,
                                 default = nil)
  if valid_613438 != nil:
    section.add "X-Amz-Security-Token", valid_613438
  var valid_613439 = header.getOrDefault("X-Amz-Algorithm")
  valid_613439 = validateParameter(valid_613439, JString, required = false,
                                 default = nil)
  if valid_613439 != nil:
    section.add "X-Amz-Algorithm", valid_613439
  var valid_613440 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613440 = validateParameter(valid_613440, JString, required = false,
                                 default = nil)
  if valid_613440 != nil:
    section.add "X-Amz-SignedHeaders", valid_613440
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613441: Call_GetDescribeDBClusterSnapshotAttributes_613428;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613441.validator(path, query, header, formData, body)
  let scheme = call_613441.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613441.url(scheme.get, call_613441.host, call_613441.base,
                         call_613441.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613441, url, valid)

proc call*(call_613442: Call_GetDescribeDBClusterSnapshotAttributes_613428;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613443 = newJObject()
  add(query_613443, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_613443, "Action", newJString(Action))
  add(query_613443, "Version", newJString(Version))
  result = call_613442.call(nil, query_613443, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_613428(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_613429, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_613430,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_613484 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBClusterSnapshots_613486(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_613485(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613487 = query.getOrDefault("Action")
  valid_613487 = validateParameter(valid_613487, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_613487 != nil:
    section.add "Action", valid_613487
  var valid_613488 = query.getOrDefault("Version")
  valid_613488 = validateParameter(valid_613488, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613488 != nil:
    section.add "Version", valid_613488
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613489 = header.getOrDefault("X-Amz-Signature")
  valid_613489 = validateParameter(valid_613489, JString, required = false,
                                 default = nil)
  if valid_613489 != nil:
    section.add "X-Amz-Signature", valid_613489
  var valid_613490 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613490 = validateParameter(valid_613490, JString, required = false,
                                 default = nil)
  if valid_613490 != nil:
    section.add "X-Amz-Content-Sha256", valid_613490
  var valid_613491 = header.getOrDefault("X-Amz-Date")
  valid_613491 = validateParameter(valid_613491, JString, required = false,
                                 default = nil)
  if valid_613491 != nil:
    section.add "X-Amz-Date", valid_613491
  var valid_613492 = header.getOrDefault("X-Amz-Credential")
  valid_613492 = validateParameter(valid_613492, JString, required = false,
                                 default = nil)
  if valid_613492 != nil:
    section.add "X-Amz-Credential", valid_613492
  var valid_613493 = header.getOrDefault("X-Amz-Security-Token")
  valid_613493 = validateParameter(valid_613493, JString, required = false,
                                 default = nil)
  if valid_613493 != nil:
    section.add "X-Amz-Security-Token", valid_613493
  var valid_613494 = header.getOrDefault("X-Amz-Algorithm")
  valid_613494 = validateParameter(valid_613494, JString, required = false,
                                 default = nil)
  if valid_613494 != nil:
    section.add "X-Amz-Algorithm", valid_613494
  var valid_613495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613495 = validateParameter(valid_613495, JString, required = false,
                                 default = nil)
  if valid_613495 != nil:
    section.add "X-Amz-SignedHeaders", valid_613495
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_613496 = formData.getOrDefault("SnapshotType")
  valid_613496 = validateParameter(valid_613496, JString, required = false,
                                 default = nil)
  if valid_613496 != nil:
    section.add "SnapshotType", valid_613496
  var valid_613497 = formData.getOrDefault("MaxRecords")
  valid_613497 = validateParameter(valid_613497, JInt, required = false, default = nil)
  if valid_613497 != nil:
    section.add "MaxRecords", valid_613497
  var valid_613498 = formData.getOrDefault("IncludePublic")
  valid_613498 = validateParameter(valid_613498, JBool, required = false, default = nil)
  if valid_613498 != nil:
    section.add "IncludePublic", valid_613498
  var valid_613499 = formData.getOrDefault("Marker")
  valid_613499 = validateParameter(valid_613499, JString, required = false,
                                 default = nil)
  if valid_613499 != nil:
    section.add "Marker", valid_613499
  var valid_613500 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_613500 = validateParameter(valid_613500, JString, required = false,
                                 default = nil)
  if valid_613500 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_613500
  var valid_613501 = formData.getOrDefault("IncludeShared")
  valid_613501 = validateParameter(valid_613501, JBool, required = false, default = nil)
  if valid_613501 != nil:
    section.add "IncludeShared", valid_613501
  var valid_613502 = formData.getOrDefault("Filters")
  valid_613502 = validateParameter(valid_613502, JArray, required = false,
                                 default = nil)
  if valid_613502 != nil:
    section.add "Filters", valid_613502
  var valid_613503 = formData.getOrDefault("DBClusterIdentifier")
  valid_613503 = validateParameter(valid_613503, JString, required = false,
                                 default = nil)
  if valid_613503 != nil:
    section.add "DBClusterIdentifier", valid_613503
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613504: Call_PostDescribeDBClusterSnapshots_613484; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613504.validator(path, query, header, formData, body)
  let scheme = call_613504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613504.url(scheme.get, call_613504.host, call_613504.base,
                         call_613504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613504, url, valid)

proc call*(call_613505: Call_PostDescribeDBClusterSnapshots_613484;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_613506 = newJObject()
  var formData_613507 = newJObject()
  add(formData_613507, "SnapshotType", newJString(SnapshotType))
  add(formData_613507, "MaxRecords", newJInt(MaxRecords))
  add(formData_613507, "IncludePublic", newJBool(IncludePublic))
  add(formData_613507, "Marker", newJString(Marker))
  add(formData_613507, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_613507, "IncludeShared", newJBool(IncludeShared))
  add(query_613506, "Action", newJString(Action))
  if Filters != nil:
    formData_613507.add "Filters", Filters
  add(query_613506, "Version", newJString(Version))
  add(formData_613507, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_613505.call(nil, query_613506, nil, formData_613507, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_613484(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_613485, base: "/",
    url: url_PostDescribeDBClusterSnapshots_613486,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_613461 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBClusterSnapshots_613463(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_613462(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613464 = query.getOrDefault("Marker")
  valid_613464 = validateParameter(valid_613464, JString, required = false,
                                 default = nil)
  if valid_613464 != nil:
    section.add "Marker", valid_613464
  var valid_613465 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_613465 = validateParameter(valid_613465, JString, required = false,
                                 default = nil)
  if valid_613465 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_613465
  var valid_613466 = query.getOrDefault("DBClusterIdentifier")
  valid_613466 = validateParameter(valid_613466, JString, required = false,
                                 default = nil)
  if valid_613466 != nil:
    section.add "DBClusterIdentifier", valid_613466
  var valid_613467 = query.getOrDefault("SnapshotType")
  valid_613467 = validateParameter(valid_613467, JString, required = false,
                                 default = nil)
  if valid_613467 != nil:
    section.add "SnapshotType", valid_613467
  var valid_613468 = query.getOrDefault("IncludePublic")
  valid_613468 = validateParameter(valid_613468, JBool, required = false, default = nil)
  if valid_613468 != nil:
    section.add "IncludePublic", valid_613468
  var valid_613469 = query.getOrDefault("Action")
  valid_613469 = validateParameter(valid_613469, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_613469 != nil:
    section.add "Action", valid_613469
  var valid_613470 = query.getOrDefault("IncludeShared")
  valid_613470 = validateParameter(valid_613470, JBool, required = false, default = nil)
  if valid_613470 != nil:
    section.add "IncludeShared", valid_613470
  var valid_613471 = query.getOrDefault("Version")
  valid_613471 = validateParameter(valid_613471, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613471 != nil:
    section.add "Version", valid_613471
  var valid_613472 = query.getOrDefault("Filters")
  valid_613472 = validateParameter(valid_613472, JArray, required = false,
                                 default = nil)
  if valid_613472 != nil:
    section.add "Filters", valid_613472
  var valid_613473 = query.getOrDefault("MaxRecords")
  valid_613473 = validateParameter(valid_613473, JInt, required = false, default = nil)
  if valid_613473 != nil:
    section.add "MaxRecords", valid_613473
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613474 = header.getOrDefault("X-Amz-Signature")
  valid_613474 = validateParameter(valid_613474, JString, required = false,
                                 default = nil)
  if valid_613474 != nil:
    section.add "X-Amz-Signature", valid_613474
  var valid_613475 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613475 = validateParameter(valid_613475, JString, required = false,
                                 default = nil)
  if valid_613475 != nil:
    section.add "X-Amz-Content-Sha256", valid_613475
  var valid_613476 = header.getOrDefault("X-Amz-Date")
  valid_613476 = validateParameter(valid_613476, JString, required = false,
                                 default = nil)
  if valid_613476 != nil:
    section.add "X-Amz-Date", valid_613476
  var valid_613477 = header.getOrDefault("X-Amz-Credential")
  valid_613477 = validateParameter(valid_613477, JString, required = false,
                                 default = nil)
  if valid_613477 != nil:
    section.add "X-Amz-Credential", valid_613477
  var valid_613478 = header.getOrDefault("X-Amz-Security-Token")
  valid_613478 = validateParameter(valid_613478, JString, required = false,
                                 default = nil)
  if valid_613478 != nil:
    section.add "X-Amz-Security-Token", valid_613478
  var valid_613479 = header.getOrDefault("X-Amz-Algorithm")
  valid_613479 = validateParameter(valid_613479, JString, required = false,
                                 default = nil)
  if valid_613479 != nil:
    section.add "X-Amz-Algorithm", valid_613479
  var valid_613480 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613480 = validateParameter(valid_613480, JString, required = false,
                                 default = nil)
  if valid_613480 != nil:
    section.add "X-Amz-SignedHeaders", valid_613480
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613481: Call_GetDescribeDBClusterSnapshots_613461; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613481.validator(path, query, header, formData, body)
  let scheme = call_613481.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613481.url(scheme.get, call_613481.host, call_613481.base,
                         call_613481.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613481, url, valid)

proc call*(call_613482: Call_GetDescribeDBClusterSnapshots_613461;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          DBClusterIdentifier: string = ""; SnapshotType: string = "";
          IncludePublic: bool = false;
          Action: string = "DescribeDBClusterSnapshots";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613483 = newJObject()
  add(query_613483, "Marker", newJString(Marker))
  add(query_613483, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_613483, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613483, "SnapshotType", newJString(SnapshotType))
  add(query_613483, "IncludePublic", newJBool(IncludePublic))
  add(query_613483, "Action", newJString(Action))
  add(query_613483, "IncludeShared", newJBool(IncludeShared))
  add(query_613483, "Version", newJString(Version))
  if Filters != nil:
    query_613483.add "Filters", Filters
  add(query_613483, "MaxRecords", newJInt(MaxRecords))
  result = call_613482.call(nil, query_613483, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_613461(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_613462, base: "/",
    url: url_GetDescribeDBClusterSnapshots_613463,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_613528 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBClusters_613530(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusters_613529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613531 = query.getOrDefault("Action")
  valid_613531 = validateParameter(valid_613531, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_613531 != nil:
    section.add "Action", valid_613531
  var valid_613532 = query.getOrDefault("Version")
  valid_613532 = validateParameter(valid_613532, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613532 != nil:
    section.add "Version", valid_613532
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613533 = header.getOrDefault("X-Amz-Signature")
  valid_613533 = validateParameter(valid_613533, JString, required = false,
                                 default = nil)
  if valid_613533 != nil:
    section.add "X-Amz-Signature", valid_613533
  var valid_613534 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613534 = validateParameter(valid_613534, JString, required = false,
                                 default = nil)
  if valid_613534 != nil:
    section.add "X-Amz-Content-Sha256", valid_613534
  var valid_613535 = header.getOrDefault("X-Amz-Date")
  valid_613535 = validateParameter(valid_613535, JString, required = false,
                                 default = nil)
  if valid_613535 != nil:
    section.add "X-Amz-Date", valid_613535
  var valid_613536 = header.getOrDefault("X-Amz-Credential")
  valid_613536 = validateParameter(valid_613536, JString, required = false,
                                 default = nil)
  if valid_613536 != nil:
    section.add "X-Amz-Credential", valid_613536
  var valid_613537 = header.getOrDefault("X-Amz-Security-Token")
  valid_613537 = validateParameter(valid_613537, JString, required = false,
                                 default = nil)
  if valid_613537 != nil:
    section.add "X-Amz-Security-Token", valid_613537
  var valid_613538 = header.getOrDefault("X-Amz-Algorithm")
  valid_613538 = validateParameter(valid_613538, JString, required = false,
                                 default = nil)
  if valid_613538 != nil:
    section.add "X-Amz-Algorithm", valid_613538
  var valid_613539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613539 = validateParameter(valid_613539, JString, required = false,
                                 default = nil)
  if valid_613539 != nil:
    section.add "X-Amz-SignedHeaders", valid_613539
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_613540 = formData.getOrDefault("MaxRecords")
  valid_613540 = validateParameter(valid_613540, JInt, required = false, default = nil)
  if valid_613540 != nil:
    section.add "MaxRecords", valid_613540
  var valid_613541 = formData.getOrDefault("Marker")
  valid_613541 = validateParameter(valid_613541, JString, required = false,
                                 default = nil)
  if valid_613541 != nil:
    section.add "Marker", valid_613541
  var valid_613542 = formData.getOrDefault("IncludeShared")
  valid_613542 = validateParameter(valid_613542, JBool, required = false, default = nil)
  if valid_613542 != nil:
    section.add "IncludeShared", valid_613542
  var valid_613543 = formData.getOrDefault("Filters")
  valid_613543 = validateParameter(valid_613543, JArray, required = false,
                                 default = nil)
  if valid_613543 != nil:
    section.add "Filters", valid_613543
  var valid_613544 = formData.getOrDefault("DBClusterIdentifier")
  valid_613544 = validateParameter(valid_613544, JString, required = false,
                                 default = nil)
  if valid_613544 != nil:
    section.add "DBClusterIdentifier", valid_613544
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613545: Call_PostDescribeDBClusters_613528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_613545.validator(path, query, header, formData, body)
  let scheme = call_613545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613545.url(scheme.get, call_613545.host, call_613545.base,
                         call_613545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613545, url, valid)

proc call*(call_613546: Call_PostDescribeDBClusters_613528; MaxRecords: int = 0;
          Marker: string = ""; IncludeShared: bool = false;
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_613547 = newJObject()
  var formData_613548 = newJObject()
  add(formData_613548, "MaxRecords", newJInt(MaxRecords))
  add(formData_613548, "Marker", newJString(Marker))
  add(formData_613548, "IncludeShared", newJBool(IncludeShared))
  add(query_613547, "Action", newJString(Action))
  if Filters != nil:
    formData_613548.add "Filters", Filters
  add(query_613547, "Version", newJString(Version))
  add(formData_613548, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_613546.call(nil, query_613547, nil, formData_613548, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_613528(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_613529, base: "/",
    url: url_PostDescribeDBClusters_613530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_613508 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBClusters_613510(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusters_613509(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613511 = query.getOrDefault("Marker")
  valid_613511 = validateParameter(valid_613511, JString, required = false,
                                 default = nil)
  if valid_613511 != nil:
    section.add "Marker", valid_613511
  var valid_613512 = query.getOrDefault("DBClusterIdentifier")
  valid_613512 = validateParameter(valid_613512, JString, required = false,
                                 default = nil)
  if valid_613512 != nil:
    section.add "DBClusterIdentifier", valid_613512
  var valid_613513 = query.getOrDefault("Action")
  valid_613513 = validateParameter(valid_613513, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_613513 != nil:
    section.add "Action", valid_613513
  var valid_613514 = query.getOrDefault("IncludeShared")
  valid_613514 = validateParameter(valid_613514, JBool, required = false, default = nil)
  if valid_613514 != nil:
    section.add "IncludeShared", valid_613514
  var valid_613515 = query.getOrDefault("Version")
  valid_613515 = validateParameter(valid_613515, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613515 != nil:
    section.add "Version", valid_613515
  var valid_613516 = query.getOrDefault("Filters")
  valid_613516 = validateParameter(valid_613516, JArray, required = false,
                                 default = nil)
  if valid_613516 != nil:
    section.add "Filters", valid_613516
  var valid_613517 = query.getOrDefault("MaxRecords")
  valid_613517 = validateParameter(valid_613517, JInt, required = false, default = nil)
  if valid_613517 != nil:
    section.add "MaxRecords", valid_613517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613518 = header.getOrDefault("X-Amz-Signature")
  valid_613518 = validateParameter(valid_613518, JString, required = false,
                                 default = nil)
  if valid_613518 != nil:
    section.add "X-Amz-Signature", valid_613518
  var valid_613519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613519 = validateParameter(valid_613519, JString, required = false,
                                 default = nil)
  if valid_613519 != nil:
    section.add "X-Amz-Content-Sha256", valid_613519
  var valid_613520 = header.getOrDefault("X-Amz-Date")
  valid_613520 = validateParameter(valid_613520, JString, required = false,
                                 default = nil)
  if valid_613520 != nil:
    section.add "X-Amz-Date", valid_613520
  var valid_613521 = header.getOrDefault("X-Amz-Credential")
  valid_613521 = validateParameter(valid_613521, JString, required = false,
                                 default = nil)
  if valid_613521 != nil:
    section.add "X-Amz-Credential", valid_613521
  var valid_613522 = header.getOrDefault("X-Amz-Security-Token")
  valid_613522 = validateParameter(valid_613522, JString, required = false,
                                 default = nil)
  if valid_613522 != nil:
    section.add "X-Amz-Security-Token", valid_613522
  var valid_613523 = header.getOrDefault("X-Amz-Algorithm")
  valid_613523 = validateParameter(valid_613523, JString, required = false,
                                 default = nil)
  if valid_613523 != nil:
    section.add "X-Amz-Algorithm", valid_613523
  var valid_613524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613524 = validateParameter(valid_613524, JString, required = false,
                                 default = nil)
  if valid_613524 != nil:
    section.add "X-Amz-SignedHeaders", valid_613524
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613525: Call_GetDescribeDBClusters_613508; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_613525.validator(path, query, header, formData, body)
  let scheme = call_613525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613525.url(scheme.get, call_613525.host, call_613525.base,
                         call_613525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613525, url, valid)

proc call*(call_613526: Call_GetDescribeDBClusters_613508; Marker: string = "";
          DBClusterIdentifier: string = ""; Action: string = "DescribeDBClusters";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613527 = newJObject()
  add(query_613527, "Marker", newJString(Marker))
  add(query_613527, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613527, "Action", newJString(Action))
  add(query_613527, "IncludeShared", newJBool(IncludeShared))
  add(query_613527, "Version", newJString(Version))
  if Filters != nil:
    query_613527.add "Filters", Filters
  add(query_613527, "MaxRecords", newJInt(MaxRecords))
  result = call_613526.call(nil, query_613527, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_613508(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_613509, base: "/",
    url: url_GetDescribeDBClusters_613510, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_613574 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBEngineVersions_613576(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBEngineVersions_613575(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613577 = query.getOrDefault("Action")
  valid_613577 = validateParameter(valid_613577, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_613577 != nil:
    section.add "Action", valid_613577
  var valid_613578 = query.getOrDefault("Version")
  valid_613578 = validateParameter(valid_613578, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613578 != nil:
    section.add "Version", valid_613578
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613579 = header.getOrDefault("X-Amz-Signature")
  valid_613579 = validateParameter(valid_613579, JString, required = false,
                                 default = nil)
  if valid_613579 != nil:
    section.add "X-Amz-Signature", valid_613579
  var valid_613580 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613580 = validateParameter(valid_613580, JString, required = false,
                                 default = nil)
  if valid_613580 != nil:
    section.add "X-Amz-Content-Sha256", valid_613580
  var valid_613581 = header.getOrDefault("X-Amz-Date")
  valid_613581 = validateParameter(valid_613581, JString, required = false,
                                 default = nil)
  if valid_613581 != nil:
    section.add "X-Amz-Date", valid_613581
  var valid_613582 = header.getOrDefault("X-Amz-Credential")
  valid_613582 = validateParameter(valid_613582, JString, required = false,
                                 default = nil)
  if valid_613582 != nil:
    section.add "X-Amz-Credential", valid_613582
  var valid_613583 = header.getOrDefault("X-Amz-Security-Token")
  valid_613583 = validateParameter(valid_613583, JString, required = false,
                                 default = nil)
  if valid_613583 != nil:
    section.add "X-Amz-Security-Token", valid_613583
  var valid_613584 = header.getOrDefault("X-Amz-Algorithm")
  valid_613584 = validateParameter(valid_613584, JString, required = false,
                                 default = nil)
  if valid_613584 != nil:
    section.add "X-Amz-Algorithm", valid_613584
  var valid_613585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613585 = validateParameter(valid_613585, JString, required = false,
                                 default = nil)
  if valid_613585 != nil:
    section.add "X-Amz-SignedHeaders", valid_613585
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  section = newJObject()
  var valid_613586 = formData.getOrDefault("DefaultOnly")
  valid_613586 = validateParameter(valid_613586, JBool, required = false, default = nil)
  if valid_613586 != nil:
    section.add "DefaultOnly", valid_613586
  var valid_613587 = formData.getOrDefault("MaxRecords")
  valid_613587 = validateParameter(valid_613587, JInt, required = false, default = nil)
  if valid_613587 != nil:
    section.add "MaxRecords", valid_613587
  var valid_613588 = formData.getOrDefault("EngineVersion")
  valid_613588 = validateParameter(valid_613588, JString, required = false,
                                 default = nil)
  if valid_613588 != nil:
    section.add "EngineVersion", valid_613588
  var valid_613589 = formData.getOrDefault("Marker")
  valid_613589 = validateParameter(valid_613589, JString, required = false,
                                 default = nil)
  if valid_613589 != nil:
    section.add "Marker", valid_613589
  var valid_613590 = formData.getOrDefault("IncludeAll")
  valid_613590 = validateParameter(valid_613590, JBool, required = false, default = nil)
  if valid_613590 != nil:
    section.add "IncludeAll", valid_613590
  var valid_613591 = formData.getOrDefault("Engine")
  valid_613591 = validateParameter(valid_613591, JString, required = false,
                                 default = nil)
  if valid_613591 != nil:
    section.add "Engine", valid_613591
  var valid_613592 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_613592 = validateParameter(valid_613592, JBool, required = false, default = nil)
  if valid_613592 != nil:
    section.add "ListSupportedCharacterSets", valid_613592
  var valid_613593 = formData.getOrDefault("ListSupportedTimezones")
  valid_613593 = validateParameter(valid_613593, JBool, required = false, default = nil)
  if valid_613593 != nil:
    section.add "ListSupportedTimezones", valid_613593
  var valid_613594 = formData.getOrDefault("Filters")
  valid_613594 = validateParameter(valid_613594, JArray, required = false,
                                 default = nil)
  if valid_613594 != nil:
    section.add "Filters", valid_613594
  var valid_613595 = formData.getOrDefault("DBParameterGroupFamily")
  valid_613595 = validateParameter(valid_613595, JString, required = false,
                                 default = nil)
  if valid_613595 != nil:
    section.add "DBParameterGroupFamily", valid_613595
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613596: Call_PostDescribeDBEngineVersions_613574; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_613596.validator(path, query, header, formData, body)
  let scheme = call_613596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613596.url(scheme.get, call_613596.host, call_613596.base,
                         call_613596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613596, url, valid)

proc call*(call_613597: Call_PostDescribeDBEngineVersions_613574;
          DefaultOnly: bool = false; MaxRecords: int = 0; EngineVersion: string = "";
          Marker: string = ""; IncludeAll: bool = false; Engine: string = "";
          ListSupportedCharacterSets: bool = false;
          Action: string = "DescribeDBEngineVersions";
          ListSupportedTimezones: bool = false; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBParameterGroupFamily: string = ""): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Action: string (required)
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  var query_613598 = newJObject()
  var formData_613599 = newJObject()
  add(formData_613599, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_613599, "MaxRecords", newJInt(MaxRecords))
  add(formData_613599, "EngineVersion", newJString(EngineVersion))
  add(formData_613599, "Marker", newJString(Marker))
  add(formData_613599, "IncludeAll", newJBool(IncludeAll))
  add(formData_613599, "Engine", newJString(Engine))
  add(formData_613599, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_613598, "Action", newJString(Action))
  add(formData_613599, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  if Filters != nil:
    formData_613599.add "Filters", Filters
  add(query_613598, "Version", newJString(Version))
  add(formData_613599, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_613597.call(nil, query_613598, nil, formData_613599, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_613574(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_613575, base: "/",
    url: url_PostDescribeDBEngineVersions_613576,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_613549 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBEngineVersions_613551(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBEngineVersions_613550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: JString (required)
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_613552 = query.getOrDefault("Marker")
  valid_613552 = validateParameter(valid_613552, JString, required = false,
                                 default = nil)
  if valid_613552 != nil:
    section.add "Marker", valid_613552
  var valid_613553 = query.getOrDefault("ListSupportedTimezones")
  valid_613553 = validateParameter(valid_613553, JBool, required = false, default = nil)
  if valid_613553 != nil:
    section.add "ListSupportedTimezones", valid_613553
  var valid_613554 = query.getOrDefault("DBParameterGroupFamily")
  valid_613554 = validateParameter(valid_613554, JString, required = false,
                                 default = nil)
  if valid_613554 != nil:
    section.add "DBParameterGroupFamily", valid_613554
  var valid_613555 = query.getOrDefault("Engine")
  valid_613555 = validateParameter(valid_613555, JString, required = false,
                                 default = nil)
  if valid_613555 != nil:
    section.add "Engine", valid_613555
  var valid_613556 = query.getOrDefault("IncludeAll")
  valid_613556 = validateParameter(valid_613556, JBool, required = false, default = nil)
  if valid_613556 != nil:
    section.add "IncludeAll", valid_613556
  var valid_613557 = query.getOrDefault("EngineVersion")
  valid_613557 = validateParameter(valid_613557, JString, required = false,
                                 default = nil)
  if valid_613557 != nil:
    section.add "EngineVersion", valid_613557
  var valid_613558 = query.getOrDefault("Action")
  valid_613558 = validateParameter(valid_613558, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_613558 != nil:
    section.add "Action", valid_613558
  var valid_613559 = query.getOrDefault("ListSupportedCharacterSets")
  valid_613559 = validateParameter(valid_613559, JBool, required = false, default = nil)
  if valid_613559 != nil:
    section.add "ListSupportedCharacterSets", valid_613559
  var valid_613560 = query.getOrDefault("Version")
  valid_613560 = validateParameter(valid_613560, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613560 != nil:
    section.add "Version", valid_613560
  var valid_613561 = query.getOrDefault("Filters")
  valid_613561 = validateParameter(valid_613561, JArray, required = false,
                                 default = nil)
  if valid_613561 != nil:
    section.add "Filters", valid_613561
  var valid_613562 = query.getOrDefault("MaxRecords")
  valid_613562 = validateParameter(valid_613562, JInt, required = false, default = nil)
  if valid_613562 != nil:
    section.add "MaxRecords", valid_613562
  var valid_613563 = query.getOrDefault("DefaultOnly")
  valid_613563 = validateParameter(valid_613563, JBool, required = false, default = nil)
  if valid_613563 != nil:
    section.add "DefaultOnly", valid_613563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613564 = header.getOrDefault("X-Amz-Signature")
  valid_613564 = validateParameter(valid_613564, JString, required = false,
                                 default = nil)
  if valid_613564 != nil:
    section.add "X-Amz-Signature", valid_613564
  var valid_613565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613565 = validateParameter(valid_613565, JString, required = false,
                                 default = nil)
  if valid_613565 != nil:
    section.add "X-Amz-Content-Sha256", valid_613565
  var valid_613566 = header.getOrDefault("X-Amz-Date")
  valid_613566 = validateParameter(valid_613566, JString, required = false,
                                 default = nil)
  if valid_613566 != nil:
    section.add "X-Amz-Date", valid_613566
  var valid_613567 = header.getOrDefault("X-Amz-Credential")
  valid_613567 = validateParameter(valid_613567, JString, required = false,
                                 default = nil)
  if valid_613567 != nil:
    section.add "X-Amz-Credential", valid_613567
  var valid_613568 = header.getOrDefault("X-Amz-Security-Token")
  valid_613568 = validateParameter(valid_613568, JString, required = false,
                                 default = nil)
  if valid_613568 != nil:
    section.add "X-Amz-Security-Token", valid_613568
  var valid_613569 = header.getOrDefault("X-Amz-Algorithm")
  valid_613569 = validateParameter(valid_613569, JString, required = false,
                                 default = nil)
  if valid_613569 != nil:
    section.add "X-Amz-Algorithm", valid_613569
  var valid_613570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613570 = validateParameter(valid_613570, JString, required = false,
                                 default = nil)
  if valid_613570 != nil:
    section.add "X-Amz-SignedHeaders", valid_613570
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613571: Call_GetDescribeDBEngineVersions_613549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_613571.validator(path, query, header, formData, body)
  let scheme = call_613571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613571.url(scheme.get, call_613571.host, call_613571.base,
                         call_613571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613571, url, valid)

proc call*(call_613572: Call_GetDescribeDBEngineVersions_613549;
          Marker: string = ""; ListSupportedTimezones: bool = false;
          DBParameterGroupFamily: string = ""; Engine: string = "";
          IncludeAll: bool = false; EngineVersion: string = "";
          Action: string = "DescribeDBEngineVersions";
          ListSupportedCharacterSets: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: string
  ##         : The database engine to return.
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: string (required)
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  var query_613573 = newJObject()
  add(query_613573, "Marker", newJString(Marker))
  add(query_613573, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_613573, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_613573, "Engine", newJString(Engine))
  add(query_613573, "IncludeAll", newJBool(IncludeAll))
  add(query_613573, "EngineVersion", newJString(EngineVersion))
  add(query_613573, "Action", newJString(Action))
  add(query_613573, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_613573, "Version", newJString(Version))
  if Filters != nil:
    query_613573.add "Filters", Filters
  add(query_613573, "MaxRecords", newJInt(MaxRecords))
  add(query_613573, "DefaultOnly", newJBool(DefaultOnly))
  result = call_613572.call(nil, query_613573, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_613549(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_613550, base: "/",
    url: url_GetDescribeDBEngineVersions_613551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstanceAutomatedBackups_613620 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBInstanceAutomatedBackups_613622(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstanceAutomatedBackups_613621(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613623 = query.getOrDefault("Action")
  valid_613623 = validateParameter(valid_613623, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_613623 != nil:
    section.add "Action", valid_613623
  var valid_613624 = query.getOrDefault("Version")
  valid_613624 = validateParameter(valid_613624, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613624 != nil:
    section.add "Version", valid_613624
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613625 = header.getOrDefault("X-Amz-Signature")
  valid_613625 = validateParameter(valid_613625, JString, required = false,
                                 default = nil)
  if valid_613625 != nil:
    section.add "X-Amz-Signature", valid_613625
  var valid_613626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613626 = validateParameter(valid_613626, JString, required = false,
                                 default = nil)
  if valid_613626 != nil:
    section.add "X-Amz-Content-Sha256", valid_613626
  var valid_613627 = header.getOrDefault("X-Amz-Date")
  valid_613627 = validateParameter(valid_613627, JString, required = false,
                                 default = nil)
  if valid_613627 != nil:
    section.add "X-Amz-Date", valid_613627
  var valid_613628 = header.getOrDefault("X-Amz-Credential")
  valid_613628 = validateParameter(valid_613628, JString, required = false,
                                 default = nil)
  if valid_613628 != nil:
    section.add "X-Amz-Credential", valid_613628
  var valid_613629 = header.getOrDefault("X-Amz-Security-Token")
  valid_613629 = validateParameter(valid_613629, JString, required = false,
                                 default = nil)
  if valid_613629 != nil:
    section.add "X-Amz-Security-Token", valid_613629
  var valid_613630 = header.getOrDefault("X-Amz-Algorithm")
  valid_613630 = validateParameter(valid_613630, JString, required = false,
                                 default = nil)
  if valid_613630 != nil:
    section.add "X-Amz-Algorithm", valid_613630
  var valid_613631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613631 = validateParameter(valid_613631, JString, required = false,
                                 default = nil)
  if valid_613631 != nil:
    section.add "X-Amz-SignedHeaders", valid_613631
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  section = newJObject()
  var valid_613632 = formData.getOrDefault("MaxRecords")
  valid_613632 = validateParameter(valid_613632, JInt, required = false, default = nil)
  if valid_613632 != nil:
    section.add "MaxRecords", valid_613632
  var valid_613633 = formData.getOrDefault("Marker")
  valid_613633 = validateParameter(valid_613633, JString, required = false,
                                 default = nil)
  if valid_613633 != nil:
    section.add "Marker", valid_613633
  var valid_613634 = formData.getOrDefault("DbiResourceId")
  valid_613634 = validateParameter(valid_613634, JString, required = false,
                                 default = nil)
  if valid_613634 != nil:
    section.add "DbiResourceId", valid_613634
  var valid_613635 = formData.getOrDefault("DBInstanceIdentifier")
  valid_613635 = validateParameter(valid_613635, JString, required = false,
                                 default = nil)
  if valid_613635 != nil:
    section.add "DBInstanceIdentifier", valid_613635
  var valid_613636 = formData.getOrDefault("Filters")
  valid_613636 = validateParameter(valid_613636, JArray, required = false,
                                 default = nil)
  if valid_613636 != nil:
    section.add "Filters", valid_613636
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613637: Call_PostDescribeDBInstanceAutomatedBackups_613620;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_613637.validator(path, query, header, formData, body)
  let scheme = call_613637.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613637.url(scheme.get, call_613637.host, call_613637.base,
                         call_613637.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613637, url, valid)

proc call*(call_613638: Call_PostDescribeDBInstanceAutomatedBackups_613620;
          MaxRecords: int = 0; Marker: string = ""; DbiResourceId: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   Version: string (required)
  var query_613639 = newJObject()
  var formData_613640 = newJObject()
  add(formData_613640, "MaxRecords", newJInt(MaxRecords))
  add(formData_613640, "Marker", newJString(Marker))
  add(formData_613640, "DbiResourceId", newJString(DbiResourceId))
  add(formData_613640, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_613639, "Action", newJString(Action))
  if Filters != nil:
    formData_613640.add "Filters", Filters
  add(query_613639, "Version", newJString(Version))
  result = call_613638.call(nil, query_613639, nil, formData_613640, nil)

var postDescribeDBInstanceAutomatedBackups* = Call_PostDescribeDBInstanceAutomatedBackups_613620(
    name: "postDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_PostDescribeDBInstanceAutomatedBackups_613621, base: "/",
    url: url_PostDescribeDBInstanceAutomatedBackups_613622,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstanceAutomatedBackups_613600 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBInstanceAutomatedBackups_613602(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstanceAutomatedBackups_613601(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  section = newJObject()
  var valid_613603 = query.getOrDefault("DbiResourceId")
  valid_613603 = validateParameter(valid_613603, JString, required = false,
                                 default = nil)
  if valid_613603 != nil:
    section.add "DbiResourceId", valid_613603
  var valid_613604 = query.getOrDefault("Marker")
  valid_613604 = validateParameter(valid_613604, JString, required = false,
                                 default = nil)
  if valid_613604 != nil:
    section.add "Marker", valid_613604
  var valid_613605 = query.getOrDefault("DBInstanceIdentifier")
  valid_613605 = validateParameter(valid_613605, JString, required = false,
                                 default = nil)
  if valid_613605 != nil:
    section.add "DBInstanceIdentifier", valid_613605
  var valid_613606 = query.getOrDefault("Action")
  valid_613606 = validateParameter(valid_613606, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_613606 != nil:
    section.add "Action", valid_613606
  var valid_613607 = query.getOrDefault("Version")
  valid_613607 = validateParameter(valid_613607, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613607 != nil:
    section.add "Version", valid_613607
  var valid_613608 = query.getOrDefault("Filters")
  valid_613608 = validateParameter(valid_613608, JArray, required = false,
                                 default = nil)
  if valid_613608 != nil:
    section.add "Filters", valid_613608
  var valid_613609 = query.getOrDefault("MaxRecords")
  valid_613609 = validateParameter(valid_613609, JInt, required = false, default = nil)
  if valid_613609 != nil:
    section.add "MaxRecords", valid_613609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613610 = header.getOrDefault("X-Amz-Signature")
  valid_613610 = validateParameter(valid_613610, JString, required = false,
                                 default = nil)
  if valid_613610 != nil:
    section.add "X-Amz-Signature", valid_613610
  var valid_613611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613611 = validateParameter(valid_613611, JString, required = false,
                                 default = nil)
  if valid_613611 != nil:
    section.add "X-Amz-Content-Sha256", valid_613611
  var valid_613612 = header.getOrDefault("X-Amz-Date")
  valid_613612 = validateParameter(valid_613612, JString, required = false,
                                 default = nil)
  if valid_613612 != nil:
    section.add "X-Amz-Date", valid_613612
  var valid_613613 = header.getOrDefault("X-Amz-Credential")
  valid_613613 = validateParameter(valid_613613, JString, required = false,
                                 default = nil)
  if valid_613613 != nil:
    section.add "X-Amz-Credential", valid_613613
  var valid_613614 = header.getOrDefault("X-Amz-Security-Token")
  valid_613614 = validateParameter(valid_613614, JString, required = false,
                                 default = nil)
  if valid_613614 != nil:
    section.add "X-Amz-Security-Token", valid_613614
  var valid_613615 = header.getOrDefault("X-Amz-Algorithm")
  valid_613615 = validateParameter(valid_613615, JString, required = false,
                                 default = nil)
  if valid_613615 != nil:
    section.add "X-Amz-Algorithm", valid_613615
  var valid_613616 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613616 = validateParameter(valid_613616, JString, required = false,
                                 default = nil)
  if valid_613616 != nil:
    section.add "X-Amz-SignedHeaders", valid_613616
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613617: Call_GetDescribeDBInstanceAutomatedBackups_613600;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_613617.validator(path, query, header, formData, body)
  let scheme = call_613617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613617.url(scheme.get, call_613617.host, call_613617.base,
                         call_613617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613617, url, valid)

proc call*(call_613618: Call_GetDescribeDBInstanceAutomatedBackups_613600;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  var query_613619 = newJObject()
  add(query_613619, "DbiResourceId", newJString(DbiResourceId))
  add(query_613619, "Marker", newJString(Marker))
  add(query_613619, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_613619, "Action", newJString(Action))
  add(query_613619, "Version", newJString(Version))
  if Filters != nil:
    query_613619.add "Filters", Filters
  add(query_613619, "MaxRecords", newJInt(MaxRecords))
  result = call_613618.call(nil, query_613619, nil, nil, nil)

var getDescribeDBInstanceAutomatedBackups* = Call_GetDescribeDBInstanceAutomatedBackups_613600(
    name: "getDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_GetDescribeDBInstanceAutomatedBackups_613601, base: "/",
    url: url_GetDescribeDBInstanceAutomatedBackups_613602,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_613660 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBInstances_613662(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstances_613661(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613663 = query.getOrDefault("Action")
  valid_613663 = validateParameter(valid_613663, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_613663 != nil:
    section.add "Action", valid_613663
  var valid_613664 = query.getOrDefault("Version")
  valid_613664 = validateParameter(valid_613664, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613664 != nil:
    section.add "Version", valid_613664
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613665 = header.getOrDefault("X-Amz-Signature")
  valid_613665 = validateParameter(valid_613665, JString, required = false,
                                 default = nil)
  if valid_613665 != nil:
    section.add "X-Amz-Signature", valid_613665
  var valid_613666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613666 = validateParameter(valid_613666, JString, required = false,
                                 default = nil)
  if valid_613666 != nil:
    section.add "X-Amz-Content-Sha256", valid_613666
  var valid_613667 = header.getOrDefault("X-Amz-Date")
  valid_613667 = validateParameter(valid_613667, JString, required = false,
                                 default = nil)
  if valid_613667 != nil:
    section.add "X-Amz-Date", valid_613667
  var valid_613668 = header.getOrDefault("X-Amz-Credential")
  valid_613668 = validateParameter(valid_613668, JString, required = false,
                                 default = nil)
  if valid_613668 != nil:
    section.add "X-Amz-Credential", valid_613668
  var valid_613669 = header.getOrDefault("X-Amz-Security-Token")
  valid_613669 = validateParameter(valid_613669, JString, required = false,
                                 default = nil)
  if valid_613669 != nil:
    section.add "X-Amz-Security-Token", valid_613669
  var valid_613670 = header.getOrDefault("X-Amz-Algorithm")
  valid_613670 = validateParameter(valid_613670, JString, required = false,
                                 default = nil)
  if valid_613670 != nil:
    section.add "X-Amz-Algorithm", valid_613670
  var valid_613671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613671 = validateParameter(valid_613671, JString, required = false,
                                 default = nil)
  if valid_613671 != nil:
    section.add "X-Amz-SignedHeaders", valid_613671
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  section = newJObject()
  var valid_613672 = formData.getOrDefault("MaxRecords")
  valid_613672 = validateParameter(valid_613672, JInt, required = false, default = nil)
  if valid_613672 != nil:
    section.add "MaxRecords", valid_613672
  var valid_613673 = formData.getOrDefault("Marker")
  valid_613673 = validateParameter(valid_613673, JString, required = false,
                                 default = nil)
  if valid_613673 != nil:
    section.add "Marker", valid_613673
  var valid_613674 = formData.getOrDefault("DBInstanceIdentifier")
  valid_613674 = validateParameter(valid_613674, JString, required = false,
                                 default = nil)
  if valid_613674 != nil:
    section.add "DBInstanceIdentifier", valid_613674
  var valid_613675 = formData.getOrDefault("Filters")
  valid_613675 = validateParameter(valid_613675, JArray, required = false,
                                 default = nil)
  if valid_613675 != nil:
    section.add "Filters", valid_613675
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613676: Call_PostDescribeDBInstances_613660; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_613676.validator(path, query, header, formData, body)
  let scheme = call_613676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613676.url(scheme.get, call_613676.host, call_613676.base,
                         call_613676.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613676, url, valid)

proc call*(call_613677: Call_PostDescribeDBInstances_613660; MaxRecords: int = 0;
          Marker: string = ""; DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_613678 = newJObject()
  var formData_613679 = newJObject()
  add(formData_613679, "MaxRecords", newJInt(MaxRecords))
  add(formData_613679, "Marker", newJString(Marker))
  add(formData_613679, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_613678, "Action", newJString(Action))
  if Filters != nil:
    formData_613679.add "Filters", Filters
  add(query_613678, "Version", newJString(Version))
  result = call_613677.call(nil, query_613678, nil, formData_613679, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_613660(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_613661, base: "/",
    url: url_PostDescribeDBInstances_613662, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_613641 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBInstances_613643(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstances_613642(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613644 = query.getOrDefault("Marker")
  valid_613644 = validateParameter(valid_613644, JString, required = false,
                                 default = nil)
  if valid_613644 != nil:
    section.add "Marker", valid_613644
  var valid_613645 = query.getOrDefault("DBInstanceIdentifier")
  valid_613645 = validateParameter(valid_613645, JString, required = false,
                                 default = nil)
  if valid_613645 != nil:
    section.add "DBInstanceIdentifier", valid_613645
  var valid_613646 = query.getOrDefault("Action")
  valid_613646 = validateParameter(valid_613646, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_613646 != nil:
    section.add "Action", valid_613646
  var valid_613647 = query.getOrDefault("Version")
  valid_613647 = validateParameter(valid_613647, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613647 != nil:
    section.add "Version", valid_613647
  var valid_613648 = query.getOrDefault("Filters")
  valid_613648 = validateParameter(valid_613648, JArray, required = false,
                                 default = nil)
  if valid_613648 != nil:
    section.add "Filters", valid_613648
  var valid_613649 = query.getOrDefault("MaxRecords")
  valid_613649 = validateParameter(valid_613649, JInt, required = false, default = nil)
  if valid_613649 != nil:
    section.add "MaxRecords", valid_613649
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613650 = header.getOrDefault("X-Amz-Signature")
  valid_613650 = validateParameter(valid_613650, JString, required = false,
                                 default = nil)
  if valid_613650 != nil:
    section.add "X-Amz-Signature", valid_613650
  var valid_613651 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613651 = validateParameter(valid_613651, JString, required = false,
                                 default = nil)
  if valid_613651 != nil:
    section.add "X-Amz-Content-Sha256", valid_613651
  var valid_613652 = header.getOrDefault("X-Amz-Date")
  valid_613652 = validateParameter(valid_613652, JString, required = false,
                                 default = nil)
  if valid_613652 != nil:
    section.add "X-Amz-Date", valid_613652
  var valid_613653 = header.getOrDefault("X-Amz-Credential")
  valid_613653 = validateParameter(valid_613653, JString, required = false,
                                 default = nil)
  if valid_613653 != nil:
    section.add "X-Amz-Credential", valid_613653
  var valid_613654 = header.getOrDefault("X-Amz-Security-Token")
  valid_613654 = validateParameter(valid_613654, JString, required = false,
                                 default = nil)
  if valid_613654 != nil:
    section.add "X-Amz-Security-Token", valid_613654
  var valid_613655 = header.getOrDefault("X-Amz-Algorithm")
  valid_613655 = validateParameter(valid_613655, JString, required = false,
                                 default = nil)
  if valid_613655 != nil:
    section.add "X-Amz-Algorithm", valid_613655
  var valid_613656 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613656 = validateParameter(valid_613656, JString, required = false,
                                 default = nil)
  if valid_613656 != nil:
    section.add "X-Amz-SignedHeaders", valid_613656
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613657: Call_GetDescribeDBInstances_613641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_613657.validator(path, query, header, formData, body)
  let scheme = call_613657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613657.url(scheme.get, call_613657.host, call_613657.base,
                         call_613657.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613657, url, valid)

proc call*(call_613658: Call_GetDescribeDBInstances_613641; Marker: string = "";
          DBInstanceIdentifier: string = ""; Action: string = "DescribeDBInstances";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstances
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613659 = newJObject()
  add(query_613659, "Marker", newJString(Marker))
  add(query_613659, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_613659, "Action", newJString(Action))
  add(query_613659, "Version", newJString(Version))
  if Filters != nil:
    query_613659.add "Filters", Filters
  add(query_613659, "MaxRecords", newJInt(MaxRecords))
  result = call_613658.call(nil, query_613659, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_613641(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_613642, base: "/",
    url: url_GetDescribeDBInstances_613643, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBLogFiles_613702 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBLogFiles_613704(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBLogFiles_613703(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613705 = query.getOrDefault("Action")
  valid_613705 = validateParameter(valid_613705, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_613705 != nil:
    section.add "Action", valid_613705
  var valid_613706 = query.getOrDefault("Version")
  valid_613706 = validateParameter(valid_613706, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613706 != nil:
    section.add "Version", valid_613706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613707 = header.getOrDefault("X-Amz-Signature")
  valid_613707 = validateParameter(valid_613707, JString, required = false,
                                 default = nil)
  if valid_613707 != nil:
    section.add "X-Amz-Signature", valid_613707
  var valid_613708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613708 = validateParameter(valid_613708, JString, required = false,
                                 default = nil)
  if valid_613708 != nil:
    section.add "X-Amz-Content-Sha256", valid_613708
  var valid_613709 = header.getOrDefault("X-Amz-Date")
  valid_613709 = validateParameter(valid_613709, JString, required = false,
                                 default = nil)
  if valid_613709 != nil:
    section.add "X-Amz-Date", valid_613709
  var valid_613710 = header.getOrDefault("X-Amz-Credential")
  valid_613710 = validateParameter(valid_613710, JString, required = false,
                                 default = nil)
  if valid_613710 != nil:
    section.add "X-Amz-Credential", valid_613710
  var valid_613711 = header.getOrDefault("X-Amz-Security-Token")
  valid_613711 = validateParameter(valid_613711, JString, required = false,
                                 default = nil)
  if valid_613711 != nil:
    section.add "X-Amz-Security-Token", valid_613711
  var valid_613712 = header.getOrDefault("X-Amz-Algorithm")
  valid_613712 = validateParameter(valid_613712, JString, required = false,
                                 default = nil)
  if valid_613712 != nil:
    section.add "X-Amz-Algorithm", valid_613712
  var valid_613713 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613713 = validateParameter(valid_613713, JString, required = false,
                                 default = nil)
  if valid_613713 != nil:
    section.add "X-Amz-SignedHeaders", valid_613713
  result.add "header", section
  ## parameters in `formData` object:
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  section = newJObject()
  var valid_613714 = formData.getOrDefault("FileSize")
  valid_613714 = validateParameter(valid_613714, JInt, required = false, default = nil)
  if valid_613714 != nil:
    section.add "FileSize", valid_613714
  var valid_613715 = formData.getOrDefault("MaxRecords")
  valid_613715 = validateParameter(valid_613715, JInt, required = false, default = nil)
  if valid_613715 != nil:
    section.add "MaxRecords", valid_613715
  var valid_613716 = formData.getOrDefault("Marker")
  valid_613716 = validateParameter(valid_613716, JString, required = false,
                                 default = nil)
  if valid_613716 != nil:
    section.add "Marker", valid_613716
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_613717 = formData.getOrDefault("DBInstanceIdentifier")
  valid_613717 = validateParameter(valid_613717, JString, required = true,
                                 default = nil)
  if valid_613717 != nil:
    section.add "DBInstanceIdentifier", valid_613717
  var valid_613718 = formData.getOrDefault("FilenameContains")
  valid_613718 = validateParameter(valid_613718, JString, required = false,
                                 default = nil)
  if valid_613718 != nil:
    section.add "FilenameContains", valid_613718
  var valid_613719 = formData.getOrDefault("Filters")
  valid_613719 = validateParameter(valid_613719, JArray, required = false,
                                 default = nil)
  if valid_613719 != nil:
    section.add "Filters", valid_613719
  var valid_613720 = formData.getOrDefault("FileLastWritten")
  valid_613720 = validateParameter(valid_613720, JInt, required = false, default = nil)
  if valid_613720 != nil:
    section.add "FileLastWritten", valid_613720
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613721: Call_PostDescribeDBLogFiles_613702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_613721.validator(path, query, header, formData, body)
  let scheme = call_613721.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613721.url(scheme.get, call_613721.host, call_613721.base,
                         call_613721.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613721, url, valid)

proc call*(call_613722: Call_PostDescribeDBLogFiles_613702;
          DBInstanceIdentifier: string; FileSize: int = 0; MaxRecords: int = 0;
          Marker: string = ""; FilenameContains: string = "";
          Action: string = "DescribeDBLogFiles"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; FileLastWritten: int = 0): Recallable =
  ## postDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  var query_613723 = newJObject()
  var formData_613724 = newJObject()
  add(formData_613724, "FileSize", newJInt(FileSize))
  add(formData_613724, "MaxRecords", newJInt(MaxRecords))
  add(formData_613724, "Marker", newJString(Marker))
  add(formData_613724, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_613724, "FilenameContains", newJString(FilenameContains))
  add(query_613723, "Action", newJString(Action))
  if Filters != nil:
    formData_613724.add "Filters", Filters
  add(query_613723, "Version", newJString(Version))
  add(formData_613724, "FileLastWritten", newJInt(FileLastWritten))
  result = call_613722.call(nil, query_613723, nil, formData_613724, nil)

var postDescribeDBLogFiles* = Call_PostDescribeDBLogFiles_613702(
    name: "postDescribeDBLogFiles", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_PostDescribeDBLogFiles_613703, base: "/",
    url: url_PostDescribeDBLogFiles_613704, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBLogFiles_613680 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBLogFiles_613682(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBLogFiles_613681(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: JString (required)
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  section = newJObject()
  var valid_613683 = query.getOrDefault("Marker")
  valid_613683 = validateParameter(valid_613683, JString, required = false,
                                 default = nil)
  if valid_613683 != nil:
    section.add "Marker", valid_613683
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_613684 = query.getOrDefault("DBInstanceIdentifier")
  valid_613684 = validateParameter(valid_613684, JString, required = true,
                                 default = nil)
  if valid_613684 != nil:
    section.add "DBInstanceIdentifier", valid_613684
  var valid_613685 = query.getOrDefault("FileLastWritten")
  valid_613685 = validateParameter(valid_613685, JInt, required = false, default = nil)
  if valid_613685 != nil:
    section.add "FileLastWritten", valid_613685
  var valid_613686 = query.getOrDefault("Action")
  valid_613686 = validateParameter(valid_613686, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_613686 != nil:
    section.add "Action", valid_613686
  var valid_613687 = query.getOrDefault("FilenameContains")
  valid_613687 = validateParameter(valid_613687, JString, required = false,
                                 default = nil)
  if valid_613687 != nil:
    section.add "FilenameContains", valid_613687
  var valid_613688 = query.getOrDefault("Version")
  valid_613688 = validateParameter(valid_613688, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613688 != nil:
    section.add "Version", valid_613688
  var valid_613689 = query.getOrDefault("Filters")
  valid_613689 = validateParameter(valid_613689, JArray, required = false,
                                 default = nil)
  if valid_613689 != nil:
    section.add "Filters", valid_613689
  var valid_613690 = query.getOrDefault("MaxRecords")
  valid_613690 = validateParameter(valid_613690, JInt, required = false, default = nil)
  if valid_613690 != nil:
    section.add "MaxRecords", valid_613690
  var valid_613691 = query.getOrDefault("FileSize")
  valid_613691 = validateParameter(valid_613691, JInt, required = false, default = nil)
  if valid_613691 != nil:
    section.add "FileSize", valid_613691
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613692 = header.getOrDefault("X-Amz-Signature")
  valid_613692 = validateParameter(valid_613692, JString, required = false,
                                 default = nil)
  if valid_613692 != nil:
    section.add "X-Amz-Signature", valid_613692
  var valid_613693 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613693 = validateParameter(valid_613693, JString, required = false,
                                 default = nil)
  if valid_613693 != nil:
    section.add "X-Amz-Content-Sha256", valid_613693
  var valid_613694 = header.getOrDefault("X-Amz-Date")
  valid_613694 = validateParameter(valid_613694, JString, required = false,
                                 default = nil)
  if valid_613694 != nil:
    section.add "X-Amz-Date", valid_613694
  var valid_613695 = header.getOrDefault("X-Amz-Credential")
  valid_613695 = validateParameter(valid_613695, JString, required = false,
                                 default = nil)
  if valid_613695 != nil:
    section.add "X-Amz-Credential", valid_613695
  var valid_613696 = header.getOrDefault("X-Amz-Security-Token")
  valid_613696 = validateParameter(valid_613696, JString, required = false,
                                 default = nil)
  if valid_613696 != nil:
    section.add "X-Amz-Security-Token", valid_613696
  var valid_613697 = header.getOrDefault("X-Amz-Algorithm")
  valid_613697 = validateParameter(valid_613697, JString, required = false,
                                 default = nil)
  if valid_613697 != nil:
    section.add "X-Amz-Algorithm", valid_613697
  var valid_613698 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613698 = validateParameter(valid_613698, JString, required = false,
                                 default = nil)
  if valid_613698 != nil:
    section.add "X-Amz-SignedHeaders", valid_613698
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613699: Call_GetDescribeDBLogFiles_613680; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_613699.validator(path, query, header, formData, body)
  let scheme = call_613699.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613699.url(scheme.get, call_613699.host, call_613699.base,
                         call_613699.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613699, url, valid)

proc call*(call_613700: Call_GetDescribeDBLogFiles_613680;
          DBInstanceIdentifier: string; Marker: string = ""; FileLastWritten: int = 0;
          Action: string = "DescribeDBLogFiles"; FilenameContains: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          FileSize: int = 0): Recallable =
  ## getDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: string (required)
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  var query_613701 = newJObject()
  add(query_613701, "Marker", newJString(Marker))
  add(query_613701, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_613701, "FileLastWritten", newJInt(FileLastWritten))
  add(query_613701, "Action", newJString(Action))
  add(query_613701, "FilenameContains", newJString(FilenameContains))
  add(query_613701, "Version", newJString(Version))
  if Filters != nil:
    query_613701.add "Filters", Filters
  add(query_613701, "MaxRecords", newJInt(MaxRecords))
  add(query_613701, "FileSize", newJInt(FileSize))
  result = call_613700.call(nil, query_613701, nil, nil, nil)

var getDescribeDBLogFiles* = Call_GetDescribeDBLogFiles_613680(
    name: "getDescribeDBLogFiles", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_GetDescribeDBLogFiles_613681, base: "/",
    url: url_GetDescribeDBLogFiles_613682, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_613744 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBParameterGroups_613746(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameterGroups_613745(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613747 = query.getOrDefault("Action")
  valid_613747 = validateParameter(valid_613747, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_613747 != nil:
    section.add "Action", valid_613747
  var valid_613748 = query.getOrDefault("Version")
  valid_613748 = validateParameter(valid_613748, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613748 != nil:
    section.add "Version", valid_613748
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613749 = header.getOrDefault("X-Amz-Signature")
  valid_613749 = validateParameter(valid_613749, JString, required = false,
                                 default = nil)
  if valid_613749 != nil:
    section.add "X-Amz-Signature", valid_613749
  var valid_613750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613750 = validateParameter(valid_613750, JString, required = false,
                                 default = nil)
  if valid_613750 != nil:
    section.add "X-Amz-Content-Sha256", valid_613750
  var valid_613751 = header.getOrDefault("X-Amz-Date")
  valid_613751 = validateParameter(valid_613751, JString, required = false,
                                 default = nil)
  if valid_613751 != nil:
    section.add "X-Amz-Date", valid_613751
  var valid_613752 = header.getOrDefault("X-Amz-Credential")
  valid_613752 = validateParameter(valid_613752, JString, required = false,
                                 default = nil)
  if valid_613752 != nil:
    section.add "X-Amz-Credential", valid_613752
  var valid_613753 = header.getOrDefault("X-Amz-Security-Token")
  valid_613753 = validateParameter(valid_613753, JString, required = false,
                                 default = nil)
  if valid_613753 != nil:
    section.add "X-Amz-Security-Token", valid_613753
  var valid_613754 = header.getOrDefault("X-Amz-Algorithm")
  valid_613754 = validateParameter(valid_613754, JString, required = false,
                                 default = nil)
  if valid_613754 != nil:
    section.add "X-Amz-Algorithm", valid_613754
  var valid_613755 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613755 = validateParameter(valid_613755, JString, required = false,
                                 default = nil)
  if valid_613755 != nil:
    section.add "X-Amz-SignedHeaders", valid_613755
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_613756 = formData.getOrDefault("MaxRecords")
  valid_613756 = validateParameter(valid_613756, JInt, required = false, default = nil)
  if valid_613756 != nil:
    section.add "MaxRecords", valid_613756
  var valid_613757 = formData.getOrDefault("DBParameterGroupName")
  valid_613757 = validateParameter(valid_613757, JString, required = false,
                                 default = nil)
  if valid_613757 != nil:
    section.add "DBParameterGroupName", valid_613757
  var valid_613758 = formData.getOrDefault("Marker")
  valid_613758 = validateParameter(valid_613758, JString, required = false,
                                 default = nil)
  if valid_613758 != nil:
    section.add "Marker", valid_613758
  var valid_613759 = formData.getOrDefault("Filters")
  valid_613759 = validateParameter(valid_613759, JArray, required = false,
                                 default = nil)
  if valid_613759 != nil:
    section.add "Filters", valid_613759
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613760: Call_PostDescribeDBParameterGroups_613744; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_613760.validator(path, query, header, formData, body)
  let scheme = call_613760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613760.url(scheme.get, call_613760.host, call_613760.base,
                         call_613760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613760, url, valid)

proc call*(call_613761: Call_PostDescribeDBParameterGroups_613744;
          MaxRecords: int = 0; DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_613762 = newJObject()
  var formData_613763 = newJObject()
  add(formData_613763, "MaxRecords", newJInt(MaxRecords))
  add(formData_613763, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_613763, "Marker", newJString(Marker))
  add(query_613762, "Action", newJString(Action))
  if Filters != nil:
    formData_613763.add "Filters", Filters
  add(query_613762, "Version", newJString(Version))
  result = call_613761.call(nil, query_613762, nil, formData_613763, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_613744(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_613745, base: "/",
    url: url_PostDescribeDBParameterGroups_613746,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_613725 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBParameterGroups_613727(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameterGroups_613726(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613728 = query.getOrDefault("Marker")
  valid_613728 = validateParameter(valid_613728, JString, required = false,
                                 default = nil)
  if valid_613728 != nil:
    section.add "Marker", valid_613728
  var valid_613729 = query.getOrDefault("DBParameterGroupName")
  valid_613729 = validateParameter(valid_613729, JString, required = false,
                                 default = nil)
  if valid_613729 != nil:
    section.add "DBParameterGroupName", valid_613729
  var valid_613730 = query.getOrDefault("Action")
  valid_613730 = validateParameter(valid_613730, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_613730 != nil:
    section.add "Action", valid_613730
  var valid_613731 = query.getOrDefault("Version")
  valid_613731 = validateParameter(valid_613731, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613731 != nil:
    section.add "Version", valid_613731
  var valid_613732 = query.getOrDefault("Filters")
  valid_613732 = validateParameter(valid_613732, JArray, required = false,
                                 default = nil)
  if valid_613732 != nil:
    section.add "Filters", valid_613732
  var valid_613733 = query.getOrDefault("MaxRecords")
  valid_613733 = validateParameter(valid_613733, JInt, required = false, default = nil)
  if valid_613733 != nil:
    section.add "MaxRecords", valid_613733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613734 = header.getOrDefault("X-Amz-Signature")
  valid_613734 = validateParameter(valid_613734, JString, required = false,
                                 default = nil)
  if valid_613734 != nil:
    section.add "X-Amz-Signature", valid_613734
  var valid_613735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613735 = validateParameter(valid_613735, JString, required = false,
                                 default = nil)
  if valid_613735 != nil:
    section.add "X-Amz-Content-Sha256", valid_613735
  var valid_613736 = header.getOrDefault("X-Amz-Date")
  valid_613736 = validateParameter(valid_613736, JString, required = false,
                                 default = nil)
  if valid_613736 != nil:
    section.add "X-Amz-Date", valid_613736
  var valid_613737 = header.getOrDefault("X-Amz-Credential")
  valid_613737 = validateParameter(valid_613737, JString, required = false,
                                 default = nil)
  if valid_613737 != nil:
    section.add "X-Amz-Credential", valid_613737
  var valid_613738 = header.getOrDefault("X-Amz-Security-Token")
  valid_613738 = validateParameter(valid_613738, JString, required = false,
                                 default = nil)
  if valid_613738 != nil:
    section.add "X-Amz-Security-Token", valid_613738
  var valid_613739 = header.getOrDefault("X-Amz-Algorithm")
  valid_613739 = validateParameter(valid_613739, JString, required = false,
                                 default = nil)
  if valid_613739 != nil:
    section.add "X-Amz-Algorithm", valid_613739
  var valid_613740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613740 = validateParameter(valid_613740, JString, required = false,
                                 default = nil)
  if valid_613740 != nil:
    section.add "X-Amz-SignedHeaders", valid_613740
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613741: Call_GetDescribeDBParameterGroups_613725; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_613741.validator(path, query, header, formData, body)
  let scheme = call_613741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613741.url(scheme.get, call_613741.host, call_613741.base,
                         call_613741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613741, url, valid)

proc call*(call_613742: Call_GetDescribeDBParameterGroups_613725;
          Marker: string = ""; DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613743 = newJObject()
  add(query_613743, "Marker", newJString(Marker))
  add(query_613743, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_613743, "Action", newJString(Action))
  add(query_613743, "Version", newJString(Version))
  if Filters != nil:
    query_613743.add "Filters", Filters
  add(query_613743, "MaxRecords", newJInt(MaxRecords))
  result = call_613742.call(nil, query_613743, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_613725(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_613726, base: "/",
    url: url_GetDescribeDBParameterGroups_613727,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_613784 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBParameters_613786(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameters_613785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613787 = query.getOrDefault("Action")
  valid_613787 = validateParameter(valid_613787, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_613787 != nil:
    section.add "Action", valid_613787
  var valid_613788 = query.getOrDefault("Version")
  valid_613788 = validateParameter(valid_613788, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613788 != nil:
    section.add "Version", valid_613788
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613789 = header.getOrDefault("X-Amz-Signature")
  valid_613789 = validateParameter(valid_613789, JString, required = false,
                                 default = nil)
  if valid_613789 != nil:
    section.add "X-Amz-Signature", valid_613789
  var valid_613790 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613790 = validateParameter(valid_613790, JString, required = false,
                                 default = nil)
  if valid_613790 != nil:
    section.add "X-Amz-Content-Sha256", valid_613790
  var valid_613791 = header.getOrDefault("X-Amz-Date")
  valid_613791 = validateParameter(valid_613791, JString, required = false,
                                 default = nil)
  if valid_613791 != nil:
    section.add "X-Amz-Date", valid_613791
  var valid_613792 = header.getOrDefault("X-Amz-Credential")
  valid_613792 = validateParameter(valid_613792, JString, required = false,
                                 default = nil)
  if valid_613792 != nil:
    section.add "X-Amz-Credential", valid_613792
  var valid_613793 = header.getOrDefault("X-Amz-Security-Token")
  valid_613793 = validateParameter(valid_613793, JString, required = false,
                                 default = nil)
  if valid_613793 != nil:
    section.add "X-Amz-Security-Token", valid_613793
  var valid_613794 = header.getOrDefault("X-Amz-Algorithm")
  valid_613794 = validateParameter(valid_613794, JString, required = false,
                                 default = nil)
  if valid_613794 != nil:
    section.add "X-Amz-Algorithm", valid_613794
  var valid_613795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613795 = validateParameter(valid_613795, JString, required = false,
                                 default = nil)
  if valid_613795 != nil:
    section.add "X-Amz-SignedHeaders", valid_613795
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_613796 = formData.getOrDefault("Source")
  valid_613796 = validateParameter(valid_613796, JString, required = false,
                                 default = nil)
  if valid_613796 != nil:
    section.add "Source", valid_613796
  var valid_613797 = formData.getOrDefault("MaxRecords")
  valid_613797 = validateParameter(valid_613797, JInt, required = false, default = nil)
  if valid_613797 != nil:
    section.add "MaxRecords", valid_613797
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_613798 = formData.getOrDefault("DBParameterGroupName")
  valid_613798 = validateParameter(valid_613798, JString, required = true,
                                 default = nil)
  if valid_613798 != nil:
    section.add "DBParameterGroupName", valid_613798
  var valid_613799 = formData.getOrDefault("Marker")
  valid_613799 = validateParameter(valid_613799, JString, required = false,
                                 default = nil)
  if valid_613799 != nil:
    section.add "Marker", valid_613799
  var valid_613800 = formData.getOrDefault("Filters")
  valid_613800 = validateParameter(valid_613800, JArray, required = false,
                                 default = nil)
  if valid_613800 != nil:
    section.add "Filters", valid_613800
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613801: Call_PostDescribeDBParameters_613784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_613801.validator(path, query, header, formData, body)
  let scheme = call_613801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613801.url(scheme.get, call_613801.host, call_613801.base,
                         call_613801.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613801, url, valid)

proc call*(call_613802: Call_PostDescribeDBParameters_613784;
          DBParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_613803 = newJObject()
  var formData_613804 = newJObject()
  add(formData_613804, "Source", newJString(Source))
  add(formData_613804, "MaxRecords", newJInt(MaxRecords))
  add(formData_613804, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_613804, "Marker", newJString(Marker))
  add(query_613803, "Action", newJString(Action))
  if Filters != nil:
    formData_613804.add "Filters", Filters
  add(query_613803, "Version", newJString(Version))
  result = call_613802.call(nil, query_613803, nil, formData_613804, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_613784(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_613785, base: "/",
    url: url_PostDescribeDBParameters_613786, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_613764 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBParameters_613766(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameters_613765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613767 = query.getOrDefault("Marker")
  valid_613767 = validateParameter(valid_613767, JString, required = false,
                                 default = nil)
  if valid_613767 != nil:
    section.add "Marker", valid_613767
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_613768 = query.getOrDefault("DBParameterGroupName")
  valid_613768 = validateParameter(valid_613768, JString, required = true,
                                 default = nil)
  if valid_613768 != nil:
    section.add "DBParameterGroupName", valid_613768
  var valid_613769 = query.getOrDefault("Source")
  valid_613769 = validateParameter(valid_613769, JString, required = false,
                                 default = nil)
  if valid_613769 != nil:
    section.add "Source", valid_613769
  var valid_613770 = query.getOrDefault("Action")
  valid_613770 = validateParameter(valid_613770, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_613770 != nil:
    section.add "Action", valid_613770
  var valid_613771 = query.getOrDefault("Version")
  valid_613771 = validateParameter(valid_613771, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613771 != nil:
    section.add "Version", valid_613771
  var valid_613772 = query.getOrDefault("Filters")
  valid_613772 = validateParameter(valid_613772, JArray, required = false,
                                 default = nil)
  if valid_613772 != nil:
    section.add "Filters", valid_613772
  var valid_613773 = query.getOrDefault("MaxRecords")
  valid_613773 = validateParameter(valid_613773, JInt, required = false, default = nil)
  if valid_613773 != nil:
    section.add "MaxRecords", valid_613773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613774 = header.getOrDefault("X-Amz-Signature")
  valid_613774 = validateParameter(valid_613774, JString, required = false,
                                 default = nil)
  if valid_613774 != nil:
    section.add "X-Amz-Signature", valid_613774
  var valid_613775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613775 = validateParameter(valid_613775, JString, required = false,
                                 default = nil)
  if valid_613775 != nil:
    section.add "X-Amz-Content-Sha256", valid_613775
  var valid_613776 = header.getOrDefault("X-Amz-Date")
  valid_613776 = validateParameter(valid_613776, JString, required = false,
                                 default = nil)
  if valid_613776 != nil:
    section.add "X-Amz-Date", valid_613776
  var valid_613777 = header.getOrDefault("X-Amz-Credential")
  valid_613777 = validateParameter(valid_613777, JString, required = false,
                                 default = nil)
  if valid_613777 != nil:
    section.add "X-Amz-Credential", valid_613777
  var valid_613778 = header.getOrDefault("X-Amz-Security-Token")
  valid_613778 = validateParameter(valid_613778, JString, required = false,
                                 default = nil)
  if valid_613778 != nil:
    section.add "X-Amz-Security-Token", valid_613778
  var valid_613779 = header.getOrDefault("X-Amz-Algorithm")
  valid_613779 = validateParameter(valid_613779, JString, required = false,
                                 default = nil)
  if valid_613779 != nil:
    section.add "X-Amz-Algorithm", valid_613779
  var valid_613780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613780 = validateParameter(valid_613780, JString, required = false,
                                 default = nil)
  if valid_613780 != nil:
    section.add "X-Amz-SignedHeaders", valid_613780
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613781: Call_GetDescribeDBParameters_613764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_613781.validator(path, query, header, formData, body)
  let scheme = call_613781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613781.url(scheme.get, call_613781.host, call_613781.base,
                         call_613781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613781, url, valid)

proc call*(call_613782: Call_GetDescribeDBParameters_613764;
          DBParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeDBParameters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613783 = newJObject()
  add(query_613783, "Marker", newJString(Marker))
  add(query_613783, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_613783, "Source", newJString(Source))
  add(query_613783, "Action", newJString(Action))
  add(query_613783, "Version", newJString(Version))
  if Filters != nil:
    query_613783.add "Filters", Filters
  add(query_613783, "MaxRecords", newJInt(MaxRecords))
  result = call_613782.call(nil, query_613783, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_613764(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_613765, base: "/",
    url: url_GetDescribeDBParameters_613766, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxies_613824 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBProxies_613826(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxies_613825(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613827 = query.getOrDefault("Action")
  valid_613827 = validateParameter(valid_613827, JString, required = true,
                                 default = newJString("DescribeDBProxies"))
  if valid_613827 != nil:
    section.add "Action", valid_613827
  var valid_613828 = query.getOrDefault("Version")
  valid_613828 = validateParameter(valid_613828, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613828 != nil:
    section.add "Version", valid_613828
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613829 = header.getOrDefault("X-Amz-Signature")
  valid_613829 = validateParameter(valid_613829, JString, required = false,
                                 default = nil)
  if valid_613829 != nil:
    section.add "X-Amz-Signature", valid_613829
  var valid_613830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613830 = validateParameter(valid_613830, JString, required = false,
                                 default = nil)
  if valid_613830 != nil:
    section.add "X-Amz-Content-Sha256", valid_613830
  var valid_613831 = header.getOrDefault("X-Amz-Date")
  valid_613831 = validateParameter(valid_613831, JString, required = false,
                                 default = nil)
  if valid_613831 != nil:
    section.add "X-Amz-Date", valid_613831
  var valid_613832 = header.getOrDefault("X-Amz-Credential")
  valid_613832 = validateParameter(valid_613832, JString, required = false,
                                 default = nil)
  if valid_613832 != nil:
    section.add "X-Amz-Credential", valid_613832
  var valid_613833 = header.getOrDefault("X-Amz-Security-Token")
  valid_613833 = validateParameter(valid_613833, JString, required = false,
                                 default = nil)
  if valid_613833 != nil:
    section.add "X-Amz-Security-Token", valid_613833
  var valid_613834 = header.getOrDefault("X-Amz-Algorithm")
  valid_613834 = validateParameter(valid_613834, JString, required = false,
                                 default = nil)
  if valid_613834 != nil:
    section.add "X-Amz-Algorithm", valid_613834
  var valid_613835 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613835 = validateParameter(valid_613835, JString, required = false,
                                 default = nil)
  if valid_613835 != nil:
    section.add "X-Amz-SignedHeaders", valid_613835
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_613836 = formData.getOrDefault("MaxRecords")
  valid_613836 = validateParameter(valid_613836, JInt, required = false, default = nil)
  if valid_613836 != nil:
    section.add "MaxRecords", valid_613836
  var valid_613837 = formData.getOrDefault("Marker")
  valid_613837 = validateParameter(valid_613837, JString, required = false,
                                 default = nil)
  if valid_613837 != nil:
    section.add "Marker", valid_613837
  var valid_613838 = formData.getOrDefault("DBProxyName")
  valid_613838 = validateParameter(valid_613838, JString, required = false,
                                 default = nil)
  if valid_613838 != nil:
    section.add "DBProxyName", valid_613838
  var valid_613839 = formData.getOrDefault("Filters")
  valid_613839 = validateParameter(valid_613839, JArray, required = false,
                                 default = nil)
  if valid_613839 != nil:
    section.add "Filters", valid_613839
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613840: Call_PostDescribeDBProxies_613824; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_613840.validator(path, query, header, formData, body)
  let scheme = call_613840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613840.url(scheme.get, call_613840.host, call_613840.base,
                         call_613840.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613840, url, valid)

proc call*(call_613841: Call_PostDescribeDBProxies_613824; MaxRecords: int = 0;
          Marker: string = ""; DBProxyName: string = "";
          Action: string = "DescribeDBProxies"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_613842 = newJObject()
  var formData_613843 = newJObject()
  add(formData_613843, "MaxRecords", newJInt(MaxRecords))
  add(formData_613843, "Marker", newJString(Marker))
  add(formData_613843, "DBProxyName", newJString(DBProxyName))
  add(query_613842, "Action", newJString(Action))
  if Filters != nil:
    formData_613843.add "Filters", Filters
  add(query_613842, "Version", newJString(Version))
  result = call_613841.call(nil, query_613842, nil, formData_613843, nil)

var postDescribeDBProxies* = Call_PostDescribeDBProxies_613824(
    name: "postDescribeDBProxies", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_PostDescribeDBProxies_613825, base: "/",
    url: url_PostDescribeDBProxies_613826, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxies_613805 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBProxies_613807(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxies_613806(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613808 = query.getOrDefault("Marker")
  valid_613808 = validateParameter(valid_613808, JString, required = false,
                                 default = nil)
  if valid_613808 != nil:
    section.add "Marker", valid_613808
  var valid_613809 = query.getOrDefault("Action")
  valid_613809 = validateParameter(valid_613809, JString, required = true,
                                 default = newJString("DescribeDBProxies"))
  if valid_613809 != nil:
    section.add "Action", valid_613809
  var valid_613810 = query.getOrDefault("Version")
  valid_613810 = validateParameter(valid_613810, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613810 != nil:
    section.add "Version", valid_613810
  var valid_613811 = query.getOrDefault("DBProxyName")
  valid_613811 = validateParameter(valid_613811, JString, required = false,
                                 default = nil)
  if valid_613811 != nil:
    section.add "DBProxyName", valid_613811
  var valid_613812 = query.getOrDefault("Filters")
  valid_613812 = validateParameter(valid_613812, JArray, required = false,
                                 default = nil)
  if valid_613812 != nil:
    section.add "Filters", valid_613812
  var valid_613813 = query.getOrDefault("MaxRecords")
  valid_613813 = validateParameter(valid_613813, JInt, required = false, default = nil)
  if valid_613813 != nil:
    section.add "MaxRecords", valid_613813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613814 = header.getOrDefault("X-Amz-Signature")
  valid_613814 = validateParameter(valid_613814, JString, required = false,
                                 default = nil)
  if valid_613814 != nil:
    section.add "X-Amz-Signature", valid_613814
  var valid_613815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613815 = validateParameter(valid_613815, JString, required = false,
                                 default = nil)
  if valid_613815 != nil:
    section.add "X-Amz-Content-Sha256", valid_613815
  var valid_613816 = header.getOrDefault("X-Amz-Date")
  valid_613816 = validateParameter(valid_613816, JString, required = false,
                                 default = nil)
  if valid_613816 != nil:
    section.add "X-Amz-Date", valid_613816
  var valid_613817 = header.getOrDefault("X-Amz-Credential")
  valid_613817 = validateParameter(valid_613817, JString, required = false,
                                 default = nil)
  if valid_613817 != nil:
    section.add "X-Amz-Credential", valid_613817
  var valid_613818 = header.getOrDefault("X-Amz-Security-Token")
  valid_613818 = validateParameter(valid_613818, JString, required = false,
                                 default = nil)
  if valid_613818 != nil:
    section.add "X-Amz-Security-Token", valid_613818
  var valid_613819 = header.getOrDefault("X-Amz-Algorithm")
  valid_613819 = validateParameter(valid_613819, JString, required = false,
                                 default = nil)
  if valid_613819 != nil:
    section.add "X-Amz-Algorithm", valid_613819
  var valid_613820 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613820 = validateParameter(valid_613820, JString, required = false,
                                 default = nil)
  if valid_613820 != nil:
    section.add "X-Amz-SignedHeaders", valid_613820
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613821: Call_GetDescribeDBProxies_613805; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_613821.validator(path, query, header, formData, body)
  let scheme = call_613821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613821.url(scheme.get, call_613821.host, call_613821.base,
                         call_613821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613821, url, valid)

proc call*(call_613822: Call_GetDescribeDBProxies_613805; Marker: string = "";
          Action: string = "DescribeDBProxies"; Version: string = "2014-10-31";
          DBProxyName: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613823 = newJObject()
  add(query_613823, "Marker", newJString(Marker))
  add(query_613823, "Action", newJString(Action))
  add(query_613823, "Version", newJString(Version))
  add(query_613823, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_613823.add "Filters", Filters
  add(query_613823, "MaxRecords", newJInt(MaxRecords))
  result = call_613822.call(nil, query_613823, nil, nil, nil)

var getDescribeDBProxies* = Call_GetDescribeDBProxies_613805(
    name: "getDescribeDBProxies", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_GetDescribeDBProxies_613806, base: "/",
    url: url_GetDescribeDBProxies_613807, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargetGroups_613864 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBProxyTargetGroups_613866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargetGroups_613865(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613867 = query.getOrDefault("Action")
  valid_613867 = validateParameter(valid_613867, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_613867 != nil:
    section.add "Action", valid_613867
  var valid_613868 = query.getOrDefault("Version")
  valid_613868 = validateParameter(valid_613868, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613868 != nil:
    section.add "Version", valid_613868
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613869 = header.getOrDefault("X-Amz-Signature")
  valid_613869 = validateParameter(valid_613869, JString, required = false,
                                 default = nil)
  if valid_613869 != nil:
    section.add "X-Amz-Signature", valid_613869
  var valid_613870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613870 = validateParameter(valid_613870, JString, required = false,
                                 default = nil)
  if valid_613870 != nil:
    section.add "X-Amz-Content-Sha256", valid_613870
  var valid_613871 = header.getOrDefault("X-Amz-Date")
  valid_613871 = validateParameter(valid_613871, JString, required = false,
                                 default = nil)
  if valid_613871 != nil:
    section.add "X-Amz-Date", valid_613871
  var valid_613872 = header.getOrDefault("X-Amz-Credential")
  valid_613872 = validateParameter(valid_613872, JString, required = false,
                                 default = nil)
  if valid_613872 != nil:
    section.add "X-Amz-Credential", valid_613872
  var valid_613873 = header.getOrDefault("X-Amz-Security-Token")
  valid_613873 = validateParameter(valid_613873, JString, required = false,
                                 default = nil)
  if valid_613873 != nil:
    section.add "X-Amz-Security-Token", valid_613873
  var valid_613874 = header.getOrDefault("X-Amz-Algorithm")
  valid_613874 = validateParameter(valid_613874, JString, required = false,
                                 default = nil)
  if valid_613874 != nil:
    section.add "X-Amz-Algorithm", valid_613874
  var valid_613875 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613875 = validateParameter(valid_613875, JString, required = false,
                                 default = nil)
  if valid_613875 != nil:
    section.add "X-Amz-SignedHeaders", valid_613875
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_613876 = formData.getOrDefault("MaxRecords")
  valid_613876 = validateParameter(valid_613876, JInt, required = false, default = nil)
  if valid_613876 != nil:
    section.add "MaxRecords", valid_613876
  var valid_613877 = formData.getOrDefault("TargetGroupName")
  valid_613877 = validateParameter(valid_613877, JString, required = false,
                                 default = nil)
  if valid_613877 != nil:
    section.add "TargetGroupName", valid_613877
  var valid_613878 = formData.getOrDefault("Marker")
  valid_613878 = validateParameter(valid_613878, JString, required = false,
                                 default = nil)
  if valid_613878 != nil:
    section.add "Marker", valid_613878
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_613879 = formData.getOrDefault("DBProxyName")
  valid_613879 = validateParameter(valid_613879, JString, required = true,
                                 default = nil)
  if valid_613879 != nil:
    section.add "DBProxyName", valid_613879
  var valid_613880 = formData.getOrDefault("Filters")
  valid_613880 = validateParameter(valid_613880, JArray, required = false,
                                 default = nil)
  if valid_613880 != nil:
    section.add "Filters", valid_613880
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613881: Call_PostDescribeDBProxyTargetGroups_613864;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_613881.validator(path, query, header, formData, body)
  let scheme = call_613881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613881.url(scheme.get, call_613881.host, call_613881.base,
                         call_613881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613881, url, valid)

proc call*(call_613882: Call_PostDescribeDBProxyTargetGroups_613864;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeDBProxyTargetGroups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_613883 = newJObject()
  var formData_613884 = newJObject()
  add(formData_613884, "MaxRecords", newJInt(MaxRecords))
  add(formData_613884, "TargetGroupName", newJString(TargetGroupName))
  add(formData_613884, "Marker", newJString(Marker))
  add(formData_613884, "DBProxyName", newJString(DBProxyName))
  add(query_613883, "Action", newJString(Action))
  if Filters != nil:
    formData_613884.add "Filters", Filters
  add(query_613883, "Version", newJString(Version))
  result = call_613882.call(nil, query_613883, nil, formData_613884, nil)

var postDescribeDBProxyTargetGroups* = Call_PostDescribeDBProxyTargetGroups_613864(
    name: "postDescribeDBProxyTargetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_PostDescribeDBProxyTargetGroups_613865, base: "/",
    url: url_PostDescribeDBProxyTargetGroups_613866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargetGroups_613844 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBProxyTargetGroups_613846(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargetGroups_613845(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613847 = query.getOrDefault("Marker")
  valid_613847 = validateParameter(valid_613847, JString, required = false,
                                 default = nil)
  if valid_613847 != nil:
    section.add "Marker", valid_613847
  var valid_613848 = query.getOrDefault("TargetGroupName")
  valid_613848 = validateParameter(valid_613848, JString, required = false,
                                 default = nil)
  if valid_613848 != nil:
    section.add "TargetGroupName", valid_613848
  var valid_613849 = query.getOrDefault("Action")
  valid_613849 = validateParameter(valid_613849, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_613849 != nil:
    section.add "Action", valid_613849
  var valid_613850 = query.getOrDefault("Version")
  valid_613850 = validateParameter(valid_613850, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613850 != nil:
    section.add "Version", valid_613850
  var valid_613851 = query.getOrDefault("DBProxyName")
  valid_613851 = validateParameter(valid_613851, JString, required = true,
                                 default = nil)
  if valid_613851 != nil:
    section.add "DBProxyName", valid_613851
  var valid_613852 = query.getOrDefault("Filters")
  valid_613852 = validateParameter(valid_613852, JArray, required = false,
                                 default = nil)
  if valid_613852 != nil:
    section.add "Filters", valid_613852
  var valid_613853 = query.getOrDefault("MaxRecords")
  valid_613853 = validateParameter(valid_613853, JInt, required = false, default = nil)
  if valid_613853 != nil:
    section.add "MaxRecords", valid_613853
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613854 = header.getOrDefault("X-Amz-Signature")
  valid_613854 = validateParameter(valid_613854, JString, required = false,
                                 default = nil)
  if valid_613854 != nil:
    section.add "X-Amz-Signature", valid_613854
  var valid_613855 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613855 = validateParameter(valid_613855, JString, required = false,
                                 default = nil)
  if valid_613855 != nil:
    section.add "X-Amz-Content-Sha256", valid_613855
  var valid_613856 = header.getOrDefault("X-Amz-Date")
  valid_613856 = validateParameter(valid_613856, JString, required = false,
                                 default = nil)
  if valid_613856 != nil:
    section.add "X-Amz-Date", valid_613856
  var valid_613857 = header.getOrDefault("X-Amz-Credential")
  valid_613857 = validateParameter(valid_613857, JString, required = false,
                                 default = nil)
  if valid_613857 != nil:
    section.add "X-Amz-Credential", valid_613857
  var valid_613858 = header.getOrDefault("X-Amz-Security-Token")
  valid_613858 = validateParameter(valid_613858, JString, required = false,
                                 default = nil)
  if valid_613858 != nil:
    section.add "X-Amz-Security-Token", valid_613858
  var valid_613859 = header.getOrDefault("X-Amz-Algorithm")
  valid_613859 = validateParameter(valid_613859, JString, required = false,
                                 default = nil)
  if valid_613859 != nil:
    section.add "X-Amz-Algorithm", valid_613859
  var valid_613860 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613860 = validateParameter(valid_613860, JString, required = false,
                                 default = nil)
  if valid_613860 != nil:
    section.add "X-Amz-SignedHeaders", valid_613860
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613861: Call_GetDescribeDBProxyTargetGroups_613844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_613861.validator(path, query, header, formData, body)
  let scheme = call_613861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613861.url(scheme.get, call_613861.host, call_613861.base,
                         call_613861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613861, url, valid)

proc call*(call_613862: Call_GetDescribeDBProxyTargetGroups_613844;
          DBProxyName: string; Marker: string = ""; TargetGroupName: string = "";
          Action: string = "DescribeDBProxyTargetGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613863 = newJObject()
  add(query_613863, "Marker", newJString(Marker))
  add(query_613863, "TargetGroupName", newJString(TargetGroupName))
  add(query_613863, "Action", newJString(Action))
  add(query_613863, "Version", newJString(Version))
  add(query_613863, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_613863.add "Filters", Filters
  add(query_613863, "MaxRecords", newJInt(MaxRecords))
  result = call_613862.call(nil, query_613863, nil, nil, nil)

var getDescribeDBProxyTargetGroups* = Call_GetDescribeDBProxyTargetGroups_613844(
    name: "getDescribeDBProxyTargetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_GetDescribeDBProxyTargetGroups_613845, base: "/",
    url: url_GetDescribeDBProxyTargetGroups_613846,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargets_613905 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBProxyTargets_613907(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargets_613906(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613908 = query.getOrDefault("Action")
  valid_613908 = validateParameter(valid_613908, JString, required = true,
                                 default = newJString("DescribeDBProxyTargets"))
  if valid_613908 != nil:
    section.add "Action", valid_613908
  var valid_613909 = query.getOrDefault("Version")
  valid_613909 = validateParameter(valid_613909, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613909 != nil:
    section.add "Version", valid_613909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613910 = header.getOrDefault("X-Amz-Signature")
  valid_613910 = validateParameter(valid_613910, JString, required = false,
                                 default = nil)
  if valid_613910 != nil:
    section.add "X-Amz-Signature", valid_613910
  var valid_613911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613911 = validateParameter(valid_613911, JString, required = false,
                                 default = nil)
  if valid_613911 != nil:
    section.add "X-Amz-Content-Sha256", valid_613911
  var valid_613912 = header.getOrDefault("X-Amz-Date")
  valid_613912 = validateParameter(valid_613912, JString, required = false,
                                 default = nil)
  if valid_613912 != nil:
    section.add "X-Amz-Date", valid_613912
  var valid_613913 = header.getOrDefault("X-Amz-Credential")
  valid_613913 = validateParameter(valid_613913, JString, required = false,
                                 default = nil)
  if valid_613913 != nil:
    section.add "X-Amz-Credential", valid_613913
  var valid_613914 = header.getOrDefault("X-Amz-Security-Token")
  valid_613914 = validateParameter(valid_613914, JString, required = false,
                                 default = nil)
  if valid_613914 != nil:
    section.add "X-Amz-Security-Token", valid_613914
  var valid_613915 = header.getOrDefault("X-Amz-Algorithm")
  valid_613915 = validateParameter(valid_613915, JString, required = false,
                                 default = nil)
  if valid_613915 != nil:
    section.add "X-Amz-Algorithm", valid_613915
  var valid_613916 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613916 = validateParameter(valid_613916, JString, required = false,
                                 default = nil)
  if valid_613916 != nil:
    section.add "X-Amz-SignedHeaders", valid_613916
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_613917 = formData.getOrDefault("MaxRecords")
  valid_613917 = validateParameter(valid_613917, JInt, required = false, default = nil)
  if valid_613917 != nil:
    section.add "MaxRecords", valid_613917
  var valid_613918 = formData.getOrDefault("TargetGroupName")
  valid_613918 = validateParameter(valid_613918, JString, required = false,
                                 default = nil)
  if valid_613918 != nil:
    section.add "TargetGroupName", valid_613918
  var valid_613919 = formData.getOrDefault("Marker")
  valid_613919 = validateParameter(valid_613919, JString, required = false,
                                 default = nil)
  if valid_613919 != nil:
    section.add "Marker", valid_613919
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_613920 = formData.getOrDefault("DBProxyName")
  valid_613920 = validateParameter(valid_613920, JString, required = true,
                                 default = nil)
  if valid_613920 != nil:
    section.add "DBProxyName", valid_613920
  var valid_613921 = formData.getOrDefault("Filters")
  valid_613921 = validateParameter(valid_613921, JArray, required = false,
                                 default = nil)
  if valid_613921 != nil:
    section.add "Filters", valid_613921
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613922: Call_PostDescribeDBProxyTargets_613905; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_613922.validator(path, query, header, formData, body)
  let scheme = call_613922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613922.url(scheme.get, call_613922.host, call_613922.base,
                         call_613922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613922, url, valid)

proc call*(call_613923: Call_PostDescribeDBProxyTargets_613905;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeDBProxyTargets";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_613924 = newJObject()
  var formData_613925 = newJObject()
  add(formData_613925, "MaxRecords", newJInt(MaxRecords))
  add(formData_613925, "TargetGroupName", newJString(TargetGroupName))
  add(formData_613925, "Marker", newJString(Marker))
  add(formData_613925, "DBProxyName", newJString(DBProxyName))
  add(query_613924, "Action", newJString(Action))
  if Filters != nil:
    formData_613925.add "Filters", Filters
  add(query_613924, "Version", newJString(Version))
  result = call_613923.call(nil, query_613924, nil, formData_613925, nil)

var postDescribeDBProxyTargets* = Call_PostDescribeDBProxyTargets_613905(
    name: "postDescribeDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_PostDescribeDBProxyTargets_613906, base: "/",
    url: url_PostDescribeDBProxyTargets_613907,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargets_613885 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBProxyTargets_613887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargets_613886(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613888 = query.getOrDefault("Marker")
  valid_613888 = validateParameter(valid_613888, JString, required = false,
                                 default = nil)
  if valid_613888 != nil:
    section.add "Marker", valid_613888
  var valid_613889 = query.getOrDefault("TargetGroupName")
  valid_613889 = validateParameter(valid_613889, JString, required = false,
                                 default = nil)
  if valid_613889 != nil:
    section.add "TargetGroupName", valid_613889
  var valid_613890 = query.getOrDefault("Action")
  valid_613890 = validateParameter(valid_613890, JString, required = true,
                                 default = newJString("DescribeDBProxyTargets"))
  if valid_613890 != nil:
    section.add "Action", valid_613890
  var valid_613891 = query.getOrDefault("Version")
  valid_613891 = validateParameter(valid_613891, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613891 != nil:
    section.add "Version", valid_613891
  var valid_613892 = query.getOrDefault("DBProxyName")
  valid_613892 = validateParameter(valid_613892, JString, required = true,
                                 default = nil)
  if valid_613892 != nil:
    section.add "DBProxyName", valid_613892
  var valid_613893 = query.getOrDefault("Filters")
  valid_613893 = validateParameter(valid_613893, JArray, required = false,
                                 default = nil)
  if valid_613893 != nil:
    section.add "Filters", valid_613893
  var valid_613894 = query.getOrDefault("MaxRecords")
  valid_613894 = validateParameter(valid_613894, JInt, required = false, default = nil)
  if valid_613894 != nil:
    section.add "MaxRecords", valid_613894
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613895 = header.getOrDefault("X-Amz-Signature")
  valid_613895 = validateParameter(valid_613895, JString, required = false,
                                 default = nil)
  if valid_613895 != nil:
    section.add "X-Amz-Signature", valid_613895
  var valid_613896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613896 = validateParameter(valid_613896, JString, required = false,
                                 default = nil)
  if valid_613896 != nil:
    section.add "X-Amz-Content-Sha256", valid_613896
  var valid_613897 = header.getOrDefault("X-Amz-Date")
  valid_613897 = validateParameter(valid_613897, JString, required = false,
                                 default = nil)
  if valid_613897 != nil:
    section.add "X-Amz-Date", valid_613897
  var valid_613898 = header.getOrDefault("X-Amz-Credential")
  valid_613898 = validateParameter(valid_613898, JString, required = false,
                                 default = nil)
  if valid_613898 != nil:
    section.add "X-Amz-Credential", valid_613898
  var valid_613899 = header.getOrDefault("X-Amz-Security-Token")
  valid_613899 = validateParameter(valid_613899, JString, required = false,
                                 default = nil)
  if valid_613899 != nil:
    section.add "X-Amz-Security-Token", valid_613899
  var valid_613900 = header.getOrDefault("X-Amz-Algorithm")
  valid_613900 = validateParameter(valid_613900, JString, required = false,
                                 default = nil)
  if valid_613900 != nil:
    section.add "X-Amz-Algorithm", valid_613900
  var valid_613901 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613901 = validateParameter(valid_613901, JString, required = false,
                                 default = nil)
  if valid_613901 != nil:
    section.add "X-Amz-SignedHeaders", valid_613901
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613902: Call_GetDescribeDBProxyTargets_613885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_613902.validator(path, query, header, formData, body)
  let scheme = call_613902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613902.url(scheme.get, call_613902.host, call_613902.base,
                         call_613902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613902, url, valid)

proc call*(call_613903: Call_GetDescribeDBProxyTargets_613885; DBProxyName: string;
          Marker: string = ""; TargetGroupName: string = "";
          Action: string = "DescribeDBProxyTargets"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613904 = newJObject()
  add(query_613904, "Marker", newJString(Marker))
  add(query_613904, "TargetGroupName", newJString(TargetGroupName))
  add(query_613904, "Action", newJString(Action))
  add(query_613904, "Version", newJString(Version))
  add(query_613904, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_613904.add "Filters", Filters
  add(query_613904, "MaxRecords", newJInt(MaxRecords))
  result = call_613903.call(nil, query_613904, nil, nil, nil)

var getDescribeDBProxyTargets* = Call_GetDescribeDBProxyTargets_613885(
    name: "getDescribeDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_GetDescribeDBProxyTargets_613886, base: "/",
    url: url_GetDescribeDBProxyTargets_613887,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSecurityGroups_613945 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBSecurityGroups_613947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSecurityGroups_613946(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613948 = query.getOrDefault("Action")
  valid_613948 = validateParameter(valid_613948, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_613948 != nil:
    section.add "Action", valid_613948
  var valid_613949 = query.getOrDefault("Version")
  valid_613949 = validateParameter(valid_613949, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613949 != nil:
    section.add "Version", valid_613949
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613950 = header.getOrDefault("X-Amz-Signature")
  valid_613950 = validateParameter(valid_613950, JString, required = false,
                                 default = nil)
  if valid_613950 != nil:
    section.add "X-Amz-Signature", valid_613950
  var valid_613951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613951 = validateParameter(valid_613951, JString, required = false,
                                 default = nil)
  if valid_613951 != nil:
    section.add "X-Amz-Content-Sha256", valid_613951
  var valid_613952 = header.getOrDefault("X-Amz-Date")
  valid_613952 = validateParameter(valid_613952, JString, required = false,
                                 default = nil)
  if valid_613952 != nil:
    section.add "X-Amz-Date", valid_613952
  var valid_613953 = header.getOrDefault("X-Amz-Credential")
  valid_613953 = validateParameter(valid_613953, JString, required = false,
                                 default = nil)
  if valid_613953 != nil:
    section.add "X-Amz-Credential", valid_613953
  var valid_613954 = header.getOrDefault("X-Amz-Security-Token")
  valid_613954 = validateParameter(valid_613954, JString, required = false,
                                 default = nil)
  if valid_613954 != nil:
    section.add "X-Amz-Security-Token", valid_613954
  var valid_613955 = header.getOrDefault("X-Amz-Algorithm")
  valid_613955 = validateParameter(valid_613955, JString, required = false,
                                 default = nil)
  if valid_613955 != nil:
    section.add "X-Amz-Algorithm", valid_613955
  var valid_613956 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613956 = validateParameter(valid_613956, JString, required = false,
                                 default = nil)
  if valid_613956 != nil:
    section.add "X-Amz-SignedHeaders", valid_613956
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_613957 = formData.getOrDefault("DBSecurityGroupName")
  valid_613957 = validateParameter(valid_613957, JString, required = false,
                                 default = nil)
  if valid_613957 != nil:
    section.add "DBSecurityGroupName", valid_613957
  var valid_613958 = formData.getOrDefault("MaxRecords")
  valid_613958 = validateParameter(valid_613958, JInt, required = false, default = nil)
  if valid_613958 != nil:
    section.add "MaxRecords", valid_613958
  var valid_613959 = formData.getOrDefault("Marker")
  valid_613959 = validateParameter(valid_613959, JString, required = false,
                                 default = nil)
  if valid_613959 != nil:
    section.add "Marker", valid_613959
  var valid_613960 = formData.getOrDefault("Filters")
  valid_613960 = validateParameter(valid_613960, JArray, required = false,
                                 default = nil)
  if valid_613960 != nil:
    section.add "Filters", valid_613960
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613961: Call_PostDescribeDBSecurityGroups_613945; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_613961.validator(path, query, header, formData, body)
  let scheme = call_613961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613961.url(scheme.get, call_613961.host, call_613961.base,
                         call_613961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613961, url, valid)

proc call*(call_613962: Call_PostDescribeDBSecurityGroups_613945;
          DBSecurityGroupName: string = ""; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSecurityGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_613963 = newJObject()
  var formData_613964 = newJObject()
  add(formData_613964, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_613964, "MaxRecords", newJInt(MaxRecords))
  add(formData_613964, "Marker", newJString(Marker))
  add(query_613963, "Action", newJString(Action))
  if Filters != nil:
    formData_613964.add "Filters", Filters
  add(query_613963, "Version", newJString(Version))
  result = call_613962.call(nil, query_613963, nil, formData_613964, nil)

var postDescribeDBSecurityGroups* = Call_PostDescribeDBSecurityGroups_613945(
    name: "postDescribeDBSecurityGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_PostDescribeDBSecurityGroups_613946, base: "/",
    url: url_PostDescribeDBSecurityGroups_613947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSecurityGroups_613926 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBSecurityGroups_613928(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSecurityGroups_613927(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_613929 = query.getOrDefault("Marker")
  valid_613929 = validateParameter(valid_613929, JString, required = false,
                                 default = nil)
  if valid_613929 != nil:
    section.add "Marker", valid_613929
  var valid_613930 = query.getOrDefault("DBSecurityGroupName")
  valid_613930 = validateParameter(valid_613930, JString, required = false,
                                 default = nil)
  if valid_613930 != nil:
    section.add "DBSecurityGroupName", valid_613930
  var valid_613931 = query.getOrDefault("Action")
  valid_613931 = validateParameter(valid_613931, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_613931 != nil:
    section.add "Action", valid_613931
  var valid_613932 = query.getOrDefault("Version")
  valid_613932 = validateParameter(valid_613932, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613932 != nil:
    section.add "Version", valid_613932
  var valid_613933 = query.getOrDefault("Filters")
  valid_613933 = validateParameter(valid_613933, JArray, required = false,
                                 default = nil)
  if valid_613933 != nil:
    section.add "Filters", valid_613933
  var valid_613934 = query.getOrDefault("MaxRecords")
  valid_613934 = validateParameter(valid_613934, JInt, required = false, default = nil)
  if valid_613934 != nil:
    section.add "MaxRecords", valid_613934
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613935 = header.getOrDefault("X-Amz-Signature")
  valid_613935 = validateParameter(valid_613935, JString, required = false,
                                 default = nil)
  if valid_613935 != nil:
    section.add "X-Amz-Signature", valid_613935
  var valid_613936 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613936 = validateParameter(valid_613936, JString, required = false,
                                 default = nil)
  if valid_613936 != nil:
    section.add "X-Amz-Content-Sha256", valid_613936
  var valid_613937 = header.getOrDefault("X-Amz-Date")
  valid_613937 = validateParameter(valid_613937, JString, required = false,
                                 default = nil)
  if valid_613937 != nil:
    section.add "X-Amz-Date", valid_613937
  var valid_613938 = header.getOrDefault("X-Amz-Credential")
  valid_613938 = validateParameter(valid_613938, JString, required = false,
                                 default = nil)
  if valid_613938 != nil:
    section.add "X-Amz-Credential", valid_613938
  var valid_613939 = header.getOrDefault("X-Amz-Security-Token")
  valid_613939 = validateParameter(valid_613939, JString, required = false,
                                 default = nil)
  if valid_613939 != nil:
    section.add "X-Amz-Security-Token", valid_613939
  var valid_613940 = header.getOrDefault("X-Amz-Algorithm")
  valid_613940 = validateParameter(valid_613940, JString, required = false,
                                 default = nil)
  if valid_613940 != nil:
    section.add "X-Amz-Algorithm", valid_613940
  var valid_613941 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613941 = validateParameter(valid_613941, JString, required = false,
                                 default = nil)
  if valid_613941 != nil:
    section.add "X-Amz-SignedHeaders", valid_613941
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613942: Call_GetDescribeDBSecurityGroups_613926; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_613942.validator(path, query, header, formData, body)
  let scheme = call_613942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613942.url(scheme.get, call_613942.host, call_613942.base,
                         call_613942.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613942, url, valid)

proc call*(call_613943: Call_GetDescribeDBSecurityGroups_613926;
          Marker: string = ""; DBSecurityGroupName: string = "";
          Action: string = "DescribeDBSecurityGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_613944 = newJObject()
  add(query_613944, "Marker", newJString(Marker))
  add(query_613944, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_613944, "Action", newJString(Action))
  add(query_613944, "Version", newJString(Version))
  if Filters != nil:
    query_613944.add "Filters", Filters
  add(query_613944, "MaxRecords", newJInt(MaxRecords))
  result = call_613943.call(nil, query_613944, nil, nil, nil)

var getDescribeDBSecurityGroups* = Call_GetDescribeDBSecurityGroups_613926(
    name: "getDescribeDBSecurityGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_GetDescribeDBSecurityGroups_613927, base: "/",
    url: url_GetDescribeDBSecurityGroups_613928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshotAttributes_613981 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBSnapshotAttributes_613983(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshotAttributes_613982(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613984 = query.getOrDefault("Action")
  valid_613984 = validateParameter(valid_613984, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_613984 != nil:
    section.add "Action", valid_613984
  var valid_613985 = query.getOrDefault("Version")
  valid_613985 = validateParameter(valid_613985, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613985 != nil:
    section.add "Version", valid_613985
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613986 = header.getOrDefault("X-Amz-Signature")
  valid_613986 = validateParameter(valid_613986, JString, required = false,
                                 default = nil)
  if valid_613986 != nil:
    section.add "X-Amz-Signature", valid_613986
  var valid_613987 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613987 = validateParameter(valid_613987, JString, required = false,
                                 default = nil)
  if valid_613987 != nil:
    section.add "X-Amz-Content-Sha256", valid_613987
  var valid_613988 = header.getOrDefault("X-Amz-Date")
  valid_613988 = validateParameter(valid_613988, JString, required = false,
                                 default = nil)
  if valid_613988 != nil:
    section.add "X-Amz-Date", valid_613988
  var valid_613989 = header.getOrDefault("X-Amz-Credential")
  valid_613989 = validateParameter(valid_613989, JString, required = false,
                                 default = nil)
  if valid_613989 != nil:
    section.add "X-Amz-Credential", valid_613989
  var valid_613990 = header.getOrDefault("X-Amz-Security-Token")
  valid_613990 = validateParameter(valid_613990, JString, required = false,
                                 default = nil)
  if valid_613990 != nil:
    section.add "X-Amz-Security-Token", valid_613990
  var valid_613991 = header.getOrDefault("X-Amz-Algorithm")
  valid_613991 = validateParameter(valid_613991, JString, required = false,
                                 default = nil)
  if valid_613991 != nil:
    section.add "X-Amz-Algorithm", valid_613991
  var valid_613992 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613992 = validateParameter(valid_613992, JString, required = false,
                                 default = nil)
  if valid_613992 != nil:
    section.add "X-Amz-SignedHeaders", valid_613992
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_613993 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_613993 = validateParameter(valid_613993, JString, required = true,
                                 default = nil)
  if valid_613993 != nil:
    section.add "DBSnapshotIdentifier", valid_613993
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613994: Call_PostDescribeDBSnapshotAttributes_613981;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_613994.validator(path, query, header, formData, body)
  let scheme = call_613994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613994.url(scheme.get, call_613994.host, call_613994.base,
                         call_613994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613994, url, valid)

proc call*(call_613995: Call_PostDescribeDBSnapshotAttributes_613981;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613996 = newJObject()
  var formData_613997 = newJObject()
  add(formData_613997, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_613996, "Action", newJString(Action))
  add(query_613996, "Version", newJString(Version))
  result = call_613995.call(nil, query_613996, nil, formData_613997, nil)

var postDescribeDBSnapshotAttributes* = Call_PostDescribeDBSnapshotAttributes_613981(
    name: "postDescribeDBSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_PostDescribeDBSnapshotAttributes_613982, base: "/",
    url: url_PostDescribeDBSnapshotAttributes_613983,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshotAttributes_613965 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBSnapshotAttributes_613967(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshotAttributes_613966(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_613968 = query.getOrDefault("DBSnapshotIdentifier")
  valid_613968 = validateParameter(valid_613968, JString, required = true,
                                 default = nil)
  if valid_613968 != nil:
    section.add "DBSnapshotIdentifier", valid_613968
  var valid_613969 = query.getOrDefault("Action")
  valid_613969 = validateParameter(valid_613969, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_613969 != nil:
    section.add "Action", valid_613969
  var valid_613970 = query.getOrDefault("Version")
  valid_613970 = validateParameter(valid_613970, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613970 != nil:
    section.add "Version", valid_613970
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613971 = header.getOrDefault("X-Amz-Signature")
  valid_613971 = validateParameter(valid_613971, JString, required = false,
                                 default = nil)
  if valid_613971 != nil:
    section.add "X-Amz-Signature", valid_613971
  var valid_613972 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613972 = validateParameter(valid_613972, JString, required = false,
                                 default = nil)
  if valid_613972 != nil:
    section.add "X-Amz-Content-Sha256", valid_613972
  var valid_613973 = header.getOrDefault("X-Amz-Date")
  valid_613973 = validateParameter(valid_613973, JString, required = false,
                                 default = nil)
  if valid_613973 != nil:
    section.add "X-Amz-Date", valid_613973
  var valid_613974 = header.getOrDefault("X-Amz-Credential")
  valid_613974 = validateParameter(valid_613974, JString, required = false,
                                 default = nil)
  if valid_613974 != nil:
    section.add "X-Amz-Credential", valid_613974
  var valid_613975 = header.getOrDefault("X-Amz-Security-Token")
  valid_613975 = validateParameter(valid_613975, JString, required = false,
                                 default = nil)
  if valid_613975 != nil:
    section.add "X-Amz-Security-Token", valid_613975
  var valid_613976 = header.getOrDefault("X-Amz-Algorithm")
  valid_613976 = validateParameter(valid_613976, JString, required = false,
                                 default = nil)
  if valid_613976 != nil:
    section.add "X-Amz-Algorithm", valid_613976
  var valid_613977 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613977 = validateParameter(valid_613977, JString, required = false,
                                 default = nil)
  if valid_613977 != nil:
    section.add "X-Amz-SignedHeaders", valid_613977
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613978: Call_GetDescribeDBSnapshotAttributes_613965;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_613978.validator(path, query, header, formData, body)
  let scheme = call_613978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613978.url(scheme.get, call_613978.host, call_613978.base,
                         call_613978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613978, url, valid)

proc call*(call_613979: Call_GetDescribeDBSnapshotAttributes_613965;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613980 = newJObject()
  add(query_613980, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_613980, "Action", newJString(Action))
  add(query_613980, "Version", newJString(Version))
  result = call_613979.call(nil, query_613980, nil, nil, nil)

var getDescribeDBSnapshotAttributes* = Call_GetDescribeDBSnapshotAttributes_613965(
    name: "getDescribeDBSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_GetDescribeDBSnapshotAttributes_613966, base: "/",
    url: url_GetDescribeDBSnapshotAttributes_613967,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshots_614022 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBSnapshots_614024(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshots_614023(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614025 = query.getOrDefault("Action")
  valid_614025 = validateParameter(valid_614025, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_614025 != nil:
    section.add "Action", valid_614025
  var valid_614026 = query.getOrDefault("Version")
  valid_614026 = validateParameter(valid_614026, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614026 != nil:
    section.add "Version", valid_614026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614027 = header.getOrDefault("X-Amz-Signature")
  valid_614027 = validateParameter(valid_614027, JString, required = false,
                                 default = nil)
  if valid_614027 != nil:
    section.add "X-Amz-Signature", valid_614027
  var valid_614028 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614028 = validateParameter(valid_614028, JString, required = false,
                                 default = nil)
  if valid_614028 != nil:
    section.add "X-Amz-Content-Sha256", valid_614028
  var valid_614029 = header.getOrDefault("X-Amz-Date")
  valid_614029 = validateParameter(valid_614029, JString, required = false,
                                 default = nil)
  if valid_614029 != nil:
    section.add "X-Amz-Date", valid_614029
  var valid_614030 = header.getOrDefault("X-Amz-Credential")
  valid_614030 = validateParameter(valid_614030, JString, required = false,
                                 default = nil)
  if valid_614030 != nil:
    section.add "X-Amz-Credential", valid_614030
  var valid_614031 = header.getOrDefault("X-Amz-Security-Token")
  valid_614031 = validateParameter(valid_614031, JString, required = false,
                                 default = nil)
  if valid_614031 != nil:
    section.add "X-Amz-Security-Token", valid_614031
  var valid_614032 = header.getOrDefault("X-Amz-Algorithm")
  valid_614032 = validateParameter(valid_614032, JString, required = false,
                                 default = nil)
  if valid_614032 != nil:
    section.add "X-Amz-Algorithm", valid_614032
  var valid_614033 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614033 = validateParameter(valid_614033, JString, required = false,
                                 default = nil)
  if valid_614033 != nil:
    section.add "X-Amz-SignedHeaders", valid_614033
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  section = newJObject()
  var valid_614034 = formData.getOrDefault("SnapshotType")
  valid_614034 = validateParameter(valid_614034, JString, required = false,
                                 default = nil)
  if valid_614034 != nil:
    section.add "SnapshotType", valid_614034
  var valid_614035 = formData.getOrDefault("MaxRecords")
  valid_614035 = validateParameter(valid_614035, JInt, required = false, default = nil)
  if valid_614035 != nil:
    section.add "MaxRecords", valid_614035
  var valid_614036 = formData.getOrDefault("IncludePublic")
  valid_614036 = validateParameter(valid_614036, JBool, required = false, default = nil)
  if valid_614036 != nil:
    section.add "IncludePublic", valid_614036
  var valid_614037 = formData.getOrDefault("Marker")
  valid_614037 = validateParameter(valid_614037, JString, required = false,
                                 default = nil)
  if valid_614037 != nil:
    section.add "Marker", valid_614037
  var valid_614038 = formData.getOrDefault("DbiResourceId")
  valid_614038 = validateParameter(valid_614038, JString, required = false,
                                 default = nil)
  if valid_614038 != nil:
    section.add "DbiResourceId", valid_614038
  var valid_614039 = formData.getOrDefault("IncludeShared")
  valid_614039 = validateParameter(valid_614039, JBool, required = false, default = nil)
  if valid_614039 != nil:
    section.add "IncludeShared", valid_614039
  var valid_614040 = formData.getOrDefault("DBInstanceIdentifier")
  valid_614040 = validateParameter(valid_614040, JString, required = false,
                                 default = nil)
  if valid_614040 != nil:
    section.add "DBInstanceIdentifier", valid_614040
  var valid_614041 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_614041 = validateParameter(valid_614041, JString, required = false,
                                 default = nil)
  if valid_614041 != nil:
    section.add "DBSnapshotIdentifier", valid_614041
  var valid_614042 = formData.getOrDefault("Filters")
  valid_614042 = validateParameter(valid_614042, JArray, required = false,
                                 default = nil)
  if valid_614042 != nil:
    section.add "Filters", valid_614042
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614043: Call_PostDescribeDBSnapshots_614022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_614043.validator(path, query, header, formData, body)
  let scheme = call_614043.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614043.url(scheme.get, call_614043.host, call_614043.base,
                         call_614043.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614043, url, valid)

proc call*(call_614044: Call_PostDescribeDBSnapshots_614022;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DbiResourceId: string = ""; IncludeShared: bool = false;
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          Action: string = "DescribeDBSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_614045 = newJObject()
  var formData_614046 = newJObject()
  add(formData_614046, "SnapshotType", newJString(SnapshotType))
  add(formData_614046, "MaxRecords", newJInt(MaxRecords))
  add(formData_614046, "IncludePublic", newJBool(IncludePublic))
  add(formData_614046, "Marker", newJString(Marker))
  add(formData_614046, "DbiResourceId", newJString(DbiResourceId))
  add(formData_614046, "IncludeShared", newJBool(IncludeShared))
  add(formData_614046, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_614046, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_614045, "Action", newJString(Action))
  if Filters != nil:
    formData_614046.add "Filters", Filters
  add(query_614045, "Version", newJString(Version))
  result = call_614044.call(nil, query_614045, nil, formData_614046, nil)

var postDescribeDBSnapshots* = Call_PostDescribeDBSnapshots_614022(
    name: "postDescribeDBSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_PostDescribeDBSnapshots_614023, base: "/",
    url: url_PostDescribeDBSnapshots_614024, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshots_613998 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBSnapshots_614000(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshots_613999(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614001 = query.getOrDefault("DbiResourceId")
  valid_614001 = validateParameter(valid_614001, JString, required = false,
                                 default = nil)
  if valid_614001 != nil:
    section.add "DbiResourceId", valid_614001
  var valid_614002 = query.getOrDefault("Marker")
  valid_614002 = validateParameter(valid_614002, JString, required = false,
                                 default = nil)
  if valid_614002 != nil:
    section.add "Marker", valid_614002
  var valid_614003 = query.getOrDefault("DBInstanceIdentifier")
  valid_614003 = validateParameter(valid_614003, JString, required = false,
                                 default = nil)
  if valid_614003 != nil:
    section.add "DBInstanceIdentifier", valid_614003
  var valid_614004 = query.getOrDefault("DBSnapshotIdentifier")
  valid_614004 = validateParameter(valid_614004, JString, required = false,
                                 default = nil)
  if valid_614004 != nil:
    section.add "DBSnapshotIdentifier", valid_614004
  var valid_614005 = query.getOrDefault("SnapshotType")
  valid_614005 = validateParameter(valid_614005, JString, required = false,
                                 default = nil)
  if valid_614005 != nil:
    section.add "SnapshotType", valid_614005
  var valid_614006 = query.getOrDefault("IncludePublic")
  valid_614006 = validateParameter(valid_614006, JBool, required = false, default = nil)
  if valid_614006 != nil:
    section.add "IncludePublic", valid_614006
  var valid_614007 = query.getOrDefault("Action")
  valid_614007 = validateParameter(valid_614007, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_614007 != nil:
    section.add "Action", valid_614007
  var valid_614008 = query.getOrDefault("IncludeShared")
  valid_614008 = validateParameter(valid_614008, JBool, required = false, default = nil)
  if valid_614008 != nil:
    section.add "IncludeShared", valid_614008
  var valid_614009 = query.getOrDefault("Version")
  valid_614009 = validateParameter(valid_614009, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614009 != nil:
    section.add "Version", valid_614009
  var valid_614010 = query.getOrDefault("Filters")
  valid_614010 = validateParameter(valid_614010, JArray, required = false,
                                 default = nil)
  if valid_614010 != nil:
    section.add "Filters", valid_614010
  var valid_614011 = query.getOrDefault("MaxRecords")
  valid_614011 = validateParameter(valid_614011, JInt, required = false, default = nil)
  if valid_614011 != nil:
    section.add "MaxRecords", valid_614011
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614012 = header.getOrDefault("X-Amz-Signature")
  valid_614012 = validateParameter(valid_614012, JString, required = false,
                                 default = nil)
  if valid_614012 != nil:
    section.add "X-Amz-Signature", valid_614012
  var valid_614013 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614013 = validateParameter(valid_614013, JString, required = false,
                                 default = nil)
  if valid_614013 != nil:
    section.add "X-Amz-Content-Sha256", valid_614013
  var valid_614014 = header.getOrDefault("X-Amz-Date")
  valid_614014 = validateParameter(valid_614014, JString, required = false,
                                 default = nil)
  if valid_614014 != nil:
    section.add "X-Amz-Date", valid_614014
  var valid_614015 = header.getOrDefault("X-Amz-Credential")
  valid_614015 = validateParameter(valid_614015, JString, required = false,
                                 default = nil)
  if valid_614015 != nil:
    section.add "X-Amz-Credential", valid_614015
  var valid_614016 = header.getOrDefault("X-Amz-Security-Token")
  valid_614016 = validateParameter(valid_614016, JString, required = false,
                                 default = nil)
  if valid_614016 != nil:
    section.add "X-Amz-Security-Token", valid_614016
  var valid_614017 = header.getOrDefault("X-Amz-Algorithm")
  valid_614017 = validateParameter(valid_614017, JString, required = false,
                                 default = nil)
  if valid_614017 != nil:
    section.add "X-Amz-Algorithm", valid_614017
  var valid_614018 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614018 = validateParameter(valid_614018, JString, required = false,
                                 default = nil)
  if valid_614018 != nil:
    section.add "X-Amz-SignedHeaders", valid_614018
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614019: Call_GetDescribeDBSnapshots_613998; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_614019.validator(path, query, header, formData, body)
  let scheme = call_614019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614019.url(scheme.get, call_614019.host, call_614019.base,
                         call_614019.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614019, url, valid)

proc call*(call_614020: Call_GetDescribeDBSnapshots_613998;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          SnapshotType: string = ""; IncludePublic: bool = false;
          Action: string = "DescribeDBSnapshots"; IncludeShared: bool = false;
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614021 = newJObject()
  add(query_614021, "DbiResourceId", newJString(DbiResourceId))
  add(query_614021, "Marker", newJString(Marker))
  add(query_614021, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614021, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_614021, "SnapshotType", newJString(SnapshotType))
  add(query_614021, "IncludePublic", newJBool(IncludePublic))
  add(query_614021, "Action", newJString(Action))
  add(query_614021, "IncludeShared", newJBool(IncludeShared))
  add(query_614021, "Version", newJString(Version))
  if Filters != nil:
    query_614021.add "Filters", Filters
  add(query_614021, "MaxRecords", newJInt(MaxRecords))
  result = call_614020.call(nil, query_614021, nil, nil, nil)

var getDescribeDBSnapshots* = Call_GetDescribeDBSnapshots_613998(
    name: "getDescribeDBSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_GetDescribeDBSnapshots_613999, base: "/",
    url: url_GetDescribeDBSnapshots_614000, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_614066 = ref object of OpenApiRestCall_610658
proc url_PostDescribeDBSubnetGroups_614068(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSubnetGroups_614067(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614069 = query.getOrDefault("Action")
  valid_614069 = validateParameter(valid_614069, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_614069 != nil:
    section.add "Action", valid_614069
  var valid_614070 = query.getOrDefault("Version")
  valid_614070 = validateParameter(valid_614070, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614070 != nil:
    section.add "Version", valid_614070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614071 = header.getOrDefault("X-Amz-Signature")
  valid_614071 = validateParameter(valid_614071, JString, required = false,
                                 default = nil)
  if valid_614071 != nil:
    section.add "X-Amz-Signature", valid_614071
  var valid_614072 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614072 = validateParameter(valid_614072, JString, required = false,
                                 default = nil)
  if valid_614072 != nil:
    section.add "X-Amz-Content-Sha256", valid_614072
  var valid_614073 = header.getOrDefault("X-Amz-Date")
  valid_614073 = validateParameter(valid_614073, JString, required = false,
                                 default = nil)
  if valid_614073 != nil:
    section.add "X-Amz-Date", valid_614073
  var valid_614074 = header.getOrDefault("X-Amz-Credential")
  valid_614074 = validateParameter(valid_614074, JString, required = false,
                                 default = nil)
  if valid_614074 != nil:
    section.add "X-Amz-Credential", valid_614074
  var valid_614075 = header.getOrDefault("X-Amz-Security-Token")
  valid_614075 = validateParameter(valid_614075, JString, required = false,
                                 default = nil)
  if valid_614075 != nil:
    section.add "X-Amz-Security-Token", valid_614075
  var valid_614076 = header.getOrDefault("X-Amz-Algorithm")
  valid_614076 = validateParameter(valid_614076, JString, required = false,
                                 default = nil)
  if valid_614076 != nil:
    section.add "X-Amz-Algorithm", valid_614076
  var valid_614077 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614077 = validateParameter(valid_614077, JString, required = false,
                                 default = nil)
  if valid_614077 != nil:
    section.add "X-Amz-SignedHeaders", valid_614077
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_614078 = formData.getOrDefault("MaxRecords")
  valid_614078 = validateParameter(valid_614078, JInt, required = false, default = nil)
  if valid_614078 != nil:
    section.add "MaxRecords", valid_614078
  var valid_614079 = formData.getOrDefault("Marker")
  valid_614079 = validateParameter(valid_614079, JString, required = false,
                                 default = nil)
  if valid_614079 != nil:
    section.add "Marker", valid_614079
  var valid_614080 = formData.getOrDefault("DBSubnetGroupName")
  valid_614080 = validateParameter(valid_614080, JString, required = false,
                                 default = nil)
  if valid_614080 != nil:
    section.add "DBSubnetGroupName", valid_614080
  var valid_614081 = formData.getOrDefault("Filters")
  valid_614081 = validateParameter(valid_614081, JArray, required = false,
                                 default = nil)
  if valid_614081 != nil:
    section.add "Filters", valid_614081
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614082: Call_PostDescribeDBSubnetGroups_614066; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_614082.validator(path, query, header, formData, body)
  let scheme = call_614082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614082.url(scheme.get, call_614082.host, call_614082.base,
                         call_614082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614082, url, valid)

proc call*(call_614083: Call_PostDescribeDBSubnetGroups_614066;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_614084 = newJObject()
  var formData_614085 = newJObject()
  add(formData_614085, "MaxRecords", newJInt(MaxRecords))
  add(formData_614085, "Marker", newJString(Marker))
  add(query_614084, "Action", newJString(Action))
  add(formData_614085, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if Filters != nil:
    formData_614085.add "Filters", Filters
  add(query_614084, "Version", newJString(Version))
  result = call_614083.call(nil, query_614084, nil, formData_614085, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_614066(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_614067, base: "/",
    url: url_PostDescribeDBSubnetGroups_614068,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_614047 = ref object of OpenApiRestCall_610658
proc url_GetDescribeDBSubnetGroups_614049(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSubnetGroups_614048(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614050 = query.getOrDefault("Marker")
  valid_614050 = validateParameter(valid_614050, JString, required = false,
                                 default = nil)
  if valid_614050 != nil:
    section.add "Marker", valid_614050
  var valid_614051 = query.getOrDefault("Action")
  valid_614051 = validateParameter(valid_614051, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_614051 != nil:
    section.add "Action", valid_614051
  var valid_614052 = query.getOrDefault("DBSubnetGroupName")
  valid_614052 = validateParameter(valid_614052, JString, required = false,
                                 default = nil)
  if valid_614052 != nil:
    section.add "DBSubnetGroupName", valid_614052
  var valid_614053 = query.getOrDefault("Version")
  valid_614053 = validateParameter(valid_614053, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614053 != nil:
    section.add "Version", valid_614053
  var valid_614054 = query.getOrDefault("Filters")
  valid_614054 = validateParameter(valid_614054, JArray, required = false,
                                 default = nil)
  if valid_614054 != nil:
    section.add "Filters", valid_614054
  var valid_614055 = query.getOrDefault("MaxRecords")
  valid_614055 = validateParameter(valid_614055, JInt, required = false, default = nil)
  if valid_614055 != nil:
    section.add "MaxRecords", valid_614055
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614056 = header.getOrDefault("X-Amz-Signature")
  valid_614056 = validateParameter(valid_614056, JString, required = false,
                                 default = nil)
  if valid_614056 != nil:
    section.add "X-Amz-Signature", valid_614056
  var valid_614057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614057 = validateParameter(valid_614057, JString, required = false,
                                 default = nil)
  if valid_614057 != nil:
    section.add "X-Amz-Content-Sha256", valid_614057
  var valid_614058 = header.getOrDefault("X-Amz-Date")
  valid_614058 = validateParameter(valid_614058, JString, required = false,
                                 default = nil)
  if valid_614058 != nil:
    section.add "X-Amz-Date", valid_614058
  var valid_614059 = header.getOrDefault("X-Amz-Credential")
  valid_614059 = validateParameter(valid_614059, JString, required = false,
                                 default = nil)
  if valid_614059 != nil:
    section.add "X-Amz-Credential", valid_614059
  var valid_614060 = header.getOrDefault("X-Amz-Security-Token")
  valid_614060 = validateParameter(valid_614060, JString, required = false,
                                 default = nil)
  if valid_614060 != nil:
    section.add "X-Amz-Security-Token", valid_614060
  var valid_614061 = header.getOrDefault("X-Amz-Algorithm")
  valid_614061 = validateParameter(valid_614061, JString, required = false,
                                 default = nil)
  if valid_614061 != nil:
    section.add "X-Amz-Algorithm", valid_614061
  var valid_614062 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614062 = validateParameter(valid_614062, JString, required = false,
                                 default = nil)
  if valid_614062 != nil:
    section.add "X-Amz-SignedHeaders", valid_614062
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614063: Call_GetDescribeDBSubnetGroups_614047; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_614063.validator(path, query, header, formData, body)
  let scheme = call_614063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614063.url(scheme.get, call_614063.host, call_614063.base,
                         call_614063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614063, url, valid)

proc call*(call_614064: Call_GetDescribeDBSubnetGroups_614047; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614065 = newJObject()
  add(query_614065, "Marker", newJString(Marker))
  add(query_614065, "Action", newJString(Action))
  add(query_614065, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_614065, "Version", newJString(Version))
  if Filters != nil:
    query_614065.add "Filters", Filters
  add(query_614065, "MaxRecords", newJInt(MaxRecords))
  result = call_614064.call(nil, query_614065, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_614047(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_614048, base: "/",
    url: url_GetDescribeDBSubnetGroups_614049,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_614105 = ref object of OpenApiRestCall_610658
proc url_PostDescribeEngineDefaultClusterParameters_614107(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_614106(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614108 = query.getOrDefault("Action")
  valid_614108 = validateParameter(valid_614108, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_614108 != nil:
    section.add "Action", valid_614108
  var valid_614109 = query.getOrDefault("Version")
  valid_614109 = validateParameter(valid_614109, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614109 != nil:
    section.add "Version", valid_614109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614110 = header.getOrDefault("X-Amz-Signature")
  valid_614110 = validateParameter(valid_614110, JString, required = false,
                                 default = nil)
  if valid_614110 != nil:
    section.add "X-Amz-Signature", valid_614110
  var valid_614111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614111 = validateParameter(valid_614111, JString, required = false,
                                 default = nil)
  if valid_614111 != nil:
    section.add "X-Amz-Content-Sha256", valid_614111
  var valid_614112 = header.getOrDefault("X-Amz-Date")
  valid_614112 = validateParameter(valid_614112, JString, required = false,
                                 default = nil)
  if valid_614112 != nil:
    section.add "X-Amz-Date", valid_614112
  var valid_614113 = header.getOrDefault("X-Amz-Credential")
  valid_614113 = validateParameter(valid_614113, JString, required = false,
                                 default = nil)
  if valid_614113 != nil:
    section.add "X-Amz-Credential", valid_614113
  var valid_614114 = header.getOrDefault("X-Amz-Security-Token")
  valid_614114 = validateParameter(valid_614114, JString, required = false,
                                 default = nil)
  if valid_614114 != nil:
    section.add "X-Amz-Security-Token", valid_614114
  var valid_614115 = header.getOrDefault("X-Amz-Algorithm")
  valid_614115 = validateParameter(valid_614115, JString, required = false,
                                 default = nil)
  if valid_614115 != nil:
    section.add "X-Amz-Algorithm", valid_614115
  var valid_614116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614116 = validateParameter(valid_614116, JString, required = false,
                                 default = nil)
  if valid_614116 != nil:
    section.add "X-Amz-SignedHeaders", valid_614116
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  section = newJObject()
  var valid_614117 = formData.getOrDefault("MaxRecords")
  valid_614117 = validateParameter(valid_614117, JInt, required = false, default = nil)
  if valid_614117 != nil:
    section.add "MaxRecords", valid_614117
  var valid_614118 = formData.getOrDefault("Marker")
  valid_614118 = validateParameter(valid_614118, JString, required = false,
                                 default = nil)
  if valid_614118 != nil:
    section.add "Marker", valid_614118
  var valid_614119 = formData.getOrDefault("Filters")
  valid_614119 = validateParameter(valid_614119, JArray, required = false,
                                 default = nil)
  if valid_614119 != nil:
    section.add "Filters", valid_614119
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_614120 = formData.getOrDefault("DBParameterGroupFamily")
  valid_614120 = validateParameter(valid_614120, JString, required = true,
                                 default = nil)
  if valid_614120 != nil:
    section.add "DBParameterGroupFamily", valid_614120
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614121: Call_PostDescribeEngineDefaultClusterParameters_614105;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_614121.validator(path, query, header, formData, body)
  let scheme = call_614121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614121.url(scheme.get, call_614121.host, call_614121.base,
                         call_614121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614121, url, valid)

proc call*(call_614122: Call_PostDescribeEngineDefaultClusterParameters_614105;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  var query_614123 = newJObject()
  var formData_614124 = newJObject()
  add(formData_614124, "MaxRecords", newJInt(MaxRecords))
  add(formData_614124, "Marker", newJString(Marker))
  add(query_614123, "Action", newJString(Action))
  if Filters != nil:
    formData_614124.add "Filters", Filters
  add(query_614123, "Version", newJString(Version))
  add(formData_614124, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_614122.call(nil, query_614123, nil, formData_614124, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_614105(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_614106,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_614107,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_614086 = ref object of OpenApiRestCall_610658
proc url_GetDescribeEngineDefaultClusterParameters_614088(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_614087(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614089 = query.getOrDefault("Marker")
  valid_614089 = validateParameter(valid_614089, JString, required = false,
                                 default = nil)
  if valid_614089 != nil:
    section.add "Marker", valid_614089
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_614090 = query.getOrDefault("DBParameterGroupFamily")
  valid_614090 = validateParameter(valid_614090, JString, required = true,
                                 default = nil)
  if valid_614090 != nil:
    section.add "DBParameterGroupFamily", valid_614090
  var valid_614091 = query.getOrDefault("Action")
  valid_614091 = validateParameter(valid_614091, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_614091 != nil:
    section.add "Action", valid_614091
  var valid_614092 = query.getOrDefault("Version")
  valid_614092 = validateParameter(valid_614092, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614092 != nil:
    section.add "Version", valid_614092
  var valid_614093 = query.getOrDefault("Filters")
  valid_614093 = validateParameter(valid_614093, JArray, required = false,
                                 default = nil)
  if valid_614093 != nil:
    section.add "Filters", valid_614093
  var valid_614094 = query.getOrDefault("MaxRecords")
  valid_614094 = validateParameter(valid_614094, JInt, required = false, default = nil)
  if valid_614094 != nil:
    section.add "MaxRecords", valid_614094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614095 = header.getOrDefault("X-Amz-Signature")
  valid_614095 = validateParameter(valid_614095, JString, required = false,
                                 default = nil)
  if valid_614095 != nil:
    section.add "X-Amz-Signature", valid_614095
  var valid_614096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614096 = validateParameter(valid_614096, JString, required = false,
                                 default = nil)
  if valid_614096 != nil:
    section.add "X-Amz-Content-Sha256", valid_614096
  var valid_614097 = header.getOrDefault("X-Amz-Date")
  valid_614097 = validateParameter(valid_614097, JString, required = false,
                                 default = nil)
  if valid_614097 != nil:
    section.add "X-Amz-Date", valid_614097
  var valid_614098 = header.getOrDefault("X-Amz-Credential")
  valid_614098 = validateParameter(valid_614098, JString, required = false,
                                 default = nil)
  if valid_614098 != nil:
    section.add "X-Amz-Credential", valid_614098
  var valid_614099 = header.getOrDefault("X-Amz-Security-Token")
  valid_614099 = validateParameter(valid_614099, JString, required = false,
                                 default = nil)
  if valid_614099 != nil:
    section.add "X-Amz-Security-Token", valid_614099
  var valid_614100 = header.getOrDefault("X-Amz-Algorithm")
  valid_614100 = validateParameter(valid_614100, JString, required = false,
                                 default = nil)
  if valid_614100 != nil:
    section.add "X-Amz-Algorithm", valid_614100
  var valid_614101 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614101 = validateParameter(valid_614101, JString, required = false,
                                 default = nil)
  if valid_614101 != nil:
    section.add "X-Amz-SignedHeaders", valid_614101
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614102: Call_GetDescribeEngineDefaultClusterParameters_614086;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_614102.validator(path, query, header, formData, body)
  let scheme = call_614102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614102.url(scheme.get, call_614102.host, call_614102.base,
                         call_614102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614102, url, valid)

proc call*(call_614103: Call_GetDescribeEngineDefaultClusterParameters_614086;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614104 = newJObject()
  add(query_614104, "Marker", newJString(Marker))
  add(query_614104, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_614104, "Action", newJString(Action))
  add(query_614104, "Version", newJString(Version))
  if Filters != nil:
    query_614104.add "Filters", Filters
  add(query_614104, "MaxRecords", newJInt(MaxRecords))
  result = call_614103.call(nil, query_614104, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_614086(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_614087,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_614088,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_614144 = ref object of OpenApiRestCall_610658
proc url_PostDescribeEngineDefaultParameters_614146(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_614145(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614147 = query.getOrDefault("Action")
  valid_614147 = validateParameter(valid_614147, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_614147 != nil:
    section.add "Action", valid_614147
  var valid_614148 = query.getOrDefault("Version")
  valid_614148 = validateParameter(valid_614148, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614148 != nil:
    section.add "Version", valid_614148
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614149 = header.getOrDefault("X-Amz-Signature")
  valid_614149 = validateParameter(valid_614149, JString, required = false,
                                 default = nil)
  if valid_614149 != nil:
    section.add "X-Amz-Signature", valid_614149
  var valid_614150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614150 = validateParameter(valid_614150, JString, required = false,
                                 default = nil)
  if valid_614150 != nil:
    section.add "X-Amz-Content-Sha256", valid_614150
  var valid_614151 = header.getOrDefault("X-Amz-Date")
  valid_614151 = validateParameter(valid_614151, JString, required = false,
                                 default = nil)
  if valid_614151 != nil:
    section.add "X-Amz-Date", valid_614151
  var valid_614152 = header.getOrDefault("X-Amz-Credential")
  valid_614152 = validateParameter(valid_614152, JString, required = false,
                                 default = nil)
  if valid_614152 != nil:
    section.add "X-Amz-Credential", valid_614152
  var valid_614153 = header.getOrDefault("X-Amz-Security-Token")
  valid_614153 = validateParameter(valid_614153, JString, required = false,
                                 default = nil)
  if valid_614153 != nil:
    section.add "X-Amz-Security-Token", valid_614153
  var valid_614154 = header.getOrDefault("X-Amz-Algorithm")
  valid_614154 = validateParameter(valid_614154, JString, required = false,
                                 default = nil)
  if valid_614154 != nil:
    section.add "X-Amz-Algorithm", valid_614154
  var valid_614155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614155 = validateParameter(valid_614155, JString, required = false,
                                 default = nil)
  if valid_614155 != nil:
    section.add "X-Amz-SignedHeaders", valid_614155
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  section = newJObject()
  var valid_614156 = formData.getOrDefault("MaxRecords")
  valid_614156 = validateParameter(valid_614156, JInt, required = false, default = nil)
  if valid_614156 != nil:
    section.add "MaxRecords", valid_614156
  var valid_614157 = formData.getOrDefault("Marker")
  valid_614157 = validateParameter(valid_614157, JString, required = false,
                                 default = nil)
  if valid_614157 != nil:
    section.add "Marker", valid_614157
  var valid_614158 = formData.getOrDefault("Filters")
  valid_614158 = validateParameter(valid_614158, JArray, required = false,
                                 default = nil)
  if valid_614158 != nil:
    section.add "Filters", valid_614158
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_614159 = formData.getOrDefault("DBParameterGroupFamily")
  valid_614159 = validateParameter(valid_614159, JString, required = true,
                                 default = nil)
  if valid_614159 != nil:
    section.add "DBParameterGroupFamily", valid_614159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614160: Call_PostDescribeEngineDefaultParameters_614144;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_614160.validator(path, query, header, formData, body)
  let scheme = call_614160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614160.url(scheme.get, call_614160.host, call_614160.base,
                         call_614160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614160, url, valid)

proc call*(call_614161: Call_PostDescribeEngineDefaultParameters_614144;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  var query_614162 = newJObject()
  var formData_614163 = newJObject()
  add(formData_614163, "MaxRecords", newJInt(MaxRecords))
  add(formData_614163, "Marker", newJString(Marker))
  add(query_614162, "Action", newJString(Action))
  if Filters != nil:
    formData_614163.add "Filters", Filters
  add(query_614162, "Version", newJString(Version))
  add(formData_614163, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_614161.call(nil, query_614162, nil, formData_614163, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_614144(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_614145, base: "/",
    url: url_PostDescribeEngineDefaultParameters_614146,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_614125 = ref object of OpenApiRestCall_610658
proc url_GetDescribeEngineDefaultParameters_614127(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_614126(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614128 = query.getOrDefault("Marker")
  valid_614128 = validateParameter(valid_614128, JString, required = false,
                                 default = nil)
  if valid_614128 != nil:
    section.add "Marker", valid_614128
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_614129 = query.getOrDefault("DBParameterGroupFamily")
  valid_614129 = validateParameter(valid_614129, JString, required = true,
                                 default = nil)
  if valid_614129 != nil:
    section.add "DBParameterGroupFamily", valid_614129
  var valid_614130 = query.getOrDefault("Action")
  valid_614130 = validateParameter(valid_614130, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_614130 != nil:
    section.add "Action", valid_614130
  var valid_614131 = query.getOrDefault("Version")
  valid_614131 = validateParameter(valid_614131, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614131 != nil:
    section.add "Version", valid_614131
  var valid_614132 = query.getOrDefault("Filters")
  valid_614132 = validateParameter(valid_614132, JArray, required = false,
                                 default = nil)
  if valid_614132 != nil:
    section.add "Filters", valid_614132
  var valid_614133 = query.getOrDefault("MaxRecords")
  valid_614133 = validateParameter(valid_614133, JInt, required = false, default = nil)
  if valid_614133 != nil:
    section.add "MaxRecords", valid_614133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614134 = header.getOrDefault("X-Amz-Signature")
  valid_614134 = validateParameter(valid_614134, JString, required = false,
                                 default = nil)
  if valid_614134 != nil:
    section.add "X-Amz-Signature", valid_614134
  var valid_614135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614135 = validateParameter(valid_614135, JString, required = false,
                                 default = nil)
  if valid_614135 != nil:
    section.add "X-Amz-Content-Sha256", valid_614135
  var valid_614136 = header.getOrDefault("X-Amz-Date")
  valid_614136 = validateParameter(valid_614136, JString, required = false,
                                 default = nil)
  if valid_614136 != nil:
    section.add "X-Amz-Date", valid_614136
  var valid_614137 = header.getOrDefault("X-Amz-Credential")
  valid_614137 = validateParameter(valid_614137, JString, required = false,
                                 default = nil)
  if valid_614137 != nil:
    section.add "X-Amz-Credential", valid_614137
  var valid_614138 = header.getOrDefault("X-Amz-Security-Token")
  valid_614138 = validateParameter(valid_614138, JString, required = false,
                                 default = nil)
  if valid_614138 != nil:
    section.add "X-Amz-Security-Token", valid_614138
  var valid_614139 = header.getOrDefault("X-Amz-Algorithm")
  valid_614139 = validateParameter(valid_614139, JString, required = false,
                                 default = nil)
  if valid_614139 != nil:
    section.add "X-Amz-Algorithm", valid_614139
  var valid_614140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614140 = validateParameter(valid_614140, JString, required = false,
                                 default = nil)
  if valid_614140 != nil:
    section.add "X-Amz-SignedHeaders", valid_614140
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614141: Call_GetDescribeEngineDefaultParameters_614125;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_614141.validator(path, query, header, formData, body)
  let scheme = call_614141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614141.url(scheme.get, call_614141.host, call_614141.base,
                         call_614141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614141, url, valid)

proc call*(call_614142: Call_GetDescribeEngineDefaultParameters_614125;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614143 = newJObject()
  add(query_614143, "Marker", newJString(Marker))
  add(query_614143, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_614143, "Action", newJString(Action))
  add(query_614143, "Version", newJString(Version))
  if Filters != nil:
    query_614143.add "Filters", Filters
  add(query_614143, "MaxRecords", newJInt(MaxRecords))
  result = call_614142.call(nil, query_614143, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_614125(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_614126, base: "/",
    url: url_GetDescribeEngineDefaultParameters_614127,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_614181 = ref object of OpenApiRestCall_610658
proc url_PostDescribeEventCategories_614183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_614182(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614184 = query.getOrDefault("Action")
  valid_614184 = validateParameter(valid_614184, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_614184 != nil:
    section.add "Action", valid_614184
  var valid_614185 = query.getOrDefault("Version")
  valid_614185 = validateParameter(valid_614185, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614185 != nil:
    section.add "Version", valid_614185
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614186 = header.getOrDefault("X-Amz-Signature")
  valid_614186 = validateParameter(valid_614186, JString, required = false,
                                 default = nil)
  if valid_614186 != nil:
    section.add "X-Amz-Signature", valid_614186
  var valid_614187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614187 = validateParameter(valid_614187, JString, required = false,
                                 default = nil)
  if valid_614187 != nil:
    section.add "X-Amz-Content-Sha256", valid_614187
  var valid_614188 = header.getOrDefault("X-Amz-Date")
  valid_614188 = validateParameter(valid_614188, JString, required = false,
                                 default = nil)
  if valid_614188 != nil:
    section.add "X-Amz-Date", valid_614188
  var valid_614189 = header.getOrDefault("X-Amz-Credential")
  valid_614189 = validateParameter(valid_614189, JString, required = false,
                                 default = nil)
  if valid_614189 != nil:
    section.add "X-Amz-Credential", valid_614189
  var valid_614190 = header.getOrDefault("X-Amz-Security-Token")
  valid_614190 = validateParameter(valid_614190, JString, required = false,
                                 default = nil)
  if valid_614190 != nil:
    section.add "X-Amz-Security-Token", valid_614190
  var valid_614191 = header.getOrDefault("X-Amz-Algorithm")
  valid_614191 = validateParameter(valid_614191, JString, required = false,
                                 default = nil)
  if valid_614191 != nil:
    section.add "X-Amz-Algorithm", valid_614191
  var valid_614192 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614192 = validateParameter(valid_614192, JString, required = false,
                                 default = nil)
  if valid_614192 != nil:
    section.add "X-Amz-SignedHeaders", valid_614192
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_614193 = formData.getOrDefault("SourceType")
  valid_614193 = validateParameter(valid_614193, JString, required = false,
                                 default = nil)
  if valid_614193 != nil:
    section.add "SourceType", valid_614193
  var valid_614194 = formData.getOrDefault("Filters")
  valid_614194 = validateParameter(valid_614194, JArray, required = false,
                                 default = nil)
  if valid_614194 != nil:
    section.add "Filters", valid_614194
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614195: Call_PostDescribeEventCategories_614181; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_614195.validator(path, query, header, formData, body)
  let scheme = call_614195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614195.url(scheme.get, call_614195.host, call_614195.base,
                         call_614195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614195, url, valid)

proc call*(call_614196: Call_PostDescribeEventCategories_614181;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_614197 = newJObject()
  var formData_614198 = newJObject()
  add(formData_614198, "SourceType", newJString(SourceType))
  add(query_614197, "Action", newJString(Action))
  if Filters != nil:
    formData_614198.add "Filters", Filters
  add(query_614197, "Version", newJString(Version))
  result = call_614196.call(nil, query_614197, nil, formData_614198, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_614181(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_614182, base: "/",
    url: url_PostDescribeEventCategories_614183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_614164 = ref object of OpenApiRestCall_610658
proc url_GetDescribeEventCategories_614166(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_614165(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_614167 = query.getOrDefault("SourceType")
  valid_614167 = validateParameter(valid_614167, JString, required = false,
                                 default = nil)
  if valid_614167 != nil:
    section.add "SourceType", valid_614167
  var valid_614168 = query.getOrDefault("Action")
  valid_614168 = validateParameter(valid_614168, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_614168 != nil:
    section.add "Action", valid_614168
  var valid_614169 = query.getOrDefault("Version")
  valid_614169 = validateParameter(valid_614169, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614169 != nil:
    section.add "Version", valid_614169
  var valid_614170 = query.getOrDefault("Filters")
  valid_614170 = validateParameter(valid_614170, JArray, required = false,
                                 default = nil)
  if valid_614170 != nil:
    section.add "Filters", valid_614170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614171 = header.getOrDefault("X-Amz-Signature")
  valid_614171 = validateParameter(valid_614171, JString, required = false,
                                 default = nil)
  if valid_614171 != nil:
    section.add "X-Amz-Signature", valid_614171
  var valid_614172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614172 = validateParameter(valid_614172, JString, required = false,
                                 default = nil)
  if valid_614172 != nil:
    section.add "X-Amz-Content-Sha256", valid_614172
  var valid_614173 = header.getOrDefault("X-Amz-Date")
  valid_614173 = validateParameter(valid_614173, JString, required = false,
                                 default = nil)
  if valid_614173 != nil:
    section.add "X-Amz-Date", valid_614173
  var valid_614174 = header.getOrDefault("X-Amz-Credential")
  valid_614174 = validateParameter(valid_614174, JString, required = false,
                                 default = nil)
  if valid_614174 != nil:
    section.add "X-Amz-Credential", valid_614174
  var valid_614175 = header.getOrDefault("X-Amz-Security-Token")
  valid_614175 = validateParameter(valid_614175, JString, required = false,
                                 default = nil)
  if valid_614175 != nil:
    section.add "X-Amz-Security-Token", valid_614175
  var valid_614176 = header.getOrDefault("X-Amz-Algorithm")
  valid_614176 = validateParameter(valid_614176, JString, required = false,
                                 default = nil)
  if valid_614176 != nil:
    section.add "X-Amz-Algorithm", valid_614176
  var valid_614177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614177 = validateParameter(valid_614177, JString, required = false,
                                 default = nil)
  if valid_614177 != nil:
    section.add "X-Amz-SignedHeaders", valid_614177
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614178: Call_GetDescribeEventCategories_614164; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_614178.validator(path, query, header, formData, body)
  let scheme = call_614178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614178.url(scheme.get, call_614178.host, call_614178.base,
                         call_614178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614178, url, valid)

proc call*(call_614179: Call_GetDescribeEventCategories_614164;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2014-10-31"; Filters: JsonNode = nil): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  var query_614180 = newJObject()
  add(query_614180, "SourceType", newJString(SourceType))
  add(query_614180, "Action", newJString(Action))
  add(query_614180, "Version", newJString(Version))
  if Filters != nil:
    query_614180.add "Filters", Filters
  result = call_614179.call(nil, query_614180, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_614164(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_614165, base: "/",
    url: url_GetDescribeEventCategories_614166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_614218 = ref object of OpenApiRestCall_610658
proc url_PostDescribeEventSubscriptions_614220(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_614219(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614221 = query.getOrDefault("Action")
  valid_614221 = validateParameter(valid_614221, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_614221 != nil:
    section.add "Action", valid_614221
  var valid_614222 = query.getOrDefault("Version")
  valid_614222 = validateParameter(valid_614222, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614222 != nil:
    section.add "Version", valid_614222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614223 = header.getOrDefault("X-Amz-Signature")
  valid_614223 = validateParameter(valid_614223, JString, required = false,
                                 default = nil)
  if valid_614223 != nil:
    section.add "X-Amz-Signature", valid_614223
  var valid_614224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614224 = validateParameter(valid_614224, JString, required = false,
                                 default = nil)
  if valid_614224 != nil:
    section.add "X-Amz-Content-Sha256", valid_614224
  var valid_614225 = header.getOrDefault("X-Amz-Date")
  valid_614225 = validateParameter(valid_614225, JString, required = false,
                                 default = nil)
  if valid_614225 != nil:
    section.add "X-Amz-Date", valid_614225
  var valid_614226 = header.getOrDefault("X-Amz-Credential")
  valid_614226 = validateParameter(valid_614226, JString, required = false,
                                 default = nil)
  if valid_614226 != nil:
    section.add "X-Amz-Credential", valid_614226
  var valid_614227 = header.getOrDefault("X-Amz-Security-Token")
  valid_614227 = validateParameter(valid_614227, JString, required = false,
                                 default = nil)
  if valid_614227 != nil:
    section.add "X-Amz-Security-Token", valid_614227
  var valid_614228 = header.getOrDefault("X-Amz-Algorithm")
  valid_614228 = validateParameter(valid_614228, JString, required = false,
                                 default = nil)
  if valid_614228 != nil:
    section.add "X-Amz-Algorithm", valid_614228
  var valid_614229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614229 = validateParameter(valid_614229, JString, required = false,
                                 default = nil)
  if valid_614229 != nil:
    section.add "X-Amz-SignedHeaders", valid_614229
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_614230 = formData.getOrDefault("MaxRecords")
  valid_614230 = validateParameter(valid_614230, JInt, required = false, default = nil)
  if valid_614230 != nil:
    section.add "MaxRecords", valid_614230
  var valid_614231 = formData.getOrDefault("Marker")
  valid_614231 = validateParameter(valid_614231, JString, required = false,
                                 default = nil)
  if valid_614231 != nil:
    section.add "Marker", valid_614231
  var valid_614232 = formData.getOrDefault("SubscriptionName")
  valid_614232 = validateParameter(valid_614232, JString, required = false,
                                 default = nil)
  if valid_614232 != nil:
    section.add "SubscriptionName", valid_614232
  var valid_614233 = formData.getOrDefault("Filters")
  valid_614233 = validateParameter(valid_614233, JArray, required = false,
                                 default = nil)
  if valid_614233 != nil:
    section.add "Filters", valid_614233
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614234: Call_PostDescribeEventSubscriptions_614218; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_614234.validator(path, query, header, formData, body)
  let scheme = call_614234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614234.url(scheme.get, call_614234.host, call_614234.base,
                         call_614234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614234, url, valid)

proc call*(call_614235: Call_PostDescribeEventSubscriptions_614218;
          MaxRecords: int = 0; Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_614236 = newJObject()
  var formData_614237 = newJObject()
  add(formData_614237, "MaxRecords", newJInt(MaxRecords))
  add(formData_614237, "Marker", newJString(Marker))
  add(formData_614237, "SubscriptionName", newJString(SubscriptionName))
  add(query_614236, "Action", newJString(Action))
  if Filters != nil:
    formData_614237.add "Filters", Filters
  add(query_614236, "Version", newJString(Version))
  result = call_614235.call(nil, query_614236, nil, formData_614237, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_614218(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_614219, base: "/",
    url: url_PostDescribeEventSubscriptions_614220,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_614199 = ref object of OpenApiRestCall_610658
proc url_GetDescribeEventSubscriptions_614201(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_614200(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614202 = query.getOrDefault("Marker")
  valid_614202 = validateParameter(valid_614202, JString, required = false,
                                 default = nil)
  if valid_614202 != nil:
    section.add "Marker", valid_614202
  var valid_614203 = query.getOrDefault("SubscriptionName")
  valid_614203 = validateParameter(valid_614203, JString, required = false,
                                 default = nil)
  if valid_614203 != nil:
    section.add "SubscriptionName", valid_614203
  var valid_614204 = query.getOrDefault("Action")
  valid_614204 = validateParameter(valid_614204, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_614204 != nil:
    section.add "Action", valid_614204
  var valid_614205 = query.getOrDefault("Version")
  valid_614205 = validateParameter(valid_614205, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614205 != nil:
    section.add "Version", valid_614205
  var valid_614206 = query.getOrDefault("Filters")
  valid_614206 = validateParameter(valid_614206, JArray, required = false,
                                 default = nil)
  if valid_614206 != nil:
    section.add "Filters", valid_614206
  var valid_614207 = query.getOrDefault("MaxRecords")
  valid_614207 = validateParameter(valid_614207, JInt, required = false, default = nil)
  if valid_614207 != nil:
    section.add "MaxRecords", valid_614207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614208 = header.getOrDefault("X-Amz-Signature")
  valid_614208 = validateParameter(valid_614208, JString, required = false,
                                 default = nil)
  if valid_614208 != nil:
    section.add "X-Amz-Signature", valid_614208
  var valid_614209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614209 = validateParameter(valid_614209, JString, required = false,
                                 default = nil)
  if valid_614209 != nil:
    section.add "X-Amz-Content-Sha256", valid_614209
  var valid_614210 = header.getOrDefault("X-Amz-Date")
  valid_614210 = validateParameter(valid_614210, JString, required = false,
                                 default = nil)
  if valid_614210 != nil:
    section.add "X-Amz-Date", valid_614210
  var valid_614211 = header.getOrDefault("X-Amz-Credential")
  valid_614211 = validateParameter(valid_614211, JString, required = false,
                                 default = nil)
  if valid_614211 != nil:
    section.add "X-Amz-Credential", valid_614211
  var valid_614212 = header.getOrDefault("X-Amz-Security-Token")
  valid_614212 = validateParameter(valid_614212, JString, required = false,
                                 default = nil)
  if valid_614212 != nil:
    section.add "X-Amz-Security-Token", valid_614212
  var valid_614213 = header.getOrDefault("X-Amz-Algorithm")
  valid_614213 = validateParameter(valid_614213, JString, required = false,
                                 default = nil)
  if valid_614213 != nil:
    section.add "X-Amz-Algorithm", valid_614213
  var valid_614214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614214 = validateParameter(valid_614214, JString, required = false,
                                 default = nil)
  if valid_614214 != nil:
    section.add "X-Amz-SignedHeaders", valid_614214
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614215: Call_GetDescribeEventSubscriptions_614199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_614215.validator(path, query, header, formData, body)
  let scheme = call_614215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614215.url(scheme.get, call_614215.host, call_614215.base,
                         call_614215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614215, url, valid)

proc call*(call_614216: Call_GetDescribeEventSubscriptions_614199;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614217 = newJObject()
  add(query_614217, "Marker", newJString(Marker))
  add(query_614217, "SubscriptionName", newJString(SubscriptionName))
  add(query_614217, "Action", newJString(Action))
  add(query_614217, "Version", newJString(Version))
  if Filters != nil:
    query_614217.add "Filters", Filters
  add(query_614217, "MaxRecords", newJInt(MaxRecords))
  result = call_614216.call(nil, query_614217, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_614199(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_614200, base: "/",
    url: url_GetDescribeEventSubscriptions_614201,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_614262 = ref object of OpenApiRestCall_610658
proc url_PostDescribeEvents_614264(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_614263(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614265 = query.getOrDefault("Action")
  valid_614265 = validateParameter(valid_614265, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_614265 != nil:
    section.add "Action", valid_614265
  var valid_614266 = query.getOrDefault("Version")
  valid_614266 = validateParameter(valid_614266, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614266 != nil:
    section.add "Version", valid_614266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614267 = header.getOrDefault("X-Amz-Signature")
  valid_614267 = validateParameter(valid_614267, JString, required = false,
                                 default = nil)
  if valid_614267 != nil:
    section.add "X-Amz-Signature", valid_614267
  var valid_614268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614268 = validateParameter(valid_614268, JString, required = false,
                                 default = nil)
  if valid_614268 != nil:
    section.add "X-Amz-Content-Sha256", valid_614268
  var valid_614269 = header.getOrDefault("X-Amz-Date")
  valid_614269 = validateParameter(valid_614269, JString, required = false,
                                 default = nil)
  if valid_614269 != nil:
    section.add "X-Amz-Date", valid_614269
  var valid_614270 = header.getOrDefault("X-Amz-Credential")
  valid_614270 = validateParameter(valid_614270, JString, required = false,
                                 default = nil)
  if valid_614270 != nil:
    section.add "X-Amz-Credential", valid_614270
  var valid_614271 = header.getOrDefault("X-Amz-Security-Token")
  valid_614271 = validateParameter(valid_614271, JString, required = false,
                                 default = nil)
  if valid_614271 != nil:
    section.add "X-Amz-Security-Token", valid_614271
  var valid_614272 = header.getOrDefault("X-Amz-Algorithm")
  valid_614272 = validateParameter(valid_614272, JString, required = false,
                                 default = nil)
  if valid_614272 != nil:
    section.add "X-Amz-Algorithm", valid_614272
  var valid_614273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614273 = validateParameter(valid_614273, JString, required = false,
                                 default = nil)
  if valid_614273 != nil:
    section.add "X-Amz-SignedHeaders", valid_614273
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_614274 = formData.getOrDefault("MaxRecords")
  valid_614274 = validateParameter(valid_614274, JInt, required = false, default = nil)
  if valid_614274 != nil:
    section.add "MaxRecords", valid_614274
  var valid_614275 = formData.getOrDefault("Marker")
  valid_614275 = validateParameter(valid_614275, JString, required = false,
                                 default = nil)
  if valid_614275 != nil:
    section.add "Marker", valid_614275
  var valid_614276 = formData.getOrDefault("SourceIdentifier")
  valid_614276 = validateParameter(valid_614276, JString, required = false,
                                 default = nil)
  if valid_614276 != nil:
    section.add "SourceIdentifier", valid_614276
  var valid_614277 = formData.getOrDefault("SourceType")
  valid_614277 = validateParameter(valid_614277, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_614277 != nil:
    section.add "SourceType", valid_614277
  var valid_614278 = formData.getOrDefault("Duration")
  valid_614278 = validateParameter(valid_614278, JInt, required = false, default = nil)
  if valid_614278 != nil:
    section.add "Duration", valid_614278
  var valid_614279 = formData.getOrDefault("EndTime")
  valid_614279 = validateParameter(valid_614279, JString, required = false,
                                 default = nil)
  if valid_614279 != nil:
    section.add "EndTime", valid_614279
  var valid_614280 = formData.getOrDefault("StartTime")
  valid_614280 = validateParameter(valid_614280, JString, required = false,
                                 default = nil)
  if valid_614280 != nil:
    section.add "StartTime", valid_614280
  var valid_614281 = formData.getOrDefault("EventCategories")
  valid_614281 = validateParameter(valid_614281, JArray, required = false,
                                 default = nil)
  if valid_614281 != nil:
    section.add "EventCategories", valid_614281
  var valid_614282 = formData.getOrDefault("Filters")
  valid_614282 = validateParameter(valid_614282, JArray, required = false,
                                 default = nil)
  if valid_614282 != nil:
    section.add "Filters", valid_614282
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614283: Call_PostDescribeEvents_614262; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_614283.validator(path, query, header, formData, body)
  let scheme = call_614283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614283.url(scheme.get, call_614283.host, call_614283.base,
                         call_614283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614283, url, valid)

proc call*(call_614284: Call_PostDescribeEvents_614262; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "db-instance"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; EventCategories: JsonNode = nil;
          Action: string = "DescribeEvents"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_614285 = newJObject()
  var formData_614286 = newJObject()
  add(formData_614286, "MaxRecords", newJInt(MaxRecords))
  add(formData_614286, "Marker", newJString(Marker))
  add(formData_614286, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_614286, "SourceType", newJString(SourceType))
  add(formData_614286, "Duration", newJInt(Duration))
  add(formData_614286, "EndTime", newJString(EndTime))
  add(formData_614286, "StartTime", newJString(StartTime))
  if EventCategories != nil:
    formData_614286.add "EventCategories", EventCategories
  add(query_614285, "Action", newJString(Action))
  if Filters != nil:
    formData_614286.add "Filters", Filters
  add(query_614285, "Version", newJString(Version))
  result = call_614284.call(nil, query_614285, nil, formData_614286, nil)

var postDescribeEvents* = Call_PostDescribeEvents_614262(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_614263, base: "/",
    url: url_PostDescribeEvents_614264, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_614238 = ref object of OpenApiRestCall_610658
proc url_GetDescribeEvents_614240(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_614239(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614241 = query.getOrDefault("Marker")
  valid_614241 = validateParameter(valid_614241, JString, required = false,
                                 default = nil)
  if valid_614241 != nil:
    section.add "Marker", valid_614241
  var valid_614242 = query.getOrDefault("SourceType")
  valid_614242 = validateParameter(valid_614242, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_614242 != nil:
    section.add "SourceType", valid_614242
  var valid_614243 = query.getOrDefault("SourceIdentifier")
  valid_614243 = validateParameter(valid_614243, JString, required = false,
                                 default = nil)
  if valid_614243 != nil:
    section.add "SourceIdentifier", valid_614243
  var valid_614244 = query.getOrDefault("EventCategories")
  valid_614244 = validateParameter(valid_614244, JArray, required = false,
                                 default = nil)
  if valid_614244 != nil:
    section.add "EventCategories", valid_614244
  var valid_614245 = query.getOrDefault("Action")
  valid_614245 = validateParameter(valid_614245, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_614245 != nil:
    section.add "Action", valid_614245
  var valid_614246 = query.getOrDefault("StartTime")
  valid_614246 = validateParameter(valid_614246, JString, required = false,
                                 default = nil)
  if valid_614246 != nil:
    section.add "StartTime", valid_614246
  var valid_614247 = query.getOrDefault("Duration")
  valid_614247 = validateParameter(valid_614247, JInt, required = false, default = nil)
  if valid_614247 != nil:
    section.add "Duration", valid_614247
  var valid_614248 = query.getOrDefault("EndTime")
  valid_614248 = validateParameter(valid_614248, JString, required = false,
                                 default = nil)
  if valid_614248 != nil:
    section.add "EndTime", valid_614248
  var valid_614249 = query.getOrDefault("Version")
  valid_614249 = validateParameter(valid_614249, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614249 != nil:
    section.add "Version", valid_614249
  var valid_614250 = query.getOrDefault("Filters")
  valid_614250 = validateParameter(valid_614250, JArray, required = false,
                                 default = nil)
  if valid_614250 != nil:
    section.add "Filters", valid_614250
  var valid_614251 = query.getOrDefault("MaxRecords")
  valid_614251 = validateParameter(valid_614251, JInt, required = false, default = nil)
  if valid_614251 != nil:
    section.add "MaxRecords", valid_614251
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614252 = header.getOrDefault("X-Amz-Signature")
  valid_614252 = validateParameter(valid_614252, JString, required = false,
                                 default = nil)
  if valid_614252 != nil:
    section.add "X-Amz-Signature", valid_614252
  var valid_614253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614253 = validateParameter(valid_614253, JString, required = false,
                                 default = nil)
  if valid_614253 != nil:
    section.add "X-Amz-Content-Sha256", valid_614253
  var valid_614254 = header.getOrDefault("X-Amz-Date")
  valid_614254 = validateParameter(valid_614254, JString, required = false,
                                 default = nil)
  if valid_614254 != nil:
    section.add "X-Amz-Date", valid_614254
  var valid_614255 = header.getOrDefault("X-Amz-Credential")
  valid_614255 = validateParameter(valid_614255, JString, required = false,
                                 default = nil)
  if valid_614255 != nil:
    section.add "X-Amz-Credential", valid_614255
  var valid_614256 = header.getOrDefault("X-Amz-Security-Token")
  valid_614256 = validateParameter(valid_614256, JString, required = false,
                                 default = nil)
  if valid_614256 != nil:
    section.add "X-Amz-Security-Token", valid_614256
  var valid_614257 = header.getOrDefault("X-Amz-Algorithm")
  valid_614257 = validateParameter(valid_614257, JString, required = false,
                                 default = nil)
  if valid_614257 != nil:
    section.add "X-Amz-Algorithm", valid_614257
  var valid_614258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614258 = validateParameter(valid_614258, JString, required = false,
                                 default = nil)
  if valid_614258 != nil:
    section.add "X-Amz-SignedHeaders", valid_614258
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614259: Call_GetDescribeEvents_614238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_614259.validator(path, query, header, formData, body)
  let scheme = call_614259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614259.url(scheme.get, call_614259.host, call_614259.base,
                         call_614259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614259, url, valid)

proc call*(call_614260: Call_GetDescribeEvents_614238; Marker: string = "";
          SourceType: string = "db-instance"; SourceIdentifier: string = "";
          EventCategories: JsonNode = nil; Action: string = "DescribeEvents";
          StartTime: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614261 = newJObject()
  add(query_614261, "Marker", newJString(Marker))
  add(query_614261, "SourceType", newJString(SourceType))
  add(query_614261, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    query_614261.add "EventCategories", EventCategories
  add(query_614261, "Action", newJString(Action))
  add(query_614261, "StartTime", newJString(StartTime))
  add(query_614261, "Duration", newJInt(Duration))
  add(query_614261, "EndTime", newJString(EndTime))
  add(query_614261, "Version", newJString(Version))
  if Filters != nil:
    query_614261.add "Filters", Filters
  add(query_614261, "MaxRecords", newJInt(MaxRecords))
  result = call_614260.call(nil, query_614261, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_614238(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_614239,
    base: "/", url: url_GetDescribeEvents_614240,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeExportTasks_614307 = ref object of OpenApiRestCall_610658
proc url_PostDescribeExportTasks_614309(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeExportTasks_614308(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614310 = query.getOrDefault("Action")
  valid_614310 = validateParameter(valid_614310, JString, required = true,
                                 default = newJString("DescribeExportTasks"))
  if valid_614310 != nil:
    section.add "Action", valid_614310
  var valid_614311 = query.getOrDefault("Version")
  valid_614311 = validateParameter(valid_614311, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614311 != nil:
    section.add "Version", valid_614311
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614312 = header.getOrDefault("X-Amz-Signature")
  valid_614312 = validateParameter(valid_614312, JString, required = false,
                                 default = nil)
  if valid_614312 != nil:
    section.add "X-Amz-Signature", valid_614312
  var valid_614313 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614313 = validateParameter(valid_614313, JString, required = false,
                                 default = nil)
  if valid_614313 != nil:
    section.add "X-Amz-Content-Sha256", valid_614313
  var valid_614314 = header.getOrDefault("X-Amz-Date")
  valid_614314 = validateParameter(valid_614314, JString, required = false,
                                 default = nil)
  if valid_614314 != nil:
    section.add "X-Amz-Date", valid_614314
  var valid_614315 = header.getOrDefault("X-Amz-Credential")
  valid_614315 = validateParameter(valid_614315, JString, required = false,
                                 default = nil)
  if valid_614315 != nil:
    section.add "X-Amz-Credential", valid_614315
  var valid_614316 = header.getOrDefault("X-Amz-Security-Token")
  valid_614316 = validateParameter(valid_614316, JString, required = false,
                                 default = nil)
  if valid_614316 != nil:
    section.add "X-Amz-Security-Token", valid_614316
  var valid_614317 = header.getOrDefault("X-Amz-Algorithm")
  valid_614317 = validateParameter(valid_614317, JString, required = false,
                                 default = nil)
  if valid_614317 != nil:
    section.add "X-Amz-Algorithm", valid_614317
  var valid_614318 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614318 = validateParameter(valid_614318, JString, required = false,
                                 default = nil)
  if valid_614318 != nil:
    section.add "X-Amz-SignedHeaders", valid_614318
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExportTaskIdentifier: JString
  ##                       : The identifier of the snapshot export task to be described.
  ##   MaxRecords: JString
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   SourceArn: JString
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  section = newJObject()
  var valid_614319 = formData.getOrDefault("ExportTaskIdentifier")
  valid_614319 = validateParameter(valid_614319, JString, required = false,
                                 default = nil)
  if valid_614319 != nil:
    section.add "ExportTaskIdentifier", valid_614319
  var valid_614320 = formData.getOrDefault("MaxRecords")
  valid_614320 = validateParameter(valid_614320, JString, required = false,
                                 default = nil)
  if valid_614320 != nil:
    section.add "MaxRecords", valid_614320
  var valid_614321 = formData.getOrDefault("Marker")
  valid_614321 = validateParameter(valid_614321, JString, required = false,
                                 default = nil)
  if valid_614321 != nil:
    section.add "Marker", valid_614321
  var valid_614322 = formData.getOrDefault("SourceArn")
  valid_614322 = validateParameter(valid_614322, JString, required = false,
                                 default = nil)
  if valid_614322 != nil:
    section.add "SourceArn", valid_614322
  var valid_614323 = formData.getOrDefault("Filters")
  valid_614323 = validateParameter(valid_614323, JArray, required = false,
                                 default = nil)
  if valid_614323 != nil:
    section.add "Filters", valid_614323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614324: Call_PostDescribeExportTasks_614307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  let valid = call_614324.validator(path, query, header, formData, body)
  let scheme = call_614324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614324.url(scheme.get, call_614324.host, call_614324.base,
                         call_614324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614324, url, valid)

proc call*(call_614325: Call_PostDescribeExportTasks_614307;
          ExportTaskIdentifier: string = ""; MaxRecords: string = "";
          Marker: string = ""; SourceArn: string = "";
          Action: string = "DescribeExportTasks"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeExportTasks
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ##   ExportTaskIdentifier: string
  ##                       : The identifier of the snapshot export task to be described.
  ##   MaxRecords: string
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   SourceArn: string
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  ##   Version: string (required)
  var query_614326 = newJObject()
  var formData_614327 = newJObject()
  add(formData_614327, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(formData_614327, "MaxRecords", newJString(MaxRecords))
  add(formData_614327, "Marker", newJString(Marker))
  add(formData_614327, "SourceArn", newJString(SourceArn))
  add(query_614326, "Action", newJString(Action))
  if Filters != nil:
    formData_614327.add "Filters", Filters
  add(query_614326, "Version", newJString(Version))
  result = call_614325.call(nil, query_614326, nil, formData_614327, nil)

var postDescribeExportTasks* = Call_PostDescribeExportTasks_614307(
    name: "postDescribeExportTasks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeExportTasks",
    validator: validate_PostDescribeExportTasks_614308, base: "/",
    url: url_PostDescribeExportTasks_614309, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeExportTasks_614287 = ref object of OpenApiRestCall_610658
proc url_GetDescribeExportTasks_614289(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeExportTasks_614288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   ExportTaskIdentifier: JString
  ##                       : The identifier of the snapshot export task to be described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  ##   MaxRecords: JString
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614290 = query.getOrDefault("SourceArn")
  valid_614290 = validateParameter(valid_614290, JString, required = false,
                                 default = nil)
  if valid_614290 != nil:
    section.add "SourceArn", valid_614290
  var valid_614291 = query.getOrDefault("Marker")
  valid_614291 = validateParameter(valid_614291, JString, required = false,
                                 default = nil)
  if valid_614291 != nil:
    section.add "Marker", valid_614291
  var valid_614292 = query.getOrDefault("ExportTaskIdentifier")
  valid_614292 = validateParameter(valid_614292, JString, required = false,
                                 default = nil)
  if valid_614292 != nil:
    section.add "ExportTaskIdentifier", valid_614292
  var valid_614293 = query.getOrDefault("Action")
  valid_614293 = validateParameter(valid_614293, JString, required = true,
                                 default = newJString("DescribeExportTasks"))
  if valid_614293 != nil:
    section.add "Action", valid_614293
  var valid_614294 = query.getOrDefault("Version")
  valid_614294 = validateParameter(valid_614294, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614294 != nil:
    section.add "Version", valid_614294
  var valid_614295 = query.getOrDefault("Filters")
  valid_614295 = validateParameter(valid_614295, JArray, required = false,
                                 default = nil)
  if valid_614295 != nil:
    section.add "Filters", valid_614295
  var valid_614296 = query.getOrDefault("MaxRecords")
  valid_614296 = validateParameter(valid_614296, JString, required = false,
                                 default = nil)
  if valid_614296 != nil:
    section.add "MaxRecords", valid_614296
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614297 = header.getOrDefault("X-Amz-Signature")
  valid_614297 = validateParameter(valid_614297, JString, required = false,
                                 default = nil)
  if valid_614297 != nil:
    section.add "X-Amz-Signature", valid_614297
  var valid_614298 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614298 = validateParameter(valid_614298, JString, required = false,
                                 default = nil)
  if valid_614298 != nil:
    section.add "X-Amz-Content-Sha256", valid_614298
  var valid_614299 = header.getOrDefault("X-Amz-Date")
  valid_614299 = validateParameter(valid_614299, JString, required = false,
                                 default = nil)
  if valid_614299 != nil:
    section.add "X-Amz-Date", valid_614299
  var valid_614300 = header.getOrDefault("X-Amz-Credential")
  valid_614300 = validateParameter(valid_614300, JString, required = false,
                                 default = nil)
  if valid_614300 != nil:
    section.add "X-Amz-Credential", valid_614300
  var valid_614301 = header.getOrDefault("X-Amz-Security-Token")
  valid_614301 = validateParameter(valid_614301, JString, required = false,
                                 default = nil)
  if valid_614301 != nil:
    section.add "X-Amz-Security-Token", valid_614301
  var valid_614302 = header.getOrDefault("X-Amz-Algorithm")
  valid_614302 = validateParameter(valid_614302, JString, required = false,
                                 default = nil)
  if valid_614302 != nil:
    section.add "X-Amz-Algorithm", valid_614302
  var valid_614303 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614303 = validateParameter(valid_614303, JString, required = false,
                                 default = nil)
  if valid_614303 != nil:
    section.add "X-Amz-SignedHeaders", valid_614303
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614304: Call_GetDescribeExportTasks_614287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  let valid = call_614304.validator(path, query, header, formData, body)
  let scheme = call_614304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614304.url(scheme.get, call_614304.host, call_614304.base,
                         call_614304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614304, url, valid)

proc call*(call_614305: Call_GetDescribeExportTasks_614287; SourceArn: string = "";
          Marker: string = ""; ExportTaskIdentifier: string = "";
          Action: string = "DescribeExportTasks"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: string = ""): Recallable =
  ## getDescribeExportTasks
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ##   SourceArn: string
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   ExportTaskIdentifier: string
  ##                       : The identifier of the snapshot export task to be described.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  ##   MaxRecords: string
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614306 = newJObject()
  add(query_614306, "SourceArn", newJString(SourceArn))
  add(query_614306, "Marker", newJString(Marker))
  add(query_614306, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(query_614306, "Action", newJString(Action))
  add(query_614306, "Version", newJString(Version))
  if Filters != nil:
    query_614306.add "Filters", Filters
  add(query_614306, "MaxRecords", newJString(MaxRecords))
  result = call_614305.call(nil, query_614306, nil, nil, nil)

var getDescribeExportTasks* = Call_GetDescribeExportTasks_614287(
    name: "getDescribeExportTasks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeExportTasks",
    validator: validate_GetDescribeExportTasks_614288, base: "/",
    url: url_GetDescribeExportTasks_614289, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeGlobalClusters_614347 = ref object of OpenApiRestCall_610658
proc url_PostDescribeGlobalClusters_614349(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeGlobalClusters_614348(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614350 = query.getOrDefault("Action")
  valid_614350 = validateParameter(valid_614350, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_614350 != nil:
    section.add "Action", valid_614350
  var valid_614351 = query.getOrDefault("Version")
  valid_614351 = validateParameter(valid_614351, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614351 != nil:
    section.add "Version", valid_614351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614352 = header.getOrDefault("X-Amz-Signature")
  valid_614352 = validateParameter(valid_614352, JString, required = false,
                                 default = nil)
  if valid_614352 != nil:
    section.add "X-Amz-Signature", valid_614352
  var valid_614353 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614353 = validateParameter(valid_614353, JString, required = false,
                                 default = nil)
  if valid_614353 != nil:
    section.add "X-Amz-Content-Sha256", valid_614353
  var valid_614354 = header.getOrDefault("X-Amz-Date")
  valid_614354 = validateParameter(valid_614354, JString, required = false,
                                 default = nil)
  if valid_614354 != nil:
    section.add "X-Amz-Date", valid_614354
  var valid_614355 = header.getOrDefault("X-Amz-Credential")
  valid_614355 = validateParameter(valid_614355, JString, required = false,
                                 default = nil)
  if valid_614355 != nil:
    section.add "X-Amz-Credential", valid_614355
  var valid_614356 = header.getOrDefault("X-Amz-Security-Token")
  valid_614356 = validateParameter(valid_614356, JString, required = false,
                                 default = nil)
  if valid_614356 != nil:
    section.add "X-Amz-Security-Token", valid_614356
  var valid_614357 = header.getOrDefault("X-Amz-Algorithm")
  valid_614357 = validateParameter(valid_614357, JString, required = false,
                                 default = nil)
  if valid_614357 != nil:
    section.add "X-Amz-Algorithm", valid_614357
  var valid_614358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614358 = validateParameter(valid_614358, JString, required = false,
                                 default = nil)
  if valid_614358 != nil:
    section.add "X-Amz-SignedHeaders", valid_614358
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_614359 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_614359 = validateParameter(valid_614359, JString, required = false,
                                 default = nil)
  if valid_614359 != nil:
    section.add "GlobalClusterIdentifier", valid_614359
  var valid_614360 = formData.getOrDefault("MaxRecords")
  valid_614360 = validateParameter(valid_614360, JInt, required = false, default = nil)
  if valid_614360 != nil:
    section.add "MaxRecords", valid_614360
  var valid_614361 = formData.getOrDefault("Marker")
  valid_614361 = validateParameter(valid_614361, JString, required = false,
                                 default = nil)
  if valid_614361 != nil:
    section.add "Marker", valid_614361
  var valid_614362 = formData.getOrDefault("Filters")
  valid_614362 = validateParameter(valid_614362, JArray, required = false,
                                 default = nil)
  if valid_614362 != nil:
    section.add "Filters", valid_614362
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614363: Call_PostDescribeGlobalClusters_614347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614363.validator(path, query, header, formData, body)
  let scheme = call_614363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614363.url(scheme.get, call_614363.host, call_614363.base,
                         call_614363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614363, url, valid)

proc call*(call_614364: Call_PostDescribeGlobalClusters_614347;
          GlobalClusterIdentifier: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeGlobalClusters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_614365 = newJObject()
  var formData_614366 = newJObject()
  add(formData_614366, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_614366, "MaxRecords", newJInt(MaxRecords))
  add(formData_614366, "Marker", newJString(Marker))
  add(query_614365, "Action", newJString(Action))
  if Filters != nil:
    formData_614366.add "Filters", Filters
  add(query_614365, "Version", newJString(Version))
  result = call_614364.call(nil, query_614365, nil, formData_614366, nil)

var postDescribeGlobalClusters* = Call_PostDescribeGlobalClusters_614347(
    name: "postDescribeGlobalClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_PostDescribeGlobalClusters_614348, base: "/",
    url: url_PostDescribeGlobalClusters_614349,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeGlobalClusters_614328 = ref object of OpenApiRestCall_610658
proc url_GetDescribeGlobalClusters_614330(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeGlobalClusters_614329(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614331 = query.getOrDefault("Marker")
  valid_614331 = validateParameter(valid_614331, JString, required = false,
                                 default = nil)
  if valid_614331 != nil:
    section.add "Marker", valid_614331
  var valid_614332 = query.getOrDefault("GlobalClusterIdentifier")
  valid_614332 = validateParameter(valid_614332, JString, required = false,
                                 default = nil)
  if valid_614332 != nil:
    section.add "GlobalClusterIdentifier", valid_614332
  var valid_614333 = query.getOrDefault("Action")
  valid_614333 = validateParameter(valid_614333, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_614333 != nil:
    section.add "Action", valid_614333
  var valid_614334 = query.getOrDefault("Version")
  valid_614334 = validateParameter(valid_614334, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614334 != nil:
    section.add "Version", valid_614334
  var valid_614335 = query.getOrDefault("Filters")
  valid_614335 = validateParameter(valid_614335, JArray, required = false,
                                 default = nil)
  if valid_614335 != nil:
    section.add "Filters", valid_614335
  var valid_614336 = query.getOrDefault("MaxRecords")
  valid_614336 = validateParameter(valid_614336, JInt, required = false, default = nil)
  if valid_614336 != nil:
    section.add "MaxRecords", valid_614336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614337 = header.getOrDefault("X-Amz-Signature")
  valid_614337 = validateParameter(valid_614337, JString, required = false,
                                 default = nil)
  if valid_614337 != nil:
    section.add "X-Amz-Signature", valid_614337
  var valid_614338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614338 = validateParameter(valid_614338, JString, required = false,
                                 default = nil)
  if valid_614338 != nil:
    section.add "X-Amz-Content-Sha256", valid_614338
  var valid_614339 = header.getOrDefault("X-Amz-Date")
  valid_614339 = validateParameter(valid_614339, JString, required = false,
                                 default = nil)
  if valid_614339 != nil:
    section.add "X-Amz-Date", valid_614339
  var valid_614340 = header.getOrDefault("X-Amz-Credential")
  valid_614340 = validateParameter(valid_614340, JString, required = false,
                                 default = nil)
  if valid_614340 != nil:
    section.add "X-Amz-Credential", valid_614340
  var valid_614341 = header.getOrDefault("X-Amz-Security-Token")
  valid_614341 = validateParameter(valid_614341, JString, required = false,
                                 default = nil)
  if valid_614341 != nil:
    section.add "X-Amz-Security-Token", valid_614341
  var valid_614342 = header.getOrDefault("X-Amz-Algorithm")
  valid_614342 = validateParameter(valid_614342, JString, required = false,
                                 default = nil)
  if valid_614342 != nil:
    section.add "X-Amz-Algorithm", valid_614342
  var valid_614343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614343 = validateParameter(valid_614343, JString, required = false,
                                 default = nil)
  if valid_614343 != nil:
    section.add "X-Amz-SignedHeaders", valid_614343
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614344: Call_GetDescribeGlobalClusters_614328; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614344.validator(path, query, header, formData, body)
  let scheme = call_614344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614344.url(scheme.get, call_614344.host, call_614344.base,
                         call_614344.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614344, url, valid)

proc call*(call_614345: Call_GetDescribeGlobalClusters_614328; Marker: string = "";
          GlobalClusterIdentifier: string = "";
          Action: string = "DescribeGlobalClusters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614346 = newJObject()
  add(query_614346, "Marker", newJString(Marker))
  add(query_614346, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_614346, "Action", newJString(Action))
  add(query_614346, "Version", newJString(Version))
  if Filters != nil:
    query_614346.add "Filters", Filters
  add(query_614346, "MaxRecords", newJInt(MaxRecords))
  result = call_614345.call(nil, query_614346, nil, nil, nil)

var getDescribeGlobalClusters* = Call_GetDescribeGlobalClusters_614328(
    name: "getDescribeGlobalClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_GetDescribeGlobalClusters_614329, base: "/",
    url: url_GetDescribeGlobalClusters_614330,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeInstallationMedia_614386 = ref object of OpenApiRestCall_610658
proc url_PostDescribeInstallationMedia_614388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeInstallationMedia_614387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614389 = query.getOrDefault("Action")
  valid_614389 = validateParameter(valid_614389, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_614389 != nil:
    section.add "Action", valid_614389
  var valid_614390 = query.getOrDefault("Version")
  valid_614390 = validateParameter(valid_614390, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614390 != nil:
    section.add "Version", valid_614390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614391 = header.getOrDefault("X-Amz-Signature")
  valid_614391 = validateParameter(valid_614391, JString, required = false,
                                 default = nil)
  if valid_614391 != nil:
    section.add "X-Amz-Signature", valid_614391
  var valid_614392 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614392 = validateParameter(valid_614392, JString, required = false,
                                 default = nil)
  if valid_614392 != nil:
    section.add "X-Amz-Content-Sha256", valid_614392
  var valid_614393 = header.getOrDefault("X-Amz-Date")
  valid_614393 = validateParameter(valid_614393, JString, required = false,
                                 default = nil)
  if valid_614393 != nil:
    section.add "X-Amz-Date", valid_614393
  var valid_614394 = header.getOrDefault("X-Amz-Credential")
  valid_614394 = validateParameter(valid_614394, JString, required = false,
                                 default = nil)
  if valid_614394 != nil:
    section.add "X-Amz-Credential", valid_614394
  var valid_614395 = header.getOrDefault("X-Amz-Security-Token")
  valid_614395 = validateParameter(valid_614395, JString, required = false,
                                 default = nil)
  if valid_614395 != nil:
    section.add "X-Amz-Security-Token", valid_614395
  var valid_614396 = header.getOrDefault("X-Amz-Algorithm")
  valid_614396 = validateParameter(valid_614396, JString, required = false,
                                 default = nil)
  if valid_614396 != nil:
    section.add "X-Amz-Algorithm", valid_614396
  var valid_614397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614397 = validateParameter(valid_614397, JString, required = false,
                                 default = nil)
  if valid_614397 != nil:
    section.add "X-Amz-SignedHeaders", valid_614397
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  section = newJObject()
  var valid_614398 = formData.getOrDefault("MaxRecords")
  valid_614398 = validateParameter(valid_614398, JInt, required = false, default = nil)
  if valid_614398 != nil:
    section.add "MaxRecords", valid_614398
  var valid_614399 = formData.getOrDefault("Marker")
  valid_614399 = validateParameter(valid_614399, JString, required = false,
                                 default = nil)
  if valid_614399 != nil:
    section.add "Marker", valid_614399
  var valid_614400 = formData.getOrDefault("InstallationMediaId")
  valid_614400 = validateParameter(valid_614400, JString, required = false,
                                 default = nil)
  if valid_614400 != nil:
    section.add "InstallationMediaId", valid_614400
  var valid_614401 = formData.getOrDefault("Filters")
  valid_614401 = validateParameter(valid_614401, JArray, required = false,
                                 default = nil)
  if valid_614401 != nil:
    section.add "Filters", valid_614401
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614402: Call_PostDescribeInstallationMedia_614386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_614402.validator(path, query, header, formData, body)
  let scheme = call_614402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614402.url(scheme.get, call_614402.host, call_614402.base,
                         call_614402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614402, url, valid)

proc call*(call_614403: Call_PostDescribeInstallationMedia_614386;
          MaxRecords: int = 0; Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   Version: string (required)
  var query_614404 = newJObject()
  var formData_614405 = newJObject()
  add(formData_614405, "MaxRecords", newJInt(MaxRecords))
  add(formData_614405, "Marker", newJString(Marker))
  add(formData_614405, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_614404, "Action", newJString(Action))
  if Filters != nil:
    formData_614405.add "Filters", Filters
  add(query_614404, "Version", newJString(Version))
  result = call_614403.call(nil, query_614404, nil, formData_614405, nil)

var postDescribeInstallationMedia* = Call_PostDescribeInstallationMedia_614386(
    name: "postDescribeInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_PostDescribeInstallationMedia_614387, base: "/",
    url: url_PostDescribeInstallationMedia_614388,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeInstallationMedia_614367 = ref object of OpenApiRestCall_610658
proc url_GetDescribeInstallationMedia_614369(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeInstallationMedia_614368(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_614370 = query.getOrDefault("Marker")
  valid_614370 = validateParameter(valid_614370, JString, required = false,
                                 default = nil)
  if valid_614370 != nil:
    section.add "Marker", valid_614370
  var valid_614371 = query.getOrDefault("InstallationMediaId")
  valid_614371 = validateParameter(valid_614371, JString, required = false,
                                 default = nil)
  if valid_614371 != nil:
    section.add "InstallationMediaId", valid_614371
  var valid_614372 = query.getOrDefault("Action")
  valid_614372 = validateParameter(valid_614372, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_614372 != nil:
    section.add "Action", valid_614372
  var valid_614373 = query.getOrDefault("Version")
  valid_614373 = validateParameter(valid_614373, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614373 != nil:
    section.add "Version", valid_614373
  var valid_614374 = query.getOrDefault("Filters")
  valid_614374 = validateParameter(valid_614374, JArray, required = false,
                                 default = nil)
  if valid_614374 != nil:
    section.add "Filters", valid_614374
  var valid_614375 = query.getOrDefault("MaxRecords")
  valid_614375 = validateParameter(valid_614375, JInt, required = false, default = nil)
  if valid_614375 != nil:
    section.add "MaxRecords", valid_614375
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614376 = header.getOrDefault("X-Amz-Signature")
  valid_614376 = validateParameter(valid_614376, JString, required = false,
                                 default = nil)
  if valid_614376 != nil:
    section.add "X-Amz-Signature", valid_614376
  var valid_614377 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614377 = validateParameter(valid_614377, JString, required = false,
                                 default = nil)
  if valid_614377 != nil:
    section.add "X-Amz-Content-Sha256", valid_614377
  var valid_614378 = header.getOrDefault("X-Amz-Date")
  valid_614378 = validateParameter(valid_614378, JString, required = false,
                                 default = nil)
  if valid_614378 != nil:
    section.add "X-Amz-Date", valid_614378
  var valid_614379 = header.getOrDefault("X-Amz-Credential")
  valid_614379 = validateParameter(valid_614379, JString, required = false,
                                 default = nil)
  if valid_614379 != nil:
    section.add "X-Amz-Credential", valid_614379
  var valid_614380 = header.getOrDefault("X-Amz-Security-Token")
  valid_614380 = validateParameter(valid_614380, JString, required = false,
                                 default = nil)
  if valid_614380 != nil:
    section.add "X-Amz-Security-Token", valid_614380
  var valid_614381 = header.getOrDefault("X-Amz-Algorithm")
  valid_614381 = validateParameter(valid_614381, JString, required = false,
                                 default = nil)
  if valid_614381 != nil:
    section.add "X-Amz-Algorithm", valid_614381
  var valid_614382 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614382 = validateParameter(valid_614382, JString, required = false,
                                 default = nil)
  if valid_614382 != nil:
    section.add "X-Amz-SignedHeaders", valid_614382
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614383: Call_GetDescribeInstallationMedia_614367; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_614383.validator(path, query, header, formData, body)
  let scheme = call_614383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614383.url(scheme.get, call_614383.host, call_614383.base,
                         call_614383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614383, url, valid)

proc call*(call_614384: Call_GetDescribeInstallationMedia_614367;
          Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  var query_614385 = newJObject()
  add(query_614385, "Marker", newJString(Marker))
  add(query_614385, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_614385, "Action", newJString(Action))
  add(query_614385, "Version", newJString(Version))
  if Filters != nil:
    query_614385.add "Filters", Filters
  add(query_614385, "MaxRecords", newJInt(MaxRecords))
  result = call_614384.call(nil, query_614385, nil, nil, nil)

var getDescribeInstallationMedia* = Call_GetDescribeInstallationMedia_614367(
    name: "getDescribeInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_GetDescribeInstallationMedia_614368, base: "/",
    url: url_GetDescribeInstallationMedia_614369,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroupOptions_614426 = ref object of OpenApiRestCall_610658
proc url_PostDescribeOptionGroupOptions_614428(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroupOptions_614427(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614429 = query.getOrDefault("Action")
  valid_614429 = validateParameter(valid_614429, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_614429 != nil:
    section.add "Action", valid_614429
  var valid_614430 = query.getOrDefault("Version")
  valid_614430 = validateParameter(valid_614430, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614430 != nil:
    section.add "Version", valid_614430
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614431 = header.getOrDefault("X-Amz-Signature")
  valid_614431 = validateParameter(valid_614431, JString, required = false,
                                 default = nil)
  if valid_614431 != nil:
    section.add "X-Amz-Signature", valid_614431
  var valid_614432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614432 = validateParameter(valid_614432, JString, required = false,
                                 default = nil)
  if valid_614432 != nil:
    section.add "X-Amz-Content-Sha256", valid_614432
  var valid_614433 = header.getOrDefault("X-Amz-Date")
  valid_614433 = validateParameter(valid_614433, JString, required = false,
                                 default = nil)
  if valid_614433 != nil:
    section.add "X-Amz-Date", valid_614433
  var valid_614434 = header.getOrDefault("X-Amz-Credential")
  valid_614434 = validateParameter(valid_614434, JString, required = false,
                                 default = nil)
  if valid_614434 != nil:
    section.add "X-Amz-Credential", valid_614434
  var valid_614435 = header.getOrDefault("X-Amz-Security-Token")
  valid_614435 = validateParameter(valid_614435, JString, required = false,
                                 default = nil)
  if valid_614435 != nil:
    section.add "X-Amz-Security-Token", valid_614435
  var valid_614436 = header.getOrDefault("X-Amz-Algorithm")
  valid_614436 = validateParameter(valid_614436, JString, required = false,
                                 default = nil)
  if valid_614436 != nil:
    section.add "X-Amz-Algorithm", valid_614436
  var valid_614437 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614437 = validateParameter(valid_614437, JString, required = false,
                                 default = nil)
  if valid_614437 != nil:
    section.add "X-Amz-SignedHeaders", valid_614437
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_614438 = formData.getOrDefault("MaxRecords")
  valid_614438 = validateParameter(valid_614438, JInt, required = false, default = nil)
  if valid_614438 != nil:
    section.add "MaxRecords", valid_614438
  var valid_614439 = formData.getOrDefault("Marker")
  valid_614439 = validateParameter(valid_614439, JString, required = false,
                                 default = nil)
  if valid_614439 != nil:
    section.add "Marker", valid_614439
  assert formData != nil,
        "formData argument is necessary due to required `EngineName` field"
  var valid_614440 = formData.getOrDefault("EngineName")
  valid_614440 = validateParameter(valid_614440, JString, required = true,
                                 default = nil)
  if valid_614440 != nil:
    section.add "EngineName", valid_614440
  var valid_614441 = formData.getOrDefault("MajorEngineVersion")
  valid_614441 = validateParameter(valid_614441, JString, required = false,
                                 default = nil)
  if valid_614441 != nil:
    section.add "MajorEngineVersion", valid_614441
  var valid_614442 = formData.getOrDefault("Filters")
  valid_614442 = validateParameter(valid_614442, JArray, required = false,
                                 default = nil)
  if valid_614442 != nil:
    section.add "Filters", valid_614442
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614443: Call_PostDescribeOptionGroupOptions_614426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_614443.validator(path, query, header, formData, body)
  let scheme = call_614443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614443.url(scheme.get, call_614443.host, call_614443.base,
                         call_614443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614443, url, valid)

proc call*(call_614444: Call_PostDescribeOptionGroupOptions_614426;
          EngineName: string; MaxRecords: int = 0; Marker: string = "";
          MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroupOptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_614445 = newJObject()
  var formData_614446 = newJObject()
  add(formData_614446, "MaxRecords", newJInt(MaxRecords))
  add(formData_614446, "Marker", newJString(Marker))
  add(formData_614446, "EngineName", newJString(EngineName))
  add(formData_614446, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_614445, "Action", newJString(Action))
  if Filters != nil:
    formData_614446.add "Filters", Filters
  add(query_614445, "Version", newJString(Version))
  result = call_614444.call(nil, query_614445, nil, formData_614446, nil)

var postDescribeOptionGroupOptions* = Call_PostDescribeOptionGroupOptions_614426(
    name: "postDescribeOptionGroupOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_PostDescribeOptionGroupOptions_614427, base: "/",
    url: url_PostDescribeOptionGroupOptions_614428,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroupOptions_614406 = ref object of OpenApiRestCall_610658
proc url_GetDescribeOptionGroupOptions_614408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroupOptions_614407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_614409 = query.getOrDefault("EngineName")
  valid_614409 = validateParameter(valid_614409, JString, required = true,
                                 default = nil)
  if valid_614409 != nil:
    section.add "EngineName", valid_614409
  var valid_614410 = query.getOrDefault("Marker")
  valid_614410 = validateParameter(valid_614410, JString, required = false,
                                 default = nil)
  if valid_614410 != nil:
    section.add "Marker", valid_614410
  var valid_614411 = query.getOrDefault("Action")
  valid_614411 = validateParameter(valid_614411, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_614411 != nil:
    section.add "Action", valid_614411
  var valid_614412 = query.getOrDefault("Version")
  valid_614412 = validateParameter(valid_614412, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614412 != nil:
    section.add "Version", valid_614412
  var valid_614413 = query.getOrDefault("Filters")
  valid_614413 = validateParameter(valid_614413, JArray, required = false,
                                 default = nil)
  if valid_614413 != nil:
    section.add "Filters", valid_614413
  var valid_614414 = query.getOrDefault("MaxRecords")
  valid_614414 = validateParameter(valid_614414, JInt, required = false, default = nil)
  if valid_614414 != nil:
    section.add "MaxRecords", valid_614414
  var valid_614415 = query.getOrDefault("MajorEngineVersion")
  valid_614415 = validateParameter(valid_614415, JString, required = false,
                                 default = nil)
  if valid_614415 != nil:
    section.add "MajorEngineVersion", valid_614415
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614416 = header.getOrDefault("X-Amz-Signature")
  valid_614416 = validateParameter(valid_614416, JString, required = false,
                                 default = nil)
  if valid_614416 != nil:
    section.add "X-Amz-Signature", valid_614416
  var valid_614417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614417 = validateParameter(valid_614417, JString, required = false,
                                 default = nil)
  if valid_614417 != nil:
    section.add "X-Amz-Content-Sha256", valid_614417
  var valid_614418 = header.getOrDefault("X-Amz-Date")
  valid_614418 = validateParameter(valid_614418, JString, required = false,
                                 default = nil)
  if valid_614418 != nil:
    section.add "X-Amz-Date", valid_614418
  var valid_614419 = header.getOrDefault("X-Amz-Credential")
  valid_614419 = validateParameter(valid_614419, JString, required = false,
                                 default = nil)
  if valid_614419 != nil:
    section.add "X-Amz-Credential", valid_614419
  var valid_614420 = header.getOrDefault("X-Amz-Security-Token")
  valid_614420 = validateParameter(valid_614420, JString, required = false,
                                 default = nil)
  if valid_614420 != nil:
    section.add "X-Amz-Security-Token", valid_614420
  var valid_614421 = header.getOrDefault("X-Amz-Algorithm")
  valid_614421 = validateParameter(valid_614421, JString, required = false,
                                 default = nil)
  if valid_614421 != nil:
    section.add "X-Amz-Algorithm", valid_614421
  var valid_614422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614422 = validateParameter(valid_614422, JString, required = false,
                                 default = nil)
  if valid_614422 != nil:
    section.add "X-Amz-SignedHeaders", valid_614422
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614423: Call_GetDescribeOptionGroupOptions_614406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_614423.validator(path, query, header, formData, body)
  let scheme = call_614423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614423.url(scheme.get, call_614423.host, call_614423.base,
                         call_614423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614423, url, valid)

proc call*(call_614424: Call_GetDescribeOptionGroupOptions_614406;
          EngineName: string; Marker: string = "";
          Action: string = "DescribeOptionGroupOptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroupOptions
  ## Describes all available options.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  var query_614425 = newJObject()
  add(query_614425, "EngineName", newJString(EngineName))
  add(query_614425, "Marker", newJString(Marker))
  add(query_614425, "Action", newJString(Action))
  add(query_614425, "Version", newJString(Version))
  if Filters != nil:
    query_614425.add "Filters", Filters
  add(query_614425, "MaxRecords", newJInt(MaxRecords))
  add(query_614425, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_614424.call(nil, query_614425, nil, nil, nil)

var getDescribeOptionGroupOptions* = Call_GetDescribeOptionGroupOptions_614406(
    name: "getDescribeOptionGroupOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_GetDescribeOptionGroupOptions_614407, base: "/",
    url: url_GetDescribeOptionGroupOptions_614408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroups_614468 = ref object of OpenApiRestCall_610658
proc url_PostDescribeOptionGroups_614470(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroups_614469(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614471 = query.getOrDefault("Action")
  valid_614471 = validateParameter(valid_614471, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_614471 != nil:
    section.add "Action", valid_614471
  var valid_614472 = query.getOrDefault("Version")
  valid_614472 = validateParameter(valid_614472, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614472 != nil:
    section.add "Version", valid_614472
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614473 = header.getOrDefault("X-Amz-Signature")
  valid_614473 = validateParameter(valid_614473, JString, required = false,
                                 default = nil)
  if valid_614473 != nil:
    section.add "X-Amz-Signature", valid_614473
  var valid_614474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614474 = validateParameter(valid_614474, JString, required = false,
                                 default = nil)
  if valid_614474 != nil:
    section.add "X-Amz-Content-Sha256", valid_614474
  var valid_614475 = header.getOrDefault("X-Amz-Date")
  valid_614475 = validateParameter(valid_614475, JString, required = false,
                                 default = nil)
  if valid_614475 != nil:
    section.add "X-Amz-Date", valid_614475
  var valid_614476 = header.getOrDefault("X-Amz-Credential")
  valid_614476 = validateParameter(valid_614476, JString, required = false,
                                 default = nil)
  if valid_614476 != nil:
    section.add "X-Amz-Credential", valid_614476
  var valid_614477 = header.getOrDefault("X-Amz-Security-Token")
  valid_614477 = validateParameter(valid_614477, JString, required = false,
                                 default = nil)
  if valid_614477 != nil:
    section.add "X-Amz-Security-Token", valid_614477
  var valid_614478 = header.getOrDefault("X-Amz-Algorithm")
  valid_614478 = validateParameter(valid_614478, JString, required = false,
                                 default = nil)
  if valid_614478 != nil:
    section.add "X-Amz-Algorithm", valid_614478
  var valid_614479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614479 = validateParameter(valid_614479, JString, required = false,
                                 default = nil)
  if valid_614479 != nil:
    section.add "X-Amz-SignedHeaders", valid_614479
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_614480 = formData.getOrDefault("MaxRecords")
  valid_614480 = validateParameter(valid_614480, JInt, required = false, default = nil)
  if valid_614480 != nil:
    section.add "MaxRecords", valid_614480
  var valid_614481 = formData.getOrDefault("Marker")
  valid_614481 = validateParameter(valid_614481, JString, required = false,
                                 default = nil)
  if valid_614481 != nil:
    section.add "Marker", valid_614481
  var valid_614482 = formData.getOrDefault("EngineName")
  valid_614482 = validateParameter(valid_614482, JString, required = false,
                                 default = nil)
  if valid_614482 != nil:
    section.add "EngineName", valid_614482
  var valid_614483 = formData.getOrDefault("MajorEngineVersion")
  valid_614483 = validateParameter(valid_614483, JString, required = false,
                                 default = nil)
  if valid_614483 != nil:
    section.add "MajorEngineVersion", valid_614483
  var valid_614484 = formData.getOrDefault("OptionGroupName")
  valid_614484 = validateParameter(valid_614484, JString, required = false,
                                 default = nil)
  if valid_614484 != nil:
    section.add "OptionGroupName", valid_614484
  var valid_614485 = formData.getOrDefault("Filters")
  valid_614485 = validateParameter(valid_614485, JArray, required = false,
                                 default = nil)
  if valid_614485 != nil:
    section.add "Filters", valid_614485
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614486: Call_PostDescribeOptionGroups_614468; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_614486.validator(path, query, header, formData, body)
  let scheme = call_614486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614486.url(scheme.get, call_614486.host, call_614486.base,
                         call_614486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614486, url, valid)

proc call*(call_614487: Call_PostDescribeOptionGroups_614468; MaxRecords: int = 0;
          Marker: string = ""; EngineName: string = ""; MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroups
  ## Describes the available option groups.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_614488 = newJObject()
  var formData_614489 = newJObject()
  add(formData_614489, "MaxRecords", newJInt(MaxRecords))
  add(formData_614489, "Marker", newJString(Marker))
  add(formData_614489, "EngineName", newJString(EngineName))
  add(formData_614489, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_614488, "Action", newJString(Action))
  add(formData_614489, "OptionGroupName", newJString(OptionGroupName))
  if Filters != nil:
    formData_614489.add "Filters", Filters
  add(query_614488, "Version", newJString(Version))
  result = call_614487.call(nil, query_614488, nil, formData_614489, nil)

var postDescribeOptionGroups* = Call_PostDescribeOptionGroups_614468(
    name: "postDescribeOptionGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_PostDescribeOptionGroups_614469, base: "/",
    url: url_PostDescribeOptionGroups_614470, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroups_614447 = ref object of OpenApiRestCall_610658
proc url_GetDescribeOptionGroups_614449(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroups_614448(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  section = newJObject()
  var valid_614450 = query.getOrDefault("EngineName")
  valid_614450 = validateParameter(valid_614450, JString, required = false,
                                 default = nil)
  if valid_614450 != nil:
    section.add "EngineName", valid_614450
  var valid_614451 = query.getOrDefault("Marker")
  valid_614451 = validateParameter(valid_614451, JString, required = false,
                                 default = nil)
  if valid_614451 != nil:
    section.add "Marker", valid_614451
  var valid_614452 = query.getOrDefault("Action")
  valid_614452 = validateParameter(valid_614452, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_614452 != nil:
    section.add "Action", valid_614452
  var valid_614453 = query.getOrDefault("OptionGroupName")
  valid_614453 = validateParameter(valid_614453, JString, required = false,
                                 default = nil)
  if valid_614453 != nil:
    section.add "OptionGroupName", valid_614453
  var valid_614454 = query.getOrDefault("Version")
  valid_614454 = validateParameter(valid_614454, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614454 != nil:
    section.add "Version", valid_614454
  var valid_614455 = query.getOrDefault("Filters")
  valid_614455 = validateParameter(valid_614455, JArray, required = false,
                                 default = nil)
  if valid_614455 != nil:
    section.add "Filters", valid_614455
  var valid_614456 = query.getOrDefault("MaxRecords")
  valid_614456 = validateParameter(valid_614456, JInt, required = false, default = nil)
  if valid_614456 != nil:
    section.add "MaxRecords", valid_614456
  var valid_614457 = query.getOrDefault("MajorEngineVersion")
  valid_614457 = validateParameter(valid_614457, JString, required = false,
                                 default = nil)
  if valid_614457 != nil:
    section.add "MajorEngineVersion", valid_614457
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614458 = header.getOrDefault("X-Amz-Signature")
  valid_614458 = validateParameter(valid_614458, JString, required = false,
                                 default = nil)
  if valid_614458 != nil:
    section.add "X-Amz-Signature", valid_614458
  var valid_614459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614459 = validateParameter(valid_614459, JString, required = false,
                                 default = nil)
  if valid_614459 != nil:
    section.add "X-Amz-Content-Sha256", valid_614459
  var valid_614460 = header.getOrDefault("X-Amz-Date")
  valid_614460 = validateParameter(valid_614460, JString, required = false,
                                 default = nil)
  if valid_614460 != nil:
    section.add "X-Amz-Date", valid_614460
  var valid_614461 = header.getOrDefault("X-Amz-Credential")
  valid_614461 = validateParameter(valid_614461, JString, required = false,
                                 default = nil)
  if valid_614461 != nil:
    section.add "X-Amz-Credential", valid_614461
  var valid_614462 = header.getOrDefault("X-Amz-Security-Token")
  valid_614462 = validateParameter(valid_614462, JString, required = false,
                                 default = nil)
  if valid_614462 != nil:
    section.add "X-Amz-Security-Token", valid_614462
  var valid_614463 = header.getOrDefault("X-Amz-Algorithm")
  valid_614463 = validateParameter(valid_614463, JString, required = false,
                                 default = nil)
  if valid_614463 != nil:
    section.add "X-Amz-Algorithm", valid_614463
  var valid_614464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614464 = validateParameter(valid_614464, JString, required = false,
                                 default = nil)
  if valid_614464 != nil:
    section.add "X-Amz-SignedHeaders", valid_614464
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614465: Call_GetDescribeOptionGroups_614447; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_614465.validator(path, query, header, formData, body)
  let scheme = call_614465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614465.url(scheme.get, call_614465.host, call_614465.base,
                         call_614465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614465, url, valid)

proc call*(call_614466: Call_GetDescribeOptionGroups_614447;
          EngineName: string = ""; Marker: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroups
  ## Describes the available option groups.
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  var query_614467 = newJObject()
  add(query_614467, "EngineName", newJString(EngineName))
  add(query_614467, "Marker", newJString(Marker))
  add(query_614467, "Action", newJString(Action))
  add(query_614467, "OptionGroupName", newJString(OptionGroupName))
  add(query_614467, "Version", newJString(Version))
  if Filters != nil:
    query_614467.add "Filters", Filters
  add(query_614467, "MaxRecords", newJInt(MaxRecords))
  add(query_614467, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_614466.call(nil, query_614467, nil, nil, nil)

var getDescribeOptionGroups* = Call_GetDescribeOptionGroups_614447(
    name: "getDescribeOptionGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_GetDescribeOptionGroups_614448, base: "/",
    url: url_GetDescribeOptionGroups_614449, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_614513 = ref object of OpenApiRestCall_610658
proc url_PostDescribeOrderableDBInstanceOptions_614515(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_614514(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614516 = query.getOrDefault("Action")
  valid_614516 = validateParameter(valid_614516, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_614516 != nil:
    section.add "Action", valid_614516
  var valid_614517 = query.getOrDefault("Version")
  valid_614517 = validateParameter(valid_614517, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614517 != nil:
    section.add "Version", valid_614517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614518 = header.getOrDefault("X-Amz-Signature")
  valid_614518 = validateParameter(valid_614518, JString, required = false,
                                 default = nil)
  if valid_614518 != nil:
    section.add "X-Amz-Signature", valid_614518
  var valid_614519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614519 = validateParameter(valid_614519, JString, required = false,
                                 default = nil)
  if valid_614519 != nil:
    section.add "X-Amz-Content-Sha256", valid_614519
  var valid_614520 = header.getOrDefault("X-Amz-Date")
  valid_614520 = validateParameter(valid_614520, JString, required = false,
                                 default = nil)
  if valid_614520 != nil:
    section.add "X-Amz-Date", valid_614520
  var valid_614521 = header.getOrDefault("X-Amz-Credential")
  valid_614521 = validateParameter(valid_614521, JString, required = false,
                                 default = nil)
  if valid_614521 != nil:
    section.add "X-Amz-Credential", valid_614521
  var valid_614522 = header.getOrDefault("X-Amz-Security-Token")
  valid_614522 = validateParameter(valid_614522, JString, required = false,
                                 default = nil)
  if valid_614522 != nil:
    section.add "X-Amz-Security-Token", valid_614522
  var valid_614523 = header.getOrDefault("X-Amz-Algorithm")
  valid_614523 = validateParameter(valid_614523, JString, required = false,
                                 default = nil)
  if valid_614523 != nil:
    section.add "X-Amz-Algorithm", valid_614523
  var valid_614524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614524 = validateParameter(valid_614524, JString, required = false,
                                 default = nil)
  if valid_614524 != nil:
    section.add "X-Amz-SignedHeaders", valid_614524
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_614525 = formData.getOrDefault("DBInstanceClass")
  valid_614525 = validateParameter(valid_614525, JString, required = false,
                                 default = nil)
  if valid_614525 != nil:
    section.add "DBInstanceClass", valid_614525
  var valid_614526 = formData.getOrDefault("MaxRecords")
  valid_614526 = validateParameter(valid_614526, JInt, required = false, default = nil)
  if valid_614526 != nil:
    section.add "MaxRecords", valid_614526
  var valid_614527 = formData.getOrDefault("EngineVersion")
  valid_614527 = validateParameter(valid_614527, JString, required = false,
                                 default = nil)
  if valid_614527 != nil:
    section.add "EngineVersion", valid_614527
  var valid_614528 = formData.getOrDefault("Marker")
  valid_614528 = validateParameter(valid_614528, JString, required = false,
                                 default = nil)
  if valid_614528 != nil:
    section.add "Marker", valid_614528
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_614529 = formData.getOrDefault("Engine")
  valid_614529 = validateParameter(valid_614529, JString, required = true,
                                 default = nil)
  if valid_614529 != nil:
    section.add "Engine", valid_614529
  var valid_614530 = formData.getOrDefault("Vpc")
  valid_614530 = validateParameter(valid_614530, JBool, required = false, default = nil)
  if valid_614530 != nil:
    section.add "Vpc", valid_614530
  var valid_614531 = formData.getOrDefault("LicenseModel")
  valid_614531 = validateParameter(valid_614531, JString, required = false,
                                 default = nil)
  if valid_614531 != nil:
    section.add "LicenseModel", valid_614531
  var valid_614532 = formData.getOrDefault("Filters")
  valid_614532 = validateParameter(valid_614532, JArray, required = false,
                                 default = nil)
  if valid_614532 != nil:
    section.add "Filters", valid_614532
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614533: Call_PostDescribeOrderableDBInstanceOptions_614513;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_614533.validator(path, query, header, formData, body)
  let scheme = call_614533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614533.url(scheme.get, call_614533.host, call_614533.base,
                         call_614533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614533, url, valid)

proc call*(call_614534: Call_PostDescribeOrderableDBInstanceOptions_614513;
          Engine: string; DBInstanceClass: string = ""; MaxRecords: int = 0;
          EngineVersion: string = ""; Marker: string = ""; Vpc: bool = false;
          Action: string = "DescribeOrderableDBInstanceOptions";
          LicenseModel: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_614535 = newJObject()
  var formData_614536 = newJObject()
  add(formData_614536, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_614536, "MaxRecords", newJInt(MaxRecords))
  add(formData_614536, "EngineVersion", newJString(EngineVersion))
  add(formData_614536, "Marker", newJString(Marker))
  add(formData_614536, "Engine", newJString(Engine))
  add(formData_614536, "Vpc", newJBool(Vpc))
  add(query_614535, "Action", newJString(Action))
  add(formData_614536, "LicenseModel", newJString(LicenseModel))
  if Filters != nil:
    formData_614536.add "Filters", Filters
  add(query_614535, "Version", newJString(Version))
  result = call_614534.call(nil, query_614535, nil, formData_614536, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_614513(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_614514, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_614515,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_614490 = ref object of OpenApiRestCall_610658
proc url_GetDescribeOrderableDBInstanceOptions_614492(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_614491(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614493 = query.getOrDefault("Marker")
  valid_614493 = validateParameter(valid_614493, JString, required = false,
                                 default = nil)
  if valid_614493 != nil:
    section.add "Marker", valid_614493
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_614494 = query.getOrDefault("Engine")
  valid_614494 = validateParameter(valid_614494, JString, required = true,
                                 default = nil)
  if valid_614494 != nil:
    section.add "Engine", valid_614494
  var valid_614495 = query.getOrDefault("LicenseModel")
  valid_614495 = validateParameter(valid_614495, JString, required = false,
                                 default = nil)
  if valid_614495 != nil:
    section.add "LicenseModel", valid_614495
  var valid_614496 = query.getOrDefault("Vpc")
  valid_614496 = validateParameter(valid_614496, JBool, required = false, default = nil)
  if valid_614496 != nil:
    section.add "Vpc", valid_614496
  var valid_614497 = query.getOrDefault("EngineVersion")
  valid_614497 = validateParameter(valid_614497, JString, required = false,
                                 default = nil)
  if valid_614497 != nil:
    section.add "EngineVersion", valid_614497
  var valid_614498 = query.getOrDefault("Action")
  valid_614498 = validateParameter(valid_614498, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_614498 != nil:
    section.add "Action", valid_614498
  var valid_614499 = query.getOrDefault("Version")
  valid_614499 = validateParameter(valid_614499, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614499 != nil:
    section.add "Version", valid_614499
  var valid_614500 = query.getOrDefault("DBInstanceClass")
  valid_614500 = validateParameter(valid_614500, JString, required = false,
                                 default = nil)
  if valid_614500 != nil:
    section.add "DBInstanceClass", valid_614500
  var valid_614501 = query.getOrDefault("Filters")
  valid_614501 = validateParameter(valid_614501, JArray, required = false,
                                 default = nil)
  if valid_614501 != nil:
    section.add "Filters", valid_614501
  var valid_614502 = query.getOrDefault("MaxRecords")
  valid_614502 = validateParameter(valid_614502, JInt, required = false, default = nil)
  if valid_614502 != nil:
    section.add "MaxRecords", valid_614502
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614503 = header.getOrDefault("X-Amz-Signature")
  valid_614503 = validateParameter(valid_614503, JString, required = false,
                                 default = nil)
  if valid_614503 != nil:
    section.add "X-Amz-Signature", valid_614503
  var valid_614504 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614504 = validateParameter(valid_614504, JString, required = false,
                                 default = nil)
  if valid_614504 != nil:
    section.add "X-Amz-Content-Sha256", valid_614504
  var valid_614505 = header.getOrDefault("X-Amz-Date")
  valid_614505 = validateParameter(valid_614505, JString, required = false,
                                 default = nil)
  if valid_614505 != nil:
    section.add "X-Amz-Date", valid_614505
  var valid_614506 = header.getOrDefault("X-Amz-Credential")
  valid_614506 = validateParameter(valid_614506, JString, required = false,
                                 default = nil)
  if valid_614506 != nil:
    section.add "X-Amz-Credential", valid_614506
  var valid_614507 = header.getOrDefault("X-Amz-Security-Token")
  valid_614507 = validateParameter(valid_614507, JString, required = false,
                                 default = nil)
  if valid_614507 != nil:
    section.add "X-Amz-Security-Token", valid_614507
  var valid_614508 = header.getOrDefault("X-Amz-Algorithm")
  valid_614508 = validateParameter(valid_614508, JString, required = false,
                                 default = nil)
  if valid_614508 != nil:
    section.add "X-Amz-Algorithm", valid_614508
  var valid_614509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614509 = validateParameter(valid_614509, JString, required = false,
                                 default = nil)
  if valid_614509 != nil:
    section.add "X-Amz-SignedHeaders", valid_614509
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614510: Call_GetDescribeOrderableDBInstanceOptions_614490;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_614510.validator(path, query, header, formData, body)
  let scheme = call_614510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614510.url(scheme.get, call_614510.host, call_614510.base,
                         call_614510.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614510, url, valid)

proc call*(call_614511: Call_GetDescribeOrderableDBInstanceOptions_614490;
          Engine: string; Marker: string = ""; LicenseModel: string = "";
          Vpc: bool = false; EngineVersion: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614512 = newJObject()
  add(query_614512, "Marker", newJString(Marker))
  add(query_614512, "Engine", newJString(Engine))
  add(query_614512, "LicenseModel", newJString(LicenseModel))
  add(query_614512, "Vpc", newJBool(Vpc))
  add(query_614512, "EngineVersion", newJString(EngineVersion))
  add(query_614512, "Action", newJString(Action))
  add(query_614512, "Version", newJString(Version))
  add(query_614512, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_614512.add "Filters", Filters
  add(query_614512, "MaxRecords", newJInt(MaxRecords))
  result = call_614511.call(nil, query_614512, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_614490(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_614491, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_614492,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_614556 = ref object of OpenApiRestCall_610658
proc url_PostDescribePendingMaintenanceActions_614558(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_614557(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614559 = query.getOrDefault("Action")
  valid_614559 = validateParameter(valid_614559, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_614559 != nil:
    section.add "Action", valid_614559
  var valid_614560 = query.getOrDefault("Version")
  valid_614560 = validateParameter(valid_614560, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614560 != nil:
    section.add "Version", valid_614560
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614561 = header.getOrDefault("X-Amz-Signature")
  valid_614561 = validateParameter(valid_614561, JString, required = false,
                                 default = nil)
  if valid_614561 != nil:
    section.add "X-Amz-Signature", valid_614561
  var valid_614562 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614562 = validateParameter(valid_614562, JString, required = false,
                                 default = nil)
  if valid_614562 != nil:
    section.add "X-Amz-Content-Sha256", valid_614562
  var valid_614563 = header.getOrDefault("X-Amz-Date")
  valid_614563 = validateParameter(valid_614563, JString, required = false,
                                 default = nil)
  if valid_614563 != nil:
    section.add "X-Amz-Date", valid_614563
  var valid_614564 = header.getOrDefault("X-Amz-Credential")
  valid_614564 = validateParameter(valid_614564, JString, required = false,
                                 default = nil)
  if valid_614564 != nil:
    section.add "X-Amz-Credential", valid_614564
  var valid_614565 = header.getOrDefault("X-Amz-Security-Token")
  valid_614565 = validateParameter(valid_614565, JString, required = false,
                                 default = nil)
  if valid_614565 != nil:
    section.add "X-Amz-Security-Token", valid_614565
  var valid_614566 = header.getOrDefault("X-Amz-Algorithm")
  valid_614566 = validateParameter(valid_614566, JString, required = false,
                                 default = nil)
  if valid_614566 != nil:
    section.add "X-Amz-Algorithm", valid_614566
  var valid_614567 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614567 = validateParameter(valid_614567, JString, required = false,
                                 default = nil)
  if valid_614567 != nil:
    section.add "X-Amz-SignedHeaders", valid_614567
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_614568 = formData.getOrDefault("MaxRecords")
  valid_614568 = validateParameter(valid_614568, JInt, required = false, default = nil)
  if valid_614568 != nil:
    section.add "MaxRecords", valid_614568
  var valid_614569 = formData.getOrDefault("Marker")
  valid_614569 = validateParameter(valid_614569, JString, required = false,
                                 default = nil)
  if valid_614569 != nil:
    section.add "Marker", valid_614569
  var valid_614570 = formData.getOrDefault("ResourceIdentifier")
  valid_614570 = validateParameter(valid_614570, JString, required = false,
                                 default = nil)
  if valid_614570 != nil:
    section.add "ResourceIdentifier", valid_614570
  var valid_614571 = formData.getOrDefault("Filters")
  valid_614571 = validateParameter(valid_614571, JArray, required = false,
                                 default = nil)
  if valid_614571 != nil:
    section.add "Filters", valid_614571
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614572: Call_PostDescribePendingMaintenanceActions_614556;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_614572.validator(path, query, header, formData, body)
  let scheme = call_614572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614572.url(scheme.get, call_614572.host, call_614572.base,
                         call_614572.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614572, url, valid)

proc call*(call_614573: Call_PostDescribePendingMaintenanceActions_614556;
          MaxRecords: int = 0; Marker: string = ""; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_614574 = newJObject()
  var formData_614575 = newJObject()
  add(formData_614575, "MaxRecords", newJInt(MaxRecords))
  add(formData_614575, "Marker", newJString(Marker))
  add(formData_614575, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_614574, "Action", newJString(Action))
  if Filters != nil:
    formData_614575.add "Filters", Filters
  add(query_614574, "Version", newJString(Version))
  result = call_614573.call(nil, query_614574, nil, formData_614575, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_614556(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_614557, base: "/",
    url: url_PostDescribePendingMaintenanceActions_614558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_614537 = ref object of OpenApiRestCall_610658
proc url_GetDescribePendingMaintenanceActions_614539(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_614538(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614540 = query.getOrDefault("ResourceIdentifier")
  valid_614540 = validateParameter(valid_614540, JString, required = false,
                                 default = nil)
  if valid_614540 != nil:
    section.add "ResourceIdentifier", valid_614540
  var valid_614541 = query.getOrDefault("Marker")
  valid_614541 = validateParameter(valid_614541, JString, required = false,
                                 default = nil)
  if valid_614541 != nil:
    section.add "Marker", valid_614541
  var valid_614542 = query.getOrDefault("Action")
  valid_614542 = validateParameter(valid_614542, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_614542 != nil:
    section.add "Action", valid_614542
  var valid_614543 = query.getOrDefault("Version")
  valid_614543 = validateParameter(valid_614543, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614543 != nil:
    section.add "Version", valid_614543
  var valid_614544 = query.getOrDefault("Filters")
  valid_614544 = validateParameter(valid_614544, JArray, required = false,
                                 default = nil)
  if valid_614544 != nil:
    section.add "Filters", valid_614544
  var valid_614545 = query.getOrDefault("MaxRecords")
  valid_614545 = validateParameter(valid_614545, JInt, required = false, default = nil)
  if valid_614545 != nil:
    section.add "MaxRecords", valid_614545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614546 = header.getOrDefault("X-Amz-Signature")
  valid_614546 = validateParameter(valid_614546, JString, required = false,
                                 default = nil)
  if valid_614546 != nil:
    section.add "X-Amz-Signature", valid_614546
  var valid_614547 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614547 = validateParameter(valid_614547, JString, required = false,
                                 default = nil)
  if valid_614547 != nil:
    section.add "X-Amz-Content-Sha256", valid_614547
  var valid_614548 = header.getOrDefault("X-Amz-Date")
  valid_614548 = validateParameter(valid_614548, JString, required = false,
                                 default = nil)
  if valid_614548 != nil:
    section.add "X-Amz-Date", valid_614548
  var valid_614549 = header.getOrDefault("X-Amz-Credential")
  valid_614549 = validateParameter(valid_614549, JString, required = false,
                                 default = nil)
  if valid_614549 != nil:
    section.add "X-Amz-Credential", valid_614549
  var valid_614550 = header.getOrDefault("X-Amz-Security-Token")
  valid_614550 = validateParameter(valid_614550, JString, required = false,
                                 default = nil)
  if valid_614550 != nil:
    section.add "X-Amz-Security-Token", valid_614550
  var valid_614551 = header.getOrDefault("X-Amz-Algorithm")
  valid_614551 = validateParameter(valid_614551, JString, required = false,
                                 default = nil)
  if valid_614551 != nil:
    section.add "X-Amz-Algorithm", valid_614551
  var valid_614552 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614552 = validateParameter(valid_614552, JString, required = false,
                                 default = nil)
  if valid_614552 != nil:
    section.add "X-Amz-SignedHeaders", valid_614552
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614553: Call_GetDescribePendingMaintenanceActions_614537;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_614553.validator(path, query, header, formData, body)
  let scheme = call_614553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614553.url(scheme.get, call_614553.host, call_614553.base,
                         call_614553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614553, url, valid)

proc call*(call_614554: Call_GetDescribePendingMaintenanceActions_614537;
          ResourceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614555 = newJObject()
  add(query_614555, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_614555, "Marker", newJString(Marker))
  add(query_614555, "Action", newJString(Action))
  add(query_614555, "Version", newJString(Version))
  if Filters != nil:
    query_614555.add "Filters", Filters
  add(query_614555, "MaxRecords", newJInt(MaxRecords))
  result = call_614554.call(nil, query_614555, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_614537(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_614538, base: "/",
    url: url_GetDescribePendingMaintenanceActions_614539,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstances_614602 = ref object of OpenApiRestCall_610658
proc url_PostDescribeReservedDBInstances_614604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstances_614603(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614605 = query.getOrDefault("Action")
  valid_614605 = validateParameter(valid_614605, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_614605 != nil:
    section.add "Action", valid_614605
  var valid_614606 = query.getOrDefault("Version")
  valid_614606 = validateParameter(valid_614606, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614606 != nil:
    section.add "Version", valid_614606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614607 = header.getOrDefault("X-Amz-Signature")
  valid_614607 = validateParameter(valid_614607, JString, required = false,
                                 default = nil)
  if valid_614607 != nil:
    section.add "X-Amz-Signature", valid_614607
  var valid_614608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614608 = validateParameter(valid_614608, JString, required = false,
                                 default = nil)
  if valid_614608 != nil:
    section.add "X-Amz-Content-Sha256", valid_614608
  var valid_614609 = header.getOrDefault("X-Amz-Date")
  valid_614609 = validateParameter(valid_614609, JString, required = false,
                                 default = nil)
  if valid_614609 != nil:
    section.add "X-Amz-Date", valid_614609
  var valid_614610 = header.getOrDefault("X-Amz-Credential")
  valid_614610 = validateParameter(valid_614610, JString, required = false,
                                 default = nil)
  if valid_614610 != nil:
    section.add "X-Amz-Credential", valid_614610
  var valid_614611 = header.getOrDefault("X-Amz-Security-Token")
  valid_614611 = validateParameter(valid_614611, JString, required = false,
                                 default = nil)
  if valid_614611 != nil:
    section.add "X-Amz-Security-Token", valid_614611
  var valid_614612 = header.getOrDefault("X-Amz-Algorithm")
  valid_614612 = validateParameter(valid_614612, JString, required = false,
                                 default = nil)
  if valid_614612 != nil:
    section.add "X-Amz-Algorithm", valid_614612
  var valid_614613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614613 = validateParameter(valid_614613, JString, required = false,
                                 default = nil)
  if valid_614613 != nil:
    section.add "X-Amz-SignedHeaders", valid_614613
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_614614 = formData.getOrDefault("DBInstanceClass")
  valid_614614 = validateParameter(valid_614614, JString, required = false,
                                 default = nil)
  if valid_614614 != nil:
    section.add "DBInstanceClass", valid_614614
  var valid_614615 = formData.getOrDefault("MultiAZ")
  valid_614615 = validateParameter(valid_614615, JBool, required = false, default = nil)
  if valid_614615 != nil:
    section.add "MultiAZ", valid_614615
  var valid_614616 = formData.getOrDefault("MaxRecords")
  valid_614616 = validateParameter(valid_614616, JInt, required = false, default = nil)
  if valid_614616 != nil:
    section.add "MaxRecords", valid_614616
  var valid_614617 = formData.getOrDefault("LeaseId")
  valid_614617 = validateParameter(valid_614617, JString, required = false,
                                 default = nil)
  if valid_614617 != nil:
    section.add "LeaseId", valid_614617
  var valid_614618 = formData.getOrDefault("ReservedDBInstanceId")
  valid_614618 = validateParameter(valid_614618, JString, required = false,
                                 default = nil)
  if valid_614618 != nil:
    section.add "ReservedDBInstanceId", valid_614618
  var valid_614619 = formData.getOrDefault("Marker")
  valid_614619 = validateParameter(valid_614619, JString, required = false,
                                 default = nil)
  if valid_614619 != nil:
    section.add "Marker", valid_614619
  var valid_614620 = formData.getOrDefault("Duration")
  valid_614620 = validateParameter(valid_614620, JString, required = false,
                                 default = nil)
  if valid_614620 != nil:
    section.add "Duration", valid_614620
  var valid_614621 = formData.getOrDefault("OfferingType")
  valid_614621 = validateParameter(valid_614621, JString, required = false,
                                 default = nil)
  if valid_614621 != nil:
    section.add "OfferingType", valid_614621
  var valid_614622 = formData.getOrDefault("ProductDescription")
  valid_614622 = validateParameter(valid_614622, JString, required = false,
                                 default = nil)
  if valid_614622 != nil:
    section.add "ProductDescription", valid_614622
  var valid_614623 = formData.getOrDefault("Filters")
  valid_614623 = validateParameter(valid_614623, JArray, required = false,
                                 default = nil)
  if valid_614623 != nil:
    section.add "Filters", valid_614623
  var valid_614624 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_614624 = validateParameter(valid_614624, JString, required = false,
                                 default = nil)
  if valid_614624 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_614624
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614625: Call_PostDescribeReservedDBInstances_614602;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_614625.validator(path, query, header, formData, body)
  let scheme = call_614625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614625.url(scheme.get, call_614625.host, call_614625.base,
                         call_614625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614625, url, valid)

proc call*(call_614626: Call_PostDescribeReservedDBInstances_614602;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          LeaseId: string = ""; ReservedDBInstanceId: string = ""; Marker: string = "";
          Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstances"; Filters: JsonNode = nil;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  var query_614627 = newJObject()
  var formData_614628 = newJObject()
  add(formData_614628, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_614628, "MultiAZ", newJBool(MultiAZ))
  add(formData_614628, "MaxRecords", newJInt(MaxRecords))
  add(formData_614628, "LeaseId", newJString(LeaseId))
  add(formData_614628, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(formData_614628, "Marker", newJString(Marker))
  add(formData_614628, "Duration", newJString(Duration))
  add(formData_614628, "OfferingType", newJString(OfferingType))
  add(formData_614628, "ProductDescription", newJString(ProductDescription))
  add(query_614627, "Action", newJString(Action))
  if Filters != nil:
    formData_614628.add "Filters", Filters
  add(formData_614628, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_614627, "Version", newJString(Version))
  result = call_614626.call(nil, query_614627, nil, formData_614628, nil)

var postDescribeReservedDBInstances* = Call_PostDescribeReservedDBInstances_614602(
    name: "postDescribeReservedDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_PostDescribeReservedDBInstances_614603, base: "/",
    url: url_PostDescribeReservedDBInstances_614604,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstances_614576 = ref object of OpenApiRestCall_610658
proc url_GetDescribeReservedDBInstances_614578(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstances_614577(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614579 = query.getOrDefault("Marker")
  valid_614579 = validateParameter(valid_614579, JString, required = false,
                                 default = nil)
  if valid_614579 != nil:
    section.add "Marker", valid_614579
  var valid_614580 = query.getOrDefault("ProductDescription")
  valid_614580 = validateParameter(valid_614580, JString, required = false,
                                 default = nil)
  if valid_614580 != nil:
    section.add "ProductDescription", valid_614580
  var valid_614581 = query.getOrDefault("OfferingType")
  valid_614581 = validateParameter(valid_614581, JString, required = false,
                                 default = nil)
  if valid_614581 != nil:
    section.add "OfferingType", valid_614581
  var valid_614582 = query.getOrDefault("ReservedDBInstanceId")
  valid_614582 = validateParameter(valid_614582, JString, required = false,
                                 default = nil)
  if valid_614582 != nil:
    section.add "ReservedDBInstanceId", valid_614582
  var valid_614583 = query.getOrDefault("LeaseId")
  valid_614583 = validateParameter(valid_614583, JString, required = false,
                                 default = nil)
  if valid_614583 != nil:
    section.add "LeaseId", valid_614583
  var valid_614584 = query.getOrDefault("Action")
  valid_614584 = validateParameter(valid_614584, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_614584 != nil:
    section.add "Action", valid_614584
  var valid_614585 = query.getOrDefault("MultiAZ")
  valid_614585 = validateParameter(valid_614585, JBool, required = false, default = nil)
  if valid_614585 != nil:
    section.add "MultiAZ", valid_614585
  var valid_614586 = query.getOrDefault("Duration")
  valid_614586 = validateParameter(valid_614586, JString, required = false,
                                 default = nil)
  if valid_614586 != nil:
    section.add "Duration", valid_614586
  var valid_614587 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_614587 = validateParameter(valid_614587, JString, required = false,
                                 default = nil)
  if valid_614587 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_614587
  var valid_614588 = query.getOrDefault("Version")
  valid_614588 = validateParameter(valid_614588, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614588 != nil:
    section.add "Version", valid_614588
  var valid_614589 = query.getOrDefault("DBInstanceClass")
  valid_614589 = validateParameter(valid_614589, JString, required = false,
                                 default = nil)
  if valid_614589 != nil:
    section.add "DBInstanceClass", valid_614589
  var valid_614590 = query.getOrDefault("Filters")
  valid_614590 = validateParameter(valid_614590, JArray, required = false,
                                 default = nil)
  if valid_614590 != nil:
    section.add "Filters", valid_614590
  var valid_614591 = query.getOrDefault("MaxRecords")
  valid_614591 = validateParameter(valid_614591, JInt, required = false, default = nil)
  if valid_614591 != nil:
    section.add "MaxRecords", valid_614591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614592 = header.getOrDefault("X-Amz-Signature")
  valid_614592 = validateParameter(valid_614592, JString, required = false,
                                 default = nil)
  if valid_614592 != nil:
    section.add "X-Amz-Signature", valid_614592
  var valid_614593 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614593 = validateParameter(valid_614593, JString, required = false,
                                 default = nil)
  if valid_614593 != nil:
    section.add "X-Amz-Content-Sha256", valid_614593
  var valid_614594 = header.getOrDefault("X-Amz-Date")
  valid_614594 = validateParameter(valid_614594, JString, required = false,
                                 default = nil)
  if valid_614594 != nil:
    section.add "X-Amz-Date", valid_614594
  var valid_614595 = header.getOrDefault("X-Amz-Credential")
  valid_614595 = validateParameter(valid_614595, JString, required = false,
                                 default = nil)
  if valid_614595 != nil:
    section.add "X-Amz-Credential", valid_614595
  var valid_614596 = header.getOrDefault("X-Amz-Security-Token")
  valid_614596 = validateParameter(valid_614596, JString, required = false,
                                 default = nil)
  if valid_614596 != nil:
    section.add "X-Amz-Security-Token", valid_614596
  var valid_614597 = header.getOrDefault("X-Amz-Algorithm")
  valid_614597 = validateParameter(valid_614597, JString, required = false,
                                 default = nil)
  if valid_614597 != nil:
    section.add "X-Amz-Algorithm", valid_614597
  var valid_614598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614598 = validateParameter(valid_614598, JString, required = false,
                                 default = nil)
  if valid_614598 != nil:
    section.add "X-Amz-SignedHeaders", valid_614598
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614599: Call_GetDescribeReservedDBInstances_614576; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_614599.validator(path, query, header, formData, body)
  let scheme = call_614599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614599.url(scheme.get, call_614599.host, call_614599.base,
                         call_614599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614599, url, valid)

proc call*(call_614600: Call_GetDescribeReservedDBInstances_614576;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; ReservedDBInstanceId: string = "";
          LeaseId: string = ""; Action: string = "DescribeReservedDBInstances";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614601 = newJObject()
  add(query_614601, "Marker", newJString(Marker))
  add(query_614601, "ProductDescription", newJString(ProductDescription))
  add(query_614601, "OfferingType", newJString(OfferingType))
  add(query_614601, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_614601, "LeaseId", newJString(LeaseId))
  add(query_614601, "Action", newJString(Action))
  add(query_614601, "MultiAZ", newJBool(MultiAZ))
  add(query_614601, "Duration", newJString(Duration))
  add(query_614601, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_614601, "Version", newJString(Version))
  add(query_614601, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_614601.add "Filters", Filters
  add(query_614601, "MaxRecords", newJInt(MaxRecords))
  result = call_614600.call(nil, query_614601, nil, nil, nil)

var getDescribeReservedDBInstances* = Call_GetDescribeReservedDBInstances_614576(
    name: "getDescribeReservedDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_GetDescribeReservedDBInstances_614577, base: "/",
    url: url_GetDescribeReservedDBInstances_614578,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstancesOfferings_614653 = ref object of OpenApiRestCall_610658
proc url_PostDescribeReservedDBInstancesOfferings_614655(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstancesOfferings_614654(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614656 = query.getOrDefault("Action")
  valid_614656 = validateParameter(valid_614656, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_614656 != nil:
    section.add "Action", valid_614656
  var valid_614657 = query.getOrDefault("Version")
  valid_614657 = validateParameter(valid_614657, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614657 != nil:
    section.add "Version", valid_614657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614658 = header.getOrDefault("X-Amz-Signature")
  valid_614658 = validateParameter(valid_614658, JString, required = false,
                                 default = nil)
  if valid_614658 != nil:
    section.add "X-Amz-Signature", valid_614658
  var valid_614659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614659 = validateParameter(valid_614659, JString, required = false,
                                 default = nil)
  if valid_614659 != nil:
    section.add "X-Amz-Content-Sha256", valid_614659
  var valid_614660 = header.getOrDefault("X-Amz-Date")
  valid_614660 = validateParameter(valid_614660, JString, required = false,
                                 default = nil)
  if valid_614660 != nil:
    section.add "X-Amz-Date", valid_614660
  var valid_614661 = header.getOrDefault("X-Amz-Credential")
  valid_614661 = validateParameter(valid_614661, JString, required = false,
                                 default = nil)
  if valid_614661 != nil:
    section.add "X-Amz-Credential", valid_614661
  var valid_614662 = header.getOrDefault("X-Amz-Security-Token")
  valid_614662 = validateParameter(valid_614662, JString, required = false,
                                 default = nil)
  if valid_614662 != nil:
    section.add "X-Amz-Security-Token", valid_614662
  var valid_614663 = header.getOrDefault("X-Amz-Algorithm")
  valid_614663 = validateParameter(valid_614663, JString, required = false,
                                 default = nil)
  if valid_614663 != nil:
    section.add "X-Amz-Algorithm", valid_614663
  var valid_614664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614664 = validateParameter(valid_614664, JString, required = false,
                                 default = nil)
  if valid_614664 != nil:
    section.add "X-Amz-SignedHeaders", valid_614664
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_614665 = formData.getOrDefault("DBInstanceClass")
  valid_614665 = validateParameter(valid_614665, JString, required = false,
                                 default = nil)
  if valid_614665 != nil:
    section.add "DBInstanceClass", valid_614665
  var valid_614666 = formData.getOrDefault("MultiAZ")
  valid_614666 = validateParameter(valid_614666, JBool, required = false, default = nil)
  if valid_614666 != nil:
    section.add "MultiAZ", valid_614666
  var valid_614667 = formData.getOrDefault("MaxRecords")
  valid_614667 = validateParameter(valid_614667, JInt, required = false, default = nil)
  if valid_614667 != nil:
    section.add "MaxRecords", valid_614667
  var valid_614668 = formData.getOrDefault("Marker")
  valid_614668 = validateParameter(valid_614668, JString, required = false,
                                 default = nil)
  if valid_614668 != nil:
    section.add "Marker", valid_614668
  var valid_614669 = formData.getOrDefault("Duration")
  valid_614669 = validateParameter(valid_614669, JString, required = false,
                                 default = nil)
  if valid_614669 != nil:
    section.add "Duration", valid_614669
  var valid_614670 = formData.getOrDefault("OfferingType")
  valid_614670 = validateParameter(valid_614670, JString, required = false,
                                 default = nil)
  if valid_614670 != nil:
    section.add "OfferingType", valid_614670
  var valid_614671 = formData.getOrDefault("ProductDescription")
  valid_614671 = validateParameter(valid_614671, JString, required = false,
                                 default = nil)
  if valid_614671 != nil:
    section.add "ProductDescription", valid_614671
  var valid_614672 = formData.getOrDefault("Filters")
  valid_614672 = validateParameter(valid_614672, JArray, required = false,
                                 default = nil)
  if valid_614672 != nil:
    section.add "Filters", valid_614672
  var valid_614673 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_614673 = validateParameter(valid_614673, JString, required = false,
                                 default = nil)
  if valid_614673 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_614673
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614674: Call_PostDescribeReservedDBInstancesOfferings_614653;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_614674.validator(path, query, header, formData, body)
  let scheme = call_614674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614674.url(scheme.get, call_614674.host, call_614674.base,
                         call_614674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614674, url, valid)

proc call*(call_614675: Call_PostDescribeReservedDBInstancesOfferings_614653;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          Marker: string = ""; Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          Filters: JsonNode = nil; ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_614676 = newJObject()
  var formData_614677 = newJObject()
  add(formData_614677, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_614677, "MultiAZ", newJBool(MultiAZ))
  add(formData_614677, "MaxRecords", newJInt(MaxRecords))
  add(formData_614677, "Marker", newJString(Marker))
  add(formData_614677, "Duration", newJString(Duration))
  add(formData_614677, "OfferingType", newJString(OfferingType))
  add(formData_614677, "ProductDescription", newJString(ProductDescription))
  add(query_614676, "Action", newJString(Action))
  if Filters != nil:
    formData_614677.add "Filters", Filters
  add(formData_614677, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_614676, "Version", newJString(Version))
  result = call_614675.call(nil, query_614676, nil, formData_614677, nil)

var postDescribeReservedDBInstancesOfferings* = Call_PostDescribeReservedDBInstancesOfferings_614653(
    name: "postDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_PostDescribeReservedDBInstancesOfferings_614654,
    base: "/", url: url_PostDescribeReservedDBInstancesOfferings_614655,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstancesOfferings_614629 = ref object of OpenApiRestCall_610658
proc url_GetDescribeReservedDBInstancesOfferings_614631(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstancesOfferings_614630(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614632 = query.getOrDefault("Marker")
  valid_614632 = validateParameter(valid_614632, JString, required = false,
                                 default = nil)
  if valid_614632 != nil:
    section.add "Marker", valid_614632
  var valid_614633 = query.getOrDefault("ProductDescription")
  valid_614633 = validateParameter(valid_614633, JString, required = false,
                                 default = nil)
  if valid_614633 != nil:
    section.add "ProductDescription", valid_614633
  var valid_614634 = query.getOrDefault("OfferingType")
  valid_614634 = validateParameter(valid_614634, JString, required = false,
                                 default = nil)
  if valid_614634 != nil:
    section.add "OfferingType", valid_614634
  var valid_614635 = query.getOrDefault("Action")
  valid_614635 = validateParameter(valid_614635, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_614635 != nil:
    section.add "Action", valid_614635
  var valid_614636 = query.getOrDefault("MultiAZ")
  valid_614636 = validateParameter(valid_614636, JBool, required = false, default = nil)
  if valid_614636 != nil:
    section.add "MultiAZ", valid_614636
  var valid_614637 = query.getOrDefault("Duration")
  valid_614637 = validateParameter(valid_614637, JString, required = false,
                                 default = nil)
  if valid_614637 != nil:
    section.add "Duration", valid_614637
  var valid_614638 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_614638 = validateParameter(valid_614638, JString, required = false,
                                 default = nil)
  if valid_614638 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_614638
  var valid_614639 = query.getOrDefault("Version")
  valid_614639 = validateParameter(valid_614639, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614639 != nil:
    section.add "Version", valid_614639
  var valid_614640 = query.getOrDefault("DBInstanceClass")
  valid_614640 = validateParameter(valid_614640, JString, required = false,
                                 default = nil)
  if valid_614640 != nil:
    section.add "DBInstanceClass", valid_614640
  var valid_614641 = query.getOrDefault("Filters")
  valid_614641 = validateParameter(valid_614641, JArray, required = false,
                                 default = nil)
  if valid_614641 != nil:
    section.add "Filters", valid_614641
  var valid_614642 = query.getOrDefault("MaxRecords")
  valid_614642 = validateParameter(valid_614642, JInt, required = false, default = nil)
  if valid_614642 != nil:
    section.add "MaxRecords", valid_614642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614643 = header.getOrDefault("X-Amz-Signature")
  valid_614643 = validateParameter(valid_614643, JString, required = false,
                                 default = nil)
  if valid_614643 != nil:
    section.add "X-Amz-Signature", valid_614643
  var valid_614644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614644 = validateParameter(valid_614644, JString, required = false,
                                 default = nil)
  if valid_614644 != nil:
    section.add "X-Amz-Content-Sha256", valid_614644
  var valid_614645 = header.getOrDefault("X-Amz-Date")
  valid_614645 = validateParameter(valid_614645, JString, required = false,
                                 default = nil)
  if valid_614645 != nil:
    section.add "X-Amz-Date", valid_614645
  var valid_614646 = header.getOrDefault("X-Amz-Credential")
  valid_614646 = validateParameter(valid_614646, JString, required = false,
                                 default = nil)
  if valid_614646 != nil:
    section.add "X-Amz-Credential", valid_614646
  var valid_614647 = header.getOrDefault("X-Amz-Security-Token")
  valid_614647 = validateParameter(valid_614647, JString, required = false,
                                 default = nil)
  if valid_614647 != nil:
    section.add "X-Amz-Security-Token", valid_614647
  var valid_614648 = header.getOrDefault("X-Amz-Algorithm")
  valid_614648 = validateParameter(valid_614648, JString, required = false,
                                 default = nil)
  if valid_614648 != nil:
    section.add "X-Amz-Algorithm", valid_614648
  var valid_614649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614649 = validateParameter(valid_614649, JString, required = false,
                                 default = nil)
  if valid_614649 != nil:
    section.add "X-Amz-SignedHeaders", valid_614649
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614650: Call_GetDescribeReservedDBInstancesOfferings_614629;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_614650.validator(path, query, header, formData, body)
  let scheme = call_614650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614650.url(scheme.get, call_614650.host, call_614650.base,
                         call_614650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614650, url, valid)

proc call*(call_614651: Call_GetDescribeReservedDBInstancesOfferings_614629;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614652 = newJObject()
  add(query_614652, "Marker", newJString(Marker))
  add(query_614652, "ProductDescription", newJString(ProductDescription))
  add(query_614652, "OfferingType", newJString(OfferingType))
  add(query_614652, "Action", newJString(Action))
  add(query_614652, "MultiAZ", newJBool(MultiAZ))
  add(query_614652, "Duration", newJString(Duration))
  add(query_614652, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_614652, "Version", newJString(Version))
  add(query_614652, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_614652.add "Filters", Filters
  add(query_614652, "MaxRecords", newJInt(MaxRecords))
  result = call_614651.call(nil, query_614652, nil, nil, nil)

var getDescribeReservedDBInstancesOfferings* = Call_GetDescribeReservedDBInstancesOfferings_614629(
    name: "getDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_GetDescribeReservedDBInstancesOfferings_614630, base: "/",
    url: url_GetDescribeReservedDBInstancesOfferings_614631,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSourceRegions_614697 = ref object of OpenApiRestCall_610658
proc url_PostDescribeSourceRegions_614699(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSourceRegions_614698(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614700 = query.getOrDefault("Action")
  valid_614700 = validateParameter(valid_614700, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_614700 != nil:
    section.add "Action", valid_614700
  var valid_614701 = query.getOrDefault("Version")
  valid_614701 = validateParameter(valid_614701, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614701 != nil:
    section.add "Version", valid_614701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614702 = header.getOrDefault("X-Amz-Signature")
  valid_614702 = validateParameter(valid_614702, JString, required = false,
                                 default = nil)
  if valid_614702 != nil:
    section.add "X-Amz-Signature", valid_614702
  var valid_614703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614703 = validateParameter(valid_614703, JString, required = false,
                                 default = nil)
  if valid_614703 != nil:
    section.add "X-Amz-Content-Sha256", valid_614703
  var valid_614704 = header.getOrDefault("X-Amz-Date")
  valid_614704 = validateParameter(valid_614704, JString, required = false,
                                 default = nil)
  if valid_614704 != nil:
    section.add "X-Amz-Date", valid_614704
  var valid_614705 = header.getOrDefault("X-Amz-Credential")
  valid_614705 = validateParameter(valid_614705, JString, required = false,
                                 default = nil)
  if valid_614705 != nil:
    section.add "X-Amz-Credential", valid_614705
  var valid_614706 = header.getOrDefault("X-Amz-Security-Token")
  valid_614706 = validateParameter(valid_614706, JString, required = false,
                                 default = nil)
  if valid_614706 != nil:
    section.add "X-Amz-Security-Token", valid_614706
  var valid_614707 = header.getOrDefault("X-Amz-Algorithm")
  valid_614707 = validateParameter(valid_614707, JString, required = false,
                                 default = nil)
  if valid_614707 != nil:
    section.add "X-Amz-Algorithm", valid_614707
  var valid_614708 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614708 = validateParameter(valid_614708, JString, required = false,
                                 default = nil)
  if valid_614708 != nil:
    section.add "X-Amz-SignedHeaders", valid_614708
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  section = newJObject()
  var valid_614709 = formData.getOrDefault("MaxRecords")
  valid_614709 = validateParameter(valid_614709, JInt, required = false, default = nil)
  if valid_614709 != nil:
    section.add "MaxRecords", valid_614709
  var valid_614710 = formData.getOrDefault("Marker")
  valid_614710 = validateParameter(valid_614710, JString, required = false,
                                 default = nil)
  if valid_614710 != nil:
    section.add "Marker", valid_614710
  var valid_614711 = formData.getOrDefault("Filters")
  valid_614711 = validateParameter(valid_614711, JArray, required = false,
                                 default = nil)
  if valid_614711 != nil:
    section.add "Filters", valid_614711
  var valid_614712 = formData.getOrDefault("RegionName")
  valid_614712 = validateParameter(valid_614712, JString, required = false,
                                 default = nil)
  if valid_614712 != nil:
    section.add "RegionName", valid_614712
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614713: Call_PostDescribeSourceRegions_614697; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_614713.validator(path, query, header, formData, body)
  let scheme = call_614713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614713.url(scheme.get, call_614713.host, call_614713.base,
                         call_614713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614713, url, valid)

proc call*(call_614714: Call_PostDescribeSourceRegions_614697; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeSourceRegions";
          Filters: JsonNode = nil; Version: string = "2014-10-31";
          RegionName: string = ""): Recallable =
  ## postDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  var query_614715 = newJObject()
  var formData_614716 = newJObject()
  add(formData_614716, "MaxRecords", newJInt(MaxRecords))
  add(formData_614716, "Marker", newJString(Marker))
  add(query_614715, "Action", newJString(Action))
  if Filters != nil:
    formData_614716.add "Filters", Filters
  add(query_614715, "Version", newJString(Version))
  add(formData_614716, "RegionName", newJString(RegionName))
  result = call_614714.call(nil, query_614715, nil, formData_614716, nil)

var postDescribeSourceRegions* = Call_PostDescribeSourceRegions_614697(
    name: "postDescribeSourceRegions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_PostDescribeSourceRegions_614698, base: "/",
    url: url_PostDescribeSourceRegions_614699,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSourceRegions_614678 = ref object of OpenApiRestCall_610658
proc url_GetDescribeSourceRegions_614680(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSourceRegions_614679(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_614681 = query.getOrDefault("Marker")
  valid_614681 = validateParameter(valid_614681, JString, required = false,
                                 default = nil)
  if valid_614681 != nil:
    section.add "Marker", valid_614681
  var valid_614682 = query.getOrDefault("RegionName")
  valid_614682 = validateParameter(valid_614682, JString, required = false,
                                 default = nil)
  if valid_614682 != nil:
    section.add "RegionName", valid_614682
  var valid_614683 = query.getOrDefault("Action")
  valid_614683 = validateParameter(valid_614683, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_614683 != nil:
    section.add "Action", valid_614683
  var valid_614684 = query.getOrDefault("Version")
  valid_614684 = validateParameter(valid_614684, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614684 != nil:
    section.add "Version", valid_614684
  var valid_614685 = query.getOrDefault("Filters")
  valid_614685 = validateParameter(valid_614685, JArray, required = false,
                                 default = nil)
  if valid_614685 != nil:
    section.add "Filters", valid_614685
  var valid_614686 = query.getOrDefault("MaxRecords")
  valid_614686 = validateParameter(valid_614686, JInt, required = false, default = nil)
  if valid_614686 != nil:
    section.add "MaxRecords", valid_614686
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614687 = header.getOrDefault("X-Amz-Signature")
  valid_614687 = validateParameter(valid_614687, JString, required = false,
                                 default = nil)
  if valid_614687 != nil:
    section.add "X-Amz-Signature", valid_614687
  var valid_614688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614688 = validateParameter(valid_614688, JString, required = false,
                                 default = nil)
  if valid_614688 != nil:
    section.add "X-Amz-Content-Sha256", valid_614688
  var valid_614689 = header.getOrDefault("X-Amz-Date")
  valid_614689 = validateParameter(valid_614689, JString, required = false,
                                 default = nil)
  if valid_614689 != nil:
    section.add "X-Amz-Date", valid_614689
  var valid_614690 = header.getOrDefault("X-Amz-Credential")
  valid_614690 = validateParameter(valid_614690, JString, required = false,
                                 default = nil)
  if valid_614690 != nil:
    section.add "X-Amz-Credential", valid_614690
  var valid_614691 = header.getOrDefault("X-Amz-Security-Token")
  valid_614691 = validateParameter(valid_614691, JString, required = false,
                                 default = nil)
  if valid_614691 != nil:
    section.add "X-Amz-Security-Token", valid_614691
  var valid_614692 = header.getOrDefault("X-Amz-Algorithm")
  valid_614692 = validateParameter(valid_614692, JString, required = false,
                                 default = nil)
  if valid_614692 != nil:
    section.add "X-Amz-Algorithm", valid_614692
  var valid_614693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614693 = validateParameter(valid_614693, JString, required = false,
                                 default = nil)
  if valid_614693 != nil:
    section.add "X-Amz-SignedHeaders", valid_614693
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614694: Call_GetDescribeSourceRegions_614678; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_614694.validator(path, query, header, formData, body)
  let scheme = call_614694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614694.url(scheme.get, call_614694.host, call_614694.base,
                         call_614694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614694, url, valid)

proc call*(call_614695: Call_GetDescribeSourceRegions_614678; Marker: string = "";
          RegionName: string = ""; Action: string = "DescribeSourceRegions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_614696 = newJObject()
  add(query_614696, "Marker", newJString(Marker))
  add(query_614696, "RegionName", newJString(RegionName))
  add(query_614696, "Action", newJString(Action))
  add(query_614696, "Version", newJString(Version))
  if Filters != nil:
    query_614696.add "Filters", Filters
  add(query_614696, "MaxRecords", newJInt(MaxRecords))
  result = call_614695.call(nil, query_614696, nil, nil, nil)

var getDescribeSourceRegions* = Call_GetDescribeSourceRegions_614678(
    name: "getDescribeSourceRegions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_GetDescribeSourceRegions_614679, base: "/",
    url: url_GetDescribeSourceRegions_614680, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_614733 = ref object of OpenApiRestCall_610658
proc url_PostDescribeValidDBInstanceModifications_614735(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_614734(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614736 = query.getOrDefault("Action")
  valid_614736 = validateParameter(valid_614736, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_614736 != nil:
    section.add "Action", valid_614736
  var valid_614737 = query.getOrDefault("Version")
  valid_614737 = validateParameter(valid_614737, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614737 != nil:
    section.add "Version", valid_614737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614738 = header.getOrDefault("X-Amz-Signature")
  valid_614738 = validateParameter(valid_614738, JString, required = false,
                                 default = nil)
  if valid_614738 != nil:
    section.add "X-Amz-Signature", valid_614738
  var valid_614739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614739 = validateParameter(valid_614739, JString, required = false,
                                 default = nil)
  if valid_614739 != nil:
    section.add "X-Amz-Content-Sha256", valid_614739
  var valid_614740 = header.getOrDefault("X-Amz-Date")
  valid_614740 = validateParameter(valid_614740, JString, required = false,
                                 default = nil)
  if valid_614740 != nil:
    section.add "X-Amz-Date", valid_614740
  var valid_614741 = header.getOrDefault("X-Amz-Credential")
  valid_614741 = validateParameter(valid_614741, JString, required = false,
                                 default = nil)
  if valid_614741 != nil:
    section.add "X-Amz-Credential", valid_614741
  var valid_614742 = header.getOrDefault("X-Amz-Security-Token")
  valid_614742 = validateParameter(valid_614742, JString, required = false,
                                 default = nil)
  if valid_614742 != nil:
    section.add "X-Amz-Security-Token", valid_614742
  var valid_614743 = header.getOrDefault("X-Amz-Algorithm")
  valid_614743 = validateParameter(valid_614743, JString, required = false,
                                 default = nil)
  if valid_614743 != nil:
    section.add "X-Amz-Algorithm", valid_614743
  var valid_614744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614744 = validateParameter(valid_614744, JString, required = false,
                                 default = nil)
  if valid_614744 != nil:
    section.add "X-Amz-SignedHeaders", valid_614744
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614745 = formData.getOrDefault("DBInstanceIdentifier")
  valid_614745 = validateParameter(valid_614745, JString, required = true,
                                 default = nil)
  if valid_614745 != nil:
    section.add "DBInstanceIdentifier", valid_614745
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614746: Call_PostDescribeValidDBInstanceModifications_614733;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_614746.validator(path, query, header, formData, body)
  let scheme = call_614746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614746.url(scheme.get, call_614746.host, call_614746.base,
                         call_614746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614746, url, valid)

proc call*(call_614747: Call_PostDescribeValidDBInstanceModifications_614733;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614748 = newJObject()
  var formData_614749 = newJObject()
  add(formData_614749, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614748, "Action", newJString(Action))
  add(query_614748, "Version", newJString(Version))
  result = call_614747.call(nil, query_614748, nil, formData_614749, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_614733(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_614734,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_614735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_614717 = ref object of OpenApiRestCall_610658
proc url_GetDescribeValidDBInstanceModifications_614719(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_614718(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614720 = query.getOrDefault("DBInstanceIdentifier")
  valid_614720 = validateParameter(valid_614720, JString, required = true,
                                 default = nil)
  if valid_614720 != nil:
    section.add "DBInstanceIdentifier", valid_614720
  var valid_614721 = query.getOrDefault("Action")
  valid_614721 = validateParameter(valid_614721, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_614721 != nil:
    section.add "Action", valid_614721
  var valid_614722 = query.getOrDefault("Version")
  valid_614722 = validateParameter(valid_614722, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614722 != nil:
    section.add "Version", valid_614722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614723 = header.getOrDefault("X-Amz-Signature")
  valid_614723 = validateParameter(valid_614723, JString, required = false,
                                 default = nil)
  if valid_614723 != nil:
    section.add "X-Amz-Signature", valid_614723
  var valid_614724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614724 = validateParameter(valid_614724, JString, required = false,
                                 default = nil)
  if valid_614724 != nil:
    section.add "X-Amz-Content-Sha256", valid_614724
  var valid_614725 = header.getOrDefault("X-Amz-Date")
  valid_614725 = validateParameter(valid_614725, JString, required = false,
                                 default = nil)
  if valid_614725 != nil:
    section.add "X-Amz-Date", valid_614725
  var valid_614726 = header.getOrDefault("X-Amz-Credential")
  valid_614726 = validateParameter(valid_614726, JString, required = false,
                                 default = nil)
  if valid_614726 != nil:
    section.add "X-Amz-Credential", valid_614726
  var valid_614727 = header.getOrDefault("X-Amz-Security-Token")
  valid_614727 = validateParameter(valid_614727, JString, required = false,
                                 default = nil)
  if valid_614727 != nil:
    section.add "X-Amz-Security-Token", valid_614727
  var valid_614728 = header.getOrDefault("X-Amz-Algorithm")
  valid_614728 = validateParameter(valid_614728, JString, required = false,
                                 default = nil)
  if valid_614728 != nil:
    section.add "X-Amz-Algorithm", valid_614728
  var valid_614729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614729 = validateParameter(valid_614729, JString, required = false,
                                 default = nil)
  if valid_614729 != nil:
    section.add "X-Amz-SignedHeaders", valid_614729
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614730: Call_GetDescribeValidDBInstanceModifications_614717;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_614730.validator(path, query, header, formData, body)
  let scheme = call_614730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614730.url(scheme.get, call_614730.host, call_614730.base,
                         call_614730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614730, url, valid)

proc call*(call_614731: Call_GetDescribeValidDBInstanceModifications_614717;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614732 = newJObject()
  add(query_614732, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614732, "Action", newJString(Action))
  add(query_614732, "Version", newJString(Version))
  result = call_614731.call(nil, query_614732, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_614717(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_614718, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_614719,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDownloadDBLogFilePortion_614769 = ref object of OpenApiRestCall_610658
proc url_PostDownloadDBLogFilePortion_614771(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDownloadDBLogFilePortion_614770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614772 = query.getOrDefault("Action")
  valid_614772 = validateParameter(valid_614772, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_614772 != nil:
    section.add "Action", valid_614772
  var valid_614773 = query.getOrDefault("Version")
  valid_614773 = validateParameter(valid_614773, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614773 != nil:
    section.add "Version", valid_614773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614774 = header.getOrDefault("X-Amz-Signature")
  valid_614774 = validateParameter(valid_614774, JString, required = false,
                                 default = nil)
  if valid_614774 != nil:
    section.add "X-Amz-Signature", valid_614774
  var valid_614775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614775 = validateParameter(valid_614775, JString, required = false,
                                 default = nil)
  if valid_614775 != nil:
    section.add "X-Amz-Content-Sha256", valid_614775
  var valid_614776 = header.getOrDefault("X-Amz-Date")
  valid_614776 = validateParameter(valid_614776, JString, required = false,
                                 default = nil)
  if valid_614776 != nil:
    section.add "X-Amz-Date", valid_614776
  var valid_614777 = header.getOrDefault("X-Amz-Credential")
  valid_614777 = validateParameter(valid_614777, JString, required = false,
                                 default = nil)
  if valid_614777 != nil:
    section.add "X-Amz-Credential", valid_614777
  var valid_614778 = header.getOrDefault("X-Amz-Security-Token")
  valid_614778 = validateParameter(valid_614778, JString, required = false,
                                 default = nil)
  if valid_614778 != nil:
    section.add "X-Amz-Security-Token", valid_614778
  var valid_614779 = header.getOrDefault("X-Amz-Algorithm")
  valid_614779 = validateParameter(valid_614779, JString, required = false,
                                 default = nil)
  if valid_614779 != nil:
    section.add "X-Amz-Algorithm", valid_614779
  var valid_614780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614780 = validateParameter(valid_614780, JString, required = false,
                                 default = nil)
  if valid_614780 != nil:
    section.add "X-Amz-SignedHeaders", valid_614780
  result.add "header", section
  ## parameters in `formData` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_614781 = formData.getOrDefault("NumberOfLines")
  valid_614781 = validateParameter(valid_614781, JInt, required = false, default = nil)
  if valid_614781 != nil:
    section.add "NumberOfLines", valid_614781
  var valid_614782 = formData.getOrDefault("Marker")
  valid_614782 = validateParameter(valid_614782, JString, required = false,
                                 default = nil)
  if valid_614782 != nil:
    section.add "Marker", valid_614782
  assert formData != nil,
        "formData argument is necessary due to required `LogFileName` field"
  var valid_614783 = formData.getOrDefault("LogFileName")
  valid_614783 = validateParameter(valid_614783, JString, required = true,
                                 default = nil)
  if valid_614783 != nil:
    section.add "LogFileName", valid_614783
  var valid_614784 = formData.getOrDefault("DBInstanceIdentifier")
  valid_614784 = validateParameter(valid_614784, JString, required = true,
                                 default = nil)
  if valid_614784 != nil:
    section.add "DBInstanceIdentifier", valid_614784
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614785: Call_PostDownloadDBLogFilePortion_614769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_614785.validator(path, query, header, formData, body)
  let scheme = call_614785.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614785.url(scheme.get, call_614785.host, call_614785.base,
                         call_614785.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614785, url, valid)

proc call*(call_614786: Call_PostDownloadDBLogFilePortion_614769;
          LogFileName: string; DBInstanceIdentifier: string; NumberOfLines: int = 0;
          Marker: string = ""; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## postDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614787 = newJObject()
  var formData_614788 = newJObject()
  add(formData_614788, "NumberOfLines", newJInt(NumberOfLines))
  add(formData_614788, "Marker", newJString(Marker))
  add(formData_614788, "LogFileName", newJString(LogFileName))
  add(formData_614788, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614787, "Action", newJString(Action))
  add(query_614787, "Version", newJString(Version))
  result = call_614786.call(nil, query_614787, nil, formData_614788, nil)

var postDownloadDBLogFilePortion* = Call_PostDownloadDBLogFilePortion_614769(
    name: "postDownloadDBLogFilePortion", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_PostDownloadDBLogFilePortion_614770, base: "/",
    url: url_PostDownloadDBLogFilePortion_614771,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDownloadDBLogFilePortion_614750 = ref object of OpenApiRestCall_610658
proc url_GetDownloadDBLogFilePortion_614752(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDownloadDBLogFilePortion_614751(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: JString (required)
  section = newJObject()
  var valid_614753 = query.getOrDefault("Marker")
  valid_614753 = validateParameter(valid_614753, JString, required = false,
                                 default = nil)
  if valid_614753 != nil:
    section.add "Marker", valid_614753
  var valid_614754 = query.getOrDefault("NumberOfLines")
  valid_614754 = validateParameter(valid_614754, JInt, required = false, default = nil)
  if valid_614754 != nil:
    section.add "NumberOfLines", valid_614754
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614755 = query.getOrDefault("DBInstanceIdentifier")
  valid_614755 = validateParameter(valid_614755, JString, required = true,
                                 default = nil)
  if valid_614755 != nil:
    section.add "DBInstanceIdentifier", valid_614755
  var valid_614756 = query.getOrDefault("Action")
  valid_614756 = validateParameter(valid_614756, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_614756 != nil:
    section.add "Action", valid_614756
  var valid_614757 = query.getOrDefault("LogFileName")
  valid_614757 = validateParameter(valid_614757, JString, required = true,
                                 default = nil)
  if valid_614757 != nil:
    section.add "LogFileName", valid_614757
  var valid_614758 = query.getOrDefault("Version")
  valid_614758 = validateParameter(valid_614758, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614758 != nil:
    section.add "Version", valid_614758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614759 = header.getOrDefault("X-Amz-Signature")
  valid_614759 = validateParameter(valid_614759, JString, required = false,
                                 default = nil)
  if valid_614759 != nil:
    section.add "X-Amz-Signature", valid_614759
  var valid_614760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614760 = validateParameter(valid_614760, JString, required = false,
                                 default = nil)
  if valid_614760 != nil:
    section.add "X-Amz-Content-Sha256", valid_614760
  var valid_614761 = header.getOrDefault("X-Amz-Date")
  valid_614761 = validateParameter(valid_614761, JString, required = false,
                                 default = nil)
  if valid_614761 != nil:
    section.add "X-Amz-Date", valid_614761
  var valid_614762 = header.getOrDefault("X-Amz-Credential")
  valid_614762 = validateParameter(valid_614762, JString, required = false,
                                 default = nil)
  if valid_614762 != nil:
    section.add "X-Amz-Credential", valid_614762
  var valid_614763 = header.getOrDefault("X-Amz-Security-Token")
  valid_614763 = validateParameter(valid_614763, JString, required = false,
                                 default = nil)
  if valid_614763 != nil:
    section.add "X-Amz-Security-Token", valid_614763
  var valid_614764 = header.getOrDefault("X-Amz-Algorithm")
  valid_614764 = validateParameter(valid_614764, JString, required = false,
                                 default = nil)
  if valid_614764 != nil:
    section.add "X-Amz-Algorithm", valid_614764
  var valid_614765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614765 = validateParameter(valid_614765, JString, required = false,
                                 default = nil)
  if valid_614765 != nil:
    section.add "X-Amz-SignedHeaders", valid_614765
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614766: Call_GetDownloadDBLogFilePortion_614750; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_614766.validator(path, query, header, formData, body)
  let scheme = call_614766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614766.url(scheme.get, call_614766.host, call_614766.base,
                         call_614766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614766, url, valid)

proc call*(call_614767: Call_GetDownloadDBLogFilePortion_614750;
          DBInstanceIdentifier: string; LogFileName: string; Marker: string = "";
          NumberOfLines: int = 0; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## getDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: string (required)
  var query_614768 = newJObject()
  add(query_614768, "Marker", newJString(Marker))
  add(query_614768, "NumberOfLines", newJInt(NumberOfLines))
  add(query_614768, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614768, "Action", newJString(Action))
  add(query_614768, "LogFileName", newJString(LogFileName))
  add(query_614768, "Version", newJString(Version))
  result = call_614767.call(nil, query_614768, nil, nil, nil)

var getDownloadDBLogFilePortion* = Call_GetDownloadDBLogFilePortion_614750(
    name: "getDownloadDBLogFilePortion", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_GetDownloadDBLogFilePortion_614751, base: "/",
    url: url_GetDownloadDBLogFilePortion_614752,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_614806 = ref object of OpenApiRestCall_610658
proc url_PostFailoverDBCluster_614808(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostFailoverDBCluster_614807(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614809 = query.getOrDefault("Action")
  valid_614809 = validateParameter(valid_614809, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_614809 != nil:
    section.add "Action", valid_614809
  var valid_614810 = query.getOrDefault("Version")
  valid_614810 = validateParameter(valid_614810, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614810 != nil:
    section.add "Version", valid_614810
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614811 = header.getOrDefault("X-Amz-Signature")
  valid_614811 = validateParameter(valid_614811, JString, required = false,
                                 default = nil)
  if valid_614811 != nil:
    section.add "X-Amz-Signature", valid_614811
  var valid_614812 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614812 = validateParameter(valid_614812, JString, required = false,
                                 default = nil)
  if valid_614812 != nil:
    section.add "X-Amz-Content-Sha256", valid_614812
  var valid_614813 = header.getOrDefault("X-Amz-Date")
  valid_614813 = validateParameter(valid_614813, JString, required = false,
                                 default = nil)
  if valid_614813 != nil:
    section.add "X-Amz-Date", valid_614813
  var valid_614814 = header.getOrDefault("X-Amz-Credential")
  valid_614814 = validateParameter(valid_614814, JString, required = false,
                                 default = nil)
  if valid_614814 != nil:
    section.add "X-Amz-Credential", valid_614814
  var valid_614815 = header.getOrDefault("X-Amz-Security-Token")
  valid_614815 = validateParameter(valid_614815, JString, required = false,
                                 default = nil)
  if valid_614815 != nil:
    section.add "X-Amz-Security-Token", valid_614815
  var valid_614816 = header.getOrDefault("X-Amz-Algorithm")
  valid_614816 = validateParameter(valid_614816, JString, required = false,
                                 default = nil)
  if valid_614816 != nil:
    section.add "X-Amz-Algorithm", valid_614816
  var valid_614817 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614817 = validateParameter(valid_614817, JString, required = false,
                                 default = nil)
  if valid_614817 != nil:
    section.add "X-Amz-SignedHeaders", valid_614817
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_614818 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_614818 = validateParameter(valid_614818, JString, required = false,
                                 default = nil)
  if valid_614818 != nil:
    section.add "TargetDBInstanceIdentifier", valid_614818
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_614819 = formData.getOrDefault("DBClusterIdentifier")
  valid_614819 = validateParameter(valid_614819, JString, required = true,
                                 default = nil)
  if valid_614819 != nil:
    section.add "DBClusterIdentifier", valid_614819
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614820: Call_PostFailoverDBCluster_614806; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614820.validator(path, query, header, formData, body)
  let scheme = call_614820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614820.url(scheme.get, call_614820.host, call_614820.base,
                         call_614820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614820, url, valid)

proc call*(call_614821: Call_PostFailoverDBCluster_614806;
          DBClusterIdentifier: string; Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_614822 = newJObject()
  var formData_614823 = newJObject()
  add(query_614822, "Action", newJString(Action))
  add(formData_614823, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_614822, "Version", newJString(Version))
  add(formData_614823, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_614821.call(nil, query_614822, nil, formData_614823, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_614806(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_614807, base: "/",
    url: url_PostFailoverDBCluster_614808, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_614789 = ref object of OpenApiRestCall_610658
proc url_GetFailoverDBCluster_614791(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetFailoverDBCluster_614790(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_614792 = query.getOrDefault("DBClusterIdentifier")
  valid_614792 = validateParameter(valid_614792, JString, required = true,
                                 default = nil)
  if valid_614792 != nil:
    section.add "DBClusterIdentifier", valid_614792
  var valid_614793 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_614793 = validateParameter(valid_614793, JString, required = false,
                                 default = nil)
  if valid_614793 != nil:
    section.add "TargetDBInstanceIdentifier", valid_614793
  var valid_614794 = query.getOrDefault("Action")
  valid_614794 = validateParameter(valid_614794, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_614794 != nil:
    section.add "Action", valid_614794
  var valid_614795 = query.getOrDefault("Version")
  valid_614795 = validateParameter(valid_614795, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614795 != nil:
    section.add "Version", valid_614795
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614796 = header.getOrDefault("X-Amz-Signature")
  valid_614796 = validateParameter(valid_614796, JString, required = false,
                                 default = nil)
  if valid_614796 != nil:
    section.add "X-Amz-Signature", valid_614796
  var valid_614797 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614797 = validateParameter(valid_614797, JString, required = false,
                                 default = nil)
  if valid_614797 != nil:
    section.add "X-Amz-Content-Sha256", valid_614797
  var valid_614798 = header.getOrDefault("X-Amz-Date")
  valid_614798 = validateParameter(valid_614798, JString, required = false,
                                 default = nil)
  if valid_614798 != nil:
    section.add "X-Amz-Date", valid_614798
  var valid_614799 = header.getOrDefault("X-Amz-Credential")
  valid_614799 = validateParameter(valid_614799, JString, required = false,
                                 default = nil)
  if valid_614799 != nil:
    section.add "X-Amz-Credential", valid_614799
  var valid_614800 = header.getOrDefault("X-Amz-Security-Token")
  valid_614800 = validateParameter(valid_614800, JString, required = false,
                                 default = nil)
  if valid_614800 != nil:
    section.add "X-Amz-Security-Token", valid_614800
  var valid_614801 = header.getOrDefault("X-Amz-Algorithm")
  valid_614801 = validateParameter(valid_614801, JString, required = false,
                                 default = nil)
  if valid_614801 != nil:
    section.add "X-Amz-Algorithm", valid_614801
  var valid_614802 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614802 = validateParameter(valid_614802, JString, required = false,
                                 default = nil)
  if valid_614802 != nil:
    section.add "X-Amz-SignedHeaders", valid_614802
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614803: Call_GetFailoverDBCluster_614789; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614803.validator(path, query, header, formData, body)
  let scheme = call_614803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614803.url(scheme.get, call_614803.host, call_614803.base,
                         call_614803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614803, url, valid)

proc call*(call_614804: Call_GetFailoverDBCluster_614789;
          DBClusterIdentifier: string; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614805 = newJObject()
  add(query_614805, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_614805, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_614805, "Action", newJString(Action))
  add(query_614805, "Version", newJString(Version))
  result = call_614804.call(nil, query_614805, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_614789(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_614790, base: "/",
    url: url_GetFailoverDBCluster_614791, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostImportInstallationMedia_614844 = ref object of OpenApiRestCall_610658
proc url_PostImportInstallationMedia_614846(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostImportInstallationMedia_614845(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614847 = query.getOrDefault("Action")
  valid_614847 = validateParameter(valid_614847, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_614847 != nil:
    section.add "Action", valid_614847
  var valid_614848 = query.getOrDefault("Version")
  valid_614848 = validateParameter(valid_614848, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614848 != nil:
    section.add "Version", valid_614848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614849 = header.getOrDefault("X-Amz-Signature")
  valid_614849 = validateParameter(valid_614849, JString, required = false,
                                 default = nil)
  if valid_614849 != nil:
    section.add "X-Amz-Signature", valid_614849
  var valid_614850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614850 = validateParameter(valid_614850, JString, required = false,
                                 default = nil)
  if valid_614850 != nil:
    section.add "X-Amz-Content-Sha256", valid_614850
  var valid_614851 = header.getOrDefault("X-Amz-Date")
  valid_614851 = validateParameter(valid_614851, JString, required = false,
                                 default = nil)
  if valid_614851 != nil:
    section.add "X-Amz-Date", valid_614851
  var valid_614852 = header.getOrDefault("X-Amz-Credential")
  valid_614852 = validateParameter(valid_614852, JString, required = false,
                                 default = nil)
  if valid_614852 != nil:
    section.add "X-Amz-Credential", valid_614852
  var valid_614853 = header.getOrDefault("X-Amz-Security-Token")
  valid_614853 = validateParameter(valid_614853, JString, required = false,
                                 default = nil)
  if valid_614853 != nil:
    section.add "X-Amz-Security-Token", valid_614853
  var valid_614854 = header.getOrDefault("X-Amz-Algorithm")
  valid_614854 = validateParameter(valid_614854, JString, required = false,
                                 default = nil)
  if valid_614854 != nil:
    section.add "X-Amz-Algorithm", valid_614854
  var valid_614855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614855 = validateParameter(valid_614855, JString, required = false,
                                 default = nil)
  if valid_614855 != nil:
    section.add "X-Amz-SignedHeaders", valid_614855
  result.add "header", section
  ## parameters in `formData` object:
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OSInstallationMediaPath` field"
  var valid_614856 = formData.getOrDefault("OSInstallationMediaPath")
  valid_614856 = validateParameter(valid_614856, JString, required = true,
                                 default = nil)
  if valid_614856 != nil:
    section.add "OSInstallationMediaPath", valid_614856
  var valid_614857 = formData.getOrDefault("EngineInstallationMediaPath")
  valid_614857 = validateParameter(valid_614857, JString, required = true,
                                 default = nil)
  if valid_614857 != nil:
    section.add "EngineInstallationMediaPath", valid_614857
  var valid_614858 = formData.getOrDefault("EngineVersion")
  valid_614858 = validateParameter(valid_614858, JString, required = true,
                                 default = nil)
  if valid_614858 != nil:
    section.add "EngineVersion", valid_614858
  var valid_614859 = formData.getOrDefault("Engine")
  valid_614859 = validateParameter(valid_614859, JString, required = true,
                                 default = nil)
  if valid_614859 != nil:
    section.add "Engine", valid_614859
  var valid_614860 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_614860 = validateParameter(valid_614860, JString, required = true,
                                 default = nil)
  if valid_614860 != nil:
    section.add "CustomAvailabilityZoneId", valid_614860
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614861: Call_PostImportInstallationMedia_614844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_614861.validator(path, query, header, formData, body)
  let scheme = call_614861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614861.url(scheme.get, call_614861.host, call_614861.base,
                         call_614861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614861, url, valid)

proc call*(call_614862: Call_PostImportInstallationMedia_614844;
          OSInstallationMediaPath: string; EngineInstallationMediaPath: string;
          EngineVersion: string; Engine: string; CustomAvailabilityZoneId: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## postImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   Version: string (required)
  var query_614863 = newJObject()
  var formData_614864 = newJObject()
  add(formData_614864, "OSInstallationMediaPath",
      newJString(OSInstallationMediaPath))
  add(formData_614864, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(formData_614864, "EngineVersion", newJString(EngineVersion))
  add(formData_614864, "Engine", newJString(Engine))
  add(query_614863, "Action", newJString(Action))
  add(formData_614864, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_614863, "Version", newJString(Version))
  result = call_614862.call(nil, query_614863, nil, formData_614864, nil)

var postImportInstallationMedia* = Call_PostImportInstallationMedia_614844(
    name: "postImportInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_PostImportInstallationMedia_614845, base: "/",
    url: url_PostImportInstallationMedia_614846,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImportInstallationMedia_614824 = ref object of OpenApiRestCall_610658
proc url_GetImportInstallationMedia_614826(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetImportInstallationMedia_614825(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_614827 = query.getOrDefault("Engine")
  valid_614827 = validateParameter(valid_614827, JString, required = true,
                                 default = nil)
  if valid_614827 != nil:
    section.add "Engine", valid_614827
  var valid_614828 = query.getOrDefault("EngineInstallationMediaPath")
  valid_614828 = validateParameter(valid_614828, JString, required = true,
                                 default = nil)
  if valid_614828 != nil:
    section.add "EngineInstallationMediaPath", valid_614828
  var valid_614829 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_614829 = validateParameter(valid_614829, JString, required = true,
                                 default = nil)
  if valid_614829 != nil:
    section.add "CustomAvailabilityZoneId", valid_614829
  var valid_614830 = query.getOrDefault("EngineVersion")
  valid_614830 = validateParameter(valid_614830, JString, required = true,
                                 default = nil)
  if valid_614830 != nil:
    section.add "EngineVersion", valid_614830
  var valid_614831 = query.getOrDefault("Action")
  valid_614831 = validateParameter(valid_614831, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_614831 != nil:
    section.add "Action", valid_614831
  var valid_614832 = query.getOrDefault("OSInstallationMediaPath")
  valid_614832 = validateParameter(valid_614832, JString, required = true,
                                 default = nil)
  if valid_614832 != nil:
    section.add "OSInstallationMediaPath", valid_614832
  var valid_614833 = query.getOrDefault("Version")
  valid_614833 = validateParameter(valid_614833, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614833 != nil:
    section.add "Version", valid_614833
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614834 = header.getOrDefault("X-Amz-Signature")
  valid_614834 = validateParameter(valid_614834, JString, required = false,
                                 default = nil)
  if valid_614834 != nil:
    section.add "X-Amz-Signature", valid_614834
  var valid_614835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614835 = validateParameter(valid_614835, JString, required = false,
                                 default = nil)
  if valid_614835 != nil:
    section.add "X-Amz-Content-Sha256", valid_614835
  var valid_614836 = header.getOrDefault("X-Amz-Date")
  valid_614836 = validateParameter(valid_614836, JString, required = false,
                                 default = nil)
  if valid_614836 != nil:
    section.add "X-Amz-Date", valid_614836
  var valid_614837 = header.getOrDefault("X-Amz-Credential")
  valid_614837 = validateParameter(valid_614837, JString, required = false,
                                 default = nil)
  if valid_614837 != nil:
    section.add "X-Amz-Credential", valid_614837
  var valid_614838 = header.getOrDefault("X-Amz-Security-Token")
  valid_614838 = validateParameter(valid_614838, JString, required = false,
                                 default = nil)
  if valid_614838 != nil:
    section.add "X-Amz-Security-Token", valid_614838
  var valid_614839 = header.getOrDefault("X-Amz-Algorithm")
  valid_614839 = validateParameter(valid_614839, JString, required = false,
                                 default = nil)
  if valid_614839 != nil:
    section.add "X-Amz-Algorithm", valid_614839
  var valid_614840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614840 = validateParameter(valid_614840, JString, required = false,
                                 default = nil)
  if valid_614840 != nil:
    section.add "X-Amz-SignedHeaders", valid_614840
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614841: Call_GetImportInstallationMedia_614824; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_614841.validator(path, query, header, formData, body)
  let scheme = call_614841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614841.url(scheme.get, call_614841.host, call_614841.base,
                         call_614841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614841, url, valid)

proc call*(call_614842: Call_GetImportInstallationMedia_614824; Engine: string;
          EngineInstallationMediaPath: string; CustomAvailabilityZoneId: string;
          EngineVersion: string; OSInstallationMediaPath: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## getImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: string (required)
  var query_614843 = newJObject()
  add(query_614843, "Engine", newJString(Engine))
  add(query_614843, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(query_614843, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_614843, "EngineVersion", newJString(EngineVersion))
  add(query_614843, "Action", newJString(Action))
  add(query_614843, "OSInstallationMediaPath", newJString(OSInstallationMediaPath))
  add(query_614843, "Version", newJString(Version))
  result = call_614842.call(nil, query_614843, nil, nil, nil)

var getImportInstallationMedia* = Call_GetImportInstallationMedia_614824(
    name: "getImportInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_GetImportInstallationMedia_614825, base: "/",
    url: url_GetImportInstallationMedia_614826,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_614882 = ref object of OpenApiRestCall_610658
proc url_PostListTagsForResource_614884(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_614883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614885 = query.getOrDefault("Action")
  valid_614885 = validateParameter(valid_614885, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_614885 != nil:
    section.add "Action", valid_614885
  var valid_614886 = query.getOrDefault("Version")
  valid_614886 = validateParameter(valid_614886, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614886 != nil:
    section.add "Version", valid_614886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614887 = header.getOrDefault("X-Amz-Signature")
  valid_614887 = validateParameter(valid_614887, JString, required = false,
                                 default = nil)
  if valid_614887 != nil:
    section.add "X-Amz-Signature", valid_614887
  var valid_614888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614888 = validateParameter(valid_614888, JString, required = false,
                                 default = nil)
  if valid_614888 != nil:
    section.add "X-Amz-Content-Sha256", valid_614888
  var valid_614889 = header.getOrDefault("X-Amz-Date")
  valid_614889 = validateParameter(valid_614889, JString, required = false,
                                 default = nil)
  if valid_614889 != nil:
    section.add "X-Amz-Date", valid_614889
  var valid_614890 = header.getOrDefault("X-Amz-Credential")
  valid_614890 = validateParameter(valid_614890, JString, required = false,
                                 default = nil)
  if valid_614890 != nil:
    section.add "X-Amz-Credential", valid_614890
  var valid_614891 = header.getOrDefault("X-Amz-Security-Token")
  valid_614891 = validateParameter(valid_614891, JString, required = false,
                                 default = nil)
  if valid_614891 != nil:
    section.add "X-Amz-Security-Token", valid_614891
  var valid_614892 = header.getOrDefault("X-Amz-Algorithm")
  valid_614892 = validateParameter(valid_614892, JString, required = false,
                                 default = nil)
  if valid_614892 != nil:
    section.add "X-Amz-Algorithm", valid_614892
  var valid_614893 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614893 = validateParameter(valid_614893, JString, required = false,
                                 default = nil)
  if valid_614893 != nil:
    section.add "X-Amz-SignedHeaders", valid_614893
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  section = newJObject()
  var valid_614894 = formData.getOrDefault("Filters")
  valid_614894 = validateParameter(valid_614894, JArray, required = false,
                                 default = nil)
  if valid_614894 != nil:
    section.add "Filters", valid_614894
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_614895 = formData.getOrDefault("ResourceName")
  valid_614895 = validateParameter(valid_614895, JString, required = true,
                                 default = nil)
  if valid_614895 != nil:
    section.add "ResourceName", valid_614895
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614896: Call_PostListTagsForResource_614882; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_614896.validator(path, query, header, formData, body)
  let scheme = call_614896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614896.url(scheme.get, call_614896.host, call_614896.base,
                         call_614896.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614896, url, valid)

proc call*(call_614897: Call_PostListTagsForResource_614882; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  var query_614898 = newJObject()
  var formData_614899 = newJObject()
  add(query_614898, "Action", newJString(Action))
  if Filters != nil:
    formData_614899.add "Filters", Filters
  add(query_614898, "Version", newJString(Version))
  add(formData_614899, "ResourceName", newJString(ResourceName))
  result = call_614897.call(nil, query_614898, nil, formData_614899, nil)

var postListTagsForResource* = Call_PostListTagsForResource_614882(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_614883, base: "/",
    url: url_PostListTagsForResource_614884, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_614865 = ref object of OpenApiRestCall_610658
proc url_GetListTagsForResource_614867(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_614866(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_614868 = query.getOrDefault("ResourceName")
  valid_614868 = validateParameter(valid_614868, JString, required = true,
                                 default = nil)
  if valid_614868 != nil:
    section.add "ResourceName", valid_614868
  var valid_614869 = query.getOrDefault("Action")
  valid_614869 = validateParameter(valid_614869, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_614869 != nil:
    section.add "Action", valid_614869
  var valid_614870 = query.getOrDefault("Version")
  valid_614870 = validateParameter(valid_614870, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614870 != nil:
    section.add "Version", valid_614870
  var valid_614871 = query.getOrDefault("Filters")
  valid_614871 = validateParameter(valid_614871, JArray, required = false,
                                 default = nil)
  if valid_614871 != nil:
    section.add "Filters", valid_614871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614872 = header.getOrDefault("X-Amz-Signature")
  valid_614872 = validateParameter(valid_614872, JString, required = false,
                                 default = nil)
  if valid_614872 != nil:
    section.add "X-Amz-Signature", valid_614872
  var valid_614873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614873 = validateParameter(valid_614873, JString, required = false,
                                 default = nil)
  if valid_614873 != nil:
    section.add "X-Amz-Content-Sha256", valid_614873
  var valid_614874 = header.getOrDefault("X-Amz-Date")
  valid_614874 = validateParameter(valid_614874, JString, required = false,
                                 default = nil)
  if valid_614874 != nil:
    section.add "X-Amz-Date", valid_614874
  var valid_614875 = header.getOrDefault("X-Amz-Credential")
  valid_614875 = validateParameter(valid_614875, JString, required = false,
                                 default = nil)
  if valid_614875 != nil:
    section.add "X-Amz-Credential", valid_614875
  var valid_614876 = header.getOrDefault("X-Amz-Security-Token")
  valid_614876 = validateParameter(valid_614876, JString, required = false,
                                 default = nil)
  if valid_614876 != nil:
    section.add "X-Amz-Security-Token", valid_614876
  var valid_614877 = header.getOrDefault("X-Amz-Algorithm")
  valid_614877 = validateParameter(valid_614877, JString, required = false,
                                 default = nil)
  if valid_614877 != nil:
    section.add "X-Amz-Algorithm", valid_614877
  var valid_614878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614878 = validateParameter(valid_614878, JString, required = false,
                                 default = nil)
  if valid_614878 != nil:
    section.add "X-Amz-SignedHeaders", valid_614878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614879: Call_GetListTagsForResource_614865; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_614879.validator(path, query, header, formData, body)
  let scheme = call_614879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614879.url(scheme.get, call_614879.host, call_614879.base,
                         call_614879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614879, url, valid)

proc call*(call_614880: Call_GetListTagsForResource_614865; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31";
          Filters: JsonNode = nil): Recallable =
  ## getListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  var query_614881 = newJObject()
  add(query_614881, "ResourceName", newJString(ResourceName))
  add(query_614881, "Action", newJString(Action))
  add(query_614881, "Version", newJString(Version))
  if Filters != nil:
    query_614881.add "Filters", Filters
  result = call_614880.call(nil, query_614881, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_614865(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_614866, base: "/",
    url: url_GetListTagsForResource_614867, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCertificates_614917 = ref object of OpenApiRestCall_610658
proc url_PostModifyCertificates_614919(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCertificates_614918(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614920 = query.getOrDefault("Action")
  valid_614920 = validateParameter(valid_614920, JString, required = true,
                                 default = newJString("ModifyCertificates"))
  if valid_614920 != nil:
    section.add "Action", valid_614920
  var valid_614921 = query.getOrDefault("Version")
  valid_614921 = validateParameter(valid_614921, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614921 != nil:
    section.add "Version", valid_614921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614922 = header.getOrDefault("X-Amz-Signature")
  valid_614922 = validateParameter(valid_614922, JString, required = false,
                                 default = nil)
  if valid_614922 != nil:
    section.add "X-Amz-Signature", valid_614922
  var valid_614923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614923 = validateParameter(valid_614923, JString, required = false,
                                 default = nil)
  if valid_614923 != nil:
    section.add "X-Amz-Content-Sha256", valid_614923
  var valid_614924 = header.getOrDefault("X-Amz-Date")
  valid_614924 = validateParameter(valid_614924, JString, required = false,
                                 default = nil)
  if valid_614924 != nil:
    section.add "X-Amz-Date", valid_614924
  var valid_614925 = header.getOrDefault("X-Amz-Credential")
  valid_614925 = validateParameter(valid_614925, JString, required = false,
                                 default = nil)
  if valid_614925 != nil:
    section.add "X-Amz-Credential", valid_614925
  var valid_614926 = header.getOrDefault("X-Amz-Security-Token")
  valid_614926 = validateParameter(valid_614926, JString, required = false,
                                 default = nil)
  if valid_614926 != nil:
    section.add "X-Amz-Security-Token", valid_614926
  var valid_614927 = header.getOrDefault("X-Amz-Algorithm")
  valid_614927 = validateParameter(valid_614927, JString, required = false,
                                 default = nil)
  if valid_614927 != nil:
    section.add "X-Amz-Algorithm", valid_614927
  var valid_614928 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614928 = validateParameter(valid_614928, JString, required = false,
                                 default = nil)
  if valid_614928 != nil:
    section.add "X-Amz-SignedHeaders", valid_614928
  result.add "header", section
  ## parameters in `formData` object:
  ##   RemoveCustomerOverride: JBool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   CertificateIdentifier: JString
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  section = newJObject()
  var valid_614929 = formData.getOrDefault("RemoveCustomerOverride")
  valid_614929 = validateParameter(valid_614929, JBool, required = false, default = nil)
  if valid_614929 != nil:
    section.add "RemoveCustomerOverride", valid_614929
  var valid_614930 = formData.getOrDefault("CertificateIdentifier")
  valid_614930 = validateParameter(valid_614930, JString, required = false,
                                 default = nil)
  if valid_614930 != nil:
    section.add "CertificateIdentifier", valid_614930
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614931: Call_PostModifyCertificates_614917; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_614931.validator(path, query, header, formData, body)
  let scheme = call_614931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614931.url(scheme.get, call_614931.host, call_614931.base,
                         call_614931.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614931, url, valid)

proc call*(call_614932: Call_PostModifyCertificates_614917;
          RemoveCustomerOverride: bool = false; CertificateIdentifier: string = "";
          Action: string = "ModifyCertificates"; Version: string = "2014-10-31"): Recallable =
  ## postModifyCertificates
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   RemoveCustomerOverride: bool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   CertificateIdentifier: string
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614933 = newJObject()
  var formData_614934 = newJObject()
  add(formData_614934, "RemoveCustomerOverride", newJBool(RemoveCustomerOverride))
  add(formData_614934, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_614933, "Action", newJString(Action))
  add(query_614933, "Version", newJString(Version))
  result = call_614932.call(nil, query_614933, nil, formData_614934, nil)

var postModifyCertificates* = Call_PostModifyCertificates_614917(
    name: "postModifyCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCertificates",
    validator: validate_PostModifyCertificates_614918, base: "/",
    url: url_PostModifyCertificates_614919, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCertificates_614900 = ref object of OpenApiRestCall_610658
proc url_GetModifyCertificates_614902(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCertificates_614901(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RemoveCustomerOverride: JBool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  section = newJObject()
  var valid_614903 = query.getOrDefault("RemoveCustomerOverride")
  valid_614903 = validateParameter(valid_614903, JBool, required = false, default = nil)
  if valid_614903 != nil:
    section.add "RemoveCustomerOverride", valid_614903
  var valid_614904 = query.getOrDefault("Action")
  valid_614904 = validateParameter(valid_614904, JString, required = true,
                                 default = newJString("ModifyCertificates"))
  if valid_614904 != nil:
    section.add "Action", valid_614904
  var valid_614905 = query.getOrDefault("Version")
  valid_614905 = validateParameter(valid_614905, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614905 != nil:
    section.add "Version", valid_614905
  var valid_614906 = query.getOrDefault("CertificateIdentifier")
  valid_614906 = validateParameter(valid_614906, JString, required = false,
                                 default = nil)
  if valid_614906 != nil:
    section.add "CertificateIdentifier", valid_614906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614907 = header.getOrDefault("X-Amz-Signature")
  valid_614907 = validateParameter(valid_614907, JString, required = false,
                                 default = nil)
  if valid_614907 != nil:
    section.add "X-Amz-Signature", valid_614907
  var valid_614908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614908 = validateParameter(valid_614908, JString, required = false,
                                 default = nil)
  if valid_614908 != nil:
    section.add "X-Amz-Content-Sha256", valid_614908
  var valid_614909 = header.getOrDefault("X-Amz-Date")
  valid_614909 = validateParameter(valid_614909, JString, required = false,
                                 default = nil)
  if valid_614909 != nil:
    section.add "X-Amz-Date", valid_614909
  var valid_614910 = header.getOrDefault("X-Amz-Credential")
  valid_614910 = validateParameter(valid_614910, JString, required = false,
                                 default = nil)
  if valid_614910 != nil:
    section.add "X-Amz-Credential", valid_614910
  var valid_614911 = header.getOrDefault("X-Amz-Security-Token")
  valid_614911 = validateParameter(valid_614911, JString, required = false,
                                 default = nil)
  if valid_614911 != nil:
    section.add "X-Amz-Security-Token", valid_614911
  var valid_614912 = header.getOrDefault("X-Amz-Algorithm")
  valid_614912 = validateParameter(valid_614912, JString, required = false,
                                 default = nil)
  if valid_614912 != nil:
    section.add "X-Amz-Algorithm", valid_614912
  var valid_614913 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614913 = validateParameter(valid_614913, JString, required = false,
                                 default = nil)
  if valid_614913 != nil:
    section.add "X-Amz-SignedHeaders", valid_614913
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614914: Call_GetModifyCertificates_614900; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_614914.validator(path, query, header, formData, body)
  let scheme = call_614914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614914.url(scheme.get, call_614914.host, call_614914.base,
                         call_614914.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614914, url, valid)

proc call*(call_614915: Call_GetModifyCertificates_614900;
          RemoveCustomerOverride: bool = false;
          Action: string = "ModifyCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""): Recallable =
  ## getModifyCertificates
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   RemoveCustomerOverride: bool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  var query_614916 = newJObject()
  add(query_614916, "RemoveCustomerOverride", newJBool(RemoveCustomerOverride))
  add(query_614916, "Action", newJString(Action))
  add(query_614916, "Version", newJString(Version))
  add(query_614916, "CertificateIdentifier", newJString(CertificateIdentifier))
  result = call_614915.call(nil, query_614916, nil, nil, nil)

var getModifyCertificates* = Call_GetModifyCertificates_614900(
    name: "getModifyCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCertificates",
    validator: validate_GetModifyCertificates_614901, base: "/",
    url: url_GetModifyCertificates_614902, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCurrentDBClusterCapacity_614954 = ref object of OpenApiRestCall_610658
proc url_PostModifyCurrentDBClusterCapacity_614956(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCurrentDBClusterCapacity_614955(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614957 = query.getOrDefault("Action")
  valid_614957 = validateParameter(valid_614957, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_614957 != nil:
    section.add "Action", valid_614957
  var valid_614958 = query.getOrDefault("Version")
  valid_614958 = validateParameter(valid_614958, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614958 != nil:
    section.add "Version", valid_614958
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614959 = header.getOrDefault("X-Amz-Signature")
  valid_614959 = validateParameter(valid_614959, JString, required = false,
                                 default = nil)
  if valid_614959 != nil:
    section.add "X-Amz-Signature", valid_614959
  var valid_614960 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614960 = validateParameter(valid_614960, JString, required = false,
                                 default = nil)
  if valid_614960 != nil:
    section.add "X-Amz-Content-Sha256", valid_614960
  var valid_614961 = header.getOrDefault("X-Amz-Date")
  valid_614961 = validateParameter(valid_614961, JString, required = false,
                                 default = nil)
  if valid_614961 != nil:
    section.add "X-Amz-Date", valid_614961
  var valid_614962 = header.getOrDefault("X-Amz-Credential")
  valid_614962 = validateParameter(valid_614962, JString, required = false,
                                 default = nil)
  if valid_614962 != nil:
    section.add "X-Amz-Credential", valid_614962
  var valid_614963 = header.getOrDefault("X-Amz-Security-Token")
  valid_614963 = validateParameter(valid_614963, JString, required = false,
                                 default = nil)
  if valid_614963 != nil:
    section.add "X-Amz-Security-Token", valid_614963
  var valid_614964 = header.getOrDefault("X-Amz-Algorithm")
  valid_614964 = validateParameter(valid_614964, JString, required = false,
                                 default = nil)
  if valid_614964 != nil:
    section.add "X-Amz-Algorithm", valid_614964
  var valid_614965 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614965 = validateParameter(valid_614965, JString, required = false,
                                 default = nil)
  if valid_614965 != nil:
    section.add "X-Amz-SignedHeaders", valid_614965
  result.add "header", section
  ## parameters in `formData` object:
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  section = newJObject()
  var valid_614966 = formData.getOrDefault("TimeoutAction")
  valid_614966 = validateParameter(valid_614966, JString, required = false,
                                 default = nil)
  if valid_614966 != nil:
    section.add "TimeoutAction", valid_614966
  var valid_614967 = formData.getOrDefault("SecondsBeforeTimeout")
  valid_614967 = validateParameter(valid_614967, JInt, required = false, default = nil)
  if valid_614967 != nil:
    section.add "SecondsBeforeTimeout", valid_614967
  var valid_614968 = formData.getOrDefault("Capacity")
  valid_614968 = validateParameter(valid_614968, JInt, required = false, default = nil)
  if valid_614968 != nil:
    section.add "Capacity", valid_614968
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_614969 = formData.getOrDefault("DBClusterIdentifier")
  valid_614969 = validateParameter(valid_614969, JString, required = true,
                                 default = nil)
  if valid_614969 != nil:
    section.add "DBClusterIdentifier", valid_614969
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614970: Call_PostModifyCurrentDBClusterCapacity_614954;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614970.validator(path, query, header, formData, body)
  let scheme = call_614970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614970.url(scheme.get, call_614970.host, call_614970.base,
                         call_614970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614970, url, valid)

proc call*(call_614971: Call_PostModifyCurrentDBClusterCapacity_614954;
          DBClusterIdentifier: string; TimeoutAction: string = "";
          Action: string = "ModifyCurrentDBClusterCapacity";
          SecondsBeforeTimeout: int = 0; Version: string = "2014-10-31";
          Capacity: int = 0): Recallable =
  ## postModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   Action: string (required)
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Version: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  var query_614972 = newJObject()
  var formData_614973 = newJObject()
  add(formData_614973, "TimeoutAction", newJString(TimeoutAction))
  add(query_614972, "Action", newJString(Action))
  add(formData_614973, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_614972, "Version", newJString(Version))
  add(formData_614973, "Capacity", newJInt(Capacity))
  add(formData_614973, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_614971.call(nil, query_614972, nil, formData_614973, nil)

var postModifyCurrentDBClusterCapacity* = Call_PostModifyCurrentDBClusterCapacity_614954(
    name: "postModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_PostModifyCurrentDBClusterCapacity_614955, base: "/",
    url: url_PostModifyCurrentDBClusterCapacity_614956,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCurrentDBClusterCapacity_614935 = ref object of OpenApiRestCall_610658
proc url_GetModifyCurrentDBClusterCapacity_614937(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCurrentDBClusterCapacity_614936(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614938 = query.getOrDefault("Capacity")
  valid_614938 = validateParameter(valid_614938, JInt, required = false, default = nil)
  if valid_614938 != nil:
    section.add "Capacity", valid_614938
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_614939 = query.getOrDefault("DBClusterIdentifier")
  valid_614939 = validateParameter(valid_614939, JString, required = true,
                                 default = nil)
  if valid_614939 != nil:
    section.add "DBClusterIdentifier", valid_614939
  var valid_614940 = query.getOrDefault("TimeoutAction")
  valid_614940 = validateParameter(valid_614940, JString, required = false,
                                 default = nil)
  if valid_614940 != nil:
    section.add "TimeoutAction", valid_614940
  var valid_614941 = query.getOrDefault("SecondsBeforeTimeout")
  valid_614941 = validateParameter(valid_614941, JInt, required = false, default = nil)
  if valid_614941 != nil:
    section.add "SecondsBeforeTimeout", valid_614941
  var valid_614942 = query.getOrDefault("Action")
  valid_614942 = validateParameter(valid_614942, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_614942 != nil:
    section.add "Action", valid_614942
  var valid_614943 = query.getOrDefault("Version")
  valid_614943 = validateParameter(valid_614943, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614943 != nil:
    section.add "Version", valid_614943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614944 = header.getOrDefault("X-Amz-Signature")
  valid_614944 = validateParameter(valid_614944, JString, required = false,
                                 default = nil)
  if valid_614944 != nil:
    section.add "X-Amz-Signature", valid_614944
  var valid_614945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614945 = validateParameter(valid_614945, JString, required = false,
                                 default = nil)
  if valid_614945 != nil:
    section.add "X-Amz-Content-Sha256", valid_614945
  var valid_614946 = header.getOrDefault("X-Amz-Date")
  valid_614946 = validateParameter(valid_614946, JString, required = false,
                                 default = nil)
  if valid_614946 != nil:
    section.add "X-Amz-Date", valid_614946
  var valid_614947 = header.getOrDefault("X-Amz-Credential")
  valid_614947 = validateParameter(valid_614947, JString, required = false,
                                 default = nil)
  if valid_614947 != nil:
    section.add "X-Amz-Credential", valid_614947
  var valid_614948 = header.getOrDefault("X-Amz-Security-Token")
  valid_614948 = validateParameter(valid_614948, JString, required = false,
                                 default = nil)
  if valid_614948 != nil:
    section.add "X-Amz-Security-Token", valid_614948
  var valid_614949 = header.getOrDefault("X-Amz-Algorithm")
  valid_614949 = validateParameter(valid_614949, JString, required = false,
                                 default = nil)
  if valid_614949 != nil:
    section.add "X-Amz-Algorithm", valid_614949
  var valid_614950 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614950 = validateParameter(valid_614950, JString, required = false,
                                 default = nil)
  if valid_614950 != nil:
    section.add "X-Amz-SignedHeaders", valid_614950
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614951: Call_GetModifyCurrentDBClusterCapacity_614935;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614951.validator(path, query, header, formData, body)
  let scheme = call_614951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614951.url(scheme.get, call_614951.host, call_614951.base,
                         call_614951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614951, url, valid)

proc call*(call_614952: Call_GetModifyCurrentDBClusterCapacity_614935;
          DBClusterIdentifier: string; Capacity: int = 0; TimeoutAction: string = "";
          SecondsBeforeTimeout: int = 0;
          Action: string = "ModifyCurrentDBClusterCapacity";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614953 = newJObject()
  add(query_614953, "Capacity", newJInt(Capacity))
  add(query_614953, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_614953, "TimeoutAction", newJString(TimeoutAction))
  add(query_614953, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_614953, "Action", newJString(Action))
  add(query_614953, "Version", newJString(Version))
  result = call_614952.call(nil, query_614953, nil, nil, nil)

var getModifyCurrentDBClusterCapacity* = Call_GetModifyCurrentDBClusterCapacity_614935(
    name: "getModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_GetModifyCurrentDBClusterCapacity_614936, base: "/",
    url: url_GetModifyCurrentDBClusterCapacity_614937,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_615015 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBCluster_615017(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBCluster_615016(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615018 = query.getOrDefault("Action")
  valid_615018 = validateParameter(valid_615018, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_615018 != nil:
    section.add "Action", valid_615018
  var valid_615019 = query.getOrDefault("Version")
  valid_615019 = validateParameter(valid_615019, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615019 != nil:
    section.add "Version", valid_615019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615020 = header.getOrDefault("X-Amz-Signature")
  valid_615020 = validateParameter(valid_615020, JString, required = false,
                                 default = nil)
  if valid_615020 != nil:
    section.add "X-Amz-Signature", valid_615020
  var valid_615021 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615021 = validateParameter(valid_615021, JString, required = false,
                                 default = nil)
  if valid_615021 != nil:
    section.add "X-Amz-Content-Sha256", valid_615021
  var valid_615022 = header.getOrDefault("X-Amz-Date")
  valid_615022 = validateParameter(valid_615022, JString, required = false,
                                 default = nil)
  if valid_615022 != nil:
    section.add "X-Amz-Date", valid_615022
  var valid_615023 = header.getOrDefault("X-Amz-Credential")
  valid_615023 = validateParameter(valid_615023, JString, required = false,
                                 default = nil)
  if valid_615023 != nil:
    section.add "X-Amz-Credential", valid_615023
  var valid_615024 = header.getOrDefault("X-Amz-Security-Token")
  valid_615024 = validateParameter(valid_615024, JString, required = false,
                                 default = nil)
  if valid_615024 != nil:
    section.add "X-Amz-Security-Token", valid_615024
  var valid_615025 = header.getOrDefault("X-Amz-Algorithm")
  valid_615025 = validateParameter(valid_615025, JString, required = false,
                                 default = nil)
  if valid_615025 != nil:
    section.add "X-Amz-Algorithm", valid_615025
  var valid_615026 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615026 = validateParameter(valid_615026, JString, required = false,
                                 default = nil)
  if valid_615026 != nil:
    section.add "X-Amz-SignedHeaders", valid_615026
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_615027 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_615027 = validateParameter(valid_615027, JString, required = false,
                                 default = nil)
  if valid_615027 != nil:
    section.add "NewDBClusterIdentifier", valid_615027
  var valid_615028 = formData.getOrDefault("Port")
  valid_615028 = validateParameter(valid_615028, JInt, required = false, default = nil)
  if valid_615028 != nil:
    section.add "Port", valid_615028
  var valid_615029 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_615029 = validateParameter(valid_615029, JString, required = false,
                                 default = nil)
  if valid_615029 != nil:
    section.add "PreferredMaintenanceWindow", valid_615029
  var valid_615030 = formData.getOrDefault("PreferredBackupWindow")
  valid_615030 = validateParameter(valid_615030, JString, required = false,
                                 default = nil)
  if valid_615030 != nil:
    section.add "PreferredBackupWindow", valid_615030
  var valid_615031 = formData.getOrDefault("MasterUserPassword")
  valid_615031 = validateParameter(valid_615031, JString, required = false,
                                 default = nil)
  if valid_615031 != nil:
    section.add "MasterUserPassword", valid_615031
  var valid_615032 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_615032 = validateParameter(valid_615032, JArray, required = false,
                                 default = nil)
  if valid_615032 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_615032
  var valid_615033 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_615033 = validateParameter(valid_615033, JString, required = false,
                                 default = nil)
  if valid_615033 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_615033
  var valid_615034 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_615034 = validateParameter(valid_615034, JArray, required = false,
                                 default = nil)
  if valid_615034 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_615034
  var valid_615035 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_615035 = validateParameter(valid_615035, JString, required = false,
                                 default = nil)
  if valid_615035 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_615035
  var valid_615036 = formData.getOrDefault("EngineVersion")
  valid_615036 = validateParameter(valid_615036, JString, required = false,
                                 default = nil)
  if valid_615036 != nil:
    section.add "EngineVersion", valid_615036
  var valid_615037 = formData.getOrDefault("BacktrackWindow")
  valid_615037 = validateParameter(valid_615037, JInt, required = false, default = nil)
  if valid_615037 != nil:
    section.add "BacktrackWindow", valid_615037
  var valid_615038 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_615038 = validateParameter(valid_615038, JArray, required = false,
                                 default = nil)
  if valid_615038 != nil:
    section.add "VpcSecurityGroupIds", valid_615038
  var valid_615039 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_615039 = validateParameter(valid_615039, JBool, required = false, default = nil)
  if valid_615039 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_615039
  var valid_615040 = formData.getOrDefault("BackupRetentionPeriod")
  valid_615040 = validateParameter(valid_615040, JInt, required = false, default = nil)
  if valid_615040 != nil:
    section.add "BackupRetentionPeriod", valid_615040
  var valid_615041 = formData.getOrDefault("ApplyImmediately")
  valid_615041 = validateParameter(valid_615041, JBool, required = false, default = nil)
  if valid_615041 != nil:
    section.add "ApplyImmediately", valid_615041
  var valid_615042 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_615042 = validateParameter(valid_615042, JString, required = false,
                                 default = nil)
  if valid_615042 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_615042
  var valid_615043 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_615043 = validateParameter(valid_615043, JBool, required = false, default = nil)
  if valid_615043 != nil:
    section.add "AllowMajorVersionUpgrade", valid_615043
  var valid_615044 = formData.getOrDefault("EnableHttpEndpoint")
  valid_615044 = validateParameter(valid_615044, JBool, required = false, default = nil)
  if valid_615044 != nil:
    section.add "EnableHttpEndpoint", valid_615044
  var valid_615045 = formData.getOrDefault("OptionGroupName")
  valid_615045 = validateParameter(valid_615045, JString, required = false,
                                 default = nil)
  if valid_615045 != nil:
    section.add "OptionGroupName", valid_615045
  var valid_615046 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_615046 = validateParameter(valid_615046, JString, required = false,
                                 default = nil)
  if valid_615046 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_615046
  var valid_615047 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_615047 = validateParameter(valid_615047, JString, required = false,
                                 default = nil)
  if valid_615047 != nil:
    section.add "DBClusterParameterGroupName", valid_615047
  var valid_615048 = formData.getOrDefault("DBInstanceParameterGroupName")
  valid_615048 = validateParameter(valid_615048, JString, required = false,
                                 default = nil)
  if valid_615048 != nil:
    section.add "DBInstanceParameterGroupName", valid_615048
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_615049 = formData.getOrDefault("DBClusterIdentifier")
  valid_615049 = validateParameter(valid_615049, JString, required = true,
                                 default = nil)
  if valid_615049 != nil:
    section.add "DBClusterIdentifier", valid_615049
  var valid_615050 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_615050 = validateParameter(valid_615050, JString, required = false,
                                 default = nil)
  if valid_615050 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_615050
  var valid_615051 = formData.getOrDefault("DeletionProtection")
  valid_615051 = validateParameter(valid_615051, JBool, required = false, default = nil)
  if valid_615051 != nil:
    section.add "DeletionProtection", valid_615051
  var valid_615052 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_615052 = validateParameter(valid_615052, JBool, required = false, default = nil)
  if valid_615052 != nil:
    section.add "CopyTagsToSnapshot", valid_615052
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615053: Call_PostModifyDBCluster_615015; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615053.validator(path, query, header, formData, body)
  let scheme = call_615053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615053.url(scheme.get, call_615053.host, call_615053.base,
                         call_615053.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615053, url, valid)

proc call*(call_615054: Call_PostModifyDBCluster_615015;
          DBClusterIdentifier: string; NewDBClusterIdentifier: string = "";
          Port: int = 0; PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; ApplyImmediately: bool = false;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "ModifyDBCluster";
          AllowMajorVersionUpgrade: bool = false; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = "";
          DBInstanceParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  var query_615055 = newJObject()
  var formData_615056 = newJObject()
  add(formData_615056, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  add(formData_615056, "Port", newJInt(Port))
  add(formData_615056, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_615056, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_615056, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_615056.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_615056, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_615056.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_615056, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_615056, "EngineVersion", newJString(EngineVersion))
  add(formData_615056, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_615056.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_615056, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_615056, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_615056, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_615056, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_615055, "Action", newJString(Action))
  add(formData_615056, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_615056, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_615056, "OptionGroupName", newJString(OptionGroupName))
  add(formData_615056, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_615056, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_615056, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_615055, "Version", newJString(Version))
  add(formData_615056, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_615056, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_615056, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_615056, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_615054.call(nil, query_615055, nil, formData_615056, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_615015(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_615016, base: "/",
    url: url_PostModifyDBCluster_615017, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_614974 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBCluster_614976(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBCluster_614975(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_614977 = query.getOrDefault("DeletionProtection")
  valid_614977 = validateParameter(valid_614977, JBool, required = false, default = nil)
  if valid_614977 != nil:
    section.add "DeletionProtection", valid_614977
  var valid_614978 = query.getOrDefault("CopyTagsToSnapshot")
  valid_614978 = validateParameter(valid_614978, JBool, required = false, default = nil)
  if valid_614978 != nil:
    section.add "CopyTagsToSnapshot", valid_614978
  var valid_614979 = query.getOrDefault("EnableHttpEndpoint")
  valid_614979 = validateParameter(valid_614979, JBool, required = false, default = nil)
  if valid_614979 != nil:
    section.add "EnableHttpEndpoint", valid_614979
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_614980 = query.getOrDefault("DBClusterIdentifier")
  valid_614980 = validateParameter(valid_614980, JString, required = true,
                                 default = nil)
  if valid_614980 != nil:
    section.add "DBClusterIdentifier", valid_614980
  var valid_614981 = query.getOrDefault("BacktrackWindow")
  valid_614981 = validateParameter(valid_614981, JInt, required = false, default = nil)
  if valid_614981 != nil:
    section.add "BacktrackWindow", valid_614981
  var valid_614982 = query.getOrDefault("DBClusterParameterGroupName")
  valid_614982 = validateParameter(valid_614982, JString, required = false,
                                 default = nil)
  if valid_614982 != nil:
    section.add "DBClusterParameterGroupName", valid_614982
  var valid_614983 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_614983 = validateParameter(valid_614983, JArray, required = false,
                                 default = nil)
  if valid_614983 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_614983
  var valid_614984 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_614984 = validateParameter(valid_614984, JArray, required = false,
                                 default = nil)
  if valid_614984 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_614984
  var valid_614985 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_614985 = validateParameter(valid_614985, JString, required = false,
                                 default = nil)
  if valid_614985 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_614985
  var valid_614986 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_614986 = validateParameter(valid_614986, JString, required = false,
                                 default = nil)
  if valid_614986 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_614986
  var valid_614987 = query.getOrDefault("BackupRetentionPeriod")
  valid_614987 = validateParameter(valid_614987, JInt, required = false, default = nil)
  if valid_614987 != nil:
    section.add "BackupRetentionPeriod", valid_614987
  var valid_614988 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_614988 = validateParameter(valid_614988, JString, required = false,
                                 default = nil)
  if valid_614988 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_614988
  var valid_614989 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_614989 = validateParameter(valid_614989, JBool, required = false, default = nil)
  if valid_614989 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_614989
  var valid_614990 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_614990 = validateParameter(valid_614990, JString, required = false,
                                 default = nil)
  if valid_614990 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_614990
  var valid_614991 = query.getOrDefault("EngineVersion")
  valid_614991 = validateParameter(valid_614991, JString, required = false,
                                 default = nil)
  if valid_614991 != nil:
    section.add "EngineVersion", valid_614991
  var valid_614992 = query.getOrDefault("DBInstanceParameterGroupName")
  valid_614992 = validateParameter(valid_614992, JString, required = false,
                                 default = nil)
  if valid_614992 != nil:
    section.add "DBInstanceParameterGroupName", valid_614992
  var valid_614993 = query.getOrDefault("Action")
  valid_614993 = validateParameter(valid_614993, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_614993 != nil:
    section.add "Action", valid_614993
  var valid_614994 = query.getOrDefault("ApplyImmediately")
  valid_614994 = validateParameter(valid_614994, JBool, required = false, default = nil)
  if valid_614994 != nil:
    section.add "ApplyImmediately", valid_614994
  var valid_614995 = query.getOrDefault("NewDBClusterIdentifier")
  valid_614995 = validateParameter(valid_614995, JString, required = false,
                                 default = nil)
  if valid_614995 != nil:
    section.add "NewDBClusterIdentifier", valid_614995
  var valid_614996 = query.getOrDefault("Port")
  valid_614996 = validateParameter(valid_614996, JInt, required = false, default = nil)
  if valid_614996 != nil:
    section.add "Port", valid_614996
  var valid_614997 = query.getOrDefault("VpcSecurityGroupIds")
  valid_614997 = validateParameter(valid_614997, JArray, required = false,
                                 default = nil)
  if valid_614997 != nil:
    section.add "VpcSecurityGroupIds", valid_614997
  var valid_614998 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_614998 = validateParameter(valid_614998, JBool, required = false, default = nil)
  if valid_614998 != nil:
    section.add "AllowMajorVersionUpgrade", valid_614998
  var valid_614999 = query.getOrDefault("MasterUserPassword")
  valid_614999 = validateParameter(valid_614999, JString, required = false,
                                 default = nil)
  if valid_614999 != nil:
    section.add "MasterUserPassword", valid_614999
  var valid_615000 = query.getOrDefault("OptionGroupName")
  valid_615000 = validateParameter(valid_615000, JString, required = false,
                                 default = nil)
  if valid_615000 != nil:
    section.add "OptionGroupName", valid_615000
  var valid_615001 = query.getOrDefault("Version")
  valid_615001 = validateParameter(valid_615001, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615001 != nil:
    section.add "Version", valid_615001
  var valid_615002 = query.getOrDefault("PreferredBackupWindow")
  valid_615002 = validateParameter(valid_615002, JString, required = false,
                                 default = nil)
  if valid_615002 != nil:
    section.add "PreferredBackupWindow", valid_615002
  var valid_615003 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_615003 = validateParameter(valid_615003, JString, required = false,
                                 default = nil)
  if valid_615003 != nil:
    section.add "PreferredMaintenanceWindow", valid_615003
  var valid_615004 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_615004 = validateParameter(valid_615004, JString, required = false,
                                 default = nil)
  if valid_615004 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_615004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615005 = header.getOrDefault("X-Amz-Signature")
  valid_615005 = validateParameter(valid_615005, JString, required = false,
                                 default = nil)
  if valid_615005 != nil:
    section.add "X-Amz-Signature", valid_615005
  var valid_615006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615006 = validateParameter(valid_615006, JString, required = false,
                                 default = nil)
  if valid_615006 != nil:
    section.add "X-Amz-Content-Sha256", valid_615006
  var valid_615007 = header.getOrDefault("X-Amz-Date")
  valid_615007 = validateParameter(valid_615007, JString, required = false,
                                 default = nil)
  if valid_615007 != nil:
    section.add "X-Amz-Date", valid_615007
  var valid_615008 = header.getOrDefault("X-Amz-Credential")
  valid_615008 = validateParameter(valid_615008, JString, required = false,
                                 default = nil)
  if valid_615008 != nil:
    section.add "X-Amz-Credential", valid_615008
  var valid_615009 = header.getOrDefault("X-Amz-Security-Token")
  valid_615009 = validateParameter(valid_615009, JString, required = false,
                                 default = nil)
  if valid_615009 != nil:
    section.add "X-Amz-Security-Token", valid_615009
  var valid_615010 = header.getOrDefault("X-Amz-Algorithm")
  valid_615010 = validateParameter(valid_615010, JString, required = false,
                                 default = nil)
  if valid_615010 != nil:
    section.add "X-Amz-Algorithm", valid_615010
  var valid_615011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615011 = validateParameter(valid_615011, JString, required = false,
                                 default = nil)
  if valid_615011 != nil:
    section.add "X-Amz-SignedHeaders", valid_615011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615012: Call_GetModifyDBCluster_614974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615012.validator(path, query, header, formData, body)
  let scheme = call_615012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615012.url(scheme.get, call_615012.host, call_615012.base,
                         call_615012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615012, url, valid)

proc call*(call_615013: Call_GetModifyDBCluster_614974;
          DBClusterIdentifier: string; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; EnableHttpEndpoint: bool = false;
          BacktrackWindow: int = 0; DBClusterParameterGroupName: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EngineVersion: string = ""; DBInstanceParameterGroupName: string = "";
          Action: string = "ModifyDBCluster"; ApplyImmediately: bool = false;
          NewDBClusterIdentifier: string = ""; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = "";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_615014 = newJObject()
  add(query_615014, "DeletionProtection", newJBool(DeletionProtection))
  add(query_615014, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_615014, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_615014, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615014, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_615014, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_615014.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_615014.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_615014, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_615014, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_615014, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_615014, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_615014, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_615014, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_615014, "EngineVersion", newJString(EngineVersion))
  add(query_615014, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_615014, "Action", newJString(Action))
  add(query_615014, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_615014, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_615014, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_615014.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_615014, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_615014, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_615014, "OptionGroupName", newJString(OptionGroupName))
  add(query_615014, "Version", newJString(Version))
  add(query_615014, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_615014, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_615014, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_615013.call(nil, query_615014, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_614974(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_614975,
    base: "/", url: url_GetModifyDBCluster_614976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterEndpoint_615076 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBClusterEndpoint_615078(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterEndpoint_615077(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615079 = query.getOrDefault("Action")
  valid_615079 = validateParameter(valid_615079, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_615079 != nil:
    section.add "Action", valid_615079
  var valid_615080 = query.getOrDefault("Version")
  valid_615080 = validateParameter(valid_615080, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615080 != nil:
    section.add "Version", valid_615080
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615081 = header.getOrDefault("X-Amz-Signature")
  valid_615081 = validateParameter(valid_615081, JString, required = false,
                                 default = nil)
  if valid_615081 != nil:
    section.add "X-Amz-Signature", valid_615081
  var valid_615082 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615082 = validateParameter(valid_615082, JString, required = false,
                                 default = nil)
  if valid_615082 != nil:
    section.add "X-Amz-Content-Sha256", valid_615082
  var valid_615083 = header.getOrDefault("X-Amz-Date")
  valid_615083 = validateParameter(valid_615083, JString, required = false,
                                 default = nil)
  if valid_615083 != nil:
    section.add "X-Amz-Date", valid_615083
  var valid_615084 = header.getOrDefault("X-Amz-Credential")
  valid_615084 = validateParameter(valid_615084, JString, required = false,
                                 default = nil)
  if valid_615084 != nil:
    section.add "X-Amz-Credential", valid_615084
  var valid_615085 = header.getOrDefault("X-Amz-Security-Token")
  valid_615085 = validateParameter(valid_615085, JString, required = false,
                                 default = nil)
  if valid_615085 != nil:
    section.add "X-Amz-Security-Token", valid_615085
  var valid_615086 = header.getOrDefault("X-Amz-Algorithm")
  valid_615086 = validateParameter(valid_615086, JString, required = false,
                                 default = nil)
  if valid_615086 != nil:
    section.add "X-Amz-Algorithm", valid_615086
  var valid_615087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615087 = validateParameter(valid_615087, JString, required = false,
                                 default = nil)
  if valid_615087 != nil:
    section.add "X-Amz-SignedHeaders", valid_615087
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_615088 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_615088 = validateParameter(valid_615088, JString, required = true,
                                 default = nil)
  if valid_615088 != nil:
    section.add "DBClusterEndpointIdentifier", valid_615088
  var valid_615089 = formData.getOrDefault("StaticMembers")
  valid_615089 = validateParameter(valid_615089, JArray, required = false,
                                 default = nil)
  if valid_615089 != nil:
    section.add "StaticMembers", valid_615089
  var valid_615090 = formData.getOrDefault("EndpointType")
  valid_615090 = validateParameter(valid_615090, JString, required = false,
                                 default = nil)
  if valid_615090 != nil:
    section.add "EndpointType", valid_615090
  var valid_615091 = formData.getOrDefault("ExcludedMembers")
  valid_615091 = validateParameter(valid_615091, JArray, required = false,
                                 default = nil)
  if valid_615091 != nil:
    section.add "ExcludedMembers", valid_615091
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615092: Call_PostModifyDBClusterEndpoint_615076; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615092.validator(path, query, header, formData, body)
  let scheme = call_615092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615092.url(scheme.get, call_615092.host, call_615092.base,
                         call_615092.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615092, url, valid)

proc call*(call_615093: Call_PostModifyDBClusterEndpoint_615076;
          DBClusterEndpointIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "ModifyDBClusterEndpoint"; EndpointType: string = "";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_615094 = newJObject()
  var formData_615095 = newJObject()
  add(formData_615095, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_615095.add "StaticMembers", StaticMembers
  add(query_615094, "Action", newJString(Action))
  add(formData_615095, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_615095.add "ExcludedMembers", ExcludedMembers
  add(query_615094, "Version", newJString(Version))
  result = call_615093.call(nil, query_615094, nil, formData_615095, nil)

var postModifyDBClusterEndpoint* = Call_PostModifyDBClusterEndpoint_615076(
    name: "postModifyDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_PostModifyDBClusterEndpoint_615077, base: "/",
    url: url_PostModifyDBClusterEndpoint_615078,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterEndpoint_615057 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBClusterEndpoint_615059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterEndpoint_615058(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615060 = query.getOrDefault("ExcludedMembers")
  valid_615060 = validateParameter(valid_615060, JArray, required = false,
                                 default = nil)
  if valid_615060 != nil:
    section.add "ExcludedMembers", valid_615060
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_615061 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_615061 = validateParameter(valid_615061, JString, required = true,
                                 default = nil)
  if valid_615061 != nil:
    section.add "DBClusterEndpointIdentifier", valid_615061
  var valid_615062 = query.getOrDefault("StaticMembers")
  valid_615062 = validateParameter(valid_615062, JArray, required = false,
                                 default = nil)
  if valid_615062 != nil:
    section.add "StaticMembers", valid_615062
  var valid_615063 = query.getOrDefault("EndpointType")
  valid_615063 = validateParameter(valid_615063, JString, required = false,
                                 default = nil)
  if valid_615063 != nil:
    section.add "EndpointType", valid_615063
  var valid_615064 = query.getOrDefault("Action")
  valid_615064 = validateParameter(valid_615064, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_615064 != nil:
    section.add "Action", valid_615064
  var valid_615065 = query.getOrDefault("Version")
  valid_615065 = validateParameter(valid_615065, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615065 != nil:
    section.add "Version", valid_615065
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615066 = header.getOrDefault("X-Amz-Signature")
  valid_615066 = validateParameter(valid_615066, JString, required = false,
                                 default = nil)
  if valid_615066 != nil:
    section.add "X-Amz-Signature", valid_615066
  var valid_615067 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615067 = validateParameter(valid_615067, JString, required = false,
                                 default = nil)
  if valid_615067 != nil:
    section.add "X-Amz-Content-Sha256", valid_615067
  var valid_615068 = header.getOrDefault("X-Amz-Date")
  valid_615068 = validateParameter(valid_615068, JString, required = false,
                                 default = nil)
  if valid_615068 != nil:
    section.add "X-Amz-Date", valid_615068
  var valid_615069 = header.getOrDefault("X-Amz-Credential")
  valid_615069 = validateParameter(valid_615069, JString, required = false,
                                 default = nil)
  if valid_615069 != nil:
    section.add "X-Amz-Credential", valid_615069
  var valid_615070 = header.getOrDefault("X-Amz-Security-Token")
  valid_615070 = validateParameter(valid_615070, JString, required = false,
                                 default = nil)
  if valid_615070 != nil:
    section.add "X-Amz-Security-Token", valid_615070
  var valid_615071 = header.getOrDefault("X-Amz-Algorithm")
  valid_615071 = validateParameter(valid_615071, JString, required = false,
                                 default = nil)
  if valid_615071 != nil:
    section.add "X-Amz-Algorithm", valid_615071
  var valid_615072 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615072 = validateParameter(valid_615072, JString, required = false,
                                 default = nil)
  if valid_615072 != nil:
    section.add "X-Amz-SignedHeaders", valid_615072
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615073: Call_GetModifyDBClusterEndpoint_615057; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615073.validator(path, query, header, formData, body)
  let scheme = call_615073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615073.url(scheme.get, call_615073.host, call_615073.base,
                         call_615073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615073, url, valid)

proc call*(call_615074: Call_GetModifyDBClusterEndpoint_615057;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          StaticMembers: JsonNode = nil; EndpointType: string = "";
          Action: string = "ModifyDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615075 = newJObject()
  if ExcludedMembers != nil:
    query_615075.add "ExcludedMembers", ExcludedMembers
  add(query_615075, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_615075.add "StaticMembers", StaticMembers
  add(query_615075, "EndpointType", newJString(EndpointType))
  add(query_615075, "Action", newJString(Action))
  add(query_615075, "Version", newJString(Version))
  result = call_615074.call(nil, query_615075, nil, nil, nil)

var getModifyDBClusterEndpoint* = Call_GetModifyDBClusterEndpoint_615057(
    name: "getModifyDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_GetModifyDBClusterEndpoint_615058, base: "/",
    url: url_GetModifyDBClusterEndpoint_615059,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_615113 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBClusterParameterGroup_615115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_615114(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615116 = query.getOrDefault("Action")
  valid_615116 = validateParameter(valid_615116, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_615116 != nil:
    section.add "Action", valid_615116
  var valid_615117 = query.getOrDefault("Version")
  valid_615117 = validateParameter(valid_615117, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615117 != nil:
    section.add "Version", valid_615117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615118 = header.getOrDefault("X-Amz-Signature")
  valid_615118 = validateParameter(valid_615118, JString, required = false,
                                 default = nil)
  if valid_615118 != nil:
    section.add "X-Amz-Signature", valid_615118
  var valid_615119 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615119 = validateParameter(valid_615119, JString, required = false,
                                 default = nil)
  if valid_615119 != nil:
    section.add "X-Amz-Content-Sha256", valid_615119
  var valid_615120 = header.getOrDefault("X-Amz-Date")
  valid_615120 = validateParameter(valid_615120, JString, required = false,
                                 default = nil)
  if valid_615120 != nil:
    section.add "X-Amz-Date", valid_615120
  var valid_615121 = header.getOrDefault("X-Amz-Credential")
  valid_615121 = validateParameter(valid_615121, JString, required = false,
                                 default = nil)
  if valid_615121 != nil:
    section.add "X-Amz-Credential", valid_615121
  var valid_615122 = header.getOrDefault("X-Amz-Security-Token")
  valid_615122 = validateParameter(valid_615122, JString, required = false,
                                 default = nil)
  if valid_615122 != nil:
    section.add "X-Amz-Security-Token", valid_615122
  var valid_615123 = header.getOrDefault("X-Amz-Algorithm")
  valid_615123 = validateParameter(valid_615123, JString, required = false,
                                 default = nil)
  if valid_615123 != nil:
    section.add "X-Amz-Algorithm", valid_615123
  var valid_615124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615124 = validateParameter(valid_615124, JString, required = false,
                                 default = nil)
  if valid_615124 != nil:
    section.add "X-Amz-SignedHeaders", valid_615124
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_615125 = formData.getOrDefault("Parameters")
  valid_615125 = validateParameter(valid_615125, JArray, required = true, default = nil)
  if valid_615125 != nil:
    section.add "Parameters", valid_615125
  var valid_615126 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_615126 = validateParameter(valid_615126, JString, required = true,
                                 default = nil)
  if valid_615126 != nil:
    section.add "DBClusterParameterGroupName", valid_615126
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615127: Call_PostModifyDBClusterParameterGroup_615113;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615127.validator(path, query, header, formData, body)
  let scheme = call_615127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615127.url(scheme.get, call_615127.host, call_615127.base,
                         call_615127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615127, url, valid)

proc call*(call_615128: Call_PostModifyDBClusterParameterGroup_615113;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_615129 = newJObject()
  var formData_615130 = newJObject()
  add(query_615129, "Action", newJString(Action))
  if Parameters != nil:
    formData_615130.add "Parameters", Parameters
  add(formData_615130, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615129, "Version", newJString(Version))
  result = call_615128.call(nil, query_615129, nil, formData_615130, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_615113(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_615114, base: "/",
    url: url_PostModifyDBClusterParameterGroup_615115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_615096 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBClusterParameterGroup_615098(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_615097(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Parameters` field"
  var valid_615099 = query.getOrDefault("Parameters")
  valid_615099 = validateParameter(valid_615099, JArray, required = true, default = nil)
  if valid_615099 != nil:
    section.add "Parameters", valid_615099
  var valid_615100 = query.getOrDefault("DBClusterParameterGroupName")
  valid_615100 = validateParameter(valid_615100, JString, required = true,
                                 default = nil)
  if valid_615100 != nil:
    section.add "DBClusterParameterGroupName", valid_615100
  var valid_615101 = query.getOrDefault("Action")
  valid_615101 = validateParameter(valid_615101, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_615101 != nil:
    section.add "Action", valid_615101
  var valid_615102 = query.getOrDefault("Version")
  valid_615102 = validateParameter(valid_615102, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615102 != nil:
    section.add "Version", valid_615102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615103 = header.getOrDefault("X-Amz-Signature")
  valid_615103 = validateParameter(valid_615103, JString, required = false,
                                 default = nil)
  if valid_615103 != nil:
    section.add "X-Amz-Signature", valid_615103
  var valid_615104 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615104 = validateParameter(valid_615104, JString, required = false,
                                 default = nil)
  if valid_615104 != nil:
    section.add "X-Amz-Content-Sha256", valid_615104
  var valid_615105 = header.getOrDefault("X-Amz-Date")
  valid_615105 = validateParameter(valid_615105, JString, required = false,
                                 default = nil)
  if valid_615105 != nil:
    section.add "X-Amz-Date", valid_615105
  var valid_615106 = header.getOrDefault("X-Amz-Credential")
  valid_615106 = validateParameter(valid_615106, JString, required = false,
                                 default = nil)
  if valid_615106 != nil:
    section.add "X-Amz-Credential", valid_615106
  var valid_615107 = header.getOrDefault("X-Amz-Security-Token")
  valid_615107 = validateParameter(valid_615107, JString, required = false,
                                 default = nil)
  if valid_615107 != nil:
    section.add "X-Amz-Security-Token", valid_615107
  var valid_615108 = header.getOrDefault("X-Amz-Algorithm")
  valid_615108 = validateParameter(valid_615108, JString, required = false,
                                 default = nil)
  if valid_615108 != nil:
    section.add "X-Amz-Algorithm", valid_615108
  var valid_615109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615109 = validateParameter(valid_615109, JString, required = false,
                                 default = nil)
  if valid_615109 != nil:
    section.add "X-Amz-SignedHeaders", valid_615109
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615110: Call_GetModifyDBClusterParameterGroup_615096;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615110.validator(path, query, header, formData, body)
  let scheme = call_615110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615110.url(scheme.get, call_615110.host, call_615110.base,
                         call_615110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615110, url, valid)

proc call*(call_615111: Call_GetModifyDBClusterParameterGroup_615096;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615112 = newJObject()
  if Parameters != nil:
    query_615112.add "Parameters", Parameters
  add(query_615112, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615112, "Action", newJString(Action))
  add(query_615112, "Version", newJString(Version))
  result = call_615111.call(nil, query_615112, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_615096(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_615097, base: "/",
    url: url_GetModifyDBClusterParameterGroup_615098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_615150 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBClusterSnapshotAttribute_615152(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_615151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615153 = query.getOrDefault("Action")
  valid_615153 = validateParameter(valid_615153, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_615153 != nil:
    section.add "Action", valid_615153
  var valid_615154 = query.getOrDefault("Version")
  valid_615154 = validateParameter(valid_615154, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615154 != nil:
    section.add "Version", valid_615154
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615155 = header.getOrDefault("X-Amz-Signature")
  valid_615155 = validateParameter(valid_615155, JString, required = false,
                                 default = nil)
  if valid_615155 != nil:
    section.add "X-Amz-Signature", valid_615155
  var valid_615156 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615156 = validateParameter(valid_615156, JString, required = false,
                                 default = nil)
  if valid_615156 != nil:
    section.add "X-Amz-Content-Sha256", valid_615156
  var valid_615157 = header.getOrDefault("X-Amz-Date")
  valid_615157 = validateParameter(valid_615157, JString, required = false,
                                 default = nil)
  if valid_615157 != nil:
    section.add "X-Amz-Date", valid_615157
  var valid_615158 = header.getOrDefault("X-Amz-Credential")
  valid_615158 = validateParameter(valid_615158, JString, required = false,
                                 default = nil)
  if valid_615158 != nil:
    section.add "X-Amz-Credential", valid_615158
  var valid_615159 = header.getOrDefault("X-Amz-Security-Token")
  valid_615159 = validateParameter(valid_615159, JString, required = false,
                                 default = nil)
  if valid_615159 != nil:
    section.add "X-Amz-Security-Token", valid_615159
  var valid_615160 = header.getOrDefault("X-Amz-Algorithm")
  valid_615160 = validateParameter(valid_615160, JString, required = false,
                                 default = nil)
  if valid_615160 != nil:
    section.add "X-Amz-Algorithm", valid_615160
  var valid_615161 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615161 = validateParameter(valid_615161, JString, required = false,
                                 default = nil)
  if valid_615161 != nil:
    section.add "X-Amz-SignedHeaders", valid_615161
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_615162 = formData.getOrDefault("AttributeName")
  valid_615162 = validateParameter(valid_615162, JString, required = true,
                                 default = nil)
  if valid_615162 != nil:
    section.add "AttributeName", valid_615162
  var valid_615163 = formData.getOrDefault("ValuesToAdd")
  valid_615163 = validateParameter(valid_615163, JArray, required = false,
                                 default = nil)
  if valid_615163 != nil:
    section.add "ValuesToAdd", valid_615163
  var valid_615164 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_615164 = validateParameter(valid_615164, JString, required = true,
                                 default = nil)
  if valid_615164 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_615164
  var valid_615165 = formData.getOrDefault("ValuesToRemove")
  valid_615165 = validateParameter(valid_615165, JArray, required = false,
                                 default = nil)
  if valid_615165 != nil:
    section.add "ValuesToRemove", valid_615165
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615166: Call_PostModifyDBClusterSnapshotAttribute_615150;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615166.validator(path, query, header, formData, body)
  let scheme = call_615166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615166.url(scheme.get, call_615166.host, call_615166.base,
                         call_615166.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615166, url, valid)

proc call*(call_615167: Call_PostModifyDBClusterSnapshotAttribute_615150;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_615168 = newJObject()
  var formData_615169 = newJObject()
  add(formData_615169, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_615169.add "ValuesToAdd", ValuesToAdd
  add(formData_615169, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_615168, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_615169.add "ValuesToRemove", ValuesToRemove
  add(query_615168, "Version", newJString(Version))
  result = call_615167.call(nil, query_615168, nil, formData_615169, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_615150(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_615151, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_615152,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_615131 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBClusterSnapshotAttribute_615133(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_615132(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615134 = query.getOrDefault("ValuesToRemove")
  valid_615134 = validateParameter(valid_615134, JArray, required = false,
                                 default = nil)
  if valid_615134 != nil:
    section.add "ValuesToRemove", valid_615134
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_615135 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_615135 = validateParameter(valid_615135, JString, required = true,
                                 default = nil)
  if valid_615135 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_615135
  var valid_615136 = query.getOrDefault("Action")
  valid_615136 = validateParameter(valid_615136, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_615136 != nil:
    section.add "Action", valid_615136
  var valid_615137 = query.getOrDefault("AttributeName")
  valid_615137 = validateParameter(valid_615137, JString, required = true,
                                 default = nil)
  if valid_615137 != nil:
    section.add "AttributeName", valid_615137
  var valid_615138 = query.getOrDefault("ValuesToAdd")
  valid_615138 = validateParameter(valid_615138, JArray, required = false,
                                 default = nil)
  if valid_615138 != nil:
    section.add "ValuesToAdd", valid_615138
  var valid_615139 = query.getOrDefault("Version")
  valid_615139 = validateParameter(valid_615139, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615139 != nil:
    section.add "Version", valid_615139
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615140 = header.getOrDefault("X-Amz-Signature")
  valid_615140 = validateParameter(valid_615140, JString, required = false,
                                 default = nil)
  if valid_615140 != nil:
    section.add "X-Amz-Signature", valid_615140
  var valid_615141 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615141 = validateParameter(valid_615141, JString, required = false,
                                 default = nil)
  if valid_615141 != nil:
    section.add "X-Amz-Content-Sha256", valid_615141
  var valid_615142 = header.getOrDefault("X-Amz-Date")
  valid_615142 = validateParameter(valid_615142, JString, required = false,
                                 default = nil)
  if valid_615142 != nil:
    section.add "X-Amz-Date", valid_615142
  var valid_615143 = header.getOrDefault("X-Amz-Credential")
  valid_615143 = validateParameter(valid_615143, JString, required = false,
                                 default = nil)
  if valid_615143 != nil:
    section.add "X-Amz-Credential", valid_615143
  var valid_615144 = header.getOrDefault("X-Amz-Security-Token")
  valid_615144 = validateParameter(valid_615144, JString, required = false,
                                 default = nil)
  if valid_615144 != nil:
    section.add "X-Amz-Security-Token", valid_615144
  var valid_615145 = header.getOrDefault("X-Amz-Algorithm")
  valid_615145 = validateParameter(valid_615145, JString, required = false,
                                 default = nil)
  if valid_615145 != nil:
    section.add "X-Amz-Algorithm", valid_615145
  var valid_615146 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615146 = validateParameter(valid_615146, JString, required = false,
                                 default = nil)
  if valid_615146 != nil:
    section.add "X-Amz-SignedHeaders", valid_615146
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615147: Call_GetModifyDBClusterSnapshotAttribute_615131;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615147.validator(path, query, header, formData, body)
  let scheme = call_615147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615147.url(scheme.get, call_615147.host, call_615147.base,
                         call_615147.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615147, url, valid)

proc call*(call_615148: Call_GetModifyDBClusterSnapshotAttribute_615131;
          DBClusterSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToAdd: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_615149 = newJObject()
  if ValuesToRemove != nil:
    query_615149.add "ValuesToRemove", ValuesToRemove
  add(query_615149, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_615149, "Action", newJString(Action))
  add(query_615149, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_615149.add "ValuesToAdd", ValuesToAdd
  add(query_615149, "Version", newJString(Version))
  result = call_615148.call(nil, query_615149, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_615131(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_615132, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_615133,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_615228 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBInstance_615230(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBInstance_615229(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615231 = query.getOrDefault("Action")
  valid_615231 = validateParameter(valid_615231, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_615231 != nil:
    section.add "Action", valid_615231
  var valid_615232 = query.getOrDefault("Version")
  valid_615232 = validateParameter(valid_615232, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615232 != nil:
    section.add "Version", valid_615232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_615233 = header.getOrDefault("X-Amz-Security-Token")
  valid_615233 = validateParameter(valid_615233, JString, required = false,
                                 default = nil)
  if valid_615233 != nil:
    section.add "X-Amz-Security-Token", valid_615233
  var valid_615234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615234 = validateParameter(valid_615234, JString, required = false,
                                 default = nil)
  if valid_615234 != nil:
    section.add "X-Amz-SignedHeaders", valid_615234
  var valid_615235 = header.getOrDefault("X-Amz-Signature")
  valid_615235 = validateParameter(valid_615235, JString, required = false,
                                 default = nil)
  if valid_615235 != nil:
    section.add "X-Amz-Signature", valid_615235
  var valid_615236 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615236 = validateParameter(valid_615236, JString, required = false,
                                 default = nil)
  if valid_615236 != nil:
    section.add "X-Amz-Content-Sha256", valid_615236
  var valid_615237 = header.getOrDefault("X-Amz-Date")
  valid_615237 = validateParameter(valid_615237, JString, required = false,
                                 default = nil)
  if valid_615237 != nil:
    section.add "X-Amz-Date", valid_615237
  var valid_615238 = header.getOrDefault("X-Amz-Credential")
  valid_615238 = validateParameter(valid_615238, JString, required = false,
                                 default = nil)
  if valid_615238 != nil:
    section.add "X-Amz-Credential", valid_615238
  var valid_615239 = header.getOrDefault("X-Amz-Algorithm")
  valid_615239 = validateParameter(valid_615239, JString, required = false,
                                 default = nil)
  if valid_615239 != nil:
    section.add "X-Amz-Algorithm", valid_615239
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  section = newJObject()
  var valid_615240 = formData.getOrDefault("PromotionTier")
  valid_615240 = validateParameter(valid_615240, JInt, required = false, default = nil)
  if valid_615240 != nil:
    section.add "PromotionTier", valid_615240
  var valid_615241 = formData.getOrDefault("MultiAZ")
  valid_615241 = validateParameter(valid_615241, JBool, required = false, default = nil)
  if valid_615241 != nil:
    section.add "MultiAZ", valid_615241
  var valid_615242 = formData.getOrDefault("MonitoringRoleArn")
  valid_615242 = validateParameter(valid_615242, JString, required = false,
                                 default = nil)
  if valid_615242 != nil:
    section.add "MonitoringRoleArn", valid_615242
  var valid_615243 = formData.getOrDefault("CACertificateIdentifier")
  valid_615243 = validateParameter(valid_615243, JString, required = false,
                                 default = nil)
  if valid_615243 != nil:
    section.add "CACertificateIdentifier", valid_615243
  var valid_615244 = formData.getOrDefault("MonitoringInterval")
  valid_615244 = validateParameter(valid_615244, JInt, required = false, default = nil)
  if valid_615244 != nil:
    section.add "MonitoringInterval", valid_615244
  var valid_615245 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_615245 = validateParameter(valid_615245, JArray, required = false,
                                 default = nil)
  if valid_615245 != nil:
    section.add "VpcSecurityGroupIds", valid_615245
  var valid_615246 = formData.getOrDefault("EnablePerformanceInsights")
  valid_615246 = validateParameter(valid_615246, JBool, required = false, default = nil)
  if valid_615246 != nil:
    section.add "EnablePerformanceInsights", valid_615246
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_615247 = formData.getOrDefault("DBInstanceIdentifier")
  valid_615247 = validateParameter(valid_615247, JString, required = true,
                                 default = nil)
  if valid_615247 != nil:
    section.add "DBInstanceIdentifier", valid_615247
  var valid_615248 = formData.getOrDefault("TdeCredentialArn")
  valid_615248 = validateParameter(valid_615248, JString, required = false,
                                 default = nil)
  if valid_615248 != nil:
    section.add "TdeCredentialArn", valid_615248
  var valid_615249 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_615249 = validateParameter(valid_615249, JInt, required = false, default = nil)
  if valid_615249 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_615249
  var valid_615250 = formData.getOrDefault("DBSubnetGroupName")
  valid_615250 = validateParameter(valid_615250, JString, required = false,
                                 default = nil)
  if valid_615250 != nil:
    section.add "DBSubnetGroupName", valid_615250
  var valid_615251 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_615251 = validateParameter(valid_615251, JBool, required = false, default = nil)
  if valid_615251 != nil:
    section.add "AllowMajorVersionUpgrade", valid_615251
  var valid_615252 = formData.getOrDefault("CertificateRotationRestart")
  valid_615252 = validateParameter(valid_615252, JBool, required = false, default = nil)
  if valid_615252 != nil:
    section.add "CertificateRotationRestart", valid_615252
  var valid_615253 = formData.getOrDefault("StorageType")
  valid_615253 = validateParameter(valid_615253, JString, required = false,
                                 default = nil)
  if valid_615253 != nil:
    section.add "StorageType", valid_615253
  var valid_615254 = formData.getOrDefault("MaxAllocatedStorage")
  valid_615254 = validateParameter(valid_615254, JInt, required = false, default = nil)
  if valid_615254 != nil:
    section.add "MaxAllocatedStorage", valid_615254
  var valid_615255 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_615255 = validateParameter(valid_615255, JBool, required = false, default = nil)
  if valid_615255 != nil:
    section.add "CopyTagsToSnapshot", valid_615255
  var valid_615256 = formData.getOrDefault("DeletionProtection")
  valid_615256 = validateParameter(valid_615256, JBool, required = false, default = nil)
  if valid_615256 != nil:
    section.add "DeletionProtection", valid_615256
  var valid_615257 = formData.getOrDefault("ProcessorFeatures")
  valid_615257 = validateParameter(valid_615257, JArray, required = false,
                                 default = nil)
  if valid_615257 != nil:
    section.add "ProcessorFeatures", valid_615257
  var valid_615258 = formData.getOrDefault("AllocatedStorage")
  valid_615258 = validateParameter(valid_615258, JInt, required = false, default = nil)
  if valid_615258 != nil:
    section.add "AllocatedStorage", valid_615258
  var valid_615259 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_615259 = validateParameter(valid_615259, JString, required = false,
                                 default = nil)
  if valid_615259 != nil:
    section.add "PreferredMaintenanceWindow", valid_615259
  var valid_615260 = formData.getOrDefault("DBInstanceClass")
  valid_615260 = validateParameter(valid_615260, JString, required = false,
                                 default = nil)
  if valid_615260 != nil:
    section.add "DBInstanceClass", valid_615260
  var valid_615261 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_615261 = validateParameter(valid_615261, JBool, required = false, default = nil)
  if valid_615261 != nil:
    section.add "UseDefaultProcessorFeatures", valid_615261
  var valid_615262 = formData.getOrDefault("PreferredBackupWindow")
  valid_615262 = validateParameter(valid_615262, JString, required = false,
                                 default = nil)
  if valid_615262 != nil:
    section.add "PreferredBackupWindow", valid_615262
  var valid_615263 = formData.getOrDefault("MasterUserPassword")
  valid_615263 = validateParameter(valid_615263, JString, required = false,
                                 default = nil)
  if valid_615263 != nil:
    section.add "MasterUserPassword", valid_615263
  var valid_615264 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_615264 = validateParameter(valid_615264, JArray, required = false,
                                 default = nil)
  if valid_615264 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_615264
  var valid_615265 = formData.getOrDefault("Domain")
  valid_615265 = validateParameter(valid_615265, JString, required = false,
                                 default = nil)
  if valid_615265 != nil:
    section.add "Domain", valid_615265
  var valid_615266 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_615266 = validateParameter(valid_615266, JArray, required = false,
                                 default = nil)
  if valid_615266 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_615266
  var valid_615267 = formData.getOrDefault("DBParameterGroupName")
  valid_615267 = validateParameter(valid_615267, JString, required = false,
                                 default = nil)
  if valid_615267 != nil:
    section.add "DBParameterGroupName", valid_615267
  var valid_615268 = formData.getOrDefault("EngineVersion")
  valid_615268 = validateParameter(valid_615268, JString, required = false,
                                 default = nil)
  if valid_615268 != nil:
    section.add "EngineVersion", valid_615268
  var valid_615269 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_615269 = validateParameter(valid_615269, JBool, required = false, default = nil)
  if valid_615269 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_615269
  var valid_615270 = formData.getOrDefault("BackupRetentionPeriod")
  valid_615270 = validateParameter(valid_615270, JInt, required = false, default = nil)
  if valid_615270 != nil:
    section.add "BackupRetentionPeriod", valid_615270
  var valid_615271 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_615271 = validateParameter(valid_615271, JBool, required = false, default = nil)
  if valid_615271 != nil:
    section.add "AutoMinorVersionUpgrade", valid_615271
  var valid_615272 = formData.getOrDefault("TdeCredentialPassword")
  valid_615272 = validateParameter(valid_615272, JString, required = false,
                                 default = nil)
  if valid_615272 != nil:
    section.add "TdeCredentialPassword", valid_615272
  var valid_615273 = formData.getOrDefault("ApplyImmediately")
  valid_615273 = validateParameter(valid_615273, JBool, required = false, default = nil)
  if valid_615273 != nil:
    section.add "ApplyImmediately", valid_615273
  var valid_615274 = formData.getOrDefault("Iops")
  valid_615274 = validateParameter(valid_615274, JInt, required = false, default = nil)
  if valid_615274 != nil:
    section.add "Iops", valid_615274
  var valid_615275 = formData.getOrDefault("PubliclyAccessible")
  valid_615275 = validateParameter(valid_615275, JBool, required = false, default = nil)
  if valid_615275 != nil:
    section.add "PubliclyAccessible", valid_615275
  var valid_615276 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_615276 = validateParameter(valid_615276, JString, required = false,
                                 default = nil)
  if valid_615276 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_615276
  var valid_615277 = formData.getOrDefault("LicenseModel")
  valid_615277 = validateParameter(valid_615277, JString, required = false,
                                 default = nil)
  if valid_615277 != nil:
    section.add "LicenseModel", valid_615277
  var valid_615278 = formData.getOrDefault("DomainIAMRoleName")
  valid_615278 = validateParameter(valid_615278, JString, required = false,
                                 default = nil)
  if valid_615278 != nil:
    section.add "DomainIAMRoleName", valid_615278
  var valid_615279 = formData.getOrDefault("OptionGroupName")
  valid_615279 = validateParameter(valid_615279, JString, required = false,
                                 default = nil)
  if valid_615279 != nil:
    section.add "OptionGroupName", valid_615279
  var valid_615280 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_615280 = validateParameter(valid_615280, JString, required = false,
                                 default = nil)
  if valid_615280 != nil:
    section.add "NewDBInstanceIdentifier", valid_615280
  var valid_615281 = formData.getOrDefault("DBSecurityGroups")
  valid_615281 = validateParameter(valid_615281, JArray, required = false,
                                 default = nil)
  if valid_615281 != nil:
    section.add "DBSecurityGroups", valid_615281
  var valid_615282 = formData.getOrDefault("DBPortNumber")
  valid_615282 = validateParameter(valid_615282, JInt, required = false, default = nil)
  if valid_615282 != nil:
    section.add "DBPortNumber", valid_615282
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615283: Call_PostModifyDBInstance_615228; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_615283.validator(path, query, header, formData, body)
  let scheme = call_615283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615283.url(scheme.get, call_615283.host, call_615283.base,
                         call_615283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615283, url, valid)

proc call*(call_615284: Call_PostModifyDBInstance_615228;
          DBInstanceIdentifier: string; PromotionTier: int = 0; MultiAZ: bool = false;
          MonitoringRoleArn: string = ""; CACertificateIdentifier: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnablePerformanceInsights: bool = false; TdeCredentialArn: string = "";
          Action: string = "ModifyDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; AllowMajorVersionUpgrade: bool = false;
          CertificateRotationRestart: bool = false; StorageType: string = "";
          MaxAllocatedStorage: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil;
          AllocatedStorage: int = 0; PreferredMaintenanceWindow: string = "";
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Domain: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; AutoMinorVersionUpgrade: bool = false;
          TdeCredentialPassword: string = ""; ApplyImmediately: bool = false;
          Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          DomainIAMRoleName: string = ""; OptionGroupName: string = "";
          NewDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; DBPortNumber: int = 0): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  var query_615285 = newJObject()
  var formData_615286 = newJObject()
  add(formData_615286, "PromotionTier", newJInt(PromotionTier))
  add(formData_615286, "MultiAZ", newJBool(MultiAZ))
  add(formData_615286, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_615286, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_615286, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_615286.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_615286, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_615286, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_615286, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_615285, "Action", newJString(Action))
  add(formData_615286, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_615286, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_615286, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_615286, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(formData_615286, "StorageType", newJString(StorageType))
  add(formData_615286, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_615286, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_615286, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_615286.add "ProcessorFeatures", ProcessorFeatures
  add(formData_615286, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_615286, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_615286, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_615286, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_615286, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_615286, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_615286.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_615286, "Domain", newJString(Domain))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_615286.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_615286, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_615286, "EngineVersion", newJString(EngineVersion))
  add(formData_615286, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_615286, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_615286, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_615286, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_615286, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_615286, "Iops", newJInt(Iops))
  add(formData_615286, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_615286, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_615286, "LicenseModel", newJString(LicenseModel))
  add(formData_615286, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_615286, "OptionGroupName", newJString(OptionGroupName))
  add(formData_615286, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_615285, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_615286.add "DBSecurityGroups", DBSecurityGroups
  add(formData_615286, "DBPortNumber", newJInt(DBPortNumber))
  result = call_615284.call(nil, query_615285, nil, formData_615286, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_615228(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_615229, base: "/",
    url: url_PostModifyDBInstance_615230, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_615170 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBInstance_615172(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBInstance_615171(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  section = newJObject()
  var valid_615173 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_615173 = validateParameter(valid_615173, JBool, required = false, default = nil)
  if valid_615173 != nil:
    section.add "UseDefaultProcessorFeatures", valid_615173
  var valid_615174 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_615174 = validateParameter(valid_615174, JInt, required = false, default = nil)
  if valid_615174 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_615174
  var valid_615175 = query.getOrDefault("CopyTagsToSnapshot")
  valid_615175 = validateParameter(valid_615175, JBool, required = false, default = nil)
  if valid_615175 != nil:
    section.add "CopyTagsToSnapshot", valid_615175
  var valid_615176 = query.getOrDefault("MonitoringInterval")
  valid_615176 = validateParameter(valid_615176, JInt, required = false, default = nil)
  if valid_615176 != nil:
    section.add "MonitoringInterval", valid_615176
  var valid_615177 = query.getOrDefault("MonitoringRoleArn")
  valid_615177 = validateParameter(valid_615177, JString, required = false,
                                 default = nil)
  if valid_615177 != nil:
    section.add "MonitoringRoleArn", valid_615177
  var valid_615178 = query.getOrDefault("DBPortNumber")
  valid_615178 = validateParameter(valid_615178, JInt, required = false, default = nil)
  if valid_615178 != nil:
    section.add "DBPortNumber", valid_615178
  var valid_615179 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_615179 = validateParameter(valid_615179, JArray, required = false,
                                 default = nil)
  if valid_615179 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_615179
  var valid_615180 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_615180 = validateParameter(valid_615180, JArray, required = false,
                                 default = nil)
  if valid_615180 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_615180
  var valid_615181 = query.getOrDefault("ProcessorFeatures")
  valid_615181 = validateParameter(valid_615181, JArray, required = false,
                                 default = nil)
  if valid_615181 != nil:
    section.add "ProcessorFeatures", valid_615181
  var valid_615182 = query.getOrDefault("BackupRetentionPeriod")
  valid_615182 = validateParameter(valid_615182, JInt, required = false, default = nil)
  if valid_615182 != nil:
    section.add "BackupRetentionPeriod", valid_615182
  var valid_615183 = query.getOrDefault("EngineVersion")
  valid_615183 = validateParameter(valid_615183, JString, required = false,
                                 default = nil)
  if valid_615183 != nil:
    section.add "EngineVersion", valid_615183
  var valid_615184 = query.getOrDefault("Action")
  valid_615184 = validateParameter(valid_615184, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_615184 != nil:
    section.add "Action", valid_615184
  var valid_615185 = query.getOrDefault("Domain")
  valid_615185 = validateParameter(valid_615185, JString, required = false,
                                 default = nil)
  if valid_615185 != nil:
    section.add "Domain", valid_615185
  var valid_615186 = query.getOrDefault("VpcSecurityGroupIds")
  valid_615186 = validateParameter(valid_615186, JArray, required = false,
                                 default = nil)
  if valid_615186 != nil:
    section.add "VpcSecurityGroupIds", valid_615186
  var valid_615187 = query.getOrDefault("AllocatedStorage")
  valid_615187 = validateParameter(valid_615187, JInt, required = false, default = nil)
  if valid_615187 != nil:
    section.add "AllocatedStorage", valid_615187
  var valid_615188 = query.getOrDefault("EnablePerformanceInsights")
  valid_615188 = validateParameter(valid_615188, JBool, required = false, default = nil)
  if valid_615188 != nil:
    section.add "EnablePerformanceInsights", valid_615188
  var valid_615189 = query.getOrDefault("PubliclyAccessible")
  valid_615189 = validateParameter(valid_615189, JBool, required = false, default = nil)
  if valid_615189 != nil:
    section.add "PubliclyAccessible", valid_615189
  var valid_615190 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_615190 = validateParameter(valid_615190, JString, required = false,
                                 default = nil)
  if valid_615190 != nil:
    section.add "NewDBInstanceIdentifier", valid_615190
  var valid_615191 = query.getOrDefault("TdeCredentialPassword")
  valid_615191 = validateParameter(valid_615191, JString, required = false,
                                 default = nil)
  if valid_615191 != nil:
    section.add "TdeCredentialPassword", valid_615191
  var valid_615192 = query.getOrDefault("DeletionProtection")
  valid_615192 = validateParameter(valid_615192, JBool, required = false, default = nil)
  if valid_615192 != nil:
    section.add "DeletionProtection", valid_615192
  var valid_615193 = query.getOrDefault("DBParameterGroupName")
  valid_615193 = validateParameter(valid_615193, JString, required = false,
                                 default = nil)
  if valid_615193 != nil:
    section.add "DBParameterGroupName", valid_615193
  var valid_615194 = query.getOrDefault("MaxAllocatedStorage")
  valid_615194 = validateParameter(valid_615194, JInt, required = false, default = nil)
  if valid_615194 != nil:
    section.add "MaxAllocatedStorage", valid_615194
  var valid_615195 = query.getOrDefault("CertificateRotationRestart")
  valid_615195 = validateParameter(valid_615195, JBool, required = false, default = nil)
  if valid_615195 != nil:
    section.add "CertificateRotationRestart", valid_615195
  var valid_615196 = query.getOrDefault("LicenseModel")
  valid_615196 = validateParameter(valid_615196, JString, required = false,
                                 default = nil)
  if valid_615196 != nil:
    section.add "LicenseModel", valid_615196
  var valid_615197 = query.getOrDefault("DBInstanceIdentifier")
  valid_615197 = validateParameter(valid_615197, JString, required = true,
                                 default = nil)
  if valid_615197 != nil:
    section.add "DBInstanceIdentifier", valid_615197
  var valid_615198 = query.getOrDefault("TdeCredentialArn")
  valid_615198 = validateParameter(valid_615198, JString, required = false,
                                 default = nil)
  if valid_615198 != nil:
    section.add "TdeCredentialArn", valid_615198
  var valid_615199 = query.getOrDefault("PromotionTier")
  valid_615199 = validateParameter(valid_615199, JInt, required = false, default = nil)
  if valid_615199 != nil:
    section.add "PromotionTier", valid_615199
  var valid_615200 = query.getOrDefault("CACertificateIdentifier")
  valid_615200 = validateParameter(valid_615200, JString, required = false,
                                 default = nil)
  if valid_615200 != nil:
    section.add "CACertificateIdentifier", valid_615200
  var valid_615201 = query.getOrDefault("StorageType")
  valid_615201 = validateParameter(valid_615201, JString, required = false,
                                 default = nil)
  if valid_615201 != nil:
    section.add "StorageType", valid_615201
  var valid_615202 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_615202 = validateParameter(valid_615202, JBool, required = false, default = nil)
  if valid_615202 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_615202
  var valid_615203 = query.getOrDefault("MultiAZ")
  valid_615203 = validateParameter(valid_615203, JBool, required = false, default = nil)
  if valid_615203 != nil:
    section.add "MultiAZ", valid_615203
  var valid_615204 = query.getOrDefault("DBSecurityGroups")
  valid_615204 = validateParameter(valid_615204, JArray, required = false,
                                 default = nil)
  if valid_615204 != nil:
    section.add "DBSecurityGroups", valid_615204
  var valid_615205 = query.getOrDefault("ApplyImmediately")
  valid_615205 = validateParameter(valid_615205, JBool, required = false, default = nil)
  if valid_615205 != nil:
    section.add "ApplyImmediately", valid_615205
  var valid_615206 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_615206 = validateParameter(valid_615206, JBool, required = false, default = nil)
  if valid_615206 != nil:
    section.add "AllowMajorVersionUpgrade", valid_615206
  var valid_615207 = query.getOrDefault("MasterUserPassword")
  valid_615207 = validateParameter(valid_615207, JString, required = false,
                                 default = nil)
  if valid_615207 != nil:
    section.add "MasterUserPassword", valid_615207
  var valid_615208 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_615208 = validateParameter(valid_615208, JString, required = false,
                                 default = nil)
  if valid_615208 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_615208
  var valid_615209 = query.getOrDefault("OptionGroupName")
  valid_615209 = validateParameter(valid_615209, JString, required = false,
                                 default = nil)
  if valid_615209 != nil:
    section.add "OptionGroupName", valid_615209
  var valid_615210 = query.getOrDefault("DBSubnetGroupName")
  valid_615210 = validateParameter(valid_615210, JString, required = false,
                                 default = nil)
  if valid_615210 != nil:
    section.add "DBSubnetGroupName", valid_615210
  var valid_615211 = query.getOrDefault("PreferredBackupWindow")
  valid_615211 = validateParameter(valid_615211, JString, required = false,
                                 default = nil)
  if valid_615211 != nil:
    section.add "PreferredBackupWindow", valid_615211
  var valid_615212 = query.getOrDefault("DBInstanceClass")
  valid_615212 = validateParameter(valid_615212, JString, required = false,
                                 default = nil)
  if valid_615212 != nil:
    section.add "DBInstanceClass", valid_615212
  var valid_615213 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_615213 = validateParameter(valid_615213, JString, required = false,
                                 default = nil)
  if valid_615213 != nil:
    section.add "PreferredMaintenanceWindow", valid_615213
  var valid_615214 = query.getOrDefault("Version")
  valid_615214 = validateParameter(valid_615214, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615214 != nil:
    section.add "Version", valid_615214
  var valid_615215 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_615215 = validateParameter(valid_615215, JBool, required = false, default = nil)
  if valid_615215 != nil:
    section.add "AutoMinorVersionUpgrade", valid_615215
  var valid_615216 = query.getOrDefault("Iops")
  valid_615216 = validateParameter(valid_615216, JInt, required = false, default = nil)
  if valid_615216 != nil:
    section.add "Iops", valid_615216
  var valid_615217 = query.getOrDefault("DomainIAMRoleName")
  valid_615217 = validateParameter(valid_615217, JString, required = false,
                                 default = nil)
  if valid_615217 != nil:
    section.add "DomainIAMRoleName", valid_615217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_615218 = header.getOrDefault("X-Amz-Security-Token")
  valid_615218 = validateParameter(valid_615218, JString, required = false,
                                 default = nil)
  if valid_615218 != nil:
    section.add "X-Amz-Security-Token", valid_615218
  var valid_615219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615219 = validateParameter(valid_615219, JString, required = false,
                                 default = nil)
  if valid_615219 != nil:
    section.add "X-Amz-SignedHeaders", valid_615219
  var valid_615220 = header.getOrDefault("X-Amz-Signature")
  valid_615220 = validateParameter(valid_615220, JString, required = false,
                                 default = nil)
  if valid_615220 != nil:
    section.add "X-Amz-Signature", valid_615220
  var valid_615221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615221 = validateParameter(valid_615221, JString, required = false,
                                 default = nil)
  if valid_615221 != nil:
    section.add "X-Amz-Content-Sha256", valid_615221
  var valid_615222 = header.getOrDefault("X-Amz-Date")
  valid_615222 = validateParameter(valid_615222, JString, required = false,
                                 default = nil)
  if valid_615222 != nil:
    section.add "X-Amz-Date", valid_615222
  var valid_615223 = header.getOrDefault("X-Amz-Credential")
  valid_615223 = validateParameter(valid_615223, JString, required = false,
                                 default = nil)
  if valid_615223 != nil:
    section.add "X-Amz-Credential", valid_615223
  var valid_615224 = header.getOrDefault("X-Amz-Algorithm")
  valid_615224 = validateParameter(valid_615224, JString, required = false,
                                 default = nil)
  if valid_615224 != nil:
    section.add "X-Amz-Algorithm", valid_615224
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615225: Call_GetModifyDBInstance_615170; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_615225.validator(path, query, header, formData, body)
  let scheme = call_615225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615225.url(scheme.get, call_615225.host, call_615225.base,
                         call_615225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615225, url, valid)

proc call*(call_615226: Call_GetModifyDBInstance_615170;
          DBInstanceIdentifier: string; UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0;
          CopyTagsToSnapshot: bool = false; MonitoringInterval: int = 0;
          MonitoringRoleArn: string = ""; DBPortNumber: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ProcessorFeatures: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EngineVersion: string = ""; Action: string = "ModifyDBInstance";
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AllocatedStorage: int = 0; EnablePerformanceInsights: bool = false;
          PubliclyAccessible: bool = false; NewDBInstanceIdentifier: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          DBParameterGroupName: string = ""; MaxAllocatedStorage: int = 0;
          CertificateRotationRestart: bool = false; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          CACertificateIdentifier: string = ""; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; MultiAZ: bool = false;
          DBSecurityGroups: JsonNode = nil; ApplyImmediately: bool = false;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          PerformanceInsightsKMSKeyId: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          DBInstanceClass: string = ""; PreferredMaintenanceWindow: string = "";
          Version: string = "2014-10-31"; AutoMinorVersionUpgrade: bool = false;
          Iops: int = 0; DomainIAMRoleName: string = ""): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  var query_615227 = newJObject()
  add(query_615227, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_615227, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_615227, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_615227, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_615227, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_615227, "DBPortNumber", newJInt(DBPortNumber))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_615227.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_615227.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  if ProcessorFeatures != nil:
    query_615227.add "ProcessorFeatures", ProcessorFeatures
  add(query_615227, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_615227, "EngineVersion", newJString(EngineVersion))
  add(query_615227, "Action", newJString(Action))
  add(query_615227, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_615227.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_615227, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_615227, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_615227, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_615227, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_615227, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_615227, "DeletionProtection", newJBool(DeletionProtection))
  add(query_615227, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_615227, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_615227, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(query_615227, "LicenseModel", newJString(LicenseModel))
  add(query_615227, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615227, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_615227, "PromotionTier", newJInt(PromotionTier))
  add(query_615227, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_615227, "StorageType", newJString(StorageType))
  add(query_615227, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_615227, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_615227.add "DBSecurityGroups", DBSecurityGroups
  add(query_615227, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_615227, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_615227, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_615227, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_615227, "OptionGroupName", newJString(OptionGroupName))
  add(query_615227, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_615227, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_615227, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_615227, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_615227, "Version", newJString(Version))
  add(query_615227, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_615227, "Iops", newJInt(Iops))
  add(query_615227, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_615226.call(nil, query_615227, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_615170(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_615171, base: "/",
    url: url_GetModifyDBInstance_615172, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_615304 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBParameterGroup_615306(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBParameterGroup_615305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615307 = query.getOrDefault("Action")
  valid_615307 = validateParameter(valid_615307, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_615307 != nil:
    section.add "Action", valid_615307
  var valid_615308 = query.getOrDefault("Version")
  valid_615308 = validateParameter(valid_615308, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615308 != nil:
    section.add "Version", valid_615308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615309 = header.getOrDefault("X-Amz-Signature")
  valid_615309 = validateParameter(valid_615309, JString, required = false,
                                 default = nil)
  if valid_615309 != nil:
    section.add "X-Amz-Signature", valid_615309
  var valid_615310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615310 = validateParameter(valid_615310, JString, required = false,
                                 default = nil)
  if valid_615310 != nil:
    section.add "X-Amz-Content-Sha256", valid_615310
  var valid_615311 = header.getOrDefault("X-Amz-Date")
  valid_615311 = validateParameter(valid_615311, JString, required = false,
                                 default = nil)
  if valid_615311 != nil:
    section.add "X-Amz-Date", valid_615311
  var valid_615312 = header.getOrDefault("X-Amz-Credential")
  valid_615312 = validateParameter(valid_615312, JString, required = false,
                                 default = nil)
  if valid_615312 != nil:
    section.add "X-Amz-Credential", valid_615312
  var valid_615313 = header.getOrDefault("X-Amz-Security-Token")
  valid_615313 = validateParameter(valid_615313, JString, required = false,
                                 default = nil)
  if valid_615313 != nil:
    section.add "X-Amz-Security-Token", valid_615313
  var valid_615314 = header.getOrDefault("X-Amz-Algorithm")
  valid_615314 = validateParameter(valid_615314, JString, required = false,
                                 default = nil)
  if valid_615314 != nil:
    section.add "X-Amz-Algorithm", valid_615314
  var valid_615315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615315 = validateParameter(valid_615315, JString, required = false,
                                 default = nil)
  if valid_615315 != nil:
    section.add "X-Amz-SignedHeaders", valid_615315
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_615316 = formData.getOrDefault("DBParameterGroupName")
  valid_615316 = validateParameter(valid_615316, JString, required = true,
                                 default = nil)
  if valid_615316 != nil:
    section.add "DBParameterGroupName", valid_615316
  var valid_615317 = formData.getOrDefault("Parameters")
  valid_615317 = validateParameter(valid_615317, JArray, required = true, default = nil)
  if valid_615317 != nil:
    section.add "Parameters", valid_615317
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615318: Call_PostModifyDBParameterGroup_615304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_615318.validator(path, query, header, formData, body)
  let scheme = call_615318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615318.url(scheme.get, call_615318.host, call_615318.base,
                         call_615318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615318, url, valid)

proc call*(call_615319: Call_PostModifyDBParameterGroup_615304;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Version: string (required)
  var query_615320 = newJObject()
  var formData_615321 = newJObject()
  add(formData_615321, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_615320, "Action", newJString(Action))
  if Parameters != nil:
    formData_615321.add "Parameters", Parameters
  add(query_615320, "Version", newJString(Version))
  result = call_615319.call(nil, query_615320, nil, formData_615321, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_615304(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_615305, base: "/",
    url: url_PostModifyDBParameterGroup_615306,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_615287 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBParameterGroup_615289(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBParameterGroup_615288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_615290 = query.getOrDefault("DBParameterGroupName")
  valid_615290 = validateParameter(valid_615290, JString, required = true,
                                 default = nil)
  if valid_615290 != nil:
    section.add "DBParameterGroupName", valid_615290
  var valid_615291 = query.getOrDefault("Parameters")
  valid_615291 = validateParameter(valid_615291, JArray, required = true, default = nil)
  if valid_615291 != nil:
    section.add "Parameters", valid_615291
  var valid_615292 = query.getOrDefault("Action")
  valid_615292 = validateParameter(valid_615292, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_615292 != nil:
    section.add "Action", valid_615292
  var valid_615293 = query.getOrDefault("Version")
  valid_615293 = validateParameter(valid_615293, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615293 != nil:
    section.add "Version", valid_615293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615294 = header.getOrDefault("X-Amz-Signature")
  valid_615294 = validateParameter(valid_615294, JString, required = false,
                                 default = nil)
  if valid_615294 != nil:
    section.add "X-Amz-Signature", valid_615294
  var valid_615295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615295 = validateParameter(valid_615295, JString, required = false,
                                 default = nil)
  if valid_615295 != nil:
    section.add "X-Amz-Content-Sha256", valid_615295
  var valid_615296 = header.getOrDefault("X-Amz-Date")
  valid_615296 = validateParameter(valid_615296, JString, required = false,
                                 default = nil)
  if valid_615296 != nil:
    section.add "X-Amz-Date", valid_615296
  var valid_615297 = header.getOrDefault("X-Amz-Credential")
  valid_615297 = validateParameter(valid_615297, JString, required = false,
                                 default = nil)
  if valid_615297 != nil:
    section.add "X-Amz-Credential", valid_615297
  var valid_615298 = header.getOrDefault("X-Amz-Security-Token")
  valid_615298 = validateParameter(valid_615298, JString, required = false,
                                 default = nil)
  if valid_615298 != nil:
    section.add "X-Amz-Security-Token", valid_615298
  var valid_615299 = header.getOrDefault("X-Amz-Algorithm")
  valid_615299 = validateParameter(valid_615299, JString, required = false,
                                 default = nil)
  if valid_615299 != nil:
    section.add "X-Amz-Algorithm", valid_615299
  var valid_615300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615300 = validateParameter(valid_615300, JString, required = false,
                                 default = nil)
  if valid_615300 != nil:
    section.add "X-Amz-SignedHeaders", valid_615300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615301: Call_GetModifyDBParameterGroup_615287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_615301.validator(path, query, header, formData, body)
  let scheme = call_615301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615301.url(scheme.get, call_615301.host, call_615301.base,
                         call_615301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615301, url, valid)

proc call*(call_615302: Call_GetModifyDBParameterGroup_615287;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615303 = newJObject()
  add(query_615303, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_615303.add "Parameters", Parameters
  add(query_615303, "Action", newJString(Action))
  add(query_615303, "Version", newJString(Version))
  result = call_615302.call(nil, query_615303, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_615287(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_615288, base: "/",
    url: url_GetModifyDBParameterGroup_615289,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxy_615345 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBProxy_615347(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxy_615346(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615348 = query.getOrDefault("Action")
  valid_615348 = validateParameter(valid_615348, JString, required = true,
                                 default = newJString("ModifyDBProxy"))
  if valid_615348 != nil:
    section.add "Action", valid_615348
  var valid_615349 = query.getOrDefault("Version")
  valid_615349 = validateParameter(valid_615349, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615349 != nil:
    section.add "Version", valid_615349
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615350 = header.getOrDefault("X-Amz-Signature")
  valid_615350 = validateParameter(valid_615350, JString, required = false,
                                 default = nil)
  if valid_615350 != nil:
    section.add "X-Amz-Signature", valid_615350
  var valid_615351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615351 = validateParameter(valid_615351, JString, required = false,
                                 default = nil)
  if valid_615351 != nil:
    section.add "X-Amz-Content-Sha256", valid_615351
  var valid_615352 = header.getOrDefault("X-Amz-Date")
  valid_615352 = validateParameter(valid_615352, JString, required = false,
                                 default = nil)
  if valid_615352 != nil:
    section.add "X-Amz-Date", valid_615352
  var valid_615353 = header.getOrDefault("X-Amz-Credential")
  valid_615353 = validateParameter(valid_615353, JString, required = false,
                                 default = nil)
  if valid_615353 != nil:
    section.add "X-Amz-Credential", valid_615353
  var valid_615354 = header.getOrDefault("X-Amz-Security-Token")
  valid_615354 = validateParameter(valid_615354, JString, required = false,
                                 default = nil)
  if valid_615354 != nil:
    section.add "X-Amz-Security-Token", valid_615354
  var valid_615355 = header.getOrDefault("X-Amz-Algorithm")
  valid_615355 = validateParameter(valid_615355, JString, required = false,
                                 default = nil)
  if valid_615355 != nil:
    section.add "X-Amz-Algorithm", valid_615355
  var valid_615356 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615356 = validateParameter(valid_615356, JString, required = false,
                                 default = nil)
  if valid_615356 != nil:
    section.add "X-Amz-SignedHeaders", valid_615356
  result.add "header", section
  ## parameters in `formData` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  section = newJObject()
  var valid_615357 = formData.getOrDefault("IdleClientTimeout")
  valid_615357 = validateParameter(valid_615357, JInt, required = false, default = nil)
  if valid_615357 != nil:
    section.add "IdleClientTimeout", valid_615357
  var valid_615358 = formData.getOrDefault("RequireTLS")
  valid_615358 = validateParameter(valid_615358, JBool, required = false, default = nil)
  if valid_615358 != nil:
    section.add "RequireTLS", valid_615358
  var valid_615359 = formData.getOrDefault("DebugLogging")
  valid_615359 = validateParameter(valid_615359, JBool, required = false, default = nil)
  if valid_615359 != nil:
    section.add "DebugLogging", valid_615359
  var valid_615360 = formData.getOrDefault("RoleArn")
  valid_615360 = validateParameter(valid_615360, JString, required = false,
                                 default = nil)
  if valid_615360 != nil:
    section.add "RoleArn", valid_615360
  var valid_615361 = formData.getOrDefault("SecurityGroups")
  valid_615361 = validateParameter(valid_615361, JArray, required = false,
                                 default = nil)
  if valid_615361 != nil:
    section.add "SecurityGroups", valid_615361
  var valid_615362 = formData.getOrDefault("Auth")
  valid_615362 = validateParameter(valid_615362, JArray, required = false,
                                 default = nil)
  if valid_615362 != nil:
    section.add "Auth", valid_615362
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_615363 = formData.getOrDefault("DBProxyName")
  valid_615363 = validateParameter(valid_615363, JString, required = true,
                                 default = nil)
  if valid_615363 != nil:
    section.add "DBProxyName", valid_615363
  var valid_615364 = formData.getOrDefault("NewDBProxyName")
  valid_615364 = validateParameter(valid_615364, JString, required = false,
                                 default = nil)
  if valid_615364 != nil:
    section.add "NewDBProxyName", valid_615364
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615365: Call_PostModifyDBProxy_615345; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_615365.validator(path, query, header, formData, body)
  let scheme = call_615365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615365.url(scheme.get, call_615365.host, call_615365.base,
                         call_615365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615365, url, valid)

proc call*(call_615366: Call_PostModifyDBProxy_615345; DBProxyName: string;
          IdleClientTimeout: int = 0; RequireTLS: bool = false;
          DebugLogging: bool = false; RoleArn: string = "";
          SecurityGroups: JsonNode = nil; Auth: JsonNode = nil;
          NewDBProxyName: string = ""; Action: string = "ModifyDBProxy";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615367 = newJObject()
  var formData_615368 = newJObject()
  add(formData_615368, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(formData_615368, "RequireTLS", newJBool(RequireTLS))
  add(formData_615368, "DebugLogging", newJBool(DebugLogging))
  add(formData_615368, "RoleArn", newJString(RoleArn))
  if SecurityGroups != nil:
    formData_615368.add "SecurityGroups", SecurityGroups
  if Auth != nil:
    formData_615368.add "Auth", Auth
  add(formData_615368, "DBProxyName", newJString(DBProxyName))
  add(formData_615368, "NewDBProxyName", newJString(NewDBProxyName))
  add(query_615367, "Action", newJString(Action))
  add(query_615367, "Version", newJString(Version))
  result = call_615366.call(nil, query_615367, nil, formData_615368, nil)

var postModifyDBProxy* = Call_PostModifyDBProxy_615345(name: "postModifyDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_PostModifyDBProxy_615346,
    base: "/", url: url_PostModifyDBProxy_615347,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxy_615322 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBProxy_615324(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxy_615323(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  section = newJObject()
  var valid_615325 = query.getOrDefault("IdleClientTimeout")
  valid_615325 = validateParameter(valid_615325, JInt, required = false, default = nil)
  if valid_615325 != nil:
    section.add "IdleClientTimeout", valid_615325
  var valid_615326 = query.getOrDefault("RoleArn")
  valid_615326 = validateParameter(valid_615326, JString, required = false,
                                 default = nil)
  if valid_615326 != nil:
    section.add "RoleArn", valid_615326
  var valid_615327 = query.getOrDefault("Auth")
  valid_615327 = validateParameter(valid_615327, JArray, required = false,
                                 default = nil)
  if valid_615327 != nil:
    section.add "Auth", valid_615327
  var valid_615328 = query.getOrDefault("RequireTLS")
  valid_615328 = validateParameter(valid_615328, JBool, required = false, default = nil)
  if valid_615328 != nil:
    section.add "RequireTLS", valid_615328
  var valid_615329 = query.getOrDefault("NewDBProxyName")
  valid_615329 = validateParameter(valid_615329, JString, required = false,
                                 default = nil)
  if valid_615329 != nil:
    section.add "NewDBProxyName", valid_615329
  var valid_615330 = query.getOrDefault("SecurityGroups")
  valid_615330 = validateParameter(valid_615330, JArray, required = false,
                                 default = nil)
  if valid_615330 != nil:
    section.add "SecurityGroups", valid_615330
  var valid_615331 = query.getOrDefault("Action")
  valid_615331 = validateParameter(valid_615331, JString, required = true,
                                 default = newJString("ModifyDBProxy"))
  if valid_615331 != nil:
    section.add "Action", valid_615331
  var valid_615332 = query.getOrDefault("Version")
  valid_615332 = validateParameter(valid_615332, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615332 != nil:
    section.add "Version", valid_615332
  var valid_615333 = query.getOrDefault("DebugLogging")
  valid_615333 = validateParameter(valid_615333, JBool, required = false, default = nil)
  if valid_615333 != nil:
    section.add "DebugLogging", valid_615333
  var valid_615334 = query.getOrDefault("DBProxyName")
  valid_615334 = validateParameter(valid_615334, JString, required = true,
                                 default = nil)
  if valid_615334 != nil:
    section.add "DBProxyName", valid_615334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615335 = header.getOrDefault("X-Amz-Signature")
  valid_615335 = validateParameter(valid_615335, JString, required = false,
                                 default = nil)
  if valid_615335 != nil:
    section.add "X-Amz-Signature", valid_615335
  var valid_615336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615336 = validateParameter(valid_615336, JString, required = false,
                                 default = nil)
  if valid_615336 != nil:
    section.add "X-Amz-Content-Sha256", valid_615336
  var valid_615337 = header.getOrDefault("X-Amz-Date")
  valid_615337 = validateParameter(valid_615337, JString, required = false,
                                 default = nil)
  if valid_615337 != nil:
    section.add "X-Amz-Date", valid_615337
  var valid_615338 = header.getOrDefault("X-Amz-Credential")
  valid_615338 = validateParameter(valid_615338, JString, required = false,
                                 default = nil)
  if valid_615338 != nil:
    section.add "X-Amz-Credential", valid_615338
  var valid_615339 = header.getOrDefault("X-Amz-Security-Token")
  valid_615339 = validateParameter(valid_615339, JString, required = false,
                                 default = nil)
  if valid_615339 != nil:
    section.add "X-Amz-Security-Token", valid_615339
  var valid_615340 = header.getOrDefault("X-Amz-Algorithm")
  valid_615340 = validateParameter(valid_615340, JString, required = false,
                                 default = nil)
  if valid_615340 != nil:
    section.add "X-Amz-Algorithm", valid_615340
  var valid_615341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615341 = validateParameter(valid_615341, JString, required = false,
                                 default = nil)
  if valid_615341 != nil:
    section.add "X-Amz-SignedHeaders", valid_615341
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615342: Call_GetModifyDBProxy_615322; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_615342.validator(path, query, header, formData, body)
  let scheme = call_615342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615342.url(scheme.get, call_615342.host, call_615342.base,
                         call_615342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615342, url, valid)

proc call*(call_615343: Call_GetModifyDBProxy_615322; DBProxyName: string;
          IdleClientTimeout: int = 0; RoleArn: string = ""; Auth: JsonNode = nil;
          RequireTLS: bool = false; NewDBProxyName: string = "";
          SecurityGroups: JsonNode = nil; Action: string = "ModifyDBProxy";
          Version: string = "2014-10-31"; DebugLogging: bool = false): Recallable =
  ## getModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  var query_615344 = newJObject()
  add(query_615344, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_615344, "RoleArn", newJString(RoleArn))
  if Auth != nil:
    query_615344.add "Auth", Auth
  add(query_615344, "RequireTLS", newJBool(RequireTLS))
  add(query_615344, "NewDBProxyName", newJString(NewDBProxyName))
  if SecurityGroups != nil:
    query_615344.add "SecurityGroups", SecurityGroups
  add(query_615344, "Action", newJString(Action))
  add(query_615344, "Version", newJString(Version))
  add(query_615344, "DebugLogging", newJBool(DebugLogging))
  add(query_615344, "DBProxyName", newJString(DBProxyName))
  result = call_615343.call(nil, query_615344, nil, nil, nil)

var getModifyDBProxy* = Call_GetModifyDBProxy_615322(name: "getModifyDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_GetModifyDBProxy_615323,
    base: "/", url: url_GetModifyDBProxy_615324,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxyTargetGroup_615392 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBProxyTargetGroup_615394(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxyTargetGroup_615393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615395 = query.getOrDefault("Action")
  valid_615395 = validateParameter(valid_615395, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_615395 != nil:
    section.add "Action", valid_615395
  var valid_615396 = query.getOrDefault("Version")
  valid_615396 = validateParameter(valid_615396, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615396 != nil:
    section.add "Version", valid_615396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615397 = header.getOrDefault("X-Amz-Signature")
  valid_615397 = validateParameter(valid_615397, JString, required = false,
                                 default = nil)
  if valid_615397 != nil:
    section.add "X-Amz-Signature", valid_615397
  var valid_615398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615398 = validateParameter(valid_615398, JString, required = false,
                                 default = nil)
  if valid_615398 != nil:
    section.add "X-Amz-Content-Sha256", valid_615398
  var valid_615399 = header.getOrDefault("X-Amz-Date")
  valid_615399 = validateParameter(valid_615399, JString, required = false,
                                 default = nil)
  if valid_615399 != nil:
    section.add "X-Amz-Date", valid_615399
  var valid_615400 = header.getOrDefault("X-Amz-Credential")
  valid_615400 = validateParameter(valid_615400, JString, required = false,
                                 default = nil)
  if valid_615400 != nil:
    section.add "X-Amz-Credential", valid_615400
  var valid_615401 = header.getOrDefault("X-Amz-Security-Token")
  valid_615401 = validateParameter(valid_615401, JString, required = false,
                                 default = nil)
  if valid_615401 != nil:
    section.add "X-Amz-Security-Token", valid_615401
  var valid_615402 = header.getOrDefault("X-Amz-Algorithm")
  valid_615402 = validateParameter(valid_615402, JString, required = false,
                                 default = nil)
  if valid_615402 != nil:
    section.add "X-Amz-Algorithm", valid_615402
  var valid_615403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615403 = validateParameter(valid_615403, JString, required = false,
                                 default = nil)
  if valid_615403 != nil:
    section.add "X-Amz-SignedHeaders", valid_615403
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  section = newJObject()
  var valid_615404 = formData.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_615404 = validateParameter(valid_615404, JString, required = false,
                                 default = nil)
  if valid_615404 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_615404
  assert formData != nil, "formData argument is necessary due to required `TargetGroupName` field"
  var valid_615405 = formData.getOrDefault("TargetGroupName")
  valid_615405 = validateParameter(valid_615405, JString, required = true,
                                 default = nil)
  if valid_615405 != nil:
    section.add "TargetGroupName", valid_615405
  var valid_615406 = formData.getOrDefault("NewName")
  valid_615406 = validateParameter(valid_615406, JString, required = false,
                                 default = nil)
  if valid_615406 != nil:
    section.add "NewName", valid_615406
  var valid_615407 = formData.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_615407 = validateParameter(valid_615407, JString, required = false,
                                 default = nil)
  if valid_615407 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_615407
  var valid_615408 = formData.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_615408 = validateParameter(valid_615408, JString, required = false,
                                 default = nil)
  if valid_615408 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_615408
  var valid_615409 = formData.getOrDefault("DBProxyName")
  valid_615409 = validateParameter(valid_615409, JString, required = true,
                                 default = nil)
  if valid_615409 != nil:
    section.add "DBProxyName", valid_615409
  var valid_615410 = formData.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_615410 = validateParameter(valid_615410, JString, required = false,
                                 default = nil)
  if valid_615410 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_615410
  var valid_615411 = formData.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_615411 = validateParameter(valid_615411, JArray, required = false,
                                 default = nil)
  if valid_615411 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_615411
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615412: Call_PostModifyDBProxyTargetGroup_615392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_615412.validator(path, query, header, formData, body)
  let scheme = call_615412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615412.url(scheme.get, call_615412.host, call_615412.base,
                         call_615412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615412, url, valid)

proc call*(call_615413: Call_PostModifyDBProxyTargetGroup_615392;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          NewName: string = "";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          ConnectionPoolConfigInitQuery: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31";
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil): Recallable =
  ## postModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   Action: string (required)
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: string (required)
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  var query_615414 = newJObject()
  var formData_615415 = newJObject()
  add(formData_615415, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(formData_615415, "TargetGroupName", newJString(TargetGroupName))
  add(formData_615415, "NewName", newJString(NewName))
  add(formData_615415, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(formData_615415, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(formData_615415, "DBProxyName", newJString(DBProxyName))
  add(query_615414, "Action", newJString(Action))
  add(formData_615415, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_615414, "Version", newJString(Version))
  if ConnectionPoolConfigSessionPinningFilters != nil:
    formData_615415.add "ConnectionPoolConfig.SessionPinningFilters",
                       ConnectionPoolConfigSessionPinningFilters
  result = call_615413.call(nil, query_615414, nil, formData_615415, nil)

var postModifyDBProxyTargetGroup* = Call_PostModifyDBProxyTargetGroup_615392(
    name: "postModifyDBProxyTargetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_PostModifyDBProxyTargetGroup_615393, base: "/",
    url: url_PostModifyDBProxyTargetGroup_615394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxyTargetGroup_615369 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBProxyTargetGroup_615371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxyTargetGroup_615370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   Action: JString (required)
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  section = newJObject()
  var valid_615372 = query.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_615372 = validateParameter(valid_615372, JArray, required = false,
                                 default = nil)
  if valid_615372 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_615372
  var valid_615373 = query.getOrDefault("NewName")
  valid_615373 = validateParameter(valid_615373, JString, required = false,
                                 default = nil)
  if valid_615373 != nil:
    section.add "NewName", valid_615373
  var valid_615374 = query.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_615374 = validateParameter(valid_615374, JString, required = false,
                                 default = nil)
  if valid_615374 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_615374
  var valid_615375 = query.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_615375 = validateParameter(valid_615375, JString, required = false,
                                 default = nil)
  if valid_615375 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_615375
  assert query != nil,
        "query argument is necessary due to required `TargetGroupName` field"
  var valid_615376 = query.getOrDefault("TargetGroupName")
  valid_615376 = validateParameter(valid_615376, JString, required = true,
                                 default = nil)
  if valid_615376 != nil:
    section.add "TargetGroupName", valid_615376
  var valid_615377 = query.getOrDefault("Action")
  valid_615377 = validateParameter(valid_615377, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_615377 != nil:
    section.add "Action", valid_615377
  var valid_615378 = query.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_615378 = validateParameter(valid_615378, JString, required = false,
                                 default = nil)
  if valid_615378 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_615378
  var valid_615379 = query.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_615379 = validateParameter(valid_615379, JString, required = false,
                                 default = nil)
  if valid_615379 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_615379
  var valid_615380 = query.getOrDefault("Version")
  valid_615380 = validateParameter(valid_615380, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615380 != nil:
    section.add "Version", valid_615380
  var valid_615381 = query.getOrDefault("DBProxyName")
  valid_615381 = validateParameter(valid_615381, JString, required = true,
                                 default = nil)
  if valid_615381 != nil:
    section.add "DBProxyName", valid_615381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615382 = header.getOrDefault("X-Amz-Signature")
  valid_615382 = validateParameter(valid_615382, JString, required = false,
                                 default = nil)
  if valid_615382 != nil:
    section.add "X-Amz-Signature", valid_615382
  var valid_615383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615383 = validateParameter(valid_615383, JString, required = false,
                                 default = nil)
  if valid_615383 != nil:
    section.add "X-Amz-Content-Sha256", valid_615383
  var valid_615384 = header.getOrDefault("X-Amz-Date")
  valid_615384 = validateParameter(valid_615384, JString, required = false,
                                 default = nil)
  if valid_615384 != nil:
    section.add "X-Amz-Date", valid_615384
  var valid_615385 = header.getOrDefault("X-Amz-Credential")
  valid_615385 = validateParameter(valid_615385, JString, required = false,
                                 default = nil)
  if valid_615385 != nil:
    section.add "X-Amz-Credential", valid_615385
  var valid_615386 = header.getOrDefault("X-Amz-Security-Token")
  valid_615386 = validateParameter(valid_615386, JString, required = false,
                                 default = nil)
  if valid_615386 != nil:
    section.add "X-Amz-Security-Token", valid_615386
  var valid_615387 = header.getOrDefault("X-Amz-Algorithm")
  valid_615387 = validateParameter(valid_615387, JString, required = false,
                                 default = nil)
  if valid_615387 != nil:
    section.add "X-Amz-Algorithm", valid_615387
  var valid_615388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615388 = validateParameter(valid_615388, JString, required = false,
                                 default = nil)
  if valid_615388 != nil:
    section.add "X-Amz-SignedHeaders", valid_615388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615389: Call_GetModifyDBProxyTargetGroup_615369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_615389.validator(path, query, header, formData, body)
  let scheme = call_615389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615389.url(scheme.get, call_615389.host, call_615389.base,
                         call_615389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615389, url, valid)

proc call*(call_615390: Call_GetModifyDBProxyTargetGroup_615369;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil;
          NewName: string = "";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          ConnectionPoolConfigInitQuery: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   Action: string (required)
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  var query_615391 = newJObject()
  if ConnectionPoolConfigSessionPinningFilters != nil:
    query_615391.add "ConnectionPoolConfig.SessionPinningFilters",
                    ConnectionPoolConfigSessionPinningFilters
  add(query_615391, "NewName", newJString(NewName))
  add(query_615391, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(query_615391, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(query_615391, "TargetGroupName", newJString(TargetGroupName))
  add(query_615391, "Action", newJString(Action))
  add(query_615391, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(query_615391, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_615391, "Version", newJString(Version))
  add(query_615391, "DBProxyName", newJString(DBProxyName))
  result = call_615390.call(nil, query_615391, nil, nil, nil)

var getModifyDBProxyTargetGroup* = Call_GetModifyDBProxyTargetGroup_615369(
    name: "getModifyDBProxyTargetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_GetModifyDBProxyTargetGroup_615370, base: "/",
    url: url_GetModifyDBProxyTargetGroup_615371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshot_615434 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBSnapshot_615436(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshot_615435(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615437 = query.getOrDefault("Action")
  valid_615437 = validateParameter(valid_615437, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_615437 != nil:
    section.add "Action", valid_615437
  var valid_615438 = query.getOrDefault("Version")
  valid_615438 = validateParameter(valid_615438, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615438 != nil:
    section.add "Version", valid_615438
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615439 = header.getOrDefault("X-Amz-Signature")
  valid_615439 = validateParameter(valid_615439, JString, required = false,
                                 default = nil)
  if valid_615439 != nil:
    section.add "X-Amz-Signature", valid_615439
  var valid_615440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615440 = validateParameter(valid_615440, JString, required = false,
                                 default = nil)
  if valid_615440 != nil:
    section.add "X-Amz-Content-Sha256", valid_615440
  var valid_615441 = header.getOrDefault("X-Amz-Date")
  valid_615441 = validateParameter(valid_615441, JString, required = false,
                                 default = nil)
  if valid_615441 != nil:
    section.add "X-Amz-Date", valid_615441
  var valid_615442 = header.getOrDefault("X-Amz-Credential")
  valid_615442 = validateParameter(valid_615442, JString, required = false,
                                 default = nil)
  if valid_615442 != nil:
    section.add "X-Amz-Credential", valid_615442
  var valid_615443 = header.getOrDefault("X-Amz-Security-Token")
  valid_615443 = validateParameter(valid_615443, JString, required = false,
                                 default = nil)
  if valid_615443 != nil:
    section.add "X-Amz-Security-Token", valid_615443
  var valid_615444 = header.getOrDefault("X-Amz-Algorithm")
  valid_615444 = validateParameter(valid_615444, JString, required = false,
                                 default = nil)
  if valid_615444 != nil:
    section.add "X-Amz-Algorithm", valid_615444
  var valid_615445 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615445 = validateParameter(valid_615445, JString, required = false,
                                 default = nil)
  if valid_615445 != nil:
    section.add "X-Amz-SignedHeaders", valid_615445
  result.add "header", section
  ## parameters in `formData` object:
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_615446 = formData.getOrDefault("EngineVersion")
  valid_615446 = validateParameter(valid_615446, JString, required = false,
                                 default = nil)
  if valid_615446 != nil:
    section.add "EngineVersion", valid_615446
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_615447 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_615447 = validateParameter(valid_615447, JString, required = true,
                                 default = nil)
  if valid_615447 != nil:
    section.add "DBSnapshotIdentifier", valid_615447
  var valid_615448 = formData.getOrDefault("OptionGroupName")
  valid_615448 = validateParameter(valid_615448, JString, required = false,
                                 default = nil)
  if valid_615448 != nil:
    section.add "OptionGroupName", valid_615448
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615449: Call_PostModifyDBSnapshot_615434; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_615449.validator(path, query, header, formData, body)
  let scheme = call_615449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615449.url(scheme.get, call_615449.host, call_615449.base,
                         call_615449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615449, url, valid)

proc call*(call_615450: Call_PostModifyDBSnapshot_615434;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_615451 = newJObject()
  var formData_615452 = newJObject()
  add(formData_615452, "EngineVersion", newJString(EngineVersion))
  add(formData_615452, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_615451, "Action", newJString(Action))
  add(formData_615452, "OptionGroupName", newJString(OptionGroupName))
  add(query_615451, "Version", newJString(Version))
  result = call_615450.call(nil, query_615451, nil, formData_615452, nil)

var postModifyDBSnapshot* = Call_PostModifyDBSnapshot_615434(
    name: "postModifyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_PostModifyDBSnapshot_615435, base: "/",
    url: url_PostModifyDBSnapshot_615436, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshot_615416 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBSnapshot_615418(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshot_615417(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_615419 = query.getOrDefault("DBSnapshotIdentifier")
  valid_615419 = validateParameter(valid_615419, JString, required = true,
                                 default = nil)
  if valid_615419 != nil:
    section.add "DBSnapshotIdentifier", valid_615419
  var valid_615420 = query.getOrDefault("EngineVersion")
  valid_615420 = validateParameter(valid_615420, JString, required = false,
                                 default = nil)
  if valid_615420 != nil:
    section.add "EngineVersion", valid_615420
  var valid_615421 = query.getOrDefault("Action")
  valid_615421 = validateParameter(valid_615421, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_615421 != nil:
    section.add "Action", valid_615421
  var valid_615422 = query.getOrDefault("OptionGroupName")
  valid_615422 = validateParameter(valid_615422, JString, required = false,
                                 default = nil)
  if valid_615422 != nil:
    section.add "OptionGroupName", valid_615422
  var valid_615423 = query.getOrDefault("Version")
  valid_615423 = validateParameter(valid_615423, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615423 != nil:
    section.add "Version", valid_615423
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615424 = header.getOrDefault("X-Amz-Signature")
  valid_615424 = validateParameter(valid_615424, JString, required = false,
                                 default = nil)
  if valid_615424 != nil:
    section.add "X-Amz-Signature", valid_615424
  var valid_615425 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615425 = validateParameter(valid_615425, JString, required = false,
                                 default = nil)
  if valid_615425 != nil:
    section.add "X-Amz-Content-Sha256", valid_615425
  var valid_615426 = header.getOrDefault("X-Amz-Date")
  valid_615426 = validateParameter(valid_615426, JString, required = false,
                                 default = nil)
  if valid_615426 != nil:
    section.add "X-Amz-Date", valid_615426
  var valid_615427 = header.getOrDefault("X-Amz-Credential")
  valid_615427 = validateParameter(valid_615427, JString, required = false,
                                 default = nil)
  if valid_615427 != nil:
    section.add "X-Amz-Credential", valid_615427
  var valid_615428 = header.getOrDefault("X-Amz-Security-Token")
  valid_615428 = validateParameter(valid_615428, JString, required = false,
                                 default = nil)
  if valid_615428 != nil:
    section.add "X-Amz-Security-Token", valid_615428
  var valid_615429 = header.getOrDefault("X-Amz-Algorithm")
  valid_615429 = validateParameter(valid_615429, JString, required = false,
                                 default = nil)
  if valid_615429 != nil:
    section.add "X-Amz-Algorithm", valid_615429
  var valid_615430 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615430 = validateParameter(valid_615430, JString, required = false,
                                 default = nil)
  if valid_615430 != nil:
    section.add "X-Amz-SignedHeaders", valid_615430
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615431: Call_GetModifyDBSnapshot_615416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_615431.validator(path, query, header, formData, body)
  let scheme = call_615431.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615431.url(scheme.get, call_615431.host, call_615431.base,
                         call_615431.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615431, url, valid)

proc call*(call_615432: Call_GetModifyDBSnapshot_615416;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_615433 = newJObject()
  add(query_615433, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_615433, "EngineVersion", newJString(EngineVersion))
  add(query_615433, "Action", newJString(Action))
  add(query_615433, "OptionGroupName", newJString(OptionGroupName))
  add(query_615433, "Version", newJString(Version))
  result = call_615432.call(nil, query_615433, nil, nil, nil)

var getModifyDBSnapshot* = Call_GetModifyDBSnapshot_615416(
    name: "getModifyDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_GetModifyDBSnapshot_615417, base: "/",
    url: url_GetModifyDBSnapshot_615418, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshotAttribute_615472 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBSnapshotAttribute_615474(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshotAttribute_615473(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615475 = query.getOrDefault("Action")
  valid_615475 = validateParameter(valid_615475, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_615475 != nil:
    section.add "Action", valid_615475
  var valid_615476 = query.getOrDefault("Version")
  valid_615476 = validateParameter(valid_615476, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615476 != nil:
    section.add "Version", valid_615476
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615477 = header.getOrDefault("X-Amz-Signature")
  valid_615477 = validateParameter(valid_615477, JString, required = false,
                                 default = nil)
  if valid_615477 != nil:
    section.add "X-Amz-Signature", valid_615477
  var valid_615478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615478 = validateParameter(valid_615478, JString, required = false,
                                 default = nil)
  if valid_615478 != nil:
    section.add "X-Amz-Content-Sha256", valid_615478
  var valid_615479 = header.getOrDefault("X-Amz-Date")
  valid_615479 = validateParameter(valid_615479, JString, required = false,
                                 default = nil)
  if valid_615479 != nil:
    section.add "X-Amz-Date", valid_615479
  var valid_615480 = header.getOrDefault("X-Amz-Credential")
  valid_615480 = validateParameter(valid_615480, JString, required = false,
                                 default = nil)
  if valid_615480 != nil:
    section.add "X-Amz-Credential", valid_615480
  var valid_615481 = header.getOrDefault("X-Amz-Security-Token")
  valid_615481 = validateParameter(valid_615481, JString, required = false,
                                 default = nil)
  if valid_615481 != nil:
    section.add "X-Amz-Security-Token", valid_615481
  var valid_615482 = header.getOrDefault("X-Amz-Algorithm")
  valid_615482 = validateParameter(valid_615482, JString, required = false,
                                 default = nil)
  if valid_615482 != nil:
    section.add "X-Amz-Algorithm", valid_615482
  var valid_615483 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615483 = validateParameter(valid_615483, JString, required = false,
                                 default = nil)
  if valid_615483 != nil:
    section.add "X-Amz-SignedHeaders", valid_615483
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_615484 = formData.getOrDefault("AttributeName")
  valid_615484 = validateParameter(valid_615484, JString, required = true,
                                 default = nil)
  if valid_615484 != nil:
    section.add "AttributeName", valid_615484
  var valid_615485 = formData.getOrDefault("ValuesToAdd")
  valid_615485 = validateParameter(valid_615485, JArray, required = false,
                                 default = nil)
  if valid_615485 != nil:
    section.add "ValuesToAdd", valid_615485
  var valid_615486 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_615486 = validateParameter(valid_615486, JString, required = true,
                                 default = nil)
  if valid_615486 != nil:
    section.add "DBSnapshotIdentifier", valid_615486
  var valid_615487 = formData.getOrDefault("ValuesToRemove")
  valid_615487 = validateParameter(valid_615487, JArray, required = false,
                                 default = nil)
  if valid_615487 != nil:
    section.add "ValuesToRemove", valid_615487
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615488: Call_PostModifyDBSnapshotAttribute_615472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_615488.validator(path, query, header, formData, body)
  let scheme = call_615488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615488.url(scheme.get, call_615488.host, call_615488.base,
                         call_615488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615488, url, valid)

proc call*(call_615489: Call_PostModifyDBSnapshotAttribute_615472;
          AttributeName: string; DBSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil; Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: string (required)
  var query_615490 = newJObject()
  var formData_615491 = newJObject()
  add(formData_615491, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_615491.add "ValuesToAdd", ValuesToAdd
  add(formData_615491, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_615490, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_615491.add "ValuesToRemove", ValuesToRemove
  add(query_615490, "Version", newJString(Version))
  result = call_615489.call(nil, query_615490, nil, formData_615491, nil)

var postModifyDBSnapshotAttribute* = Call_PostModifyDBSnapshotAttribute_615472(
    name: "postModifyDBSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_PostModifyDBSnapshotAttribute_615473, base: "/",
    url: url_PostModifyDBSnapshotAttribute_615474,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshotAttribute_615453 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBSnapshotAttribute_615455(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshotAttribute_615454(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615456 = query.getOrDefault("ValuesToRemove")
  valid_615456 = validateParameter(valid_615456, JArray, required = false,
                                 default = nil)
  if valid_615456 != nil:
    section.add "ValuesToRemove", valid_615456
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_615457 = query.getOrDefault("DBSnapshotIdentifier")
  valid_615457 = validateParameter(valid_615457, JString, required = true,
                                 default = nil)
  if valid_615457 != nil:
    section.add "DBSnapshotIdentifier", valid_615457
  var valid_615458 = query.getOrDefault("Action")
  valid_615458 = validateParameter(valid_615458, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_615458 != nil:
    section.add "Action", valid_615458
  var valid_615459 = query.getOrDefault("AttributeName")
  valid_615459 = validateParameter(valid_615459, JString, required = true,
                                 default = nil)
  if valid_615459 != nil:
    section.add "AttributeName", valid_615459
  var valid_615460 = query.getOrDefault("ValuesToAdd")
  valid_615460 = validateParameter(valid_615460, JArray, required = false,
                                 default = nil)
  if valid_615460 != nil:
    section.add "ValuesToAdd", valid_615460
  var valid_615461 = query.getOrDefault("Version")
  valid_615461 = validateParameter(valid_615461, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615461 != nil:
    section.add "Version", valid_615461
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615462 = header.getOrDefault("X-Amz-Signature")
  valid_615462 = validateParameter(valid_615462, JString, required = false,
                                 default = nil)
  if valid_615462 != nil:
    section.add "X-Amz-Signature", valid_615462
  var valid_615463 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615463 = validateParameter(valid_615463, JString, required = false,
                                 default = nil)
  if valid_615463 != nil:
    section.add "X-Amz-Content-Sha256", valid_615463
  var valid_615464 = header.getOrDefault("X-Amz-Date")
  valid_615464 = validateParameter(valid_615464, JString, required = false,
                                 default = nil)
  if valid_615464 != nil:
    section.add "X-Amz-Date", valid_615464
  var valid_615465 = header.getOrDefault("X-Amz-Credential")
  valid_615465 = validateParameter(valid_615465, JString, required = false,
                                 default = nil)
  if valid_615465 != nil:
    section.add "X-Amz-Credential", valid_615465
  var valid_615466 = header.getOrDefault("X-Amz-Security-Token")
  valid_615466 = validateParameter(valid_615466, JString, required = false,
                                 default = nil)
  if valid_615466 != nil:
    section.add "X-Amz-Security-Token", valid_615466
  var valid_615467 = header.getOrDefault("X-Amz-Algorithm")
  valid_615467 = validateParameter(valid_615467, JString, required = false,
                                 default = nil)
  if valid_615467 != nil:
    section.add "X-Amz-Algorithm", valid_615467
  var valid_615468 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615468 = validateParameter(valid_615468, JString, required = false,
                                 default = nil)
  if valid_615468 != nil:
    section.add "X-Amz-SignedHeaders", valid_615468
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615469: Call_GetModifyDBSnapshotAttribute_615453; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_615469.validator(path, query, header, formData, body)
  let scheme = call_615469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615469.url(scheme.get, call_615469.host, call_615469.base,
                         call_615469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615469, url, valid)

proc call*(call_615470: Call_GetModifyDBSnapshotAttribute_615453;
          DBSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBSnapshotAttribute"; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_615471 = newJObject()
  if ValuesToRemove != nil:
    query_615471.add "ValuesToRemove", ValuesToRemove
  add(query_615471, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_615471, "Action", newJString(Action))
  add(query_615471, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_615471.add "ValuesToAdd", ValuesToAdd
  add(query_615471, "Version", newJString(Version))
  result = call_615470.call(nil, query_615471, nil, nil, nil)

var getModifyDBSnapshotAttribute* = Call_GetModifyDBSnapshotAttribute_615453(
    name: "getModifyDBSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_GetModifyDBSnapshotAttribute_615454, base: "/",
    url: url_GetModifyDBSnapshotAttribute_615455,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_615510 = ref object of OpenApiRestCall_610658
proc url_PostModifyDBSubnetGroup_615512(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSubnetGroup_615511(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615513 = query.getOrDefault("Action")
  valid_615513 = validateParameter(valid_615513, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_615513 != nil:
    section.add "Action", valid_615513
  var valid_615514 = query.getOrDefault("Version")
  valid_615514 = validateParameter(valid_615514, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615514 != nil:
    section.add "Version", valid_615514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615515 = header.getOrDefault("X-Amz-Signature")
  valid_615515 = validateParameter(valid_615515, JString, required = false,
                                 default = nil)
  if valid_615515 != nil:
    section.add "X-Amz-Signature", valid_615515
  var valid_615516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615516 = validateParameter(valid_615516, JString, required = false,
                                 default = nil)
  if valid_615516 != nil:
    section.add "X-Amz-Content-Sha256", valid_615516
  var valid_615517 = header.getOrDefault("X-Amz-Date")
  valid_615517 = validateParameter(valid_615517, JString, required = false,
                                 default = nil)
  if valid_615517 != nil:
    section.add "X-Amz-Date", valid_615517
  var valid_615518 = header.getOrDefault("X-Amz-Credential")
  valid_615518 = validateParameter(valid_615518, JString, required = false,
                                 default = nil)
  if valid_615518 != nil:
    section.add "X-Amz-Credential", valid_615518
  var valid_615519 = header.getOrDefault("X-Amz-Security-Token")
  valid_615519 = validateParameter(valid_615519, JString, required = false,
                                 default = nil)
  if valid_615519 != nil:
    section.add "X-Amz-Security-Token", valid_615519
  var valid_615520 = header.getOrDefault("X-Amz-Algorithm")
  valid_615520 = validateParameter(valid_615520, JString, required = false,
                                 default = nil)
  if valid_615520 != nil:
    section.add "X-Amz-Algorithm", valid_615520
  var valid_615521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615521 = validateParameter(valid_615521, JString, required = false,
                                 default = nil)
  if valid_615521 != nil:
    section.add "X-Amz-SignedHeaders", valid_615521
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  section = newJObject()
  var valid_615522 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_615522 = validateParameter(valid_615522, JString, required = false,
                                 default = nil)
  if valid_615522 != nil:
    section.add "DBSubnetGroupDescription", valid_615522
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_615523 = formData.getOrDefault("DBSubnetGroupName")
  valid_615523 = validateParameter(valid_615523, JString, required = true,
                                 default = nil)
  if valid_615523 != nil:
    section.add "DBSubnetGroupName", valid_615523
  var valid_615524 = formData.getOrDefault("SubnetIds")
  valid_615524 = validateParameter(valid_615524, JArray, required = true, default = nil)
  if valid_615524 != nil:
    section.add "SubnetIds", valid_615524
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615525: Call_PostModifyDBSubnetGroup_615510; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_615525.validator(path, query, header, formData, body)
  let scheme = call_615525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615525.url(scheme.get, call_615525.host, call_615525.base,
                         call_615525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615525, url, valid)

proc call*(call_615526: Call_PostModifyDBSubnetGroup_615510;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string = "";
          Action: string = "ModifyDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  var query_615527 = newJObject()
  var formData_615528 = newJObject()
  add(formData_615528, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_615527, "Action", newJString(Action))
  add(formData_615528, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_615527, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_615528.add "SubnetIds", SubnetIds
  result = call_615526.call(nil, query_615527, nil, formData_615528, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_615510(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_615511, base: "/",
    url: url_PostModifyDBSubnetGroup_615512, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_615492 = ref object of OpenApiRestCall_610658
proc url_GetModifyDBSubnetGroup_615494(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSubnetGroup_615493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_615495 = query.getOrDefault("SubnetIds")
  valid_615495 = validateParameter(valid_615495, JArray, required = true, default = nil)
  if valid_615495 != nil:
    section.add "SubnetIds", valid_615495
  var valid_615496 = query.getOrDefault("Action")
  valid_615496 = validateParameter(valid_615496, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_615496 != nil:
    section.add "Action", valid_615496
  var valid_615497 = query.getOrDefault("DBSubnetGroupDescription")
  valid_615497 = validateParameter(valid_615497, JString, required = false,
                                 default = nil)
  if valid_615497 != nil:
    section.add "DBSubnetGroupDescription", valid_615497
  var valid_615498 = query.getOrDefault("DBSubnetGroupName")
  valid_615498 = validateParameter(valid_615498, JString, required = true,
                                 default = nil)
  if valid_615498 != nil:
    section.add "DBSubnetGroupName", valid_615498
  var valid_615499 = query.getOrDefault("Version")
  valid_615499 = validateParameter(valid_615499, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615499 != nil:
    section.add "Version", valid_615499
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615500 = header.getOrDefault("X-Amz-Signature")
  valid_615500 = validateParameter(valid_615500, JString, required = false,
                                 default = nil)
  if valid_615500 != nil:
    section.add "X-Amz-Signature", valid_615500
  var valid_615501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615501 = validateParameter(valid_615501, JString, required = false,
                                 default = nil)
  if valid_615501 != nil:
    section.add "X-Amz-Content-Sha256", valid_615501
  var valid_615502 = header.getOrDefault("X-Amz-Date")
  valid_615502 = validateParameter(valid_615502, JString, required = false,
                                 default = nil)
  if valid_615502 != nil:
    section.add "X-Amz-Date", valid_615502
  var valid_615503 = header.getOrDefault("X-Amz-Credential")
  valid_615503 = validateParameter(valid_615503, JString, required = false,
                                 default = nil)
  if valid_615503 != nil:
    section.add "X-Amz-Credential", valid_615503
  var valid_615504 = header.getOrDefault("X-Amz-Security-Token")
  valid_615504 = validateParameter(valid_615504, JString, required = false,
                                 default = nil)
  if valid_615504 != nil:
    section.add "X-Amz-Security-Token", valid_615504
  var valid_615505 = header.getOrDefault("X-Amz-Algorithm")
  valid_615505 = validateParameter(valid_615505, JString, required = false,
                                 default = nil)
  if valid_615505 != nil:
    section.add "X-Amz-Algorithm", valid_615505
  var valid_615506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615506 = validateParameter(valid_615506, JString, required = false,
                                 default = nil)
  if valid_615506 != nil:
    section.add "X-Amz-SignedHeaders", valid_615506
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615507: Call_GetModifyDBSubnetGroup_615492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_615507.validator(path, query, header, formData, body)
  let scheme = call_615507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615507.url(scheme.get, call_615507.host, call_615507.base,
                         call_615507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615507, url, valid)

proc call*(call_615508: Call_GetModifyDBSubnetGroup_615492; SubnetIds: JsonNode;
          DBSubnetGroupName: string; Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_615509 = newJObject()
  if SubnetIds != nil:
    query_615509.add "SubnetIds", SubnetIds
  add(query_615509, "Action", newJString(Action))
  add(query_615509, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_615509, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_615509, "Version", newJString(Version))
  result = call_615508.call(nil, query_615509, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_615492(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_615493, base: "/",
    url: url_GetModifyDBSubnetGroup_615494, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_615549 = ref object of OpenApiRestCall_610658
proc url_PostModifyEventSubscription_615551(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_615550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615552 = query.getOrDefault("Action")
  valid_615552 = validateParameter(valid_615552, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_615552 != nil:
    section.add "Action", valid_615552
  var valid_615553 = query.getOrDefault("Version")
  valid_615553 = validateParameter(valid_615553, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615553 != nil:
    section.add "Version", valid_615553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615554 = header.getOrDefault("X-Amz-Signature")
  valid_615554 = validateParameter(valid_615554, JString, required = false,
                                 default = nil)
  if valid_615554 != nil:
    section.add "X-Amz-Signature", valid_615554
  var valid_615555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615555 = validateParameter(valid_615555, JString, required = false,
                                 default = nil)
  if valid_615555 != nil:
    section.add "X-Amz-Content-Sha256", valid_615555
  var valid_615556 = header.getOrDefault("X-Amz-Date")
  valid_615556 = validateParameter(valid_615556, JString, required = false,
                                 default = nil)
  if valid_615556 != nil:
    section.add "X-Amz-Date", valid_615556
  var valid_615557 = header.getOrDefault("X-Amz-Credential")
  valid_615557 = validateParameter(valid_615557, JString, required = false,
                                 default = nil)
  if valid_615557 != nil:
    section.add "X-Amz-Credential", valid_615557
  var valid_615558 = header.getOrDefault("X-Amz-Security-Token")
  valid_615558 = validateParameter(valid_615558, JString, required = false,
                                 default = nil)
  if valid_615558 != nil:
    section.add "X-Amz-Security-Token", valid_615558
  var valid_615559 = header.getOrDefault("X-Amz-Algorithm")
  valid_615559 = validateParameter(valid_615559, JString, required = false,
                                 default = nil)
  if valid_615559 != nil:
    section.add "X-Amz-Algorithm", valid_615559
  var valid_615560 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615560 = validateParameter(valid_615560, JString, required = false,
                                 default = nil)
  if valid_615560 != nil:
    section.add "X-Amz-SignedHeaders", valid_615560
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  section = newJObject()
  var valid_615561 = formData.getOrDefault("SnsTopicArn")
  valid_615561 = validateParameter(valid_615561, JString, required = false,
                                 default = nil)
  if valid_615561 != nil:
    section.add "SnsTopicArn", valid_615561
  var valid_615562 = formData.getOrDefault("Enabled")
  valid_615562 = validateParameter(valid_615562, JBool, required = false, default = nil)
  if valid_615562 != nil:
    section.add "Enabled", valid_615562
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_615563 = formData.getOrDefault("SubscriptionName")
  valid_615563 = validateParameter(valid_615563, JString, required = true,
                                 default = nil)
  if valid_615563 != nil:
    section.add "SubscriptionName", valid_615563
  var valid_615564 = formData.getOrDefault("SourceType")
  valid_615564 = validateParameter(valid_615564, JString, required = false,
                                 default = nil)
  if valid_615564 != nil:
    section.add "SourceType", valid_615564
  var valid_615565 = formData.getOrDefault("EventCategories")
  valid_615565 = validateParameter(valid_615565, JArray, required = false,
                                 default = nil)
  if valid_615565 != nil:
    section.add "EventCategories", valid_615565
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615566: Call_PostModifyEventSubscription_615549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_615566.validator(path, query, header, formData, body)
  let scheme = call_615566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615566.url(scheme.get, call_615566.host, call_615566.base,
                         call_615566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615566, url, valid)

proc call*(call_615567: Call_PostModifyEventSubscription_615549;
          SubscriptionName: string; SnsTopicArn: string = ""; Enabled: bool = false;
          SourceType: string = ""; EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615568 = newJObject()
  var formData_615569 = newJObject()
  add(formData_615569, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_615569, "Enabled", newJBool(Enabled))
  add(formData_615569, "SubscriptionName", newJString(SubscriptionName))
  add(formData_615569, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_615569.add "EventCategories", EventCategories
  add(query_615568, "Action", newJString(Action))
  add(query_615568, "Version", newJString(Version))
  result = call_615567.call(nil, query_615568, nil, formData_615569, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_615549(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_615550, base: "/",
    url: url_PostModifyEventSubscription_615551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_615529 = ref object of OpenApiRestCall_610658
proc url_GetModifyEventSubscription_615531(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_615530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_615532 = query.getOrDefault("SourceType")
  valid_615532 = validateParameter(valid_615532, JString, required = false,
                                 default = nil)
  if valid_615532 != nil:
    section.add "SourceType", valid_615532
  var valid_615533 = query.getOrDefault("Enabled")
  valid_615533 = validateParameter(valid_615533, JBool, required = false, default = nil)
  if valid_615533 != nil:
    section.add "Enabled", valid_615533
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_615534 = query.getOrDefault("SubscriptionName")
  valid_615534 = validateParameter(valid_615534, JString, required = true,
                                 default = nil)
  if valid_615534 != nil:
    section.add "SubscriptionName", valid_615534
  var valid_615535 = query.getOrDefault("EventCategories")
  valid_615535 = validateParameter(valid_615535, JArray, required = false,
                                 default = nil)
  if valid_615535 != nil:
    section.add "EventCategories", valid_615535
  var valid_615536 = query.getOrDefault("Action")
  valid_615536 = validateParameter(valid_615536, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_615536 != nil:
    section.add "Action", valid_615536
  var valid_615537 = query.getOrDefault("SnsTopicArn")
  valid_615537 = validateParameter(valid_615537, JString, required = false,
                                 default = nil)
  if valid_615537 != nil:
    section.add "SnsTopicArn", valid_615537
  var valid_615538 = query.getOrDefault("Version")
  valid_615538 = validateParameter(valid_615538, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615538 != nil:
    section.add "Version", valid_615538
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615539 = header.getOrDefault("X-Amz-Signature")
  valid_615539 = validateParameter(valid_615539, JString, required = false,
                                 default = nil)
  if valid_615539 != nil:
    section.add "X-Amz-Signature", valid_615539
  var valid_615540 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615540 = validateParameter(valid_615540, JString, required = false,
                                 default = nil)
  if valid_615540 != nil:
    section.add "X-Amz-Content-Sha256", valid_615540
  var valid_615541 = header.getOrDefault("X-Amz-Date")
  valid_615541 = validateParameter(valid_615541, JString, required = false,
                                 default = nil)
  if valid_615541 != nil:
    section.add "X-Amz-Date", valid_615541
  var valid_615542 = header.getOrDefault("X-Amz-Credential")
  valid_615542 = validateParameter(valid_615542, JString, required = false,
                                 default = nil)
  if valid_615542 != nil:
    section.add "X-Amz-Credential", valid_615542
  var valid_615543 = header.getOrDefault("X-Amz-Security-Token")
  valid_615543 = validateParameter(valid_615543, JString, required = false,
                                 default = nil)
  if valid_615543 != nil:
    section.add "X-Amz-Security-Token", valid_615543
  var valid_615544 = header.getOrDefault("X-Amz-Algorithm")
  valid_615544 = validateParameter(valid_615544, JString, required = false,
                                 default = nil)
  if valid_615544 != nil:
    section.add "X-Amz-Algorithm", valid_615544
  var valid_615545 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615545 = validateParameter(valid_615545, JString, required = false,
                                 default = nil)
  if valid_615545 != nil:
    section.add "X-Amz-SignedHeaders", valid_615545
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615546: Call_GetModifyEventSubscription_615529; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_615546.validator(path, query, header, formData, body)
  let scheme = call_615546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615546.url(scheme.get, call_615546.host, call_615546.base,
                         call_615546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615546, url, valid)

proc call*(call_615547: Call_GetModifyEventSubscription_615529;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_615548 = newJObject()
  add(query_615548, "SourceType", newJString(SourceType))
  add(query_615548, "Enabled", newJBool(Enabled))
  add(query_615548, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_615548.add "EventCategories", EventCategories
  add(query_615548, "Action", newJString(Action))
  add(query_615548, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_615548, "Version", newJString(Version))
  result = call_615547.call(nil, query_615548, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_615529(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_615530, base: "/",
    url: url_GetModifyEventSubscription_615531,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyGlobalCluster_615588 = ref object of OpenApiRestCall_610658
proc url_PostModifyGlobalCluster_615590(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyGlobalCluster_615589(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615591 = query.getOrDefault("Action")
  valid_615591 = validateParameter(valid_615591, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_615591 != nil:
    section.add "Action", valid_615591
  var valid_615592 = query.getOrDefault("Version")
  valid_615592 = validateParameter(valid_615592, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615592 != nil:
    section.add "Version", valid_615592
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615593 = header.getOrDefault("X-Amz-Signature")
  valid_615593 = validateParameter(valid_615593, JString, required = false,
                                 default = nil)
  if valid_615593 != nil:
    section.add "X-Amz-Signature", valid_615593
  var valid_615594 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615594 = validateParameter(valid_615594, JString, required = false,
                                 default = nil)
  if valid_615594 != nil:
    section.add "X-Amz-Content-Sha256", valid_615594
  var valid_615595 = header.getOrDefault("X-Amz-Date")
  valid_615595 = validateParameter(valid_615595, JString, required = false,
                                 default = nil)
  if valid_615595 != nil:
    section.add "X-Amz-Date", valid_615595
  var valid_615596 = header.getOrDefault("X-Amz-Credential")
  valid_615596 = validateParameter(valid_615596, JString, required = false,
                                 default = nil)
  if valid_615596 != nil:
    section.add "X-Amz-Credential", valid_615596
  var valid_615597 = header.getOrDefault("X-Amz-Security-Token")
  valid_615597 = validateParameter(valid_615597, JString, required = false,
                                 default = nil)
  if valid_615597 != nil:
    section.add "X-Amz-Security-Token", valid_615597
  var valid_615598 = header.getOrDefault("X-Amz-Algorithm")
  valid_615598 = validateParameter(valid_615598, JString, required = false,
                                 default = nil)
  if valid_615598 != nil:
    section.add "X-Amz-Algorithm", valid_615598
  var valid_615599 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615599 = validateParameter(valid_615599, JString, required = false,
                                 default = nil)
  if valid_615599 != nil:
    section.add "X-Amz-SignedHeaders", valid_615599
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_615600 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_615600 = validateParameter(valid_615600, JString, required = false,
                                 default = nil)
  if valid_615600 != nil:
    section.add "GlobalClusterIdentifier", valid_615600
  var valid_615601 = formData.getOrDefault("DeletionProtection")
  valid_615601 = validateParameter(valid_615601, JBool, required = false, default = nil)
  if valid_615601 != nil:
    section.add "DeletionProtection", valid_615601
  var valid_615602 = formData.getOrDefault("NewGlobalClusterIdentifier")
  valid_615602 = validateParameter(valid_615602, JString, required = false,
                                 default = nil)
  if valid_615602 != nil:
    section.add "NewGlobalClusterIdentifier", valid_615602
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615603: Call_PostModifyGlobalCluster_615588; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615603.validator(path, query, header, formData, body)
  let scheme = call_615603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615603.url(scheme.get, call_615603.host, call_615603.base,
                         call_615603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615603, url, valid)

proc call*(call_615604: Call_PostModifyGlobalCluster_615588;
          GlobalClusterIdentifier: string = "";
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31";
          DeletionProtection: bool = false; NewGlobalClusterIdentifier: string = ""): Recallable =
  ## postModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  var query_615605 = newJObject()
  var formData_615606 = newJObject()
  add(formData_615606, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_615605, "Action", newJString(Action))
  add(query_615605, "Version", newJString(Version))
  add(formData_615606, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_615606, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  result = call_615604.call(nil, query_615605, nil, formData_615606, nil)

var postModifyGlobalCluster* = Call_PostModifyGlobalCluster_615588(
    name: "postModifyGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_PostModifyGlobalCluster_615589, base: "/",
    url: url_PostModifyGlobalCluster_615590, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyGlobalCluster_615570 = ref object of OpenApiRestCall_610658
proc url_GetModifyGlobalCluster_615572(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyGlobalCluster_615571(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615573 = query.getOrDefault("NewGlobalClusterIdentifier")
  valid_615573 = validateParameter(valid_615573, JString, required = false,
                                 default = nil)
  if valid_615573 != nil:
    section.add "NewGlobalClusterIdentifier", valid_615573
  var valid_615574 = query.getOrDefault("GlobalClusterIdentifier")
  valid_615574 = validateParameter(valid_615574, JString, required = false,
                                 default = nil)
  if valid_615574 != nil:
    section.add "GlobalClusterIdentifier", valid_615574
  var valid_615575 = query.getOrDefault("DeletionProtection")
  valid_615575 = validateParameter(valid_615575, JBool, required = false, default = nil)
  if valid_615575 != nil:
    section.add "DeletionProtection", valid_615575
  var valid_615576 = query.getOrDefault("Action")
  valid_615576 = validateParameter(valid_615576, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_615576 != nil:
    section.add "Action", valid_615576
  var valid_615577 = query.getOrDefault("Version")
  valid_615577 = validateParameter(valid_615577, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615577 != nil:
    section.add "Version", valid_615577
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615578 = header.getOrDefault("X-Amz-Signature")
  valid_615578 = validateParameter(valid_615578, JString, required = false,
                                 default = nil)
  if valid_615578 != nil:
    section.add "X-Amz-Signature", valid_615578
  var valid_615579 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615579 = validateParameter(valid_615579, JString, required = false,
                                 default = nil)
  if valid_615579 != nil:
    section.add "X-Amz-Content-Sha256", valid_615579
  var valid_615580 = header.getOrDefault("X-Amz-Date")
  valid_615580 = validateParameter(valid_615580, JString, required = false,
                                 default = nil)
  if valid_615580 != nil:
    section.add "X-Amz-Date", valid_615580
  var valid_615581 = header.getOrDefault("X-Amz-Credential")
  valid_615581 = validateParameter(valid_615581, JString, required = false,
                                 default = nil)
  if valid_615581 != nil:
    section.add "X-Amz-Credential", valid_615581
  var valid_615582 = header.getOrDefault("X-Amz-Security-Token")
  valid_615582 = validateParameter(valid_615582, JString, required = false,
                                 default = nil)
  if valid_615582 != nil:
    section.add "X-Amz-Security-Token", valid_615582
  var valid_615583 = header.getOrDefault("X-Amz-Algorithm")
  valid_615583 = validateParameter(valid_615583, JString, required = false,
                                 default = nil)
  if valid_615583 != nil:
    section.add "X-Amz-Algorithm", valid_615583
  var valid_615584 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615584 = validateParameter(valid_615584, JString, required = false,
                                 default = nil)
  if valid_615584 != nil:
    section.add "X-Amz-SignedHeaders", valid_615584
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615585: Call_GetModifyGlobalCluster_615570; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615585.validator(path, query, header, formData, body)
  let scheme = call_615585.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615585.url(scheme.get, call_615585.host, call_615585.base,
                         call_615585.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615585, url, valid)

proc call*(call_615586: Call_GetModifyGlobalCluster_615570;
          NewGlobalClusterIdentifier: string = "";
          GlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615587 = newJObject()
  add(query_615587, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_615587, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_615587, "DeletionProtection", newJBool(DeletionProtection))
  add(query_615587, "Action", newJString(Action))
  add(query_615587, "Version", newJString(Version))
  result = call_615586.call(nil, query_615587, nil, nil, nil)

var getModifyGlobalCluster* = Call_GetModifyGlobalCluster_615570(
    name: "getModifyGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_GetModifyGlobalCluster_615571, base: "/",
    url: url_GetModifyGlobalCluster_615572, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyOptionGroup_615626 = ref object of OpenApiRestCall_610658
proc url_PostModifyOptionGroup_615628(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyOptionGroup_615627(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615629 = query.getOrDefault("Action")
  valid_615629 = validateParameter(valid_615629, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_615629 != nil:
    section.add "Action", valid_615629
  var valid_615630 = query.getOrDefault("Version")
  valid_615630 = validateParameter(valid_615630, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615630 != nil:
    section.add "Version", valid_615630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615631 = header.getOrDefault("X-Amz-Signature")
  valid_615631 = validateParameter(valid_615631, JString, required = false,
                                 default = nil)
  if valid_615631 != nil:
    section.add "X-Amz-Signature", valid_615631
  var valid_615632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615632 = validateParameter(valid_615632, JString, required = false,
                                 default = nil)
  if valid_615632 != nil:
    section.add "X-Amz-Content-Sha256", valid_615632
  var valid_615633 = header.getOrDefault("X-Amz-Date")
  valid_615633 = validateParameter(valid_615633, JString, required = false,
                                 default = nil)
  if valid_615633 != nil:
    section.add "X-Amz-Date", valid_615633
  var valid_615634 = header.getOrDefault("X-Amz-Credential")
  valid_615634 = validateParameter(valid_615634, JString, required = false,
                                 default = nil)
  if valid_615634 != nil:
    section.add "X-Amz-Credential", valid_615634
  var valid_615635 = header.getOrDefault("X-Amz-Security-Token")
  valid_615635 = validateParameter(valid_615635, JString, required = false,
                                 default = nil)
  if valid_615635 != nil:
    section.add "X-Amz-Security-Token", valid_615635
  var valid_615636 = header.getOrDefault("X-Amz-Algorithm")
  valid_615636 = validateParameter(valid_615636, JString, required = false,
                                 default = nil)
  if valid_615636 != nil:
    section.add "X-Amz-Algorithm", valid_615636
  var valid_615637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615637 = validateParameter(valid_615637, JString, required = false,
                                 default = nil)
  if valid_615637 != nil:
    section.add "X-Amz-SignedHeaders", valid_615637
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  section = newJObject()
  var valid_615638 = formData.getOrDefault("OptionsToRemove")
  valid_615638 = validateParameter(valid_615638, JArray, required = false,
                                 default = nil)
  if valid_615638 != nil:
    section.add "OptionsToRemove", valid_615638
  var valid_615639 = formData.getOrDefault("ApplyImmediately")
  valid_615639 = validateParameter(valid_615639, JBool, required = false, default = nil)
  if valid_615639 != nil:
    section.add "ApplyImmediately", valid_615639
  var valid_615640 = formData.getOrDefault("OptionsToInclude")
  valid_615640 = validateParameter(valid_615640, JArray, required = false,
                                 default = nil)
  if valid_615640 != nil:
    section.add "OptionsToInclude", valid_615640
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_615641 = formData.getOrDefault("OptionGroupName")
  valid_615641 = validateParameter(valid_615641, JString, required = true,
                                 default = nil)
  if valid_615641 != nil:
    section.add "OptionGroupName", valid_615641
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615642: Call_PostModifyOptionGroup_615626; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_615642.validator(path, query, header, formData, body)
  let scheme = call_615642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615642.url(scheme.get, call_615642.host, call_615642.base,
                         call_615642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615642, url, valid)

proc call*(call_615643: Call_PostModifyOptionGroup_615626; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_615644 = newJObject()
  var formData_615645 = newJObject()
  if OptionsToRemove != nil:
    formData_615645.add "OptionsToRemove", OptionsToRemove
  add(formData_615645, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToInclude != nil:
    formData_615645.add "OptionsToInclude", OptionsToInclude
  add(query_615644, "Action", newJString(Action))
  add(formData_615645, "OptionGroupName", newJString(OptionGroupName))
  add(query_615644, "Version", newJString(Version))
  result = call_615643.call(nil, query_615644, nil, formData_615645, nil)

var postModifyOptionGroup* = Call_PostModifyOptionGroup_615626(
    name: "postModifyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_PostModifyOptionGroup_615627, base: "/",
    url: url_PostModifyOptionGroup_615628, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyOptionGroup_615607 = ref object of OpenApiRestCall_610658
proc url_GetModifyOptionGroup_615609(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyOptionGroup_615608(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615610 = query.getOrDefault("Action")
  valid_615610 = validateParameter(valid_615610, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_615610 != nil:
    section.add "Action", valid_615610
  var valid_615611 = query.getOrDefault("ApplyImmediately")
  valid_615611 = validateParameter(valid_615611, JBool, required = false, default = nil)
  if valid_615611 != nil:
    section.add "ApplyImmediately", valid_615611
  var valid_615612 = query.getOrDefault("OptionsToRemove")
  valid_615612 = validateParameter(valid_615612, JArray, required = false,
                                 default = nil)
  if valid_615612 != nil:
    section.add "OptionsToRemove", valid_615612
  var valid_615613 = query.getOrDefault("OptionsToInclude")
  valid_615613 = validateParameter(valid_615613, JArray, required = false,
                                 default = nil)
  if valid_615613 != nil:
    section.add "OptionsToInclude", valid_615613
  var valid_615614 = query.getOrDefault("OptionGroupName")
  valid_615614 = validateParameter(valid_615614, JString, required = true,
                                 default = nil)
  if valid_615614 != nil:
    section.add "OptionGroupName", valid_615614
  var valid_615615 = query.getOrDefault("Version")
  valid_615615 = validateParameter(valid_615615, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615615 != nil:
    section.add "Version", valid_615615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615616 = header.getOrDefault("X-Amz-Signature")
  valid_615616 = validateParameter(valid_615616, JString, required = false,
                                 default = nil)
  if valid_615616 != nil:
    section.add "X-Amz-Signature", valid_615616
  var valid_615617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615617 = validateParameter(valid_615617, JString, required = false,
                                 default = nil)
  if valid_615617 != nil:
    section.add "X-Amz-Content-Sha256", valid_615617
  var valid_615618 = header.getOrDefault("X-Amz-Date")
  valid_615618 = validateParameter(valid_615618, JString, required = false,
                                 default = nil)
  if valid_615618 != nil:
    section.add "X-Amz-Date", valid_615618
  var valid_615619 = header.getOrDefault("X-Amz-Credential")
  valid_615619 = validateParameter(valid_615619, JString, required = false,
                                 default = nil)
  if valid_615619 != nil:
    section.add "X-Amz-Credential", valid_615619
  var valid_615620 = header.getOrDefault("X-Amz-Security-Token")
  valid_615620 = validateParameter(valid_615620, JString, required = false,
                                 default = nil)
  if valid_615620 != nil:
    section.add "X-Amz-Security-Token", valid_615620
  var valid_615621 = header.getOrDefault("X-Amz-Algorithm")
  valid_615621 = validateParameter(valid_615621, JString, required = false,
                                 default = nil)
  if valid_615621 != nil:
    section.add "X-Amz-Algorithm", valid_615621
  var valid_615622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615622 = validateParameter(valid_615622, JString, required = false,
                                 default = nil)
  if valid_615622 != nil:
    section.add "X-Amz-SignedHeaders", valid_615622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615623: Call_GetModifyOptionGroup_615607; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_615623.validator(path, query, header, formData, body)
  let scheme = call_615623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615623.url(scheme.get, call_615623.host, call_615623.base,
                         call_615623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615623, url, valid)

proc call*(call_615624: Call_GetModifyOptionGroup_615607; OptionGroupName: string;
          Action: string = "ModifyOptionGroup"; ApplyImmediately: bool = false;
          OptionsToRemove: JsonNode = nil; OptionsToInclude: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyOptionGroup
  ## Modifies an existing option group.
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_615625 = newJObject()
  add(query_615625, "Action", newJString(Action))
  add(query_615625, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToRemove != nil:
    query_615625.add "OptionsToRemove", OptionsToRemove
  if OptionsToInclude != nil:
    query_615625.add "OptionsToInclude", OptionsToInclude
  add(query_615625, "OptionGroupName", newJString(OptionGroupName))
  add(query_615625, "Version", newJString(Version))
  result = call_615624.call(nil, query_615625, nil, nil, nil)

var getModifyOptionGroup* = Call_GetModifyOptionGroup_615607(
    name: "getModifyOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_GetModifyOptionGroup_615608, base: "/",
    url: url_GetModifyOptionGroup_615609, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplica_615664 = ref object of OpenApiRestCall_610658
proc url_PostPromoteReadReplica_615666(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplica_615665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615667 = query.getOrDefault("Action")
  valid_615667 = validateParameter(valid_615667, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_615667 != nil:
    section.add "Action", valid_615667
  var valid_615668 = query.getOrDefault("Version")
  valid_615668 = validateParameter(valid_615668, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615668 != nil:
    section.add "Version", valid_615668
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615669 = header.getOrDefault("X-Amz-Signature")
  valid_615669 = validateParameter(valid_615669, JString, required = false,
                                 default = nil)
  if valid_615669 != nil:
    section.add "X-Amz-Signature", valid_615669
  var valid_615670 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615670 = validateParameter(valid_615670, JString, required = false,
                                 default = nil)
  if valid_615670 != nil:
    section.add "X-Amz-Content-Sha256", valid_615670
  var valid_615671 = header.getOrDefault("X-Amz-Date")
  valid_615671 = validateParameter(valid_615671, JString, required = false,
                                 default = nil)
  if valid_615671 != nil:
    section.add "X-Amz-Date", valid_615671
  var valid_615672 = header.getOrDefault("X-Amz-Credential")
  valid_615672 = validateParameter(valid_615672, JString, required = false,
                                 default = nil)
  if valid_615672 != nil:
    section.add "X-Amz-Credential", valid_615672
  var valid_615673 = header.getOrDefault("X-Amz-Security-Token")
  valid_615673 = validateParameter(valid_615673, JString, required = false,
                                 default = nil)
  if valid_615673 != nil:
    section.add "X-Amz-Security-Token", valid_615673
  var valid_615674 = header.getOrDefault("X-Amz-Algorithm")
  valid_615674 = validateParameter(valid_615674, JString, required = false,
                                 default = nil)
  if valid_615674 != nil:
    section.add "X-Amz-Algorithm", valid_615674
  var valid_615675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615675 = validateParameter(valid_615675, JString, required = false,
                                 default = nil)
  if valid_615675 != nil:
    section.add "X-Amz-SignedHeaders", valid_615675
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  section = newJObject()
  var valid_615676 = formData.getOrDefault("PreferredBackupWindow")
  valid_615676 = validateParameter(valid_615676, JString, required = false,
                                 default = nil)
  if valid_615676 != nil:
    section.add "PreferredBackupWindow", valid_615676
  var valid_615677 = formData.getOrDefault("BackupRetentionPeriod")
  valid_615677 = validateParameter(valid_615677, JInt, required = false, default = nil)
  if valid_615677 != nil:
    section.add "BackupRetentionPeriod", valid_615677
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_615678 = formData.getOrDefault("DBInstanceIdentifier")
  valid_615678 = validateParameter(valid_615678, JString, required = true,
                                 default = nil)
  if valid_615678 != nil:
    section.add "DBInstanceIdentifier", valid_615678
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615679: Call_PostPromoteReadReplica_615664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_615679.validator(path, query, header, formData, body)
  let scheme = call_615679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615679.url(scheme.get, call_615679.host, call_615679.base,
                         call_615679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615679, url, valid)

proc call*(call_615680: Call_PostPromoteReadReplica_615664;
          DBInstanceIdentifier: string; PreferredBackupWindow: string = "";
          BackupRetentionPeriod: int = 0; Action: string = "PromoteReadReplica";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615681 = newJObject()
  var formData_615682 = newJObject()
  add(formData_615682, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_615682, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_615682, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615681, "Action", newJString(Action))
  add(query_615681, "Version", newJString(Version))
  result = call_615680.call(nil, query_615681, nil, formData_615682, nil)

var postPromoteReadReplica* = Call_PostPromoteReadReplica_615664(
    name: "postPromoteReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_PostPromoteReadReplica_615665, base: "/",
    url: url_PostPromoteReadReplica_615666, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplica_615646 = ref object of OpenApiRestCall_610658
proc url_GetPromoteReadReplica_615648(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplica_615647(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_615649 = query.getOrDefault("DBInstanceIdentifier")
  valid_615649 = validateParameter(valid_615649, JString, required = true,
                                 default = nil)
  if valid_615649 != nil:
    section.add "DBInstanceIdentifier", valid_615649
  var valid_615650 = query.getOrDefault("BackupRetentionPeriod")
  valid_615650 = validateParameter(valid_615650, JInt, required = false, default = nil)
  if valid_615650 != nil:
    section.add "BackupRetentionPeriod", valid_615650
  var valid_615651 = query.getOrDefault("Action")
  valid_615651 = validateParameter(valid_615651, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_615651 != nil:
    section.add "Action", valid_615651
  var valid_615652 = query.getOrDefault("Version")
  valid_615652 = validateParameter(valid_615652, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615652 != nil:
    section.add "Version", valid_615652
  var valid_615653 = query.getOrDefault("PreferredBackupWindow")
  valid_615653 = validateParameter(valid_615653, JString, required = false,
                                 default = nil)
  if valid_615653 != nil:
    section.add "PreferredBackupWindow", valid_615653
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615654 = header.getOrDefault("X-Amz-Signature")
  valid_615654 = validateParameter(valid_615654, JString, required = false,
                                 default = nil)
  if valid_615654 != nil:
    section.add "X-Amz-Signature", valid_615654
  var valid_615655 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615655 = validateParameter(valid_615655, JString, required = false,
                                 default = nil)
  if valid_615655 != nil:
    section.add "X-Amz-Content-Sha256", valid_615655
  var valid_615656 = header.getOrDefault("X-Amz-Date")
  valid_615656 = validateParameter(valid_615656, JString, required = false,
                                 default = nil)
  if valid_615656 != nil:
    section.add "X-Amz-Date", valid_615656
  var valid_615657 = header.getOrDefault("X-Amz-Credential")
  valid_615657 = validateParameter(valid_615657, JString, required = false,
                                 default = nil)
  if valid_615657 != nil:
    section.add "X-Amz-Credential", valid_615657
  var valid_615658 = header.getOrDefault("X-Amz-Security-Token")
  valid_615658 = validateParameter(valid_615658, JString, required = false,
                                 default = nil)
  if valid_615658 != nil:
    section.add "X-Amz-Security-Token", valid_615658
  var valid_615659 = header.getOrDefault("X-Amz-Algorithm")
  valid_615659 = validateParameter(valid_615659, JString, required = false,
                                 default = nil)
  if valid_615659 != nil:
    section.add "X-Amz-Algorithm", valid_615659
  var valid_615660 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615660 = validateParameter(valid_615660, JString, required = false,
                                 default = nil)
  if valid_615660 != nil:
    section.add "X-Amz-SignedHeaders", valid_615660
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615661: Call_GetPromoteReadReplica_615646; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_615661.validator(path, query, header, formData, body)
  let scheme = call_615661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615661.url(scheme.get, call_615661.host, call_615661.base,
                         call_615661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615661, url, valid)

proc call*(call_615662: Call_GetPromoteReadReplica_615646;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; Version: string = "2014-10-31";
          PreferredBackupWindow: string = ""): Recallable =
  ## getPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  var query_615663 = newJObject()
  add(query_615663, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615663, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_615663, "Action", newJString(Action))
  add(query_615663, "Version", newJString(Version))
  add(query_615663, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  result = call_615662.call(nil, query_615663, nil, nil, nil)

var getPromoteReadReplica* = Call_GetPromoteReadReplica_615646(
    name: "getPromoteReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_GetPromoteReadReplica_615647, base: "/",
    url: url_GetPromoteReadReplica_615648, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_615699 = ref object of OpenApiRestCall_610658
proc url_PostPromoteReadReplicaDBCluster_615701(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_615700(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615702 = query.getOrDefault("Action")
  valid_615702 = validateParameter(valid_615702, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_615702 != nil:
    section.add "Action", valid_615702
  var valid_615703 = query.getOrDefault("Version")
  valid_615703 = validateParameter(valid_615703, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615703 != nil:
    section.add "Version", valid_615703
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615704 = header.getOrDefault("X-Amz-Signature")
  valid_615704 = validateParameter(valid_615704, JString, required = false,
                                 default = nil)
  if valid_615704 != nil:
    section.add "X-Amz-Signature", valid_615704
  var valid_615705 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615705 = validateParameter(valid_615705, JString, required = false,
                                 default = nil)
  if valid_615705 != nil:
    section.add "X-Amz-Content-Sha256", valid_615705
  var valid_615706 = header.getOrDefault("X-Amz-Date")
  valid_615706 = validateParameter(valid_615706, JString, required = false,
                                 default = nil)
  if valid_615706 != nil:
    section.add "X-Amz-Date", valid_615706
  var valid_615707 = header.getOrDefault("X-Amz-Credential")
  valid_615707 = validateParameter(valid_615707, JString, required = false,
                                 default = nil)
  if valid_615707 != nil:
    section.add "X-Amz-Credential", valid_615707
  var valid_615708 = header.getOrDefault("X-Amz-Security-Token")
  valid_615708 = validateParameter(valid_615708, JString, required = false,
                                 default = nil)
  if valid_615708 != nil:
    section.add "X-Amz-Security-Token", valid_615708
  var valid_615709 = header.getOrDefault("X-Amz-Algorithm")
  valid_615709 = validateParameter(valid_615709, JString, required = false,
                                 default = nil)
  if valid_615709 != nil:
    section.add "X-Amz-Algorithm", valid_615709
  var valid_615710 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615710 = validateParameter(valid_615710, JString, required = false,
                                 default = nil)
  if valid_615710 != nil:
    section.add "X-Amz-SignedHeaders", valid_615710
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_615711 = formData.getOrDefault("DBClusterIdentifier")
  valid_615711 = validateParameter(valid_615711, JString, required = true,
                                 default = nil)
  if valid_615711 != nil:
    section.add "DBClusterIdentifier", valid_615711
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615712: Call_PostPromoteReadReplicaDBCluster_615699;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615712.validator(path, query, header, formData, body)
  let scheme = call_615712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615712.url(scheme.get, call_615712.host, call_615712.base,
                         call_615712.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615712, url, valid)

proc call*(call_615713: Call_PostPromoteReadReplicaDBCluster_615699;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  var query_615714 = newJObject()
  var formData_615715 = newJObject()
  add(query_615714, "Action", newJString(Action))
  add(query_615714, "Version", newJString(Version))
  add(formData_615715, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_615713.call(nil, query_615714, nil, formData_615715, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_615699(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_615700, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_615701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_615683 = ref object of OpenApiRestCall_610658
proc url_GetPromoteReadReplicaDBCluster_615685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_615684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_615686 = query.getOrDefault("DBClusterIdentifier")
  valid_615686 = validateParameter(valid_615686, JString, required = true,
                                 default = nil)
  if valid_615686 != nil:
    section.add "DBClusterIdentifier", valid_615686
  var valid_615687 = query.getOrDefault("Action")
  valid_615687 = validateParameter(valid_615687, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_615687 != nil:
    section.add "Action", valid_615687
  var valid_615688 = query.getOrDefault("Version")
  valid_615688 = validateParameter(valid_615688, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615688 != nil:
    section.add "Version", valid_615688
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615689 = header.getOrDefault("X-Amz-Signature")
  valid_615689 = validateParameter(valid_615689, JString, required = false,
                                 default = nil)
  if valid_615689 != nil:
    section.add "X-Amz-Signature", valid_615689
  var valid_615690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615690 = validateParameter(valid_615690, JString, required = false,
                                 default = nil)
  if valid_615690 != nil:
    section.add "X-Amz-Content-Sha256", valid_615690
  var valid_615691 = header.getOrDefault("X-Amz-Date")
  valid_615691 = validateParameter(valid_615691, JString, required = false,
                                 default = nil)
  if valid_615691 != nil:
    section.add "X-Amz-Date", valid_615691
  var valid_615692 = header.getOrDefault("X-Amz-Credential")
  valid_615692 = validateParameter(valid_615692, JString, required = false,
                                 default = nil)
  if valid_615692 != nil:
    section.add "X-Amz-Credential", valid_615692
  var valid_615693 = header.getOrDefault("X-Amz-Security-Token")
  valid_615693 = validateParameter(valid_615693, JString, required = false,
                                 default = nil)
  if valid_615693 != nil:
    section.add "X-Amz-Security-Token", valid_615693
  var valid_615694 = header.getOrDefault("X-Amz-Algorithm")
  valid_615694 = validateParameter(valid_615694, JString, required = false,
                                 default = nil)
  if valid_615694 != nil:
    section.add "X-Amz-Algorithm", valid_615694
  var valid_615695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615695 = validateParameter(valid_615695, JString, required = false,
                                 default = nil)
  if valid_615695 != nil:
    section.add "X-Amz-SignedHeaders", valid_615695
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615696: Call_GetPromoteReadReplicaDBCluster_615683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615696.validator(path, query, header, formData, body)
  let scheme = call_615696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615696.url(scheme.get, call_615696.host, call_615696.base,
                         call_615696.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615696, url, valid)

proc call*(call_615697: Call_GetPromoteReadReplicaDBCluster_615683;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615698 = newJObject()
  add(query_615698, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615698, "Action", newJString(Action))
  add(query_615698, "Version", newJString(Version))
  result = call_615697.call(nil, query_615698, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_615683(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_615684, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_615685,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedDBInstancesOffering_615735 = ref object of OpenApiRestCall_610658
proc url_PostPurchaseReservedDBInstancesOffering_615737(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPurchaseReservedDBInstancesOffering_615736(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615738 = query.getOrDefault("Action")
  valid_615738 = validateParameter(valid_615738, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_615738 != nil:
    section.add "Action", valid_615738
  var valid_615739 = query.getOrDefault("Version")
  valid_615739 = validateParameter(valid_615739, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615739 != nil:
    section.add "Version", valid_615739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615740 = header.getOrDefault("X-Amz-Signature")
  valid_615740 = validateParameter(valid_615740, JString, required = false,
                                 default = nil)
  if valid_615740 != nil:
    section.add "X-Amz-Signature", valid_615740
  var valid_615741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615741 = validateParameter(valid_615741, JString, required = false,
                                 default = nil)
  if valid_615741 != nil:
    section.add "X-Amz-Content-Sha256", valid_615741
  var valid_615742 = header.getOrDefault("X-Amz-Date")
  valid_615742 = validateParameter(valid_615742, JString, required = false,
                                 default = nil)
  if valid_615742 != nil:
    section.add "X-Amz-Date", valid_615742
  var valid_615743 = header.getOrDefault("X-Amz-Credential")
  valid_615743 = validateParameter(valid_615743, JString, required = false,
                                 default = nil)
  if valid_615743 != nil:
    section.add "X-Amz-Credential", valid_615743
  var valid_615744 = header.getOrDefault("X-Amz-Security-Token")
  valid_615744 = validateParameter(valid_615744, JString, required = false,
                                 default = nil)
  if valid_615744 != nil:
    section.add "X-Amz-Security-Token", valid_615744
  var valid_615745 = header.getOrDefault("X-Amz-Algorithm")
  valid_615745 = validateParameter(valid_615745, JString, required = false,
                                 default = nil)
  if valid_615745 != nil:
    section.add "X-Amz-Algorithm", valid_615745
  var valid_615746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615746 = validateParameter(valid_615746, JString, required = false,
                                 default = nil)
  if valid_615746 != nil:
    section.add "X-Amz-SignedHeaders", valid_615746
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  section = newJObject()
  var valid_615747 = formData.getOrDefault("ReservedDBInstanceId")
  valid_615747 = validateParameter(valid_615747, JString, required = false,
                                 default = nil)
  if valid_615747 != nil:
    section.add "ReservedDBInstanceId", valid_615747
  var valid_615748 = formData.getOrDefault("Tags")
  valid_615748 = validateParameter(valid_615748, JArray, required = false,
                                 default = nil)
  if valid_615748 != nil:
    section.add "Tags", valid_615748
  assert formData != nil, "formData argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_615749 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_615749 = validateParameter(valid_615749, JString, required = true,
                                 default = nil)
  if valid_615749 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_615749
  var valid_615750 = formData.getOrDefault("DBInstanceCount")
  valid_615750 = validateParameter(valid_615750, JInt, required = false, default = nil)
  if valid_615750 != nil:
    section.add "DBInstanceCount", valid_615750
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615751: Call_PostPurchaseReservedDBInstancesOffering_615735;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_615751.validator(path, query, header, formData, body)
  let scheme = call_615751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615751.url(scheme.get, call_615751.host, call_615751.base,
                         call_615751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615751, url, valid)

proc call*(call_615752: Call_PostPurchaseReservedDBInstancesOffering_615735;
          ReservedDBInstancesOfferingId: string;
          ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Tags: JsonNode = nil; Version: string = "2014-10-31"; DBInstanceCount: int = 0): Recallable =
  ## postPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  var query_615753 = newJObject()
  var formData_615754 = newJObject()
  add(formData_615754, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_615753, "Action", newJString(Action))
  if Tags != nil:
    formData_615754.add "Tags", Tags
  add(formData_615754, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_615753, "Version", newJString(Version))
  add(formData_615754, "DBInstanceCount", newJInt(DBInstanceCount))
  result = call_615752.call(nil, query_615753, nil, formData_615754, nil)

var postPurchaseReservedDBInstancesOffering* = Call_PostPurchaseReservedDBInstancesOffering_615735(
    name: "postPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_PostPurchaseReservedDBInstancesOffering_615736, base: "/",
    url: url_PostPurchaseReservedDBInstancesOffering_615737,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedDBInstancesOffering_615716 = ref object of OpenApiRestCall_610658
proc url_GetPurchaseReservedDBInstancesOffering_615718(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPurchaseReservedDBInstancesOffering_615717(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: JString (required)
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615719 = query.getOrDefault("Tags")
  valid_615719 = validateParameter(valid_615719, JArray, required = false,
                                 default = nil)
  if valid_615719 != nil:
    section.add "Tags", valid_615719
  var valid_615720 = query.getOrDefault("DBInstanceCount")
  valid_615720 = validateParameter(valid_615720, JInt, required = false, default = nil)
  if valid_615720 != nil:
    section.add "DBInstanceCount", valid_615720
  var valid_615721 = query.getOrDefault("ReservedDBInstanceId")
  valid_615721 = validateParameter(valid_615721, JString, required = false,
                                 default = nil)
  if valid_615721 != nil:
    section.add "ReservedDBInstanceId", valid_615721
  var valid_615722 = query.getOrDefault("Action")
  valid_615722 = validateParameter(valid_615722, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_615722 != nil:
    section.add "Action", valid_615722
  var valid_615723 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_615723 = validateParameter(valid_615723, JString, required = true,
                                 default = nil)
  if valid_615723 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_615723
  var valid_615724 = query.getOrDefault("Version")
  valid_615724 = validateParameter(valid_615724, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615724 != nil:
    section.add "Version", valid_615724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615725 = header.getOrDefault("X-Amz-Signature")
  valid_615725 = validateParameter(valid_615725, JString, required = false,
                                 default = nil)
  if valid_615725 != nil:
    section.add "X-Amz-Signature", valid_615725
  var valid_615726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615726 = validateParameter(valid_615726, JString, required = false,
                                 default = nil)
  if valid_615726 != nil:
    section.add "X-Amz-Content-Sha256", valid_615726
  var valid_615727 = header.getOrDefault("X-Amz-Date")
  valid_615727 = validateParameter(valid_615727, JString, required = false,
                                 default = nil)
  if valid_615727 != nil:
    section.add "X-Amz-Date", valid_615727
  var valid_615728 = header.getOrDefault("X-Amz-Credential")
  valid_615728 = validateParameter(valid_615728, JString, required = false,
                                 default = nil)
  if valid_615728 != nil:
    section.add "X-Amz-Credential", valid_615728
  var valid_615729 = header.getOrDefault("X-Amz-Security-Token")
  valid_615729 = validateParameter(valid_615729, JString, required = false,
                                 default = nil)
  if valid_615729 != nil:
    section.add "X-Amz-Security-Token", valid_615729
  var valid_615730 = header.getOrDefault("X-Amz-Algorithm")
  valid_615730 = validateParameter(valid_615730, JString, required = false,
                                 default = nil)
  if valid_615730 != nil:
    section.add "X-Amz-Algorithm", valid_615730
  var valid_615731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615731 = validateParameter(valid_615731, JString, required = false,
                                 default = nil)
  if valid_615731 != nil:
    section.add "X-Amz-SignedHeaders", valid_615731
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615732: Call_GetPurchaseReservedDBInstancesOffering_615716;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_615732.validator(path, query, header, formData, body)
  let scheme = call_615732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615732.url(scheme.get, call_615732.host, call_615732.base,
                         call_615732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615732, url, valid)

proc call*(call_615733: Call_GetPurchaseReservedDBInstancesOffering_615716;
          ReservedDBInstancesOfferingId: string; Tags: JsonNode = nil;
          DBInstanceCount: int = 0; ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## getPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  var query_615734 = newJObject()
  if Tags != nil:
    query_615734.add "Tags", Tags
  add(query_615734, "DBInstanceCount", newJInt(DBInstanceCount))
  add(query_615734, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_615734, "Action", newJString(Action))
  add(query_615734, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_615734, "Version", newJString(Version))
  result = call_615733.call(nil, query_615734, nil, nil, nil)

var getPurchaseReservedDBInstancesOffering* = Call_GetPurchaseReservedDBInstancesOffering_615716(
    name: "getPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_GetPurchaseReservedDBInstancesOffering_615717, base: "/",
    url: url_GetPurchaseReservedDBInstancesOffering_615718,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_615772 = ref object of OpenApiRestCall_610658
proc url_PostRebootDBInstance_615774(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootDBInstance_615773(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615775 = query.getOrDefault("Action")
  valid_615775 = validateParameter(valid_615775, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_615775 != nil:
    section.add "Action", valid_615775
  var valid_615776 = query.getOrDefault("Version")
  valid_615776 = validateParameter(valid_615776, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615776 != nil:
    section.add "Version", valid_615776
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615777 = header.getOrDefault("X-Amz-Signature")
  valid_615777 = validateParameter(valid_615777, JString, required = false,
                                 default = nil)
  if valid_615777 != nil:
    section.add "X-Amz-Signature", valid_615777
  var valid_615778 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615778 = validateParameter(valid_615778, JString, required = false,
                                 default = nil)
  if valid_615778 != nil:
    section.add "X-Amz-Content-Sha256", valid_615778
  var valid_615779 = header.getOrDefault("X-Amz-Date")
  valid_615779 = validateParameter(valid_615779, JString, required = false,
                                 default = nil)
  if valid_615779 != nil:
    section.add "X-Amz-Date", valid_615779
  var valid_615780 = header.getOrDefault("X-Amz-Credential")
  valid_615780 = validateParameter(valid_615780, JString, required = false,
                                 default = nil)
  if valid_615780 != nil:
    section.add "X-Amz-Credential", valid_615780
  var valid_615781 = header.getOrDefault("X-Amz-Security-Token")
  valid_615781 = validateParameter(valid_615781, JString, required = false,
                                 default = nil)
  if valid_615781 != nil:
    section.add "X-Amz-Security-Token", valid_615781
  var valid_615782 = header.getOrDefault("X-Amz-Algorithm")
  valid_615782 = validateParameter(valid_615782, JString, required = false,
                                 default = nil)
  if valid_615782 != nil:
    section.add "X-Amz-Algorithm", valid_615782
  var valid_615783 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615783 = validateParameter(valid_615783, JString, required = false,
                                 default = nil)
  if valid_615783 != nil:
    section.add "X-Amz-SignedHeaders", valid_615783
  result.add "header", section
  ## parameters in `formData` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_615784 = formData.getOrDefault("ForceFailover")
  valid_615784 = validateParameter(valid_615784, JBool, required = false, default = nil)
  if valid_615784 != nil:
    section.add "ForceFailover", valid_615784
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_615785 = formData.getOrDefault("DBInstanceIdentifier")
  valid_615785 = validateParameter(valid_615785, JString, required = true,
                                 default = nil)
  if valid_615785 != nil:
    section.add "DBInstanceIdentifier", valid_615785
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615786: Call_PostRebootDBInstance_615772; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_615786.validator(path, query, header, formData, body)
  let scheme = call_615786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615786.url(scheme.get, call_615786.host, call_615786.base,
                         call_615786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615786, url, valid)

proc call*(call_615787: Call_PostRebootDBInstance_615772;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615788 = newJObject()
  var formData_615789 = newJObject()
  add(formData_615789, "ForceFailover", newJBool(ForceFailover))
  add(formData_615789, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615788, "Action", newJString(Action))
  add(query_615788, "Version", newJString(Version))
  result = call_615787.call(nil, query_615788, nil, formData_615789, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_615772(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_615773, base: "/",
    url: url_PostRebootDBInstance_615774, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_615755 = ref object of OpenApiRestCall_610658
proc url_GetRebootDBInstance_615757(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootDBInstance_615756(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615758 = query.getOrDefault("ForceFailover")
  valid_615758 = validateParameter(valid_615758, JBool, required = false, default = nil)
  if valid_615758 != nil:
    section.add "ForceFailover", valid_615758
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_615759 = query.getOrDefault("DBInstanceIdentifier")
  valid_615759 = validateParameter(valid_615759, JString, required = true,
                                 default = nil)
  if valid_615759 != nil:
    section.add "DBInstanceIdentifier", valid_615759
  var valid_615760 = query.getOrDefault("Action")
  valid_615760 = validateParameter(valid_615760, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_615760 != nil:
    section.add "Action", valid_615760
  var valid_615761 = query.getOrDefault("Version")
  valid_615761 = validateParameter(valid_615761, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615761 != nil:
    section.add "Version", valid_615761
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615762 = header.getOrDefault("X-Amz-Signature")
  valid_615762 = validateParameter(valid_615762, JString, required = false,
                                 default = nil)
  if valid_615762 != nil:
    section.add "X-Amz-Signature", valid_615762
  var valid_615763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615763 = validateParameter(valid_615763, JString, required = false,
                                 default = nil)
  if valid_615763 != nil:
    section.add "X-Amz-Content-Sha256", valid_615763
  var valid_615764 = header.getOrDefault("X-Amz-Date")
  valid_615764 = validateParameter(valid_615764, JString, required = false,
                                 default = nil)
  if valid_615764 != nil:
    section.add "X-Amz-Date", valid_615764
  var valid_615765 = header.getOrDefault("X-Amz-Credential")
  valid_615765 = validateParameter(valid_615765, JString, required = false,
                                 default = nil)
  if valid_615765 != nil:
    section.add "X-Amz-Credential", valid_615765
  var valid_615766 = header.getOrDefault("X-Amz-Security-Token")
  valid_615766 = validateParameter(valid_615766, JString, required = false,
                                 default = nil)
  if valid_615766 != nil:
    section.add "X-Amz-Security-Token", valid_615766
  var valid_615767 = header.getOrDefault("X-Amz-Algorithm")
  valid_615767 = validateParameter(valid_615767, JString, required = false,
                                 default = nil)
  if valid_615767 != nil:
    section.add "X-Amz-Algorithm", valid_615767
  var valid_615768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615768 = validateParameter(valid_615768, JString, required = false,
                                 default = nil)
  if valid_615768 != nil:
    section.add "X-Amz-SignedHeaders", valid_615768
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615769: Call_GetRebootDBInstance_615755; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_615769.validator(path, query, header, formData, body)
  let scheme = call_615769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615769.url(scheme.get, call_615769.host, call_615769.base,
                         call_615769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615769, url, valid)

proc call*(call_615770: Call_GetRebootDBInstance_615755;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615771 = newJObject()
  add(query_615771, "ForceFailover", newJBool(ForceFailover))
  add(query_615771, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615771, "Action", newJString(Action))
  add(query_615771, "Version", newJString(Version))
  result = call_615770.call(nil, query_615771, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_615755(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_615756, base: "/",
    url: url_GetRebootDBInstance_615757, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRegisterDBProxyTargets_615809 = ref object of OpenApiRestCall_610658
proc url_PostRegisterDBProxyTargets_615811(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRegisterDBProxyTargets_615810(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615812 = query.getOrDefault("Action")
  valid_615812 = validateParameter(valid_615812, JString, required = true,
                                 default = newJString("RegisterDBProxyTargets"))
  if valid_615812 != nil:
    section.add "Action", valid_615812
  var valid_615813 = query.getOrDefault("Version")
  valid_615813 = validateParameter(valid_615813, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615813 != nil:
    section.add "Version", valid_615813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615814 = header.getOrDefault("X-Amz-Signature")
  valid_615814 = validateParameter(valid_615814, JString, required = false,
                                 default = nil)
  if valid_615814 != nil:
    section.add "X-Amz-Signature", valid_615814
  var valid_615815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615815 = validateParameter(valid_615815, JString, required = false,
                                 default = nil)
  if valid_615815 != nil:
    section.add "X-Amz-Content-Sha256", valid_615815
  var valid_615816 = header.getOrDefault("X-Amz-Date")
  valid_615816 = validateParameter(valid_615816, JString, required = false,
                                 default = nil)
  if valid_615816 != nil:
    section.add "X-Amz-Date", valid_615816
  var valid_615817 = header.getOrDefault("X-Amz-Credential")
  valid_615817 = validateParameter(valid_615817, JString, required = false,
                                 default = nil)
  if valid_615817 != nil:
    section.add "X-Amz-Credential", valid_615817
  var valid_615818 = header.getOrDefault("X-Amz-Security-Token")
  valid_615818 = validateParameter(valid_615818, JString, required = false,
                                 default = nil)
  if valid_615818 != nil:
    section.add "X-Amz-Security-Token", valid_615818
  var valid_615819 = header.getOrDefault("X-Amz-Algorithm")
  valid_615819 = validateParameter(valid_615819, JString, required = false,
                                 default = nil)
  if valid_615819 != nil:
    section.add "X-Amz-Algorithm", valid_615819
  var valid_615820 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615820 = validateParameter(valid_615820, JString, required = false,
                                 default = nil)
  if valid_615820 != nil:
    section.add "X-Amz-SignedHeaders", valid_615820
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_615821 = formData.getOrDefault("TargetGroupName")
  valid_615821 = validateParameter(valid_615821, JString, required = false,
                                 default = nil)
  if valid_615821 != nil:
    section.add "TargetGroupName", valid_615821
  var valid_615822 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_615822 = validateParameter(valid_615822, JArray, required = false,
                                 default = nil)
  if valid_615822 != nil:
    section.add "DBInstanceIdentifiers", valid_615822
  var valid_615823 = formData.getOrDefault("DBClusterIdentifiers")
  valid_615823 = validateParameter(valid_615823, JArray, required = false,
                                 default = nil)
  if valid_615823 != nil:
    section.add "DBClusterIdentifiers", valid_615823
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_615824 = formData.getOrDefault("DBProxyName")
  valid_615824 = validateParameter(valid_615824, JString, required = true,
                                 default = nil)
  if valid_615824 != nil:
    section.add "DBProxyName", valid_615824
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615825: Call_PostRegisterDBProxyTargets_615809; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_615825.validator(path, query, header, formData, body)
  let scheme = call_615825.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615825.url(scheme.get, call_615825.host, call_615825.base,
                         call_615825.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615825, url, valid)

proc call*(call_615826: Call_PostRegisterDBProxyTargets_615809;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          DBClusterIdentifiers: JsonNode = nil;
          Action: string = "RegisterDBProxyTargets"; Version: string = "2014-10-31"): Recallable =
  ## postRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615827 = newJObject()
  var formData_615828 = newJObject()
  add(formData_615828, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    formData_615828.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  if DBClusterIdentifiers != nil:
    formData_615828.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_615828, "DBProxyName", newJString(DBProxyName))
  add(query_615827, "Action", newJString(Action))
  add(query_615827, "Version", newJString(Version))
  result = call_615826.call(nil, query_615827, nil, formData_615828, nil)

var postRegisterDBProxyTargets* = Call_PostRegisterDBProxyTargets_615809(
    name: "postRegisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_PostRegisterDBProxyTargets_615810, base: "/",
    url: url_PostRegisterDBProxyTargets_615811,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRegisterDBProxyTargets_615790 = ref object of OpenApiRestCall_610658
proc url_GetRegisterDBProxyTargets_615792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRegisterDBProxyTargets_615791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_615793 = query.getOrDefault("DBClusterIdentifiers")
  valid_615793 = validateParameter(valid_615793, JArray, required = false,
                                 default = nil)
  if valid_615793 != nil:
    section.add "DBClusterIdentifiers", valid_615793
  var valid_615794 = query.getOrDefault("DBInstanceIdentifiers")
  valid_615794 = validateParameter(valid_615794, JArray, required = false,
                                 default = nil)
  if valid_615794 != nil:
    section.add "DBInstanceIdentifiers", valid_615794
  var valid_615795 = query.getOrDefault("TargetGroupName")
  valid_615795 = validateParameter(valid_615795, JString, required = false,
                                 default = nil)
  if valid_615795 != nil:
    section.add "TargetGroupName", valid_615795
  var valid_615796 = query.getOrDefault("Action")
  valid_615796 = validateParameter(valid_615796, JString, required = true,
                                 default = newJString("RegisterDBProxyTargets"))
  if valid_615796 != nil:
    section.add "Action", valid_615796
  var valid_615797 = query.getOrDefault("Version")
  valid_615797 = validateParameter(valid_615797, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615797 != nil:
    section.add "Version", valid_615797
  var valid_615798 = query.getOrDefault("DBProxyName")
  valid_615798 = validateParameter(valid_615798, JString, required = true,
                                 default = nil)
  if valid_615798 != nil:
    section.add "DBProxyName", valid_615798
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615799 = header.getOrDefault("X-Amz-Signature")
  valid_615799 = validateParameter(valid_615799, JString, required = false,
                                 default = nil)
  if valid_615799 != nil:
    section.add "X-Amz-Signature", valid_615799
  var valid_615800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615800 = validateParameter(valid_615800, JString, required = false,
                                 default = nil)
  if valid_615800 != nil:
    section.add "X-Amz-Content-Sha256", valid_615800
  var valid_615801 = header.getOrDefault("X-Amz-Date")
  valid_615801 = validateParameter(valid_615801, JString, required = false,
                                 default = nil)
  if valid_615801 != nil:
    section.add "X-Amz-Date", valid_615801
  var valid_615802 = header.getOrDefault("X-Amz-Credential")
  valid_615802 = validateParameter(valid_615802, JString, required = false,
                                 default = nil)
  if valid_615802 != nil:
    section.add "X-Amz-Credential", valid_615802
  var valid_615803 = header.getOrDefault("X-Amz-Security-Token")
  valid_615803 = validateParameter(valid_615803, JString, required = false,
                                 default = nil)
  if valid_615803 != nil:
    section.add "X-Amz-Security-Token", valid_615803
  var valid_615804 = header.getOrDefault("X-Amz-Algorithm")
  valid_615804 = validateParameter(valid_615804, JString, required = false,
                                 default = nil)
  if valid_615804 != nil:
    section.add "X-Amz-Algorithm", valid_615804
  var valid_615805 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615805 = validateParameter(valid_615805, JString, required = false,
                                 default = nil)
  if valid_615805 != nil:
    section.add "X-Amz-SignedHeaders", valid_615805
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615806: Call_GetRegisterDBProxyTargets_615790; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_615806.validator(path, query, header, formData, body)
  let scheme = call_615806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615806.url(scheme.get, call_615806.host, call_615806.base,
                         call_615806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615806, url, valid)

proc call*(call_615807: Call_GetRegisterDBProxyTargets_615790; DBProxyName: string;
          DBClusterIdentifiers: JsonNode = nil;
          DBInstanceIdentifiers: JsonNode = nil; TargetGroupName: string = "";
          Action: string = "RegisterDBProxyTargets"; Version: string = "2014-10-31"): Recallable =
  ## getRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  var query_615808 = newJObject()
  if DBClusterIdentifiers != nil:
    query_615808.add "DBClusterIdentifiers", DBClusterIdentifiers
  if DBInstanceIdentifiers != nil:
    query_615808.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_615808, "TargetGroupName", newJString(TargetGroupName))
  add(query_615808, "Action", newJString(Action))
  add(query_615808, "Version", newJString(Version))
  add(query_615808, "DBProxyName", newJString(DBProxyName))
  result = call_615807.call(nil, query_615808, nil, nil, nil)

var getRegisterDBProxyTargets* = Call_GetRegisterDBProxyTargets_615790(
    name: "getRegisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_GetRegisterDBProxyTargets_615791, base: "/",
    url: url_GetRegisterDBProxyTargets_615792,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveFromGlobalCluster_615846 = ref object of OpenApiRestCall_610658
proc url_PostRemoveFromGlobalCluster_615848(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveFromGlobalCluster_615847(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615849 = query.getOrDefault("Action")
  valid_615849 = validateParameter(valid_615849, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_615849 != nil:
    section.add "Action", valid_615849
  var valid_615850 = query.getOrDefault("Version")
  valid_615850 = validateParameter(valid_615850, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615850 != nil:
    section.add "Version", valid_615850
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615851 = header.getOrDefault("X-Amz-Signature")
  valid_615851 = validateParameter(valid_615851, JString, required = false,
                                 default = nil)
  if valid_615851 != nil:
    section.add "X-Amz-Signature", valid_615851
  var valid_615852 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615852 = validateParameter(valid_615852, JString, required = false,
                                 default = nil)
  if valid_615852 != nil:
    section.add "X-Amz-Content-Sha256", valid_615852
  var valid_615853 = header.getOrDefault("X-Amz-Date")
  valid_615853 = validateParameter(valid_615853, JString, required = false,
                                 default = nil)
  if valid_615853 != nil:
    section.add "X-Amz-Date", valid_615853
  var valid_615854 = header.getOrDefault("X-Amz-Credential")
  valid_615854 = validateParameter(valid_615854, JString, required = false,
                                 default = nil)
  if valid_615854 != nil:
    section.add "X-Amz-Credential", valid_615854
  var valid_615855 = header.getOrDefault("X-Amz-Security-Token")
  valid_615855 = validateParameter(valid_615855, JString, required = false,
                                 default = nil)
  if valid_615855 != nil:
    section.add "X-Amz-Security-Token", valid_615855
  var valid_615856 = header.getOrDefault("X-Amz-Algorithm")
  valid_615856 = validateParameter(valid_615856, JString, required = false,
                                 default = nil)
  if valid_615856 != nil:
    section.add "X-Amz-Algorithm", valid_615856
  var valid_615857 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615857 = validateParameter(valid_615857, JString, required = false,
                                 default = nil)
  if valid_615857 != nil:
    section.add "X-Amz-SignedHeaders", valid_615857
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  section = newJObject()
  var valid_615858 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_615858 = validateParameter(valid_615858, JString, required = false,
                                 default = nil)
  if valid_615858 != nil:
    section.add "GlobalClusterIdentifier", valid_615858
  var valid_615859 = formData.getOrDefault("DbClusterIdentifier")
  valid_615859 = validateParameter(valid_615859, JString, required = false,
                                 default = nil)
  if valid_615859 != nil:
    section.add "DbClusterIdentifier", valid_615859
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615860: Call_PostRemoveFromGlobalCluster_615846; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615860.validator(path, query, header, formData, body)
  let scheme = call_615860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615860.url(scheme.get, call_615860.host, call_615860.base,
                         call_615860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615860, url, valid)

proc call*(call_615861: Call_PostRemoveFromGlobalCluster_615846;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615862 = newJObject()
  var formData_615863 = newJObject()
  add(formData_615863, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_615863, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_615862, "Action", newJString(Action))
  add(query_615862, "Version", newJString(Version))
  result = call_615861.call(nil, query_615862, nil, formData_615863, nil)

var postRemoveFromGlobalCluster* = Call_PostRemoveFromGlobalCluster_615846(
    name: "postRemoveFromGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_PostRemoveFromGlobalCluster_615847, base: "/",
    url: url_PostRemoveFromGlobalCluster_615848,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveFromGlobalCluster_615829 = ref object of OpenApiRestCall_610658
proc url_GetRemoveFromGlobalCluster_615831(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveFromGlobalCluster_615830(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615832 = query.getOrDefault("GlobalClusterIdentifier")
  valid_615832 = validateParameter(valid_615832, JString, required = false,
                                 default = nil)
  if valid_615832 != nil:
    section.add "GlobalClusterIdentifier", valid_615832
  var valid_615833 = query.getOrDefault("DbClusterIdentifier")
  valid_615833 = validateParameter(valid_615833, JString, required = false,
                                 default = nil)
  if valid_615833 != nil:
    section.add "DbClusterIdentifier", valid_615833
  var valid_615834 = query.getOrDefault("Action")
  valid_615834 = validateParameter(valid_615834, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_615834 != nil:
    section.add "Action", valid_615834
  var valid_615835 = query.getOrDefault("Version")
  valid_615835 = validateParameter(valid_615835, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615835 != nil:
    section.add "Version", valid_615835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615836 = header.getOrDefault("X-Amz-Signature")
  valid_615836 = validateParameter(valid_615836, JString, required = false,
                                 default = nil)
  if valid_615836 != nil:
    section.add "X-Amz-Signature", valid_615836
  var valid_615837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615837 = validateParameter(valid_615837, JString, required = false,
                                 default = nil)
  if valid_615837 != nil:
    section.add "X-Amz-Content-Sha256", valid_615837
  var valid_615838 = header.getOrDefault("X-Amz-Date")
  valid_615838 = validateParameter(valid_615838, JString, required = false,
                                 default = nil)
  if valid_615838 != nil:
    section.add "X-Amz-Date", valid_615838
  var valid_615839 = header.getOrDefault("X-Amz-Credential")
  valid_615839 = validateParameter(valid_615839, JString, required = false,
                                 default = nil)
  if valid_615839 != nil:
    section.add "X-Amz-Credential", valid_615839
  var valid_615840 = header.getOrDefault("X-Amz-Security-Token")
  valid_615840 = validateParameter(valid_615840, JString, required = false,
                                 default = nil)
  if valid_615840 != nil:
    section.add "X-Amz-Security-Token", valid_615840
  var valid_615841 = header.getOrDefault("X-Amz-Algorithm")
  valid_615841 = validateParameter(valid_615841, JString, required = false,
                                 default = nil)
  if valid_615841 != nil:
    section.add "X-Amz-Algorithm", valid_615841
  var valid_615842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615842 = validateParameter(valid_615842, JString, required = false,
                                 default = nil)
  if valid_615842 != nil:
    section.add "X-Amz-SignedHeaders", valid_615842
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615843: Call_GetRemoveFromGlobalCluster_615829; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615843.validator(path, query, header, formData, body)
  let scheme = call_615843.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615843.url(scheme.get, call_615843.host, call_615843.base,
                         call_615843.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615843, url, valid)

proc call*(call_615844: Call_GetRemoveFromGlobalCluster_615829;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615845 = newJObject()
  add(query_615845, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_615845, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_615845, "Action", newJString(Action))
  add(query_615845, "Version", newJString(Version))
  result = call_615844.call(nil, query_615845, nil, nil, nil)

var getRemoveFromGlobalCluster* = Call_GetRemoveFromGlobalCluster_615829(
    name: "getRemoveFromGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_GetRemoveFromGlobalCluster_615830, base: "/",
    url: url_GetRemoveFromGlobalCluster_615831,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_615882 = ref object of OpenApiRestCall_610658
proc url_PostRemoveRoleFromDBCluster_615884(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_615883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615885 = query.getOrDefault("Action")
  valid_615885 = validateParameter(valid_615885, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_615885 != nil:
    section.add "Action", valid_615885
  var valid_615886 = query.getOrDefault("Version")
  valid_615886 = validateParameter(valid_615886, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615886 != nil:
    section.add "Version", valid_615886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615887 = header.getOrDefault("X-Amz-Signature")
  valid_615887 = validateParameter(valid_615887, JString, required = false,
                                 default = nil)
  if valid_615887 != nil:
    section.add "X-Amz-Signature", valid_615887
  var valid_615888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615888 = validateParameter(valid_615888, JString, required = false,
                                 default = nil)
  if valid_615888 != nil:
    section.add "X-Amz-Content-Sha256", valid_615888
  var valid_615889 = header.getOrDefault("X-Amz-Date")
  valid_615889 = validateParameter(valid_615889, JString, required = false,
                                 default = nil)
  if valid_615889 != nil:
    section.add "X-Amz-Date", valid_615889
  var valid_615890 = header.getOrDefault("X-Amz-Credential")
  valid_615890 = validateParameter(valid_615890, JString, required = false,
                                 default = nil)
  if valid_615890 != nil:
    section.add "X-Amz-Credential", valid_615890
  var valid_615891 = header.getOrDefault("X-Amz-Security-Token")
  valid_615891 = validateParameter(valid_615891, JString, required = false,
                                 default = nil)
  if valid_615891 != nil:
    section.add "X-Amz-Security-Token", valid_615891
  var valid_615892 = header.getOrDefault("X-Amz-Algorithm")
  valid_615892 = validateParameter(valid_615892, JString, required = false,
                                 default = nil)
  if valid_615892 != nil:
    section.add "X-Amz-Algorithm", valid_615892
  var valid_615893 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615893 = validateParameter(valid_615893, JString, required = false,
                                 default = nil)
  if valid_615893 != nil:
    section.add "X-Amz-SignedHeaders", valid_615893
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  var valid_615894 = formData.getOrDefault("FeatureName")
  valid_615894 = validateParameter(valid_615894, JString, required = false,
                                 default = nil)
  if valid_615894 != nil:
    section.add "FeatureName", valid_615894
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_615895 = formData.getOrDefault("RoleArn")
  valid_615895 = validateParameter(valid_615895, JString, required = true,
                                 default = nil)
  if valid_615895 != nil:
    section.add "RoleArn", valid_615895
  var valid_615896 = formData.getOrDefault("DBClusterIdentifier")
  valid_615896 = validateParameter(valid_615896, JString, required = true,
                                 default = nil)
  if valid_615896 != nil:
    section.add "DBClusterIdentifier", valid_615896
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615897: Call_PostRemoveRoleFromDBCluster_615882; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615897.validator(path, query, header, formData, body)
  let scheme = call_615897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615897.url(scheme.get, call_615897.host, call_615897.base,
                         call_615897.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615897, url, valid)

proc call*(call_615898: Call_PostRemoveRoleFromDBCluster_615882; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  var query_615899 = newJObject()
  var formData_615900 = newJObject()
  add(formData_615900, "FeatureName", newJString(FeatureName))
  add(formData_615900, "RoleArn", newJString(RoleArn))
  add(query_615899, "Action", newJString(Action))
  add(query_615899, "Version", newJString(Version))
  add(formData_615900, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_615898.call(nil, query_615899, nil, formData_615900, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_615882(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_615883, base: "/",
    url: url_PostRemoveRoleFromDBCluster_615884,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_615864 = ref object of OpenApiRestCall_610658
proc url_GetRemoveRoleFromDBCluster_615866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_615865(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_615867 = query.getOrDefault("RoleArn")
  valid_615867 = validateParameter(valid_615867, JString, required = true,
                                 default = nil)
  if valid_615867 != nil:
    section.add "RoleArn", valid_615867
  var valid_615868 = query.getOrDefault("DBClusterIdentifier")
  valid_615868 = validateParameter(valid_615868, JString, required = true,
                                 default = nil)
  if valid_615868 != nil:
    section.add "DBClusterIdentifier", valid_615868
  var valid_615869 = query.getOrDefault("FeatureName")
  valid_615869 = validateParameter(valid_615869, JString, required = false,
                                 default = nil)
  if valid_615869 != nil:
    section.add "FeatureName", valid_615869
  var valid_615870 = query.getOrDefault("Action")
  valid_615870 = validateParameter(valid_615870, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_615870 != nil:
    section.add "Action", valid_615870
  var valid_615871 = query.getOrDefault("Version")
  valid_615871 = validateParameter(valid_615871, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615871 != nil:
    section.add "Version", valid_615871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615872 = header.getOrDefault("X-Amz-Signature")
  valid_615872 = validateParameter(valid_615872, JString, required = false,
                                 default = nil)
  if valid_615872 != nil:
    section.add "X-Amz-Signature", valid_615872
  var valid_615873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615873 = validateParameter(valid_615873, JString, required = false,
                                 default = nil)
  if valid_615873 != nil:
    section.add "X-Amz-Content-Sha256", valid_615873
  var valid_615874 = header.getOrDefault("X-Amz-Date")
  valid_615874 = validateParameter(valid_615874, JString, required = false,
                                 default = nil)
  if valid_615874 != nil:
    section.add "X-Amz-Date", valid_615874
  var valid_615875 = header.getOrDefault("X-Amz-Credential")
  valid_615875 = validateParameter(valid_615875, JString, required = false,
                                 default = nil)
  if valid_615875 != nil:
    section.add "X-Amz-Credential", valid_615875
  var valid_615876 = header.getOrDefault("X-Amz-Security-Token")
  valid_615876 = validateParameter(valid_615876, JString, required = false,
                                 default = nil)
  if valid_615876 != nil:
    section.add "X-Amz-Security-Token", valid_615876
  var valid_615877 = header.getOrDefault("X-Amz-Algorithm")
  valid_615877 = validateParameter(valid_615877, JString, required = false,
                                 default = nil)
  if valid_615877 != nil:
    section.add "X-Amz-Algorithm", valid_615877
  var valid_615878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615878 = validateParameter(valid_615878, JString, required = false,
                                 default = nil)
  if valid_615878 != nil:
    section.add "X-Amz-SignedHeaders", valid_615878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615879: Call_GetRemoveRoleFromDBCluster_615864; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615879.validator(path, query, header, formData, body)
  let scheme = call_615879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615879.url(scheme.get, call_615879.host, call_615879.base,
                         call_615879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615879, url, valid)

proc call*(call_615880: Call_GetRemoveRoleFromDBCluster_615864; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615881 = newJObject()
  add(query_615881, "RoleArn", newJString(RoleArn))
  add(query_615881, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615881, "FeatureName", newJString(FeatureName))
  add(query_615881, "Action", newJString(Action))
  add(query_615881, "Version", newJString(Version))
  result = call_615880.call(nil, query_615881, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_615864(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_615865, base: "/",
    url: url_GetRemoveRoleFromDBCluster_615866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBInstance_615919 = ref object of OpenApiRestCall_610658
proc url_PostRemoveRoleFromDBInstance_615921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBInstance_615920(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615922 = query.getOrDefault("Action")
  valid_615922 = validateParameter(valid_615922, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_615922 != nil:
    section.add "Action", valid_615922
  var valid_615923 = query.getOrDefault("Version")
  valid_615923 = validateParameter(valid_615923, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615923 != nil:
    section.add "Version", valid_615923
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615924 = header.getOrDefault("X-Amz-Signature")
  valid_615924 = validateParameter(valid_615924, JString, required = false,
                                 default = nil)
  if valid_615924 != nil:
    section.add "X-Amz-Signature", valid_615924
  var valid_615925 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615925 = validateParameter(valid_615925, JString, required = false,
                                 default = nil)
  if valid_615925 != nil:
    section.add "X-Amz-Content-Sha256", valid_615925
  var valid_615926 = header.getOrDefault("X-Amz-Date")
  valid_615926 = validateParameter(valid_615926, JString, required = false,
                                 default = nil)
  if valid_615926 != nil:
    section.add "X-Amz-Date", valid_615926
  var valid_615927 = header.getOrDefault("X-Amz-Credential")
  valid_615927 = validateParameter(valid_615927, JString, required = false,
                                 default = nil)
  if valid_615927 != nil:
    section.add "X-Amz-Credential", valid_615927
  var valid_615928 = header.getOrDefault("X-Amz-Security-Token")
  valid_615928 = validateParameter(valid_615928, JString, required = false,
                                 default = nil)
  if valid_615928 != nil:
    section.add "X-Amz-Security-Token", valid_615928
  var valid_615929 = header.getOrDefault("X-Amz-Algorithm")
  valid_615929 = validateParameter(valid_615929, JString, required = false,
                                 default = nil)
  if valid_615929 != nil:
    section.add "X-Amz-Algorithm", valid_615929
  var valid_615930 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615930 = validateParameter(valid_615930, JString, required = false,
                                 default = nil)
  if valid_615930 != nil:
    section.add "X-Amz-SignedHeaders", valid_615930
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_615931 = formData.getOrDefault("FeatureName")
  valid_615931 = validateParameter(valid_615931, JString, required = true,
                                 default = nil)
  if valid_615931 != nil:
    section.add "FeatureName", valid_615931
  var valid_615932 = formData.getOrDefault("RoleArn")
  valid_615932 = validateParameter(valid_615932, JString, required = true,
                                 default = nil)
  if valid_615932 != nil:
    section.add "RoleArn", valid_615932
  var valid_615933 = formData.getOrDefault("DBInstanceIdentifier")
  valid_615933 = validateParameter(valid_615933, JString, required = true,
                                 default = nil)
  if valid_615933 != nil:
    section.add "DBInstanceIdentifier", valid_615933
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615934: Call_PostRemoveRoleFromDBInstance_615919; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_615934.validator(path, query, header, formData, body)
  let scheme = call_615934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615934.url(scheme.get, call_615934.host, call_615934.base,
                         call_615934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615934, url, valid)

proc call*(call_615935: Call_PostRemoveRoleFromDBInstance_615919;
          FeatureName: string; RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615936 = newJObject()
  var formData_615937 = newJObject()
  add(formData_615937, "FeatureName", newJString(FeatureName))
  add(formData_615937, "RoleArn", newJString(RoleArn))
  add(formData_615937, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615936, "Action", newJString(Action))
  add(query_615936, "Version", newJString(Version))
  result = call_615935.call(nil, query_615936, nil, formData_615937, nil)

var postRemoveRoleFromDBInstance* = Call_PostRemoveRoleFromDBInstance_615919(
    name: "postRemoveRoleFromDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_PostRemoveRoleFromDBInstance_615920, base: "/",
    url: url_PostRemoveRoleFromDBInstance_615921,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBInstance_615901 = ref object of OpenApiRestCall_610658
proc url_GetRemoveRoleFromDBInstance_615903(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBInstance_615902(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_615904 = query.getOrDefault("RoleArn")
  valid_615904 = validateParameter(valid_615904, JString, required = true,
                                 default = nil)
  if valid_615904 != nil:
    section.add "RoleArn", valid_615904
  var valid_615905 = query.getOrDefault("FeatureName")
  valid_615905 = validateParameter(valid_615905, JString, required = true,
                                 default = nil)
  if valid_615905 != nil:
    section.add "FeatureName", valid_615905
  var valid_615906 = query.getOrDefault("DBInstanceIdentifier")
  valid_615906 = validateParameter(valid_615906, JString, required = true,
                                 default = nil)
  if valid_615906 != nil:
    section.add "DBInstanceIdentifier", valid_615906
  var valid_615907 = query.getOrDefault("Action")
  valid_615907 = validateParameter(valid_615907, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_615907 != nil:
    section.add "Action", valid_615907
  var valid_615908 = query.getOrDefault("Version")
  valid_615908 = validateParameter(valid_615908, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615908 != nil:
    section.add "Version", valid_615908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615909 = header.getOrDefault("X-Amz-Signature")
  valid_615909 = validateParameter(valid_615909, JString, required = false,
                                 default = nil)
  if valid_615909 != nil:
    section.add "X-Amz-Signature", valid_615909
  var valid_615910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615910 = validateParameter(valid_615910, JString, required = false,
                                 default = nil)
  if valid_615910 != nil:
    section.add "X-Amz-Content-Sha256", valid_615910
  var valid_615911 = header.getOrDefault("X-Amz-Date")
  valid_615911 = validateParameter(valid_615911, JString, required = false,
                                 default = nil)
  if valid_615911 != nil:
    section.add "X-Amz-Date", valid_615911
  var valid_615912 = header.getOrDefault("X-Amz-Credential")
  valid_615912 = validateParameter(valid_615912, JString, required = false,
                                 default = nil)
  if valid_615912 != nil:
    section.add "X-Amz-Credential", valid_615912
  var valid_615913 = header.getOrDefault("X-Amz-Security-Token")
  valid_615913 = validateParameter(valid_615913, JString, required = false,
                                 default = nil)
  if valid_615913 != nil:
    section.add "X-Amz-Security-Token", valid_615913
  var valid_615914 = header.getOrDefault("X-Amz-Algorithm")
  valid_615914 = validateParameter(valid_615914, JString, required = false,
                                 default = nil)
  if valid_615914 != nil:
    section.add "X-Amz-Algorithm", valid_615914
  var valid_615915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615915 = validateParameter(valid_615915, JString, required = false,
                                 default = nil)
  if valid_615915 != nil:
    section.add "X-Amz-SignedHeaders", valid_615915
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615916: Call_GetRemoveRoleFromDBInstance_615901; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_615916.validator(path, query, header, formData, body)
  let scheme = call_615916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615916.url(scheme.get, call_615916.host, call_615916.base,
                         call_615916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615916, url, valid)

proc call*(call_615917: Call_GetRemoveRoleFromDBInstance_615901; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615918 = newJObject()
  add(query_615918, "RoleArn", newJString(RoleArn))
  add(query_615918, "FeatureName", newJString(FeatureName))
  add(query_615918, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615918, "Action", newJString(Action))
  add(query_615918, "Version", newJString(Version))
  result = call_615917.call(nil, query_615918, nil, nil, nil)

var getRemoveRoleFromDBInstance* = Call_GetRemoveRoleFromDBInstance_615901(
    name: "getRemoveRoleFromDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_GetRemoveRoleFromDBInstance_615902, base: "/",
    url: url_GetRemoveRoleFromDBInstance_615903,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_615955 = ref object of OpenApiRestCall_610658
proc url_PostRemoveSourceIdentifierFromSubscription_615957(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_615956(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615958 = query.getOrDefault("Action")
  valid_615958 = validateParameter(valid_615958, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_615958 != nil:
    section.add "Action", valid_615958
  var valid_615959 = query.getOrDefault("Version")
  valid_615959 = validateParameter(valid_615959, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615959 != nil:
    section.add "Version", valid_615959
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615960 = header.getOrDefault("X-Amz-Signature")
  valid_615960 = validateParameter(valid_615960, JString, required = false,
                                 default = nil)
  if valid_615960 != nil:
    section.add "X-Amz-Signature", valid_615960
  var valid_615961 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615961 = validateParameter(valid_615961, JString, required = false,
                                 default = nil)
  if valid_615961 != nil:
    section.add "X-Amz-Content-Sha256", valid_615961
  var valid_615962 = header.getOrDefault("X-Amz-Date")
  valid_615962 = validateParameter(valid_615962, JString, required = false,
                                 default = nil)
  if valid_615962 != nil:
    section.add "X-Amz-Date", valid_615962
  var valid_615963 = header.getOrDefault("X-Amz-Credential")
  valid_615963 = validateParameter(valid_615963, JString, required = false,
                                 default = nil)
  if valid_615963 != nil:
    section.add "X-Amz-Credential", valid_615963
  var valid_615964 = header.getOrDefault("X-Amz-Security-Token")
  valid_615964 = validateParameter(valid_615964, JString, required = false,
                                 default = nil)
  if valid_615964 != nil:
    section.add "X-Amz-Security-Token", valid_615964
  var valid_615965 = header.getOrDefault("X-Amz-Algorithm")
  valid_615965 = validateParameter(valid_615965, JString, required = false,
                                 default = nil)
  if valid_615965 != nil:
    section.add "X-Amz-Algorithm", valid_615965
  var valid_615966 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615966 = validateParameter(valid_615966, JString, required = false,
                                 default = nil)
  if valid_615966 != nil:
    section.add "X-Amz-SignedHeaders", valid_615966
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_615967 = formData.getOrDefault("SubscriptionName")
  valid_615967 = validateParameter(valid_615967, JString, required = true,
                                 default = nil)
  if valid_615967 != nil:
    section.add "SubscriptionName", valid_615967
  var valid_615968 = formData.getOrDefault("SourceIdentifier")
  valid_615968 = validateParameter(valid_615968, JString, required = true,
                                 default = nil)
  if valid_615968 != nil:
    section.add "SourceIdentifier", valid_615968
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615969: Call_PostRemoveSourceIdentifierFromSubscription_615955;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_615969.validator(path, query, header, formData, body)
  let scheme = call_615969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615969.url(scheme.get, call_615969.host, call_615969.base,
                         call_615969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615969, url, valid)

proc call*(call_615970: Call_PostRemoveSourceIdentifierFromSubscription_615955;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615971 = newJObject()
  var formData_615972 = newJObject()
  add(formData_615972, "SubscriptionName", newJString(SubscriptionName))
  add(formData_615972, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_615971, "Action", newJString(Action))
  add(query_615971, "Version", newJString(Version))
  result = call_615970.call(nil, query_615971, nil, formData_615972, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_615955(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_615956,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_615957,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_615938 = ref object of OpenApiRestCall_610658
proc url_GetRemoveSourceIdentifierFromSubscription_615940(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_615939(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_615941 = query.getOrDefault("SourceIdentifier")
  valid_615941 = validateParameter(valid_615941, JString, required = true,
                                 default = nil)
  if valid_615941 != nil:
    section.add "SourceIdentifier", valid_615941
  var valid_615942 = query.getOrDefault("SubscriptionName")
  valid_615942 = validateParameter(valid_615942, JString, required = true,
                                 default = nil)
  if valid_615942 != nil:
    section.add "SubscriptionName", valid_615942
  var valid_615943 = query.getOrDefault("Action")
  valid_615943 = validateParameter(valid_615943, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_615943 != nil:
    section.add "Action", valid_615943
  var valid_615944 = query.getOrDefault("Version")
  valid_615944 = validateParameter(valid_615944, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615944 != nil:
    section.add "Version", valid_615944
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615945 = header.getOrDefault("X-Amz-Signature")
  valid_615945 = validateParameter(valid_615945, JString, required = false,
                                 default = nil)
  if valid_615945 != nil:
    section.add "X-Amz-Signature", valid_615945
  var valid_615946 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615946 = validateParameter(valid_615946, JString, required = false,
                                 default = nil)
  if valid_615946 != nil:
    section.add "X-Amz-Content-Sha256", valid_615946
  var valid_615947 = header.getOrDefault("X-Amz-Date")
  valid_615947 = validateParameter(valid_615947, JString, required = false,
                                 default = nil)
  if valid_615947 != nil:
    section.add "X-Amz-Date", valid_615947
  var valid_615948 = header.getOrDefault("X-Amz-Credential")
  valid_615948 = validateParameter(valid_615948, JString, required = false,
                                 default = nil)
  if valid_615948 != nil:
    section.add "X-Amz-Credential", valid_615948
  var valid_615949 = header.getOrDefault("X-Amz-Security-Token")
  valid_615949 = validateParameter(valid_615949, JString, required = false,
                                 default = nil)
  if valid_615949 != nil:
    section.add "X-Amz-Security-Token", valid_615949
  var valid_615950 = header.getOrDefault("X-Amz-Algorithm")
  valid_615950 = validateParameter(valid_615950, JString, required = false,
                                 default = nil)
  if valid_615950 != nil:
    section.add "X-Amz-Algorithm", valid_615950
  var valid_615951 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615951 = validateParameter(valid_615951, JString, required = false,
                                 default = nil)
  if valid_615951 != nil:
    section.add "X-Amz-SignedHeaders", valid_615951
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615952: Call_GetRemoveSourceIdentifierFromSubscription_615938;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_615952.validator(path, query, header, formData, body)
  let scheme = call_615952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615952.url(scheme.get, call_615952.host, call_615952.base,
                         call_615952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615952, url, valid)

proc call*(call_615953: Call_GetRemoveSourceIdentifierFromSubscription_615938;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615954 = newJObject()
  add(query_615954, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_615954, "SubscriptionName", newJString(SubscriptionName))
  add(query_615954, "Action", newJString(Action))
  add(query_615954, "Version", newJString(Version))
  result = call_615953.call(nil, query_615954, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_615938(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_615939,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_615940,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_615990 = ref object of OpenApiRestCall_610658
proc url_PostRemoveTagsFromResource_615992(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_615991(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615993 = query.getOrDefault("Action")
  valid_615993 = validateParameter(valid_615993, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_615993 != nil:
    section.add "Action", valid_615993
  var valid_615994 = query.getOrDefault("Version")
  valid_615994 = validateParameter(valid_615994, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615994 != nil:
    section.add "Version", valid_615994
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615995 = header.getOrDefault("X-Amz-Signature")
  valid_615995 = validateParameter(valid_615995, JString, required = false,
                                 default = nil)
  if valid_615995 != nil:
    section.add "X-Amz-Signature", valid_615995
  var valid_615996 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615996 = validateParameter(valid_615996, JString, required = false,
                                 default = nil)
  if valid_615996 != nil:
    section.add "X-Amz-Content-Sha256", valid_615996
  var valid_615997 = header.getOrDefault("X-Amz-Date")
  valid_615997 = validateParameter(valid_615997, JString, required = false,
                                 default = nil)
  if valid_615997 != nil:
    section.add "X-Amz-Date", valid_615997
  var valid_615998 = header.getOrDefault("X-Amz-Credential")
  valid_615998 = validateParameter(valid_615998, JString, required = false,
                                 default = nil)
  if valid_615998 != nil:
    section.add "X-Amz-Credential", valid_615998
  var valid_615999 = header.getOrDefault("X-Amz-Security-Token")
  valid_615999 = validateParameter(valid_615999, JString, required = false,
                                 default = nil)
  if valid_615999 != nil:
    section.add "X-Amz-Security-Token", valid_615999
  var valid_616000 = header.getOrDefault("X-Amz-Algorithm")
  valid_616000 = validateParameter(valid_616000, JString, required = false,
                                 default = nil)
  if valid_616000 != nil:
    section.add "X-Amz-Algorithm", valid_616000
  var valid_616001 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616001 = validateParameter(valid_616001, JString, required = false,
                                 default = nil)
  if valid_616001 != nil:
    section.add "X-Amz-SignedHeaders", valid_616001
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_616002 = formData.getOrDefault("TagKeys")
  valid_616002 = validateParameter(valid_616002, JArray, required = true, default = nil)
  if valid_616002 != nil:
    section.add "TagKeys", valid_616002
  var valid_616003 = formData.getOrDefault("ResourceName")
  valid_616003 = validateParameter(valid_616003, JString, required = true,
                                 default = nil)
  if valid_616003 != nil:
    section.add "ResourceName", valid_616003
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616004: Call_PostRemoveTagsFromResource_615990; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_616004.validator(path, query, header, formData, body)
  let scheme = call_616004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616004.url(scheme.get, call_616004.host, call_616004.base,
                         call_616004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616004, url, valid)

proc call*(call_616005: Call_PostRemoveTagsFromResource_615990; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  var query_616006 = newJObject()
  var formData_616007 = newJObject()
  if TagKeys != nil:
    formData_616007.add "TagKeys", TagKeys
  add(query_616006, "Action", newJString(Action))
  add(query_616006, "Version", newJString(Version))
  add(formData_616007, "ResourceName", newJString(ResourceName))
  result = call_616005.call(nil, query_616006, nil, formData_616007, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_615990(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_615991, base: "/",
    url: url_PostRemoveTagsFromResource_615992,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_615973 = ref object of OpenApiRestCall_610658
proc url_GetRemoveTagsFromResource_615975(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_615974(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_615976 = query.getOrDefault("ResourceName")
  valid_615976 = validateParameter(valid_615976, JString, required = true,
                                 default = nil)
  if valid_615976 != nil:
    section.add "ResourceName", valid_615976
  var valid_615977 = query.getOrDefault("TagKeys")
  valid_615977 = validateParameter(valid_615977, JArray, required = true, default = nil)
  if valid_615977 != nil:
    section.add "TagKeys", valid_615977
  var valid_615978 = query.getOrDefault("Action")
  valid_615978 = validateParameter(valid_615978, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_615978 != nil:
    section.add "Action", valid_615978
  var valid_615979 = query.getOrDefault("Version")
  valid_615979 = validateParameter(valid_615979, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615979 != nil:
    section.add "Version", valid_615979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615980 = header.getOrDefault("X-Amz-Signature")
  valid_615980 = validateParameter(valid_615980, JString, required = false,
                                 default = nil)
  if valid_615980 != nil:
    section.add "X-Amz-Signature", valid_615980
  var valid_615981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615981 = validateParameter(valid_615981, JString, required = false,
                                 default = nil)
  if valid_615981 != nil:
    section.add "X-Amz-Content-Sha256", valid_615981
  var valid_615982 = header.getOrDefault("X-Amz-Date")
  valid_615982 = validateParameter(valid_615982, JString, required = false,
                                 default = nil)
  if valid_615982 != nil:
    section.add "X-Amz-Date", valid_615982
  var valid_615983 = header.getOrDefault("X-Amz-Credential")
  valid_615983 = validateParameter(valid_615983, JString, required = false,
                                 default = nil)
  if valid_615983 != nil:
    section.add "X-Amz-Credential", valid_615983
  var valid_615984 = header.getOrDefault("X-Amz-Security-Token")
  valid_615984 = validateParameter(valid_615984, JString, required = false,
                                 default = nil)
  if valid_615984 != nil:
    section.add "X-Amz-Security-Token", valid_615984
  var valid_615985 = header.getOrDefault("X-Amz-Algorithm")
  valid_615985 = validateParameter(valid_615985, JString, required = false,
                                 default = nil)
  if valid_615985 != nil:
    section.add "X-Amz-Algorithm", valid_615985
  var valid_615986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615986 = validateParameter(valid_615986, JString, required = false,
                                 default = nil)
  if valid_615986 != nil:
    section.add "X-Amz-SignedHeaders", valid_615986
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615987: Call_GetRemoveTagsFromResource_615973; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_615987.validator(path, query, header, formData, body)
  let scheme = call_615987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615987.url(scheme.get, call_615987.host, call_615987.base,
                         call_615987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615987, url, valid)

proc call*(call_615988: Call_GetRemoveTagsFromResource_615973;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615989 = newJObject()
  add(query_615989, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_615989.add "TagKeys", TagKeys
  add(query_615989, "Action", newJString(Action))
  add(query_615989, "Version", newJString(Version))
  result = call_615988.call(nil, query_615989, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_615973(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_615974, base: "/",
    url: url_GetRemoveTagsFromResource_615975,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_616026 = ref object of OpenApiRestCall_610658
proc url_PostResetDBClusterParameterGroup_616028(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBClusterParameterGroup_616027(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616029 = query.getOrDefault("Action")
  valid_616029 = validateParameter(valid_616029, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_616029 != nil:
    section.add "Action", valid_616029
  var valid_616030 = query.getOrDefault("Version")
  valid_616030 = validateParameter(valid_616030, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616030 != nil:
    section.add "Version", valid_616030
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616031 = header.getOrDefault("X-Amz-Signature")
  valid_616031 = validateParameter(valid_616031, JString, required = false,
                                 default = nil)
  if valid_616031 != nil:
    section.add "X-Amz-Signature", valid_616031
  var valid_616032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616032 = validateParameter(valid_616032, JString, required = false,
                                 default = nil)
  if valid_616032 != nil:
    section.add "X-Amz-Content-Sha256", valid_616032
  var valid_616033 = header.getOrDefault("X-Amz-Date")
  valid_616033 = validateParameter(valid_616033, JString, required = false,
                                 default = nil)
  if valid_616033 != nil:
    section.add "X-Amz-Date", valid_616033
  var valid_616034 = header.getOrDefault("X-Amz-Credential")
  valid_616034 = validateParameter(valid_616034, JString, required = false,
                                 default = nil)
  if valid_616034 != nil:
    section.add "X-Amz-Credential", valid_616034
  var valid_616035 = header.getOrDefault("X-Amz-Security-Token")
  valid_616035 = validateParameter(valid_616035, JString, required = false,
                                 default = nil)
  if valid_616035 != nil:
    section.add "X-Amz-Security-Token", valid_616035
  var valid_616036 = header.getOrDefault("X-Amz-Algorithm")
  valid_616036 = validateParameter(valid_616036, JString, required = false,
                                 default = nil)
  if valid_616036 != nil:
    section.add "X-Amz-Algorithm", valid_616036
  var valid_616037 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616037 = validateParameter(valid_616037, JString, required = false,
                                 default = nil)
  if valid_616037 != nil:
    section.add "X-Amz-SignedHeaders", valid_616037
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  section = newJObject()
  var valid_616038 = formData.getOrDefault("ResetAllParameters")
  valid_616038 = validateParameter(valid_616038, JBool, required = false, default = nil)
  if valid_616038 != nil:
    section.add "ResetAllParameters", valid_616038
  var valid_616039 = formData.getOrDefault("Parameters")
  valid_616039 = validateParameter(valid_616039, JArray, required = false,
                                 default = nil)
  if valid_616039 != nil:
    section.add "Parameters", valid_616039
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_616040 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_616040 = validateParameter(valid_616040, JString, required = true,
                                 default = nil)
  if valid_616040 != nil:
    section.add "DBClusterParameterGroupName", valid_616040
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616041: Call_PostResetDBClusterParameterGroup_616026;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616041.validator(path, query, header, formData, body)
  let scheme = call_616041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616041.url(scheme.get, call_616041.host, call_616041.base,
                         call_616041.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616041, url, valid)

proc call*(call_616042: Call_PostResetDBClusterParameterGroup_616026;
          DBClusterParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Parameters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Version: string (required)
  var query_616043 = newJObject()
  var formData_616044 = newJObject()
  add(formData_616044, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_616043, "Action", newJString(Action))
  if Parameters != nil:
    formData_616044.add "Parameters", Parameters
  add(formData_616044, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_616043, "Version", newJString(Version))
  result = call_616042.call(nil, query_616043, nil, formData_616044, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_616026(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_616027, base: "/",
    url: url_PostResetDBClusterParameterGroup_616028,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_616008 = ref object of OpenApiRestCall_610658
proc url_GetResetDBClusterParameterGroup_616010(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBClusterParameterGroup_616009(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616011 = query.getOrDefault("Parameters")
  valid_616011 = validateParameter(valid_616011, JArray, required = false,
                                 default = nil)
  if valid_616011 != nil:
    section.add "Parameters", valid_616011
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_616012 = query.getOrDefault("DBClusterParameterGroupName")
  valid_616012 = validateParameter(valid_616012, JString, required = true,
                                 default = nil)
  if valid_616012 != nil:
    section.add "DBClusterParameterGroupName", valid_616012
  var valid_616013 = query.getOrDefault("ResetAllParameters")
  valid_616013 = validateParameter(valid_616013, JBool, required = false, default = nil)
  if valid_616013 != nil:
    section.add "ResetAllParameters", valid_616013
  var valid_616014 = query.getOrDefault("Action")
  valid_616014 = validateParameter(valid_616014, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_616014 != nil:
    section.add "Action", valid_616014
  var valid_616015 = query.getOrDefault("Version")
  valid_616015 = validateParameter(valid_616015, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616015 != nil:
    section.add "Version", valid_616015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616016 = header.getOrDefault("X-Amz-Signature")
  valid_616016 = validateParameter(valid_616016, JString, required = false,
                                 default = nil)
  if valid_616016 != nil:
    section.add "X-Amz-Signature", valid_616016
  var valid_616017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616017 = validateParameter(valid_616017, JString, required = false,
                                 default = nil)
  if valid_616017 != nil:
    section.add "X-Amz-Content-Sha256", valid_616017
  var valid_616018 = header.getOrDefault("X-Amz-Date")
  valid_616018 = validateParameter(valid_616018, JString, required = false,
                                 default = nil)
  if valid_616018 != nil:
    section.add "X-Amz-Date", valid_616018
  var valid_616019 = header.getOrDefault("X-Amz-Credential")
  valid_616019 = validateParameter(valid_616019, JString, required = false,
                                 default = nil)
  if valid_616019 != nil:
    section.add "X-Amz-Credential", valid_616019
  var valid_616020 = header.getOrDefault("X-Amz-Security-Token")
  valid_616020 = validateParameter(valid_616020, JString, required = false,
                                 default = nil)
  if valid_616020 != nil:
    section.add "X-Amz-Security-Token", valid_616020
  var valid_616021 = header.getOrDefault("X-Amz-Algorithm")
  valid_616021 = validateParameter(valid_616021, JString, required = false,
                                 default = nil)
  if valid_616021 != nil:
    section.add "X-Amz-Algorithm", valid_616021
  var valid_616022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616022 = validateParameter(valid_616022, JString, required = false,
                                 default = nil)
  if valid_616022 != nil:
    section.add "X-Amz-SignedHeaders", valid_616022
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616023: Call_GetResetDBClusterParameterGroup_616008;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616023.validator(path, query, header, formData, body)
  let scheme = call_616023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616023.url(scheme.get, call_616023.host, call_616023.base,
                         call_616023.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616023, url, valid)

proc call*(call_616024: Call_GetResetDBClusterParameterGroup_616008;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616025 = newJObject()
  if Parameters != nil:
    query_616025.add "Parameters", Parameters
  add(query_616025, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_616025, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_616025, "Action", newJString(Action))
  add(query_616025, "Version", newJString(Version))
  result = call_616024.call(nil, query_616025, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_616008(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_616009, base: "/",
    url: url_GetResetDBClusterParameterGroup_616010,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_616063 = ref object of OpenApiRestCall_610658
proc url_PostResetDBParameterGroup_616065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBParameterGroup_616064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616066 = query.getOrDefault("Action")
  valid_616066 = validateParameter(valid_616066, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_616066 != nil:
    section.add "Action", valid_616066
  var valid_616067 = query.getOrDefault("Version")
  valid_616067 = validateParameter(valid_616067, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616067 != nil:
    section.add "Version", valid_616067
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616068 = header.getOrDefault("X-Amz-Signature")
  valid_616068 = validateParameter(valid_616068, JString, required = false,
                                 default = nil)
  if valid_616068 != nil:
    section.add "X-Amz-Signature", valid_616068
  var valid_616069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616069 = validateParameter(valid_616069, JString, required = false,
                                 default = nil)
  if valid_616069 != nil:
    section.add "X-Amz-Content-Sha256", valid_616069
  var valid_616070 = header.getOrDefault("X-Amz-Date")
  valid_616070 = validateParameter(valid_616070, JString, required = false,
                                 default = nil)
  if valid_616070 != nil:
    section.add "X-Amz-Date", valid_616070
  var valid_616071 = header.getOrDefault("X-Amz-Credential")
  valid_616071 = validateParameter(valid_616071, JString, required = false,
                                 default = nil)
  if valid_616071 != nil:
    section.add "X-Amz-Credential", valid_616071
  var valid_616072 = header.getOrDefault("X-Amz-Security-Token")
  valid_616072 = validateParameter(valid_616072, JString, required = false,
                                 default = nil)
  if valid_616072 != nil:
    section.add "X-Amz-Security-Token", valid_616072
  var valid_616073 = header.getOrDefault("X-Amz-Algorithm")
  valid_616073 = validateParameter(valid_616073, JString, required = false,
                                 default = nil)
  if valid_616073 != nil:
    section.add "X-Amz-Algorithm", valid_616073
  var valid_616074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616074 = validateParameter(valid_616074, JString, required = false,
                                 default = nil)
  if valid_616074 != nil:
    section.add "X-Amz-SignedHeaders", valid_616074
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  section = newJObject()
  var valid_616075 = formData.getOrDefault("ResetAllParameters")
  valid_616075 = validateParameter(valid_616075, JBool, required = false, default = nil)
  if valid_616075 != nil:
    section.add "ResetAllParameters", valid_616075
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_616076 = formData.getOrDefault("DBParameterGroupName")
  valid_616076 = validateParameter(valid_616076, JString, required = true,
                                 default = nil)
  if valid_616076 != nil:
    section.add "DBParameterGroupName", valid_616076
  var valid_616077 = formData.getOrDefault("Parameters")
  valid_616077 = validateParameter(valid_616077, JArray, required = false,
                                 default = nil)
  if valid_616077 != nil:
    section.add "Parameters", valid_616077
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616078: Call_PostResetDBParameterGroup_616063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_616078.validator(path, query, header, formData, body)
  let scheme = call_616078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616078.url(scheme.get, call_616078.host, call_616078.base,
                         call_616078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616078, url, valid)

proc call*(call_616079: Call_PostResetDBParameterGroup_616063;
          DBParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Parameters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Version: string (required)
  var query_616080 = newJObject()
  var formData_616081 = newJObject()
  add(formData_616081, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_616081, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_616080, "Action", newJString(Action))
  if Parameters != nil:
    formData_616081.add "Parameters", Parameters
  add(query_616080, "Version", newJString(Version))
  result = call_616079.call(nil, query_616080, nil, formData_616081, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_616063(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_616064, base: "/",
    url: url_PostResetDBParameterGroup_616065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_616045 = ref object of OpenApiRestCall_610658
proc url_GetResetDBParameterGroup_616047(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBParameterGroup_616046(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_616048 = query.getOrDefault("DBParameterGroupName")
  valid_616048 = validateParameter(valid_616048, JString, required = true,
                                 default = nil)
  if valid_616048 != nil:
    section.add "DBParameterGroupName", valid_616048
  var valid_616049 = query.getOrDefault("Parameters")
  valid_616049 = validateParameter(valid_616049, JArray, required = false,
                                 default = nil)
  if valid_616049 != nil:
    section.add "Parameters", valid_616049
  var valid_616050 = query.getOrDefault("ResetAllParameters")
  valid_616050 = validateParameter(valid_616050, JBool, required = false, default = nil)
  if valid_616050 != nil:
    section.add "ResetAllParameters", valid_616050
  var valid_616051 = query.getOrDefault("Action")
  valid_616051 = validateParameter(valid_616051, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_616051 != nil:
    section.add "Action", valid_616051
  var valid_616052 = query.getOrDefault("Version")
  valid_616052 = validateParameter(valid_616052, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616052 != nil:
    section.add "Version", valid_616052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616053 = header.getOrDefault("X-Amz-Signature")
  valid_616053 = validateParameter(valid_616053, JString, required = false,
                                 default = nil)
  if valid_616053 != nil:
    section.add "X-Amz-Signature", valid_616053
  var valid_616054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616054 = validateParameter(valid_616054, JString, required = false,
                                 default = nil)
  if valid_616054 != nil:
    section.add "X-Amz-Content-Sha256", valid_616054
  var valid_616055 = header.getOrDefault("X-Amz-Date")
  valid_616055 = validateParameter(valid_616055, JString, required = false,
                                 default = nil)
  if valid_616055 != nil:
    section.add "X-Amz-Date", valid_616055
  var valid_616056 = header.getOrDefault("X-Amz-Credential")
  valid_616056 = validateParameter(valid_616056, JString, required = false,
                                 default = nil)
  if valid_616056 != nil:
    section.add "X-Amz-Credential", valid_616056
  var valid_616057 = header.getOrDefault("X-Amz-Security-Token")
  valid_616057 = validateParameter(valid_616057, JString, required = false,
                                 default = nil)
  if valid_616057 != nil:
    section.add "X-Amz-Security-Token", valid_616057
  var valid_616058 = header.getOrDefault("X-Amz-Algorithm")
  valid_616058 = validateParameter(valid_616058, JString, required = false,
                                 default = nil)
  if valid_616058 != nil:
    section.add "X-Amz-Algorithm", valid_616058
  var valid_616059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616059 = validateParameter(valid_616059, JString, required = false,
                                 default = nil)
  if valid_616059 != nil:
    section.add "X-Amz-SignedHeaders", valid_616059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616060: Call_GetResetDBParameterGroup_616045; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_616060.validator(path, query, header, formData, body)
  let scheme = call_616060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616060.url(scheme.get, call_616060.host, call_616060.base,
                         call_616060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616060, url, valid)

proc call*(call_616061: Call_GetResetDBParameterGroup_616045;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616062 = newJObject()
  add(query_616062, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_616062.add "Parameters", Parameters
  add(query_616062, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_616062, "Action", newJString(Action))
  add(query_616062, "Version", newJString(Version))
  result = call_616061.call(nil, query_616062, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_616045(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_616046, base: "/",
    url: url_GetResetDBParameterGroup_616047, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromS3_616126 = ref object of OpenApiRestCall_610658
proc url_PostRestoreDBClusterFromS3_616128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromS3_616127(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616129 = query.getOrDefault("Action")
  valid_616129 = validateParameter(valid_616129, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_616129 != nil:
    section.add "Action", valid_616129
  var valid_616130 = query.getOrDefault("Version")
  valid_616130 = validateParameter(valid_616130, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616130 != nil:
    section.add "Version", valid_616130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616131 = header.getOrDefault("X-Amz-Signature")
  valid_616131 = validateParameter(valid_616131, JString, required = false,
                                 default = nil)
  if valid_616131 != nil:
    section.add "X-Amz-Signature", valid_616131
  var valid_616132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616132 = validateParameter(valid_616132, JString, required = false,
                                 default = nil)
  if valid_616132 != nil:
    section.add "X-Amz-Content-Sha256", valid_616132
  var valid_616133 = header.getOrDefault("X-Amz-Date")
  valid_616133 = validateParameter(valid_616133, JString, required = false,
                                 default = nil)
  if valid_616133 != nil:
    section.add "X-Amz-Date", valid_616133
  var valid_616134 = header.getOrDefault("X-Amz-Credential")
  valid_616134 = validateParameter(valid_616134, JString, required = false,
                                 default = nil)
  if valid_616134 != nil:
    section.add "X-Amz-Credential", valid_616134
  var valid_616135 = header.getOrDefault("X-Amz-Security-Token")
  valid_616135 = validateParameter(valid_616135, JString, required = false,
                                 default = nil)
  if valid_616135 != nil:
    section.add "X-Amz-Security-Token", valid_616135
  var valid_616136 = header.getOrDefault("X-Amz-Algorithm")
  valid_616136 = validateParameter(valid_616136, JString, required = false,
                                 default = nil)
  if valid_616136 != nil:
    section.add "X-Amz-Algorithm", valid_616136
  var valid_616137 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616137 = validateParameter(valid_616137, JString, required = false,
                                 default = nil)
  if valid_616137 != nil:
    section.add "X-Amz-SignedHeaders", valid_616137
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_616138 = formData.getOrDefault("S3Prefix")
  valid_616138 = validateParameter(valid_616138, JString, required = false,
                                 default = nil)
  if valid_616138 != nil:
    section.add "S3Prefix", valid_616138
  var valid_616139 = formData.getOrDefault("Port")
  valid_616139 = validateParameter(valid_616139, JInt, required = false, default = nil)
  if valid_616139 != nil:
    section.add "Port", valid_616139
  var valid_616140 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_616140 = validateParameter(valid_616140, JString, required = false,
                                 default = nil)
  if valid_616140 != nil:
    section.add "PreferredMaintenanceWindow", valid_616140
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_616141 = formData.getOrDefault("S3IngestionRoleArn")
  valid_616141 = validateParameter(valid_616141, JString, required = true,
                                 default = nil)
  if valid_616141 != nil:
    section.add "S3IngestionRoleArn", valid_616141
  var valid_616142 = formData.getOrDefault("PreferredBackupWindow")
  valid_616142 = validateParameter(valid_616142, JString, required = false,
                                 default = nil)
  if valid_616142 != nil:
    section.add "PreferredBackupWindow", valid_616142
  var valid_616143 = formData.getOrDefault("MasterUserPassword")
  valid_616143 = validateParameter(valid_616143, JString, required = true,
                                 default = nil)
  if valid_616143 != nil:
    section.add "MasterUserPassword", valid_616143
  var valid_616144 = formData.getOrDefault("MasterUsername")
  valid_616144 = validateParameter(valid_616144, JString, required = true,
                                 default = nil)
  if valid_616144 != nil:
    section.add "MasterUsername", valid_616144
  var valid_616145 = formData.getOrDefault("SourceEngine")
  valid_616145 = validateParameter(valid_616145, JString, required = true,
                                 default = nil)
  if valid_616145 != nil:
    section.add "SourceEngine", valid_616145
  var valid_616146 = formData.getOrDefault("EngineVersion")
  valid_616146 = validateParameter(valid_616146, JString, required = false,
                                 default = nil)
  if valid_616146 != nil:
    section.add "EngineVersion", valid_616146
  var valid_616147 = formData.getOrDefault("BacktrackWindow")
  valid_616147 = validateParameter(valid_616147, JInt, required = false, default = nil)
  if valid_616147 != nil:
    section.add "BacktrackWindow", valid_616147
  var valid_616148 = formData.getOrDefault("DatabaseName")
  valid_616148 = validateParameter(valid_616148, JString, required = false,
                                 default = nil)
  if valid_616148 != nil:
    section.add "DatabaseName", valid_616148
  var valid_616149 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_616149 = validateParameter(valid_616149, JArray, required = false,
                                 default = nil)
  if valid_616149 != nil:
    section.add "VpcSecurityGroupIds", valid_616149
  var valid_616150 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616150 = validateParameter(valid_616150, JBool, required = false, default = nil)
  if valid_616150 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616150
  var valid_616151 = formData.getOrDefault("AvailabilityZones")
  valid_616151 = validateParameter(valid_616151, JArray, required = false,
                                 default = nil)
  if valid_616151 != nil:
    section.add "AvailabilityZones", valid_616151
  var valid_616152 = formData.getOrDefault("BackupRetentionPeriod")
  valid_616152 = validateParameter(valid_616152, JInt, required = false, default = nil)
  if valid_616152 != nil:
    section.add "BackupRetentionPeriod", valid_616152
  var valid_616153 = formData.getOrDefault("Engine")
  valid_616153 = validateParameter(valid_616153, JString, required = true,
                                 default = nil)
  if valid_616153 != nil:
    section.add "Engine", valid_616153
  var valid_616154 = formData.getOrDefault("KmsKeyId")
  valid_616154 = validateParameter(valid_616154, JString, required = false,
                                 default = nil)
  if valid_616154 != nil:
    section.add "KmsKeyId", valid_616154
  var valid_616155 = formData.getOrDefault("S3BucketName")
  valid_616155 = validateParameter(valid_616155, JString, required = true,
                                 default = nil)
  if valid_616155 != nil:
    section.add "S3BucketName", valid_616155
  var valid_616156 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_616156 = validateParameter(valid_616156, JArray, required = false,
                                 default = nil)
  if valid_616156 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616156
  var valid_616157 = formData.getOrDefault("SourceEngineVersion")
  valid_616157 = validateParameter(valid_616157, JString, required = true,
                                 default = nil)
  if valid_616157 != nil:
    section.add "SourceEngineVersion", valid_616157
  var valid_616158 = formData.getOrDefault("Tags")
  valid_616158 = validateParameter(valid_616158, JArray, required = false,
                                 default = nil)
  if valid_616158 != nil:
    section.add "Tags", valid_616158
  var valid_616159 = formData.getOrDefault("DBSubnetGroupName")
  valid_616159 = validateParameter(valid_616159, JString, required = false,
                                 default = nil)
  if valid_616159 != nil:
    section.add "DBSubnetGroupName", valid_616159
  var valid_616160 = formData.getOrDefault("OptionGroupName")
  valid_616160 = validateParameter(valid_616160, JString, required = false,
                                 default = nil)
  if valid_616160 != nil:
    section.add "OptionGroupName", valid_616160
  var valid_616161 = formData.getOrDefault("CharacterSetName")
  valid_616161 = validateParameter(valid_616161, JString, required = false,
                                 default = nil)
  if valid_616161 != nil:
    section.add "CharacterSetName", valid_616161
  var valid_616162 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_616162 = validateParameter(valid_616162, JString, required = false,
                                 default = nil)
  if valid_616162 != nil:
    section.add "DBClusterParameterGroupName", valid_616162
  var valid_616163 = formData.getOrDefault("StorageEncrypted")
  valid_616163 = validateParameter(valid_616163, JBool, required = false, default = nil)
  if valid_616163 != nil:
    section.add "StorageEncrypted", valid_616163
  var valid_616164 = formData.getOrDefault("DBClusterIdentifier")
  valid_616164 = validateParameter(valid_616164, JString, required = true,
                                 default = nil)
  if valid_616164 != nil:
    section.add "DBClusterIdentifier", valid_616164
  var valid_616165 = formData.getOrDefault("DeletionProtection")
  valid_616165 = validateParameter(valid_616165, JBool, required = false, default = nil)
  if valid_616165 != nil:
    section.add "DeletionProtection", valid_616165
  var valid_616166 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_616166 = validateParameter(valid_616166, JBool, required = false, default = nil)
  if valid_616166 != nil:
    section.add "CopyTagsToSnapshot", valid_616166
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616167: Call_PostRestoreDBClusterFromS3_616126; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616167.validator(path, query, header, formData, body)
  let scheme = call_616167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616167.url(scheme.get, call_616167.host, call_616167.base,
                         call_616167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616167, url, valid)

proc call*(call_616168: Call_PostRestoreDBClusterFromS3_616126;
          S3IngestionRoleArn: string; MasterUserPassword: string;
          MasterUsername: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string;
          DBClusterIdentifier: string; S3Prefix: string = ""; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          BacktrackWindow: int = 0; DatabaseName: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          KmsKeyId: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterFromS3"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_616169 = newJObject()
  var formData_616170 = newJObject()
  add(formData_616170, "S3Prefix", newJString(S3Prefix))
  add(formData_616170, "Port", newJInt(Port))
  add(formData_616170, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_616170, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_616170, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_616170, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_616170, "MasterUsername", newJString(MasterUsername))
  add(formData_616170, "SourceEngine", newJString(SourceEngine))
  add(formData_616170, "EngineVersion", newJString(EngineVersion))
  add(formData_616170, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_616170, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_616170.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_616170, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_616170.add "AvailabilityZones", AvailabilityZones
  add(formData_616170, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_616170, "Engine", newJString(Engine))
  add(formData_616170, "KmsKeyId", newJString(KmsKeyId))
  add(formData_616170, "S3BucketName", newJString(S3BucketName))
  if EnableCloudwatchLogsExports != nil:
    formData_616170.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_616170, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_616169, "Action", newJString(Action))
  if Tags != nil:
    formData_616170.add "Tags", Tags
  add(formData_616170, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_616170, "OptionGroupName", newJString(OptionGroupName))
  add(formData_616170, "CharacterSetName", newJString(CharacterSetName))
  add(formData_616170, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_616169, "Version", newJString(Version))
  add(formData_616170, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_616170, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_616170, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_616170, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_616168.call(nil, query_616169, nil, formData_616170, nil)

var postRestoreDBClusterFromS3* = Call_PostRestoreDBClusterFromS3_616126(
    name: "postRestoreDBClusterFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_PostRestoreDBClusterFromS3_616127, base: "/",
    url: url_PostRestoreDBClusterFromS3_616128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromS3_616082 = ref object of OpenApiRestCall_610658
proc url_GetRestoreDBClusterFromS3_616084(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromS3_616083(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: JString (required)
  section = newJObject()
  var valid_616085 = query.getOrDefault("DatabaseName")
  valid_616085 = validateParameter(valid_616085, JString, required = false,
                                 default = nil)
  if valid_616085 != nil:
    section.add "DatabaseName", valid_616085
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_616086 = query.getOrDefault("SourceEngineVersion")
  valid_616086 = validateParameter(valid_616086, JString, required = true,
                                 default = nil)
  if valid_616086 != nil:
    section.add "SourceEngineVersion", valid_616086
  var valid_616087 = query.getOrDefault("StorageEncrypted")
  valid_616087 = validateParameter(valid_616087, JBool, required = false, default = nil)
  if valid_616087 != nil:
    section.add "StorageEncrypted", valid_616087
  var valid_616088 = query.getOrDefault("Engine")
  valid_616088 = validateParameter(valid_616088, JString, required = true,
                                 default = nil)
  if valid_616088 != nil:
    section.add "Engine", valid_616088
  var valid_616089 = query.getOrDefault("SourceEngine")
  valid_616089 = validateParameter(valid_616089, JString, required = true,
                                 default = nil)
  if valid_616089 != nil:
    section.add "SourceEngine", valid_616089
  var valid_616090 = query.getOrDefault("DeletionProtection")
  valid_616090 = validateParameter(valid_616090, JBool, required = false, default = nil)
  if valid_616090 != nil:
    section.add "DeletionProtection", valid_616090
  var valid_616091 = query.getOrDefault("CharacterSetName")
  valid_616091 = validateParameter(valid_616091, JString, required = false,
                                 default = nil)
  if valid_616091 != nil:
    section.add "CharacterSetName", valid_616091
  var valid_616092 = query.getOrDefault("S3Prefix")
  valid_616092 = validateParameter(valid_616092, JString, required = false,
                                 default = nil)
  if valid_616092 != nil:
    section.add "S3Prefix", valid_616092
  var valid_616093 = query.getOrDefault("CopyTagsToSnapshot")
  valid_616093 = validateParameter(valid_616093, JBool, required = false, default = nil)
  if valid_616093 != nil:
    section.add "CopyTagsToSnapshot", valid_616093
  var valid_616094 = query.getOrDefault("Tags")
  valid_616094 = validateParameter(valid_616094, JArray, required = false,
                                 default = nil)
  if valid_616094 != nil:
    section.add "Tags", valid_616094
  var valid_616095 = query.getOrDefault("KmsKeyId")
  valid_616095 = validateParameter(valid_616095, JString, required = false,
                                 default = nil)
  if valid_616095 != nil:
    section.add "KmsKeyId", valid_616095
  var valid_616096 = query.getOrDefault("DBClusterIdentifier")
  valid_616096 = validateParameter(valid_616096, JString, required = true,
                                 default = nil)
  if valid_616096 != nil:
    section.add "DBClusterIdentifier", valid_616096
  var valid_616097 = query.getOrDefault("BacktrackWindow")
  valid_616097 = validateParameter(valid_616097, JInt, required = false, default = nil)
  if valid_616097 != nil:
    section.add "BacktrackWindow", valid_616097
  var valid_616098 = query.getOrDefault("DBClusterParameterGroupName")
  valid_616098 = validateParameter(valid_616098, JString, required = false,
                                 default = nil)
  if valid_616098 != nil:
    section.add "DBClusterParameterGroupName", valid_616098
  var valid_616099 = query.getOrDefault("S3BucketName")
  valid_616099 = validateParameter(valid_616099, JString, required = true,
                                 default = nil)
  if valid_616099 != nil:
    section.add "S3BucketName", valid_616099
  var valid_616100 = query.getOrDefault("AvailabilityZones")
  valid_616100 = validateParameter(valid_616100, JArray, required = false,
                                 default = nil)
  if valid_616100 != nil:
    section.add "AvailabilityZones", valid_616100
  var valid_616101 = query.getOrDefault("MasterUsername")
  valid_616101 = validateParameter(valid_616101, JString, required = true,
                                 default = nil)
  if valid_616101 != nil:
    section.add "MasterUsername", valid_616101
  var valid_616102 = query.getOrDefault("BackupRetentionPeriod")
  valid_616102 = validateParameter(valid_616102, JInt, required = false, default = nil)
  if valid_616102 != nil:
    section.add "BackupRetentionPeriod", valid_616102
  var valid_616103 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616103 = validateParameter(valid_616103, JBool, required = false, default = nil)
  if valid_616103 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616103
  var valid_616104 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_616104 = validateParameter(valid_616104, JArray, required = false,
                                 default = nil)
  if valid_616104 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616104
  var valid_616105 = query.getOrDefault("EngineVersion")
  valid_616105 = validateParameter(valid_616105, JString, required = false,
                                 default = nil)
  if valid_616105 != nil:
    section.add "EngineVersion", valid_616105
  var valid_616106 = query.getOrDefault("Action")
  valid_616106 = validateParameter(valid_616106, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_616106 != nil:
    section.add "Action", valid_616106
  var valid_616107 = query.getOrDefault("Port")
  valid_616107 = validateParameter(valid_616107, JInt, required = false, default = nil)
  if valid_616107 != nil:
    section.add "Port", valid_616107
  var valid_616108 = query.getOrDefault("VpcSecurityGroupIds")
  valid_616108 = validateParameter(valid_616108, JArray, required = false,
                                 default = nil)
  if valid_616108 != nil:
    section.add "VpcSecurityGroupIds", valid_616108
  var valid_616109 = query.getOrDefault("MasterUserPassword")
  valid_616109 = validateParameter(valid_616109, JString, required = true,
                                 default = nil)
  if valid_616109 != nil:
    section.add "MasterUserPassword", valid_616109
  var valid_616110 = query.getOrDefault("OptionGroupName")
  valid_616110 = validateParameter(valid_616110, JString, required = false,
                                 default = nil)
  if valid_616110 != nil:
    section.add "OptionGroupName", valid_616110
  var valid_616111 = query.getOrDefault("DBSubnetGroupName")
  valid_616111 = validateParameter(valid_616111, JString, required = false,
                                 default = nil)
  if valid_616111 != nil:
    section.add "DBSubnetGroupName", valid_616111
  var valid_616112 = query.getOrDefault("PreferredBackupWindow")
  valid_616112 = validateParameter(valid_616112, JString, required = false,
                                 default = nil)
  if valid_616112 != nil:
    section.add "PreferredBackupWindow", valid_616112
  var valid_616113 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_616113 = validateParameter(valid_616113, JString, required = false,
                                 default = nil)
  if valid_616113 != nil:
    section.add "PreferredMaintenanceWindow", valid_616113
  var valid_616114 = query.getOrDefault("S3IngestionRoleArn")
  valid_616114 = validateParameter(valid_616114, JString, required = true,
                                 default = nil)
  if valid_616114 != nil:
    section.add "S3IngestionRoleArn", valid_616114
  var valid_616115 = query.getOrDefault("Version")
  valid_616115 = validateParameter(valid_616115, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616115 != nil:
    section.add "Version", valid_616115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616116 = header.getOrDefault("X-Amz-Signature")
  valid_616116 = validateParameter(valid_616116, JString, required = false,
                                 default = nil)
  if valid_616116 != nil:
    section.add "X-Amz-Signature", valid_616116
  var valid_616117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616117 = validateParameter(valid_616117, JString, required = false,
                                 default = nil)
  if valid_616117 != nil:
    section.add "X-Amz-Content-Sha256", valid_616117
  var valid_616118 = header.getOrDefault("X-Amz-Date")
  valid_616118 = validateParameter(valid_616118, JString, required = false,
                                 default = nil)
  if valid_616118 != nil:
    section.add "X-Amz-Date", valid_616118
  var valid_616119 = header.getOrDefault("X-Amz-Credential")
  valid_616119 = validateParameter(valid_616119, JString, required = false,
                                 default = nil)
  if valid_616119 != nil:
    section.add "X-Amz-Credential", valid_616119
  var valid_616120 = header.getOrDefault("X-Amz-Security-Token")
  valid_616120 = validateParameter(valid_616120, JString, required = false,
                                 default = nil)
  if valid_616120 != nil:
    section.add "X-Amz-Security-Token", valid_616120
  var valid_616121 = header.getOrDefault("X-Amz-Algorithm")
  valid_616121 = validateParameter(valid_616121, JString, required = false,
                                 default = nil)
  if valid_616121 != nil:
    section.add "X-Amz-Algorithm", valid_616121
  var valid_616122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616122 = validateParameter(valid_616122, JString, required = false,
                                 default = nil)
  if valid_616122 != nil:
    section.add "X-Amz-SignedHeaders", valid_616122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616123: Call_GetRestoreDBClusterFromS3_616082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616123.validator(path, query, header, formData, body)
  let scheme = call_616123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616123.url(scheme.get, call_616123.host, call_616123.base,
                         call_616123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616123, url, valid)

proc call*(call_616124: Call_GetRestoreDBClusterFromS3_616082;
          SourceEngineVersion: string; Engine: string; SourceEngine: string;
          DBClusterIdentifier: string; S3BucketName: string; MasterUsername: string;
          MasterUserPassword: string; S3IngestionRoleArn: string;
          DatabaseName: string = ""; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CharacterSetName: string = "";
          S3Prefix: string = ""; CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil;
          KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromS3"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: string (required)
  var query_616125 = newJObject()
  add(query_616125, "DatabaseName", newJString(DatabaseName))
  add(query_616125, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_616125, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_616125, "Engine", newJString(Engine))
  add(query_616125, "SourceEngine", newJString(SourceEngine))
  add(query_616125, "DeletionProtection", newJBool(DeletionProtection))
  add(query_616125, "CharacterSetName", newJString(CharacterSetName))
  add(query_616125, "S3Prefix", newJString(S3Prefix))
  add(query_616125, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_616125.add "Tags", Tags
  add(query_616125, "KmsKeyId", newJString(KmsKeyId))
  add(query_616125, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_616125, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_616125, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_616125, "S3BucketName", newJString(S3BucketName))
  if AvailabilityZones != nil:
    query_616125.add "AvailabilityZones", AvailabilityZones
  add(query_616125, "MasterUsername", newJString(MasterUsername))
  add(query_616125, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_616125, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_616125.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_616125, "EngineVersion", newJString(EngineVersion))
  add(query_616125, "Action", newJString(Action))
  add(query_616125, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_616125.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_616125, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_616125, "OptionGroupName", newJString(OptionGroupName))
  add(query_616125, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_616125, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_616125, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_616125, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_616125, "Version", newJString(Version))
  result = call_616124.call(nil, query_616125, nil, nil, nil)

var getRestoreDBClusterFromS3* = Call_GetRestoreDBClusterFromS3_616082(
    name: "getRestoreDBClusterFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_GetRestoreDBClusterFromS3_616083, base: "/",
    url: url_GetRestoreDBClusterFromS3_616084,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_616210 = ref object of OpenApiRestCall_610658
proc url_PostRestoreDBClusterFromSnapshot_616212(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_616211(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot. This action only applies to Aurora DB clusters.</p> <p>The target DB cluster is created from the source snapshot with a default configuration. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616213 = query.getOrDefault("Action")
  valid_616213 = validateParameter(valid_616213, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_616213 != nil:
    section.add "Action", valid_616213
  var valid_616214 = query.getOrDefault("Version")
  valid_616214 = validateParameter(valid_616214, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616214 != nil:
    section.add "Version", valid_616214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616215 = header.getOrDefault("X-Amz-Signature")
  valid_616215 = validateParameter(valid_616215, JString, required = false,
                                 default = nil)
  if valid_616215 != nil:
    section.add "X-Amz-Signature", valid_616215
  var valid_616216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616216 = validateParameter(valid_616216, JString, required = false,
                                 default = nil)
  if valid_616216 != nil:
    section.add "X-Amz-Content-Sha256", valid_616216
  var valid_616217 = header.getOrDefault("X-Amz-Date")
  valid_616217 = validateParameter(valid_616217, JString, required = false,
                                 default = nil)
  if valid_616217 != nil:
    section.add "X-Amz-Date", valid_616217
  var valid_616218 = header.getOrDefault("X-Amz-Credential")
  valid_616218 = validateParameter(valid_616218, JString, required = false,
                                 default = nil)
  if valid_616218 != nil:
    section.add "X-Amz-Credential", valid_616218
  var valid_616219 = header.getOrDefault("X-Amz-Security-Token")
  valid_616219 = validateParameter(valid_616219, JString, required = false,
                                 default = nil)
  if valid_616219 != nil:
    section.add "X-Amz-Security-Token", valid_616219
  var valid_616220 = header.getOrDefault("X-Amz-Algorithm")
  valid_616220 = validateParameter(valid_616220, JString, required = false,
                                 default = nil)
  if valid_616220 != nil:
    section.add "X-Amz-Algorithm", valid_616220
  var valid_616221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616221 = validateParameter(valid_616221, JString, required = false,
                                 default = nil)
  if valid_616221 != nil:
    section.add "X-Amz-SignedHeaders", valid_616221
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_616222 = formData.getOrDefault("Port")
  valid_616222 = validateParameter(valid_616222, JInt, required = false, default = nil)
  if valid_616222 != nil:
    section.add "Port", valid_616222
  var valid_616223 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_616223 = validateParameter(valid_616223, JString, required = false,
                                 default = nil)
  if valid_616223 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_616223
  var valid_616224 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_616224 = validateParameter(valid_616224, JString, required = false,
                                 default = nil)
  if valid_616224 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_616224
  var valid_616225 = formData.getOrDefault("EngineVersion")
  valid_616225 = validateParameter(valid_616225, JString, required = false,
                                 default = nil)
  if valid_616225 != nil:
    section.add "EngineVersion", valid_616225
  var valid_616226 = formData.getOrDefault("BacktrackWindow")
  valid_616226 = validateParameter(valid_616226, JInt, required = false, default = nil)
  if valid_616226 != nil:
    section.add "BacktrackWindow", valid_616226
  var valid_616227 = formData.getOrDefault("DatabaseName")
  valid_616227 = validateParameter(valid_616227, JString, required = false,
                                 default = nil)
  if valid_616227 != nil:
    section.add "DatabaseName", valid_616227
  var valid_616228 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_616228 = validateParameter(valid_616228, JArray, required = false,
                                 default = nil)
  if valid_616228 != nil:
    section.add "VpcSecurityGroupIds", valid_616228
  var valid_616229 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616229 = validateParameter(valid_616229, JBool, required = false, default = nil)
  if valid_616229 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616229
  var valid_616230 = formData.getOrDefault("AvailabilityZones")
  valid_616230 = validateParameter(valid_616230, JArray, required = false,
                                 default = nil)
  if valid_616230 != nil:
    section.add "AvailabilityZones", valid_616230
  var valid_616231 = formData.getOrDefault("KmsKeyId")
  valid_616231 = validateParameter(valid_616231, JString, required = false,
                                 default = nil)
  if valid_616231 != nil:
    section.add "KmsKeyId", valid_616231
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_616232 = formData.getOrDefault("Engine")
  valid_616232 = validateParameter(valid_616232, JString, required = true,
                                 default = nil)
  if valid_616232 != nil:
    section.add "Engine", valid_616232
  var valid_616233 = formData.getOrDefault("EngineMode")
  valid_616233 = validateParameter(valid_616233, JString, required = false,
                                 default = nil)
  if valid_616233 != nil:
    section.add "EngineMode", valid_616233
  var valid_616234 = formData.getOrDefault("SnapshotIdentifier")
  valid_616234 = validateParameter(valid_616234, JString, required = true,
                                 default = nil)
  if valid_616234 != nil:
    section.add "SnapshotIdentifier", valid_616234
  var valid_616235 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_616235 = validateParameter(valid_616235, JArray, required = false,
                                 default = nil)
  if valid_616235 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616235
  var valid_616236 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_616236 = validateParameter(valid_616236, JString, required = false,
                                 default = nil)
  if valid_616236 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_616236
  var valid_616237 = formData.getOrDefault("Tags")
  valid_616237 = validateParameter(valid_616237, JArray, required = false,
                                 default = nil)
  if valid_616237 != nil:
    section.add "Tags", valid_616237
  var valid_616238 = formData.getOrDefault("DBSubnetGroupName")
  valid_616238 = validateParameter(valid_616238, JString, required = false,
                                 default = nil)
  if valid_616238 != nil:
    section.add "DBSubnetGroupName", valid_616238
  var valid_616239 = formData.getOrDefault("OptionGroupName")
  valid_616239 = validateParameter(valid_616239, JString, required = false,
                                 default = nil)
  if valid_616239 != nil:
    section.add "OptionGroupName", valid_616239
  var valid_616240 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_616240 = validateParameter(valid_616240, JString, required = false,
                                 default = nil)
  if valid_616240 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_616240
  var valid_616241 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_616241 = validateParameter(valid_616241, JString, required = false,
                                 default = nil)
  if valid_616241 != nil:
    section.add "DBClusterParameterGroupName", valid_616241
  var valid_616242 = formData.getOrDefault("DBClusterIdentifier")
  valid_616242 = validateParameter(valid_616242, JString, required = true,
                                 default = nil)
  if valid_616242 != nil:
    section.add "DBClusterIdentifier", valid_616242
  var valid_616243 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_616243 = validateParameter(valid_616243, JString, required = false,
                                 default = nil)
  if valid_616243 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_616243
  var valid_616244 = formData.getOrDefault("DeletionProtection")
  valid_616244 = validateParameter(valid_616244, JBool, required = false, default = nil)
  if valid_616244 != nil:
    section.add "DeletionProtection", valid_616244
  var valid_616245 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_616245 = validateParameter(valid_616245, JBool, required = false, default = nil)
  if valid_616245 != nil:
    section.add "CopyTagsToSnapshot", valid_616245
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616246: Call_PostRestoreDBClusterFromSnapshot_616210;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot. This action only applies to Aurora DB clusters.</p> <p>The target DB cluster is created from the source snapshot with a default configuration. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_616246.validator(path, query, header, formData, body)
  let scheme = call_616246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616246.url(scheme.get, call_616246.host, call_616246.base,
                         call_616246.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616246, url, valid)

proc call*(call_616247: Call_PostRestoreDBClusterFromSnapshot_616210;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; KmsKeyId: string = "";
          EngineMode: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot. This action only applies to Aurora DB clusters.</p> <p>The target DB cluster is created from the source snapshot with a default configuration. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_616248 = newJObject()
  var formData_616249 = newJObject()
  add(formData_616249, "Port", newJInt(Port))
  add(formData_616249, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_616249, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_616249, "EngineVersion", newJString(EngineVersion))
  add(formData_616249, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_616249, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_616249.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_616249, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_616249.add "AvailabilityZones", AvailabilityZones
  add(formData_616249, "KmsKeyId", newJString(KmsKeyId))
  add(formData_616249, "Engine", newJString(Engine))
  add(formData_616249, "EngineMode", newJString(EngineMode))
  add(formData_616249, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_616249.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_616249, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_616248, "Action", newJString(Action))
  if Tags != nil:
    formData_616249.add "Tags", Tags
  add(formData_616249, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_616249, "OptionGroupName", newJString(OptionGroupName))
  add(formData_616249, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_616249, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_616248, "Version", newJString(Version))
  add(formData_616249, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_616249, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_616249, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_616249, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_616247.call(nil, query_616248, nil, formData_616249, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_616210(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_616211, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_616212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_616171 = ref object of OpenApiRestCall_610658
proc url_GetRestoreDBClusterFromSnapshot_616173(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_616172(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot. This action only applies to Aurora DB clusters.</p> <p>The target DB cluster is created from the source snapshot with a default configuration. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_616174 = query.getOrDefault("DatabaseName")
  valid_616174 = validateParameter(valid_616174, JString, required = false,
                                 default = nil)
  if valid_616174 != nil:
    section.add "DatabaseName", valid_616174
  var valid_616175 = query.getOrDefault("DeletionProtection")
  valid_616175 = validateParameter(valid_616175, JBool, required = false, default = nil)
  if valid_616175 != nil:
    section.add "DeletionProtection", valid_616175
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_616176 = query.getOrDefault("Engine")
  valid_616176 = validateParameter(valid_616176, JString, required = true,
                                 default = nil)
  if valid_616176 != nil:
    section.add "Engine", valid_616176
  var valid_616177 = query.getOrDefault("CopyTagsToSnapshot")
  valid_616177 = validateParameter(valid_616177, JBool, required = false, default = nil)
  if valid_616177 != nil:
    section.add "CopyTagsToSnapshot", valid_616177
  var valid_616178 = query.getOrDefault("SnapshotIdentifier")
  valid_616178 = validateParameter(valid_616178, JString, required = true,
                                 default = nil)
  if valid_616178 != nil:
    section.add "SnapshotIdentifier", valid_616178
  var valid_616179 = query.getOrDefault("Tags")
  valid_616179 = validateParameter(valid_616179, JArray, required = false,
                                 default = nil)
  if valid_616179 != nil:
    section.add "Tags", valid_616179
  var valid_616180 = query.getOrDefault("KmsKeyId")
  valid_616180 = validateParameter(valid_616180, JString, required = false,
                                 default = nil)
  if valid_616180 != nil:
    section.add "KmsKeyId", valid_616180
  var valid_616181 = query.getOrDefault("DBClusterIdentifier")
  valid_616181 = validateParameter(valid_616181, JString, required = true,
                                 default = nil)
  if valid_616181 != nil:
    section.add "DBClusterIdentifier", valid_616181
  var valid_616182 = query.getOrDefault("BacktrackWindow")
  valid_616182 = validateParameter(valid_616182, JInt, required = false, default = nil)
  if valid_616182 != nil:
    section.add "BacktrackWindow", valid_616182
  var valid_616183 = query.getOrDefault("EngineMode")
  valid_616183 = validateParameter(valid_616183, JString, required = false,
                                 default = nil)
  if valid_616183 != nil:
    section.add "EngineMode", valid_616183
  var valid_616184 = query.getOrDefault("DBClusterParameterGroupName")
  valid_616184 = validateParameter(valid_616184, JString, required = false,
                                 default = nil)
  if valid_616184 != nil:
    section.add "DBClusterParameterGroupName", valid_616184
  var valid_616185 = query.getOrDefault("AvailabilityZones")
  valid_616185 = validateParameter(valid_616185, JArray, required = false,
                                 default = nil)
  if valid_616185 != nil:
    section.add "AvailabilityZones", valid_616185
  var valid_616186 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_616186 = validateParameter(valid_616186, JString, required = false,
                                 default = nil)
  if valid_616186 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_616186
  var valid_616187 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_616187 = validateParameter(valid_616187, JString, required = false,
                                 default = nil)
  if valid_616187 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_616187
  var valid_616188 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_616188 = validateParameter(valid_616188, JString, required = false,
                                 default = nil)
  if valid_616188 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_616188
  var valid_616189 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616189 = validateParameter(valid_616189, JBool, required = false, default = nil)
  if valid_616189 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616189
  var valid_616190 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_616190 = validateParameter(valid_616190, JString, required = false,
                                 default = nil)
  if valid_616190 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_616190
  var valid_616191 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_616191 = validateParameter(valid_616191, JArray, required = false,
                                 default = nil)
  if valid_616191 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616191
  var valid_616192 = query.getOrDefault("EngineVersion")
  valid_616192 = validateParameter(valid_616192, JString, required = false,
                                 default = nil)
  if valid_616192 != nil:
    section.add "EngineVersion", valid_616192
  var valid_616193 = query.getOrDefault("Action")
  valid_616193 = validateParameter(valid_616193, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_616193 != nil:
    section.add "Action", valid_616193
  var valid_616194 = query.getOrDefault("Port")
  valid_616194 = validateParameter(valid_616194, JInt, required = false, default = nil)
  if valid_616194 != nil:
    section.add "Port", valid_616194
  var valid_616195 = query.getOrDefault("VpcSecurityGroupIds")
  valid_616195 = validateParameter(valid_616195, JArray, required = false,
                                 default = nil)
  if valid_616195 != nil:
    section.add "VpcSecurityGroupIds", valid_616195
  var valid_616196 = query.getOrDefault("OptionGroupName")
  valid_616196 = validateParameter(valid_616196, JString, required = false,
                                 default = nil)
  if valid_616196 != nil:
    section.add "OptionGroupName", valid_616196
  var valid_616197 = query.getOrDefault("DBSubnetGroupName")
  valid_616197 = validateParameter(valid_616197, JString, required = false,
                                 default = nil)
  if valid_616197 != nil:
    section.add "DBSubnetGroupName", valid_616197
  var valid_616198 = query.getOrDefault("Version")
  valid_616198 = validateParameter(valid_616198, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616198 != nil:
    section.add "Version", valid_616198
  var valid_616199 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_616199 = validateParameter(valid_616199, JString, required = false,
                                 default = nil)
  if valid_616199 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_616199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616200 = header.getOrDefault("X-Amz-Signature")
  valid_616200 = validateParameter(valid_616200, JString, required = false,
                                 default = nil)
  if valid_616200 != nil:
    section.add "X-Amz-Signature", valid_616200
  var valid_616201 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616201 = validateParameter(valid_616201, JString, required = false,
                                 default = nil)
  if valid_616201 != nil:
    section.add "X-Amz-Content-Sha256", valid_616201
  var valid_616202 = header.getOrDefault("X-Amz-Date")
  valid_616202 = validateParameter(valid_616202, JString, required = false,
                                 default = nil)
  if valid_616202 != nil:
    section.add "X-Amz-Date", valid_616202
  var valid_616203 = header.getOrDefault("X-Amz-Credential")
  valid_616203 = validateParameter(valid_616203, JString, required = false,
                                 default = nil)
  if valid_616203 != nil:
    section.add "X-Amz-Credential", valid_616203
  var valid_616204 = header.getOrDefault("X-Amz-Security-Token")
  valid_616204 = validateParameter(valid_616204, JString, required = false,
                                 default = nil)
  if valid_616204 != nil:
    section.add "X-Amz-Security-Token", valid_616204
  var valid_616205 = header.getOrDefault("X-Amz-Algorithm")
  valid_616205 = validateParameter(valid_616205, JString, required = false,
                                 default = nil)
  if valid_616205 != nil:
    section.add "X-Amz-Algorithm", valid_616205
  var valid_616206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616206 = validateParameter(valid_616206, JString, required = false,
                                 default = nil)
  if valid_616206 != nil:
    section.add "X-Amz-SignedHeaders", valid_616206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616207: Call_GetRestoreDBClusterFromSnapshot_616171;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot. This action only applies to Aurora DB clusters.</p> <p>The target DB cluster is created from the source snapshot with a default configuration. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_616207.validator(path, query, header, formData, body)
  let scheme = call_616207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616207.url(scheme.get, call_616207.host, call_616207.base,
                         call_616207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616207, url, valid)

proc call*(call_616208: Call_GetRestoreDBClusterFromSnapshot_616171;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          DatabaseName: string = ""; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil; KmsKeyId: string = "";
          BacktrackWindow: int = 0; EngineMode: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot. This action only applies to Aurora DB clusters.</p> <p>The target DB cluster is created from the source snapshot with a default configuration. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_616209 = newJObject()
  add(query_616209, "DatabaseName", newJString(DatabaseName))
  add(query_616209, "DeletionProtection", newJBool(DeletionProtection))
  add(query_616209, "Engine", newJString(Engine))
  add(query_616209, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_616209, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if Tags != nil:
    query_616209.add "Tags", Tags
  add(query_616209, "KmsKeyId", newJString(KmsKeyId))
  add(query_616209, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_616209, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_616209, "EngineMode", newJString(EngineMode))
  add(query_616209, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_616209.add "AvailabilityZones", AvailabilityZones
  add(query_616209, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_616209, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_616209, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_616209, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_616209, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if EnableCloudwatchLogsExports != nil:
    query_616209.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_616209, "EngineVersion", newJString(EngineVersion))
  add(query_616209, "Action", newJString(Action))
  add(query_616209, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_616209.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_616209, "OptionGroupName", newJString(OptionGroupName))
  add(query_616209, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_616209, "Version", newJString(Version))
  add(query_616209, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_616208.call(nil, query_616209, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_616171(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_616172, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_616173,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_616282 = ref object of OpenApiRestCall_610658
proc url_PostRestoreDBClusterToPointInTime_616284(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_616283(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616285 = query.getOrDefault("Action")
  valid_616285 = validateParameter(valid_616285, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_616285 != nil:
    section.add "Action", valid_616285
  var valid_616286 = query.getOrDefault("Version")
  valid_616286 = validateParameter(valid_616286, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616286 != nil:
    section.add "Version", valid_616286
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616287 = header.getOrDefault("X-Amz-Signature")
  valid_616287 = validateParameter(valid_616287, JString, required = false,
                                 default = nil)
  if valid_616287 != nil:
    section.add "X-Amz-Signature", valid_616287
  var valid_616288 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616288 = validateParameter(valid_616288, JString, required = false,
                                 default = nil)
  if valid_616288 != nil:
    section.add "X-Amz-Content-Sha256", valid_616288
  var valid_616289 = header.getOrDefault("X-Amz-Date")
  valid_616289 = validateParameter(valid_616289, JString, required = false,
                                 default = nil)
  if valid_616289 != nil:
    section.add "X-Amz-Date", valid_616289
  var valid_616290 = header.getOrDefault("X-Amz-Credential")
  valid_616290 = validateParameter(valid_616290, JString, required = false,
                                 default = nil)
  if valid_616290 != nil:
    section.add "X-Amz-Credential", valid_616290
  var valid_616291 = header.getOrDefault("X-Amz-Security-Token")
  valid_616291 = validateParameter(valid_616291, JString, required = false,
                                 default = nil)
  if valid_616291 != nil:
    section.add "X-Amz-Security-Token", valid_616291
  var valid_616292 = header.getOrDefault("X-Amz-Algorithm")
  valid_616292 = validateParameter(valid_616292, JString, required = false,
                                 default = nil)
  if valid_616292 != nil:
    section.add "X-Amz-Algorithm", valid_616292
  var valid_616293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616293 = validateParameter(valid_616293, JString, required = false,
                                 default = nil)
  if valid_616293 != nil:
    section.add "X-Amz-SignedHeaders", valid_616293
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_616294 = formData.getOrDefault("Port")
  valid_616294 = validateParameter(valid_616294, JInt, required = false, default = nil)
  if valid_616294 != nil:
    section.add "Port", valid_616294
  var valid_616295 = formData.getOrDefault("BacktrackWindow")
  valid_616295 = validateParameter(valid_616295, JInt, required = false, default = nil)
  if valid_616295 != nil:
    section.add "BacktrackWindow", valid_616295
  var valid_616296 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_616296 = validateParameter(valid_616296, JArray, required = false,
                                 default = nil)
  if valid_616296 != nil:
    section.add "VpcSecurityGroupIds", valid_616296
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_616297 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_616297 = validateParameter(valid_616297, JString, required = true,
                                 default = nil)
  if valid_616297 != nil:
    section.add "SourceDBClusterIdentifier", valid_616297
  var valid_616298 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616298 = validateParameter(valid_616298, JBool, required = false, default = nil)
  if valid_616298 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616298
  var valid_616299 = formData.getOrDefault("KmsKeyId")
  valid_616299 = validateParameter(valid_616299, JString, required = false,
                                 default = nil)
  if valid_616299 != nil:
    section.add "KmsKeyId", valid_616299
  var valid_616300 = formData.getOrDefault("RestoreType")
  valid_616300 = validateParameter(valid_616300, JString, required = false,
                                 default = nil)
  if valid_616300 != nil:
    section.add "RestoreType", valid_616300
  var valid_616301 = formData.getOrDefault("UseLatestRestorableTime")
  valid_616301 = validateParameter(valid_616301, JBool, required = false, default = nil)
  if valid_616301 != nil:
    section.add "UseLatestRestorableTime", valid_616301
  var valid_616302 = formData.getOrDefault("RestoreToTime")
  valid_616302 = validateParameter(valid_616302, JString, required = false,
                                 default = nil)
  if valid_616302 != nil:
    section.add "RestoreToTime", valid_616302
  var valid_616303 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_616303 = validateParameter(valid_616303, JArray, required = false,
                                 default = nil)
  if valid_616303 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616303
  var valid_616304 = formData.getOrDefault("Tags")
  valid_616304 = validateParameter(valid_616304, JArray, required = false,
                                 default = nil)
  if valid_616304 != nil:
    section.add "Tags", valid_616304
  var valid_616305 = formData.getOrDefault("DBSubnetGroupName")
  valid_616305 = validateParameter(valid_616305, JString, required = false,
                                 default = nil)
  if valid_616305 != nil:
    section.add "DBSubnetGroupName", valid_616305
  var valid_616306 = formData.getOrDefault("OptionGroupName")
  valid_616306 = validateParameter(valid_616306, JString, required = false,
                                 default = nil)
  if valid_616306 != nil:
    section.add "OptionGroupName", valid_616306
  var valid_616307 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_616307 = validateParameter(valid_616307, JString, required = false,
                                 default = nil)
  if valid_616307 != nil:
    section.add "DBClusterParameterGroupName", valid_616307
  var valid_616308 = formData.getOrDefault("DBClusterIdentifier")
  valid_616308 = validateParameter(valid_616308, JString, required = true,
                                 default = nil)
  if valid_616308 != nil:
    section.add "DBClusterIdentifier", valid_616308
  var valid_616309 = formData.getOrDefault("DeletionProtection")
  valid_616309 = validateParameter(valid_616309, JBool, required = false, default = nil)
  if valid_616309 != nil:
    section.add "DeletionProtection", valid_616309
  var valid_616310 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_616310 = validateParameter(valid_616310, JBool, required = false, default = nil)
  if valid_616310 != nil:
    section.add "CopyTagsToSnapshot", valid_616310
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616311: Call_PostRestoreDBClusterToPointInTime_616282;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616311.validator(path, query, header, formData, body)
  let scheme = call_616311.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616311.url(scheme.get, call_616311.host, call_616311.base,
                         call_616311.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616311, url, valid)

proc call*(call_616312: Call_PostRestoreDBClusterToPointInTime_616282;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; BacktrackWindow: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          RestoreToTime: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_616313 = newJObject()
  var formData_616314 = newJObject()
  add(formData_616314, "Port", newJInt(Port))
  add(formData_616314, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_616314.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_616314, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_616314, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_616314, "KmsKeyId", newJString(KmsKeyId))
  add(formData_616314, "RestoreType", newJString(RestoreType))
  add(formData_616314, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_616314, "RestoreToTime", newJString(RestoreToTime))
  if EnableCloudwatchLogsExports != nil:
    formData_616314.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_616313, "Action", newJString(Action))
  if Tags != nil:
    formData_616314.add "Tags", Tags
  add(formData_616314, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_616314, "OptionGroupName", newJString(OptionGroupName))
  add(formData_616314, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_616313, "Version", newJString(Version))
  add(formData_616314, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_616314, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_616314, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_616312.call(nil, query_616313, nil, formData_616314, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_616282(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_616283, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_616284,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_616250 = ref object of OpenApiRestCall_610658
proc url_GetRestoreDBClusterToPointInTime_616252(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_616251(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_616253 = query.getOrDefault("DeletionProtection")
  valid_616253 = validateParameter(valid_616253, JBool, required = false, default = nil)
  if valid_616253 != nil:
    section.add "DeletionProtection", valid_616253
  var valid_616254 = query.getOrDefault("RestoreType")
  valid_616254 = validateParameter(valid_616254, JString, required = false,
                                 default = nil)
  if valid_616254 != nil:
    section.add "RestoreType", valid_616254
  var valid_616255 = query.getOrDefault("UseLatestRestorableTime")
  valid_616255 = validateParameter(valid_616255, JBool, required = false, default = nil)
  if valid_616255 != nil:
    section.add "UseLatestRestorableTime", valid_616255
  var valid_616256 = query.getOrDefault("CopyTagsToSnapshot")
  valid_616256 = validateParameter(valid_616256, JBool, required = false, default = nil)
  if valid_616256 != nil:
    section.add "CopyTagsToSnapshot", valid_616256
  var valid_616257 = query.getOrDefault("Tags")
  valid_616257 = validateParameter(valid_616257, JArray, required = false,
                                 default = nil)
  if valid_616257 != nil:
    section.add "Tags", valid_616257
  var valid_616258 = query.getOrDefault("KmsKeyId")
  valid_616258 = validateParameter(valid_616258, JString, required = false,
                                 default = nil)
  if valid_616258 != nil:
    section.add "KmsKeyId", valid_616258
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_616259 = query.getOrDefault("DBClusterIdentifier")
  valid_616259 = validateParameter(valid_616259, JString, required = true,
                                 default = nil)
  if valid_616259 != nil:
    section.add "DBClusterIdentifier", valid_616259
  var valid_616260 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_616260 = validateParameter(valid_616260, JString, required = true,
                                 default = nil)
  if valid_616260 != nil:
    section.add "SourceDBClusterIdentifier", valid_616260
  var valid_616261 = query.getOrDefault("BacktrackWindow")
  valid_616261 = validateParameter(valid_616261, JInt, required = false, default = nil)
  if valid_616261 != nil:
    section.add "BacktrackWindow", valid_616261
  var valid_616262 = query.getOrDefault("DBClusterParameterGroupName")
  valid_616262 = validateParameter(valid_616262, JString, required = false,
                                 default = nil)
  if valid_616262 != nil:
    section.add "DBClusterParameterGroupName", valid_616262
  var valid_616263 = query.getOrDefault("RestoreToTime")
  valid_616263 = validateParameter(valid_616263, JString, required = false,
                                 default = nil)
  if valid_616263 != nil:
    section.add "RestoreToTime", valid_616263
  var valid_616264 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616264 = validateParameter(valid_616264, JBool, required = false, default = nil)
  if valid_616264 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616264
  var valid_616265 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_616265 = validateParameter(valid_616265, JArray, required = false,
                                 default = nil)
  if valid_616265 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616265
  var valid_616266 = query.getOrDefault("Action")
  valid_616266 = validateParameter(valid_616266, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_616266 != nil:
    section.add "Action", valid_616266
  var valid_616267 = query.getOrDefault("Port")
  valid_616267 = validateParameter(valid_616267, JInt, required = false, default = nil)
  if valid_616267 != nil:
    section.add "Port", valid_616267
  var valid_616268 = query.getOrDefault("VpcSecurityGroupIds")
  valid_616268 = validateParameter(valid_616268, JArray, required = false,
                                 default = nil)
  if valid_616268 != nil:
    section.add "VpcSecurityGroupIds", valid_616268
  var valid_616269 = query.getOrDefault("OptionGroupName")
  valid_616269 = validateParameter(valid_616269, JString, required = false,
                                 default = nil)
  if valid_616269 != nil:
    section.add "OptionGroupName", valid_616269
  var valid_616270 = query.getOrDefault("DBSubnetGroupName")
  valid_616270 = validateParameter(valid_616270, JString, required = false,
                                 default = nil)
  if valid_616270 != nil:
    section.add "DBSubnetGroupName", valid_616270
  var valid_616271 = query.getOrDefault("Version")
  valid_616271 = validateParameter(valid_616271, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616271 != nil:
    section.add "Version", valid_616271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616272 = header.getOrDefault("X-Amz-Signature")
  valid_616272 = validateParameter(valid_616272, JString, required = false,
                                 default = nil)
  if valid_616272 != nil:
    section.add "X-Amz-Signature", valid_616272
  var valid_616273 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616273 = validateParameter(valid_616273, JString, required = false,
                                 default = nil)
  if valid_616273 != nil:
    section.add "X-Amz-Content-Sha256", valid_616273
  var valid_616274 = header.getOrDefault("X-Amz-Date")
  valid_616274 = validateParameter(valid_616274, JString, required = false,
                                 default = nil)
  if valid_616274 != nil:
    section.add "X-Amz-Date", valid_616274
  var valid_616275 = header.getOrDefault("X-Amz-Credential")
  valid_616275 = validateParameter(valid_616275, JString, required = false,
                                 default = nil)
  if valid_616275 != nil:
    section.add "X-Amz-Credential", valid_616275
  var valid_616276 = header.getOrDefault("X-Amz-Security-Token")
  valid_616276 = validateParameter(valid_616276, JString, required = false,
                                 default = nil)
  if valid_616276 != nil:
    section.add "X-Amz-Security-Token", valid_616276
  var valid_616277 = header.getOrDefault("X-Amz-Algorithm")
  valid_616277 = validateParameter(valid_616277, JString, required = false,
                                 default = nil)
  if valid_616277 != nil:
    section.add "X-Amz-Algorithm", valid_616277
  var valid_616278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616278 = validateParameter(valid_616278, JString, required = false,
                                 default = nil)
  if valid_616278 != nil:
    section.add "X-Amz-SignedHeaders", valid_616278
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616279: Call_GetRestoreDBClusterToPointInTime_616250;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616279.validator(path, query, header, formData, body)
  let scheme = call_616279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616279.url(scheme.get, call_616279.host, call_616279.base,
                         call_616279.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616279, url, valid)

proc call*(call_616280: Call_GetRestoreDBClusterToPointInTime_616250;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          DeletionProtection: bool = false; RestoreType: string = "";
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Tags: JsonNode = nil; KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = ""; RestoreToTime: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_616281 = newJObject()
  add(query_616281, "DeletionProtection", newJBool(DeletionProtection))
  add(query_616281, "RestoreType", newJString(RestoreType))
  add(query_616281, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_616281, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_616281.add "Tags", Tags
  add(query_616281, "KmsKeyId", newJString(KmsKeyId))
  add(query_616281, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_616281, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_616281, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_616281, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_616281, "RestoreToTime", newJString(RestoreToTime))
  add(query_616281, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_616281.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_616281, "Action", newJString(Action))
  add(query_616281, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_616281.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_616281, "OptionGroupName", newJString(OptionGroupName))
  add(query_616281, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_616281, "Version", newJString(Version))
  result = call_616280.call(nil, query_616281, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_616250(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_616251, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_616252,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromDBSnapshot_616358 = ref object of OpenApiRestCall_610658
proc url_PostRestoreDBInstanceFromDBSnapshot_616360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromDBSnapshot_616359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616361 = query.getOrDefault("Action")
  valid_616361 = validateParameter(valid_616361, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_616361 != nil:
    section.add "Action", valid_616361
  var valid_616362 = query.getOrDefault("Version")
  valid_616362 = validateParameter(valid_616362, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616362 != nil:
    section.add "Version", valid_616362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616363 = header.getOrDefault("X-Amz-Signature")
  valid_616363 = validateParameter(valid_616363, JString, required = false,
                                 default = nil)
  if valid_616363 != nil:
    section.add "X-Amz-Signature", valid_616363
  var valid_616364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616364 = validateParameter(valid_616364, JString, required = false,
                                 default = nil)
  if valid_616364 != nil:
    section.add "X-Amz-Content-Sha256", valid_616364
  var valid_616365 = header.getOrDefault("X-Amz-Date")
  valid_616365 = validateParameter(valid_616365, JString, required = false,
                                 default = nil)
  if valid_616365 != nil:
    section.add "X-Amz-Date", valid_616365
  var valid_616366 = header.getOrDefault("X-Amz-Credential")
  valid_616366 = validateParameter(valid_616366, JString, required = false,
                                 default = nil)
  if valid_616366 != nil:
    section.add "X-Amz-Credential", valid_616366
  var valid_616367 = header.getOrDefault("X-Amz-Security-Token")
  valid_616367 = validateParameter(valid_616367, JString, required = false,
                                 default = nil)
  if valid_616367 != nil:
    section.add "X-Amz-Security-Token", valid_616367
  var valid_616368 = header.getOrDefault("X-Amz-Algorithm")
  valid_616368 = validateParameter(valid_616368, JString, required = false,
                                 default = nil)
  if valid_616368 != nil:
    section.add "X-Amz-Algorithm", valid_616368
  var valid_616369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616369 = validateParameter(valid_616369, JString, required = false,
                                 default = nil)
  if valid_616369 != nil:
    section.add "X-Amz-SignedHeaders", valid_616369
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_616370 = formData.getOrDefault("Port")
  valid_616370 = validateParameter(valid_616370, JInt, required = false, default = nil)
  if valid_616370 != nil:
    section.add "Port", valid_616370
  var valid_616371 = formData.getOrDefault("DBInstanceClass")
  valid_616371 = validateParameter(valid_616371, JString, required = false,
                                 default = nil)
  if valid_616371 != nil:
    section.add "DBInstanceClass", valid_616371
  var valid_616372 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_616372 = validateParameter(valid_616372, JBool, required = false, default = nil)
  if valid_616372 != nil:
    section.add "UseDefaultProcessorFeatures", valid_616372
  var valid_616373 = formData.getOrDefault("MultiAZ")
  valid_616373 = validateParameter(valid_616373, JBool, required = false, default = nil)
  if valid_616373 != nil:
    section.add "MultiAZ", valid_616373
  var valid_616374 = formData.getOrDefault("Domain")
  valid_616374 = validateParameter(valid_616374, JString, required = false,
                                 default = nil)
  if valid_616374 != nil:
    section.add "Domain", valid_616374
  var valid_616375 = formData.getOrDefault("DBParameterGroupName")
  valid_616375 = validateParameter(valid_616375, JString, required = false,
                                 default = nil)
  if valid_616375 != nil:
    section.add "DBParameterGroupName", valid_616375
  var valid_616376 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_616376 = validateParameter(valid_616376, JArray, required = false,
                                 default = nil)
  if valid_616376 != nil:
    section.add "VpcSecurityGroupIds", valid_616376
  var valid_616377 = formData.getOrDefault("AvailabilityZone")
  valid_616377 = validateParameter(valid_616377, JString, required = false,
                                 default = nil)
  if valid_616377 != nil:
    section.add "AvailabilityZone", valid_616377
  var valid_616378 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616378 = validateParameter(valid_616378, JBool, required = false, default = nil)
  if valid_616378 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616378
  var valid_616379 = formData.getOrDefault("Engine")
  valid_616379 = validateParameter(valid_616379, JString, required = false,
                                 default = nil)
  if valid_616379 != nil:
    section.add "Engine", valid_616379
  var valid_616380 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_616380 = validateParameter(valid_616380, JBool, required = false, default = nil)
  if valid_616380 != nil:
    section.add "AutoMinorVersionUpgrade", valid_616380
  var valid_616381 = formData.getOrDefault("TdeCredentialPassword")
  valid_616381 = validateParameter(valid_616381, JString, required = false,
                                 default = nil)
  if valid_616381 != nil:
    section.add "TdeCredentialPassword", valid_616381
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_616382 = formData.getOrDefault("DBInstanceIdentifier")
  valid_616382 = validateParameter(valid_616382, JString, required = true,
                                 default = nil)
  if valid_616382 != nil:
    section.add "DBInstanceIdentifier", valid_616382
  var valid_616383 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_616383 = validateParameter(valid_616383, JString, required = true,
                                 default = nil)
  if valid_616383 != nil:
    section.add "DBSnapshotIdentifier", valid_616383
  var valid_616384 = formData.getOrDefault("DBName")
  valid_616384 = validateParameter(valid_616384, JString, required = false,
                                 default = nil)
  if valid_616384 != nil:
    section.add "DBName", valid_616384
  var valid_616385 = formData.getOrDefault("Iops")
  valid_616385 = validateParameter(valid_616385, JInt, required = false, default = nil)
  if valid_616385 != nil:
    section.add "Iops", valid_616385
  var valid_616386 = formData.getOrDefault("TdeCredentialArn")
  valid_616386 = validateParameter(valid_616386, JString, required = false,
                                 default = nil)
  if valid_616386 != nil:
    section.add "TdeCredentialArn", valid_616386
  var valid_616387 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_616387 = validateParameter(valid_616387, JArray, required = false,
                                 default = nil)
  if valid_616387 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616387
  var valid_616388 = formData.getOrDefault("PubliclyAccessible")
  valid_616388 = validateParameter(valid_616388, JBool, required = false, default = nil)
  if valid_616388 != nil:
    section.add "PubliclyAccessible", valid_616388
  var valid_616389 = formData.getOrDefault("LicenseModel")
  valid_616389 = validateParameter(valid_616389, JString, required = false,
                                 default = nil)
  if valid_616389 != nil:
    section.add "LicenseModel", valid_616389
  var valid_616390 = formData.getOrDefault("Tags")
  valid_616390 = validateParameter(valid_616390, JArray, required = false,
                                 default = nil)
  if valid_616390 != nil:
    section.add "Tags", valid_616390
  var valid_616391 = formData.getOrDefault("DBSubnetGroupName")
  valid_616391 = validateParameter(valid_616391, JString, required = false,
                                 default = nil)
  if valid_616391 != nil:
    section.add "DBSubnetGroupName", valid_616391
  var valid_616392 = formData.getOrDefault("DomainIAMRoleName")
  valid_616392 = validateParameter(valid_616392, JString, required = false,
                                 default = nil)
  if valid_616392 != nil:
    section.add "DomainIAMRoleName", valid_616392
  var valid_616393 = formData.getOrDefault("OptionGroupName")
  valid_616393 = validateParameter(valid_616393, JString, required = false,
                                 default = nil)
  if valid_616393 != nil:
    section.add "OptionGroupName", valid_616393
  var valid_616394 = formData.getOrDefault("StorageType")
  valid_616394 = validateParameter(valid_616394, JString, required = false,
                                 default = nil)
  if valid_616394 != nil:
    section.add "StorageType", valid_616394
  var valid_616395 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_616395 = validateParameter(valid_616395, JBool, required = false, default = nil)
  if valid_616395 != nil:
    section.add "CopyTagsToSnapshot", valid_616395
  var valid_616396 = formData.getOrDefault("DeletionProtection")
  valid_616396 = validateParameter(valid_616396, JBool, required = false, default = nil)
  if valid_616396 != nil:
    section.add "DeletionProtection", valid_616396
  var valid_616397 = formData.getOrDefault("ProcessorFeatures")
  valid_616397 = validateParameter(valid_616397, JArray, required = false,
                                 default = nil)
  if valid_616397 != nil:
    section.add "ProcessorFeatures", valid_616397
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616398: Call_PostRestoreDBInstanceFromDBSnapshot_616358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_616398.validator(path, query, header, formData, body)
  let scheme = call_616398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616398.url(scheme.get, call_616398.host, call_616398.base,
                         call_616398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616398, url, valid)

proc call*(call_616399: Call_PostRestoreDBInstanceFromDBSnapshot_616358;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = ""; DBParameterGroupName: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_616400 = newJObject()
  var formData_616401 = newJObject()
  add(formData_616401, "Port", newJInt(Port))
  add(formData_616401, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_616401, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_616401, "MultiAZ", newJBool(MultiAZ))
  add(formData_616401, "Domain", newJString(Domain))
  add(formData_616401, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_616401.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_616401, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_616401, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_616401, "Engine", newJString(Engine))
  add(formData_616401, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_616401, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_616401, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_616401, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(formData_616401, "DBName", newJString(DBName))
  add(formData_616401, "Iops", newJInt(Iops))
  add(formData_616401, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_616401.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_616401, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_616400, "Action", newJString(Action))
  add(formData_616401, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_616401.add "Tags", Tags
  add(formData_616401, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_616401, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_616401, "OptionGroupName", newJString(OptionGroupName))
  add(query_616400, "Version", newJString(Version))
  add(formData_616401, "StorageType", newJString(StorageType))
  add(formData_616401, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_616401, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_616401.add "ProcessorFeatures", ProcessorFeatures
  result = call_616399.call(nil, query_616400, nil, formData_616401, nil)

var postRestoreDBInstanceFromDBSnapshot* = Call_PostRestoreDBInstanceFromDBSnapshot_616358(
    name: "postRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_PostRestoreDBInstanceFromDBSnapshot_616359, base: "/",
    url: url_PostRestoreDBInstanceFromDBSnapshot_616360,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromDBSnapshot_616315 = ref object of OpenApiRestCall_610658
proc url_GetRestoreDBInstanceFromDBSnapshot_616317(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromDBSnapshot_616316(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_616318 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_616318 = validateParameter(valid_616318, JBool, required = false, default = nil)
  if valid_616318 != nil:
    section.add "UseDefaultProcessorFeatures", valid_616318
  var valid_616319 = query.getOrDefault("DBName")
  valid_616319 = validateParameter(valid_616319, JString, required = false,
                                 default = nil)
  if valid_616319 != nil:
    section.add "DBName", valid_616319
  var valid_616320 = query.getOrDefault("TdeCredentialPassword")
  valid_616320 = validateParameter(valid_616320, JString, required = false,
                                 default = nil)
  if valid_616320 != nil:
    section.add "TdeCredentialPassword", valid_616320
  var valid_616321 = query.getOrDefault("DeletionProtection")
  valid_616321 = validateParameter(valid_616321, JBool, required = false, default = nil)
  if valid_616321 != nil:
    section.add "DeletionProtection", valid_616321
  var valid_616322 = query.getOrDefault("Engine")
  valid_616322 = validateParameter(valid_616322, JString, required = false,
                                 default = nil)
  if valid_616322 != nil:
    section.add "Engine", valid_616322
  var valid_616323 = query.getOrDefault("CopyTagsToSnapshot")
  valid_616323 = validateParameter(valid_616323, JBool, required = false, default = nil)
  if valid_616323 != nil:
    section.add "CopyTagsToSnapshot", valid_616323
  var valid_616324 = query.getOrDefault("DBParameterGroupName")
  valid_616324 = validateParameter(valid_616324, JString, required = false,
                                 default = nil)
  if valid_616324 != nil:
    section.add "DBParameterGroupName", valid_616324
  var valid_616325 = query.getOrDefault("Tags")
  valid_616325 = validateParameter(valid_616325, JArray, required = false,
                                 default = nil)
  if valid_616325 != nil:
    section.add "Tags", valid_616325
  var valid_616326 = query.getOrDefault("LicenseModel")
  valid_616326 = validateParameter(valid_616326, JString, required = false,
                                 default = nil)
  if valid_616326 != nil:
    section.add "LicenseModel", valid_616326
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_616327 = query.getOrDefault("DBInstanceIdentifier")
  valid_616327 = validateParameter(valid_616327, JString, required = true,
                                 default = nil)
  if valid_616327 != nil:
    section.add "DBInstanceIdentifier", valid_616327
  var valid_616328 = query.getOrDefault("DBSnapshotIdentifier")
  valid_616328 = validateParameter(valid_616328, JString, required = true,
                                 default = nil)
  if valid_616328 != nil:
    section.add "DBSnapshotIdentifier", valid_616328
  var valid_616329 = query.getOrDefault("TdeCredentialArn")
  valid_616329 = validateParameter(valid_616329, JString, required = false,
                                 default = nil)
  if valid_616329 != nil:
    section.add "TdeCredentialArn", valid_616329
  var valid_616330 = query.getOrDefault("ProcessorFeatures")
  valid_616330 = validateParameter(valid_616330, JArray, required = false,
                                 default = nil)
  if valid_616330 != nil:
    section.add "ProcessorFeatures", valid_616330
  var valid_616331 = query.getOrDefault("StorageType")
  valid_616331 = validateParameter(valid_616331, JString, required = false,
                                 default = nil)
  if valid_616331 != nil:
    section.add "StorageType", valid_616331
  var valid_616332 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616332 = validateParameter(valid_616332, JBool, required = false, default = nil)
  if valid_616332 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616332
  var valid_616333 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_616333 = validateParameter(valid_616333, JArray, required = false,
                                 default = nil)
  if valid_616333 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616333
  var valid_616334 = query.getOrDefault("Action")
  valid_616334 = validateParameter(valid_616334, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_616334 != nil:
    section.add "Action", valid_616334
  var valid_616335 = query.getOrDefault("MultiAZ")
  valid_616335 = validateParameter(valid_616335, JBool, required = false, default = nil)
  if valid_616335 != nil:
    section.add "MultiAZ", valid_616335
  var valid_616336 = query.getOrDefault("Port")
  valid_616336 = validateParameter(valid_616336, JInt, required = false, default = nil)
  if valid_616336 != nil:
    section.add "Port", valid_616336
  var valid_616337 = query.getOrDefault("Domain")
  valid_616337 = validateParameter(valid_616337, JString, required = false,
                                 default = nil)
  if valid_616337 != nil:
    section.add "Domain", valid_616337
  var valid_616338 = query.getOrDefault("VpcSecurityGroupIds")
  valid_616338 = validateParameter(valid_616338, JArray, required = false,
                                 default = nil)
  if valid_616338 != nil:
    section.add "VpcSecurityGroupIds", valid_616338
  var valid_616339 = query.getOrDefault("AvailabilityZone")
  valid_616339 = validateParameter(valid_616339, JString, required = false,
                                 default = nil)
  if valid_616339 != nil:
    section.add "AvailabilityZone", valid_616339
  var valid_616340 = query.getOrDefault("OptionGroupName")
  valid_616340 = validateParameter(valid_616340, JString, required = false,
                                 default = nil)
  if valid_616340 != nil:
    section.add "OptionGroupName", valid_616340
  var valid_616341 = query.getOrDefault("DBSubnetGroupName")
  valid_616341 = validateParameter(valid_616341, JString, required = false,
                                 default = nil)
  if valid_616341 != nil:
    section.add "DBSubnetGroupName", valid_616341
  var valid_616342 = query.getOrDefault("Version")
  valid_616342 = validateParameter(valid_616342, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616342 != nil:
    section.add "Version", valid_616342
  var valid_616343 = query.getOrDefault("DBInstanceClass")
  valid_616343 = validateParameter(valid_616343, JString, required = false,
                                 default = nil)
  if valid_616343 != nil:
    section.add "DBInstanceClass", valid_616343
  var valid_616344 = query.getOrDefault("PubliclyAccessible")
  valid_616344 = validateParameter(valid_616344, JBool, required = false, default = nil)
  if valid_616344 != nil:
    section.add "PubliclyAccessible", valid_616344
  var valid_616345 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_616345 = validateParameter(valid_616345, JBool, required = false, default = nil)
  if valid_616345 != nil:
    section.add "AutoMinorVersionUpgrade", valid_616345
  var valid_616346 = query.getOrDefault("Iops")
  valid_616346 = validateParameter(valid_616346, JInt, required = false, default = nil)
  if valid_616346 != nil:
    section.add "Iops", valid_616346
  var valid_616347 = query.getOrDefault("DomainIAMRoleName")
  valid_616347 = validateParameter(valid_616347, JString, required = false,
                                 default = nil)
  if valid_616347 != nil:
    section.add "DomainIAMRoleName", valid_616347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616348 = header.getOrDefault("X-Amz-Signature")
  valid_616348 = validateParameter(valid_616348, JString, required = false,
                                 default = nil)
  if valid_616348 != nil:
    section.add "X-Amz-Signature", valid_616348
  var valid_616349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616349 = validateParameter(valid_616349, JString, required = false,
                                 default = nil)
  if valid_616349 != nil:
    section.add "X-Amz-Content-Sha256", valid_616349
  var valid_616350 = header.getOrDefault("X-Amz-Date")
  valid_616350 = validateParameter(valid_616350, JString, required = false,
                                 default = nil)
  if valid_616350 != nil:
    section.add "X-Amz-Date", valid_616350
  var valid_616351 = header.getOrDefault("X-Amz-Credential")
  valid_616351 = validateParameter(valid_616351, JString, required = false,
                                 default = nil)
  if valid_616351 != nil:
    section.add "X-Amz-Credential", valid_616351
  var valid_616352 = header.getOrDefault("X-Amz-Security-Token")
  valid_616352 = validateParameter(valid_616352, JString, required = false,
                                 default = nil)
  if valid_616352 != nil:
    section.add "X-Amz-Security-Token", valid_616352
  var valid_616353 = header.getOrDefault("X-Amz-Algorithm")
  valid_616353 = validateParameter(valid_616353, JString, required = false,
                                 default = nil)
  if valid_616353 != nil:
    section.add "X-Amz-Algorithm", valid_616353
  var valid_616354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616354 = validateParameter(valid_616354, JString, required = false,
                                 default = nil)
  if valid_616354 != nil:
    section.add "X-Amz-SignedHeaders", valid_616354
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616355: Call_GetRestoreDBInstanceFromDBSnapshot_616315;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_616355.validator(path, query, header, formData, body)
  let scheme = call_616355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616355.url(scheme.get, call_616355.host, call_616355.base,
                         call_616355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616355, url, valid)

proc call*(call_616356: Call_GetRestoreDBInstanceFromDBSnapshot_616315;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; CopyTagsToSnapshot: bool = false;
          DBParameterGroupName: string = ""; Tags: JsonNode = nil;
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromDBSnapshot"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          DBInstanceClass: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_616357 = newJObject()
  add(query_616357, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_616357, "DBName", newJString(DBName))
  add(query_616357, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_616357, "DeletionProtection", newJBool(DeletionProtection))
  add(query_616357, "Engine", newJString(Engine))
  add(query_616357, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_616357, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_616357.add "Tags", Tags
  add(query_616357, "LicenseModel", newJString(LicenseModel))
  add(query_616357, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_616357, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_616357, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_616357.add "ProcessorFeatures", ProcessorFeatures
  add(query_616357, "StorageType", newJString(StorageType))
  add(query_616357, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_616357.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_616357, "Action", newJString(Action))
  add(query_616357, "MultiAZ", newJBool(MultiAZ))
  add(query_616357, "Port", newJInt(Port))
  add(query_616357, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_616357.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_616357, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_616357, "OptionGroupName", newJString(OptionGroupName))
  add(query_616357, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_616357, "Version", newJString(Version))
  add(query_616357, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_616357, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_616357, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_616357, "Iops", newJInt(Iops))
  add(query_616357, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_616356.call(nil, query_616357, nil, nil, nil)

var getRestoreDBInstanceFromDBSnapshot* = Call_GetRestoreDBInstanceFromDBSnapshot_616315(
    name: "getRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_GetRestoreDBInstanceFromDBSnapshot_616316, base: "/",
    url: url_GetRestoreDBInstanceFromDBSnapshot_616317,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromS3_616460 = ref object of OpenApiRestCall_610658
proc url_PostRestoreDBInstanceFromS3_616462(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromS3_616461(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616463 = query.getOrDefault("Action")
  valid_616463 = validateParameter(valid_616463, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_616463 != nil:
    section.add "Action", valid_616463
  var valid_616464 = query.getOrDefault("Version")
  valid_616464 = validateParameter(valid_616464, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616464 != nil:
    section.add "Version", valid_616464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_616465 = header.getOrDefault("X-Amz-Security-Token")
  valid_616465 = validateParameter(valid_616465, JString, required = false,
                                 default = nil)
  if valid_616465 != nil:
    section.add "X-Amz-Security-Token", valid_616465
  var valid_616466 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616466 = validateParameter(valid_616466, JString, required = false,
                                 default = nil)
  if valid_616466 != nil:
    section.add "X-Amz-SignedHeaders", valid_616466
  var valid_616467 = header.getOrDefault("X-Amz-Signature")
  valid_616467 = validateParameter(valid_616467, JString, required = false,
                                 default = nil)
  if valid_616467 != nil:
    section.add "X-Amz-Signature", valid_616467
  var valid_616468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616468 = validateParameter(valid_616468, JString, required = false,
                                 default = nil)
  if valid_616468 != nil:
    section.add "X-Amz-Content-Sha256", valid_616468
  var valid_616469 = header.getOrDefault("X-Amz-Date")
  valid_616469 = validateParameter(valid_616469, JString, required = false,
                                 default = nil)
  if valid_616469 != nil:
    section.add "X-Amz-Date", valid_616469
  var valid_616470 = header.getOrDefault("X-Amz-Credential")
  valid_616470 = validateParameter(valid_616470, JString, required = false,
                                 default = nil)
  if valid_616470 != nil:
    section.add "X-Amz-Credential", valid_616470
  var valid_616471 = header.getOrDefault("X-Amz-Algorithm")
  valid_616471 = validateParameter(valid_616471, JString, required = false,
                                 default = nil)
  if valid_616471 != nil:
    section.add "X-Amz-Algorithm", valid_616471
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_616472 = formData.getOrDefault("S3IngestionRoleArn")
  valid_616472 = validateParameter(valid_616472, JString, required = true,
                                 default = nil)
  if valid_616472 != nil:
    section.add "S3IngestionRoleArn", valid_616472
  var valid_616473 = formData.getOrDefault("Port")
  valid_616473 = validateParameter(valid_616473, JInt, required = false, default = nil)
  if valid_616473 != nil:
    section.add "Port", valid_616473
  var valid_616474 = formData.getOrDefault("MultiAZ")
  valid_616474 = validateParameter(valid_616474, JBool, required = false, default = nil)
  if valid_616474 != nil:
    section.add "MultiAZ", valid_616474
  var valid_616475 = formData.getOrDefault("MasterUsername")
  valid_616475 = validateParameter(valid_616475, JString, required = false,
                                 default = nil)
  if valid_616475 != nil:
    section.add "MasterUsername", valid_616475
  var valid_616476 = formData.getOrDefault("MonitoringRoleArn")
  valid_616476 = validateParameter(valid_616476, JString, required = false,
                                 default = nil)
  if valid_616476 != nil:
    section.add "MonitoringRoleArn", valid_616476
  var valid_616477 = formData.getOrDefault("MonitoringInterval")
  valid_616477 = validateParameter(valid_616477, JInt, required = false, default = nil)
  if valid_616477 != nil:
    section.add "MonitoringInterval", valid_616477
  var valid_616478 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_616478 = validateParameter(valid_616478, JArray, required = false,
                                 default = nil)
  if valid_616478 != nil:
    section.add "VpcSecurityGroupIds", valid_616478
  var valid_616479 = formData.getOrDefault("AvailabilityZone")
  valid_616479 = validateParameter(valid_616479, JString, required = false,
                                 default = nil)
  if valid_616479 != nil:
    section.add "AvailabilityZone", valid_616479
  var valid_616480 = formData.getOrDefault("EnablePerformanceInsights")
  valid_616480 = validateParameter(valid_616480, JBool, required = false, default = nil)
  if valid_616480 != nil:
    section.add "EnablePerformanceInsights", valid_616480
  var valid_616481 = formData.getOrDefault("DBInstanceIdentifier")
  valid_616481 = validateParameter(valid_616481, JString, required = true,
                                 default = nil)
  if valid_616481 != nil:
    section.add "DBInstanceIdentifier", valid_616481
  var valid_616482 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_616482 = validateParameter(valid_616482, JArray, required = false,
                                 default = nil)
  if valid_616482 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616482
  var valid_616483 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_616483 = validateParameter(valid_616483, JInt, required = false, default = nil)
  if valid_616483 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_616483
  var valid_616484 = formData.getOrDefault("DBSubnetGroupName")
  valid_616484 = validateParameter(valid_616484, JString, required = false,
                                 default = nil)
  if valid_616484 != nil:
    section.add "DBSubnetGroupName", valid_616484
  var valid_616485 = formData.getOrDefault("StorageType")
  valid_616485 = validateParameter(valid_616485, JString, required = false,
                                 default = nil)
  if valid_616485 != nil:
    section.add "StorageType", valid_616485
  var valid_616486 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_616486 = validateParameter(valid_616486, JBool, required = false, default = nil)
  if valid_616486 != nil:
    section.add "CopyTagsToSnapshot", valid_616486
  var valid_616487 = formData.getOrDefault("DeletionProtection")
  valid_616487 = validateParameter(valid_616487, JBool, required = false, default = nil)
  if valid_616487 != nil:
    section.add "DeletionProtection", valid_616487
  var valid_616488 = formData.getOrDefault("ProcessorFeatures")
  valid_616488 = validateParameter(valid_616488, JArray, required = false,
                                 default = nil)
  if valid_616488 != nil:
    section.add "ProcessorFeatures", valid_616488
  var valid_616489 = formData.getOrDefault("AllocatedStorage")
  valid_616489 = validateParameter(valid_616489, JInt, required = false, default = nil)
  if valid_616489 != nil:
    section.add "AllocatedStorage", valid_616489
  var valid_616490 = formData.getOrDefault("S3Prefix")
  valid_616490 = validateParameter(valid_616490, JString, required = false,
                                 default = nil)
  if valid_616490 != nil:
    section.add "S3Prefix", valid_616490
  var valid_616491 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_616491 = validateParameter(valid_616491, JString, required = false,
                                 default = nil)
  if valid_616491 != nil:
    section.add "PreferredMaintenanceWindow", valid_616491
  var valid_616492 = formData.getOrDefault("DBInstanceClass")
  valid_616492 = validateParameter(valid_616492, JString, required = true,
                                 default = nil)
  if valid_616492 != nil:
    section.add "DBInstanceClass", valid_616492
  var valid_616493 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_616493 = validateParameter(valid_616493, JBool, required = false, default = nil)
  if valid_616493 != nil:
    section.add "UseDefaultProcessorFeatures", valid_616493
  var valid_616494 = formData.getOrDefault("PreferredBackupWindow")
  valid_616494 = validateParameter(valid_616494, JString, required = false,
                                 default = nil)
  if valid_616494 != nil:
    section.add "PreferredBackupWindow", valid_616494
  var valid_616495 = formData.getOrDefault("MasterUserPassword")
  valid_616495 = validateParameter(valid_616495, JString, required = false,
                                 default = nil)
  if valid_616495 != nil:
    section.add "MasterUserPassword", valid_616495
  var valid_616496 = formData.getOrDefault("SourceEngine")
  valid_616496 = validateParameter(valid_616496, JString, required = true,
                                 default = nil)
  if valid_616496 != nil:
    section.add "SourceEngine", valid_616496
  var valid_616497 = formData.getOrDefault("DBParameterGroupName")
  valid_616497 = validateParameter(valid_616497, JString, required = false,
                                 default = nil)
  if valid_616497 != nil:
    section.add "DBParameterGroupName", valid_616497
  var valid_616498 = formData.getOrDefault("EngineVersion")
  valid_616498 = validateParameter(valid_616498, JString, required = false,
                                 default = nil)
  if valid_616498 != nil:
    section.add "EngineVersion", valid_616498
  var valid_616499 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616499 = validateParameter(valid_616499, JBool, required = false, default = nil)
  if valid_616499 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616499
  var valid_616500 = formData.getOrDefault("BackupRetentionPeriod")
  valid_616500 = validateParameter(valid_616500, JInt, required = false, default = nil)
  if valid_616500 != nil:
    section.add "BackupRetentionPeriod", valid_616500
  var valid_616501 = formData.getOrDefault("KmsKeyId")
  valid_616501 = validateParameter(valid_616501, JString, required = false,
                                 default = nil)
  if valid_616501 != nil:
    section.add "KmsKeyId", valid_616501
  var valid_616502 = formData.getOrDefault("Engine")
  valid_616502 = validateParameter(valid_616502, JString, required = true,
                                 default = nil)
  if valid_616502 != nil:
    section.add "Engine", valid_616502
  var valid_616503 = formData.getOrDefault("S3BucketName")
  valid_616503 = validateParameter(valid_616503, JString, required = true,
                                 default = nil)
  if valid_616503 != nil:
    section.add "S3BucketName", valid_616503
  var valid_616504 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_616504 = validateParameter(valid_616504, JBool, required = false, default = nil)
  if valid_616504 != nil:
    section.add "AutoMinorVersionUpgrade", valid_616504
  var valid_616505 = formData.getOrDefault("DBName")
  valid_616505 = validateParameter(valid_616505, JString, required = false,
                                 default = nil)
  if valid_616505 != nil:
    section.add "DBName", valid_616505
  var valid_616506 = formData.getOrDefault("Iops")
  valid_616506 = validateParameter(valid_616506, JInt, required = false, default = nil)
  if valid_616506 != nil:
    section.add "Iops", valid_616506
  var valid_616507 = formData.getOrDefault("PubliclyAccessible")
  valid_616507 = validateParameter(valid_616507, JBool, required = false, default = nil)
  if valid_616507 != nil:
    section.add "PubliclyAccessible", valid_616507
  var valid_616508 = formData.getOrDefault("SourceEngineVersion")
  valid_616508 = validateParameter(valid_616508, JString, required = true,
                                 default = nil)
  if valid_616508 != nil:
    section.add "SourceEngineVersion", valid_616508
  var valid_616509 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_616509 = validateParameter(valid_616509, JString, required = false,
                                 default = nil)
  if valid_616509 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_616509
  var valid_616510 = formData.getOrDefault("LicenseModel")
  valid_616510 = validateParameter(valid_616510, JString, required = false,
                                 default = nil)
  if valid_616510 != nil:
    section.add "LicenseModel", valid_616510
  var valid_616511 = formData.getOrDefault("Tags")
  valid_616511 = validateParameter(valid_616511, JArray, required = false,
                                 default = nil)
  if valid_616511 != nil:
    section.add "Tags", valid_616511
  var valid_616512 = formData.getOrDefault("OptionGroupName")
  valid_616512 = validateParameter(valid_616512, JString, required = false,
                                 default = nil)
  if valid_616512 != nil:
    section.add "OptionGroupName", valid_616512
  var valid_616513 = formData.getOrDefault("DBSecurityGroups")
  valid_616513 = validateParameter(valid_616513, JArray, required = false,
                                 default = nil)
  if valid_616513 != nil:
    section.add "DBSecurityGroups", valid_616513
  var valid_616514 = formData.getOrDefault("StorageEncrypted")
  valid_616514 = validateParameter(valid_616514, JBool, required = false, default = nil)
  if valid_616514 != nil:
    section.add "StorageEncrypted", valid_616514
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616515: Call_PostRestoreDBInstanceFromS3_616460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_616515.validator(path, query, header, formData, body)
  let scheme = call_616515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616515.url(scheme.get, call_616515.host, call_616515.base,
                         call_616515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616515, url, valid)

proc call*(call_616516: Call_PostRestoreDBInstanceFromS3_616460;
          S3IngestionRoleArn: string; DBInstanceIdentifier: string;
          DBInstanceClass: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string; Port: int = 0;
          MultiAZ: bool = false; MasterUsername: string = "";
          MonitoringRoleArn: string = ""; MonitoringInterval: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnablePerformanceInsights: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromS3";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          S3Prefix: string = ""; PreferredMaintenanceWindow: string = "";
          UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; DBName: string = ""; Iops: int = 0;
          PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"; DBSecurityGroups: JsonNode = nil;
          StorageEncrypted: bool = false): Recallable =
  ## postRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  var query_616517 = newJObject()
  var formData_616518 = newJObject()
  add(formData_616518, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_616518, "Port", newJInt(Port))
  add(formData_616518, "MultiAZ", newJBool(MultiAZ))
  add(formData_616518, "MasterUsername", newJString(MasterUsername))
  add(formData_616518, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_616518, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_616518.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_616518, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_616518, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_616518, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_616518.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_616517, "Action", newJString(Action))
  add(formData_616518, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_616518, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_616518, "StorageType", newJString(StorageType))
  add(formData_616518, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_616518, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_616518.add "ProcessorFeatures", ProcessorFeatures
  add(formData_616518, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_616518, "S3Prefix", newJString(S3Prefix))
  add(formData_616518, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_616518, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_616518, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_616518, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_616518, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_616518, "SourceEngine", newJString(SourceEngine))
  add(formData_616518, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_616518, "EngineVersion", newJString(EngineVersion))
  add(formData_616518, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_616518, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_616518, "KmsKeyId", newJString(KmsKeyId))
  add(formData_616518, "Engine", newJString(Engine))
  add(formData_616518, "S3BucketName", newJString(S3BucketName))
  add(formData_616518, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_616518, "DBName", newJString(DBName))
  add(formData_616518, "Iops", newJInt(Iops))
  add(formData_616518, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_616518, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_616518, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_616518, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_616518.add "Tags", Tags
  add(formData_616518, "OptionGroupName", newJString(OptionGroupName))
  add(query_616517, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_616518.add "DBSecurityGroups", DBSecurityGroups
  add(formData_616518, "StorageEncrypted", newJBool(StorageEncrypted))
  result = call_616516.call(nil, query_616517, nil, formData_616518, nil)

var postRestoreDBInstanceFromS3* = Call_PostRestoreDBInstanceFromS3_616460(
    name: "postRestoreDBInstanceFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_PostRestoreDBInstanceFromS3_616461, base: "/",
    url: url_PostRestoreDBInstanceFromS3_616462,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromS3_616402 = ref object of OpenApiRestCall_610658
proc url_GetRestoreDBInstanceFromS3_616404(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromS3_616403(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_616405 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_616405 = validateParameter(valid_616405, JBool, required = false, default = nil)
  if valid_616405 != nil:
    section.add "UseDefaultProcessorFeatures", valid_616405
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_616406 = query.getOrDefault("SourceEngineVersion")
  valid_616406 = validateParameter(valid_616406, JString, required = true,
                                 default = nil)
  if valid_616406 != nil:
    section.add "SourceEngineVersion", valid_616406
  var valid_616407 = query.getOrDefault("SourceEngine")
  valid_616407 = validateParameter(valid_616407, JString, required = true,
                                 default = nil)
  if valid_616407 != nil:
    section.add "SourceEngine", valid_616407
  var valid_616408 = query.getOrDefault("Engine")
  valid_616408 = validateParameter(valid_616408, JString, required = true,
                                 default = nil)
  if valid_616408 != nil:
    section.add "Engine", valid_616408
  var valid_616409 = query.getOrDefault("CopyTagsToSnapshot")
  valid_616409 = validateParameter(valid_616409, JBool, required = false, default = nil)
  if valid_616409 != nil:
    section.add "CopyTagsToSnapshot", valid_616409
  var valid_616410 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_616410 = validateParameter(valid_616410, JInt, required = false, default = nil)
  if valid_616410 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_616410
  var valid_616411 = query.getOrDefault("MonitoringInterval")
  valid_616411 = validateParameter(valid_616411, JInt, required = false, default = nil)
  if valid_616411 != nil:
    section.add "MonitoringInterval", valid_616411
  var valid_616412 = query.getOrDefault("KmsKeyId")
  valid_616412 = validateParameter(valid_616412, JString, required = false,
                                 default = nil)
  if valid_616412 != nil:
    section.add "KmsKeyId", valid_616412
  var valid_616413 = query.getOrDefault("MonitoringRoleArn")
  valid_616413 = validateParameter(valid_616413, JString, required = false,
                                 default = nil)
  if valid_616413 != nil:
    section.add "MonitoringRoleArn", valid_616413
  var valid_616414 = query.getOrDefault("S3BucketName")
  valid_616414 = validateParameter(valid_616414, JString, required = true,
                                 default = nil)
  if valid_616414 != nil:
    section.add "S3BucketName", valid_616414
  var valid_616415 = query.getOrDefault("ProcessorFeatures")
  valid_616415 = validateParameter(valid_616415, JArray, required = false,
                                 default = nil)
  if valid_616415 != nil:
    section.add "ProcessorFeatures", valid_616415
  var valid_616416 = query.getOrDefault("MasterUsername")
  valid_616416 = validateParameter(valid_616416, JString, required = false,
                                 default = nil)
  if valid_616416 != nil:
    section.add "MasterUsername", valid_616416
  var valid_616417 = query.getOrDefault("BackupRetentionPeriod")
  valid_616417 = validateParameter(valid_616417, JInt, required = false, default = nil)
  if valid_616417 != nil:
    section.add "BackupRetentionPeriod", valid_616417
  var valid_616418 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_616418 = validateParameter(valid_616418, JArray, required = false,
                                 default = nil)
  if valid_616418 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616418
  var valid_616419 = query.getOrDefault("EngineVersion")
  valid_616419 = validateParameter(valid_616419, JString, required = false,
                                 default = nil)
  if valid_616419 != nil:
    section.add "EngineVersion", valid_616419
  var valid_616420 = query.getOrDefault("Action")
  valid_616420 = validateParameter(valid_616420, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_616420 != nil:
    section.add "Action", valid_616420
  var valid_616421 = query.getOrDefault("VpcSecurityGroupIds")
  valid_616421 = validateParameter(valid_616421, JArray, required = false,
                                 default = nil)
  if valid_616421 != nil:
    section.add "VpcSecurityGroupIds", valid_616421
  var valid_616422 = query.getOrDefault("AllocatedStorage")
  valid_616422 = validateParameter(valid_616422, JInt, required = false, default = nil)
  if valid_616422 != nil:
    section.add "AllocatedStorage", valid_616422
  var valid_616423 = query.getOrDefault("EnablePerformanceInsights")
  valid_616423 = validateParameter(valid_616423, JBool, required = false, default = nil)
  if valid_616423 != nil:
    section.add "EnablePerformanceInsights", valid_616423
  var valid_616424 = query.getOrDefault("PubliclyAccessible")
  valid_616424 = validateParameter(valid_616424, JBool, required = false, default = nil)
  if valid_616424 != nil:
    section.add "PubliclyAccessible", valid_616424
  var valid_616425 = query.getOrDefault("S3IngestionRoleArn")
  valid_616425 = validateParameter(valid_616425, JString, required = true,
                                 default = nil)
  if valid_616425 != nil:
    section.add "S3IngestionRoleArn", valid_616425
  var valid_616426 = query.getOrDefault("DBName")
  valid_616426 = validateParameter(valid_616426, JString, required = false,
                                 default = nil)
  if valid_616426 != nil:
    section.add "DBName", valid_616426
  var valid_616427 = query.getOrDefault("StorageEncrypted")
  valid_616427 = validateParameter(valid_616427, JBool, required = false, default = nil)
  if valid_616427 != nil:
    section.add "StorageEncrypted", valid_616427
  var valid_616428 = query.getOrDefault("DBParameterGroupName")
  valid_616428 = validateParameter(valid_616428, JString, required = false,
                                 default = nil)
  if valid_616428 != nil:
    section.add "DBParameterGroupName", valid_616428
  var valid_616429 = query.getOrDefault("DeletionProtection")
  valid_616429 = validateParameter(valid_616429, JBool, required = false, default = nil)
  if valid_616429 != nil:
    section.add "DeletionProtection", valid_616429
  var valid_616430 = query.getOrDefault("S3Prefix")
  valid_616430 = validateParameter(valid_616430, JString, required = false,
                                 default = nil)
  if valid_616430 != nil:
    section.add "S3Prefix", valid_616430
  var valid_616431 = query.getOrDefault("Tags")
  valid_616431 = validateParameter(valid_616431, JArray, required = false,
                                 default = nil)
  if valid_616431 != nil:
    section.add "Tags", valid_616431
  var valid_616432 = query.getOrDefault("LicenseModel")
  valid_616432 = validateParameter(valid_616432, JString, required = false,
                                 default = nil)
  if valid_616432 != nil:
    section.add "LicenseModel", valid_616432
  var valid_616433 = query.getOrDefault("DBInstanceIdentifier")
  valid_616433 = validateParameter(valid_616433, JString, required = true,
                                 default = nil)
  if valid_616433 != nil:
    section.add "DBInstanceIdentifier", valid_616433
  var valid_616434 = query.getOrDefault("StorageType")
  valid_616434 = validateParameter(valid_616434, JString, required = false,
                                 default = nil)
  if valid_616434 != nil:
    section.add "StorageType", valid_616434
  var valid_616435 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616435 = validateParameter(valid_616435, JBool, required = false, default = nil)
  if valid_616435 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616435
  var valid_616436 = query.getOrDefault("MultiAZ")
  valid_616436 = validateParameter(valid_616436, JBool, required = false, default = nil)
  if valid_616436 != nil:
    section.add "MultiAZ", valid_616436
  var valid_616437 = query.getOrDefault("DBSecurityGroups")
  valid_616437 = validateParameter(valid_616437, JArray, required = false,
                                 default = nil)
  if valid_616437 != nil:
    section.add "DBSecurityGroups", valid_616437
  var valid_616438 = query.getOrDefault("Port")
  valid_616438 = validateParameter(valid_616438, JInt, required = false, default = nil)
  if valid_616438 != nil:
    section.add "Port", valid_616438
  var valid_616439 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_616439 = validateParameter(valid_616439, JString, required = false,
                                 default = nil)
  if valid_616439 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_616439
  var valid_616440 = query.getOrDefault("MasterUserPassword")
  valid_616440 = validateParameter(valid_616440, JString, required = false,
                                 default = nil)
  if valid_616440 != nil:
    section.add "MasterUserPassword", valid_616440
  var valid_616441 = query.getOrDefault("AvailabilityZone")
  valid_616441 = validateParameter(valid_616441, JString, required = false,
                                 default = nil)
  if valid_616441 != nil:
    section.add "AvailabilityZone", valid_616441
  var valid_616442 = query.getOrDefault("OptionGroupName")
  valid_616442 = validateParameter(valid_616442, JString, required = false,
                                 default = nil)
  if valid_616442 != nil:
    section.add "OptionGroupName", valid_616442
  var valid_616443 = query.getOrDefault("DBSubnetGroupName")
  valid_616443 = validateParameter(valid_616443, JString, required = false,
                                 default = nil)
  if valid_616443 != nil:
    section.add "DBSubnetGroupName", valid_616443
  var valid_616444 = query.getOrDefault("PreferredBackupWindow")
  valid_616444 = validateParameter(valid_616444, JString, required = false,
                                 default = nil)
  if valid_616444 != nil:
    section.add "PreferredBackupWindow", valid_616444
  var valid_616445 = query.getOrDefault("DBInstanceClass")
  valid_616445 = validateParameter(valid_616445, JString, required = true,
                                 default = nil)
  if valid_616445 != nil:
    section.add "DBInstanceClass", valid_616445
  var valid_616446 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_616446 = validateParameter(valid_616446, JString, required = false,
                                 default = nil)
  if valid_616446 != nil:
    section.add "PreferredMaintenanceWindow", valid_616446
  var valid_616447 = query.getOrDefault("Version")
  valid_616447 = validateParameter(valid_616447, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616447 != nil:
    section.add "Version", valid_616447
  var valid_616448 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_616448 = validateParameter(valid_616448, JBool, required = false, default = nil)
  if valid_616448 != nil:
    section.add "AutoMinorVersionUpgrade", valid_616448
  var valid_616449 = query.getOrDefault("Iops")
  valid_616449 = validateParameter(valid_616449, JInt, required = false, default = nil)
  if valid_616449 != nil:
    section.add "Iops", valid_616449
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_616450 = header.getOrDefault("X-Amz-Security-Token")
  valid_616450 = validateParameter(valid_616450, JString, required = false,
                                 default = nil)
  if valid_616450 != nil:
    section.add "X-Amz-Security-Token", valid_616450
  var valid_616451 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616451 = validateParameter(valid_616451, JString, required = false,
                                 default = nil)
  if valid_616451 != nil:
    section.add "X-Amz-SignedHeaders", valid_616451
  var valid_616452 = header.getOrDefault("X-Amz-Signature")
  valid_616452 = validateParameter(valid_616452, JString, required = false,
                                 default = nil)
  if valid_616452 != nil:
    section.add "X-Amz-Signature", valid_616452
  var valid_616453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616453 = validateParameter(valid_616453, JString, required = false,
                                 default = nil)
  if valid_616453 != nil:
    section.add "X-Amz-Content-Sha256", valid_616453
  var valid_616454 = header.getOrDefault("X-Amz-Date")
  valid_616454 = validateParameter(valid_616454, JString, required = false,
                                 default = nil)
  if valid_616454 != nil:
    section.add "X-Amz-Date", valid_616454
  var valid_616455 = header.getOrDefault("X-Amz-Credential")
  valid_616455 = validateParameter(valid_616455, JString, required = false,
                                 default = nil)
  if valid_616455 != nil:
    section.add "X-Amz-Credential", valid_616455
  var valid_616456 = header.getOrDefault("X-Amz-Algorithm")
  valid_616456 = validateParameter(valid_616456, JString, required = false,
                                 default = nil)
  if valid_616456 != nil:
    section.add "X-Amz-Algorithm", valid_616456
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616457: Call_GetRestoreDBInstanceFromS3_616402; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_616457.validator(path, query, header, formData, body)
  let scheme = call_616457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616457.url(scheme.get, call_616457.host, call_616457.base,
                         call_616457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616457, url, valid)

proc call*(call_616458: Call_GetRestoreDBInstanceFromS3_616402;
          SourceEngineVersion: string; SourceEngine: string; Engine: string;
          S3BucketName: string; S3IngestionRoleArn: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          UseDefaultProcessorFeatures: bool = false;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBInstanceFromS3";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; StorageEncrypted: bool = false;
          DBParameterGroupName: string = ""; DeletionProtection: bool = false;
          S3Prefix: string = ""; Tags: JsonNode = nil; LicenseModel: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0): Recallable =
  ## getRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  var query_616459 = newJObject()
  add(query_616459, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_616459, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_616459, "SourceEngine", newJString(SourceEngine))
  add(query_616459, "Engine", newJString(Engine))
  add(query_616459, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_616459, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_616459, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_616459, "KmsKeyId", newJString(KmsKeyId))
  add(query_616459, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_616459, "S3BucketName", newJString(S3BucketName))
  if ProcessorFeatures != nil:
    query_616459.add "ProcessorFeatures", ProcessorFeatures
  add(query_616459, "MasterUsername", newJString(MasterUsername))
  add(query_616459, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_616459.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_616459, "EngineVersion", newJString(EngineVersion))
  add(query_616459, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_616459.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_616459, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_616459, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_616459, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_616459, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_616459, "DBName", newJString(DBName))
  add(query_616459, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_616459, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_616459, "DeletionProtection", newJBool(DeletionProtection))
  add(query_616459, "S3Prefix", newJString(S3Prefix))
  if Tags != nil:
    query_616459.add "Tags", Tags
  add(query_616459, "LicenseModel", newJString(LicenseModel))
  add(query_616459, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_616459, "StorageType", newJString(StorageType))
  add(query_616459, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_616459, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_616459.add "DBSecurityGroups", DBSecurityGroups
  add(query_616459, "Port", newJInt(Port))
  add(query_616459, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_616459, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_616459, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_616459, "OptionGroupName", newJString(OptionGroupName))
  add(query_616459, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_616459, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_616459, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_616459, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_616459, "Version", newJString(Version))
  add(query_616459, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_616459, "Iops", newJInt(Iops))
  result = call_616458.call(nil, query_616459, nil, nil, nil)

var getRestoreDBInstanceFromS3* = Call_GetRestoreDBInstanceFromS3_616402(
    name: "getRestoreDBInstanceFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_GetRestoreDBInstanceFromS3_616403, base: "/",
    url: url_GetRestoreDBInstanceFromS3_616404,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceToPointInTime_616565 = ref object of OpenApiRestCall_610658
proc url_PostRestoreDBInstanceToPointInTime_616567(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceToPointInTime_616566(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616568 = query.getOrDefault("Action")
  valid_616568 = validateParameter(valid_616568, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_616568 != nil:
    section.add "Action", valid_616568
  var valid_616569 = query.getOrDefault("Version")
  valid_616569 = validateParameter(valid_616569, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616569 != nil:
    section.add "Version", valid_616569
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616570 = header.getOrDefault("X-Amz-Signature")
  valid_616570 = validateParameter(valid_616570, JString, required = false,
                                 default = nil)
  if valid_616570 != nil:
    section.add "X-Amz-Signature", valid_616570
  var valid_616571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616571 = validateParameter(valid_616571, JString, required = false,
                                 default = nil)
  if valid_616571 != nil:
    section.add "X-Amz-Content-Sha256", valid_616571
  var valid_616572 = header.getOrDefault("X-Amz-Date")
  valid_616572 = validateParameter(valid_616572, JString, required = false,
                                 default = nil)
  if valid_616572 != nil:
    section.add "X-Amz-Date", valid_616572
  var valid_616573 = header.getOrDefault("X-Amz-Credential")
  valid_616573 = validateParameter(valid_616573, JString, required = false,
                                 default = nil)
  if valid_616573 != nil:
    section.add "X-Amz-Credential", valid_616573
  var valid_616574 = header.getOrDefault("X-Amz-Security-Token")
  valid_616574 = validateParameter(valid_616574, JString, required = false,
                                 default = nil)
  if valid_616574 != nil:
    section.add "X-Amz-Security-Token", valid_616574
  var valid_616575 = header.getOrDefault("X-Amz-Algorithm")
  valid_616575 = validateParameter(valid_616575, JString, required = false,
                                 default = nil)
  if valid_616575 != nil:
    section.add "X-Amz-Algorithm", valid_616575
  var valid_616576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616576 = validateParameter(valid_616576, JString, required = false,
                                 default = nil)
  if valid_616576 != nil:
    section.add "X-Amz-SignedHeaders", valid_616576
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_616577 = formData.getOrDefault("Port")
  valid_616577 = validateParameter(valid_616577, JInt, required = false, default = nil)
  if valid_616577 != nil:
    section.add "Port", valid_616577
  var valid_616578 = formData.getOrDefault("DBInstanceClass")
  valid_616578 = validateParameter(valid_616578, JString, required = false,
                                 default = nil)
  if valid_616578 != nil:
    section.add "DBInstanceClass", valid_616578
  var valid_616579 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_616579 = validateParameter(valid_616579, JBool, required = false, default = nil)
  if valid_616579 != nil:
    section.add "UseDefaultProcessorFeatures", valid_616579
  var valid_616580 = formData.getOrDefault("MultiAZ")
  valid_616580 = validateParameter(valid_616580, JBool, required = false, default = nil)
  if valid_616580 != nil:
    section.add "MultiAZ", valid_616580
  var valid_616581 = formData.getOrDefault("Domain")
  valid_616581 = validateParameter(valid_616581, JString, required = false,
                                 default = nil)
  if valid_616581 != nil:
    section.add "Domain", valid_616581
  var valid_616582 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_616582 = validateParameter(valid_616582, JString, required = false,
                                 default = nil)
  if valid_616582 != nil:
    section.add "SourceDBInstanceIdentifier", valid_616582
  var valid_616583 = formData.getOrDefault("DBParameterGroupName")
  valid_616583 = validateParameter(valid_616583, JString, required = false,
                                 default = nil)
  if valid_616583 != nil:
    section.add "DBParameterGroupName", valid_616583
  var valid_616584 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_616584 = validateParameter(valid_616584, JArray, required = false,
                                 default = nil)
  if valid_616584 != nil:
    section.add "VpcSecurityGroupIds", valid_616584
  var valid_616585 = formData.getOrDefault("AvailabilityZone")
  valid_616585 = validateParameter(valid_616585, JString, required = false,
                                 default = nil)
  if valid_616585 != nil:
    section.add "AvailabilityZone", valid_616585
  var valid_616586 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616586 = validateParameter(valid_616586, JBool, required = false, default = nil)
  if valid_616586 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616586
  var valid_616587 = formData.getOrDefault("Engine")
  valid_616587 = validateParameter(valid_616587, JString, required = false,
                                 default = nil)
  if valid_616587 != nil:
    section.add "Engine", valid_616587
  var valid_616588 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_616588 = validateParameter(valid_616588, JBool, required = false, default = nil)
  if valid_616588 != nil:
    section.add "AutoMinorVersionUpgrade", valid_616588
  var valid_616589 = formData.getOrDefault("TdeCredentialPassword")
  valid_616589 = validateParameter(valid_616589, JString, required = false,
                                 default = nil)
  if valid_616589 != nil:
    section.add "TdeCredentialPassword", valid_616589
  var valid_616590 = formData.getOrDefault("UseLatestRestorableTime")
  valid_616590 = validateParameter(valid_616590, JBool, required = false, default = nil)
  if valid_616590 != nil:
    section.add "UseLatestRestorableTime", valid_616590
  var valid_616591 = formData.getOrDefault("DBName")
  valid_616591 = validateParameter(valid_616591, JString, required = false,
                                 default = nil)
  if valid_616591 != nil:
    section.add "DBName", valid_616591
  var valid_616592 = formData.getOrDefault("Iops")
  valid_616592 = validateParameter(valid_616592, JInt, required = false, default = nil)
  if valid_616592 != nil:
    section.add "Iops", valid_616592
  var valid_616593 = formData.getOrDefault("TdeCredentialArn")
  valid_616593 = validateParameter(valid_616593, JString, required = false,
                                 default = nil)
  if valid_616593 != nil:
    section.add "TdeCredentialArn", valid_616593
  var valid_616594 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_616594 = validateParameter(valid_616594, JArray, required = false,
                                 default = nil)
  if valid_616594 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616594
  var valid_616595 = formData.getOrDefault("PubliclyAccessible")
  valid_616595 = validateParameter(valid_616595, JBool, required = false, default = nil)
  if valid_616595 != nil:
    section.add "PubliclyAccessible", valid_616595
  var valid_616596 = formData.getOrDefault("LicenseModel")
  valid_616596 = validateParameter(valid_616596, JString, required = false,
                                 default = nil)
  if valid_616596 != nil:
    section.add "LicenseModel", valid_616596
  var valid_616597 = formData.getOrDefault("Tags")
  valid_616597 = validateParameter(valid_616597, JArray, required = false,
                                 default = nil)
  if valid_616597 != nil:
    section.add "Tags", valid_616597
  var valid_616598 = formData.getOrDefault("DBSubnetGroupName")
  valid_616598 = validateParameter(valid_616598, JString, required = false,
                                 default = nil)
  if valid_616598 != nil:
    section.add "DBSubnetGroupName", valid_616598
  var valid_616599 = formData.getOrDefault("DomainIAMRoleName")
  valid_616599 = validateParameter(valid_616599, JString, required = false,
                                 default = nil)
  if valid_616599 != nil:
    section.add "DomainIAMRoleName", valid_616599
  var valid_616600 = formData.getOrDefault("OptionGroupName")
  valid_616600 = validateParameter(valid_616600, JString, required = false,
                                 default = nil)
  if valid_616600 != nil:
    section.add "OptionGroupName", valid_616600
  var valid_616601 = formData.getOrDefault("RestoreTime")
  valid_616601 = validateParameter(valid_616601, JString, required = false,
                                 default = nil)
  if valid_616601 != nil:
    section.add "RestoreTime", valid_616601
  assert formData != nil, "formData argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_616602 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_616602 = validateParameter(valid_616602, JString, required = true,
                                 default = nil)
  if valid_616602 != nil:
    section.add "TargetDBInstanceIdentifier", valid_616602
  var valid_616603 = formData.getOrDefault("StorageType")
  valid_616603 = validateParameter(valid_616603, JString, required = false,
                                 default = nil)
  if valid_616603 != nil:
    section.add "StorageType", valid_616603
  var valid_616604 = formData.getOrDefault("SourceDbiResourceId")
  valid_616604 = validateParameter(valid_616604, JString, required = false,
                                 default = nil)
  if valid_616604 != nil:
    section.add "SourceDbiResourceId", valid_616604
  var valid_616605 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_616605 = validateParameter(valid_616605, JBool, required = false, default = nil)
  if valid_616605 != nil:
    section.add "CopyTagsToSnapshot", valid_616605
  var valid_616606 = formData.getOrDefault("DeletionProtection")
  valid_616606 = validateParameter(valid_616606, JBool, required = false, default = nil)
  if valid_616606 != nil:
    section.add "DeletionProtection", valid_616606
  var valid_616607 = formData.getOrDefault("ProcessorFeatures")
  valid_616607 = validateParameter(valid_616607, JArray, required = false,
                                 default = nil)
  if valid_616607 != nil:
    section.add "ProcessorFeatures", valid_616607
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616608: Call_PostRestoreDBInstanceToPointInTime_616565;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_616608.validator(path, query, header, formData, body)
  let scheme = call_616608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616608.url(scheme.get, call_616608.host, call_616608.base,
                         call_616608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616608, url, valid)

proc call*(call_616609: Call_PostRestoreDBInstanceToPointInTime_616565;
          TargetDBInstanceIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = "";
          SourceDBInstanceIdentifier: string = "";
          DBParameterGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          UseLatestRestorableTime: bool = false; DBName: string = ""; Iops: int = 0;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceToPointInTime";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; RestoreTime: string = "";
          Version: string = "2014-10-31"; StorageType: string = "";
          SourceDbiResourceId: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_616610 = newJObject()
  var formData_616611 = newJObject()
  add(formData_616611, "Port", newJInt(Port))
  add(formData_616611, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_616611, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_616611, "MultiAZ", newJBool(MultiAZ))
  add(formData_616611, "Domain", newJString(Domain))
  add(formData_616611, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_616611, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_616611.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_616611, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_616611, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_616611, "Engine", newJString(Engine))
  add(formData_616611, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_616611, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_616611, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_616611, "DBName", newJString(DBName))
  add(formData_616611, "Iops", newJInt(Iops))
  add(formData_616611, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_616611.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_616611, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_616610, "Action", newJString(Action))
  add(formData_616611, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_616611.add "Tags", Tags
  add(formData_616611, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_616611, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_616611, "OptionGroupName", newJString(OptionGroupName))
  add(formData_616611, "RestoreTime", newJString(RestoreTime))
  add(formData_616611, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_616610, "Version", newJString(Version))
  add(formData_616611, "StorageType", newJString(StorageType))
  add(formData_616611, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(formData_616611, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_616611, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_616611.add "ProcessorFeatures", ProcessorFeatures
  result = call_616609.call(nil, query_616610, nil, formData_616611, nil)

var postRestoreDBInstanceToPointInTime* = Call_PostRestoreDBInstanceToPointInTime_616565(
    name: "postRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_PostRestoreDBInstanceToPointInTime_616566, base: "/",
    url: url_PostRestoreDBInstanceToPointInTime_616567,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceToPointInTime_616519 = ref object of OpenApiRestCall_610658
proc url_GetRestoreDBInstanceToPointInTime_616521(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceToPointInTime_616520(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_616522 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_616522 = validateParameter(valid_616522, JBool, required = false, default = nil)
  if valid_616522 != nil:
    section.add "UseDefaultProcessorFeatures", valid_616522
  var valid_616523 = query.getOrDefault("DBName")
  valid_616523 = validateParameter(valid_616523, JString, required = false,
                                 default = nil)
  if valid_616523 != nil:
    section.add "DBName", valid_616523
  var valid_616524 = query.getOrDefault("TdeCredentialPassword")
  valid_616524 = validateParameter(valid_616524, JString, required = false,
                                 default = nil)
  if valid_616524 != nil:
    section.add "TdeCredentialPassword", valid_616524
  var valid_616525 = query.getOrDefault("DeletionProtection")
  valid_616525 = validateParameter(valid_616525, JBool, required = false, default = nil)
  if valid_616525 != nil:
    section.add "DeletionProtection", valid_616525
  var valid_616526 = query.getOrDefault("Engine")
  valid_616526 = validateParameter(valid_616526, JString, required = false,
                                 default = nil)
  if valid_616526 != nil:
    section.add "Engine", valid_616526
  var valid_616527 = query.getOrDefault("UseLatestRestorableTime")
  valid_616527 = validateParameter(valid_616527, JBool, required = false, default = nil)
  if valid_616527 != nil:
    section.add "UseLatestRestorableTime", valid_616527
  var valid_616528 = query.getOrDefault("CopyTagsToSnapshot")
  valid_616528 = validateParameter(valid_616528, JBool, required = false, default = nil)
  if valid_616528 != nil:
    section.add "CopyTagsToSnapshot", valid_616528
  var valid_616529 = query.getOrDefault("DBParameterGroupName")
  valid_616529 = validateParameter(valid_616529, JString, required = false,
                                 default = nil)
  if valid_616529 != nil:
    section.add "DBParameterGroupName", valid_616529
  var valid_616530 = query.getOrDefault("Tags")
  valid_616530 = validateParameter(valid_616530, JArray, required = false,
                                 default = nil)
  if valid_616530 != nil:
    section.add "Tags", valid_616530
  var valid_616531 = query.getOrDefault("LicenseModel")
  valid_616531 = validateParameter(valid_616531, JString, required = false,
                                 default = nil)
  if valid_616531 != nil:
    section.add "LicenseModel", valid_616531
  var valid_616532 = query.getOrDefault("TdeCredentialArn")
  valid_616532 = validateParameter(valid_616532, JString, required = false,
                                 default = nil)
  if valid_616532 != nil:
    section.add "TdeCredentialArn", valid_616532
  var valid_616533 = query.getOrDefault("ProcessorFeatures")
  valid_616533 = validateParameter(valid_616533, JArray, required = false,
                                 default = nil)
  if valid_616533 != nil:
    section.add "ProcessorFeatures", valid_616533
  var valid_616534 = query.getOrDefault("StorageType")
  valid_616534 = validateParameter(valid_616534, JString, required = false,
                                 default = nil)
  if valid_616534 != nil:
    section.add "StorageType", valid_616534
  assert query != nil, "query argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_616535 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_616535 = validateParameter(valid_616535, JString, required = true,
                                 default = nil)
  if valid_616535 != nil:
    section.add "TargetDBInstanceIdentifier", valid_616535
  var valid_616536 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616536 = validateParameter(valid_616536, JBool, required = false, default = nil)
  if valid_616536 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616536
  var valid_616537 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_616537 = validateParameter(valid_616537, JArray, required = false,
                                 default = nil)
  if valid_616537 != nil:
    section.add "EnableCloudwatchLogsExports", valid_616537
  var valid_616538 = query.getOrDefault("Action")
  valid_616538 = validateParameter(valid_616538, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_616538 != nil:
    section.add "Action", valid_616538
  var valid_616539 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_616539 = validateParameter(valid_616539, JString, required = false,
                                 default = nil)
  if valid_616539 != nil:
    section.add "SourceDBInstanceIdentifier", valid_616539
  var valid_616540 = query.getOrDefault("MultiAZ")
  valid_616540 = validateParameter(valid_616540, JBool, required = false, default = nil)
  if valid_616540 != nil:
    section.add "MultiAZ", valid_616540
  var valid_616541 = query.getOrDefault("Port")
  valid_616541 = validateParameter(valid_616541, JInt, required = false, default = nil)
  if valid_616541 != nil:
    section.add "Port", valid_616541
  var valid_616542 = query.getOrDefault("Domain")
  valid_616542 = validateParameter(valid_616542, JString, required = false,
                                 default = nil)
  if valid_616542 != nil:
    section.add "Domain", valid_616542
  var valid_616543 = query.getOrDefault("VpcSecurityGroupIds")
  valid_616543 = validateParameter(valid_616543, JArray, required = false,
                                 default = nil)
  if valid_616543 != nil:
    section.add "VpcSecurityGroupIds", valid_616543
  var valid_616544 = query.getOrDefault("SourceDbiResourceId")
  valid_616544 = validateParameter(valid_616544, JString, required = false,
                                 default = nil)
  if valid_616544 != nil:
    section.add "SourceDbiResourceId", valid_616544
  var valid_616545 = query.getOrDefault("AvailabilityZone")
  valid_616545 = validateParameter(valid_616545, JString, required = false,
                                 default = nil)
  if valid_616545 != nil:
    section.add "AvailabilityZone", valid_616545
  var valid_616546 = query.getOrDefault("OptionGroupName")
  valid_616546 = validateParameter(valid_616546, JString, required = false,
                                 default = nil)
  if valid_616546 != nil:
    section.add "OptionGroupName", valid_616546
  var valid_616547 = query.getOrDefault("DBSubnetGroupName")
  valid_616547 = validateParameter(valid_616547, JString, required = false,
                                 default = nil)
  if valid_616547 != nil:
    section.add "DBSubnetGroupName", valid_616547
  var valid_616548 = query.getOrDefault("RestoreTime")
  valid_616548 = validateParameter(valid_616548, JString, required = false,
                                 default = nil)
  if valid_616548 != nil:
    section.add "RestoreTime", valid_616548
  var valid_616549 = query.getOrDefault("DBInstanceClass")
  valid_616549 = validateParameter(valid_616549, JString, required = false,
                                 default = nil)
  if valid_616549 != nil:
    section.add "DBInstanceClass", valid_616549
  var valid_616550 = query.getOrDefault("PubliclyAccessible")
  valid_616550 = validateParameter(valid_616550, JBool, required = false, default = nil)
  if valid_616550 != nil:
    section.add "PubliclyAccessible", valid_616550
  var valid_616551 = query.getOrDefault("Version")
  valid_616551 = validateParameter(valid_616551, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616551 != nil:
    section.add "Version", valid_616551
  var valid_616552 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_616552 = validateParameter(valid_616552, JBool, required = false, default = nil)
  if valid_616552 != nil:
    section.add "AutoMinorVersionUpgrade", valid_616552
  var valid_616553 = query.getOrDefault("Iops")
  valid_616553 = validateParameter(valid_616553, JInt, required = false, default = nil)
  if valid_616553 != nil:
    section.add "Iops", valid_616553
  var valid_616554 = query.getOrDefault("DomainIAMRoleName")
  valid_616554 = validateParameter(valid_616554, JString, required = false,
                                 default = nil)
  if valid_616554 != nil:
    section.add "DomainIAMRoleName", valid_616554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616555 = header.getOrDefault("X-Amz-Signature")
  valid_616555 = validateParameter(valid_616555, JString, required = false,
                                 default = nil)
  if valid_616555 != nil:
    section.add "X-Amz-Signature", valid_616555
  var valid_616556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616556 = validateParameter(valid_616556, JString, required = false,
                                 default = nil)
  if valid_616556 != nil:
    section.add "X-Amz-Content-Sha256", valid_616556
  var valid_616557 = header.getOrDefault("X-Amz-Date")
  valid_616557 = validateParameter(valid_616557, JString, required = false,
                                 default = nil)
  if valid_616557 != nil:
    section.add "X-Amz-Date", valid_616557
  var valid_616558 = header.getOrDefault("X-Amz-Credential")
  valid_616558 = validateParameter(valid_616558, JString, required = false,
                                 default = nil)
  if valid_616558 != nil:
    section.add "X-Amz-Credential", valid_616558
  var valid_616559 = header.getOrDefault("X-Amz-Security-Token")
  valid_616559 = validateParameter(valid_616559, JString, required = false,
                                 default = nil)
  if valid_616559 != nil:
    section.add "X-Amz-Security-Token", valid_616559
  var valid_616560 = header.getOrDefault("X-Amz-Algorithm")
  valid_616560 = validateParameter(valid_616560, JString, required = false,
                                 default = nil)
  if valid_616560 != nil:
    section.add "X-Amz-Algorithm", valid_616560
  var valid_616561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616561 = validateParameter(valid_616561, JString, required = false,
                                 default = nil)
  if valid_616561 != nil:
    section.add "X-Amz-SignedHeaders", valid_616561
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616562: Call_GetRestoreDBInstanceToPointInTime_616519;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_616562.validator(path, query, header, formData, body)
  let scheme = call_616562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616562.url(scheme.get, call_616562.host, call_616562.base,
                         call_616562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616562, url, valid)

proc call*(call_616563: Call_GetRestoreDBInstanceToPointInTime_616519;
          TargetDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; UseLatestRestorableTime: bool = false;
          CopyTagsToSnapshot: bool = false; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; LicenseModel: string = "";
          TdeCredentialArn: string = ""; ProcessorFeatures: JsonNode = nil;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceToPointInTime";
          SourceDBInstanceIdentifier: string = ""; MultiAZ: bool = false; Port: int = 0;
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          SourceDbiResourceId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          RestoreTime: string = ""; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_616564 = newJObject()
  add(query_616564, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_616564, "DBName", newJString(DBName))
  add(query_616564, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_616564, "DeletionProtection", newJBool(DeletionProtection))
  add(query_616564, "Engine", newJString(Engine))
  add(query_616564, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_616564, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_616564, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_616564.add "Tags", Tags
  add(query_616564, "LicenseModel", newJString(LicenseModel))
  add(query_616564, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_616564.add "ProcessorFeatures", ProcessorFeatures
  add(query_616564, "StorageType", newJString(StorageType))
  add(query_616564, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_616564, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_616564.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_616564, "Action", newJString(Action))
  add(query_616564, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_616564, "MultiAZ", newJBool(MultiAZ))
  add(query_616564, "Port", newJInt(Port))
  add(query_616564, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_616564.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_616564, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(query_616564, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_616564, "OptionGroupName", newJString(OptionGroupName))
  add(query_616564, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_616564, "RestoreTime", newJString(RestoreTime))
  add(query_616564, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_616564, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_616564, "Version", newJString(Version))
  add(query_616564, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_616564, "Iops", newJInt(Iops))
  add(query_616564, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_616563.call(nil, query_616564, nil, nil, nil)

var getRestoreDBInstanceToPointInTime* = Call_GetRestoreDBInstanceToPointInTime_616519(
    name: "getRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_GetRestoreDBInstanceToPointInTime_616520, base: "/",
    url: url_GetRestoreDBInstanceToPointInTime_616521,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeDBSecurityGroupIngress_616632 = ref object of OpenApiRestCall_610658
proc url_PostRevokeDBSecurityGroupIngress_616634(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeDBSecurityGroupIngress_616633(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616635 = query.getOrDefault("Action")
  valid_616635 = validateParameter(valid_616635, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_616635 != nil:
    section.add "Action", valid_616635
  var valid_616636 = query.getOrDefault("Version")
  valid_616636 = validateParameter(valid_616636, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616636 != nil:
    section.add "Version", valid_616636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616637 = header.getOrDefault("X-Amz-Signature")
  valid_616637 = validateParameter(valid_616637, JString, required = false,
                                 default = nil)
  if valid_616637 != nil:
    section.add "X-Amz-Signature", valid_616637
  var valid_616638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616638 = validateParameter(valid_616638, JString, required = false,
                                 default = nil)
  if valid_616638 != nil:
    section.add "X-Amz-Content-Sha256", valid_616638
  var valid_616639 = header.getOrDefault("X-Amz-Date")
  valid_616639 = validateParameter(valid_616639, JString, required = false,
                                 default = nil)
  if valid_616639 != nil:
    section.add "X-Amz-Date", valid_616639
  var valid_616640 = header.getOrDefault("X-Amz-Credential")
  valid_616640 = validateParameter(valid_616640, JString, required = false,
                                 default = nil)
  if valid_616640 != nil:
    section.add "X-Amz-Credential", valid_616640
  var valid_616641 = header.getOrDefault("X-Amz-Security-Token")
  valid_616641 = validateParameter(valid_616641, JString, required = false,
                                 default = nil)
  if valid_616641 != nil:
    section.add "X-Amz-Security-Token", valid_616641
  var valid_616642 = header.getOrDefault("X-Amz-Algorithm")
  valid_616642 = validateParameter(valid_616642, JString, required = false,
                                 default = nil)
  if valid_616642 != nil:
    section.add "X-Amz-Algorithm", valid_616642
  var valid_616643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616643 = validateParameter(valid_616643, JString, required = false,
                                 default = nil)
  if valid_616643 != nil:
    section.add "X-Amz-SignedHeaders", valid_616643
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_616644 = formData.getOrDefault("DBSecurityGroupName")
  valid_616644 = validateParameter(valid_616644, JString, required = true,
                                 default = nil)
  if valid_616644 != nil:
    section.add "DBSecurityGroupName", valid_616644
  var valid_616645 = formData.getOrDefault("EC2SecurityGroupName")
  valid_616645 = validateParameter(valid_616645, JString, required = false,
                                 default = nil)
  if valid_616645 != nil:
    section.add "EC2SecurityGroupName", valid_616645
  var valid_616646 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_616646 = validateParameter(valid_616646, JString, required = false,
                                 default = nil)
  if valid_616646 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_616646
  var valid_616647 = formData.getOrDefault("EC2SecurityGroupId")
  valid_616647 = validateParameter(valid_616647, JString, required = false,
                                 default = nil)
  if valid_616647 != nil:
    section.add "EC2SecurityGroupId", valid_616647
  var valid_616648 = formData.getOrDefault("CIDRIP")
  valid_616648 = validateParameter(valid_616648, JString, required = false,
                                 default = nil)
  if valid_616648 != nil:
    section.add "CIDRIP", valid_616648
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616649: Call_PostRevokeDBSecurityGroupIngress_616632;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_616649.validator(path, query, header, formData, body)
  let scheme = call_616649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616649.url(scheme.get, call_616649.host, call_616649.base,
                         call_616649.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616649, url, valid)

proc call*(call_616650: Call_PostRevokeDBSecurityGroupIngress_616632;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616651 = newJObject()
  var formData_616652 = newJObject()
  add(formData_616652, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_616652, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_616652, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_616652, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_616652, "CIDRIP", newJString(CIDRIP))
  add(query_616651, "Action", newJString(Action))
  add(query_616651, "Version", newJString(Version))
  result = call_616650.call(nil, query_616651, nil, formData_616652, nil)

var postRevokeDBSecurityGroupIngress* = Call_PostRevokeDBSecurityGroupIngress_616632(
    name: "postRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_PostRevokeDBSecurityGroupIngress_616633, base: "/",
    url: url_PostRevokeDBSecurityGroupIngress_616634,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeDBSecurityGroupIngress_616612 = ref object of OpenApiRestCall_610658
proc url_GetRevokeDBSecurityGroupIngress_616614(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeDBSecurityGroupIngress_616613(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  var valid_616615 = query.getOrDefault("EC2SecurityGroupName")
  valid_616615 = validateParameter(valid_616615, JString, required = false,
                                 default = nil)
  if valid_616615 != nil:
    section.add "EC2SecurityGroupName", valid_616615
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_616616 = query.getOrDefault("DBSecurityGroupName")
  valid_616616 = validateParameter(valid_616616, JString, required = true,
                                 default = nil)
  if valid_616616 != nil:
    section.add "DBSecurityGroupName", valid_616616
  var valid_616617 = query.getOrDefault("EC2SecurityGroupId")
  valid_616617 = validateParameter(valid_616617, JString, required = false,
                                 default = nil)
  if valid_616617 != nil:
    section.add "EC2SecurityGroupId", valid_616617
  var valid_616618 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_616618 = validateParameter(valid_616618, JString, required = false,
                                 default = nil)
  if valid_616618 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_616618
  var valid_616619 = query.getOrDefault("Action")
  valid_616619 = validateParameter(valid_616619, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_616619 != nil:
    section.add "Action", valid_616619
  var valid_616620 = query.getOrDefault("Version")
  valid_616620 = validateParameter(valid_616620, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616620 != nil:
    section.add "Version", valid_616620
  var valid_616621 = query.getOrDefault("CIDRIP")
  valid_616621 = validateParameter(valid_616621, JString, required = false,
                                 default = nil)
  if valid_616621 != nil:
    section.add "CIDRIP", valid_616621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616622 = header.getOrDefault("X-Amz-Signature")
  valid_616622 = validateParameter(valid_616622, JString, required = false,
                                 default = nil)
  if valid_616622 != nil:
    section.add "X-Amz-Signature", valid_616622
  var valid_616623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616623 = validateParameter(valid_616623, JString, required = false,
                                 default = nil)
  if valid_616623 != nil:
    section.add "X-Amz-Content-Sha256", valid_616623
  var valid_616624 = header.getOrDefault("X-Amz-Date")
  valid_616624 = validateParameter(valid_616624, JString, required = false,
                                 default = nil)
  if valid_616624 != nil:
    section.add "X-Amz-Date", valid_616624
  var valid_616625 = header.getOrDefault("X-Amz-Credential")
  valid_616625 = validateParameter(valid_616625, JString, required = false,
                                 default = nil)
  if valid_616625 != nil:
    section.add "X-Amz-Credential", valid_616625
  var valid_616626 = header.getOrDefault("X-Amz-Security-Token")
  valid_616626 = validateParameter(valid_616626, JString, required = false,
                                 default = nil)
  if valid_616626 != nil:
    section.add "X-Amz-Security-Token", valid_616626
  var valid_616627 = header.getOrDefault("X-Amz-Algorithm")
  valid_616627 = validateParameter(valid_616627, JString, required = false,
                                 default = nil)
  if valid_616627 != nil:
    section.add "X-Amz-Algorithm", valid_616627
  var valid_616628 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616628 = validateParameter(valid_616628, JString, required = false,
                                 default = nil)
  if valid_616628 != nil:
    section.add "X-Amz-SignedHeaders", valid_616628
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616629: Call_GetRevokeDBSecurityGroupIngress_616612;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_616629.validator(path, query, header, formData, body)
  let scheme = call_616629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616629.url(scheme.get, call_616629.host, call_616629.base,
                         call_616629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616629, url, valid)

proc call*(call_616630: Call_GetRevokeDBSecurityGroupIngress_616612;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  var query_616631 = newJObject()
  add(query_616631, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_616631, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_616631, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_616631, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_616631, "Action", newJString(Action))
  add(query_616631, "Version", newJString(Version))
  add(query_616631, "CIDRIP", newJString(CIDRIP))
  result = call_616630.call(nil, query_616631, nil, nil, nil)

var getRevokeDBSecurityGroupIngress* = Call_GetRevokeDBSecurityGroupIngress_616612(
    name: "getRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_GetRevokeDBSecurityGroupIngress_616613, base: "/",
    url: url_GetRevokeDBSecurityGroupIngress_616614,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartActivityStream_616672 = ref object of OpenApiRestCall_610658
proc url_PostStartActivityStream_616674(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartActivityStream_616673(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616675 = query.getOrDefault("Action")
  valid_616675 = validateParameter(valid_616675, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_616675 != nil:
    section.add "Action", valid_616675
  var valid_616676 = query.getOrDefault("Version")
  valid_616676 = validateParameter(valid_616676, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616676 != nil:
    section.add "Version", valid_616676
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616677 = header.getOrDefault("X-Amz-Signature")
  valid_616677 = validateParameter(valid_616677, JString, required = false,
                                 default = nil)
  if valid_616677 != nil:
    section.add "X-Amz-Signature", valid_616677
  var valid_616678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616678 = validateParameter(valid_616678, JString, required = false,
                                 default = nil)
  if valid_616678 != nil:
    section.add "X-Amz-Content-Sha256", valid_616678
  var valid_616679 = header.getOrDefault("X-Amz-Date")
  valid_616679 = validateParameter(valid_616679, JString, required = false,
                                 default = nil)
  if valid_616679 != nil:
    section.add "X-Amz-Date", valid_616679
  var valid_616680 = header.getOrDefault("X-Amz-Credential")
  valid_616680 = validateParameter(valid_616680, JString, required = false,
                                 default = nil)
  if valid_616680 != nil:
    section.add "X-Amz-Credential", valid_616680
  var valid_616681 = header.getOrDefault("X-Amz-Security-Token")
  valid_616681 = validateParameter(valid_616681, JString, required = false,
                                 default = nil)
  if valid_616681 != nil:
    section.add "X-Amz-Security-Token", valid_616681
  var valid_616682 = header.getOrDefault("X-Amz-Algorithm")
  valid_616682 = validateParameter(valid_616682, JString, required = false,
                                 default = nil)
  if valid_616682 != nil:
    section.add "X-Amz-Algorithm", valid_616682
  var valid_616683 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616683 = validateParameter(valid_616683, JString, required = false,
                                 default = nil)
  if valid_616683 != nil:
    section.add "X-Amz-SignedHeaders", valid_616683
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_616684 = formData.getOrDefault("ResourceArn")
  valid_616684 = validateParameter(valid_616684, JString, required = true,
                                 default = nil)
  if valid_616684 != nil:
    section.add "ResourceArn", valid_616684
  var valid_616685 = formData.getOrDefault("Mode")
  valid_616685 = validateParameter(valid_616685, JString, required = true,
                                 default = newJString("sync"))
  if valid_616685 != nil:
    section.add "Mode", valid_616685
  var valid_616686 = formData.getOrDefault("KmsKeyId")
  valid_616686 = validateParameter(valid_616686, JString, required = true,
                                 default = nil)
  if valid_616686 != nil:
    section.add "KmsKeyId", valid_616686
  var valid_616687 = formData.getOrDefault("ApplyImmediately")
  valid_616687 = validateParameter(valid_616687, JBool, required = false, default = nil)
  if valid_616687 != nil:
    section.add "ApplyImmediately", valid_616687
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616688: Call_PostStartActivityStream_616672; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_616688.validator(path, query, header, formData, body)
  let scheme = call_616688.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616688.url(scheme.get, call_616688.host, call_616688.base,
                         call_616688.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616688, url, valid)

proc call*(call_616689: Call_PostStartActivityStream_616672; ResourceArn: string;
          KmsKeyId: string; Mode: string = "sync"; ApplyImmediately: bool = false;
          Action: string = "StartActivityStream"; Version: string = "2014-10-31"): Recallable =
  ## postStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616690 = newJObject()
  var formData_616691 = newJObject()
  add(formData_616691, "ResourceArn", newJString(ResourceArn))
  add(formData_616691, "Mode", newJString(Mode))
  add(formData_616691, "KmsKeyId", newJString(KmsKeyId))
  add(formData_616691, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_616690, "Action", newJString(Action))
  add(query_616690, "Version", newJString(Version))
  result = call_616689.call(nil, query_616690, nil, formData_616691, nil)

var postStartActivityStream* = Call_PostStartActivityStream_616672(
    name: "postStartActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_PostStartActivityStream_616673, base: "/",
    url: url_PostStartActivityStream_616674, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartActivityStream_616653 = ref object of OpenApiRestCall_610658
proc url_GetStartActivityStream_616655(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartActivityStream_616654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `KmsKeyId` field"
  var valid_616656 = query.getOrDefault("KmsKeyId")
  valid_616656 = validateParameter(valid_616656, JString, required = true,
                                 default = nil)
  if valid_616656 != nil:
    section.add "KmsKeyId", valid_616656
  var valid_616657 = query.getOrDefault("ResourceArn")
  valid_616657 = validateParameter(valid_616657, JString, required = true,
                                 default = nil)
  if valid_616657 != nil:
    section.add "ResourceArn", valid_616657
  var valid_616658 = query.getOrDefault("Mode")
  valid_616658 = validateParameter(valid_616658, JString, required = true,
                                 default = newJString("sync"))
  if valid_616658 != nil:
    section.add "Mode", valid_616658
  var valid_616659 = query.getOrDefault("Action")
  valid_616659 = validateParameter(valid_616659, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_616659 != nil:
    section.add "Action", valid_616659
  var valid_616660 = query.getOrDefault("ApplyImmediately")
  valid_616660 = validateParameter(valid_616660, JBool, required = false, default = nil)
  if valid_616660 != nil:
    section.add "ApplyImmediately", valid_616660
  var valid_616661 = query.getOrDefault("Version")
  valid_616661 = validateParameter(valid_616661, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616661 != nil:
    section.add "Version", valid_616661
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616662 = header.getOrDefault("X-Amz-Signature")
  valid_616662 = validateParameter(valid_616662, JString, required = false,
                                 default = nil)
  if valid_616662 != nil:
    section.add "X-Amz-Signature", valid_616662
  var valid_616663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616663 = validateParameter(valid_616663, JString, required = false,
                                 default = nil)
  if valid_616663 != nil:
    section.add "X-Amz-Content-Sha256", valid_616663
  var valid_616664 = header.getOrDefault("X-Amz-Date")
  valid_616664 = validateParameter(valid_616664, JString, required = false,
                                 default = nil)
  if valid_616664 != nil:
    section.add "X-Amz-Date", valid_616664
  var valid_616665 = header.getOrDefault("X-Amz-Credential")
  valid_616665 = validateParameter(valid_616665, JString, required = false,
                                 default = nil)
  if valid_616665 != nil:
    section.add "X-Amz-Credential", valid_616665
  var valid_616666 = header.getOrDefault("X-Amz-Security-Token")
  valid_616666 = validateParameter(valid_616666, JString, required = false,
                                 default = nil)
  if valid_616666 != nil:
    section.add "X-Amz-Security-Token", valid_616666
  var valid_616667 = header.getOrDefault("X-Amz-Algorithm")
  valid_616667 = validateParameter(valid_616667, JString, required = false,
                                 default = nil)
  if valid_616667 != nil:
    section.add "X-Amz-Algorithm", valid_616667
  var valid_616668 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616668 = validateParameter(valid_616668, JString, required = false,
                                 default = nil)
  if valid_616668 != nil:
    section.add "X-Amz-SignedHeaders", valid_616668
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616669: Call_GetStartActivityStream_616653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_616669.validator(path, query, header, formData, body)
  let scheme = call_616669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616669.url(scheme.get, call_616669.host, call_616669.base,
                         call_616669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616669, url, valid)

proc call*(call_616670: Call_GetStartActivityStream_616653; KmsKeyId: string;
          ResourceArn: string; Mode: string = "sync";
          Action: string = "StartActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_616671 = newJObject()
  add(query_616671, "KmsKeyId", newJString(KmsKeyId))
  add(query_616671, "ResourceArn", newJString(ResourceArn))
  add(query_616671, "Mode", newJString(Mode))
  add(query_616671, "Action", newJString(Action))
  add(query_616671, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_616671, "Version", newJString(Version))
  result = call_616670.call(nil, query_616671, nil, nil, nil)

var getStartActivityStream* = Call_GetStartActivityStream_616653(
    name: "getStartActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_GetStartActivityStream_616654, base: "/",
    url: url_GetStartActivityStream_616655, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_616708 = ref object of OpenApiRestCall_610658
proc url_PostStartDBCluster_616710(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBCluster_616709(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616711 = query.getOrDefault("Action")
  valid_616711 = validateParameter(valid_616711, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_616711 != nil:
    section.add "Action", valid_616711
  var valid_616712 = query.getOrDefault("Version")
  valid_616712 = validateParameter(valid_616712, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616712 != nil:
    section.add "Version", valid_616712
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616713 = header.getOrDefault("X-Amz-Signature")
  valid_616713 = validateParameter(valid_616713, JString, required = false,
                                 default = nil)
  if valid_616713 != nil:
    section.add "X-Amz-Signature", valid_616713
  var valid_616714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616714 = validateParameter(valid_616714, JString, required = false,
                                 default = nil)
  if valid_616714 != nil:
    section.add "X-Amz-Content-Sha256", valid_616714
  var valid_616715 = header.getOrDefault("X-Amz-Date")
  valid_616715 = validateParameter(valid_616715, JString, required = false,
                                 default = nil)
  if valid_616715 != nil:
    section.add "X-Amz-Date", valid_616715
  var valid_616716 = header.getOrDefault("X-Amz-Credential")
  valid_616716 = validateParameter(valid_616716, JString, required = false,
                                 default = nil)
  if valid_616716 != nil:
    section.add "X-Amz-Credential", valid_616716
  var valid_616717 = header.getOrDefault("X-Amz-Security-Token")
  valid_616717 = validateParameter(valid_616717, JString, required = false,
                                 default = nil)
  if valid_616717 != nil:
    section.add "X-Amz-Security-Token", valid_616717
  var valid_616718 = header.getOrDefault("X-Amz-Algorithm")
  valid_616718 = validateParameter(valid_616718, JString, required = false,
                                 default = nil)
  if valid_616718 != nil:
    section.add "X-Amz-Algorithm", valid_616718
  var valid_616719 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616719 = validateParameter(valid_616719, JString, required = false,
                                 default = nil)
  if valid_616719 != nil:
    section.add "X-Amz-SignedHeaders", valid_616719
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_616720 = formData.getOrDefault("DBClusterIdentifier")
  valid_616720 = validateParameter(valid_616720, JString, required = true,
                                 default = nil)
  if valid_616720 != nil:
    section.add "DBClusterIdentifier", valid_616720
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616721: Call_PostStartDBCluster_616708; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616721.validator(path, query, header, formData, body)
  let scheme = call_616721.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616721.url(scheme.get, call_616721.host, call_616721.base,
                         call_616721.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616721, url, valid)

proc call*(call_616722: Call_PostStartDBCluster_616708;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  var query_616723 = newJObject()
  var formData_616724 = newJObject()
  add(query_616723, "Action", newJString(Action))
  add(query_616723, "Version", newJString(Version))
  add(formData_616724, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_616722.call(nil, query_616723, nil, formData_616724, nil)

var postStartDBCluster* = Call_PostStartDBCluster_616708(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_616709, base: "/",
    url: url_PostStartDBCluster_616710, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_616692 = ref object of OpenApiRestCall_610658
proc url_GetStartDBCluster_616694(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBCluster_616693(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_616695 = query.getOrDefault("DBClusterIdentifier")
  valid_616695 = validateParameter(valid_616695, JString, required = true,
                                 default = nil)
  if valid_616695 != nil:
    section.add "DBClusterIdentifier", valid_616695
  var valid_616696 = query.getOrDefault("Action")
  valid_616696 = validateParameter(valid_616696, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_616696 != nil:
    section.add "Action", valid_616696
  var valid_616697 = query.getOrDefault("Version")
  valid_616697 = validateParameter(valid_616697, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616697 != nil:
    section.add "Version", valid_616697
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616698 = header.getOrDefault("X-Amz-Signature")
  valid_616698 = validateParameter(valid_616698, JString, required = false,
                                 default = nil)
  if valid_616698 != nil:
    section.add "X-Amz-Signature", valid_616698
  var valid_616699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616699 = validateParameter(valid_616699, JString, required = false,
                                 default = nil)
  if valid_616699 != nil:
    section.add "X-Amz-Content-Sha256", valid_616699
  var valid_616700 = header.getOrDefault("X-Amz-Date")
  valid_616700 = validateParameter(valid_616700, JString, required = false,
                                 default = nil)
  if valid_616700 != nil:
    section.add "X-Amz-Date", valid_616700
  var valid_616701 = header.getOrDefault("X-Amz-Credential")
  valid_616701 = validateParameter(valid_616701, JString, required = false,
                                 default = nil)
  if valid_616701 != nil:
    section.add "X-Amz-Credential", valid_616701
  var valid_616702 = header.getOrDefault("X-Amz-Security-Token")
  valid_616702 = validateParameter(valid_616702, JString, required = false,
                                 default = nil)
  if valid_616702 != nil:
    section.add "X-Amz-Security-Token", valid_616702
  var valid_616703 = header.getOrDefault("X-Amz-Algorithm")
  valid_616703 = validateParameter(valid_616703, JString, required = false,
                                 default = nil)
  if valid_616703 != nil:
    section.add "X-Amz-Algorithm", valid_616703
  var valid_616704 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616704 = validateParameter(valid_616704, JString, required = false,
                                 default = nil)
  if valid_616704 != nil:
    section.add "X-Amz-SignedHeaders", valid_616704
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616705: Call_GetStartDBCluster_616692; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616705.validator(path, query, header, formData, body)
  let scheme = call_616705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616705.url(scheme.get, call_616705.host, call_616705.base,
                         call_616705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616705, url, valid)

proc call*(call_616706: Call_GetStartDBCluster_616692; DBClusterIdentifier: string;
          Action: string = "StartDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616707 = newJObject()
  add(query_616707, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_616707, "Action", newJString(Action))
  add(query_616707, "Version", newJString(Version))
  result = call_616706.call(nil, query_616707, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_616692(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_616693,
    base: "/", url: url_GetStartDBCluster_616694,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBInstance_616741 = ref object of OpenApiRestCall_610658
proc url_PostStartDBInstance_616743(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBInstance_616742(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616744 = query.getOrDefault("Action")
  valid_616744 = validateParameter(valid_616744, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_616744 != nil:
    section.add "Action", valid_616744
  var valid_616745 = query.getOrDefault("Version")
  valid_616745 = validateParameter(valid_616745, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616745 != nil:
    section.add "Version", valid_616745
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616746 = header.getOrDefault("X-Amz-Signature")
  valid_616746 = validateParameter(valid_616746, JString, required = false,
                                 default = nil)
  if valid_616746 != nil:
    section.add "X-Amz-Signature", valid_616746
  var valid_616747 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616747 = validateParameter(valid_616747, JString, required = false,
                                 default = nil)
  if valid_616747 != nil:
    section.add "X-Amz-Content-Sha256", valid_616747
  var valid_616748 = header.getOrDefault("X-Amz-Date")
  valid_616748 = validateParameter(valid_616748, JString, required = false,
                                 default = nil)
  if valid_616748 != nil:
    section.add "X-Amz-Date", valid_616748
  var valid_616749 = header.getOrDefault("X-Amz-Credential")
  valid_616749 = validateParameter(valid_616749, JString, required = false,
                                 default = nil)
  if valid_616749 != nil:
    section.add "X-Amz-Credential", valid_616749
  var valid_616750 = header.getOrDefault("X-Amz-Security-Token")
  valid_616750 = validateParameter(valid_616750, JString, required = false,
                                 default = nil)
  if valid_616750 != nil:
    section.add "X-Amz-Security-Token", valid_616750
  var valid_616751 = header.getOrDefault("X-Amz-Algorithm")
  valid_616751 = validateParameter(valid_616751, JString, required = false,
                                 default = nil)
  if valid_616751 != nil:
    section.add "X-Amz-Algorithm", valid_616751
  var valid_616752 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616752 = validateParameter(valid_616752, JString, required = false,
                                 default = nil)
  if valid_616752 != nil:
    section.add "X-Amz-SignedHeaders", valid_616752
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_616753 = formData.getOrDefault("DBInstanceIdentifier")
  valid_616753 = validateParameter(valid_616753, JString, required = true,
                                 default = nil)
  if valid_616753 != nil:
    section.add "DBInstanceIdentifier", valid_616753
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616754: Call_PostStartDBInstance_616741; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_616754.validator(path, query, header, formData, body)
  let scheme = call_616754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616754.url(scheme.get, call_616754.host, call_616754.base,
                         call_616754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616754, url, valid)

proc call*(call_616755: Call_PostStartDBInstance_616741;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616756 = newJObject()
  var formData_616757 = newJObject()
  add(formData_616757, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_616756, "Action", newJString(Action))
  add(query_616756, "Version", newJString(Version))
  result = call_616755.call(nil, query_616756, nil, formData_616757, nil)

var postStartDBInstance* = Call_PostStartDBInstance_616741(
    name: "postStartDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBInstance",
    validator: validate_PostStartDBInstance_616742, base: "/",
    url: url_PostStartDBInstance_616743, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBInstance_616725 = ref object of OpenApiRestCall_610658
proc url_GetStartDBInstance_616727(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBInstance_616726(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_616728 = query.getOrDefault("DBInstanceIdentifier")
  valid_616728 = validateParameter(valid_616728, JString, required = true,
                                 default = nil)
  if valid_616728 != nil:
    section.add "DBInstanceIdentifier", valid_616728
  var valid_616729 = query.getOrDefault("Action")
  valid_616729 = validateParameter(valid_616729, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_616729 != nil:
    section.add "Action", valid_616729
  var valid_616730 = query.getOrDefault("Version")
  valid_616730 = validateParameter(valid_616730, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616730 != nil:
    section.add "Version", valid_616730
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616731 = header.getOrDefault("X-Amz-Signature")
  valid_616731 = validateParameter(valid_616731, JString, required = false,
                                 default = nil)
  if valid_616731 != nil:
    section.add "X-Amz-Signature", valid_616731
  var valid_616732 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616732 = validateParameter(valid_616732, JString, required = false,
                                 default = nil)
  if valid_616732 != nil:
    section.add "X-Amz-Content-Sha256", valid_616732
  var valid_616733 = header.getOrDefault("X-Amz-Date")
  valid_616733 = validateParameter(valid_616733, JString, required = false,
                                 default = nil)
  if valid_616733 != nil:
    section.add "X-Amz-Date", valid_616733
  var valid_616734 = header.getOrDefault("X-Amz-Credential")
  valid_616734 = validateParameter(valid_616734, JString, required = false,
                                 default = nil)
  if valid_616734 != nil:
    section.add "X-Amz-Credential", valid_616734
  var valid_616735 = header.getOrDefault("X-Amz-Security-Token")
  valid_616735 = validateParameter(valid_616735, JString, required = false,
                                 default = nil)
  if valid_616735 != nil:
    section.add "X-Amz-Security-Token", valid_616735
  var valid_616736 = header.getOrDefault("X-Amz-Algorithm")
  valid_616736 = validateParameter(valid_616736, JString, required = false,
                                 default = nil)
  if valid_616736 != nil:
    section.add "X-Amz-Algorithm", valid_616736
  var valid_616737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616737 = validateParameter(valid_616737, JString, required = false,
                                 default = nil)
  if valid_616737 != nil:
    section.add "X-Amz-SignedHeaders", valid_616737
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616738: Call_GetStartDBInstance_616725; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_616738.validator(path, query, header, formData, body)
  let scheme = call_616738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616738.url(scheme.get, call_616738.host, call_616738.base,
                         call_616738.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616738, url, valid)

proc call*(call_616739: Call_GetStartDBInstance_616725;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616740 = newJObject()
  add(query_616740, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_616740, "Action", newJString(Action))
  add(query_616740, "Version", newJString(Version))
  result = call_616739.call(nil, query_616740, nil, nil, nil)

var getStartDBInstance* = Call_GetStartDBInstance_616725(
    name: "getStartDBInstance", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBInstance", validator: validate_GetStartDBInstance_616726,
    base: "/", url: url_GetStartDBInstance_616727,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartExportTask_616780 = ref object of OpenApiRestCall_610658
proc url_PostStartExportTask_616782(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartExportTask_616781(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616783 = query.getOrDefault("Action")
  valid_616783 = validateParameter(valid_616783, JString, required = true,
                                 default = newJString("StartExportTask"))
  if valid_616783 != nil:
    section.add "Action", valid_616783
  var valid_616784 = query.getOrDefault("Version")
  valid_616784 = validateParameter(valid_616784, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616784 != nil:
    section.add "Version", valid_616784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616785 = header.getOrDefault("X-Amz-Signature")
  valid_616785 = validateParameter(valid_616785, JString, required = false,
                                 default = nil)
  if valid_616785 != nil:
    section.add "X-Amz-Signature", valid_616785
  var valid_616786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616786 = validateParameter(valid_616786, JString, required = false,
                                 default = nil)
  if valid_616786 != nil:
    section.add "X-Amz-Content-Sha256", valid_616786
  var valid_616787 = header.getOrDefault("X-Amz-Date")
  valid_616787 = validateParameter(valid_616787, JString, required = false,
                                 default = nil)
  if valid_616787 != nil:
    section.add "X-Amz-Date", valid_616787
  var valid_616788 = header.getOrDefault("X-Amz-Credential")
  valid_616788 = validateParameter(valid_616788, JString, required = false,
                                 default = nil)
  if valid_616788 != nil:
    section.add "X-Amz-Credential", valid_616788
  var valid_616789 = header.getOrDefault("X-Amz-Security-Token")
  valid_616789 = validateParameter(valid_616789, JString, required = false,
                                 default = nil)
  if valid_616789 != nil:
    section.add "X-Amz-Security-Token", valid_616789
  var valid_616790 = header.getOrDefault("X-Amz-Algorithm")
  valid_616790 = validateParameter(valid_616790, JString, required = false,
                                 default = nil)
  if valid_616790 != nil:
    section.add "X-Amz-Algorithm", valid_616790
  var valid_616791 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616791 = validateParameter(valid_616791, JString, required = false,
                                 default = nil)
  if valid_616791 != nil:
    section.add "X-Amz-SignedHeaders", valid_616791
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3Prefix: JString
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   ExportTaskIdentifier: JString (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  ##   IamRoleArn: JString (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   KmsKeyId: JString (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   SourceArn: JString (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  section = newJObject()
  var valid_616792 = formData.getOrDefault("S3Prefix")
  valid_616792 = validateParameter(valid_616792, JString, required = false,
                                 default = nil)
  if valid_616792 != nil:
    section.add "S3Prefix", valid_616792
  assert formData != nil, "formData argument is necessary due to required `ExportTaskIdentifier` field"
  var valid_616793 = formData.getOrDefault("ExportTaskIdentifier")
  valid_616793 = validateParameter(valid_616793, JString, required = true,
                                 default = nil)
  if valid_616793 != nil:
    section.add "ExportTaskIdentifier", valid_616793
  var valid_616794 = formData.getOrDefault("IamRoleArn")
  valid_616794 = validateParameter(valid_616794, JString, required = true,
                                 default = nil)
  if valid_616794 != nil:
    section.add "IamRoleArn", valid_616794
  var valid_616795 = formData.getOrDefault("KmsKeyId")
  valid_616795 = validateParameter(valid_616795, JString, required = true,
                                 default = nil)
  if valid_616795 != nil:
    section.add "KmsKeyId", valid_616795
  var valid_616796 = formData.getOrDefault("S3BucketName")
  valid_616796 = validateParameter(valid_616796, JString, required = true,
                                 default = nil)
  if valid_616796 != nil:
    section.add "S3BucketName", valid_616796
  var valid_616797 = formData.getOrDefault("ExportOnly")
  valid_616797 = validateParameter(valid_616797, JArray, required = false,
                                 default = nil)
  if valid_616797 != nil:
    section.add "ExportOnly", valid_616797
  var valid_616798 = formData.getOrDefault("SourceArn")
  valid_616798 = validateParameter(valid_616798, JString, required = true,
                                 default = nil)
  if valid_616798 != nil:
    section.add "SourceArn", valid_616798
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616799: Call_PostStartExportTask_616780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  let valid = call_616799.validator(path, query, header, formData, body)
  let scheme = call_616799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616799.url(scheme.get, call_616799.host, call_616799.base,
                         call_616799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616799, url, valid)

proc call*(call_616800: Call_PostStartExportTask_616780;
          ExportTaskIdentifier: string; IamRoleArn: string; KmsKeyId: string;
          S3BucketName: string; SourceArn: string; S3Prefix: string = "";
          ExportOnly: JsonNode = nil; Action: string = "StartExportTask";
          Version: string = "2014-10-31"): Recallable =
  ## postStartExportTask
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ##   S3Prefix: string
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   ExportTaskIdentifier: string (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  ##   IamRoleArn: string (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   KmsKeyId: string (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   SourceArn: string (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616801 = newJObject()
  var formData_616802 = newJObject()
  add(formData_616802, "S3Prefix", newJString(S3Prefix))
  add(formData_616802, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(formData_616802, "IamRoleArn", newJString(IamRoleArn))
  add(formData_616802, "KmsKeyId", newJString(KmsKeyId))
  add(formData_616802, "S3BucketName", newJString(S3BucketName))
  if ExportOnly != nil:
    formData_616802.add "ExportOnly", ExportOnly
  add(formData_616802, "SourceArn", newJString(SourceArn))
  add(query_616801, "Action", newJString(Action))
  add(query_616801, "Version", newJString(Version))
  result = call_616800.call(nil, query_616801, nil, formData_616802, nil)

var postStartExportTask* = Call_PostStartExportTask_616780(
    name: "postStartExportTask", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartExportTask",
    validator: validate_PostStartExportTask_616781, base: "/",
    url: url_PostStartExportTask_616782, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartExportTask_616758 = ref object of OpenApiRestCall_610658
proc url_GetStartExportTask_616760(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartExportTask_616759(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  ##   ExportTaskIdentifier: JString (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   S3Prefix: JString
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   KmsKeyId: JString (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   IamRoleArn: JString (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceArn` field"
  var valid_616761 = query.getOrDefault("SourceArn")
  valid_616761 = validateParameter(valid_616761, JString, required = true,
                                 default = nil)
  if valid_616761 != nil:
    section.add "SourceArn", valid_616761
  var valid_616762 = query.getOrDefault("ExportTaskIdentifier")
  valid_616762 = validateParameter(valid_616762, JString, required = true,
                                 default = nil)
  if valid_616762 != nil:
    section.add "ExportTaskIdentifier", valid_616762
  var valid_616763 = query.getOrDefault("ExportOnly")
  valid_616763 = validateParameter(valid_616763, JArray, required = false,
                                 default = nil)
  if valid_616763 != nil:
    section.add "ExportOnly", valid_616763
  var valid_616764 = query.getOrDefault("S3Prefix")
  valid_616764 = validateParameter(valid_616764, JString, required = false,
                                 default = nil)
  if valid_616764 != nil:
    section.add "S3Prefix", valid_616764
  var valid_616765 = query.getOrDefault("KmsKeyId")
  valid_616765 = validateParameter(valid_616765, JString, required = true,
                                 default = nil)
  if valid_616765 != nil:
    section.add "KmsKeyId", valid_616765
  var valid_616766 = query.getOrDefault("S3BucketName")
  valid_616766 = validateParameter(valid_616766, JString, required = true,
                                 default = nil)
  if valid_616766 != nil:
    section.add "S3BucketName", valid_616766
  var valid_616767 = query.getOrDefault("IamRoleArn")
  valid_616767 = validateParameter(valid_616767, JString, required = true,
                                 default = nil)
  if valid_616767 != nil:
    section.add "IamRoleArn", valid_616767
  var valid_616768 = query.getOrDefault("Action")
  valid_616768 = validateParameter(valid_616768, JString, required = true,
                                 default = newJString("StartExportTask"))
  if valid_616768 != nil:
    section.add "Action", valid_616768
  var valid_616769 = query.getOrDefault("Version")
  valid_616769 = validateParameter(valid_616769, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616769 != nil:
    section.add "Version", valid_616769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616770 = header.getOrDefault("X-Amz-Signature")
  valid_616770 = validateParameter(valid_616770, JString, required = false,
                                 default = nil)
  if valid_616770 != nil:
    section.add "X-Amz-Signature", valid_616770
  var valid_616771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616771 = validateParameter(valid_616771, JString, required = false,
                                 default = nil)
  if valid_616771 != nil:
    section.add "X-Amz-Content-Sha256", valid_616771
  var valid_616772 = header.getOrDefault("X-Amz-Date")
  valid_616772 = validateParameter(valid_616772, JString, required = false,
                                 default = nil)
  if valid_616772 != nil:
    section.add "X-Amz-Date", valid_616772
  var valid_616773 = header.getOrDefault("X-Amz-Credential")
  valid_616773 = validateParameter(valid_616773, JString, required = false,
                                 default = nil)
  if valid_616773 != nil:
    section.add "X-Amz-Credential", valid_616773
  var valid_616774 = header.getOrDefault("X-Amz-Security-Token")
  valid_616774 = validateParameter(valid_616774, JString, required = false,
                                 default = nil)
  if valid_616774 != nil:
    section.add "X-Amz-Security-Token", valid_616774
  var valid_616775 = header.getOrDefault("X-Amz-Algorithm")
  valid_616775 = validateParameter(valid_616775, JString, required = false,
                                 default = nil)
  if valid_616775 != nil:
    section.add "X-Amz-Algorithm", valid_616775
  var valid_616776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616776 = validateParameter(valid_616776, JString, required = false,
                                 default = nil)
  if valid_616776 != nil:
    section.add "X-Amz-SignedHeaders", valid_616776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616777: Call_GetStartExportTask_616758; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  let valid = call_616777.validator(path, query, header, formData, body)
  let scheme = call_616777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616777.url(scheme.get, call_616777.host, call_616777.base,
                         call_616777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616777, url, valid)

proc call*(call_616778: Call_GetStartExportTask_616758; SourceArn: string;
          ExportTaskIdentifier: string; KmsKeyId: string; S3BucketName: string;
          IamRoleArn: string; ExportOnly: JsonNode = nil; S3Prefix: string = "";
          Action: string = "StartExportTask"; Version: string = "2014-10-31"): Recallable =
  ## getStartExportTask
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ##   SourceArn: string (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  ##   ExportTaskIdentifier: string (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   S3Prefix: string
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   KmsKeyId: string (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   IamRoleArn: string (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616779 = newJObject()
  add(query_616779, "SourceArn", newJString(SourceArn))
  add(query_616779, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  if ExportOnly != nil:
    query_616779.add "ExportOnly", ExportOnly
  add(query_616779, "S3Prefix", newJString(S3Prefix))
  add(query_616779, "KmsKeyId", newJString(KmsKeyId))
  add(query_616779, "S3BucketName", newJString(S3BucketName))
  add(query_616779, "IamRoleArn", newJString(IamRoleArn))
  add(query_616779, "Action", newJString(Action))
  add(query_616779, "Version", newJString(Version))
  result = call_616778.call(nil, query_616779, nil, nil, nil)

var getStartExportTask* = Call_GetStartExportTask_616758(
    name: "getStartExportTask", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartExportTask", validator: validate_GetStartExportTask_616759,
    base: "/", url: url_GetStartExportTask_616760,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopActivityStream_616820 = ref object of OpenApiRestCall_610658
proc url_PostStopActivityStream_616822(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopActivityStream_616821(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616823 = query.getOrDefault("Action")
  valid_616823 = validateParameter(valid_616823, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_616823 != nil:
    section.add "Action", valid_616823
  var valid_616824 = query.getOrDefault("Version")
  valid_616824 = validateParameter(valid_616824, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616824 != nil:
    section.add "Version", valid_616824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616825 = header.getOrDefault("X-Amz-Signature")
  valid_616825 = validateParameter(valid_616825, JString, required = false,
                                 default = nil)
  if valid_616825 != nil:
    section.add "X-Amz-Signature", valid_616825
  var valid_616826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616826 = validateParameter(valid_616826, JString, required = false,
                                 default = nil)
  if valid_616826 != nil:
    section.add "X-Amz-Content-Sha256", valid_616826
  var valid_616827 = header.getOrDefault("X-Amz-Date")
  valid_616827 = validateParameter(valid_616827, JString, required = false,
                                 default = nil)
  if valid_616827 != nil:
    section.add "X-Amz-Date", valid_616827
  var valid_616828 = header.getOrDefault("X-Amz-Credential")
  valid_616828 = validateParameter(valid_616828, JString, required = false,
                                 default = nil)
  if valid_616828 != nil:
    section.add "X-Amz-Credential", valid_616828
  var valid_616829 = header.getOrDefault("X-Amz-Security-Token")
  valid_616829 = validateParameter(valid_616829, JString, required = false,
                                 default = nil)
  if valid_616829 != nil:
    section.add "X-Amz-Security-Token", valid_616829
  var valid_616830 = header.getOrDefault("X-Amz-Algorithm")
  valid_616830 = validateParameter(valid_616830, JString, required = false,
                                 default = nil)
  if valid_616830 != nil:
    section.add "X-Amz-Algorithm", valid_616830
  var valid_616831 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616831 = validateParameter(valid_616831, JString, required = false,
                                 default = nil)
  if valid_616831 != nil:
    section.add "X-Amz-SignedHeaders", valid_616831
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_616832 = formData.getOrDefault("ResourceArn")
  valid_616832 = validateParameter(valid_616832, JString, required = true,
                                 default = nil)
  if valid_616832 != nil:
    section.add "ResourceArn", valid_616832
  var valid_616833 = formData.getOrDefault("ApplyImmediately")
  valid_616833 = validateParameter(valid_616833, JBool, required = false, default = nil)
  if valid_616833 != nil:
    section.add "ApplyImmediately", valid_616833
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616834: Call_PostStopActivityStream_616820; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_616834.validator(path, query, header, formData, body)
  let scheme = call_616834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616834.url(scheme.get, call_616834.host, call_616834.base,
                         call_616834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616834, url, valid)

proc call*(call_616835: Call_PostStopActivityStream_616820; ResourceArn: string;
          ApplyImmediately: bool = false; Action: string = "StopActivityStream";
          Version: string = "2014-10-31"): Recallable =
  ## postStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616836 = newJObject()
  var formData_616837 = newJObject()
  add(formData_616837, "ResourceArn", newJString(ResourceArn))
  add(formData_616837, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_616836, "Action", newJString(Action))
  add(query_616836, "Version", newJString(Version))
  result = call_616835.call(nil, query_616836, nil, formData_616837, nil)

var postStopActivityStream* = Call_PostStopActivityStream_616820(
    name: "postStopActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_PostStopActivityStream_616821, base: "/",
    url: url_PostStopActivityStream_616822, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopActivityStream_616803 = ref object of OpenApiRestCall_610658
proc url_GetStopActivityStream_616805(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopActivityStream_616804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_616806 = query.getOrDefault("ResourceArn")
  valid_616806 = validateParameter(valid_616806, JString, required = true,
                                 default = nil)
  if valid_616806 != nil:
    section.add "ResourceArn", valid_616806
  var valid_616807 = query.getOrDefault("Action")
  valid_616807 = validateParameter(valid_616807, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_616807 != nil:
    section.add "Action", valid_616807
  var valid_616808 = query.getOrDefault("ApplyImmediately")
  valid_616808 = validateParameter(valid_616808, JBool, required = false, default = nil)
  if valid_616808 != nil:
    section.add "ApplyImmediately", valid_616808
  var valid_616809 = query.getOrDefault("Version")
  valid_616809 = validateParameter(valid_616809, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616809 != nil:
    section.add "Version", valid_616809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616810 = header.getOrDefault("X-Amz-Signature")
  valid_616810 = validateParameter(valid_616810, JString, required = false,
                                 default = nil)
  if valid_616810 != nil:
    section.add "X-Amz-Signature", valid_616810
  var valid_616811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616811 = validateParameter(valid_616811, JString, required = false,
                                 default = nil)
  if valid_616811 != nil:
    section.add "X-Amz-Content-Sha256", valid_616811
  var valid_616812 = header.getOrDefault("X-Amz-Date")
  valid_616812 = validateParameter(valid_616812, JString, required = false,
                                 default = nil)
  if valid_616812 != nil:
    section.add "X-Amz-Date", valid_616812
  var valid_616813 = header.getOrDefault("X-Amz-Credential")
  valid_616813 = validateParameter(valid_616813, JString, required = false,
                                 default = nil)
  if valid_616813 != nil:
    section.add "X-Amz-Credential", valid_616813
  var valid_616814 = header.getOrDefault("X-Amz-Security-Token")
  valid_616814 = validateParameter(valid_616814, JString, required = false,
                                 default = nil)
  if valid_616814 != nil:
    section.add "X-Amz-Security-Token", valid_616814
  var valid_616815 = header.getOrDefault("X-Amz-Algorithm")
  valid_616815 = validateParameter(valid_616815, JString, required = false,
                                 default = nil)
  if valid_616815 != nil:
    section.add "X-Amz-Algorithm", valid_616815
  var valid_616816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616816 = validateParameter(valid_616816, JString, required = false,
                                 default = nil)
  if valid_616816 != nil:
    section.add "X-Amz-SignedHeaders", valid_616816
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616817: Call_GetStopActivityStream_616803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_616817.validator(path, query, header, formData, body)
  let scheme = call_616817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616817.url(scheme.get, call_616817.host, call_616817.base,
                         call_616817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616817, url, valid)

proc call*(call_616818: Call_GetStopActivityStream_616803; ResourceArn: string;
          Action: string = "StopActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_616819 = newJObject()
  add(query_616819, "ResourceArn", newJString(ResourceArn))
  add(query_616819, "Action", newJString(Action))
  add(query_616819, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_616819, "Version", newJString(Version))
  result = call_616818.call(nil, query_616819, nil, nil, nil)

var getStopActivityStream* = Call_GetStopActivityStream_616803(
    name: "getStopActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_GetStopActivityStream_616804, base: "/",
    url: url_GetStopActivityStream_616805, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_616854 = ref object of OpenApiRestCall_610658
proc url_PostStopDBCluster_616856(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBCluster_616855(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616857 = query.getOrDefault("Action")
  valid_616857 = validateParameter(valid_616857, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_616857 != nil:
    section.add "Action", valid_616857
  var valid_616858 = query.getOrDefault("Version")
  valid_616858 = validateParameter(valid_616858, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616858 != nil:
    section.add "Version", valid_616858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616859 = header.getOrDefault("X-Amz-Signature")
  valid_616859 = validateParameter(valid_616859, JString, required = false,
                                 default = nil)
  if valid_616859 != nil:
    section.add "X-Amz-Signature", valid_616859
  var valid_616860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616860 = validateParameter(valid_616860, JString, required = false,
                                 default = nil)
  if valid_616860 != nil:
    section.add "X-Amz-Content-Sha256", valid_616860
  var valid_616861 = header.getOrDefault("X-Amz-Date")
  valid_616861 = validateParameter(valid_616861, JString, required = false,
                                 default = nil)
  if valid_616861 != nil:
    section.add "X-Amz-Date", valid_616861
  var valid_616862 = header.getOrDefault("X-Amz-Credential")
  valid_616862 = validateParameter(valid_616862, JString, required = false,
                                 default = nil)
  if valid_616862 != nil:
    section.add "X-Amz-Credential", valid_616862
  var valid_616863 = header.getOrDefault("X-Amz-Security-Token")
  valid_616863 = validateParameter(valid_616863, JString, required = false,
                                 default = nil)
  if valid_616863 != nil:
    section.add "X-Amz-Security-Token", valid_616863
  var valid_616864 = header.getOrDefault("X-Amz-Algorithm")
  valid_616864 = validateParameter(valid_616864, JString, required = false,
                                 default = nil)
  if valid_616864 != nil:
    section.add "X-Amz-Algorithm", valid_616864
  var valid_616865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616865 = validateParameter(valid_616865, JString, required = false,
                                 default = nil)
  if valid_616865 != nil:
    section.add "X-Amz-SignedHeaders", valid_616865
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_616866 = formData.getOrDefault("DBClusterIdentifier")
  valid_616866 = validateParameter(valid_616866, JString, required = true,
                                 default = nil)
  if valid_616866 != nil:
    section.add "DBClusterIdentifier", valid_616866
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616867: Call_PostStopDBCluster_616854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616867.validator(path, query, header, formData, body)
  let scheme = call_616867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616867.url(scheme.get, call_616867.host, call_616867.base,
                         call_616867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616867, url, valid)

proc call*(call_616868: Call_PostStopDBCluster_616854; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  var query_616869 = newJObject()
  var formData_616870 = newJObject()
  add(query_616869, "Action", newJString(Action))
  add(query_616869, "Version", newJString(Version))
  add(formData_616870, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_616868.call(nil, query_616869, nil, formData_616870, nil)

var postStopDBCluster* = Call_PostStopDBCluster_616854(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_616855,
    base: "/", url: url_PostStopDBCluster_616856,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_616838 = ref object of OpenApiRestCall_610658
proc url_GetStopDBCluster_616840(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBCluster_616839(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_616841 = query.getOrDefault("DBClusterIdentifier")
  valid_616841 = validateParameter(valid_616841, JString, required = true,
                                 default = nil)
  if valid_616841 != nil:
    section.add "DBClusterIdentifier", valid_616841
  var valid_616842 = query.getOrDefault("Action")
  valid_616842 = validateParameter(valid_616842, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_616842 != nil:
    section.add "Action", valid_616842
  var valid_616843 = query.getOrDefault("Version")
  valid_616843 = validateParameter(valid_616843, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616843 != nil:
    section.add "Version", valid_616843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616844 = header.getOrDefault("X-Amz-Signature")
  valid_616844 = validateParameter(valid_616844, JString, required = false,
                                 default = nil)
  if valid_616844 != nil:
    section.add "X-Amz-Signature", valid_616844
  var valid_616845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616845 = validateParameter(valid_616845, JString, required = false,
                                 default = nil)
  if valid_616845 != nil:
    section.add "X-Amz-Content-Sha256", valid_616845
  var valid_616846 = header.getOrDefault("X-Amz-Date")
  valid_616846 = validateParameter(valid_616846, JString, required = false,
                                 default = nil)
  if valid_616846 != nil:
    section.add "X-Amz-Date", valid_616846
  var valid_616847 = header.getOrDefault("X-Amz-Credential")
  valid_616847 = validateParameter(valid_616847, JString, required = false,
                                 default = nil)
  if valid_616847 != nil:
    section.add "X-Amz-Credential", valid_616847
  var valid_616848 = header.getOrDefault("X-Amz-Security-Token")
  valid_616848 = validateParameter(valid_616848, JString, required = false,
                                 default = nil)
  if valid_616848 != nil:
    section.add "X-Amz-Security-Token", valid_616848
  var valid_616849 = header.getOrDefault("X-Amz-Algorithm")
  valid_616849 = validateParameter(valid_616849, JString, required = false,
                                 default = nil)
  if valid_616849 != nil:
    section.add "X-Amz-Algorithm", valid_616849
  var valid_616850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616850 = validateParameter(valid_616850, JString, required = false,
                                 default = nil)
  if valid_616850 != nil:
    section.add "X-Amz-SignedHeaders", valid_616850
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616851: Call_GetStopDBCluster_616838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616851.validator(path, query, header, formData, body)
  let scheme = call_616851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616851.url(scheme.get, call_616851.host, call_616851.base,
                         call_616851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616851, url, valid)

proc call*(call_616852: Call_GetStopDBCluster_616838; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616853 = newJObject()
  add(query_616853, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_616853, "Action", newJString(Action))
  add(query_616853, "Version", newJString(Version))
  result = call_616852.call(nil, query_616853, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_616838(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_616839,
    base: "/", url: url_GetStopDBCluster_616840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBInstance_616888 = ref object of OpenApiRestCall_610658
proc url_PostStopDBInstance_616890(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBInstance_616889(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616891 = query.getOrDefault("Action")
  valid_616891 = validateParameter(valid_616891, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_616891 != nil:
    section.add "Action", valid_616891
  var valid_616892 = query.getOrDefault("Version")
  valid_616892 = validateParameter(valid_616892, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616892 != nil:
    section.add "Version", valid_616892
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616893 = header.getOrDefault("X-Amz-Signature")
  valid_616893 = validateParameter(valid_616893, JString, required = false,
                                 default = nil)
  if valid_616893 != nil:
    section.add "X-Amz-Signature", valid_616893
  var valid_616894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616894 = validateParameter(valid_616894, JString, required = false,
                                 default = nil)
  if valid_616894 != nil:
    section.add "X-Amz-Content-Sha256", valid_616894
  var valid_616895 = header.getOrDefault("X-Amz-Date")
  valid_616895 = validateParameter(valid_616895, JString, required = false,
                                 default = nil)
  if valid_616895 != nil:
    section.add "X-Amz-Date", valid_616895
  var valid_616896 = header.getOrDefault("X-Amz-Credential")
  valid_616896 = validateParameter(valid_616896, JString, required = false,
                                 default = nil)
  if valid_616896 != nil:
    section.add "X-Amz-Credential", valid_616896
  var valid_616897 = header.getOrDefault("X-Amz-Security-Token")
  valid_616897 = validateParameter(valid_616897, JString, required = false,
                                 default = nil)
  if valid_616897 != nil:
    section.add "X-Amz-Security-Token", valid_616897
  var valid_616898 = header.getOrDefault("X-Amz-Algorithm")
  valid_616898 = validateParameter(valid_616898, JString, required = false,
                                 default = nil)
  if valid_616898 != nil:
    section.add "X-Amz-Algorithm", valid_616898
  var valid_616899 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616899 = validateParameter(valid_616899, JString, required = false,
                                 default = nil)
  if valid_616899 != nil:
    section.add "X-Amz-SignedHeaders", valid_616899
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_616900 = formData.getOrDefault("DBInstanceIdentifier")
  valid_616900 = validateParameter(valid_616900, JString, required = true,
                                 default = nil)
  if valid_616900 != nil:
    section.add "DBInstanceIdentifier", valid_616900
  var valid_616901 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_616901 = validateParameter(valid_616901, JString, required = false,
                                 default = nil)
  if valid_616901 != nil:
    section.add "DBSnapshotIdentifier", valid_616901
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616902: Call_PostStopDBInstance_616888; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_616902.validator(path, query, header, formData, body)
  let scheme = call_616902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616902.url(scheme.get, call_616902.host, call_616902.base,
                         call_616902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616902, url, valid)

proc call*(call_616903: Call_PostStopDBInstance_616888;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616904 = newJObject()
  var formData_616905 = newJObject()
  add(formData_616905, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_616905, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_616904, "Action", newJString(Action))
  add(query_616904, "Version", newJString(Version))
  result = call_616903.call(nil, query_616904, nil, formData_616905, nil)

var postStopDBInstance* = Call_PostStopDBInstance_616888(
    name: "postStopDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopDBInstance",
    validator: validate_PostStopDBInstance_616889, base: "/",
    url: url_PostStopDBInstance_616890, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBInstance_616871 = ref object of OpenApiRestCall_610658
proc url_GetStopDBInstance_616873(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBInstance_616872(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_616874 = query.getOrDefault("DBInstanceIdentifier")
  valid_616874 = validateParameter(valid_616874, JString, required = true,
                                 default = nil)
  if valid_616874 != nil:
    section.add "DBInstanceIdentifier", valid_616874
  var valid_616875 = query.getOrDefault("DBSnapshotIdentifier")
  valid_616875 = validateParameter(valid_616875, JString, required = false,
                                 default = nil)
  if valid_616875 != nil:
    section.add "DBSnapshotIdentifier", valid_616875
  var valid_616876 = query.getOrDefault("Action")
  valid_616876 = validateParameter(valid_616876, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_616876 != nil:
    section.add "Action", valid_616876
  var valid_616877 = query.getOrDefault("Version")
  valid_616877 = validateParameter(valid_616877, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616877 != nil:
    section.add "Version", valid_616877
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616878 = header.getOrDefault("X-Amz-Signature")
  valid_616878 = validateParameter(valid_616878, JString, required = false,
                                 default = nil)
  if valid_616878 != nil:
    section.add "X-Amz-Signature", valid_616878
  var valid_616879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616879 = validateParameter(valid_616879, JString, required = false,
                                 default = nil)
  if valid_616879 != nil:
    section.add "X-Amz-Content-Sha256", valid_616879
  var valid_616880 = header.getOrDefault("X-Amz-Date")
  valid_616880 = validateParameter(valid_616880, JString, required = false,
                                 default = nil)
  if valid_616880 != nil:
    section.add "X-Amz-Date", valid_616880
  var valid_616881 = header.getOrDefault("X-Amz-Credential")
  valid_616881 = validateParameter(valid_616881, JString, required = false,
                                 default = nil)
  if valid_616881 != nil:
    section.add "X-Amz-Credential", valid_616881
  var valid_616882 = header.getOrDefault("X-Amz-Security-Token")
  valid_616882 = validateParameter(valid_616882, JString, required = false,
                                 default = nil)
  if valid_616882 != nil:
    section.add "X-Amz-Security-Token", valid_616882
  var valid_616883 = header.getOrDefault("X-Amz-Algorithm")
  valid_616883 = validateParameter(valid_616883, JString, required = false,
                                 default = nil)
  if valid_616883 != nil:
    section.add "X-Amz-Algorithm", valid_616883
  var valid_616884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616884 = validateParameter(valid_616884, JString, required = false,
                                 default = nil)
  if valid_616884 != nil:
    section.add "X-Amz-SignedHeaders", valid_616884
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616885: Call_GetStopDBInstance_616871; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_616885.validator(path, query, header, formData, body)
  let scheme = call_616885.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616885.url(scheme.get, call_616885.host, call_616885.base,
                         call_616885.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616885, url, valid)

proc call*(call_616886: Call_GetStopDBInstance_616871;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616887 = newJObject()
  add(query_616887, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_616887, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_616887, "Action", newJString(Action))
  add(query_616887, "Version", newJString(Version))
  result = call_616886.call(nil, query_616887, nil, nil, nil)

var getStopDBInstance* = Call_GetStopDBInstance_616871(name: "getStopDBInstance",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBInstance", validator: validate_GetStopDBInstance_616872,
    base: "/", url: url_GetStopDBInstance_616873,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token", ContentSha256 = "X-Amz-Content-Sha256"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  headers[$ContentSha256] = hash(text, SHA256)
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
